cscope 15 $HOME/work/lgw-dragino-gwd/dragino-gw-fwd/src -q 0000014936 0002096841
	@fwd/inc/aes.h

31 #i‚de‡
AES_H


32 
	#AES_H


	)

34 #ifde‡
__˝lu•lus


39 
	#AES_ENC_PREKEYED


	)

42 
	#AES_DEC_PREKEYED


	)

45 
	#AES_ENC_128_OTFK


	)

48 
	#AES_DEC_128_OTFK


	)

51 
	#AES_ENC_256_OTFK


	)

54 
	#AES_DEC_256_OTFK


	)

57 
	#N_ROW
 4

	)

58 
	#N_COL
 4

	)

59 
	#N_BLOCK
 (
N_ROW
 * 
N_COL
)

	)

60 
	#N_MAX_ROUNDS
 14

	)

62 
	tuöt_8t
;

64 
uöt_8t
 
	tªtu∫_ty≥
;

70 
uöt_8t
 
	tÀngth_ty≥
;

73 { 
uöt_8t
 
ksch
[(
N_MAX_ROUNDS
 + 1Ë* 
N_BLOCK
];

74 
uöt_8t
 
∫d
;

75 } 
	t´s_c⁄ãxt
;

85 #i‡
deföed
–
AES_ENC_PREKEYED
 ) || deföed–
AES_DEC_PREKEYED
 )

87 
ªtu∫_ty≥
 
´s_£t_key
–c⁄° 
key
[],

88 
Àngth_ty≥
 
keyÀn
,

89 
´s_c⁄ãxt
 
˘x
[1] );

92 #i‡
deföed
–
AES_ENC_PREKEYED
 )

94 
ªtu∫_ty≥
 
´s_í¸y±
–c⁄° 
ö
[
N_BLOCK
],

95 
out
[
N_BLOCK
],

96 c⁄° 
´s_c⁄ãxt
 
˘x
[1] );

98 
ªtu∫_ty≥
 
´s_cbc_í¸y±
–c⁄° *
ö
,

99 *
out
,

100 
n_block
,

101 
iv
[
N_BLOCK
],

102 c⁄° 
´s_c⁄ãxt
 
˘x
[1] );

105 #i‡
deföed
–
AES_DEC_PREKEYED
 )

107 
ªtu∫_ty≥
 
´s_de¸y±
–c⁄° 
ö
[
N_BLOCK
],

108 
out
[
N_BLOCK
],

109 c⁄° 
´s_c⁄ãxt
 
˘x
[1] );

111 
ªtu∫_ty≥
 
´s_cbc_de¸y±
–c⁄° *
ö
,

112 *
out
,

113 
n_block
,

114 
iv
[
N_BLOCK
],

115 c⁄° 
´s_c⁄ãxt
 
˘x
[1] );

138 #i‡
deföed
–
AES_ENC_128_OTFK
 )

139 
´s_í¸y±_128
–c⁄° 
ö
[
N_BLOCK
],

140 
out
[
N_BLOCK
],

141 c⁄° 
key
[
N_BLOCK
],

142 
uöt_8t
 
o_key
[
N_BLOCK
] );

145 #i‡
deföed
–
AES_DEC_128_OTFK
 )

146 
´s_de¸y±_128
–c⁄° 
ö
[
N_BLOCK
],

147 
out
[
N_BLOCK
],

148 c⁄° 
key
[
N_BLOCK
],

149 
o_key
[
N_BLOCK
] );

152 #i‡
deföed
–
AES_ENC_256_OTFK
 )

153 
´s_í¸y±_256
–c⁄° 
ö
[
N_BLOCK
],

154 
out
[
N_BLOCK
],

155 c⁄° 
key
[2 * 
N_BLOCK
],

156 
o_key
[2 * 
N_BLOCK
] );

159 #i‡
deföed
–
AES_DEC_256_OTFK
 )

160 
´s_de¸y±_256
–c⁄° 
ö
[
N_BLOCK
],

161 
out
[
N_BLOCK
],

162 c⁄° 
key
[2 * 
N_BLOCK
],

163 
o_key
[2 * 
N_BLOCK
] );

166 #ifde‡
__˝lu•lus


	@fwd/inc/base64.h

16 #i‚de‡
_BASE64_H


17 
	#_BASE64_H


	)

22 
	~<°döt.h
>

35 
bö_to_b64_n›ad
(c⁄° 
uöt8_t
 * 
ö
, 
size
, * 
out
, 
max_Àn
);

45 
b64_to_bö_n›ad
(c⁄° * 
ö
, 
size
, 
uöt8_t
 * 
out
, 
max_Àn
);

52 
bö_to_b64
(c⁄° 
uöt8_t
 * 
ö
, 
size
, * 
out
, 
max_Àn
);

57 
b64_to_bö
(c⁄° * 
ö
, 
size
, 
uöt8_t
 * 
out
, 
max_Àn
);

	@fwd/inc/cmac.h

2 #i‚de‡
_CMAC_H_


3 
	#_CMAC_H_


	)

5 
	~<°döt.h
>

6 
	~"´s.h
"

8 
	#AES_CMAC_KEY_LENGTH
 16

	)

9 
	#AES_CMAC_DIGEST_LENGTH
 16

	)

11 
	s_AES_CMAC_CTX
 {

12 
´s_c⁄ãxt
 
	mrijnd´l
;

13 
uöt8_t
 
	mX
[16];

14 
uöt8_t
 
	mM_œ°
[16];

15 
uöt32_t
 
	mM_n
;

16 } 
	tAES_CMAC_CTX
;

21 
AES_CMAC_Inô
(
AES_CMAC_CTX
 * 
˘x
);

22 
AES_CMAC_SëKey
(
AES_CMAC_CTX
 * 
˘x
, c⁄° 
uöt8_t
 
key
[
AES_CMAC_KEY_LENGTH
]);

23 
AES_CMAC_Upd©e
(
AES_CMAC_CTX
 * 
˘x
, c⁄° 
uöt8_t
 * 
d©a
, 
uöt32_t
 
Àn
);

25 
AES_CMAC_FöÆ
(
uöt8_t
 
dige°
[
AES_CMAC_DIGEST_LENGTH
], 
AES_CMAC_CTX
 * 
˘x
);

	@fwd/inc/compiler.h

26 #i‚de‡
_LGW_COMPILER_H


27 
	#_LGW_COMPILER_H


	)

29 #ifde‡
HAVE_ATTRIBUTE_Æways_ölöe


30 
	#f‹˚_ölöe
 
	`__©åibuã__
((
Æways_ölöe
)Ë
ölöe


	)

32 
	#f‹˚_ölöe
 
ölöe


	)

35 #ifde‡
HAVE_ATTRIBUTE_puª


36 
	#©åibuã_puª
 
	`__©åibuã__
((
puª
))

	)

38 
	#©åibuã_puª


	)

41 #ifde‡
HAVE_ATTRIBUTE_c⁄°


42 
	#©åibuã_c⁄°
 
	`__©åibuã__
((c⁄°))

	)

44 
	#©åibuã_c⁄°


	)

47 #ifde‡
HAVE_ATTRIBUTE_dïªˇãd


48 
	#©åibuã_dïªˇãd
 
	`__©åibuã__
((
dïªˇãd
))

	)

50 
	#©åibuã_dïªˇãd


	)

53 #ifde‡
HAVE_ATTRIBUTE_unu£d


54 
	#©åibuã_unu£d
 
	`__©åibuã__
((
unu£d
))

	)

56 
	#©åibuã_unu£d


	)

59 #ifde‡
HAVE_ATTRIBUTE_mÆloc


60 
	#©åibuã_mÆloc
 
	`__©åibuã__
((
mÆloc
))

	)

62 
	#©åibuã_mÆloc


	)

65 #ifde‡
HAVE_ATTRIBUTE_£¡öñ


66 
	#©åibuã_£¡öñ
 
	`__©åibuã__
((
£¡öñ
))

	)

68 
	#©åibuã_£¡öñ


	)

71 #ifde‡
HAVE_ATTRIBUTE_w¨n_unu£d_ªsu…


72 
	#©åibuã_w¨n_unu£d_ªsu…
 
	`__©åibuã__
((
w¨n_unu£d_ªsu…
))

	)

74 
	#©åibuã_w¨n_unu£d_ªsu…


	)

77 #ifde‡
HAVE_ATTRIBUTE_may_Æüs


78 
	#©åibuã_may_Æüs
 
	`__©åibuã__
((
may_Æüs
))

	)

80 
	#©åibuã_may_Æüs


	)

83 #ifde‡
HAVE_ATTRIBUTE_n‹ëu∫


84 
	#©åibuã_n‹ëu∫
 
	`__©åibuã__
((
n‹ëu∫
))

	)

86 
	#©åibuã_n‹ëu∫


	)

	@fwd/inc/db.h

27 #i‚de‡
_LGW_DB_H


28 
	#_LGW_DB_H


	)

30 
	~<°dboﬁ.h
>

32 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

36 
	#LGW_DB_FILE
 "/tmp/lgwdb.sqlôe"

	)

38 
	slgw_db_íåy
 {

39 
lgw_db_íåy
 *
√xt
;

40 *
key
;

41 
d©a
[0];

45 
lgw_db_öô
();

48 
boﬁ
 
lgw_db_key_exi°
(c⁄° *
key
);

51 
lgw_db_gë
(c⁄° *
Ámûy
, c⁄° *
key
, *
vÆue
, 
vÆuñí
);

64 
lgw_db_gë_Æloˇãd
(c⁄° *
Ámûy
, c⁄° *
key
, **
out
);

67 
lgw_db_put
(c⁄° *
Ámûy
, c⁄° *
key
, c⁄° *
vÆue
);

70 
lgw_db_dñ
(c⁄° *
Ámûy
, c⁄° *
key
);

83 
lgw_db_dñåì
(c⁄° *
Ámûy
, c⁄° *
keyåì
);

97 
lgw_db_íåy
 *
lgw_db_gëåì
(c⁄° *
Ámûy
, c⁄° *
keyåì
);

107 
lgw_db_íåy
 *
lgw_db_gëåì_by_¥efix
(c⁄° *
Ámûy
, c⁄° *
key_¥efix
);

110 
lgw_db_‰ìåì
(
lgw_db_íåy
 *
íåy
);

112 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

	@fwd/inc/endianext.h

11 #i‚de‡
ENDIANEXT_H_


12 
	#ENDIANEXT_H_


	)

14 
	~<°dboﬁ.h
>

24 
boﬁ
 
isBigEndün
();

25 
boﬁ
 
isMiddÀEndün
();

26 
boﬁ
 
isLôéeEndün
();

29 *
sw≠˝y
(*
de°
, c⁄° *
§c
, 
size_t
 
n
);

34 *
tobe˝y
(*
de°
, c⁄° *
§c
, 
size_t
 
n
);

	@fwd/inc/fwd.h

27 #i‚de‡
_DR_PKT_FWD_H_


28 
	#_DR_PKT_FWD_H_


	)

31 
	~"compûî.h
"

32 
	~"loggî.h
"

33 
	~"lökedli°s.h
"

34 
	~"ídü√xt.h
"

35 
	~"utûôõs.h
"

36 
	~"lgwmm.h
"

37 
	~"gwcfg.h
"

39 
	#PROTOCOL_VERSION
 2

	)

40 
	#PROTOCOL_JSON_RXPK_FRAME_FORMAT
 1

	)

42 
	#MIN_LORA_PREAMB
 6

	)

43 
	#STD_LORA_PREAMB
 8

	)

44 
	#MIN_FSK_PREAMB
 3

	)

45 
	#STD_FSK_PREAMB
 4

	)

47 
	#DEFAULT_TRY_TIMES
 5

	)

49 
	#PATH_LEN
 64

	)

51 
	#DEFAULT_GS_SERVER
 127.0.0.1

	)

53 
	#DEFAULT_GS_PORT_UP
 1780

	)

55 
	#DEFAULT_GS_PORT_DW
 1782

	)

57 
	#DEFAULT_KEEPALIVE
 5

	)

59 
	#DEFAULT_PULL_INTERVAL
 5

	)

61 
	#DEFAULT_STAT_INTERVAL
 30

	)

63 
	#DEFAULT_PUSH_TIMEOUT_MS
 100

	)

65 
	#DEFAULT_PULL_TIMEOUT_MS
 200

	)

67 
	#DEFAULT_FETCH_SLEEP_MS
 10

	)

69 
	#DEFAULT_BEACON_POLL_MS
 50

	)

71 
	#DEFAULT_RXPKTS_LIST_SIZE
 4

	)

73 
	#PKT_PUSH_DATA
 0

	)

74 
	#PKT_PUSH_ACK
 1

	)

75 
	#PKT_PULL_DATA
 2

	)

76 
	#PKT_PULL_RESP
 3

	)

77 
	#PKT_PULL_ACK
 4

	)

78 
	#PKT_TX_ACK
 5

	)

80 
	#TX_BUFF_SIZE
 ((540 * 
NB_PKT_MAX
Ë+ 30 + 
STATUS_SIZE
)

	)

81 
	#ACK_BUFF_SIZE
 64

	)

83 
	#UNIX_GPS_EPOCH_OFFSET
 315964800

	)

85 
	#XERR_INIT_AVG
 128

	)

86 
	#XERR_FILT_COEF
 256

	)

88 
	#GPS_REF_MAX_AGE
 30

	)

104 
lgw_ªgi°î_©exô
((*
func
)());

119 
	`lgw_ªgi°î_˛ónup
((*
func
)());

125 
	`lgw_uƒegi°î_©exô
((*
func
)());

130 
	`£nd_tx_ack
(
£rv_s
* 
£rv
, 
uöt8_t
 
tokí_h
, uöt8_à
tokí_l
, 
jô_îr‹_e
 
îr‹
, 
öt32_t
 
îr‹_vÆue
);

135 
	`¥öt_tx_°©us
(
uöt8_t
 
tx_°©us
);

140 
	`dif·ime•ec
(
time•ec
 
íd
, time•e¯
begönög
);

145 
	`gë_tx_gaö_lut_ödex
(
uöt8_t
 
rf_chaö
, 
öt8_t
 
rf_powî
, uöt8_à* 
lut_ödex
);

150 
	`gë_rxpkt
(
£rv_s
* 
£rv
);

	@fwd/inc/ghost.h

11 #i‚de‡
_GHOST_H_


12 
	#_GHOST_H_


	)

14 
	~"fwd.h
"

30 
	#GHST_MIN_PACKETSIZE
 38

	)

31 
	#GHST_REQ_BUFFSIZE
 36

	)

32 
	#GHST_RX_BUFFSIZE
 320

	)

33 
	#GHST_TX_BUFFSIZE
 320

	)

34 
	#GHST_NM_RCV
 12

	)

35 
	#NODE_CALL_SECS
 120

	)

41 
gho°_°¨t
(c⁄° *
gho°_addr
, c⁄° *
gho°_p‹t
,

42 c⁄° 
co‹d_s
 
ªfco‹
, c⁄° *
gwid
);

43 
gho°_°›
();

46 
gho°_gë
(
max_pkt
, 
lgw_pkt_rx_s
 *
pkt_d©a
);

50 
gho°_put
();

	@fwd/inc/gwcfg.h

27 #i‚de‡
_GW_H


28 
	#_GW_H


	)

30 
	~<±hªad.h
>

31 
	~<£m≠h‹e.h
>

32 
	~<time.h
>

33 
	~<sys/time.h
>

35 
	~"lökedli°s.h
"

36 
	~"jôqueue.h
"

37 
	~"°©s.h
"

39 
	~"l‹agw_gps.h
"

41 
	#DEFAULT_BEACON_FREQ_HZ
 869525000

	)

42 
	#DEFAULT_BEACON_FREQ_NB
 1

	)

43 
	#DEFAULT_BEACON_FREQ_STEP
 0

	)

44 
	#DEFAULT_BEACON_DATARATE
 9

	)

45 
	#DEFAULT_BEACON_BW_HZ
 125000

	)

46 
	#DEFAULT_BEACON_POWER
 14

	)

47 
	#DEFAULT_BEACON_INFODESC
 0

	)

49 
	#NB_PKT_MAX
 8

	)

52 
	m£mãch
,

53 
	mân
,

54 
	mmqâ
,

55 
	mpkt
,

56 
	mgwåaf


57 } 
	t£rv_ty≥
;

60 
	mEU
,

61 
	mUS
,

62 
	mCN
,

63 
	mAU


64 } 
	tªgi⁄_s
;

67 
	mrxpkts
,

68 
	m°©s
,

69 
	m£mãch_up
,

70 
	m£mãch_down
,

71 
	mân_up
,

72 
	mân_down
,

73 
	mpkâøf
,

74 
	mgps
,

75 
	mjô
,

76 
	mtimîsync
,

77 
	mw©chdog


78 } 
	tthªad_ty≥
;

80 
	s_thªad_öfo
 {

81 
LGW_LIST_ENTRY
(
_thªad_öfo
Ë
	mli°
;

82 * 
	m«me
;

83 
±hªad_t
* 
	mid
;

84 
thªad_ty≥
 
	mty≥
;

85 
boﬁ
 
	mrunög
;

86 
time_t
 
	mdog
;

87 
£m_t
* 
	m£ma
;

88 } 
	tthªad_öfo
;

90 
	s_rxpkts
 {

91 
LGW_LIST_ENTRY
(
_rxpkts
Ë
	mli°
;

93 
uöt8_t
 
	m°amps
;

94 
uöt8_t
 
	mnb_pkt
;

95 
uöt8_t
 
	mböd
;

96 
lgw_pkt_rx_s
 
	mrxpkt
[
NB_PKT_MAX
];

97 } 
	trxpkts_s
;

100 
	mNOTHING
,

101 
	mEXCLUDE
,

102 
	mINCLUDE


103 } 
	tfûãr_e
;

107 
	mgwcfg
[32];

108 
	msxcfg
[48];

109 } 
	tc⁄fs_s
;

112 * 
	m£ssi⁄
;

113 
	mu±›ic
[64];

114 
	md¡›ic
[64];

115 } 
	tmqâöfo_s
;

118 
	maddr
[64];

119 
	mp‹t_up
[8];

120 
	mp‹t_down
[8];

121 
	msock_up
;

122 
	msock_down
;

123 
	mpuŒ_öãrvÆ
;

124 
timevÆ
 
	mpush_timeout_hÆf
;

125 
timevÆ
 
	mpuŒ_timeout
;

126 
mqâöfo_s
 *
	mmqâ
;

127 } 
	t£rv_√t_s
;

129 
LGW_LIST_HEAD
(
rxpkts_li°
, 
_rxpkts
);

135 
	s_£rvî
 {

136 
LGW_LIST_ENTRY
(
_£rvî
Ë
	mli°
;

138 
lgw_pkt_rx_s
 
	mrxpkt
[
NB_PKT_MAX
];

141 
£rv_ty≥
 
	mty≥
;

142 
uöt8_t
 
	m°amp
;

143 
boﬁ
 
	míabÀd
;

144 
	m«me
[32];

145 *
	mkey
;

146 } 
	möfo
;

149 
fûãr_e
 
	mÂ‹t
;

150 
fûãr_e
 
	mdevaddr
;

151 
boﬁ
 
	mfwd_vÆid_pkt
;

152 
boﬁ
 
	mfwd_îr‹_pkt
;

153 
boﬁ
 
	mfwd_no¸c_pkt
;

154 } 
	mfûãr
;

157 
boﬁ
 
	mlive
;

158 
boﬁ
 
	mc⁄√˘ög
;

159 
	mmax_°Æl
;

160 
	m°Æl_time
;

161 
time_t
 
	mc⁄è˘
;

162 
time_t
 
	m°¨tup_time
;

163 } 
	m°©e
;

166 
±hªad_t
 
	mt_down
;

167 
±hªad_t
 
	mt_up
;

168 
£m_t
 
	m£ma
;

169 
boﬁ
 
	m°›_sig
;

170 } 
	mthªad
;

172 
£rv_√t_s
* 
	m√t
;

174 
ªp‹t_s
* 
	mªp‹t
;

176 } 
	t£rv_s
;

178 
LGW_LIST_HEAD_NOLOCK
(
£rv_li°
, 
_£rvî
);

182 
	mg©eway_id
[17];

183 
	m∂©f‹m
[24];

184 
	memaû
[40];

185 
	mdes¸ùti⁄
[64];

186 
uöt64_t
 
	mlgwm
;

187 
uöt32_t
 
	m√t_mac_h
;

188 
uöt32_t
 
	m√t_mac_l
;

189 } 
	möfo
;

192 
	mbﬂrd
[16];

193 
boﬁ
 
	mxèl_c‹ª˘_ok
;

194 
	mxèl_c‹ª˘
;

195 
uöt8_t
 
	m™ã¬a_gaö
;

196 
c⁄fs_s
 
	mc⁄fs
;

197 
±hªad_muãx_t
 
	mmx_xc‹r
;

198 
±hªad_muãx_t
 
	mmx_c⁄˚¡
;

199 } 
	mhÆ
;

202 
boﬁ
 
	mødio°ªam_íabÀd
;

203 
boﬁ
 
	mgho°°ªam_íabÀd
;

204 
boﬁ
 
	mwd_íabÀd
;

205 
boﬁ
 
	mmac_decoded
;

206 
boﬁ
 
	mmac2fûe
;

207 
boﬁ
 
	mmac2db
;

208 
boﬁ
 
	mcu°om_dow∆ök
;

209 
time_t
 
	mœ°_lo›
;

210 
uöt32_t
 
	mtime_öãrvÆ
;

211 
	mgho°_ho°
[32];

212 
	mgho°_p‹t
[16];

213 
ªgi⁄_s
 
	mªgi⁄
;

214 
uöt32_t
 
	mautoquô_thªshﬁd
;

215 } 
	mcfg
;

219 
	mgps_ây_∑th
[64];

220 
	mgps_ây_fd
;

221 
boﬁ
 
	mgps_íabÀd
;

222 
boﬁ
 
	mgps_ªf_vÆid
;

223 
boﬁ
 
	mgps_Áke_íabÀ
;

224 
åef
 
	mtime_ª„ªn˚_gps
;

225 
co‹d_s
 
	mª„ªn˚_co‹d
;

226 
boﬁ
 
	mgps_co‹d_vÆid
;

227 
co‹d_s
 
	mmós_gps_co‹d
;

228 
co‹d_s
 
	mmós_gps_îr
;

230 
±hªad_muãx_t
 
	mmx_timîef
;

231 
±hªad_muãx_t
 
	mmx_mós_gps
;

232 } 
	mgps
;

235 
lgw_tx_gaö_lut_s
 
	mtxlut
[
LGW_RF_CHAIN_NB
];

236 
uöt32_t
 
	mtx_‰eq_mö
[
LGW_RF_CHAIN_NB
];

237 
uöt32_t
 
	mtx_‰eq_max
[
LGW_RF_CHAIN_NB
];

238 
jô_queue_s
 
	mjô_queue
[
LGW_RF_CHAIN_NB
];

239 } 
	mtx
;

242 
uöt32_t
 
	mbóc⁄_≥riod
;

243 
uöt32_t
 
	mbóc⁄_‰eq_hz
;

244 
uöt8_t
 
	mbóc⁄_‰eq_nb
;

245 
uöt32_t
 
	mbóc⁄_‰eq_°ï
;

246 
uöt8_t
 
	mbóc⁄_d©¨©e
;

247 
uöt32_t
 
	mbóc⁄_bw_hz
;

248 
öt8_t
 
	mbóc⁄_powî
;

249 
uöt8_t
 
	mbóc⁄_öfodesc
;

250 
uöt32_t
 
	mmós_nb_bóc⁄_queued
;

251 
uöt32_t
 
	mmós_nb_bóc⁄_£¡
;

252 
uöt32_t
 
	mmós_nb_bóc⁄_ªje˘ed
;

253 } 
	mbóc⁄
;

256 
boﬁ
 
	mloggî_íabÀd
;

257 
	mdebug_mask
;

258 *
	mlogfûe
;

259 
uöt32_t
 
	mnb_pkt_log
[
LGW_IF_CHAIN_NB
];

260 
uöt32_t
 
	mnb_pkt_ª˚ived_l‹a
;

261 
uöt32_t
 
	mnb_pkt_ª˚ived_fsk
;

262 
uöt32_t
 
	mnb_pkt_ª˚ived_ªf
[16];

263 
°©_dw_s
 
	m°©_dw
;

264 
±hªad_muãx_t
 
	mmx_ªp‹t
;

265 } 
	mlog
;

267 
±hªad_muãx_t
 
	mmx_böd_lock
;

269 
rxpkts_li°
 
	mrxpkts_li°
;

271 
£rv_li°
 
	m£rv_li°
;

272 } 
	tgw_s
;

274 
	#INIT_GW
 
gw_s
 
GW
 = { .
öfo
.
lgwm
 = 0, \

275 .
hÆ
.
bﬂrd
 = "sx1302", \

276 .
hÆ
.
c⁄fs
 = { .
gwcfg
 = "/etc/lora/gwcfg.json", \

277 .
sxcfg
 = "/etc/lora/sxcfg.json", }, \

278 .
hÆ
.
mx_c⁄˚¡
 = 
PTHREAD_MUTEX_INITIALIZER
, \

279 .
hÆ
.
mx_xc‹r
 = 
PTHREAD_MUTEX_INITIALIZER
, \

280 .
hÆ
.
xèl_c‹ª˘_ok
 = 
Ál£
, \

281 .
hÆ
.
xèl_c‹ª˘
 = 1.0, \

282 .
cfg
.
wd_íabÀd
 = 
Ál£
, \

283 .
cfg
.
ødio°ªam_íabÀd
 = 
åue
, \

284 .
cfg
.
gho°°ªam_íabÀd
 = 
Ál£
, \

285 .
cfg
.
autoquô_thªshﬁd
 = 0, \

286 .
cfg
.
mac_decoded
 = 
Ál£
, \

287 .
cfg
.
mac2fûe
 = 
Ál£
, \

288 .
cfg
.
mac2db
 = 
Ál£
, \

289 .
cfg
.
cu°om_dow∆ök
 = 
Ál£
, \

290 .
cfg
.
time_öãrvÆ
 = 30, \

291 .
gps
.
gps_ây_∑th
[0] = 0, \

292 .
gps
.
mx_timîef
 = 
PTHREAD_MUTEX_INITIALIZER
, \

293 .
gps
.
mx_mós_gps
 = 
PTHREAD_MUTEX_INITIALIZER
, \

294 .
bóc⁄
.
bóc⁄_≥riod
 = 0, \

295 .
bóc⁄
.
bóc⁄_‰eq_hz
 = 
DEFAULT_BEACON_FREQ_HZ
, \

296 .
bóc⁄
.
bóc⁄_‰eq_nb
 = 
DEFAULT_BEACON_FREQ_NB
, \

297 .
bóc⁄
.
bóc⁄_‰eq_°ï
 = 
DEFAULT_BEACON_FREQ_STEP
, \

298 .
bóc⁄
.
bóc⁄_d©¨©e
 = 
DEFAULT_BEACON_DATARATE
, \

299 .
bóc⁄
.
bóc⁄_bw_hz
 = 
DEFAULT_BEACON_FREQ_HZ
, \

300 .
bóc⁄
.
bóc⁄_powî
 = 
DEFAULT_BEACON_POWER
, \

301 .
bóc⁄
.
bóc⁄_öfodesc
 = 
DEFAULT_BEACON_INFODESC
, \

302 .
bóc⁄
.
mós_nb_bóc⁄_queued
 = 0, \

303 .
bóc⁄
.
mós_nb_bóc⁄_£¡
 = 0, \

304 .
bóc⁄
.
mós_nb_bóc⁄_ªje˘ed
 = 0, \

305 .
log
.
loggî_íabÀd
 = 0, \

306 .
log
.
debug_mask
 = 0, \

307 .
log
.
nb_pkt_ª˚ived_l‹a
 = 0, \

308 .
log
.
nb_pkt_ª˚ived_fsk
 = 0, \

309 .
log
.
mx_ªp‹t
 = 
PTHREAD_MUTEX_INITIALIZER
, \

310 .
mx_böd_lock
 = 
PTHREAD_MUTEX_INITIALIZER
, \

311 .
£rv_li°
 = 
LGW_LIST_HEAD_NOLOCK_INIT_VALUE
, \

312 .
rxpkts_li°
 = 
LGW_LIST_HEAD_INIT_VALUE
, \

313 }

	)

315 
	#DECLARE_GW
 
gw_s
 
GW


	)

320 
∑r£cfg
();

	@fwd/inc/gwtraf_service.h

26 #i‚de‡
_GWTRAF_PROTO_H


27 
	#_GWTRAF_PROTO_H


	)

28 
gwåaf_°¨t
(
£rv_s
*);

29 
gwåaf_°›
(
£rv_s
*);

	@fwd/inc/jitqueue.h

16 #i‚de‡
_LORA_PKTFWD_JIT_H


17 
	#_LORA_PKTFWD_JIT_H


	)

22 
	~<°döt.h
>

23 
	~<°dboﬁ.h
>

25 
	~"l‹agw_hÆ.h
"

30 
	#JIT_QUEUE_MAX
 32

	)

31 
	#JIT_NUM_BEACON_IN_QUEUE
 3

	)

36 
	ejô_pkt_ty≥_e
 {

37 
	mJIT_PKT_TYPE_DOWNLINK_CLASS_A
,

38 
	mJIT_PKT_TYPE_DOWNLINK_CLASS_B
,

39 
	mJIT_PKT_TYPE_DOWNLINK_CLASS_C
,

40 
	mJIT_PKT_TYPE_BEACON


43 
	ejô_îr‹_e
 {

44 
	mJIT_ERROR_OK
,

45 
	mJIT_ERROR_TOO_LATE
,

46 
	mJIT_ERROR_TOO_EARLY
,

47 
	mJIT_ERROR_FULL
,

48 
	mJIT_ERROR_EMPTY
,

49 
	mJIT_ERROR_COLLISION_PACKET
,

50 
	mJIT_ERROR_COLLISION_BEACON
,

51 
	mJIT_ERROR_TX_FREQ
,

52 
	mJIT_ERROR_TX_POWER
,

53 
	mJIT_ERROR_GPS_UNLOCKED
,

54 
	mJIT_ERROR_INVALID


57 
	sjô_node_s
 {

59 
lgw_pkt_tx_s
 
	mpkt
;

60 
jô_pkt_ty≥_e
 
	mpkt_ty≥
;

63 
uöt32_t
 
	m¥e_dñay
;

64 
uöt32_t
 
	mpo°_dñay
;

67 
	sjô_queue_s
 {

68 
uöt8_t
 
	mnum_pkt
;

69 
uöt8_t
 
	mnum_bóc⁄
;

70 
jô_node_s
 
	mnodes
[
JIT_QUEUE_MAX
];

82 
boﬁ
 
jô_queue_is_fuŒ
(
jô_queue_s
 *
queue
);

90 
boﬁ
 
jô_queue_is_em±y
(
jô_queue_s
 *
queue
);

99 
jô_queue_öô
(
jô_queue_s
 *
queue
);

114 
jô_îr‹_e
 
jô_íqueue
(
jô_queue_s
 *
queue
, 
uöt32_t
 
time_us
, 
lgw_pkt_tx_s
 *
∑ckë
, 
jô_pkt_ty≥_e
 
pkt_ty≥
);

128 
jô_îr‹_e
 
jô_dequeue
(
jô_queue_s
 *
queue
, 
ödex
, 
lgw_pkt_tx_s
 *
∑ckë
, 
jô_pkt_ty≥_e
 *
pkt_ty≥
);

142 
jô_îr‹_e
 
jô_≥ek
(
jô_queue_s
 *
queue
, 
uöt32_t
 
time_us
, *
pkt_idx
);

150 
jô_¥öt_queue
(
jô_queue_s
 *
queue
, 
boﬁ
 
show_Æl
, 
debug_Àvñ
);

	@fwd/inc/lgwmm.h

29 #ifde‡
__˝lu•lus


33 #i‚de‡
_LGW_MM_H


34 
	#_LGW_MM_H


	)

38 *
	$lgw_°d_mÆloc
(
size_t
 
size
Ë
©åibuã_mÆloc
;

39 *
	$lgw_°d_ˇŒoc
(
size_t
 
nmemb
, size_à
size
Ë
©åibuã_mÆloc
;

40 *
	`lgw_°d_ªÆloc
(*
±r
, 
size_t
 
size
);

41 
	`lgw_°d_‰ì
(*
±r
);

43 *
	$__lgw_ˇŒoc
(
size_t
 
nmemb
, size_à
size
, c⁄° *
fûe
, 
löío
, c⁄° *
func
Ë
©åibuã_mÆloc
;

44 *
	$__lgw_mÆloc
(
size_t
 
size
, c⁄° *
fûe
, 
löío
, c⁄° *
func
Ë
©åibuã_mÆloc
;

45 
	`__lgw_‰ì
(*
±r
, c⁄° *
fûe
, 
löío
, c⁄° *
func
);

46 *
	`__lgw_ªÆloc
(*
±r
, 
size_t
 
size
, c⁄° *
fûe
, 
löío
, c⁄° *
func
);

47 *
	$__lgw_°rdup
(c⁄° *
s
, c⁄° *
fûe
, 
löío
, c⁄° *
func
Ë
©åibuã_mÆloc
;

48 *
	$__lgw_°∫dup
(c⁄° *
s
, 
size_t
 
n
, c⁄° *
fûe
, 
löío
, c⁄° *
func
Ë
©åibuã_mÆloc
;

49 
	$__lgw_a•rötf
(c⁄° *
fûe
, 
löío
, c⁄° *
func
, **
°Ω
, c⁄° *
f‹m©
, ...Ë
	`__©åibuã__
((
	`f‹m©
(
¥ötf
, 5, 6)));

50 
	$__lgw_va•rötf
(**
°Ω
, c⁄° *
f‹m©
, 
va_li°
 
≠
, c⁄° *
fûe
, 
löío
, c⁄° *
func
Ë
	`__©åibuã__
((
	`f‹m©
(
¥ötf
, 2, 0)));

54 
	#lgw_‰ì
(
a
) \

55 
	`__lgw_‰ì
((
a
), 
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
);

	)

65 
	#lgw_mÆloc
(
Àn
) \

66 
	`__lgw_mÆloc
((
Àn
), 
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
)

	)

76 
	#lgw_ˇŒoc
(
num
, 
Àn
) \

77 
	`__lgw_ˇŒoc
((
num
), (
Àn
), 
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
)

	)

89 
	#lgw_ˇŒoc_ˇche
(
num
, 
Àn
) \

90 
	`__lgw_ˇŒoc_ˇche
((
num
), (
Àn
), 
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
)

	)

100 
	#lgw_ªÆloc
(
p
, 
Àn
) \

101 
	`__lgw_ªÆloc
((
p
), (
Àn
), 
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
)

	)

115 
	#lgw_°rdup
(
°r
) \

116 
	`__lgw_°rdup
((
°r
), 
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
)

	)

130 
	#lgw_°∫dup
(
°r
, 
Àn
) \

131 
	`__lgw_°∫dup
((
°r
), (
Àn
), 
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
)

	)

141 
	#lgw_a•rötf
(
ªt
, 
fmt
, ...) \

142 
	`__lgw_a•rötf
(
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
, (
ªt
), (
fmt
), 
__VA_ARGS__
)

	)

152 
	#lgw_va•rötf
(
ªt
, 
fmt
, 
≠
) \

153 
	`__lgw_va•rötf
((
ªt
), (
fmt
), (
≠
), 
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
)

	)

162 
	#lgw_Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
(size)

	)

164 #i‡!
	`deföed
(
lgw_°rdu∑
Ë&& deföed(
__GNUC__
)

172 
	#lgw_°rdu∑
(
s
) \

173 (
__exãnsi⁄__
 \

175 c⁄° *
__ﬁd
 = (
s
); \

176 
size_t
 
__Àn
 = 
	`°æí
(
__ﬁd
) + 1; \

177 *
__√w
 = 
	`__buûtö_Æloˇ
(
__Àn
); \

178 
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

179 
__√w
; \

180 
	}
}))

	)

187 #ifde‡
__˝lu•lus


	@fwd/inc/linkedlists.h

27 #i‚de‡
LGW_LINKEDLISTS_H


28 
	#LGW_LINKEDLISTS_H


	)

44 
	#LGW_LIST_LOCK
(
hód
) \

45 
	`±hªad_muãx_lock
(&(
hód
)->
lock
)

	)

56 
	#LGW_LIST_TRYLOCK
(
hód
) \

57 
	`±hªad_muãx_åylock
(&(
hód
)->
lock
)

	)

67 
	#LGW_LIST_UNLOCK
(
hód
) \

68 
	`±hªad_muãx_u∆ock
(&(
hód
)->
lock
)

	)

89 
	#LGW_LIST_HEAD
(
«me
, 
ty≥
) \

90 
	s«me
 { \

91 
ty≥
 *
fú°
; \

92 
ty≥
 *
œ°
; \

93 
size
; \

94 
±hªad_muãx_t
 
lock
; \

95 }

	)

116 
	#LGW_LIST_HEAD_NOLOCK
(
«me
, 
ty≥
) \

117 
	s«me
 { \

118 
ty≥
 *
fú°
; \

119 
ty≥
 *
œ°
; \

120 
size
; \

121 }

	)

126 
	#LGW_LIST_HEAD_INIT_VALUE
 { \

127 .
fú°
 = 
NULL
, \

128 .
œ°
 = 
NULL
, \

129 .
size
 = 0, \

130 .
lock
 = 
PTHREAD_MUTEX_INITIALIZER
, \

131 }

	)

136 
	#LGW_LIST_HEAD_NOLOCK_INIT_VALUE
 { \

137 .
fú°
 = 
NULL
, \

138 .
œ°
 = 
NULL
, \

139 .
size
 = 0, \

140 }

	)

160 
	#LGW_LIST_HEAD_STATIC
(
«me
, 
ty≥
) \

161 
	s«me
 { \

162 
ty≥
 *
fú°
; \

163 
ty≥
 *
œ°
; \

164 
size
; \

165 
±hªad_muãx_t
 
lock
; \

166 } 
«me
 = 
LGW_LIST_HEAD_INIT_VALUE


	)

173 
	#LGW_LIST_HEAD_NOLOCK_STATIC
(
«me
, 
ty≥
) \

174 
	s«me
 { \

175 
ty≥
 *
fú°
; \

176 
ty≥
 *
œ°
; \

177 
size
; \

178 } 
«me
 = 
LGW_LIST_HEAD_NOLOCK_INIT_VALUE


	)

188 
	#LGW_LIST_HEAD_SET
(
hód
, 
íåy
) do { \

189 (
hód
)->
fú°
 = (
íåy
); \

190 (
hód
)->
œ°
 = (
íåy
); \

191 (
hód
)->
size
 = 0; \

192 
	`±hªad_muãx_öô
(&(
hód
)->
lock
, 
NULL
); \

193 } 0)

	)

203 
	#LGW_LIST_HEAD_SET_NOLOCK
(
hód
, 
íåy
) do { \

204 (
hód
)->
fú°
 = (
íåy
); \

205 (
hód
)->
œ°
 = (
íåy
); \

206 (
hód
)->
size
 = 0; \

207 } 0)

	)

226 
	#LGW_LIST_ENTRY
(
ty≥
) \

228 
ty≥
 *
√xt
; \

229 }

	)

235 
	#LGW_LIST_FIRST
(
hód
Ë((hód)->
fú°
)

	)

241 
	#LGW_LIST_LAST
(
hód
Ë((hód)->
œ°
)

	)

249 
	#LGW_LIST_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
√xt
)

	)

258 
	#LGW_LIST_EMPTY
(
hód
Ë(
	`LGW_LIST_FIRST
(hódË=
NULL
)

	)

289 
	#LGW_LIST_TRAVERSE
(
hód
,
v¨
,
fõld
) \

290 (
v¨
Ë(
hód
)->
fú°
; (v¨); (v¨Ë(v¨)->
fõld
.
√xt
)

	)

325 
	#LGW_LIST_TRAVERSE_SAFE_BEGIN
(
hód
, 
v¨
, 
fõld
) { \

326 
	`ty≥of
((
hód
)Ë
__li°_hód
 = head; \

327 
	`ty≥of
(
__li°_hód
->
fú°
Ë
__li°_√xt
; \

328 
	`ty≥of
(
__li°_hód
->
fú°
Ë
__li°_¥ev
 = 
NULL
; \

329 
	`ty≥of
(
__li°_hód
->
fú°
Ë
__li°_cuºít
; \

330 (
v¨
Ë
__li°_hód
->
fú°
, \

331 
__li°_cuºít
 = (
v¨
), \

332 
__li°_√xt
 = (
v¨
Ë? (v¨)->
fõld
.
√xt
 : 
NULL
; \

333 (
v¨
); \

334 
__li°_¥ev
 = 
__li°_cuºít
, \

335 (
v¨
Ë
__li°_√xt
, \

336 
__li°_cuºít
 = (
v¨
), \

337 
__li°_√xt
 = (
v¨
Ë? (v¨)->
fõld
.
√xt
 : 
NULL
, \

338 (Ë
__li°_¥ev
 \

339 )

	)

351 
	#LGW_LIST_REMOVE_CURRENT
(
fõld
) do { \

352 
__li°_cuºít
->
fõld
.
√xt
 = 
NULL
; \

353 
__li°_cuºít
 = 
__li°_¥ev
; \

354 i‡(
__li°_¥ev
) { \

355 
__li°_¥ev
->
fõld
.
√xt
 = 
__li°_√xt
; \

357 
__li°_hód
->
fú°
 = 
__li°_√xt
; \

359 i‡(!
__li°_√xt
) { \

360 
__li°_hód
->
œ°
 = 
__li°_¥ev
; \

362 } 0)

	)

375 
	#LGW_LIST_MOVE_CURRENT
(
√whód
, 
fõld
) do { \

376 
	`ty≥of
 ((
√whód
)->
fú°
Ë
__exåa˘ed
 = 
__li°_cuºít
; \

377 
	`LGW_LIST_REMOVE_CURRENT
(
fõld
); \

378 
	`LGW_LIST_INSERT_TAIL
((
√whód
), 
__exåa˘ed
, 
fõld
); \

379 } 0)

	)

391 
	#LGW_LIST_REMOVE_HEAD
(
hód
, 
fõld
) ({ \

392 
	`ty≥of
((
hód
)->
fú°
Ë
__cur
 = (head)->first; \

393 i‡(
__cur
) { \

394 (
hód
)->
fú°
 = 
__cur
->
fõld
.
√xt
; \

395 
__cur
->
fõld
.
√xt
 = 
NULL
; \

396 i‡((
hód
)->
œ°
 =
__cur
) \

397 (
hód
)->
œ°
 = 
NULL
; \

399 
__cur
; \

400 })

	)

412 
	#LGW_LIST_REMOVE
(
hód
, 
ñm
, 
fõld
) \

414 
	`ty≥of
(
ñm
Ë
__ñm
 = (elm); \

415 i‡(
__ñm
) { \

416 i‡((
hód
)->
fú°
 =
__ñm
) { \

417 (
hód
)->
fú°
 = 
__ñm
->
fõld
.
√xt
; \

418 
__ñm
->
fõld
.
√xt
 = 
NULL
; \

419 i‡((
hód
)->
œ°
 =
__ñm
) { \

420 (
hód
)->
œ°
 = 
NULL
; \

422 (
hód
)->
size
--; \

424 
	`ty≥of
(
ñm
Ë
__¥ev
 = (
hód
)->
fú°
; \

425 
__¥ev
 && __¥ev->
fõld
.
√xt
 !
__ñm
) { \

426 
__¥ev
 = __¥ev->
fõld
.
√xt
; \

428 i‡(
__¥ev
) { \

429 
__¥ev
->
fõld
.
√xt
 = 
__ñm
->field.next; \

430 
__ñm
->
fõld
.
√xt
 = 
NULL
; \

431 i‡((
hód
)->
œ°
 =
__ñm
) { \

432 (
hód
)->
œ°
 = 
__¥ev
; \

434 (
hód
)->
size
--; \

436 
__ñm
 = 
NULL
; \

440 
__ñm
; \

441 })

	)

452 
	#LGW_LIST_INSERT_BEFORE_CURRENT
(
ñm
, 
fõld
) do { \

453 i‡(
__li°_¥ev
) { \

454 (
ñm
)->
fõld
.
√xt
 = 
__li°_¥ev
->field.next; \

455 
__li°_¥ev
->
fõld
.
√xt
 = 
ñm
; \

457 (
ñm
)->
fõld
.
√xt
 = 
__li°_hód
->
fú°
; \

458 
__li°_hód
->
fú°
 = (
ñm
); \

460 
__li°_¥ev
 = (
ñm
); \

461 } 0)

	)

467 
	#LGW_LIST_TRAVERSE_SAFE_END
 }

	)

476 
	#LGW_LIST_HEAD_INIT
(
hód
) { \

477 (
hód
)->
fú°
 = 
NULL
; \

478 (
hód
)->
œ°
 = 
NULL
; \

479 (
hód
)->
size
 = 0; \

480 
	`±hªad_muãx_öô
(&(
hód
)->
lock
, 
NULL
); \

481 }

	)

491 
	#LGW_LIST_HEAD_DESTROY
(
hód
) { \

492 (
hód
)->
fú°
 = 
NULL
; \

493 (
hód
)->
œ°
 = 
NULL
; \

494 
	`±hªad_muãx_de°roy
(&(
hód
)->
lock
); \

495 }

	)

505 
	#LGW_LIST_HEAD_INIT_NOLOCK
(
hód
) { \

506 (
hód
)->
fú°
 = 
NULL
; \

507 (
hód
)->
œ°
 = 
NULL
; \

508 (
hód
)->
size
 = 0; \

509 }

	)

520 
	#LGW_LIST_INSERT_AFTER
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

521 (
ñm
)->
fõld
.
√xt
 = (
li°ñm
)->field.next; \

522 (
li°ñm
)->
fõld
.
√xt
 = (
ñm
); \

523 i‡((
hód
)->
œ°
 =(
li°ñm
)) \

524 (
hód
)->
œ°
 = (
ñm
); \

525 (
hód
)->
size
++; \

526 } 0)

	)

536 
	#LGW_LIST_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

537 (
ñm
)->
fõld
.
√xt
 = (
hód
)->
fú°
; \

538 (
hód
)->
fú°
 = (
ñm
); \

539 i‡(!(
hód
)->
œ°
) \

540 (
hód
)->
œ°
 = (
ñm
); \

541 (
hód
)->
size
++; \

542 } 0)

	)

556 
	#LGW_LIST_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

557 i‡(!(
hód
)->
fú°
) { \

558 (
hód
)->
fú°
 = (
ñm
); \

559 (
hód
)->
œ°
 = (
ñm
); \

561 (
hód
)->
œ°
->
fõld
.
√xt
 = (
ñm
); \

562 (
hód
)->
œ°
 = (
ñm
); \

564 (
hód
)->
size
++; \

565 } 0)

	)

574 
	#LGW_LIST_DELETE_ELM
(
hód
, 
ñm
, 
fõld
) do { \

575 i‡(!(
hód
)->
fú°
) { \

576 (
hód
)->
fú°
 = 
NULL
; \

577 (
hód
)->
œ°
 = 
NULL
; \

578 (
hód
)->
size
 = 0; \

580 (
hód
)->
œ°
->
fõld
.
√xt
 = (
ñm
)->field.next; \

581 (
hód
)->
œ°
 = (
ñm
); \

582 (
hód
)->
size
--; \

584 } 0)

	)

	@fwd/inc/logger.h

27 #i‚de‡
_LGW_LOGGER_H


28 
	#_LGW_LOGGER_H


	)

30 
	~<°döt.h
>

31 
	~<°dio.h
>

33 
uöt8_t
 
LOG_PKT
;

34 
uöt8_t
 
LOG_REPORT
;

35 
uöt8_t
 
LOG_TIMERSYNC
;

36 
uöt8_t
 
LOG_JIT
;

37 
uöt8_t
 
LOG_JIT_ERROR
;

38 
uöt8_t
 
LOG_BEACON
;

39 
uöt8_t
 
LOG_INFO
;

40 
uöt8_t
 
LOG_WARNING
;

41 
uöt8_t
 
LOG_ERROR
;

42 
uöt8_t
 
LOG_DEBUG
;

43 
uöt8_t
 
LOG_MEM
;

45 
	#MSG
(
¨gs
...Ë
	`¥ötf
◊rgsË

	)

47 
	#lgw_msg
(
¨gs
...Ë
	`¥ötf
◊rgsË

	)

49 
	#lgw_log
(
FLAG
, 
fmt
, ...) \

51 i‡(
FLAG
) \

52 
	`Ârötf
(
°dout
, 
fmt
, ##
__VA_ARGS__
); \

53 } 0)

	)

55 
	#MSG_DEBUG
(
FLAG
, 
fmt
, ...) \

57 i‡(
FLAG
) \

58 
	`Ârötf
(
°dout
, 
fmt
, ##
__VA_ARGS__
); \

59 } 0)

	)

	@fwd/inc/loramac-crypto.h

8 
	~<°döt.h
>

9 #i‚de‡
__LORAMAC_CRYPTO_H__


10 
	#__LORAMAC_CRYPTO_H__


	)

23 
LoRaMacCompuãMic
–c⁄° 
uöt8_t
 *
buf„r
, 
uöt16_t
 
size
, c⁄° uöt8_à*
key
, 
uöt32_t
 
addªss
, uöt8_à
dú
, uöt32_à
£quí˚Cou¡î
, uöt32_à*
mic
 );

36 
LoRaMacPaylﬂdEn¸y±
–c⁄° 
uöt8_t
 *
buf„r
, 
uöt16_t
 
size
, c⁄° uöt8_à*
key
, 
uöt32_t
 
addªss
, uöt8_à
dú
, uöt32_à
£quí˚Cou¡î
, uöt8_à*
ícBuf„r
 );

49 
LoRaMacPaylﬂdDe¸y±
–c⁄° 
uöt8_t
 *
buf„r
, 
uöt16_t
 
size
, c⁄° uöt8_à*
key
, 
uöt32_t
 
addªss
, uöt8_à
dú
, uöt32_à
£quí˚Cou¡î
, uöt8_à*
decBuf„r
 );

59 
LoRaMacJoöCompuãMic
–c⁄° 
uöt8_t
 *
buf„r
, 
uöt16_t
 
size
, c⁄° uöt8_à*
key
, 
uöt32_t
 *
mic
 );

69 
LoRaMacJoöDe¸y±
–c⁄° 
uöt8_t
 *
buf„r
, 
uöt16_t
 
size
, c⁄° uöt8_à*
key
, uöt8_à*
decBuf„r
 );

80 
LoRaMacJoöEn¸y±
–c⁄° 
uöt8_t
 *
buf„r
, 
uöt16_t
 
size
, c⁄° uöt8_à*
key
, uöt8_à*
ícBuf„r
 );

91 
LoRaMacJoöCompuãSKeys
–c⁄° 
uöt8_t
 *
key
, c⁄° uöt8_à*
≠pN⁄˚
, 
uöt16_t
 
devN⁄˚
, uöt8_à*
nwkSKey
, uöt8_à*
≠pSKey
 );

	@fwd/inc/mac-header-decode.h

7 #i‚de‡
__LORAMAC_HEADER_DECODE_H__


8 
	#__LORAMAC_HEADER_DECODE_H__


	)

10 
	~<°döt.h
>

13 
	#LORAMAC_FHDR_MAX_FIELD_SIZE
 22

	)

16 
	#LORAMAC_FHDR_DEV_ADD_FIELD_SIZE
 4

	)

19 
	#LORAMAC_FHDR_F_CTRL_FIELD_SIZE
 1

	)

22 
	#LORAMAC_FHDR_F_CNT_FIELD_SIZE
 2

	)

25 
	#LORAMAC_FHDR_F_OPTS_MAX_FIELD_SIZE
 15

	)

28 
	#LORAMAC_MIC_FIELD_SIZE
 4

	)

31 
uöt32_t
 
	mdevaddr
;

32 
uöt8_t
 
	m≠pskey
[16];

33 
uöt8_t
 
	mnwkskey
[16];

34 
	mdevaddr_°r
[17];

35 
	m≠pskey_°r
[33];

36 
	mnwkskey_°r
[33];

37 } 
	tdevöfo_s
;

44 
	uuLoRaMacDLSëtögs


49 
uöt8_t
 
	mVÆue
;

53 
	ssDLSëtögsBôs


58 
uöt8_t
 
	mO±Neg
 : 1;

62 
uöt8_t
 
	mRX1DRoff£t
 : 3;

66 
uöt8_t
 
	mRX2D©aR©e
 : 4;

67 }
	mBôs
;

68 }
	tLoRaMacDLSëtögs_t
;

75 
	uuLoRaMacHódî


80 
uöt8_t
 
	mVÆue
;

84 
	ssMacHódîBôs


89 
uöt8_t
 
	mMTy≥
 : 3;

93 
uöt8_t
 
	mRFU
 : 3;

97 
uöt8_t
 
	mMaj‹
 : 2;

98 }
	mBôs
;

99 }
	tLoRaMacHódî_t
;

106 
	uuLoRaMacFømeCål


111 
uöt8_t
 
	mVÆue
;

115 
	ssCålBôs


120 
uöt8_t
 
	mAdr
 : 1;

124 
uöt8_t
 
	mAdrAckReq
 : 1;

128 
uöt8_t
 
	mAck
 : 1;

132 
uöt8_t
 
	mFPídög
 : 1;

136 
uöt8_t
 
	mFO±sLí
 : 4;

137 }
	mBôs
;

138 }
	tLoRaMacFømeCål_t
;

145 
	ssLoRaMacFømeHódî


150 
uöt32_t
 
	mDevAddr
;

154 
LoRaMacFømeCål_t
 
	mFCål
;

158 
uöt16_t
 
	mFC¡
;

162 
uöt8_t
 
	mFO±s
[
LORAMAC_FHDR_F_OPTS_MAX_FIELD_SIZE
];

163 }
	tLoRaMacFømeHódî_t
;

172 
	eeLoRaMacFømeTy≥


177 
	mFRAME_TYPE_JOIN_REQ
 = 0x00,

181 
	mFRAME_TYPE_JOIN_ACCEPT
 = 0x01,

185 
	mFRAME_TYPE_DATA_UNCONFIRMED_UP
 = 0x02,

189 
	mFRAME_TYPE_DATA_UNCONFIRMED_DOWN
 = 0x03,

193 
	mFRAME_TYPE_DATA_CONFIRMED_UP
 = 0x04,

197 
	mFRAME_TYPE_DATA_CONFIRMED_DOWN
 = 0x05,

201 
	mFRAME_TYPE_PROPRIETARY
 = 0x07,

202 }
	tLoRaMacFømeTy≥_t
;

204 
	ssLoRaMacMesßgeD©a


209 
uöt8_t
* 
	mBuf„r
;

213 
uöt8_t
 
	mBufSize
;

217 
LoRaMacHódî_t
 
	mMHDR
;

221 
LoRaMacFømeHódî_t
 
	mFHDR
;

225 
uöt8_t
 
	mFP‹t
;

229 
uöt8_t
* 
	mFRMPaylﬂd
;

233 
uöt8_t
 
	mFRMPaylﬂdSize
;

237 
uöt32_t
 
	mMIC
;

238 }
	tLoRaMacMesßgeD©a_t
;

243 
	eeLoRaMacMesßgeTy≥


248 
	mLORAMAC_MSG_TYPE_JOIN_REQUEST
,

252 
	mLORAMAC_MSG_TYPE_RE_JOIN_1
,

256 
	mLORAMAC_MSG_TYPE_RE_JOIN_0_2
,

260 
	mLORAMAC_MSG_TYPE_JOIN_ACCEPT
,

264 
	mLORAMAC_MSG_TYPE_DATA
,

268 
	mLORAMAC_MSG_TYPE_UNDEF
,

269 }
	tLoRaMacMesßgeTy≥_t
;

274 
	eeLoRaMacP¨£rSètus


279 
	mLORAMAC_PARSER_SUCCESS
 = 0,

283 
	mLORAMAC_PARSER_FAIL
,

287 
	mLORAMAC_PARSER_ERROR_NPE
,

291 
	mLORAMAC_PARSER_ERROR
,

292 }
	tLoRaMacP¨£rSètus_t
;

294 
LoRaMacP¨£rSètus_t
 
LoRaMacP¨£rD©a
–
LoRaMacMesßgeD©a_t
* 
macMsg
 );

296 
¥ötf_mac_hódî
–
LoRaMacMesßgeD©a_t
* 
macMsg
 );

298 
fûãr_by_mac
(
LoRaMacMesßgeD©a_t
* 
macMsg
, 
uöt8_t
 
Â‹t
,
uöt32_t
 
devaddr
, uöt8_à
Àn
);

	@fwd/inc/mqtt_service.h

26 #i‚de‡
_MQTT_PROTO_H


27 
	#_MQTT_PROTO_H


	)

29 
	~<°döt.h
>

30 
	~<MQTTClõ¡.h
>

32 
	#KEEP_ALIVE_INTERVAL
 20

	)

33 
	#COMMAND_TIMEOUT
 2000

	)

34 
	#READ_BUFFER_SIZE
 512

	)

35 
	#SEND_BUFFER_SIZE
 512

	)

37 
	#QOS_STATUS
 
QOS1


	)

38 
	#QOS_DOWN
 
QOS1


	)

39 
	#QOS_UP
 
QOS1


	)

40 
	#QOS_CONNECT
 
QOS1


	)

41 
	#QOS_WILL
 
QOS1


	)

43 (*
	td∆ök_hódÀr_f
)(
	tMesßgeD©a
*);

45 
	s_mqâ£ssi⁄_s
 {

46 
Nëw‹k
 
√tw‹k
;

47 
MQTTClõ¡
 
˛õ¡
;

48 
d∆ök_hódÀr_f
 
d∆ök_h™dÀr
;

49 *
cb_¨g
;

50 *
ªad_buf„r
;

51 *
£nd_buf„r
;

52 *
id
;

53 *
key
;

54 *
d∆ök_t›ic
;

55 *
u∂ök_t›ic
;

56 } 
	tmqâ£ssi⁄_s
;

58 
	`mqâ_°¨t
(
£rv_s
*);

60 
	`mqâ_°›
(
£rv_s
*);

	@fwd/inc/parson.h

24 #i‚de‡
∑rs⁄_∑rs⁄_h


25 
	#∑rs⁄_∑rs⁄_h


	)

27 #ifde‡
__˝lu•lus


32 
	~<°ddef.h
>

35 
js⁄_obje˘_t
 
	tJSON_Obje˘
;

36 
js⁄_¨øy_t
 
	tJSON_Aºay
;

37 
js⁄_vÆue_t
 
	tJSON_VÆue
;

39 
	ejs⁄_vÆue_ty≥
 {

40 
JSONEº‹
 = -1,

41 
JSONNuŒ
 = 1,

42 
JSONSåög
 = 2,

43 
JSONNumbî
 = 3,

44 
JSONObje˘
 = 4,

45 
JSONAºay
 = 5,

46 
JSONBoﬁón
 = 6

48 
	tJSON_VÆue_Ty≥
;

50 
	ejs⁄_ªsu…_t
 {

51 
JSONSuc˚ss
 = 0,

52 
JSONFaûuª
 = -1

54 
	tJSON_Sètus
;

56 * (*
	tJSON_MÆloc_Fun˘i⁄
)(
	tsize_t
);

57 (*
JSON_Fªe_Fun˘i⁄
)(*);

61 
js⁄_£t_Æloˇti⁄_fun˘i⁄s
(
JSON_MÆloc_Fun˘i⁄
 
mÆloc_fun
, 
JSON_Fªe_Fun˘i⁄
 
‰ì_fun
);

64 
JSON_VÆue
 * 
js⁄_∑r£_fûe
(c⁄° *
fûíame
);

68 
JSON_VÆue
 * 
js⁄_∑r£_fûe_wôh_commíts
(c⁄° *
fûíame
);

71 
JSON_VÆue
 * 
js⁄_∑r£_°rög
(c⁄° *
°rög
);

75 
JSON_VÆue
 * 
js⁄_∑r£_°rög_wôh_commíts
(c⁄° *
°rög
);

78 
size_t
 
js⁄_£rüliz©i⁄_size
(c⁄° 
JSON_VÆue
 *
vÆue
);

79 
JSON_Sètus
 
js⁄_£rülize_to_buf„r
(c⁄° 
JSON_VÆue
 *
vÆue
, *
buf
, 
size_t
 
buf_size_ö_byãs
);

80 
JSON_Sètus
 
js⁄_£rülize_to_fûe
(c⁄° 
JSON_VÆue
 *
vÆue
, c⁄° *
fûíame
);

81 * 
js⁄_£rülize_to_°rög
(c⁄° 
JSON_VÆue
 *
vÆue
);

84 
size_t
 
js⁄_£rüliz©i⁄_size_¥ëty
(c⁄° 
JSON_VÆue
 *
vÆue
);

85 
JSON_Sètus
 
js⁄_£rülize_to_buf„r_¥ëty
(c⁄° 
JSON_VÆue
 *
vÆue
, *
buf
, 
size_t
 
buf_size_ö_byãs
);

86 
JSON_Sètus
 
js⁄_£rülize_to_fûe_¥ëty
(c⁄° 
JSON_VÆue
 *
vÆue
, c⁄° *
fûíame
);

87 * 
js⁄_£rülize_to_°rög_¥ëty
(c⁄° 
JSON_VÆue
 *
vÆue
);

89 
js⁄_‰ì_£rülized_°rög
(*
°rög
);

92 
js⁄_vÆue_equÆs
(c⁄° 
JSON_VÆue
 *
a
, c⁄° JSON_VÆuê*
b
);

104 
JSON_Sètus
 
js⁄_vÆid©e
(c⁄° 
JSON_VÆue
 *
schema
, c⁄° JSON_VÆuê*
vÆue
);

109 
JSON_VÆue
 * 
js⁄_obje˘_gë_vÆue
 (c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
);

110 c⁄° * 
js⁄_obje˘_gë_°rög
 (c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
);

111 
JSON_Obje˘
 * 
js⁄_obje˘_gë_obje˘
 (c⁄° JSON_Obje˘ *
obje˘
, c⁄° *
«me
);

112 
JSON_Aºay
 * 
js⁄_obje˘_gë_¨øy
 (c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
);

113 
js⁄_obje˘_gë_numbî
 (c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
);

114 
js⁄_obje˘_gë_boﬁón
(c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
);

120 
JSON_VÆue
 * 
js⁄_obje˘_dŸgë_vÆue
 (c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
);

121 c⁄° * 
js⁄_obje˘_dŸgë_°rög
 (c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
);

122 
JSON_Obje˘
 * 
js⁄_obje˘_dŸgë_obje˘
 (c⁄° JSON_Obje˘ *
obje˘
, c⁄° *
«me
);

123 
JSON_Aºay
 * 
js⁄_obje˘_dŸgë_¨øy
 (c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
);

124 
js⁄_obje˘_dŸgë_numbî
 (c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
);

125 
js⁄_obje˘_dŸgë_boﬁón
(c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
);

128 
size_t
 
js⁄_obje˘_gë_cou¡
(c⁄° 
JSON_Obje˘
 *
obje˘
);

129 c⁄° * 
js⁄_obje˘_gë_«me
 (c⁄° 
JSON_Obje˘
 *
obje˘
, 
size_t
 
ödex
);

133 
JSON_Sètus
 
js⁄_obje˘_£t_vÆue
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, 
JSON_VÆue
 *
vÆue
);

134 
JSON_Sètus
 
js⁄_obje˘_£t_°rög
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, c⁄° *
°rög
);

135 
JSON_Sètus
 
js⁄_obje˘_£t_numbî
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, 
numbî
);

136 
JSON_Sètus
 
js⁄_obje˘_£t_boﬁón
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, 
boﬁón
);

137 
JSON_Sètus
 
js⁄_obje˘_£t_nuŒ
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
);

141 
JSON_Sètus
 
js⁄_obje˘_dŸ£t_vÆue
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, 
JSON_VÆue
 *
vÆue
);

142 
JSON_Sètus
 
js⁄_obje˘_dŸ£t_°rög
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, c⁄° *
°rög
);

143 
JSON_Sètus
 
js⁄_obje˘_dŸ£t_numbî
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, 
numbî
);

144 
JSON_Sètus
 
js⁄_obje˘_dŸ£t_boﬁón
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, 
boﬁón
);

145 
JSON_Sètus
 
js⁄_obje˘_dŸ£t_nuŒ
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
);

148 
JSON_Sètus
 
js⁄_obje˘_ªmove
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
);

151 
JSON_Sètus
 
js⁄_obje˘_dŸªmove
(
JSON_Obje˘
 *
obje˘
, c⁄° *
key
);

154 
JSON_Sètus
 
js⁄_obje˘_˛ór
(
JSON_Obje˘
 *
obje˘
);

159 
JSON_VÆue
 * 
js⁄_¨øy_gë_vÆue
 (c⁄° 
JSON_Aºay
 *
¨øy
, 
size_t
 
ödex
);

160 c⁄° * 
js⁄_¨øy_gë_°rög
 (c⁄° 
JSON_Aºay
 *
¨øy
, 
size_t
 
ödex
);

161 
JSON_Obje˘
 * 
js⁄_¨øy_gë_obje˘
 (c⁄° 
JSON_Aºay
 *
¨øy
, 
size_t
 
ödex
);

162 
JSON_Aºay
 * 
js⁄_¨øy_gë_¨øy
 (c⁄° JSON_Aºay *
¨øy
, 
size_t
 
ödex
);

163 
js⁄_¨øy_gë_numbî
 (c⁄° 
JSON_Aºay
 *
¨øy
, 
size_t
 
ödex
);

164 
js⁄_¨øy_gë_boﬁón
(c⁄° 
JSON_Aºay
 *
¨øy
, 
size_t
 
ödex
);

165 
size_t
 
js⁄_¨øy_gë_cou¡
 (c⁄° 
JSON_Aºay
 *
¨øy
);

169 
JSON_Sètus
 
js⁄_¨øy_ªmove
(
JSON_Aºay
 *
¨øy
, 
size_t
 
i
);

174 
JSON_Sètus
 
js⁄_¨øy_ª∂a˚_vÆue
(
JSON_Aºay
 *
¨øy
, 
size_t
 
i
, 
JSON_VÆue
 *
vÆue
);

175 
JSON_Sètus
 
js⁄_¨øy_ª∂a˚_°rög
(
JSON_Aºay
 *
¨øy
, 
size_t
 
i
, c⁄° * 
°rög
);

176 
JSON_Sètus
 
js⁄_¨øy_ª∂a˚_numbî
(
JSON_Aºay
 *
¨øy
, 
size_t
 
i
, 
numbî
);

177 
JSON_Sètus
 
js⁄_¨øy_ª∂a˚_boﬁón
(
JSON_Aºay
 *
¨øy
, 
size_t
 
i
, 
boﬁón
);

178 
JSON_Sètus
 
js⁄_¨øy_ª∂a˚_nuŒ
(
JSON_Aºay
 *
¨øy
, 
size_t
 
i
);

181 
JSON_Sètus
 
js⁄_¨øy_˛ór
(
JSON_Aºay
 *
¨øy
);

185 
JSON_Sètus
 
js⁄_¨øy_≠≥nd_vÆue
(
JSON_Aºay
 *
¨øy
, 
JSON_VÆue
 *
vÆue
);

186 
JSON_Sètus
 
js⁄_¨øy_≠≥nd_°rög
(
JSON_Aºay
 *
¨øy
, c⁄° *
°rög
);

187 
JSON_Sètus
 
js⁄_¨øy_≠≥nd_numbî
(
JSON_Aºay
 *
¨øy
, 
numbî
);

188 
JSON_Sètus
 
js⁄_¨øy_≠≥nd_boﬁón
(
JSON_Aºay
 *
¨øy
, 
boﬁón
);

189 
JSON_Sètus
 
js⁄_¨øy_≠≥nd_nuŒ
(
JSON_Aºay
 *
¨øy
);

194 
JSON_VÆue
 * 
js⁄_vÆue_öô_obje˘
 ();

195 
JSON_VÆue
 * 
js⁄_vÆue_öô_¨øy
 ();

196 
JSON_VÆue
 * 
js⁄_vÆue_öô_°rög
 (c⁄° *
°rög
);

197 
JSON_VÆue
 * 
js⁄_vÆue_öô_numbî
 (
numbî
);

198 
JSON_VÆue
 * 
js⁄_vÆue_öô_boﬁón
(
boﬁón
);

199 
JSON_VÆue
 * 
js⁄_vÆue_öô_nuŒ
 ();

200 
JSON_VÆue
 * 
js⁄_vÆue_dìp_c›y
 (c⁄° JSON_VÆuê*
vÆue
);

201 
js⁄_vÆue_‰ì
 (
JSON_VÆue
 *
vÆue
);

203 
JSON_VÆue_Ty≥
 
js⁄_vÆue_gë_ty≥
 (c⁄° 
JSON_VÆue
 *
vÆue
);

204 
JSON_Obje˘
 * 
js⁄_vÆue_gë_obje˘
 (c⁄° 
JSON_VÆue
 *
vÆue
);

205 
JSON_Aºay
 * 
js⁄_vÆue_gë_¨øy
 (c⁄° 
JSON_VÆue
 *
vÆue
);

206 c⁄° * 
js⁄_vÆue_gë_°rög
 (c⁄° 
JSON_VÆue
 *
vÆue
);

207 
js⁄_vÆue_gë_numbî
 (c⁄° 
JSON_VÆue
 *
vÆue
);

208 
js⁄_vÆue_gë_boﬁón
(c⁄° 
JSON_VÆue
 *
vÆue
);

211 
JSON_VÆue_Ty≥
 
js⁄_ty≥
 (c⁄° 
JSON_VÆue
 *
vÆue
);

212 
JSON_Obje˘
 * 
js⁄_obje˘
 (c⁄° 
JSON_VÆue
 *
vÆue
);

213 
JSON_Aºay
 * 
js⁄_¨øy
 (c⁄° 
JSON_VÆue
 *
vÆue
);

214 c⁄° * 
js⁄_°rög
 (c⁄° 
JSON_VÆue
 *
vÆue
);

215 
js⁄_numbî
 (c⁄° 
JSON_VÆue
 *
vÆue
);

216 
js⁄_boﬁón
(c⁄° 
JSON_VÆue
 *
vÆue
);

218 #ifde‡
__˝lu•lus


	@fwd/inc/pkt_service.h

26 #i‚de‡
_GWPKT_PROTO_H


27 
	#_GWPKT_PROTO_H


	)

29 
	~"lökedli°s.h
"

36 
	#DEFAULT_PAYLOAD_SIZE
 256

	)

37 
	#DEFAULT_DOWN_FPORT
 2

	)

39 
	#DNPATH
 "/v¨/iŸ/push"

	)

41 
	#UP
 0

	)

42 
	#DOWN
 1

	)

44 
	s_dn_pkt
 {

45 
LGW_LIST_ENTRY
(
_dn_pkt
Ë
	mli°
;

46 
	mdevaddr
[16];

47 
	mtxmode
[8];

48 
	mpdf‹m©
[8];

49 
uöt8_t
 
	m∑ylﬂd
[512];

50 
uöt8_t
 
	mpsize
;

51 } 
	tdn_pkt_s
;

53 
pkt_°¨t
(
£rv_s
*);

54 
pkt_°›
(
£rv_s
*);

	@fwd/inc/semtech_service.h

27 #i‚de‡
_SEMTECH_PROTO_H


28 
	#_SEMTECH_PROTO_H


	)

30 
£mãch_°¨t
(
£rv_s
* 
£rv
);

31 
£mãch_°›
(
£rv_s
* 
£rv
);

	@fwd/inc/service.h

27 #i‚de‡
_SERVICE_H


28 
	#_SERVICE_H


	)

30 
	~"gwcfg.h
"

42 
£rvi˚_°¨t
();

48 
£rvi˚_°›
();

54 
öô_sock
(c⁄° * 
addr
, c⁄° * 
p‹t
, c⁄° * 
timeout
, 
size
);

62 
boﬁ
 
pkt_basic_fûãr
(
£rv_s
* 
£rv
, c⁄° 
uöt32_t
 
addr
, c⁄° 
uöt8_t
 
Â‹t
);

66 
∑r£_cfg
(c⁄° * 
cfgfûe
);

70 
uöt16_t
 
¸c16
(c⁄° 
uöt8_t
 * 
d©a
, 
size
);

	@fwd/inc/stats.h

27 #i‚de‡
_LORA_PKTFWD_STATS_H


28 
	#_LORA_PKTFWD_STATS_H


	)

33 
	~<°döt.h
>

34 
	~<°dboﬁ.h
>

35 
	~"l‹agw_hÆ.h
"

39 
	#STATUS_SIZE
 200

	)

42 
	mTX_OK
,

43 
	mTX_FAIL
,

44 
	mTX_REQUESTED
,

45 
	mTX_REJ_COLL_PACKET
,

46 
	mTX_REJ_COLL_BEACON
,

47 
	mTX_REJ_TOO_LATE
,

48 
	mTX_REJ_TOO_EARLY
,

49 
	mBEACON_QUEUED
,

50 
	mBEACON_SENT
,

51 
	mBEACON_REJECTED


52 } 
	tty≥_dw_e
;

55 
	mRX_RCV
,

56 
	mRX_OK
,

57 
	mRX_BAD
,

58 
	mRX_NOCRC
,

59 
	mPKT_FWD


60 } 
	tty≥_up_e
;

63 
uöt32_t
 
	mmós_nb_tx_ok
;

64 
uöt32_t
 
	mmós_nb_tx_Áû
;

65 
uöt32_t
 
	mmós_nb_tx_ªque°ed
;

66 
uöt32_t
 
	mmós_nb_tx_ªje˘ed_cﬁlisi⁄_∑ckë
;

67 
uöt32_t
 
	mmós_nb_tx_ªje˘ed_cﬁlisi⁄_bóc⁄
;

68 
uöt32_t
 
	mmós_nb_tx_ªje˘ed_too_œã
;

69 
uöt32_t
 
	mmós_nb_tx_ªje˘ed_too_óæy
;

70 
uöt32_t
 
	mmós_dw_puŒ_£¡
;

71 
uöt32_t
 
	mmós_dw_ack_rcv
;

72 
uöt32_t
 
	mmós_dw_dgøm_a˝
;

73 
uöt32_t
 
	mmós_dw_dgøm_rcv
;

74 
uöt32_t
 
	mmós_dw_√tw‹k_byã
;

75 
uöt32_t
 
	mmós_dw_∑ylﬂd_byã
;

76 } 
	t°©_dw_s
;

79 
uöt32_t
 
	mmós_nb_rx_rcv
;

80 
uöt32_t
 
	mmós_nb_rx_ok
;

81 
uöt32_t
 
	mmós_nb_rx_bad
;

82 
uöt32_t
 
	mmós_nb_rx_no¸c
;

83 
uöt32_t
 
	mmós_up_pkt_fwd
;

84 
uöt32_t
 
	mmós_up_√tw‹k_byã
;

85 
uöt32_t
 
	mmós_up_∑ylﬂd_byã
;

86 
uöt32_t
 
	mmós_up_dgøm_£¡
;

87 
uöt32_t
 
	mmós_up_ack_rcv
;

88 } 
	t°©_up_s
;

91 
boﬁ
 
	m°©us°ªam
;

92 
boﬁ
 
	mªp‹t_ªady
;

93 
	m°©_f‹m©
[16];

94 
	m°©us_ªp‹t
[
STATUS_SIZE
];

95 
uöt16_t
 
	m°©_öãrvÆ
;

96 
uöt32_t
 
	mmós_nb_bóc⁄_queued
;

97 
uöt32_t
 
	mmós_nb_bóc⁄_£¡
;

98 
uöt32_t
 
	mmós_nb_bóc⁄_ªje˘ed
;

99 
°©_up_s
 
	m°©_up
;

100 
°©_dw_s
 
	m°©_down
;

101 
±hªad_muãx_t
 
	mmx_ªp‹t
;

102 } 
	tªp‹t_s
;

104 
ªp‹t_°¨t
();

	@fwd/inc/timersync.h

17 #i‚de‡
_LORA_PKTFWD_TIMERSYNC_H


18 
	#_LORA_PKTFWD_TIMERSYNC_H


	)

28 
gë_c⁄˚¡øt‹_time
(
timevÆ
 *
c⁄˚¡_time
, timevÆ 
unix_time
);

30 
thªad_timîsync
();

	@fwd/inc/utilities.h

27 #i‚de‡
__UTILITIES_H__


28 
	#__UTILITIES_H__


	)

30 
	~<°döt.h
>

31 
	~<uni°d.h
>

32 
	~<°rög.h
>

33 
	~<±hªad.h
>

34 
	~<compûî.h
>

36 #i‚de‡
MAX_TRY


37 
	#MAX_TRY
 3

	)

47 
	#MIN
(
a
, 
b
Ë({ 
	`ty≥of
◊Ë
__a
 = (a);Åy≥of(bË
__b
 = (b); ((__®> __bË? __b : __a);})

	)

56 
	#MAX
(
a
, 
b
Ë({ 
	`ty≥of
◊Ë
__a
 = (a);Åy≥of(bË
__b
 = (b); ((__®< __bË? __b : __a);})

	)

64 
	#SWAP
(
a
,
b
Ëdÿ{ 
	`ty≥of
◊Ë
__tmp
 = (a); (aË(b); (bË__tmp; } 0)

	)

72 
	#POW2
–
n
 ) ( 1 <<Ç )

	)

79 
öt32_t
 
lgw_ønd
();

88 
öt32_t
 
lgw_øndr
–öt32_à
mö
, i¡32_à
max
 );

99 
lgw_mem˝y
–
uöt8_t
 *
d°
, c⁄° uöt8_à*
§c
, 
uöt16_t
 
size
 );

108 
lgw_mem˝yr
–
uöt8_t
 *
d°
, c⁄° uöt8_à*
§c
, 
uöt16_t
 
size
 );

119 
lgw_mem£t
–
uöt8_t
 *
d°
, uöt8_à
vÆue
, 
uöt16_t
 
size
 );

127 * 
lgw_gí_°r
(* 
°r
, 
size
);

135 
öt8_t
 
nibbÀ2hexch¨
–
uöt8_t
 
a
 );

141 
	#CRITICAL_SECTION_BEGIN
–Ë
uöt32_t
 
mask
; 
	`BﬂrdCrôiˇlSe˘i⁄Begö
–&mask )

	)

146 
	#CRITICAL_SECTION_END
–Ë
	`BﬂrdCrôiˇlSe˘i⁄End
–&
mask
 )

	)

154 
°r2hex
(
uöt8_t
* 
de°
, * 
§c
, 
Àn
);

162 
hex2°r
(
uöt8_t
* 
hex
, uöt8_t* 
°r
, uöt8_à
Àn
);

168 #i‡
deföed
(
PTHREAD_STACK_MIN
)

169 
	#LGW_STACKSIZE
 
	`MAX
(((((*Ë* 8 * 8Ë- 16Ë* 1024), 
PTHREAD_STACK_MIN
)

	)

170 
	#LGW_STACKSIZE_LOW
 
	`MAX
(((((*Ë* 8 * 2Ë- 16Ë* 1024), 
PTHREAD_STACK_MIN
)

	)

172 
	#LGW_STACKSIZE
 ((((*Ë* 8 * 8Ë- 16Ë* 1024)

	)

173 
	#LGW_STACKSIZE_LOW
 ((((*Ë* 8 * 2Ë- 16Ë* 1024)

	)

176 
lgw_background_°acksize
();

178 
	#LGW_BACKGROUND_STACKSIZE
 
	`lgw_background_°acksize
()

	)

180 
lgw_ªgi°î_thªad
(*
«me
);

181 
lgw_uƒegi°î_thªad
(*
id
);

183 
lgw_±hªad_¸óã_°ack
(
±hªad_t
 *
thªad
, 
±hªad_©å_t
 *
©å
, *(*
°¨t_routöe
)(*), *
d©a
, 
size_t
 
°acksize
, c⁄° *
fûe
, c⁄° *
ˇŒî
, 
löe
, c⁄° *
°¨t_‚
);

185 
lgw_±hªad_¸óã_dëached_°ack
(
±hªad_t
 *
thªad
, 
±hªad_©å_t
 *
©å
, *(*
°¨t_routöe
)(*), *
d©a
, 
size_t
 
°acksize
, c⁄° *
fûe
, c⁄° *
ˇŒî
, 
löe
, c⁄° *
°¨t_‚
);

187 
	#lgw_±hªad_¸óã
(
a
, 
b
, 
c
, 
d
Ë\

	)

188 
lgw_±hªad_¸óã_°ack
(
a
, 
b
, 
c
, 
d
, \

189 0, 
__FILE__
, 
__FUNCTION__
, 
__LINE__
, #c)

191 
	#lgw_±hªad_¸óã_dëached
(
a
, 
b
, 
c
, 
d
Ë\

	)

192 
lgw_±hªad_¸óã_dëached_°ack
(
a
, 
b
, 
c
, 
d
, \

193 0, 
__FILE__
, 
__FUNCTION__
, 
__LINE__
, #c)

195 
	#lgw_±hªad_¸óã_background
(
a
, 
b
, 
c
, 
d
Ë\

	)

196 
lgw_±hªad_¸óã_°ack
(
a
, 
b
, 
c
, 
d
, \

197 
LGW_BACKGROUND_STACKSIZE
, \

198 
__FILE__
, 
__FUNCTION__
, 
__LINE__
, #c)

200 
	#lgw_±hªad_¸óã_dëached_background
(
a
, 
b
, 
c
, 
d
Ë\

	)

201 
lgw_±hªad_¸óã_dëached_°ack
(
a
, 
b
, 
c
, 
d
, \

202 
LGW_BACKGROUND_STACKSIZE
, \

203 
__FILE__
, 
__FUNCTION__
, 
__LINE__
, #c)

209 
lgw_gë_tid
();

219 
	#IN_BOUNDS
(
v
, 
mö
, 
max
Ë((vË>(mö)Ë&& ((vË<(max))

	)

228 
	#ARRAY_IN_BOUNDS
(
v
, 
a
Ë
	`IN_BOUNDS
((Ë(v), 0, 
	`ARRAY_LEN
◊Ë- 1)

	)

230 #ifde‡
DO_CRASH


231 
	#DO_CRASH_NORETURN
 
©åibuã_n‹ëu∫


	)

233 
	#DO_CRASH_NORETURN


	)

236 
DO_CRASH_NORETURN
 
__lgw_as£π_Áûed
(
c⁄dôi⁄
, c⁄° *
c⁄dôi⁄_°r
,

237 c⁄° *
fûe
, 
löe
, c⁄° *
fun˘i⁄
);

239 #ifde‡
LGW_DEVMODE


240 
	#lgw_as£π
(
a
Ë
	`_lgw_as£π
◊, #a, 
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
)

	)

241 
	#lgw_as£π_ªtu∫
(
a
, ...Ë\

	)

243 i‡(
__buûtö_ex≥˘
(!(
a
), 1)) { \

244 
_lgw_as£π
(0, #a, 
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
); \

245  
	g__VA_ARGS__
; \

248 
f‹˚_ölöe
 
	$_lgw_as£π
(
c⁄dôi⁄
, c⁄° *
c⁄dôi⁄_°r
, c⁄° *
fûe
, 
löe
, c⁄° *
fun˘i⁄
)

250 i‡(
	`__buûtö_ex≥˘
(!
c⁄dôi⁄
, 1)) {

251 
	`__lgw_as£π_Áûed
(
c⁄dôi⁄
, 
c⁄dôi⁄_°r
, 
fûe
, 
löe
, 
fun˘i⁄
);

253 
	}
}

255 
	#lgw_as£π
(
a
)

	)

256 
	#lgw_as£π_ªtu∫
(
a
, ...Ë\

	)

258 i‡(
__buûtö_ex≥˘
(!(
a
), 1)) { \

259  
	g__VA_ARGS__
; \

271 
DO_CRASH_NORETURN
 
lgw_do_¸ash
();

273 #ifde‡
LGW_DEVMODE


274 
	#lgw_°æí_zîo
(
foo
Ë
	`_lgw_°æí_zîo
(foo, 
__FILE__
, 
__PRETTY_FUNCTION__
, 
__LINE__
)

	)

275 
f‹˚_ölöe
 
	$_lgw_°æí_zîo
(c⁄° *
s
, c⁄° *
fûe
, c⁄° *
fun˘i⁄
, 
löe
)

277 i‡(!
s
 || (*s == '\0')) {

280 i‡(!
	`°rcmp
(
s
, "(null)")) {

281 
	`lgw_log
(
LOG_WARNING
, 
fûe
, 
löe
, 
fun˘i⁄
, "PossibleÖrogrammingÉrror: \"(null)\" isÇot NULL!\n");

284 
	}
}

287 
f‹˚_ölöe
 
©åibuã_puª
 
	$lgw_°æí_zîo
(c⁄° *
s
)

289  (!
s
 || (*s == '\0'));

290 
	}
}

	@fwd/src/aes.c

36 
	~"´s.h
"

39 
	#HAVE_MEMCPY


	)

40 
	~<°rög.h
>

41 #i‡
deföed
–
_MSC_VER
 )

42 
	~<öåö.h
>

43 #¥agm®
öåösic
–
mem˝y
 )

48 
	~<°dlib.h
>

52 
	#HAVE_UINT_32T


	)

57 
	#USE_TABLES


	)

64 
	#VERSION_1


	)

67 
	~"´s.h
"

69 #i‡
deföed
–
HAVE_UINT_32T
 )

70 
	tuöt_32t
;

75 
	#WPOLY
 0x011b

	)

76 
	#BPOLY
 0x1b

	)

77 
	#DPOLY
 0x008d

	)

79 
	#f1
(
x
Ë(x)

	)

80 
	#f2
(
x
Ë((x << 1Ë^ (((x >> 7Ë& 1Ë* 
WPOLY
))

	)

81 
	#f4
(
x
Ë((x << 2Ë^ (((x >> 6Ë& 1Ë* 
WPOLY
Ë^ (((x >> 6Ë& 2Ë* WPOLY))

	)

82 
	#f8
(
x
Ë((x << 3Ë^ (((x >> 5Ë& 1Ë* 
WPOLY
Ë^ (((x >> 5Ë& 2Ë* WPOLYË\

	)

83 ^ (((
	gx
 >> 5Ë& 4Ë* 
	gWPOLY
))

84 
	#d2
(
x
Ë(((xË>> 1Ë^ ((xË& 1 ? 
DPOLY
 : 0))

	)

86 
	#f3
(
x
Ë(
	`f2
(xË^ x)

	)

87 
	#f9
(
x
Ë(
	`f8
(xË^ x)

	)

88 
	#fb
(
x
Ë(
	`f8
(xË^ 
	`f2
(xË^ x)

	)

89 
	#fd
(
x
Ë(
	`f8
(xË^ 
	`f4
(xË^ x)

	)

90 
	#„
(
x
Ë(
	`f8
(xË^ 
	`f4
(xË^ 
	`f2
(x))

	)

92 #i‡
deföed
–
USE_TABLES
 )

94 
	#sb_d©a
(
w
Ë{ \

	)

95 
w
(0x63), w(0x7c), w(0x77), w(0x7b), w(0xf2), w(0x6b), w(0x6f), w(0xc5),\

96 
w
(0x30), w(0x01), w(0x67), w(0x2b), w(0xfe), w(0xd7), w(0xab), w(0x76),\

97 
w
(0xca), w(0x82), w(0xc9), w(0x7d), w(0xfa), w(0x59), w(0x47), w(0xf0),\

98 
w
(0xad), w(0xd4), w(0xa2), w(0xaf), w(0x9c), w(0xa4), w(0x72), w(0xc0),\

99 
w
(0xb7), w(0xfd), w(0x93), w(0x26), w(0x36), w(0x3f), w(0xf7), w(0xcc),\

100 
w
(0x34), w(0xa5), w(0xe5), w(0xf1), w(0x71), w(0xd8), w(0x31), w(0x15),\

101 
w
(0x04), w(0xc7), w(0x23), w(0xc3), w(0x18), w(0x96), w(0x05), w(0x9a),\

102 
w
(0x07), w(0x12), w(0x80), w(0xe2), w(0xeb), w(0x27), w(0xb2), w(0x75),\

103 
w
(0x09), w(0x83), w(0x2c), w(0x1a), w(0x1b), w(0x6e), w(0x5a), w(0xa0),\

104 
w
(0x52), w(0x3b), w(0xd6), w(0xb3), w(0x29), w(0xe3), w(0x2f), w(0x84),\

105 
w
(0x53), w(0xd1), w(0x00), w(0xed), w(0x20), w(0xfc), w(0xb1), w(0x5b),\

106 
w
(0x6a), w(0xcb), w(0xbe), w(0x39), w(0x4a), w(0x4c), w(0x58), w(0xcf),\

107 
w
(0xd0), w(0xef), w(0xaa), w(0xfb), w(0x43), w(0x4d), w(0x33), w(0x85),\

108 
w
(0x45), w(0xf9), w(0x02), w(0x7f), w(0x50), w(0x3c), w(0x9f), w(0xa8),\

109 
w
(0x51), w(0xa3), w(0x40), w(0x8f), w(0x92), w(0x9d), w(0x38), w(0xf5),\

110 
w
(0xbc), w(0xb6), w(0xda), w(0x21), w(0x10), w(0xff), w(0xf3), w(0xd2),\

111 
w
(0xcd), w(0x0c), w(0x13), w(0xec), w(0x5f), w(0x97), w(0x44), w(0x17),\

112 
w
(0xc4), w(0xa7), w(0x7e), w(0x3d), w(0x64), w(0x5d), w(0x19), w(0x73),\

113 
w
(0x60), w(0x81), w(0x4f), w(0xdc), w(0x22), w(0x2a), w(0x90), w(0x88),\

114 
w
(0x46), w(0xee), w(0xb8), w(0x14), w(0xde), w(0x5e), w(0x0b), w(0xdb),\

115 
w
(0xe0), w(0x32), w(0x3a), w(0x0a), w(0x49), w(0x06), w(0x24), w(0x5c),\

116 
w
(0xc2), w(0xd3), w(0xac), w(0x62), w(0x91), w(0x95), w(0xe4), w(0x79),\

117 
w
(0xe7), w(0xc8), w(0x37), w(0x6d), w(0x8d), w(0xd5), w(0x4e), w(0xa9),\

118 
w
(0x6c), w(0x56), w(0xf4), w(0xea), w(0x65), w(0x7a), w(0xae), w(0x08),\

119 
w
(0xba), w(0x78), w(0x25), w(0x2e), w(0x1c), w(0xa6), w(0xb4), w(0xc6),\

120 
w
(0xe8), w(0xdd), w(0x74), w(0x1f), w(0x4b), w(0xbd), w(0x8b), w(0x8a),\

121 
w
(0x70), w(0x3e), w(0xb5), w(0x66), w(0x48), w(0x03), w(0xf6), w(0x0e),\

122 
w
(0x61), w(0x35), w(0x57), w(0xb9), w(0x86), w(0xc1), w(0x1d), w(0x9e),\

123 
w
(0xe1), w(0xf8), w(0x98), w(0x11), w(0x69), w(0xd9), w(0x8e), w(0x94),\

124 
w
(0x9b), w(0x1e), w(0x87), w(0xe9), w(0xce), w(0x55), w(0x28), w(0xdf),\

125 
w
(0x8c), w(0xa1), w(0x89), w(0x0d), w(0xbf), w(0xe6), w(0x42), w(0x68),\

126 
w
(0x41), w(0x99), w(0x2d), w(0x0f), w(0xb0), w(0x54), w(0xbb), w(0x16) }

128 
	#isb_d©a
(
w
Ë{ \

	)

129 
w
(0x52), w(0x09), w(0x6a), w(0xd5), w(0x30), w(0x36), w(0xa5), w(0x38),\

130 
w
(0xbf), w(0x40), w(0xa3), w(0x9e), w(0x81), w(0xf3), w(0xd7), w(0xfb),\

131 
w
(0x7c), w(0xe3), w(0x39), w(0x82), w(0x9b), w(0x2f), w(0xff), w(0x87),\

132 
w
(0x34), w(0x8e), w(0x43), w(0x44), w(0xc4), w(0xde), w(0xe9), w(0xcb),\

133 
w
(0x54), w(0x7b), w(0x94), w(0x32), w(0xa6), w(0xc2), w(0x23), w(0x3d),\

134 
w
(0xee), w(0x4c), w(0x95), w(0x0b), w(0x42), w(0xfa), w(0xc3), w(0x4e),\

135 
w
(0x08), w(0x2e), w(0xa1), w(0x66), w(0x28), w(0xd9), w(0x24), w(0xb2),\

136 
w
(0x76), w(0x5b), w(0xa2), w(0x49), w(0x6d), w(0x8b), w(0xd1), w(0x25),\

137 
w
(0x72), w(0xf8), w(0xf6), w(0x64), w(0x86), w(0x68), w(0x98), w(0x16),\

138 
w
(0xd4), w(0xa4), w(0x5c), w(0xcc), w(0x5d), w(0x65), w(0xb6), w(0x92),\

139 
w
(0x6c), w(0x70), w(0x48), w(0x50), w(0xfd), w(0xed), w(0xb9), w(0xda),\

140 
w
(0x5e), w(0x15), w(0x46), w(0x57), w(0xa7), w(0x8d), w(0x9d), w(0x84),\

141 
w
(0x90), w(0xd8), w(0xab), w(0x00), w(0x8c), w(0xbc), w(0xd3), w(0x0a),\

142 
w
(0xf7), w(0xe4), w(0x58), w(0x05), w(0xb8), w(0xb3), w(0x45), w(0x06),\

143 
w
(0xd0), w(0x2c), w(0x1e), w(0x8f), w(0xca), w(0x3f), w(0x0f), w(0x02),\

144 
w
(0xc1), w(0xaf), w(0xbd), w(0x03), w(0x01), w(0x13), w(0x8a), w(0x6b),\

145 
w
(0x3a), w(0x91), w(0x11), w(0x41), w(0x4f), w(0x67), w(0xdc), w(0xea),\

146 
w
(0x97), w(0xf2), w(0xcf), w(0xce), w(0xf0), w(0xb4), w(0xe6), w(0x73),\

147 
w
(0x96), w(0xac), w(0x74), w(0x22), w(0xe7), w(0xad), w(0x35), w(0x85),\

148 
w
(0xe2), w(0xf9), w(0x37), w(0xe8), w(0x1c), w(0x75), w(0xdf), w(0x6e),\

149 
w
(0x47), w(0xf1), w(0x1a), w(0x71), w(0x1d), w(0x29), w(0xc5), w(0x89),\

150 
w
(0x6f), w(0xb7), w(0x62), w(0x0e), w(0xaa), w(0x18), w(0xbe), w(0x1b),\

151 
w
(0xfc), w(0x56), w(0x3e), w(0x4b), w(0xc6), w(0xd2), w(0x79), w(0x20),\

152 
w
(0x9a), w(0xdb), w(0xc0), w(0xfe), w(0x78), w(0xcd), w(0x5a), w(0xf4),\

153 
w
(0x1f), w(0xdd), w(0xa8), w(0x33), w(0x88), w(0x07), w(0xc7), w(0x31),\

154 
w
(0xb1), w(0x12), w(0x10), w(0x59), w(0x27), w(0x80), w(0xec), w(0x5f),\

155 
w
(0x60), w(0x51), w(0x7f), w(0xa9), w(0x19), w(0xb5), w(0x4a), w(0x0d),\

156 
w
(0x2d), w(0xe5), w(0x7a), w(0x9f), w(0x93), w(0xc9), w(0x9c), w(0xef),\

157 
w
(0xa0), w(0xe0), w(0x3b), w(0x4d), w(0xae), w(0x2a), w(0xf5), w(0xb0),\

158 
w
(0xc8), w(0xeb), w(0xbb), w(0x3c), w(0x83), w(0x53), w(0x99), w(0x61),\

159 
w
(0x17), w(0x2b), w(0x04), w(0x7e), w(0xba), w(0x77), w(0xd6), w(0x26),\

160 
w
(0xe1), w(0x69), w(0x14), w(0x63), w(0x55), w(0x21), w(0x0c), w(0x7d) }

162 
	#mm_d©a
(
w
Ë{ \

	)

163 
w
(0x00), w(0x01), w(0x02), w(0x03), w(0x04), w(0x05), w(0x06), w(0x07),\

164 
w
(0x08), w(0x09), w(0x0a), w(0x0b), w(0x0c), w(0x0d), w(0x0e), w(0x0f),\

165 
w
(0x10), w(0x11), w(0x12), w(0x13), w(0x14), w(0x15), w(0x16), w(0x17),\

166 
w
(0x18), w(0x19), w(0x1a), w(0x1b), w(0x1c), w(0x1d), w(0x1e), w(0x1f),\

167 
w
(0x20), w(0x21), w(0x22), w(0x23), w(0x24), w(0x25), w(0x26), w(0x27),\

168 
w
(0x28), w(0x29), w(0x2a), w(0x2b), w(0x2c), w(0x2d), w(0x2e), w(0x2f),\

169 
w
(0x30), w(0x31), w(0x32), w(0x33), w(0x34), w(0x35), w(0x36), w(0x37),\

170 
w
(0x38), w(0x39), w(0x3a), w(0x3b), w(0x3c), w(0x3d), w(0x3e), w(0x3f),\

171 
w
(0x40), w(0x41), w(0x42), w(0x43), w(0x44), w(0x45), w(0x46), w(0x47),\

172 
w
(0x48), w(0x49), w(0x4a), w(0x4b), w(0x4c), w(0x4d), w(0x4e), w(0x4f),\

173 
w
(0x50), w(0x51), w(0x52), w(0x53), w(0x54), w(0x55), w(0x56), w(0x57),\

174 
w
(0x58), w(0x59), w(0x5a), w(0x5b), w(0x5c), w(0x5d), w(0x5e), w(0x5f),\

175 
w
(0x60), w(0x61), w(0x62), w(0x63), w(0x64), w(0x65), w(0x66), w(0x67),\

176 
w
(0x68), w(0x69), w(0x6a), w(0x6b), w(0x6c), w(0x6d), w(0x6e), w(0x6f),\

177 
w
(0x70), w(0x71), w(0x72), w(0x73), w(0x74), w(0x75), w(0x76), w(0x77),\

178 
w
(0x78), w(0x79), w(0x7a), w(0x7b), w(0x7c), w(0x7d), w(0x7e), w(0x7f),\

179 
w
(0x80), w(0x81), w(0x82), w(0x83), w(0x84), w(0x85), w(0x86), w(0x87),\

180 
w
(0x88), w(0x89), w(0x8a), w(0x8b), w(0x8c), w(0x8d), w(0x8e), w(0x8f),\

181 
w
(0x90), w(0x91), w(0x92), w(0x93), w(0x94), w(0x95), w(0x96), w(0x97),\

182 
w
(0x98), w(0x99), w(0x9a), w(0x9b), w(0x9c), w(0x9d), w(0x9e), w(0x9f),\

183 
w
(0xa0), w(0xa1), w(0xa2), w(0xa3), w(0xa4), w(0xa5), w(0xa6), w(0xa7),\

184 
w
(0xa8), w(0xa9), w(0xaa), w(0xab), w(0xac), w(0xad), w(0xae), w(0xaf),\

185 
w
(0xb0), w(0xb1), w(0xb2), w(0xb3), w(0xb4), w(0xb5), w(0xb6), w(0xb7),\

186 
w
(0xb8), w(0xb9), w(0xba), w(0xbb), w(0xbc), w(0xbd), w(0xbe), w(0xbf),\

187 
w
(0xc0), w(0xc1), w(0xc2), w(0xc3), w(0xc4), w(0xc5), w(0xc6), w(0xc7),\

188 
w
(0xc8), w(0xc9), w(0xca), w(0xcb), w(0xcc), w(0xcd), w(0xce), w(0xcf),\

189 
w
(0xd0), w(0xd1), w(0xd2), w(0xd3), w(0xd4), w(0xd5), w(0xd6), w(0xd7),\

190 
w
(0xd8), w(0xd9), w(0xda), w(0xdb), w(0xdc), w(0xdd), w(0xde), w(0xdf),\

191 
w
(0xe0), w(0xe1), w(0xe2), w(0xe3), w(0xe4), w(0xe5), w(0xe6), w(0xe7),\

192 
w
(0xe8), w(0xe9), w(0xea), w(0xeb), w(0xec), w(0xed), w(0xee), w(0xef),\

193 
w
(0xf0), w(0xf1), w(0xf2), w(0xf3), w(0xf4), w(0xf5), w(0xf6), w(0xf7),\

194 
w
(0xf8), w(0xf9), w(0xfa), w(0xfb), w(0xfc), w(0xfd), w(0xfe), w(0xff) }

196 c⁄° 
uöt_8t
 
	gsbox
[256] = 
sb_d©a
(
f1
);

197 c⁄° 
uöt_8t
 
	gisbox
[256] = 
isb_d©a
(
f1
);

199 c⁄° 
uöt_8t
 
	ggfm2_sbox
[256] = 
sb_d©a
(
f2
);

200 c⁄° 
uöt_8t
 
	ggfm3_sbox
[256] = 
sb_d©a
(
f3
);

202 c⁄° 
uöt_8t
 
	ggfmul_9
[256] = 
mm_d©a
(
f9
);

203 c⁄° 
uöt_8t
 
	ggfmul_b
[256] = 
mm_d©a
(
fb
);

204 c⁄° 
uöt_8t
 
	ggfmul_d
[256] = 
mm_d©a
(
fd
);

205 c⁄° 
uöt_8t
 
	ggfmul_e
[256] = 
mm_d©a
(
„
);

207 
	#s_box
(
x
Ë
sbox
[(x)]

	)

208 
	#is_box
(
x
Ë
isbox
[(x)]

	)

209 
	#gfm2_sb
(
x
Ë
gfm2_sbox
[(x)]

	)

210 
	#gfm3_sb
(
x
Ë
gfm3_sbox
[(x)]

	)

211 
	#gfm_9
(
x
Ë
gfmul_9
[(x)]

	)

212 
	#gfm_b
(
x
Ë
gfmul_b
[(x)]

	)

213 
	#gfm_d
(
x
Ë
gfmul_d
[(x)]

	)

214 
	#gfm_e
(
x
Ë
gfmul_e
[(x)]

	)

223 
uöt_8t
 
	$hibô
(c⁄° 
uöt_8t
 
x
)

224 { 
uöt_8t
 
r
 = (uöt_8t)((
x
 >> 1) | (x >> 2));

226 
r
 |= (r >> 2);

227 
r
 |= (r >> 4);

228  (
r
 + 1) >> 1;

229 
	}
}

233 
uöt_8t
 
	$gf_öv
(c⁄° 
uöt_8t
 
x
)

234 { 
uöt_8t
 
p1
 = 
x
, 
p2
 = 
BPOLY
, 
n1
 = 
	`hibô
(x), 
n2
 = 0x80, 
v1
 = 1, 
v2
 = 0;

236 if(
x
 < 2)

237  
x
;

241 if(
n1
)

242 
n2
 >
n1
)

244 
n2
 /
n1
;

245 
p2
 ^(
p1
 * 
n2
) & 0xff;

246 
v2
 ^(
v1
 * 
n2
);

247 
n2
 = 
	`hibô
(
p2
);

250  
v1
;

252 if(
n2
)

253 
n1
 >
n2
)

255 
n1
 /
n2
;

256 
p1
 ^
p2
 * 
n1
;

257 
v1
 ^
v2
 * 
n1
;

258 
n1
 = 
	`hibô
(
p1
);

261  
v2
;

263 
	}
}

266 
uöt_8t
 
	$fwd_afföe
(c⁄° 
uöt_8t
 
x
)

268 #i‡
	`deföed
–
HAVE_UINT_32T
 )

269 
uöt_32t
 
w
 = 
x
;

270 
w
 ^= (w << 1) ^ (w << 2) ^ (w << 3) ^ (w << 4);

271  0x63 ^ ((
w
 ^ (w >> 8)) & 0xff);

273  0x63 ^ 
x
 ^ (x << 1) ^ (x << 2) ^ (x << 3) ^ (x << 4)

274 ^ (
x
 >> 7) ^ (x >> 6) ^ (x >> 5) ^ (x >> 4);

276 
	}
}

278 
uöt_8t
 
	$öv_afföe
(c⁄° 
uöt_8t
 
x
)

280 #i‡
	`deföed
–
HAVE_UINT_32T
 )

281 
uöt_32t
 
w
 = 
x
;

282 
w
 = (w << 1) ^ (w << 3) ^ (w << 6);

283  0x05 ^ ((
w
 ^ (w >> 8)) & 0xff);

285  0x05 ^ (
x
 << 1) ^ (x << 3) ^ (x << 6)

286 ^ (
x
 >> 7) ^ (x >> 5) ^ (x >> 2);

288 
	}
}

290 
	#s_box
(
x
Ë
	`fwd_afföe
(
	`gf_öv
(x))

	)

291 
	#is_box
(
x
Ë
	`gf_öv
(
	`öv_afföe
(x))

	)

292 
	#gfm2_sb
(
x
Ë
	`f2
(
	`s_box
(x))

	)

293 
	#gfm3_sb
(
x
Ë
	`f3
(
	`s_box
(x))

	)

294 
	#gfm_9
(
x
Ë
	`f9
(x)

	)

295 
	#gfm_b
(
x
Ë
	`fb
(x)

	)

296 
	#gfm_d
(
x
Ë
	`fd
(x)

	)

297 
	#gfm_e
(
x
Ë
	`„
(x)

	)

301 #i‡
deföed
–
HAVE_MEMCPY
 )

302 
	#block_c›y_¬
(
d
, 
s
, 
l
Ë
	`mem˝y
(d, s,Ü)

	)

303 
	#block_c›y
(
d
, 
s
Ë
	`mem˝y
(d, s, 
N_BLOCK
)

	)

305 
	#block_c›y_¬
(
d
, 
s
, 
l
Ë
	`c›y_block_¬
(d, s,Ü)

	)

306 
	#block_c›y
(
d
, 
s
Ë
	`c›y_block
(d, s)

	)

308 
	$c›y_block
–*
d
, c⁄° *
s
 )

310 #i‡
	`deföed
–
HAVE_UINT_32T
 )

311 ((
uöt_32t
*)
d
)[ 0] = ((uöt_32t*)
s
)[ 0];

312 ((
uöt_32t
*)
d
)[ 1] = ((uöt_32t*)
s
)[ 1];

313 ((
uöt_32t
*)
d
)[ 2] = ((uöt_32t*)
s
)[ 2];

314 ((
uöt_32t
*)
d
)[ 3] = ((uöt_32t*)
s
)[ 3];

316 ((
uöt_8t
*)
d
)[ 0] = ((uöt_8t*)
s
)[ 0];

317 ((
uöt_8t
*)
d
)[ 1] = ((uöt_8t*)
s
)[ 1];

318 ((
uöt_8t
*)
d
)[ 2] = ((uöt_8t*)
s
)[ 2];

319 ((
uöt_8t
*)
d
)[ 3] = ((uöt_8t*)
s
)[ 3];

320 ((
uöt_8t
*)
d
)[ 4] = ((uöt_8t*)
s
)[ 4];

321 ((
uöt_8t
*)
d
)[ 5] = ((uöt_8t*)
s
)[ 5];

322 ((
uöt_8t
*)
d
)[ 6] = ((uöt_8t*)
s
)[ 6];

323 ((
uöt_8t
*)
d
)[ 7] = ((uöt_8t*)
s
)[ 7];

324 ((
uöt_8t
*)
d
)[ 8] = ((uöt_8t*)
s
)[ 8];

325 ((
uöt_8t
*)
d
)[ 9] = ((uöt_8t*)
s
)[ 9];

326 ((
uöt_8t
*)
d
)[10] = ((uöt_8t*)
s
)[10];

327 ((
uöt_8t
*)
d
)[11] = ((uöt_8t*)
s
)[11];

328 ((
uöt_8t
*)
d
)[12] = ((uöt_8t*)
s
)[12];

329 ((
uöt_8t
*)
d
)[13] = ((uöt_8t*)
s
)[13];

330 ((
uöt_8t
*)
d
)[14] = ((uöt_8t*)
s
)[14];

331 ((
uöt_8t
*)
d
)[15] = ((uöt_8t*)
s
)[15];

333 
	}
}

335 
	$c›y_block_¬
–
uöt_8t
 * 
d
, c⁄° uöt_8à*
s
, uöt_8à
¬
 )

337  
¬
-- )

339 *
d
++ = *
s
++;

340 
	}
}

344 
	$x‹_block
–*
d
, c⁄° *
s
 )

346 #i‡
	`deföed
–
HAVE_UINT_32T
 )

347 ((
uöt_32t
*)
d
)[ 0] ^((uöt_32t*)
s
)[ 0];

348 ((
uöt_32t
*)
d
)[ 1] ^((uöt_32t*)
s
)[ 1];

349 ((
uöt_32t
*)
d
)[ 2] ^((uöt_32t*)
s
)[ 2];

350 ((
uöt_32t
*)
d
)[ 3] ^((uöt_32t*)
s
)[ 3];

352 ((
uöt_8t
*)
d
)[ 0] ^((uöt_8t*)
s
)[ 0];

353 ((
uöt_8t
*)
d
)[ 1] ^((uöt_8t*)
s
)[ 1];

354 ((
uöt_8t
*)
d
)[ 2] ^((uöt_8t*)
s
)[ 2];

355 ((
uöt_8t
*)
d
)[ 3] ^((uöt_8t*)
s
)[ 3];

356 ((
uöt_8t
*)
d
)[ 4] ^((uöt_8t*)
s
)[ 4];

357 ((
uöt_8t
*)
d
)[ 5] ^((uöt_8t*)
s
)[ 5];

358 ((
uöt_8t
*)
d
)[ 6] ^((uöt_8t*)
s
)[ 6];

359 ((
uöt_8t
*)
d
)[ 7] ^((uöt_8t*)
s
)[ 7];

360 ((
uöt_8t
*)
d
)[ 8] ^((uöt_8t*)
s
)[ 8];

361 ((
uöt_8t
*)
d
)[ 9] ^((uöt_8t*)
s
)[ 9];

362 ((
uöt_8t
*)
d
)[10] ^((uöt_8t*)
s
)[10];

363 ((
uöt_8t
*)
d
)[11] ^((uöt_8t*)
s
)[11];

364 ((
uöt_8t
*)
d
)[12] ^((uöt_8t*)
s
)[12];

365 ((
uöt_8t
*)
d
)[13] ^((uöt_8t*)
s
)[13];

366 ((
uöt_8t
*)
d
)[14] ^((uöt_8t*)
s
)[14];

367 ((
uöt_8t
*)
d
)[15] ^((uöt_8t*)
s
)[15];

369 
	}
}

371 
	$c›y_™d_key
–*
d
, c⁄° *
s
, c⁄° *
k
 )

373 #i‡
	`deföed
–
HAVE_UINT_32T
 )

374 ((
uöt_32t
*)
d
)[ 0] = ((uöt_32t*)
s
)[ 0] ^ ((uöt_32t*)
k
)[ 0];

375 ((
uöt_32t
*)
d
)[ 1] = ((uöt_32t*)
s
)[ 1] ^ ((uöt_32t*)
k
)[ 1];

376 ((
uöt_32t
*)
d
)[ 2] = ((uöt_32t*)
s
)[ 2] ^ ((uöt_32t*)
k
)[ 2];

377 ((
uöt_32t
*)
d
)[ 3] = ((uöt_32t*)
s
)[ 3] ^ ((uöt_32t*)
k
)[ 3];

379 ((
uöt_8t
*)
d
)[ 0] = ((uöt_8t*)
s
)[ 0] ^ ((uöt_8t*)
k
)[ 0];

380 ((
uöt_8t
*)
d
)[ 1] = ((uöt_8t*)
s
)[ 1] ^ ((uöt_8t*)
k
)[ 1];

381 ((
uöt_8t
*)
d
)[ 2] = ((uöt_8t*)
s
)[ 2] ^ ((uöt_8t*)
k
)[ 2];

382 ((
uöt_8t
*)
d
)[ 3] = ((uöt_8t*)
s
)[ 3] ^ ((uöt_8t*)
k
)[ 3];

383 ((
uöt_8t
*)
d
)[ 4] = ((uöt_8t*)
s
)[ 4] ^ ((uöt_8t*)
k
)[ 4];

384 ((
uöt_8t
*)
d
)[ 5] = ((uöt_8t*)
s
)[ 5] ^ ((uöt_8t*)
k
)[ 5];

385 ((
uöt_8t
*)
d
)[ 6] = ((uöt_8t*)
s
)[ 6] ^ ((uöt_8t*)
k
)[ 6];

386 ((
uöt_8t
*)
d
)[ 7] = ((uöt_8t*)
s
)[ 7] ^ ((uöt_8t*)
k
)[ 7];

387 ((
uöt_8t
*)
d
)[ 8] = ((uöt_8t*)
s
)[ 8] ^ ((uöt_8t*)
k
)[ 8];

388 ((
uöt_8t
*)
d
)[ 9] = ((uöt_8t*)
s
)[ 9] ^ ((uöt_8t*)
k
)[ 9];

389 ((
uöt_8t
*)
d
)[10] = ((uöt_8t*)
s
)[10] ^ ((uöt_8t*)
k
)[10];

390 ((
uöt_8t
*)
d
)[11] = ((uöt_8t*)
s
)[11] ^ ((uöt_8t*)
k
)[11];

391 ((
uöt_8t
*)
d
)[12] = ((uöt_8t*)
s
)[12] ^ ((uöt_8t*)
k
)[12];

392 ((
uöt_8t
*)
d
)[13] = ((uöt_8t*)
s
)[13] ^ ((uöt_8t*)
k
)[13];

393 ((
uöt_8t
*)
d
)[14] = ((uöt_8t*)
s
)[14] ^ ((uöt_8t*)
k
)[14];

394 ((
uöt_8t
*)
d
)[15] = ((uöt_8t*)
s
)[15] ^ ((uöt_8t*)
k
)[15];

396 
	`block_c›y
(
d
, 
s
);

397 
	`x‹_block
(
d
, 
k
);

399 
	}
}

401 
	$add_round_key
–
uöt_8t
 
d
[
N_BLOCK
], c⁄° uöt_8à
k
[N_BLOCK] )

403 
	`x‹_block
(
d
, 
k
);

404 
	}
}

406 
	$shi·_sub_rows
–
uöt_8t
 
°
[
N_BLOCK
] )

407 { 
uöt_8t
 
â
;

409 
°
[ 0] = 
	`s_box
(st[ 0]); st[ 4] = s_box(st[ 4]);

410 
°
[ 8] = 
	`s_box
(st[ 8]); st[12] = s_box(st[12]);

412 
â
 = 
°
[1]; st[ 1] = 
	`s_box
(st[ 5]); st[ 5] = s_box(st[ 9]);

413 
°
[ 9] = 
	`s_box
(°[13]); st[13] = s_box–
â
 );

415 
â
 = 
°
[2]; st[ 2] = 
	`s_box
(st[10]); st[10] = s_box(Åt );

416 
â
 = 
°
[6]; st[ 6] = 
	`s_box
(st[14]); st[14] = s_box(Åt );

418 
â
 = 
°
[15]; st[15] = 
	`s_box
(st[11]); st[11] = s_box(st[ 7]);

419 
°
[ 7] = 
	`s_box
(°[ 3]); st[ 3] = s_box–
â
 );

420 
	}
}

422 
	$öv_shi·_sub_rows
–
uöt_8t
 
°
[
N_BLOCK
] )

423 { 
uöt_8t
 
â
;

425 
°
[ 0] = 
	`is_box
(st[ 0]); st[ 4] = is_box(st[ 4]);

426 
°
[ 8] = 
	`is_box
(st[ 8]); st[12] = is_box(st[12]);

428 
â
 = 
°
[13]; st[13] = 
	`is_box
(st[9]); st[ 9] = is_box(st[5]);

429 
°
[ 5] = 
	`is_box
(°[1]); st[ 1] = is_box–
â
 );

431 
â
 = 
°
[2]; st[ 2] = 
	`is_box
(st[10]); st[10] = is_box(Åt );

432 
â
 = 
°
[6]; st[ 6] = 
	`is_box
(st[14]); st[14] = is_box(Åt );

434 
â
 = 
°
[3]; st[ 3] = 
	`is_box
(st[ 7]); st[ 7] = is_box(st[11]);

435 
°
[11] = 
	`is_box
(°[15]); st[15] = is_box–
â
 );

436 
	}
}

438 #i‡
deföed
–
VERSION_1
 )

439 
	$mix_sub_cﬁumns
–
uöt_8t
 
dt
[
N_BLOCK
] )

440 { 
uöt_8t
 
°
[
N_BLOCK
];

441 
	`block_c›y
(
°
, 
dt
);

443 
	$mix_sub_cﬁumns
–
uöt_8t
 
dt
[
N_BLOCK
], uöt_8à
°
[N_BLOCK] )

446 
dt
[ 0] = 
	`gfm2_sb
(
°
[0]Ë^ 
	`gfm3_sb
(°[5]Ë^ 
	`s_box
(st[10]) ^ s_box(st[15]);

447 
dt
[ 1] = 
	`s_box
(
°
[0]Ë^ 
	`gfm2_sb
(°[5]Ë^ 
	`gfm3_sb
(st[10]) ^ s_box(st[15]);

448 
dt
[ 2] = 
	`s_box
(
°
[0]Ë^ s_box(°[5]Ë^ 
	`gfm2_sb
(°[10]Ë^ 
	`gfm3_sb
(st[15]);

449 
dt
[ 3] = 
	`gfm3_sb
(
°
[0]Ë^ 
	`s_box
(°[5]Ë^ s_box(°[10]Ë^ 
	`gfm2_sb
(st[15]);

451 
dt
[ 4] = 
	`gfm2_sb
(
°
[4]Ë^ 
	`gfm3_sb
(°[9]Ë^ 
	`s_box
(st[14]) ^ s_box(st[3]);

452 
dt
[ 5] = 
	`s_box
(
°
[4]Ë^ 
	`gfm2_sb
(°[9]Ë^ 
	`gfm3_sb
(st[14]) ^ s_box(st[3]);

453 
dt
[ 6] = 
	`s_box
(
°
[4]Ë^ s_box(°[9]Ë^ 
	`gfm2_sb
(°[14]Ë^ 
	`gfm3_sb
(st[3]);

454 
dt
[ 7] = 
	`gfm3_sb
(
°
[4]Ë^ 
	`s_box
(°[9]Ë^ s_box(°[14]Ë^ 
	`gfm2_sb
(st[3]);

456 
dt
[ 8] = 
	`gfm2_sb
(
°
[8]Ë^ 
	`gfm3_sb
(°[13]Ë^ 
	`s_box
(st[2]) ^ s_box(st[7]);

457 
dt
[ 9] = 
	`s_box
(
°
[8]Ë^ 
	`gfm2_sb
(°[13]Ë^ 
	`gfm3_sb
(st[2]) ^ s_box(st[7]);

458 
dt
[10] = 
	`s_box
(
°
[8]Ë^ s_box(°[13]Ë^ 
	`gfm2_sb
(°[2]Ë^ 
	`gfm3_sb
(st[7]);

459 
dt
[11] = 
	`gfm3_sb
(
°
[8]Ë^ 
	`s_box
(°[13]Ë^ s_box(°[2]Ë^ 
	`gfm2_sb
(st[7]);

461 
dt
[12] = 
	`gfm2_sb
(
°
[12]Ë^ 
	`gfm3_sb
(°[1]Ë^ 
	`s_box
(st[6]) ^ s_box(st[11]);

462 
dt
[13] = 
	`s_box
(
°
[12]Ë^ 
	`gfm2_sb
(°[1]Ë^ 
	`gfm3_sb
(st[6]) ^ s_box(st[11]);

463 
dt
[14] = 
	`s_box
(
°
[12]Ë^ s_box(°[1]Ë^ 
	`gfm2_sb
(°[6]Ë^ 
	`gfm3_sb
(st[11]);

464 
dt
[15] = 
	`gfm3_sb
(
°
[12]Ë^ 
	`s_box
(°[1]Ë^ s_box(°[6]Ë^ 
	`gfm2_sb
(st[11]);

465 
	}
}

467 #i‡
deföed
–
VERSION_1
 )

468 
	$öv_mix_sub_cﬁumns
–
uöt_8t
 
dt
[
N_BLOCK
] )

469 { 
uöt_8t
 
°
[
N_BLOCK
];

470 
	`block_c›y
(
°
, 
dt
);

472 
	$öv_mix_sub_cﬁumns
–
uöt_8t
 
dt
[
N_BLOCK
], uöt_8à
°
[N_BLOCK] )

475 
dt
[ 0] = 
	`is_box
(
	`gfm_e
(
°
[ 0]Ë^ 
	`gfm_b
(°[ 1]Ë^ 
	`gfm_d
(°[ 2]Ë^ 
	`gfm_9
(st[ 3]));

476 
dt
[ 5] = 
	`is_box
(
	`gfm_9
(
°
[ 0]Ë^ 
	`gfm_e
(°[ 1]Ë^ 
	`gfm_b
(°[ 2]Ë^ 
	`gfm_d
(st[ 3]));

477 
dt
[10] = 
	`is_box
(
	`gfm_d
(
°
[ 0]Ë^ 
	`gfm_9
(°[ 1]Ë^ 
	`gfm_e
(°[ 2]Ë^ 
	`gfm_b
(st[ 3]));

478 
dt
[15] = 
	`is_box
(
	`gfm_b
(
°
[ 0]Ë^ 
	`gfm_d
(°[ 1]Ë^ 
	`gfm_9
(°[ 2]Ë^ 
	`gfm_e
(st[ 3]));

480 
dt
[ 4] = 
	`is_box
(
	`gfm_e
(
°
[ 4]Ë^ 
	`gfm_b
(°[ 5]Ë^ 
	`gfm_d
(°[ 6]Ë^ 
	`gfm_9
(st[ 7]));

481 
dt
[ 9] = 
	`is_box
(
	`gfm_9
(
°
[ 4]Ë^ 
	`gfm_e
(°[ 5]Ë^ 
	`gfm_b
(°[ 6]Ë^ 
	`gfm_d
(st[ 7]));

482 
dt
[14] = 
	`is_box
(
	`gfm_d
(
°
[ 4]Ë^ 
	`gfm_9
(°[ 5]Ë^ 
	`gfm_e
(°[ 6]Ë^ 
	`gfm_b
(st[ 7]));

483 
dt
[ 3] = 
	`is_box
(
	`gfm_b
(
°
[ 4]Ë^ 
	`gfm_d
(°[ 5]Ë^ 
	`gfm_9
(°[ 6]Ë^ 
	`gfm_e
(st[ 7]));

485 
dt
[ 8] = 
	`is_box
(
	`gfm_e
(
°
[ 8]Ë^ 
	`gfm_b
(°[ 9]Ë^ 
	`gfm_d
(°[10]Ë^ 
	`gfm_9
(st[11]));

486 
dt
[13] = 
	`is_box
(
	`gfm_9
(
°
[ 8]Ë^ 
	`gfm_e
(°[ 9]Ë^ 
	`gfm_b
(°[10]Ë^ 
	`gfm_d
(st[11]));

487 
dt
[ 2] = 
	`is_box
(
	`gfm_d
(
°
[ 8]Ë^ 
	`gfm_9
(°[ 9]Ë^ 
	`gfm_e
(°[10]Ë^ 
	`gfm_b
(st[11]));

488 
dt
[ 7] = 
	`is_box
(
	`gfm_b
(
°
[ 8]Ë^ 
	`gfm_d
(°[ 9]Ë^ 
	`gfm_9
(°[10]Ë^ 
	`gfm_e
(st[11]));

490 
dt
[12] = 
	`is_box
(
	`gfm_e
(
°
[12]Ë^ 
	`gfm_b
(°[13]Ë^ 
	`gfm_d
(°[14]Ë^ 
	`gfm_9
(st[15]));

491 
dt
[ 1] = 
	`is_box
(
	`gfm_9
(
°
[12]Ë^ 
	`gfm_e
(°[13]Ë^ 
	`gfm_b
(°[14]Ë^ 
	`gfm_d
(st[15]));

492 
dt
[ 6] = 
	`is_box
(
	`gfm_d
(
°
[12]Ë^ 
	`gfm_9
(°[13]Ë^ 
	`gfm_e
(°[14]Ë^ 
	`gfm_b
(st[15]));

493 
dt
[11] = 
	`is_box
(
	`gfm_b
(
°
[12]Ë^ 
	`gfm_d
(°[13]Ë^ 
	`gfm_9
(°[14]Ë^ 
	`gfm_e
(st[15]));

494 
	}
}

496 #i‡
deföed
–
AES_ENC_PREKEYED
 ) || deföed–
AES_DEC_PREKEYED
 )

500 
ªtu∫_ty≥
 
	$´s_£t_key
–c⁄° 
key
[], 
Àngth_ty≥
 
keyÀn
, 
´s_c⁄ãxt
 
˘x
[1] )

502 
uöt_8t
 
cc
, 
rc
, 
hi
;

504  
keyÀn
 )

511 
˘x
->
∫d
 = 0;

514 
	`block_c›y_¬
(
˘x
->
ksch
, 
key
, 
keyÀn
);

515 
hi
 = (
keyÀn
 + 28) << 2;

516 
˘x
->
∫d
 = (
hi
 >> 4) - 1;

517  
cc
 = 
keyÀn
, 
rc
 = 1; c¯< 
hi
; cc += 4 )

518 { 
uöt_8t
 
â
, 
t0
, 
t1
, 
t2
, 
t3
;

520 
t0
 = 
˘x
->
ksch
[
cc
 - 4];

521 
t1
 = 
˘x
->
ksch
[
cc
 - 3];

522 
t2
 = 
˘x
->
ksch
[
cc
 - 2];

523 
t3
 = 
˘x
->
ksch
[
cc
 - 1];

524 if–
cc
 % 
keyÀn
 == 0 )

526 
â
 = 
t0
;

527 
t0
 = 
	`s_box
(
t1
Ë^ 
rc
;

528 
t1
 = 
	`s_box
(
t2
);

529 
t2
 = 
	`s_box
(
t3
);

530 
t3
 = 
	`s_box
(
â
);

531 
rc
 = 
	`f2
(rc);

533 if–
keyÀn
 > 24 && 
cc
 % keylen == 16 )

535 
t0
 = 
	`s_box
(t0);

536 
t1
 = 
	`s_box
(t1);

537 
t2
 = 
	`s_box
(t2);

538 
t3
 = 
	`s_box
(t3);

540 
â
 = 
cc
 - 
keyÀn
;

541 
˘x
->
ksch
[
cc
 + 0] = ctx->ksch[
â
 + 0] ^ 
t0
;

542 
˘x
->
ksch
[
cc
 + 1] = ctx->ksch[
â
 + 1] ^ 
t1
;

543 
˘x
->
ksch
[
cc
 + 2] = ctx->ksch[
â
 + 2] ^ 
t2
;

544 
˘x
->
ksch
[
cc
 + 3] = ctx->ksch[
â
 + 3] ^ 
t3
;

547 
	}
}

551 #i‡
deföed
–
AES_ENC_PREKEYED
 )

555 
ªtu∫_ty≥
 
	$´s_í¸y±
–c⁄° 
ö
[
N_BLOCK
], 
out
[N_BLOCK], c⁄° 
´s_c⁄ãxt
 
˘x
[1] )

557 if–
˘x
->
∫d
 )

559 
uöt_8t
 
s1
[
N_BLOCK
], 
r
;

560 
	`c›y_™d_key
–
s1
, 
ö
, 
˘x
->
ksch
 );

562  
r
 = 1 ;Ñ < 
˘x
->
∫d
 ; ++r )

563 #i‡
	`deföed
–
VERSION_1
 )

565 
	`mix_sub_cﬁumns
–
s1
 );

566 
	`add_round_key
–
s1
, 
˘x
->
ksch
 + 
r
 * 
N_BLOCK
);

569 { 
uöt_8t
 
s2
[
N_BLOCK
];

570 
	`mix_sub_cﬁumns
–
s2
, 
s1
 );

571 
	`c›y_™d_key
–
s1
, 
s2
, 
˘x
->
ksch
 + 
r
 * 
N_BLOCK
);

574 
	`shi·_sub_rows
–
s1
 );

575 
	`c›y_™d_key
–
out
, 
s1
, 
˘x
->
ksch
 + 
r
 * 
N_BLOCK
 );

580 
	}
}

584 
ªtu∫_ty≥
 
	$´s_cbc_í¸y±
–c⁄° *
ö
, *
out
,

585 
n_block
, 
iv
[
N_BLOCK
], c⁄° 
´s_c⁄ãxt
 
˘x
[1] )

588 
n_block
--)

590 
	`x‹_block
(
iv
, 
ö
);

591 if(
	`´s_í¸y±
(
iv
, iv, 
˘x
Ë!
EXIT_SUCCESS
)

592  
EXIT_FAILURE
;

594 
	`block_c›y
(
out
, 
iv
);

595 
ö
 +
N_BLOCK
;

596 
out
 +
N_BLOCK
;

598  
EXIT_SUCCESS
;

599 
	}
}

603 #i‡
deföed
–
AES_DEC_PREKEYED
 )

607 
ªtu∫_ty≥
 
	$´s_de¸y±
–c⁄° 
ö
[
N_BLOCK
], 
out
[N_BLOCK], c⁄° 
´s_c⁄ãxt
 
˘x
[1] )

609 if–
˘x
->
∫d
 )

611 
uöt_8t
 
s1
[
N_BLOCK
], 
r
;

612 
	`c›y_™d_key
–
s1
, 
ö
, 
˘x
->
ksch
 + ctx->
∫d
 * 
N_BLOCK
 );

613 
	`öv_shi·_sub_rows
–
s1
 );

615  
r
 = 
˘x
->
∫d
 ; --r ; )

616 #i‡
	`deföed
–
VERSION_1
 )

618 
	`add_round_key
–
s1
, 
˘x
->
ksch
 + 
r
 * 
N_BLOCK
 );

619 
	`öv_mix_sub_cﬁumns
–
s1
 );

622 { 
uöt_8t
 
s2
[
N_BLOCK
];

623 
	`c›y_™d_key
–
s2
, 
s1
, 
˘x
->
ksch
 + 
r
 * 
N_BLOCK
 );

624 
	`öv_mix_sub_cﬁumns
–
s1
, 
s2
 );

627 
	`c›y_™d_key
–
out
, 
s1
, 
˘x
->
ksch
 );

632 
	}
}

636 
ªtu∫_ty≥
 
	$´s_cbc_de¸y±
–c⁄° *
ö
, *
out
,

637 
n_block
, 
iv
[
N_BLOCK
], c⁄° 
´s_c⁄ãxt
 
˘x
[1] )

639 
n_block
--)

640 { 
uöt_8t
 
tmp
[
N_BLOCK
];

643 
	`block_c›y
(
tmp
, 
ö
);

644 if(
	`´s_de¸y±
(
ö
, 
out
, 
˘x
Ë!
EXIT_SUCCESS
)

645  
EXIT_FAILURE
;

646 
	`x‹_block
(
out
, 
iv
);

648 
	`block_c›y
(
iv
, 
tmp
);

649 
ö
 +
N_BLOCK
;

650 
out
 +
N_BLOCK
;

652  
EXIT_SUCCESS
;

653 
	}
}

657 #i‡
deföed
–
AES_ENC_128_OTFK
 )

661 
	$upd©e_í¸y±_key_128
–
uöt_8t
 
k
[
N_BLOCK
], uöt_8à*
rc
 )

662 { 
uöt_8t
 
cc
;

664 
k
[0] ^
	`s_box
(k[13]Ë^ *
rc
;

665 
k
[1] ^
	`s_box
(k[14]);

666 
k
[2] ^
	`s_box
(k[15]);

667 
k
[3] ^
	`s_box
(k[12]);

668 *
rc
 = 
	`f2
( *rc );

670 
cc
 = 4; cc < 16; cc += 4 )

672 
k
[
cc
 + 0] ^= k[cc - 4];

673 
k
[
cc
 + 1] ^= k[cc - 3];

674 
k
[
cc
 + 2] ^= k[cc - 2];

675 
k
[
cc
 + 3] ^= k[cc - 1];

677 
	}
}

681 
	$´s_í¸y±_128
–c⁄° 
ö
[
N_BLOCK
], 
out
[N_BLOCK],

682 c⁄° 
key
[
N_BLOCK
], 
o_key
[N_BLOCK] )

683 { 
uöt_8t
 
s1
[
N_BLOCK
], 
r
, 
rc
 = 1;

685 if(
o_key
 !
key
)

686 
	`block_c›y
–
o_key
, 
key
 );

687 
	`c›y_™d_key
–
s1
, 
ö
, 
o_key
 );

689  
r
 = 1 ;Ñ < 10 ; ++r )

690 #i‡
	`deföed
–
VERSION_1
 )

692 
	`mix_sub_cﬁumns
–
s1
 );

693 
	`upd©e_í¸y±_key_128
–
o_key
, &
rc
 );

694 
	`add_round_key
–
s1
, 
o_key
 );

697 { 
uöt_8t
 
s2
[
N_BLOCK
];

698 
	`mix_sub_cﬁumns
–
s2
, 
s1
 );

699 
	`upd©e_í¸y±_key_128
–
o_key
, &
rc
 );

700 
	`c›y_™d_key
–
s1
, 
s2
, 
o_key
 );

704 
	`shi·_sub_rows
–
s1
 );

705 
	`upd©e_í¸y±_key_128
–
o_key
, &
rc
 );

706 
	`c›y_™d_key
–
out
, 
s1
, 
o_key
 );

707 
	}
}

711 #i‡
deföed
–
AES_DEC_128_OTFK
 )

715 
	$upd©e_de¸y±_key_128
–
uöt_8t
 
k
[
N_BLOCK
], uöt_8à*
rc
 )

716 { 
uöt_8t
 
cc
;

718  
cc
 = 12; cc > 0; cc -= 4 )

720 
k
[
cc
 + 0] ^= k[cc - 4];

721 
k
[
cc
 + 1] ^= k[cc - 3];

722 
k
[
cc
 + 2] ^= k[cc - 2];

723 
k
[
cc
 + 3] ^= k[cc - 1];

725 *
rc
 = 
	`d2
(*rc);

726 
k
[0] ^
	`s_box
(k[13]Ë^ *
rc
;

727 
k
[1] ^
	`s_box
(k[14]);

728 
k
[2] ^
	`s_box
(k[15]);

729 
k
[3] ^
	`s_box
(k[12]);

730 
	}
}

734 
	$´s_de¸y±_128
–c⁄° 
ö
[
N_BLOCK
], 
out
[N_BLOCK],

735 c⁄° 
key
[
N_BLOCK
], 
o_key
[N_BLOCK] )

737 
uöt_8t
 
s1
[
N_BLOCK
], 
r
, 
rc
 = 0x6c;

738 if(
o_key
 !
key
)

739 
	`block_c›y
–
o_key
, 
key
 );

741 
	`c›y_™d_key
–
s1
, 
ö
, 
o_key
 );

742 
	`öv_shi·_sub_rows
–
s1
 );

744  
r
 = 10 ; --r ; )

745 #i‡
	`deföed
–
VERSION_1
 )

747 
	`upd©e_de¸y±_key_128
–
o_key
, &
rc
 );

748 
	`add_round_key
–
s1
, 
o_key
 );

749 
	`öv_mix_sub_cﬁumns
–
s1
 );

752 { 
uöt_8t
 
s2
[
N_BLOCK
];

753 
	`upd©e_de¸y±_key_128
–
o_key
, &
rc
 );

754 
	`c›y_™d_key
–
s2
, 
s1
, 
o_key
 );

755 
	`öv_mix_sub_cﬁumns
–
s1
, 
s2
 );

758 
	`upd©e_de¸y±_key_128
–
o_key
, &
rc
 );

759 
	`c›y_™d_key
–
out
, 
s1
, 
o_key
 );

760 
	}
}

764 #i‡
deföed
–
AES_ENC_256_OTFK
 )

768 
	$upd©e_í¸y±_key_256
–
uöt_8t
 
k
[2 * 
N_BLOCK
], uöt_8à*
rc
 )

769 { 
uöt_8t
 
cc
;

771 
k
[0] ^
	`s_box
(k[29]Ë^ *
rc
;

772 
k
[1] ^
	`s_box
(k[30]);

773 
k
[2] ^
	`s_box
(k[31]);

774 
k
[3] ^
	`s_box
(k[28]);

775 *
rc
 = 
	`f2
( *rc );

777 
cc
 = 4; cc < 16; cc += 4)

779 
k
[
cc
 + 0] ^= k[cc - 4];

780 
k
[
cc
 + 1] ^= k[cc - 3];

781 
k
[
cc
 + 2] ^= k[cc - 2];

782 
k
[
cc
 + 3] ^= k[cc - 1];

785 
k
[16] ^
	`s_box
(k[12]);

786 
k
[17] ^
	`s_box
(k[13]);

787 
k
[18] ^
	`s_box
(k[14]);

788 
k
[19] ^
	`s_box
(k[15]);

790  
cc
 = 20; cc < 32; cc += 4 )

792 
k
[
cc
 + 0] ^= k[cc - 4];

793 
k
[
cc
 + 1] ^= k[cc - 3];

794 
k
[
cc
 + 2] ^= k[cc - 2];

795 
k
[
cc
 + 3] ^= k[cc - 1];

797 
	}
}

801 
	$´s_í¸y±_256
–c⁄° 
ö
[
N_BLOCK
], 
out
[N_BLOCK],

802 c⁄° 
key
[2 * 
N_BLOCK
], 
o_key
[2 * N_BLOCK] )

804 
uöt_8t
 
s1
[
N_BLOCK
], 
r
, 
rc
 = 1;

805 if(
o_key
 !
key
)

807 
	`block_c›y
–
o_key
, 
key
 );

808 
	`block_c›y
–
o_key
 + 16, 
key
 + 16 );

810 
	`c›y_™d_key
–
s1
, 
ö
, 
o_key
 );

812  
r
 = 1 ;Ñ < 14 ; ++r )

813 #i‡
	`deföed
–
VERSION_1
 )

815 
	`mix_sub_cﬁumns
(
s1
);

816 if–
r
 & 1 )

817 
	`add_round_key
–
s1
, 
o_key
 + 16 );

820 
	`upd©e_í¸y±_key_256
–
o_key
, &
rc
 );

821 
	`add_round_key
–
s1
, 
o_key
 );

825 { 
uöt_8t
 
s2
[
N_BLOCK
];

826 
	`mix_sub_cﬁumns
–
s2
, 
s1
 );

827 if–
r
 & 1 )

828 
	`c›y_™d_key
–
s1
, 
s2
, 
o_key
 + 16 );

831 
	`upd©e_í¸y±_key_256
–
o_key
, &
rc
 );

832 
	`c›y_™d_key
–
s1
, 
s2
, 
o_key
 );

837 
	`shi·_sub_rows
–
s1
 );

838 
	`upd©e_í¸y±_key_256
–
o_key
, &
rc
 );

839 
	`c›y_™d_key
–
out
, 
s1
, 
o_key
 );

840 
	}
}

844 #i‡
deföed
–
AES_DEC_256_OTFK
 )

848 
	$upd©e_de¸y±_key_256
–
uöt_8t
 
k
[2 * 
N_BLOCK
], uöt_8à*
rc
 )

849 { 
uöt_8t
 
cc
;

851 
cc
 = 28; cc > 16; cc -= 4)

853 
k
[
cc
 + 0] ^= k[cc - 4];

854 
k
[
cc
 + 1] ^= k[cc - 3];

855 
k
[
cc
 + 2] ^= k[cc - 2];

856 
k
[
cc
 + 3] ^= k[cc - 1];

859 
k
[16] ^
	`s_box
(k[12]);

860 
k
[17] ^
	`s_box
(k[13]);

861 
k
[18] ^
	`s_box
(k[14]);

862 
k
[19] ^
	`s_box
(k[15]);

864 
cc
 = 12; cc > 0; cc -= 4)

866 
k
[
cc
 + 0] ^= k[cc - 4];

867 
k
[
cc
 + 1] ^= k[cc - 3];

868 
k
[
cc
 + 2] ^= k[cc - 2];

869 
k
[
cc
 + 3] ^= k[cc - 1];

872 *
rc
 = 
	`d2
(*rc);

873 
k
[0] ^
	`s_box
(k[29]Ë^ *
rc
;

874 
k
[1] ^
	`s_box
(k[30]);

875 
k
[2] ^
	`s_box
(k[31]);

876 
k
[3] ^
	`s_box
(k[28]);

877 
	}
}

882 
	$´s_de¸y±_256
–c⁄° 
ö
[
N_BLOCK
], 
out
[N_BLOCK],

883 c⁄° 
key
[2 * 
N_BLOCK
], 
o_key
[2 * N_BLOCK] )

885 
uöt_8t
 
s1
[
N_BLOCK
], 
r
, 
rc
 = 0x80;

887 if(
o_key
 !
key
)

889 
	`block_c›y
–
o_key
, 
key
 );

890 
	`block_c›y
–
o_key
 + 16, 
key
 + 16 );

893 
	`c›y_™d_key
–
s1
, 
ö
, 
o_key
 );

894 
	`öv_shi·_sub_rows
–
s1
 );

896  
r
 = 14 ; --r ; )

897 #i‡
	`deföed
–
VERSION_1
 )

899 if––
r
 & 1 ) )

901 
	`upd©e_de¸y±_key_256
–
o_key
, &
rc
 );

902 
	`add_round_key
–
s1
, 
o_key
 + 16 );

905 
	`add_round_key
–
s1
, 
o_key
 );

906 
	`öv_mix_sub_cﬁumns
–
s1
 );

909 { 
uöt_8t
 
s2
[
N_BLOCK
];

910 if––
r
 & 1 ) )

912 
	`upd©e_de¸y±_key_256
–
o_key
, &
rc
 );

913 
	`c›y_™d_key
–
s2
, 
s1
, 
o_key
 + 16 );

916 
	`c›y_™d_key
–
s2
, 
s1
, 
o_key
 );

917 
	`öv_mix_sub_cﬁumns
–
s1
, 
s2
 );

920 
	`c›y_™d_key
–
out
, 
s1
, 
o_key
 );

921 
	}
}

	@fwd/src/base64.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°döt.h
>

23 
	~"ba£64.h
"

28 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

29 
	#CRIT
(
a
Ë
	`Ârötf
(
°dîr
, "\nCRITICAL fûe:%†löe:%u msg:%s\n", 
__FILE__
, 
__LINE__
,a);
	`exô
(
EXIT_FAILURE
)

	)

32 
	#DEBUG
(
¨gs
...)

	)

40 
	gcode_62
 = '+';

41 
	gcode_63
 = '/';

42 
	gcode_∑d
 = '=';

50 
code_to_ch¨
(
uöt8_t
 
x
);

55 
uöt8_t
 
ch¨_to_code
(
x
);

60 
	$code_to_ch¨
(
uöt8_t
 
x
) {

61 i‡(
x
 <= 25) {

62  'A' + 
x
;

63 } i‡((
x
 >= 26) && (x <= 51)) {

64  'a' + (
x
-26);

65 } i‡((
x
 >= 52) && (x <= 61)) {

66  '0' + (
x
-52);

67 } i‡(
x
 == 62) {

68  
code_62
;

69 } i‡(
x
 == 63) {

70  
code_63
;

72 
	`DEBUG
("ERROR: %òIS OUT OF RANGE 0-63 FOR BASE64 ENCODING\n", 
x
);

73 
	`exô
(
EXIT_FAILURE
);

75 
	}
}

77 
uöt8_t
 
	$ch¨_to_code
(
x
) {

78 i‡((
x
 >= 'A') && (x <= 'Z')) {

79  (
uöt8_t
)
x
 - (uint8_t)'A';

80 } i‡((
x
 >= 'a') && (x <= 'z')) {

81  (
uöt8_t
)
x
 - (uint8_t)'a' + 26;

82 } i‡((
x
 >= '0') && (x <= '9')) {

83  (
uöt8_t
)
x
 - (uint8_t)'0' + 52;

84 } i‡(
x
 =
code_62
) {

86 } i‡(
x
 =
code_63
) {

89 
	`DEBUG
("ERROR: %¯(0x%xËIS INVALID CHARACTER FOR BASE64 DECODING\n", 
x
, x);

90 
	`exô
(
EXIT_FAILURE
);

92 
	}
}

97 
	$bö_to_b64_n›ad
(c⁄° 
uöt8_t
 * 
ö
, 
size
, * 
out
, 
max_Àn
) {

98 
i
;

99 
ªsu…_Àn
;

100 
fuŒ_blocks
;

101 
œ°_byãs
;

102 
œ°_ch¨s
;

103 
uöt32_t
 
b
;

106 i‡((
out
 =
NULL
Ë|| (
ö
 == NULL)) {

107 
	`DEBUG
("ERROR: NULL POINTER AS OUTPUT IN BIN_TO_B64\n");

110 i‡(
size
 == 0) {

111 *
out
 = 0;

116 
fuŒ_blocks
 = 
size
 / 3;

117 
œ°_byãs
 = 
size
 % 3;

118 
œ°_byãs
) {

120 
œ°_ch¨s
 = 0;

123 
œ°_ch¨s
 = 2;

126 
œ°_ch¨s
 = 3;

129 
	`CRIT
("switch defaultÅhat shouldÇot beÖossible");

133 
ªsu…_Àn
 = (4*
fuŒ_blocks
Ë+ 
œ°_ch¨s
;

134 i‡(
max_Àn
 < (
ªsu…_Àn
 + 1)) {

135 
	`DEBUG
("ERROR: OUTPUT BUFFER TOO SMALL IN BIN_TO_B64\n");

140 
i
=0; i < 
fuŒ_blocks
; ++i) {

141 
b
 = (0xFF & 
ö
[3*
i
] ) << 16;

142 
b
 |(0xFF & 
ö
[3*
i
 + 1]) << 8;

143 
b
 |0xFF & 
ö
[3*
i
 + 2];

144 
out
[4*
i
 + 0] = 
	`code_to_ch¨
((
b
 >> 18) & 0x3F);

145 
out
[4*
i
 + 1] = 
	`code_to_ch¨
((
b
 >> 12) & 0x3F);

146 
out
[4*
i
 + 2] = 
	`code_to_ch¨
((
b
 >> 6 ) & 0x3F);

147 
out
[4*
i
 + 3] = 
	`code_to_ch¨
–
b
 & 0x3F);

151 
i
 = 
fuŒ_blocks
;

152 i‡(
œ°_ch¨s
 == 0) {

153 
out
[4*
i
] = 0;

154 } i‡(
œ°_ch¨s
 == 2) {

155 
b
 = (0xFF & 
ö
[3*
i
] ) << 16;

156 
out
[4*
i
 + 0] = 
	`code_to_ch¨
((
b
 >> 18) & 0x3F);

157 
out
[4*
i
 + 1] = 
	`code_to_ch¨
((
b
 >> 12) & 0x3F);

158 
out
[4*
i
 + 2] = 0;

159 } i‡(
œ°_ch¨s
 == 3) {

160 
b
 = (0xFF & 
ö
[3*
i
] ) << 16;

161 
b
 |(0xFF & 
ö
[3*
i
 + 1]) << 8;

162 
out
[4*
i
 + 0] = 
	`code_to_ch¨
((
b
 >> 18) & 0x3F);

163 
out
[4*
i
 + 1] = 
	`code_to_ch¨
((
b
 >> 12) & 0x3F);

164 
out
[4*
i
 + 2] = 
	`code_to_ch¨
((
b
 >> 6 ) & 0x3F);

165 
out
[4*
i
 + 3] = 0;

168  
ªsu…_Àn
;

169 
	}
}

171 
	$b64_to_bö_n›ad
(c⁄° * 
ö
, 
size
, 
uöt8_t
 * 
out
, 
max_Àn
) {

172 
i
;

173 
ªsu…_Àn
;

174 
fuŒ_blocks
;

175 
œ°_ch¨s
;

176 
œ°_byãs
;

177 
uöt32_t
 
b
;

181 i‡((
out
 =
NULL
Ë|| (
ö
 == NULL)) {

182 
	`DEBUG
("ERROR: NULL POINTER AS OUTPUT OR INPUT IN B64_TO_BIN\n");

185 i‡(
size
 == 0) {

190 
fuŒ_blocks
 = 
size
 / 4;

191 
œ°_ch¨s
 = 
size
 % 4;

192 
œ°_ch¨s
) {

194 
œ°_byãs
 = 0;

197 
	`DEBUG
("ERROR: ONLY ONE CHAR LEFT IN B64_TO_BIN\n");

200 
œ°_byãs
 = 1;

203 
œ°_byãs
 = 2;

206 
	`CRIT
("switch defaultÅhat shouldÇot beÖossible");

210 
ªsu…_Àn
 = (3*
fuŒ_blocks
Ë+ 
œ°_byãs
;

211 i‡(
max_Àn
 < 
ªsu…_Àn
) {

212 
	`DEBUG
("ERROR: OUTPUT BUFFER TOO SMALL IN B64_TO_BIN\n");

217 
i
=0; i < 
fuŒ_blocks
; ++i) {

218 
b
 = (0x3F & 
	`ch¨_to_code
(
ö
[4*
i
] )) << 18;

219 
b
 |(0x3F & 
	`ch¨_to_code
(
ö
[4*
i
 + 1])) << 12;

220 
b
 |(0x3F & 
	`ch¨_to_code
(
ö
[4*
i
 + 2])) << 6;

221 
b
 |0x3F & 
	`ch¨_to_code
(
ö
[4*
i
 + 3]);

222 
out
[3*
i
 + 0] = (
b
 >> 16) & 0xFF;

223 
out
[3*
i
 + 1] = (
b
 >> 8 ) & 0xFF;

224 
out
[3*
i
 + 2] = 
b
 & 0xFF;

228 
i
 = 
fuŒ_blocks
;

229 i‡(
œ°_byãs
 == 1) {

230 
b
 = (0x3F & 
	`ch¨_to_code
(
ö
[4*
i
] )) << 18;

231 
b
 |(0x3F & 
	`ch¨_to_code
(
ö
[4*
i
 + 1])) << 12;

232 
out
[3*
i
 + 0] = (
b
 >> 16) & 0xFF;

233 i‡(((
b
 >> 12) & 0x0F) != 0) {

234 
	`DEBUG
("WARNING:Üast character contains unusable bits\n");

236 } i‡(
œ°_byãs
 == 2) {

237 
b
 = (0x3F & 
	`ch¨_to_code
(
ö
[4*
i
] )) << 18;

238 
b
 |(0x3F & 
	`ch¨_to_code
(
ö
[4*
i
 + 1])) << 12;

239 
b
 |(0x3F & 
	`ch¨_to_code
(
ö
[4*
i
 + 2])) << 6;

240 
out
[3*
i
 + 0] = (
b
 >> 16) & 0xFF;

241 
out
[3*
i
 + 1] = (
b
 >> 8 ) & 0xFF;

242 i‡(((
b
 >> 6) & 0x03) != 0) {

243 
	`DEBUG
("WARNING:Üast character contains unusable bits\n");

247  
ªsu…_Àn
;

248 
	}
}

250 
	$bö_to_b64
(c⁄° 
uöt8_t
 * 
ö
, 
size
, * 
out
, 
max_Àn
) {

251 
ªt
;

253 
ªt
 = 
	`bö_to_b64_n›ad
(
ö
, 
size
, 
out
, 
max_Àn
);

255 i‡(
ªt
 == -1) {

258 
ªt
%4) {

260  
ªt
;

262 
	`DEBUG
("ERROR: INVALID UNPADDED BASE64 STRING\n");

265 i‡(
max_Àn
 >(
ªt
 + 2 + 1)) {

266 
out
[
ªt
] = 
code_∑d
;

267 
out
[
ªt
+1] = 
code_∑d
;

268 
out
[
ªt
+2] = 0;

269  
ªt
+2;

271 
	`DEBUG
("ERROR:ÇotÉnoughÑoomÅoáddÖadding in bin_to_b64\n");

275 i‡(
max_Àn
 >(
ªt
 + 1 + 1)) {

276 
out
[
ªt
] = 
code_∑d
;

277 
out
[
ªt
+1] = 0;

278  
ªt
+1;

280 
	`DEBUG
("ERROR:ÇotÉnoughÑoomÅoáddÖadding in bin_to_b64\n");

284 
	`CRIT
("switch defaultÅhat shouldÇot beÖossible");

286 
	}
}

288 
	$b64_to_bö
(c⁄° * 
ö
, 
size
, 
uöt8_t
 * 
out
, 
max_Àn
) {

289 i‡(
ö
 =
NULL
) {

290 
	`DEBUG
("ERROR: NULL POINTER AS OUTPUT OR INPUT IN B64_TO_BIN\n");

293 i‡((
size
%4 == 0) && (size >= 4)) {

294 i‡(
ö
[
size
-2] =
code_∑d
) {

295  
	`b64_to_bö_n›ad
(
ö
, 
size
-2, 
out
, 
max_Àn
);

296 } i‡(
ö
[
size
-1] =
code_∑d
) {

297  
	`b64_to_bö_n›ad
(
ö
, 
size
-1, 
out
, 
max_Àn
);

299  
	`b64_to_bö_n›ad
(
ö
, 
size
, 
out
, 
max_Àn
);

302  
	`b64_to_bö_n›ad
(
ö
, 
size
, 
out
, 
max_Àn
);

304 
	}
}

	@fwd/src/cmac.c

1 
	~<°döt.h
>

2 
	~"´s.h
"

3 
	~"cmac.h
"

4 
	~"utûôõs.h
"

6 
	#LSHIFT
(
v
, 
r
) do { \

7 
öt32_t
 
i
; \

8 
i
 = 0; i < 15; i++) \

9 (
r
)[
i
] = (
v
)[i] << 1 | (v)[i + 1] >> 7; \

10 (
r
)[15] = (
v
)[15] << 1; \

11 } 0)

	)

13 
	#XOR
(
v
, 
r
) do { \

14 
öt32_t
 
i
; \

15 
i
 = 0; i < 16; i++) \

17 (
r
)[
i
] = (r)[i] ^ (
v
)[i]; \

20 

	)

22 
	$AES_CMAC_Inô
(
AES_CMAC_CTX
 *
˘x
)

24 
	`lgw_mem£t
(
˘x
->
X
, 0,  ctx->X);

25 
˘x
->
M_n
 = 0;

26 
	`lgw_mem£t
(
˘x
->
rijnd´l
.
ksch
, '\0', 240);

27 
	}
}

29 
	$AES_CMAC_SëKey
(
AES_CMAC_CTX
 *
˘x
, c⁄° 
uöt8_t
 
key
[
AES_CMAC_KEY_LENGTH
])

32 
	`´s_£t_key
–
key
, 
AES_CMAC_KEY_LENGTH
, &
˘x
->
rijnd´l
);

33 
	}
}

35 
	$AES_CMAC_Upd©e
(
AES_CMAC_CTX
 *
˘x
, c⁄° 
uöt8_t
 *
d©a
, 
uöt32_t
 
Àn
)

37 
uöt32_t
 
mÀn
;

38 
uöt8_t
 
ö
[16];

40 i‡(
˘x
->
M_n
 > 0) {

41 
mÀn
 = 
	`MIN
(16 - 
˘x
->
M_n
, 
Àn
);

42 
	`lgw_mem˝y
(
˘x
->
M_œ°
 + ctx->
M_n
, 
d©a
, 
mÀn
);

43 
˘x
->
M_n
 +
mÀn
;

44 i‡(
˘x
->
M_n
 < 16 || 
Àn
 =
mÀn
)

46 
	`XOR
(
˘x
->
M_œ°
, ctx->
X
);

48 
	`´s_í¸y±
–
˘x
->
X
, ctx->X, &˘x->
rijnd´l
);

49 
d©a
 +
mÀn
;

50 
Àn
 -
mÀn
;

52 
Àn
 > 16) {

54 
	`XOR
(
d©a
, 
˘x
->
X
);

57 
	`lgw_mem˝y
(
ö
, &
˘x
->
X
[0], 16);

58 
	`´s_í¸y±
–
ö
, in, &
˘x
->
rijnd´l
);

59 
	`lgw_mem˝y
(&
˘x
->
X
[0], 
ö
, 16);

61 
d©a
 += 16;

62 
Àn
 -= 16;

65 
	`lgw_mem˝y
(
˘x
->
M_œ°
, 
d©a
, 
Àn
);

66 
˘x
->
M_n
 = 
Àn
;

67 
	}
}

69 
	$AES_CMAC_FöÆ
(
uöt8_t
 
dige°
[
AES_CMAC_DIGEST_LENGTH
], 
AES_CMAC_CTX
 *
˘x
)

71 
uöt8_t
 
K
[16];

72 
uöt8_t
 
ö
[16];

74 
	`lgw_mem£t
(
K
, '\0', 16);

78 
	`´s_í¸y±
–
K
, K, &
˘x
->
rijnd´l
);

80 i‡(
K
[0] & 0x80) {

81 
	`LSHIFT
(
K
, K);

82 
K
[15] ^= 0x87;

84 
	`LSHIFT
(
K
, K);

87 i‡(
˘x
->
M_n
 == 16) {

89 
	`XOR
(
K
, 
˘x
->
M_œ°
);

93 i‡(
K
[0] & 0x80) {

94 
	`LSHIFT
(
K
, K);

95 
K
[15] ^= 0x87;

97 
	`LSHIFT
(
K
, K);

100 
˘x
->
M_œ°
[˘x->
M_n
] = 0x80;

101 ++
˘x
->
M_n
 < 16)

102 
˘x
->
M_œ°
[˘x->
M_n
] = 0;

104 
	`XOR
(
K
, 
˘x
->
M_œ°
);

108 
	`XOR
(
˘x
->
M_œ°
, ctx->
X
);

112 
	`lgw_mem˝y
(
ö
, &
˘x
->
X
[0], 16);

113 
	`´s_í¸y±
(
ö
, 
dige°
, &
˘x
->
rijnd´l
);

114 
	`lgw_mem£t
(
K
, 0,  K);

116 
	}
}

	@fwd/src/db.c

28 
	~<sys/time.h
>

29 
	~<sys/ty≥s.h
>

30 
	~<sys/°©.h
>

31 
	~<uni°d.h
>

32 
	~<°dlib.h
>

33 
	~<sig«l.h
>

34 
	~<dúít.h
>

35 
	~<sqlôe3.h
>

37 
	~"fwd.h
"

38 
	~"db.h
"

40 
	#MAX_DB_FIELD
 256

	)

42 
±hªad_muãx_t
 
	gmx_dblock
 = 
PTHREAD_MUTEX_INITIALIZER
;

43 
±hªad_c⁄d_t
 
	gdbc⁄d
;

44 
sqlôe3
 *
	gGWDB
;

45 
±hªad_t
 
	gsyn˘hªad
;

46 
	gd€xô
;

47 
	gdosync
;

49 
db_sync
();

51 
	#DEFINE_SQL_STATEMENT
(
°mt
,
sql
Ë
sqlôe3_°mt
 *stmt; \

52 c⁄° 
°mt
##
_sql
[] = 
sql
;

	)

54 
DEFINE_SQL_STATEMENT
(
put_°mt
, "INSERT OR REPLACE INTO gwdb (key, value) VALUES (?, ?)")

55 
DEFINE_SQL_STATEMENT
(
gë_°mt
, "SELECT value FROM gwdb WHERE key=?")

56 
DEFINE_SQL_STATEMENT
(
dñ_°mt
, "DELETE FROM gwdb WHERE key=?")

57 
DEFINE_SQL_STATEMENT
(
dñåì_°mt
, "DELETE FROM gwdb WHERE key || '/' LIKE ? || '/' || '%'")

58 
DEFINE_SQL_STATEMENT
(
dñåì_Æl_°mt
, "DELETE FROM gwdb")

59 
DEFINE_SQL_STATEMENT
(
gëåì_°mt
, "SELECT key, value FROM gwdb WHERE key || '/' LIKE ? || '/' || '%' ORDER BY key")

60 
DEFINE_SQL_STATEMENT
(
gëåì_Æl_°mt
, "SELECT key, value FROM gwdb ORDER BY key")

61 
DEFINE_SQL_STATEMENT
(
showkey_°mt
, "SELECT key, value FROM gwdb WHERE key LIKE '%' || '/' || ? ORDER BY key")

62 
DEFINE_SQL_STATEMENT
(
¸óã_gwdb_°mt
, "CREATE TEMPORARY TABLE IF NOT EXISTS gwdb(key VARCHAR(256), value VARCHAR(256), PRIMARY KEY(key))")

63 
DEFINE_SQL_STATEMENT
(
gëåì_¥efix_°mt
, "SELECT key, value FROM gwdb WHERE key > ?1 AND key <= ?1 || X'ffff'")

65 
	$öô_°mt
(
sqlôe3_°mt
 **
°mt
, c⁄° *
sql
, 
size_t
 
Àn
)

67 
	`±hªad_muãx_lock
(&
mx_dblock
);

68 i‡(
	`sqlôe3_¥ï¨e
(
GWDB
, 
sql
, 
Àn
, 
°mt
, 
NULL
Ë!
SQLITE_OK
) {

69 
	`lgw_log
(
LOG_WARNING
, "WARNING~ [db] Couldn'à¥ï¨ê°©emíà'%s': %s\n", 
sql
, 
	`sqlôe3_îrmsg
(
GWDB
));

70 
	`±hªad_muãx_u∆ock
(&
mx_dblock
);

73 
	`±hªad_muãx_u∆ock
(&
mx_dblock
);

76 
	}
}

82 
	$˛ón_°mt
(
sqlôe3_°mt
 **
°mt
, c⁄° *
sql
)

84 i‡(
	`sqlôe3_föÆize
(*
°mt
Ë!
SQLITE_OK
) {

85 
	`lgw_log
(
LOG_WARNING
, "WARNING~ [db] Couldn'àföÆizê°©emíà'%s': %s\n", 
sql
, 
	`sqlôe3_îrmsg
(
GWDB
));

86 *
°mt
 = 
NULL
;

89 *
°mt
 = 
NULL
;

91 
	}
}

97 
	$˛ón_°©emíts
()

99 
	`˛ón_°mt
(&
gë_°mt
, 
gë_°mt_sql
);

100 
	`˛ón_°mt
(&
dñ_°mt
, 
dñ_°mt_sql
);

101 
	`˛ón_°mt
(&
dñåì_°mt
, 
dñåì_°mt_sql
);

102 
	`˛ón_°mt
(&
dñåì_Æl_°mt
, 
dñåì_Æl_°mt_sql
);

103 
	`˛ón_°mt
(&
gëåì_°mt
, 
gëåì_°mt_sql
);

104 
	`˛ón_°mt
(&
gëåì_Æl_°mt
, 
gëåì_Æl_°mt_sql
);

105 
	`˛ón_°mt
(&
gëåì_¥efix_°mt
, 
gëåì_¥efix_°mt_sql
);

106 
	`˛ón_°mt
(&
showkey_°mt
, 
showkey_°mt_sql
);

107 
	`˛ón_°mt
(&
put_°mt
, 
put_°mt_sql
);

108 
	`˛ón_°mt
(&
¸óã_gwdb_°mt
, 
¸óã_gwdb_°mt_sql
);

109 
	}
}

111 
	$öô_°©emíts
()

115  
	`öô_°mt
(&
gë_°mt
, 
gë_°mt_sql
, (get_stmt_sql))

116 || 
	`öô_°mt
(&
dñ_°mt
, 
dñ_°mt_sql
, (del_stmt_sql))

117 || 
	`öô_°mt
(&
dñåì_°mt
, 
dñåì_°mt_sql
, (deltree_stmt_sql))

118 || 
	`öô_°mt
(&
dñåì_Æl_°mt
, 
dñåì_Æl_°mt_sql
, (deltree_all_stmt_sql))

119 || 
	`öô_°mt
(&
gëåì_°mt
, 
gëåì_°mt_sql
, (gettree_stmt_sql))

120 || 
	`öô_°mt
(&
gëåì_Æl_°mt
, 
gëåì_Æl_°mt_sql
, (gettree_all_stmt_sql))

121 || 
	`öô_°mt
(&
gëåì_¥efix_°mt
, 
gëåì_¥efix_°mt_sql
, (gettree_prefix_stmt_sql))

122 || 
	`öô_°mt
(&
showkey_°mt
, 
showkey_°mt_sql
, (showkey_stmt_sql))

123 || 
	`öô_°mt
(&
put_°mt
, 
put_°mt_sql
, (put_stmt_sql));

124 
	}
}

126 
	$db_¸óã_gwdb
()

128 
ªs
 = 0;

130 i‡(!
¸óã_gwdb_°mt
) {

131 
	`öô_°mt
(&
¸óã_gwdb_°mt
, 
¸óã_gwdb_°mt_sql
, (create_gwdb_stmt_sql));

134 
	`±hªad_muãx_lock
(&
mx_dblock
);

135 i‡(
	`sqlôe3_°ï
(
¸óã_gwdb_°mt
Ë!
SQLITE_DONE
) {

136 
	`lgw_log
(
LOG_WARNING
, "WARNING~ [db] Couldn'à¸óã GWDBÅabÀ: %s\n", 
	`sqlôe3_îrmsg
(
GWDB
));

137 
ªs
 = -1;

139 
	`sqlôe3_ª£t
(
¸óã_gwdb_°mt
);

140 
	`db_sync
();

141 
	`±hªad_muãx_u∆ock
(&
mx_dblock
);

143  
ªs
;

144 
	}
}

146 
	$db_›í
()

148 
	`±hªad_muãx_lock
(&
mx_dblock
);

149 i‡(
	`sqlôe3_›í
(
LGW_DB_FILE
, &
GWDB
Ë!
SQLITE_OK
) {

150 
	`lgw_log
(
LOG_WARNING
, "WARNING~ [db] U«bÀÅÿ›í LGW d©aba£ '%s': %s\n", 
LGW_DB_FILE
, 
	`sqlôe3_îrmsg
(
GWDB
));

151 
	`sqlôe3_˛o£
(
GWDB
);

152 
	`±hªad_muãx_u∆ock
(&
mx_dblock
);

156 
	`±hªad_muãx_u∆ock
(&
mx_dblock
);

159 
	}
}

161 
	$db_öô
()

163 i‡(
GWDB
) {

167 i‡(
	`db_›í
(Ë|| 
	`db_¸óã_gwdb
(Ë|| 
	`öô_°©emíts
()) {

172 
	}
}

177 
	$db_execuã_sql
(c⁄° *
sql
, (*
ˇŒback
)(*, , **, **), *
¨g
)

179 *
îrmsg
 = 
NULL
;

180 
ªs
 =0;

182 i‡(
	`sqlôe3_exec
(
GWDB
, 
sql
, 
ˇŒback
, 
¨g
, &
îrmsg
Ë!
SQLITE_OK
) {

183 
	`lgw_log
(
LOG_WARNING
, "WARNING~ [db] Eº‹Éxecutög SQL (%s): %s\n", 
sql
, 
îrmsg
);

184 
	`sqlôe3_‰ì
(
îrmsg
);

185 
ªs
 = -1;

188  
ªs
;

189 
	}
}

191 
	$lgw_db_begö_å™ß˘i⁄
()

193  
	`db_execuã_sql
("BEGIN TRANSACTION", 
NULL
, NULL);

194 
	}
}

196 
	$lgw_db_commô_å™ß˘i⁄
()

198  
	`db_execuã_sql
("COMMIT", 
NULL
, NULL);

199 
	}
}

201 
	$lgw_db_rﬁlback_å™ß˘i⁄
()

203  
	`db_execuã_sql
("ROLLBACK", 
NULL
, NULL);

204 
	}
}

206 
	$lgw_db_put
(c⁄° *
Ámûy
, c⁄° *
key
, c⁄° *
vÆue
)

208 
fuŒkey
[
MAX_DB_FIELD
];

209 
size_t
 
fuŒkey_Àn
;

210 
ªs
 = 0;

212 i‡(
	`°æí
(
Ámûy
Ë+ såÀn(
key
Ë+ 2 > (
fuŒkey
) - 1) {

213 
	`lgw_log
(
LOG_WARNING
, "WARNING~ [db] Famûyánd keyÜígth mu° bêÀs†th™ %zu byãs\n", (
fuŒkey
) - 3);

217 
fuŒkey_Àn
 = 
	`¢¥ötf
(
fuŒkey
, (fuŒkey), "/%s/%s", 
Ámûy
, 
key
);

219 
	`±hªad_muãx_lock
(&
mx_dblock
);

220 i‡(
	`sqlôe3_böd_ãxt
(
put_°mt
, 1, 
fuŒkey
, 
fuŒkey_Àn
, 
SQLITE_STATIC
Ë!
SQLITE_OK
) {

221 
	`lgw_log
(
LOG_WARNING
, "WARNING~ [db] Couldn'àböd keyÅÿ°mt: %s\n", 
	`sqlôe3_îrmsg
(
GWDB
));

222 
ªs
 = -1;

223 } i‡(
	`sqlôe3_böd_ãxt
(
put_°mt
, 2, 
vÆue
, -1, 
SQLITE_STATIC
Ë!
SQLITE_OK
) {

224 
	`lgw_log
(
LOG_WARNING
, "WARNING~ [db] Couldn'àböd vÆuêtÿ°mt: %s\n", 
	`sqlôe3_îrmsg
(
GWDB
));

225 
ªs
 = -1;

226 } i‡(
	`sqlôe3_°ï
(
put_°mt
Ë!
SQLITE_DONE
) {

227 
	`lgw_log
(
LOG_WARNING
, "WARNING~ [db] Couldn'àexecuã sèãmít: %s\n", 
	`sqlôe3_îrmsg
(
GWDB
));

228 
ªs
 = -1;

231 
	`sqlôe3_ª£t
(
put_°mt
);

232 
	`db_sync
();

233 
	`±hªad_muãx_u∆ock
(&
mx_dblock
);

235  
ªs
;

236 
	}
}

249 
	$db_gë_comm⁄
(c⁄° *
Ámûy
, c⁄° *
key
, **
buf„r
, 
buf„æí
)

251 c⁄° *
ªsu…
;

252 
fuŒkey
[
MAX_DB_FIELD
];

253 
size_t
 
fuŒkey_Àn
;

254 
ªs
 = 0;

256 i‡(
	`°æí
(
Ámûy
Ë+ såÀn(
key
Ë+ 2 > (
fuŒkey
) - 1) {

257 
	`lgw_log
(
LOG_WARNING
, "WARNING~ [db] Famûyánd keyÜígth mu° bêÀs†th™ %zu byãs\n", (
fuŒkey
) - 3);

261 
fuŒkey_Àn
 = 
	`¢¥ötf
(
fuŒkey
, (fuŒkey), "/%s/%s", 
Ámûy
, 
key
);

263 
	`±hªad_muãx_lock
(&
mx_dblock
);

264 i‡(
	`sqlôe3_böd_ãxt
(
gë_°mt
, 1, 
fuŒkey
, 
fuŒkey_Àn
, 
SQLITE_STATIC
Ë!
SQLITE_OK
) {

265 
	`lgw_log
(
LOG_WARNING
, "WARNING~ [db] Couldn'àböd keyÅÿ°mt: %s\n", 
	`sqlôe3_îrmsg
(
GWDB
));

266 
ªs
 = -1;

267 } i‡(
	`sqlôe3_°ï
(
gë_°mt
Ë!
SQLITE_ROW
) {

268 
	`lgw_log
(
LOG_DEBUG
, "DEBUG~ [db] U«bÀÅÿföd key '%s' i¿Ámûy '%s'\n", 
key
, 
Ámûy
);

269 
ªs
 = -1;

270 } i‡(!(
ªsu…
 = 
	`sqlôe3_cﬁumn_ãxt
(
gë_°mt
, 0))) {

271 
	`lgw_log
(
LOG_WARNING
, "WARNING~ [db] Couldn't get value\n");

272 
ªs
 = -1;

274 c⁄° *
vÆue
 = (c⁄° *Ë
ªsu…
;

276 i‡(
buf„æí
 == -1) {

277 *
buf„r
 = 
	`lgw_°rdup
(
vÆue
);

279 
	`°∫˝y
(*
buf„r
, 
vÆue
, 
buf„æí
);

282 
	`sqlôe3_ª£t
(
gë_°mt
);

283 
	`±hªad_muãx_u∆ock
(&
mx_dblock
);

285  
ªs
;

286 
	}
}

288 
boﬁ
 
	$lgw_db_key_exi°
(c⁄° *
key
) {

289 
	`±hªad_muãx_lock
(&
mx_dblock
);

290 i‡(!
	`lgw_°æí_zîo
(
key
Ë&& (
	`sqlôe3_böd_ãxt
(
showkey_°mt
, 1, key, -1, 
SQLITE_STATIC
Ë!
SQLITE_OK
)) {

291 
	`lgw_log
(
LOG_WARNING
, "WARNING~ [db] Could böd %†tÿ°mt: %s\n", 
LGW_DB_FILE
, 
	`sqlôe3_îrmsg
(
GWDB
));

292 
	`sqlôe3_ª£t
(
showkey_°mt
);

293 
	`±hªad_muãx_u∆ock
(&
mx_dblock
);

294  
Ál£
;

297 i‡(
	`sqlôe3_°ï
(
showkey_°mt
Ë=
SQLITE_ROW
) {

298 
	`sqlôe3_ª£t
(
showkey_°mt
);

299 
	`±hªad_muãx_u∆ock
(&
mx_dblock
);

300  
åue
;

303 
	`sqlôe3_ª£t
(
showkey_°mt
);

304 
	`±hªad_muãx_u∆ock
(&
mx_dblock
);

305  
Ál£
;

306 
	}
}

308 
	$lgw_db_gë
(c⁄° *
Ámûy
, c⁄° *
key
, *
vÆue
, 
vÆuñí
)

310 
	`lgw_as£π
(
vÆue
 !
NULL
);

313 
vÆue
[0] = 0;

315  
	`db_gë_comm⁄
(
Ámûy
, 
key
, &
vÆue
, 
vÆuñí
);

316 
	}
}

318 
	$lgw_db_gë_Æloˇãd
(c⁄° *
Ámûy
, c⁄° *
key
, **
out
)

320 *
out
 = 
NULL
;

322  
	`db_gë_comm⁄
(
Ámûy
, 
key
, 
out
, -1);

323 
	}
}

325 
	$lgw_db_dñ
(c⁄° *
Ámûy
, c⁄° *
key
)

327 
fuŒkey
[
MAX_DB_FIELD
];

328 
size_t
 
fuŒkey_Àn
;

329 
ªs
 = 0;

331 i‡(
	`°æí
(
Ámûy
Ë+ såÀn(
key
Ë+ 2 > (
fuŒkey
) - 1) {

332 
	`lgw_log
(
LOG_WARNING
, "WARNING~ [db] Famûyánd keyÜígth mu° bêÀs†th™ %zu byãs\n", (
fuŒkey
) - 3);

336 
fuŒkey_Àn
 = 
	`¢¥ötf
(
fuŒkey
, (fuŒkey), "/%s/%s", 
Ámûy
, 
key
);

338 
	`±hªad_muãx_lock
(&
mx_dblock
);

339 i‡(
	`sqlôe3_böd_ãxt
(
dñ_°mt
, 1, 
fuŒkey
, 
fuŒkey_Àn
, 
SQLITE_STATIC
Ë!
SQLITE_OK
) {

340 
	`lgw_log
(
LOG_WARNING
, "WARNING~ [db] Couldn'àböd keyÅÿ°mt: %s\n", 
	`sqlôe3_îrmsg
(
GWDB
));

341 
ªs
 = -1;

342 } i‡(
	`sqlôe3_°ï
(
dñ_°mt
Ë!
SQLITE_DONE
) {

343 
	`lgw_log
(
LOG_DEBUG
, "DEBUG~ [db] U«bÀÅÿföd key '%s' i¿Ámûy '%s'\n", 
key
, 
Ámûy
);

344 
ªs
 = -1;

346 
	`sqlôe3_ª£t
(
dñ_°mt
);

347 
	`db_sync
();

348 
	`±hªad_muãx_u∆ock
(&
mx_dblock
);

350  
ªs
;

351 
	}
}

353 
	$lgw_db_dñåì
(c⁄° *
Ámûy
, c⁄° *
keyåì
)

355 
sqlôe3_°mt
 *
°mt
 = 
dñåì_°mt
;

356 
¥efix
[
MAX_DB_FIELD
];

357 
ªs
 = 0;

359 i‡(!
	`lgw_°æí_zîo
(
Ámûy
)) {

360 i‡(!
	`lgw_°æí_zîo
(
keyåì
)) {

362 
	`¢¥ötf
(
¥efix
, ’ªfix), "/%s/%s", 
Ámûy
, 
keyåì
);

365 
	`¢¥ötf
(
¥efix
, ’ªfix), "/%s", 
Ámûy
);

368 
¥efix
[0] = '\0';

369 
°mt
 = 
dñåì_Æl_°mt
;

372 
	`±hªad_muãx_lock
(&
mx_dblock
);

373 i‡(!
	`lgw_°æí_zîo
(
¥efix
Ë&& (
	`sqlôe3_böd_ãxt
(
°mt
, 1,Öªfix, -1, 
SQLITE_STATIC
Ë!
SQLITE_OK
)) {

374 
	`lgw_log
(
LOG_WARNING
, "WARNING~ [db] Could böd %†tÿ°mt: %s\n", 
¥efix
, 
	`sqlôe3_îrmsg
(
GWDB
));

375 
ªs
 = -1;

376 } i‡(
	`sqlôe3_°ï
(
°mt
Ë!
SQLITE_DONE
) {

377 
	`lgw_log
(
LOG_WARNING
, "WARNING~ [db] Couldn'àexecuã stmt: %s\n", 
	`sqlôe3_îrmsg
(
GWDB
));

378 
ªs
 = -1;

380 
ªs
 = 
	`sqlôe3_ch™ges
(
GWDB
);

381 
	`sqlôe3_ª£t
(
°mt
);

382 
	`db_sync
();

383 
	`±hªad_muãx_u∆ock
(&
mx_dblock
);

385  
ªs
;

386 
	}
}

388 
lgw_db_íåy
 *
	$db_gëåì_comm⁄
(
sqlôe3_°mt
 *
°mt
)

390 
lgw_db_íåy
 *
hód
 = 
NULL
, *
¥ev
 = NULL, *
cur
;

392 
	`sqlôe3_°ï
(
°mt
Ë=
SQLITE_ROW
) {

393 c⁄° *
key
, *
vÆue
;

394 
size_t
 
key_Àn
, 
vÆue_Àn
;

396 
key
 = (c⁄° *Ë
	`sqlôe3_cﬁumn_ãxt
(
°mt
, 0);

397 
vÆue
 = (c⁄° *Ë
	`sqlôe3_cﬁumn_ãxt
(
°mt
, 1);

399 i‡(!
key
 || !
vÆue
) {

403 
key_Àn
 = 
	`°æí
(
key
);

404 
vÆue_Àn
 = 
	`°æí
(
vÆue
);

406 
cur
 = 
	`mÆloc
((*curË+ 
key_Àn
 + 
vÆue_Àn
 + 2);

407 i‡(!
cur
) {

411 
cur
->
√xt
 = 
NULL
;

412 
cur
->
key
 = cur->
d©a
 + 
vÆue_Àn
 + 1;

413 
	`mem˝y
(
cur
->
d©a
, 
vÆue
, 
vÆue_Àn
 + 1);

414 
	`mem˝y
(
cur
->
key
, key, 
key_Àn
 + 1);

416 i‡(
¥ev
) {

417 
¥ev
->
√xt
 = 
cur
;

419 
hód
 = 
cur
;

421 
¥ev
 = 
cur
;

424  
hód
;

425 
	}
}

427 
lgw_db_íåy
 *
	$lgw_db_gëåì
(c⁄° *
Ámûy
, c⁄° *
keyåì
)

429 
¥efix
[
MAX_DB_FIELD
];

430 
sqlôe3_°mt
 *
°mt
 = 
gëåì_°mt
;

431 
size_t
 
ªs
 = 0;

432 
lgw_db_íåy
 *
ªt
;

434 i‡(!
	`lgw_°æí_zîo
(
Ámûy
)) {

435 i‡(!
	`lgw_°æí_zîo
(
keyåì
)) {

437 
ªs
 = 
	`¢¥ötf
(
¥efix
, ’ªfix), "/%s/%s", 
Ámûy
, 
keyåì
);

440 
ªs
 = 
	`¢¥ötf
(
¥efix
, ’ªfix), "/%s", 
Ámûy
);

443 i‡(
ªs
 >(
¥efix
)) {

444 
	`lgw_log
(
LOG_WARNING
, "WARNING~ [db] Reque°edÖªfix i†toÿl⁄g: %s\n", 
keyåì
);

445  
NULL
;

448 
¥efix
[0] = '\0';

449 
°mt
 = 
gëåì_Æl_°mt
;

452 
	`±hªad_muãx_lock
(&
mx_dblock
);

453 i‡(
ªs
 && (
	`sqlôe3_böd_ãxt
(
°mt
, 1, 
¥efix
,Ñes, 
SQLITE_STATIC
Ë!
SQLITE_OK
)) {

454 
	`lgw_log
(
LOG_WARNING
, "WARNING~ [db] CouldÇŸ böd %†tÿ°mt: %s\n", 
¥efix
, 
	`sqlôe3_îrmsg
(
GWDB
));

455 
	`sqlôe3_ª£t
(
°mt
);

456 
	`±hªad_muãx_u∆ock
(&
mx_dblock
);

457  
NULL
;

460 
ªt
 = 
	`db_gëåì_comm⁄
(
°mt
);

461 
	`sqlôe3_ª£t
(
°mt
);

462 
	`±hªad_muãx_u∆ock
(&
mx_dblock
);

464  
ªt
;

465 
	}
}

467 
lgw_db_íåy
 *
	$lgw_db_gëåì_by_¥efix
(c⁄° *
Ámûy
, c⁄° *
key_¥efix
)

469 
¥efix
[
MAX_DB_FIELD
];

470 
size_t
 
ªs
;

471 
lgw_db_íåy
 *
ªt
;

473 
ªs
 = 
	`¢¥ötf
(
¥efix
, ’ªfix), "/%s/%s", 
Ámûy
, 
key_¥efix
);

474 i‡(
ªs
 >(
¥efix
)) {

475 
	`lgw_log
(
LOG_WARNING
, "WARNING~ [db] Reque°ed keyÖªfix i†toÿl⁄g: %s\n", 
key_¥efix
);

476  
NULL
;

479 
	`±hªad_muãx_lock
(&
mx_dblock
);

480 i‡(
	`sqlôe3_böd_ãxt
(
gëåì_¥efix_°mt
, 1, 
¥efix
, 
ªs
, 
SQLITE_STATIC
Ë!
SQLITE_OK
) {

481 
	`lgw_log
(
LOG_WARNING
, "WARNING~ [db] CouldÇŸ böd %†tÿ°mt: %s\n", 
¥efix
, 
	`sqlôe3_îrmsg
(
GWDB
));

482 
	`sqlôe3_ª£t
(
gëåì_¥efix_°mt
);

483 
	`±hªad_muãx_u∆ock
(&
mx_dblock
);

484  
NULL
;

487 
ªt
 = 
	`db_gëåì_comm⁄
(
gëåì_¥efix_°mt
);

488 
	`sqlôe3_ª£t
(
gëåì_¥efix_°mt
);

489 
	`±hªad_muãx_u∆ock
(&
mx_dblock
);

491  
ªt
;

492 
	}
}

494 
	$lgw_db_‰ìåì
(
lgw_db_íåy
 *
dbe
)

496 
lgw_db_íåy
 *
œ°
;

497 
dbe
) {

498 
œ°
 = 
dbe
;

499 
dbe
 = dbe->
√xt
;

500 
	`lgw_‰ì
(
œ°
);

502 
	}
}

510 
	$db_sync
()

512 
dosync
 = 1;

513 
	`±hªad_c⁄d_sig«l
(&
dbc⁄d
);

514 
	}
}

526 *
	$db_sync_thªad
()

528 
	`±hªad_muãx_lock
(&
mx_dblock
);

529 
	`lgw_db_begö_å™ß˘i⁄
();

535 !
dosync
) {

536 
	`±hªad_c⁄d_waô
(&
dbc⁄d
, &
mx_dblock
);

538 
dosync
 = 0;

539 i‡(
	`lgw_db_commô_å™ß˘i⁄
()) {

540 
	`lgw_db_rﬁlback_å™ß˘i⁄
();

542 i‡(
d€xô
) {

543 
	`±hªad_muãx_u∆ock
(&
mx_dblock
);

546 
	`lgw_db_begö_å™ß˘i⁄
();

547 
	`±hªad_muãx_u∆ock
(&
mx_dblock
);

548 
	`¶ìp
(1);

549 
	`±hªad_muãx_lock
(&
mx_dblock
);

552  
NULL
;

553 
	}
}

559 
	$gwdb_©exô
()

563 
	`±hªad_muãx_lock
(&
mx_dblock
);

564 
d€xô
 = 1;

565 
	`db_sync
();

566 
	`±hªad_muãx_u∆ock
(&
mx_dblock
);

568 
	`±hªad_joö
(
syn˘hªad
, 
NULL
);

569 
	`±hªad_muãx_lock
(&
mx_dblock
);

570 
	`˛ón_°©emíts
();

571 i‡(
	`sqlôe3_˛o£
(
GWDB
Ë=
SQLITE_OK
) {

572 
GWDB
 = 
NULL
;

574 
	`±hªad_muãx_u∆ock
(&
mx_dblock
);

575 
	}
}

577 
	$lgw_db_öô
()

579 
	`±hªad_c⁄d_öô
(&
dbc⁄d
, 
NULL
);

581 i‡(
	`db_öô
()) {

585 i‡(
	`±hªad_¸óã
(&
syn˘hªad
, 
NULL
, 
db_sync_thªad
, NULL)) {

589 
	`lgw_ªgi°î_©exô
(
gwdb_©exô
);

591 
	}
}

	@fwd/src/endianext.c

8 
	~<°döt.h
>

9 
	~<°dboﬁ.h
>

10 
	~<°rög.h
>

11 
	~<°dlib.h
>

13 #i‡
__BYTE_ORDER__
 =
__ORDER_LITTLE_ENDIAN__


15 
boﬁ
 
	$isBigEndün
() {

16  
Ál£
;

17 
	}
}

18 
boﬁ
 
	$isMiddÀEndün
() {

19  
Ál£
;

20 
	}
}

21 
boﬁ
 
	$isLôéeEndün
() {

22  
åue
;

23 
	}
}

25 #ñi‡
__BYTE_ORDER__
 =
__ORDER_BIG_ENDIAN__


27 
boﬁ
 
	$isBigEndün
() {

28  
åue
;

29 
	}
}

30 
boﬁ
 
	$isMiddÀEndün
() {

31  
Ál£
;

32 
	}
}

33 
boﬁ
 
	$isLôéeEndün
() {

34  
Ál£
;

35 
	}
}

39 
boﬁ
 
	$isBigEndün
() {

40 
uöt8_t
 
¥obe
[4] = { 0x01, 0x23, 0x45, 0x67 };

41 
uöt32_t
 
ªsu…
;

43 
	`mem˝y
(&
ªsu…
, 
¥obe
, 4);

44  (
ªsu…
 == 0x01234567);

45 
	}
}

47 
boﬁ
 
	$isMiddÀEndün
() {

48 
uöt8_t
 
¥obe
[4] = { 0x01, 0x23, 0x45, 0x67 };

49 
uöt32_t
 
ªsu…
;

51 
	`mem˝y
(&
ªsu…
, 
¥obe
, 4);

52  (
ªsu…
 == 0x23016745);

53 
	}
}

55 
boﬁ
 
	$isLôéeEndün
() {

56 
uöt8_t
 
¥obe
[4] = { 0x01, 0x23, 0x45, 0x67 };

57 
uöt32_t
 
ªsu…
;

59 
	`mem˝y
(&
ªsu…
, 
¥obe
, 4);

60  (
ªsu…
 == 0x67452301);

61 
	}
}

66 *
	$sw≠˝y
(*
de°
, c⁄° *
§c
, 
size_t
 
n
) {

67 
size_t
 
i
;

69 
i
 = 0; i < 
n
; i++)

70 ((*)
de°
)[
i
] = ((*)
§c
)[
n
 - i - 1];

71  
de°
;

72 
	}
}

78 *
	$tobe˝y
(*
de°
, c⁄° *
§c
, 
size_t
 
n
) {

79  (
	`isLôéeEndün
(Ë=
åue
Ë? 
	`sw≠˝y
(
de°
, 
§c
, 
n
Ë: 
	`mem˝y
(dest,

80 
§c
, 
n
);

81 
	}
}

	@fwd/src/fwd.c

31 #i‡
__STDC_VERSION__
 >= 199901L

32 
	#_XOPEN_SOURCE
 600

	)

34 
	#_XOPEN_SOURCE
 500

	)

37 
	~<°dboﬁ.h
>

38 
	~<°rög.h
>

39 
	~<°rögs.h
>

40 
	~<sig«l.h
>

41 
	~<time.h
>

42 
	~<uni°d.h
>

43 
	~<°dlib.h
>

44 
	~<î∫o.h
>

45 
	~<m©h.h
>

46 
	~<as£π.h
>

48 
	~<sys/sockë.h
>

49 
	~<√töë/ö.h
>

50 
	~<¨∑/öë.h
>

51 
	~<√tdb.h
>

53 
	~<gë›t.h
>

54 
	~<limôs.h
>

55 
	~<£m≠h‹e.h
>

57 
	~"fwd.h
"

58 
	~"∑rs⁄.h
"

59 
	~"ba£64.h
"

60 
	~"gho°.h
"

61 
	~"£rvi˚.h
"

62 
	~"°©s.h
"

63 
	~"timîsync.h
"

65 
	~"l‹agw_gps.h
"

66 
	~"l‹agw_aux.h
"

67 
	~"l‹agw_hÆ.h
"

68 
	~"l‹agw_hÆ_sx1301.h
"

69 
	~"l‹agw_hÆ_sx1302.h
"

72 vﬁ©ûê
boﬁ
 
	gexô_sig
 = 
Ál£
;

73 vﬁ©ûê
boﬁ
 
	gquô_sig
 = 
Ál£
;

80 
uöt8_t
 
	gLOG_PKT
 = 1;

81 
uöt8_t
 
	gLOG_TIMERSYNC
 = 0;

82 
uöt8_t
 
	gLOG_REPORT
 = 1;

83 
uöt8_t
 
	gLOG_JIT
 = 0;

84 
uöt8_t
 
	gLOG_JIT_ERROR
 = 0;

85 
uöt8_t
 
	gLOG_BEACON
 = 0;

86 
uöt8_t
 
	gLOG_INFO
 = 1;

87 
uöt8_t
 
	gLOG_DEBUG
 = 1;

88 
uöt8_t
 
	gLOG_WARNING
 = 1;

89 
uöt8_t
 
	gLOG_ERROR
 = 1;

90 
uöt8_t
 
	gLOG_MEM
 = 0;

96 
	gINIT_GW
;

98 
	gDEFI_HAL
;

102 
°›_˛ón_£rvi˚
();

104 
	slgw_©exô
 {

105 (*
	mfunc
)();

106 
	mis_˛ónup
;

107 
LGW_LIST_ENTRY
(
lgw_©exô
Ë
	mli°
;

110 
LGW_LIST_HEAD_STATIC
(
©exôs
, 
lgw_©exô
);

112 
	$lgw_run_©exôs
(
run_˛ónups
)

114 
lgw_©exô
 *
´
;

116 
	`LGW_LIST_LOCK
(&
©exôs
);

117 (
´
 = 
	`LGW_LIST_REMOVE_HEAD
(&
©exôs
, 
li°
))) {

118 i‡(
´
->
func
 && (!´->
is_˛ónup
 || 
run_˛ónups
)) {

119 
´
->
	`func
();

121 
	`lgw_‰ì
(
´
);

123 
	`LGW_LIST_UNLOCK
(&
©exôs
);

124 
	}
}

126 
	$__lgw_uƒegi°î_©exô
((*
func
)())

128 
lgw_©exô
 *
´
;

130 
	`LGW_LIST_TRAVERSE_SAFE_BEGIN
(&
©exôs
, 
´
, 
li°
) {

131 i‡(
´
->
func
 == func) {

132 
	`LGW_LIST_REMOVE_CURRENT
(
li°
);

133 
	`lgw_‰ì
(
´
);

137 
LGW_LIST_TRAVERSE_SAFE_END
;

138 
	}
}

140 
	$ªgi°î_©exô
((*
func
)(), 
is_˛ónup
)

142 
lgw_©exô
 *
´
;

144 
´
 = 
	`lgw_ˇŒoc
(1, (*ae));

145 i‡(!
´
) {

148 
´
->
func
 = func;

149 
´
->
is_˛ónup
 = is_cleanup;

150 
	`LGW_LIST_LOCK
(&
©exôs
);

151 
	`__lgw_uƒegi°î_©exô
(
func
);

152 
	`LGW_LIST_INSERT_HEAD
(&
©exôs
, 
´
, 
li°
);

153 
	`LGW_LIST_UNLOCK
(&
©exôs
);

156 
	}
}

158 
	$lgw_ªgi°î_©exô
((*
func
)())

160  
	`ªgi°î_©exô
(
func
, 0);

161 
	}
}

163 
	$lgw_ªgi°î_˛ónup
((*
func
)())

165  
	`ªgi°î_©exô
(
func
, 1);

166 
	}
}

168 
	$lgw_uƒegi°î_©exô
((*
func
)())

170 
	`LGW_LIST_LOCK
(&
©exôs
);

171 
	`__lgw_uƒegi°î_©exô
(
func
);

172 
	`LGW_LIST_UNLOCK
(&
©exôs
);

173 
	}
}

175 
sig_h™dÀr
(
sigio
);

178 
thªad_up
();

179 
thªad_gps
();

180 
thªad_vÆid
();

181 
thªad_jô
();

182 
thªad_w©chdog
();

183 
thªad_rxpkt_ªcy˛e
();

188 
	$ußge
( )

190 
	`¥ötf
("~~~ Library version string~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");

191 
	`¥ötf
(" %s\n", 
	`lgw_vîsi⁄_öfo
());

192 
	`¥ötf
("~~~ Available options ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");

193 
	`¥ötf
(" -hÖrintÅhis help\n");

194 
	`¥ötf
(" -c <filename> use config file otherÅhan 'gwcfg.json'\n");

195 
	`¥ötf
(" -dÑadio module [sx1301, sx1302, sx1308]'\n");

196 
	`¥ötf
("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");

197 
	}
}

199 
	$sig_h™dÀr
(
sigio
) {

200 i‡(
sigio
 =
SIGQUIT
) {

201 
quô_sig
 = 
åue
;

202 } i‡((
sigio
 =
SIGINT
Ë|| (sigiÿ=
SIGTERM
)) {

203 
exô_sig
 = 
åue
;

206 
	}
}

208 
	$°›_˛ón_£rvi˚
() {

209 
£rv_s
* 
£rv_íåy
 = 
NULL
;

211 
	`£rvi˚_°›
();

213 
	`LGW_LIST_TRAVERSE_SAFE_BEGIN
(&
GW
.
£rv_li°
, 
£rv_íåy
, 
li°
) {

214 
	`LGW_LIST_REMOVE_CURRENT
(
li°
);

215 
GW
.
£rv_li°
.
size
--;

216 i‡(
NULL
 !
£rv_íåy
->
√t
->
mqâ
)

217 
	`lgw_‰ì
(
£rv_íåy
->
√t
->
mqâ
);

218 i‡(
NULL
 !
£rv_íåy
->
√t
)

219 
	`lgw_‰ì
(
£rv_íåy
->
√t
);

220 i‡(
NULL
 !
£rv_íåy
->
ªp‹t
)

221 
	`lgw_‰ì
(
£rv_íåy
->
ªp‹t
);

222 i‡(
NULL
 !
£rv_íåy
)

223 
	`lgw_‰ì
(
£rv_íåy
);

225 
LGW_LIST_TRAVERSE_SAFE_END
;

226 
	}
}

228 
	$dif·ime•ec
(
time•ec
 
íd
, time•e¯
begönög
) {

229 
x
;

231 
x
 = 1E-9 * ()(
íd
.
tv_n£c
 - 
begönög
.tv_nsec);

232 
x
 +()(
íd
.
tv_£c
 - 
begönög
.tv_sec);

233  
x
;

234 
	}
}

236 
	$gë_tx_gaö_lut_ödex
(
uöt8_t
 
rf_chaö
, 
öt8_t
 
rf_powî
, uöt8_à* 
lut_ödex
) {

237 
uöt8_t
 
pow_ödex
;

238 
cuºít_be°_ödex
 = -1;

239 
uöt8_t
 
cuºít_be°_m©ch
 = 0xFF;

240 
diff
;

243 i‡(
lut_ödex
 =
NULL
) {

244 
	`lgw_log
(
LOG_ERROR
, "ERROR~ %†- wr⁄gÖ¨amëî\n", 
__FUNCTION__
);

249 
pow_ödex
 = 0;Öow_ödex < 
GW
.
tx
.
txlut
[
rf_chaö
].
size
;Öow_index++) {

250 
diff
 = 
rf_powî
 - 
GW
.
tx
.
txlut
[
rf_chaö
].
lut
[
pow_ödex
].rf_power;

251 i‡(
diff
 < 0) {

256 i‡((
cuºít_be°_ödex
 =-1Ë|| (
diff
 < 
cuºít_be°_m©ch
)) {

257 
cuºít_be°_m©ch
 = 
diff
;

258 
cuºít_be°_ödex
 = 
pow_ödex
;

264 i‡(
cuºít_be°_ödex
 > -1) {

265 *
lut_ödex
 = (
uöt8_t
)
cuºít_be°_ödex
;

267 *
lut_ödex
 = 0;

268 
	`lgw_log
(
LOG_ERROR
, "ERROR~ %†- faûedÅÿfödÅx gaöÜuàödex\n", 
__FUNCTION__
);

273 
	}
}

275 
	$£nd_tx_ack
(
£rv_s
* 
£rv
, 
uöt8_t
 
tokí_h
, uöt8_à
tokí_l
, 
jô_îr‹_e
 
îr‹
, 
öt32_t
 
îr‹_vÆue
) {

276 
uöt8_t
 
buff_ack
[
ACK_BUFF_SIZE
];

277 
buff_ödex
;

278 
j
;

281 
	`mem£t
(&
buff_ack
, 0,  buff_ack);

284 
buff_ack
[0] = 
PROTOCOL_VERSION
;

285 
buff_ack
[1] = 
tokí_h
;

286 
buff_ack
[2] = 
tokí_l
;

287 
buff_ack
[3] = 
PKT_TX_ACK
;

288 *(
uöt32_t
 *)(
buff_ack
 + 4Ë
GW
.
öfo
.
√t_mac_h
;

289 *(
uöt32_t
 *)(
buff_ack
 + 8Ë
GW
.
öfo
.
√t_mac_l
;

290 
buff_ödex
 = 12;

293 i‡(
îr‹
 !
JIT_ERROR_OK
) {

295 
	`mem˝y
((*)(
buff_ack
 + 
buff_ödex
), (*)"{\"txpk_ack\":{", 13);

296 
buff_ödex
 += 13;

298  
îr‹
 ) {

299 
JIT_ERROR_TX_POWER
:

300 
	`mem˝y
((*)(
buff_ack
 + 
buff_ödex
), (*)"\"warn\":", 7);

301 
buff_ödex
 += 7;

304 
	`mem˝y
((*)(
buff_ack
 + 
buff_ödex
), (*)"\"error\":", 8);

305 
buff_ödex
 += 8;

309 
îr‹
) {

310 
JIT_ERROR_FULL
:

311 
JIT_ERROR_COLLISION_PACKET
:

312 
	`mem˝y
((*)(
buff_ack
 + 
buff_ödex
), (*)"\"COLLISION_PACKET\"", 18);

313 
buff_ödex
 += 18;

315 
	`±hªad_muãx_lock
(&
£rv
->
ªp‹t
->
mx_ªp‹t
);

316 
£rv
->
ªp‹t
->
°©_down
.
mós_nb_tx_ªje˘ed_cﬁlisi⁄_∑ckë
 += 1;

317 
	`±hªad_muãx_u∆ock
(&
£rv
->
ªp‹t
->
mx_ªp‹t
);

319 
JIT_ERROR_TOO_LATE
:

320 
	`mem˝y
((*)(
buff_ack
 + 
buff_ödex
), (*)"\"TOO_LATE\"", 10);

321 
buff_ödex
 += 10;

323 
	`±hªad_muãx_lock
(&
£rv
->
ªp‹t
->
mx_ªp‹t
);

324 
£rv
->
ªp‹t
->
°©_down
.
mós_nb_tx_ªje˘ed_too_œã
 += 1;

325 
	`±hªad_muãx_u∆ock
(&
£rv
->
ªp‹t
->
mx_ªp‹t
);

327 
JIT_ERROR_TOO_EARLY
:

328 
	`mem˝y
((*)(
buff_ack
 + 
buff_ödex
), (*)"\"TOO_EARLY\"", 11);

329 
buff_ödex
 += 11;

331 
	`±hªad_muãx_lock
(&
£rv
->
ªp‹t
->
mx_ªp‹t
);

332 
£rv
->
ªp‹t
->
°©_down
.
mós_nb_tx_ªje˘ed_too_óæy
 += 1;

333 
	`±hªad_muãx_u∆ock
(&
£rv
->
ªp‹t
->
mx_ªp‹t
);

335 
JIT_ERROR_COLLISION_BEACON
:

336 
	`mem˝y
((*)(
buff_ack
 + 
buff_ödex
), (*)"\"COLLISION_BEACON\"", 18);

337 
buff_ödex
 += 18;

339 
	`±hªad_muãx_lock
(&
£rv
->
ªp‹t
->
mx_ªp‹t
);

340 
£rv
->
ªp‹t
->
°©_down
.
mós_nb_tx_ªje˘ed_cﬁlisi⁄_bóc⁄
 += 1;

341 
	`±hªad_muãx_u∆ock
(&
£rv
->
ªp‹t
->
mx_ªp‹t
);

343 
JIT_ERROR_TX_FREQ
:

344 
	`mem˝y
((*)(
buff_ack
 + 
buff_ödex
), (*)"\"TX_FREQ\"", 9);

345 
buff_ödex
 += 9;

347 
JIT_ERROR_TX_POWER
:

348 
	`mem˝y
((*)(
buff_ack
 + 
buff_ödex
), (*)"\"TX_POWER\"", 10);

349 
buff_ödex
 += 10;

351 
JIT_ERROR_GPS_UNLOCKED
:

352 
	`mem˝y
((*)(
buff_ack
 + 
buff_ödex
), (*)"\"GPS_UNLOCKED\"", 14);

353 
buff_ödex
 += 14;

356 
	`mem˝y
((*)(
buff_ack
 + 
buff_ödex
), (*)"\"UNKNOWN\"", 9);

357 
buff_ödex
 += 9;

361 
îr‹
) {

362 
JIT_ERROR_TX_POWER
:

363 
j
 = 
	`¢¥ötf
((*)(
buff_ack
 + 
buff_ödex
), 
ACK_BUFF_SIZE
-buff_ödex, ",\"vÆue\":%d", 
îr‹_vÆue
);

364 i‡(
j
 > 0) {

365 
buff_ödex
 +
j
;

367 
	`lgw_log
(
LOG_ERROR
, "ERROR~ [%s-up] s≈röt‡ÁûedÜöê%u\n", 
£rv
->
öfo
.
«me
, (
__LINE__
 - 4));

376 
	`mem˝y
((*)(
buff_ack
 + 
buff_ödex
), (*)"}}", 2);

377 
buff_ödex
 += 2;

380 
buff_ack
[
buff_ödex
] = 0;

383  
	`£nd
(
£rv
->
√t
->
sock_up
, (*)
buff_ack
, 
buff_ödex
, 0);

384 
	}
}

386 
	$¥öt_tx_°©us
(
uöt8_t
 
tx_°©us
) {

387 
tx_°©us
) {

388 
TX_OFF
:

389 
	`lgw_log
(
LOG_INFO
, "INFO~ [jit]Ügw_statusÑeturned TX_OFF\n");

391 
TX_FREE
:

392 
	`lgw_log
(
LOG_INFO
, "INFO~ [jit]Ügw_statusÑeturned TX_FREE\n");

394 
TX_EMITTING
:

395 
	`lgw_log
(
LOG_INFO
, "INFO~ [jit]Ügw_statusÑeturned TX_EMITTING\n");

397 
TX_SCHEDULED
:

398 
	`lgw_log
(
LOG_INFO
, "INFO~ [jit]Ügw_statusÑeturned TX_SCHEDULED\n");

401 
	`lgw_log
(
LOG_INFO
, "INFO~ [jô]Ügw_°©u†ªtu∫ed UNKNOWN (%d)\n", 
tx_°©us
);

404 
	}
}

406 
	$gë_rxpkt
(
£rv_s
* 
£rv
) {

407 
ªt
 = 0;

408 
rxpkts_s
* 
rxpkt_íåy
;

411 
	`LGW_LIST_TRAVERSE
(&
GW
.
rxpkts_li°
, 
rxpkt_íåy
, 
li°
) {

412 
ªt
 = 0;

413 i‡(
NULL
 =
rxpkt_íåy
)

415 i‡(
£rv
->
öfo
.
°amp
 =(£rv->öfo.°am∞& 
rxpkt_íåy
->
°amps
))

418 
	`mem£t
(
£rv
->
rxpkt
, 0, (serv->rxpkt));

419 
	`mem˝y
(
£rv
->
rxpkt
, 
rxpkt_íåy
->rxpkt, (
lgw_pkt_rx_s
Ë*Ñxpkt_íåy->
nb_pkt
);

420 
ªt
 = 
rxpkt_íåy
->
nb_pkt
;

421 
	`±hªad_muãx_lock
(&
GW
.
mx_böd_lock
);

422 
rxpkt_íåy
->
°amps
 |
£rv
->
öfo
.
°amp
;

423 
rxpkt_íåy
->
böd
--;

424 
	`±hªad_muãx_u∆ock
(&
GW
.
mx_böd_lock
);

428  
ªt
;

429 
	}
}

434 
	$maö
(
¨gc
, *
¨gv
[]) {

435 
i
;

436 
siga˘i⁄
 
siga˘
;

438 
£rv_s
* 
£rv_íåy
 = 
NULL
;

441 
±hªad_t
 
thrid_up
;

442 
±hªad_t
 
thrid_gps
;

443 
±hªad_t
 
thrid_vÆid
;

444 
±hªad_t
 
thrid_jô
;

445 
±hªad_t
 
thrid_timîsync
;

446 
±hªad_t
 
thrid_w©chdog
;

449  (
i
 = 
	`gë›t
–
¨gc
, 
¨gv
, "hc:d:" )) != -1 )

451  
i
 )

454 
	`ußge
( );

455  
EXIT_SUCCESS
;

459 i‡(
NULL
 !
›èrg
)

460 
	`°∫˝y
(
GW
.
hÆ
.
c⁄fs
.
gwcfg
, 
›èrg
, (GW.hal.confs.gwcfg));

464 i‡(
NULL
 !
›èrg
) {

465 
	`°∫˝y
(
GW
.
hÆ
.
bﬂrd
, 
›èrg
, (GW.hal.board));

476 
	`lgw_log
(
LOG_INFO
, "*** Dragino Packet Forwarder for Lora Gateway ***\n");

477 
	`lgw_log
(
LOG_INFO
, "*** LoR®c⁄˚¡øt‹ HALÜibøry vîsi⁄ infÿ%†***\n", 
	`lgw_vîsi⁄_öfo
());

478 
	`lgw_log
(
LOG_INFO
, "*** LoR®ødiÿty≥ o‡bﬂrd is: %†***\n", 
GW
.
hÆ
.
bﬂrd
);

481 
	`sigem±y£t
(&
siga˘
.
ß_mask
);

482 
siga˘
.
ß_Êags
 = 0;

483 
siga˘
.
ß_h™dÀr
 = 
sig_h™dÀr
;

484 
	`siga˘i⁄
(
SIGQUIT
, &
siga˘
, 
NULL
);

485 
	`siga˘i⁄
(
SIGINT
, &
siga˘
, 
NULL
);

486 
	`siga˘i⁄
(
SIGTERM
, &
siga˘
, 
NULL
);

487 
	`siga˘i⁄
(
SIGQUIT
, &
siga˘
, 
NULL
);

489 i‡(!
	`°∫ˇ£cmp
(
GW
.
hÆ
.
bﬂrd
, "sx1302", 6)) {

490 
HAL
.
lgw_bﬂrd_£tc⁄f
 = 
lgw_bﬂrd_sx1302_£tc⁄f
;

491 
HAL
.
lgw_rxrf_£tc⁄f
 = 
lgw_rxrf_sx1302_£tc⁄f
;

492 
HAL
.
lgw_rxif_£tc⁄f
 = 
lgw_rxif_sx1302_£tc⁄f
;

493 
HAL
.
lgw_debug_£tc⁄f
 = 
lgw_debug_sx1302_£tc⁄f
;

494 
HAL
.
lgw_txgaö_£tc⁄f
 = 
lgw_txgaö_sx1302_£tc⁄f
;

495 
HAL
.
lgw_time°amp_£tc⁄f
 = 
lgw_time°amp_sx1302_£tc⁄f
;

496 
HAL
.
lgw_°¨t
 = 
lgw_sx1302_°¨t
;

497 
HAL
.
lgw_°›
 = 
lgw_sx1302_°›
;

498 
HAL
.
lgw_ª˚ive
 = 
lgw_sx1302_ª˚ive
;

499 
HAL
.
lgw_£nd
 = 
lgw_sx1302_£nd
;

500 
HAL
.
lgw_°©us
 = 
lgw_sx1302_°©us
;

501 
HAL
.
lgw_ab‹t_tx
 = 
lgw_ab‹t_sx1302_tx
;

502 
HAL
.
lgw_gë_åig˙t
 = 
lgw_gë_sx1302_åig˙t
;

503 
HAL
.
lgw_gë_ö°˙t
 = 
lgw_gë_sx1302_ö°˙t
;

504 
HAL
.
lgw_gë_eui
 = 
lgw_gë_sx1302_eui
;

505 
HAL
.
lgw_gë_ãm≥øtuª
 = 
lgw_gë_sx1302_ãm≥øtuª
;

507 
HAL
.
lgw_bﬂrd_£tc⁄f
 = 
lgw_bﬂrd_sx1301_£tc⁄f
;

508 
HAL
.
lgw_rxrf_£tc⁄f
 = 
lgw_rxrf_sx1301_£tc⁄f
;

509 
HAL
.
lgw_rxif_£tc⁄f
 = 
lgw_rxif_sx1301_£tc⁄f
;

510 
HAL
.
lgw_debug_£tc⁄f
 = 
NULL
;

511 
HAL
.
lgw_txgaö_£tc⁄f
 = 
lgw_txgaö_sx1301_£tc⁄f
;

512 
HAL
.
lgw_time°amp_£tc⁄f
 = 
NULL
;

513 
HAL
.
lgw_°¨t
 = 
lgw_sx1301_°¨t
;

514 
HAL
.
lgw_°›
 = 
lgw_sx1301_°›
;

515 
HAL
.
lgw_ª˚ive
 = 
lgw_sx1301_ª˚ive
;

516 
HAL
.
lgw_£nd
 = 
lgw_sx1301_£nd
;

517 
HAL
.
lgw_°©us
 = 
lgw_sx1301_°©us
;

518 
HAL
.
lgw_ab‹t_tx
 = 
lgw_ab‹t_sx1301_tx
;

519 
HAL
.
lgw_gë_åig˙t
 = 
lgw_gë_sx1301_åig˙t
;

520 
HAL
.
lgw_gë_ö°˙t
 = 
lgw_gë_sx1301_ö°˙t
;

521 
HAL
.
lgw_gë_eui
 = 
lgw_gë_sx1301_eui
;

522 
HAL
.
lgw_gë_ãm≥øtuª
 = 
lgw_gë_sx1301_ãm≥øtuª
;

526 
£rv_íåy
 = (
£rv_s
*)
	`lgw_mÆloc
((serv_s));

527 i‡(
NULL
 =
£rv_íåy
) {

528 
	`lgw_log
(
LOG_ERROR
, "[main] ERROR~ Can'tállocateÖkt service, EXIT!\n");

529 
	`exô
(
EXIT_FAILURE
);

531 
£rv_íåy
->
li°
.
√xt
 = 
NULL
;

533 
£rv_íåy
->
√t
 = 
NULL
;

534 
£rv_íåy
->
ªp‹t
 = 
NULL
;

536 
£rv_íåy
->
°©e
.
live
 = 
Ál£
;

538 
£rv_íåy
->
öfo
.
ty≥
 = 
pkt
;

539 
£rv_íåy
->
öfo
.
°amp
 = 1;

540 
	`°r˝y
(
£rv_íåy
->
öfo
.
«me
, "PKT_SERV");;

546 i‡(
	`£m_öô
(&
£rv_íåy
->
thªad
.
£ma
, 0, 0) != 0) {

547 
	`lgw_log
(
LOG_ERROR
, "[main] ERROR~ initializesÅhe unnamed semaphore, EXIT!\n");

548 
	`lgw_‰ì
(
£rv_íåy
);

549 
	`exô
(
EXIT_FAILURE
);

552 
£rv_íåy
->
thªad
.
°›_sig
 = 
Ál£
;

554 
	`LGW_LIST_INSERT_TAIL
(&
GW
.
£rv_li°
, 
£rv_íåy
, 
li°
);

556 i‡(
	`ac˚ss
(
GW
.
hÆ
.
c⁄fs
.
gwcfg
, 
R_OK
Ë=0 &&ác˚ss(GW.hÆ.c⁄fs.
sxcfg
, R_OK) == 0) {

557 i‡(
	`∑r£cfg
()) {

558 
	`lgw_log
(
LOG_ERROR
, "ERROR~ [main] failedÅoÖarse configuration file\n");

559 
	`exô
(
EXIT_FAILURE
);

562 
	`lgw_log
(
LOG_ERROR
, "ERROR~ [maö] faûedÅÿfödány c⁄figuøti⁄ fûe: %†%s\n", 
GW
.
hÆ
.
c⁄fs
.
gwcfg
, GW.hÆ.c⁄fs.
sxcfg
);

563 
	`exô
(
EXIT_FAILURE
);

567 i‡(
GW
.
gps
.
gps_ây_∑th
[0] != '\0') {

568 
i
 = 
	`lgw_gps_íabÀ
(
GW
.
gps
.
gps_ây_∑th
, "ubx7", 0, &GW.gps.
gps_ây_fd
);

569 i‡(
i
 !
LGW_GPS_SUCCESS
) {

570 
	`lgw_log
(
LOG_WARNING
, "WARNING~ [maö] impossibÀÅÿ›í %†f‹ GPS syn¯(checkÖîmissi⁄s)\n", 
GW
.
gps
.
gps_ây_∑th
);

571 
GW
.
gps
.
gps_íabÀd
 = 
Ál£
;

572 
GW
.
gps
.
gps_ªf_vÆid
 = 
Ál£
;

574 
	`lgw_log
(
LOG_INFO
, "INFO~ [maö] TTYÖ‹à%†›í f‹ GPS synchr⁄iz©i⁄\n", 
GW
.
gps
.
gps_ây_∑th
);

575 
GW
.
gps
.
gps_íabÀd
 = 
åue
;

576 
GW
.
gps
.
gps_ªf_vÆid
 = 
Ál£
;

581 
	`tz£t
();

584 i‡(
GW
.
cfg
.
gho°°ªam_íabÀd
 =
åue
) {

585 
	`gho°_°¨t
(
GW
.
cfg
.
gho°_ho°
, GW.cfg.
gho°_p‹t
, GW.
gps
.
ª„ªn˚_co‹d
, GW.
öfo
.
g©eway_id
);

587 
	`lgw_log
(
LOG_INFO
, "INFO~ [main] GhostÜistener started, ghostÖackets canÇow beÑeceived.\n");

591 i‡(
GW
.
cfg
.
ødio°ªam_íabÀd
 =
åue
) {

592 
	`lgw_log
(
LOG_INFO
, "INFO~ [main] StartingÅhe concentrator\n");

593 i‡(
	`sy°em
("/usr/bin/reset_lgw.sh start") != 0) {

594 
	`lgw_log
(
LOG_ERROR
, "ERROR~ [main] failedÅo start SX130X, Please startágain!\n");

595 
	`exô
(
EXIT_FAILURE
);

597 
i
 = 
HAL
.
	`lgw_°¨t
();

598 i‡(
i
 =
LGW_HAL_SUCCESS
) {

599 
	`lgw_log
(
LOG_INFO
, "INFO~ [main] concentrator started,ÑadioÖackets canÇow beÑeceived.\n");

601 
	`lgw_log
(
LOG_ERROR
, "ERROR~ [main] failedÅo startÅhe concentrator\n");

602 i‡(
	`sy°em
("/usr/bin/reset_lgw.sh stop") != 0) {

603 
	`lgw_log
(
LOG_ERROR
, "ERROR~ [main] failedÅo stop SX130X,Ñun scriptÑeset_lgw.sh stop!\n");

604 
	`exô
(
EXIT_FAILURE
);

606 
	`exô
(
EXIT_FAILURE
);

609 
	`lgw_log
(
LOG_WARNING
, "WARNING~ Radio is disabled,ÑadioÖackets cannot be sent orÑeceived.\n");

612 i‡(
	`lgw_±hªad_¸óã
(&
thrid_up
, 
NULL
, (*(*)(*))
thªad_up
, NULL))

613 
	`lgw_log
(
LOG_ERROR
, "ERROR~ [main] impossibleÅo create data upÅhread\n");

616 
	`jô_queue_öô
(&
GW
.
tx
.
jô_queue
[0]);

617 
	`jô_queue_öô
(&
GW
.
tx
.
jô_queue
[1]);

619 i‡(
	`lgw_±hªad_¸óã
(&
thrid_jô
, 
NULL
, (*(*)(*))
thªad_jô
, NULL))

620 
	`lgw_log
(
LOG_ERROR
, "ERROR~ [main] impossibleÅo create JITÅhread\n");

623 i‡(
GW
.
gps
.
gps_íabÀd
 =
åue
) {

625 i‡(
	`lgw_±hªad_¸óã
(&
thrid_timîsync
, 
NULL
, (*(*)(*))
thªad_timîsync
, NULL))

626 
	`lgw_log
(
LOG_ERROR
, "ERROR~ [main] impossibleÅo create Timer SyncÅhread\n");

627 i‡(
	`lgw_±hªad_¸óã
(&
thrid_gps
, 
NULL
, (*(*)(*))
thªad_gps
, NULL))

628 
	`lgw_log
(
LOG_ERROR
, "ERROR~ [main] impossibleÅo create GPSÅhread\n");

629 i‡(
	`±hªad_¸óã
(&
thrid_vÆid
, 
NULL
, (*(*)(*))
thªad_vÆid
, NULL))

630 
	`lgw_log
(
LOG_ERROR
, "ERROR~ [main] impossibleÅo create validationÅhread\n");

634 i‡(
GW
.
cfg
.
wd_íabÀd
 =
åue
) {

635 
GW
.
cfg
.
œ°_lo›
 = 
	`time
(
NULL
);

636 i‡(
	`lgw_±hªad_¸óã
(&
thrid_w©chdog
, 
NULL
, (*(*)(*))
thªad_w©chdog
, NULL))

637 
	`lgw_log
(
LOG_ERROR
, "ERROR~ [main] impossibleÅo create watchdogÅhread\n");

647 
	`£rvi˚_°¨t
();

655 !
exô_sig
 && !
quô_sig
) {

656 
GW
.
cfg
.
œ°_lo›
 = 
	`time
(
NULL
);

659 
	`waô_ms
(1000 * 
GW
.
cfg
.
time_öãrvÆ
);

661 i‡(
exô_sig
 || 
quô_sig
) {

665 
	`ªp‹t_°¨t
();

675 i‡(
GW
.
cfg
.
wd_íabÀd
 =
åue
)

676 
	`±hªad_ˇn˚l
(
thrid_w©chdog
);

679 
	`±hªad_ˇn˚l
(
thrid_jô
);

681 i‡(
GW
.
gps
.
gps_íabÀd
 =
åue
) {

682 
	`±hªad_ˇn˚l
(
thrid_timîsync
);

683 
	`±hªad_ˇn˚l
(
thrid_gps
);

684 
	`±hªad_ˇn˚l
(
thrid_vÆid
);

687 i‡(
GW
.
cfg
.
gho°°ªam_íabÀd
 =
åue
) {

688 
	`gho°_°›
();

693 
	`°›_˛ón_£rvi˚
();

696 i‡(
exô_sig
 || 
quô_sig
) {

698 i‡(
GW
.
cfg
.
ødio°ªam_íabÀd
 =
åue
) {

699 
i
 = 
HAL
.
	`lgw_°›
();

700 i‡(
i
 =
LGW_HAL_SUCCESS
) {

701 i‡(
	`sy°em
("/usr/bin/reset_lGW.sh stop") != 0) {

702 
	`lgw_log
(
LOG_ERROR
, "ERROR~ [main] failedÅo stop SX1302\n");

704 
	`lgw_log
(
LOG_ERROR
, "INFO~ [main] concentrator stopped successfully\n");

706 
	`lgw_log
(
LOG_WARNING
, "WARNING~ [main] failedÅo stop concentrator successfully\n");

712 
	`¥ötf
("INFO~ ExitingÖacket forwarderÖrogram\n");

713 
	`exô
(
EXIT_SUCCESS
);

714 
	}
}

719 
	$thªad_up
() {

722 
lgw_pkt_rx_s
 
rxpkt
[
NB_PKT_MAX
];

723 
nb_pkt
;

725 
rxpkts_s
 *
rxpkt_íåy
 = 
NULL
;

726 
£rv_s
* 
£rv_íåy
 = 
NULL
;

728 
±hªad_t
 
thrid_ªcy˛e
;

730 
	`lgw_log
(
LOG_INFO
, "INFO~ [main-up] Threadáctivated foráll servers.\n");

732 !
exô_sig
 && !
quô_sig
) {

735 
	`±hªad_muãx_lock
(&
GW
.
hÆ
.
mx_c⁄˚¡
);

737 i‡(
GW
.
cfg
.
ødio°ªam_íabÀd
 =
åue
)

738 
nb_pkt
 = 
HAL
.
	`lgw_ª˚ive
(
NB_PKT_MAX
, 
rxpkt
);

740 
nb_pkt
 = 0;

742 
	`±hªad_muãx_u∆ock
(&
GW
.
hÆ
.
mx_c⁄˚¡
);

744 i‡(
nb_pkt
 =
LGW_HAL_ERROR
) {

745 
	`lgw_log
(
LOG_ERROR
, "ERROR~ [main-up] FailedÖacket fetch, continue\n");

746 
nb_pkt
 = 0;

750 i‡(
GW
.
cfg
.
gho°°ªam_íabÀd
 =
åue
)

751 
nb_pkt
 = 
	`gho°_gë
(
NB_PKT_MAX
 -Çb_pkt, &
rxpkt
[nb_pkt]) +Çb_pkt;

754 i‡(
nb_pkt
 == 0) {

755 
	`waô_ms
(
DEFAULT_FETCH_SLEEP_MS
);

759 
rxpkt_íåy
 = 
	`lgw_mÆloc
((
rxpkts_s
));

761 i‡(
NULL
 =
rxpkt_íåy
) {

765 
rxpkt_íåy
->
li°
.
√xt
 = 
NULL
;

766 
rxpkt_íåy
->
°amps
 = 0;

767 
rxpkt_íåy
->
nb_pkt
 =Çb_pkt;

768 
rxpkt_íåy
->
böd
 = 
GW
.
£rv_li°
.
size
;

769 
	`mem˝y
(
rxpkt_íåy
->
rxpkt
,Ñxpkt, (
lgw_pkt_rx_s
Ë* 
nb_pkt
);

771 
	`LGW_LIST_LOCK
(&
GW
.
rxpkts_li°
);

772 
	`LGW_LIST_INSERT_HEAD
(&
GW
.
rxpkts_li°
, 
rxpkt_íåy
, 
li°
);

773 
	`LGW_LIST_UNLOCK
(&
GW
.
rxpkts_li°
);

775 
	`lgw_log
(
LOG_DEBUG
, "DEBUG~ [maö-up] Sizêo‡∑ckagêli° i†%d\n", 
GW
.
rxpkts_li°
.
size
);

777 
	`LGW_LIST_TRAVERSE
(&
GW
.
£rv_li°
, 
£rv_íåy
, 
li°
) {

778 i‡(
	`£m_po°
(&
£rv_íåy
->
thªad
.
£ma
))

779 
	`lgw_log
(
LOG_DEBUG
, "DEBUG~ [%s-up] %s\n", 
£rv_íåy
->
öfo
.
«me
, 
	`°ªº‹
(
î∫o
));

785 i‡(
GW
.
rxpkts_li°
.
size
 > 
DEFAULT_RXPKTS_LIST_SIZE
)

787 
	`lgw_±hªad_¸óã_dëached_background
(&
thrid_ªcy˛e
, 
NULL
, (*(*)(*))
thªad_rxpkt_ªcy˛e
, NULL);

791 
	`lgw_log
(
LOG_INFO
, "INFO~ [main-up] End of upstreamÅhread\n");

792 
	}
}

797 
	$thªad_rxpkt_ªcy˛e
() {

798 
rxpkts_s
* 
rxpkt_íåy
 = 
NULL
;

800 
	`lgw_log
(
LOG_DEBUG
, "\nDEBUG~ [MAIN] RuningÖackagesÑecycleÅhread\n");

802 
	`LGW_LIST_LOCK
(&
GW
.
rxpkts_li°
);

803 
	`LGW_LIST_TRAVERSE_SAFE_BEGIN
(&
GW
.
rxpkts_li°
, 
rxpkt_íåy
, 
li°
) {

804 
	`lgw_log
(
LOG_DEBUG
, "\nDEBUG~ [MAIN]Ñecy˛êthªad sèπÅøvî£, böd=%d\n", 
rxpkt_íåy
->
böd
);

805 i‡(
rxpkt_íåy
->
böd
 < 1) {

806 
	`LGW_LIST_REMOVE_CURRENT
(
li°
);

807 
	`lgw_‰ì
(
rxpkt_íåy
);

808 
GW
.
rxpkts_li°
.
size
--;

811 
LGW_LIST_TRAVERSE_SAFE_END
;

812 
	`LGW_LIST_UNLOCK
(&
GW
.
rxpkts_li°
);

813 
	`lgw_log
(
LOG_DEBUG
, "\nDEBUG~ [MAIN] End ofÑecycle \n");

815 
	}
}

819 
	$thªad_jô
() {

820 
ªsu…
 = 
LGW_HAL_SUCCESS
;

821 
lgw_pkt_tx_s
 
pkt
;

822 
pkt_ödex
 = -1;

823 
uöt32_t
 
cuºít_c⁄˚¡øt‹_time
;

824 
jô_îr‹_e
 
jô_ªsu…
;

825 
jô_pkt_ty≥_e
 
pkt_ty≥
;

826 
uöt8_t
 
tx_°©us
;

827 
i
;

829 !
exô_sig
 && !
quô_sig
) {

830 
	`waô_ms
(10);

832 
i
 = 0; i < 
LGW_RF_CHAIN_NB
; i++) {

834 
	`±hªad_muãx_lock
(&
GW
.
hÆ
.
mx_c⁄˚¡
);

835 
HAL
.
	`lgw_gë_ö°˙t
(&
cuºít_c⁄˚¡øt‹_time
);

836 
	`±hªad_muãx_u∆ock
(&
GW
.
hÆ
.
mx_c⁄˚¡
);

837 
jô_ªsu…
 = 
	`jô_≥ek
(&
GW
.
tx
.
jô_queue
[
i
], 
cuºít_c⁄˚¡øt‹_time
, &
pkt_ödex
);

838 i‡(
jô_ªsu…
 =
JIT_ERROR_OK
) {

839 i‡(
pkt_ödex
 > -1) {

840 
jô_ªsu…
 = 
	`jô_dequeue
(&
GW
.
tx
.
jô_queue
[
i
], 
pkt_ödex
, &
pkt
, &
pkt_ty≥
);

841 i‡(
jô_ªsu…
 =
JIT_ERROR_OK
) {

843 i‡(
pkt_ty≥
 =
JIT_PKT_TYPE_BEACON
) {

845 
	`±hªad_muãx_lock
(&
GW
.
hÆ
.
mx_xc‹r
);

846 
pkt
.
‰eq_hz
 = (
uöt32_t
)(
GW
.
hÆ
.
xèl_c‹ª˘
 * ()pkt.freq_hz);

847 
	`lgw_log
(
LOG_BEACON
, "DEBUG~ [jô-bóc⁄] bóc⁄_pkt.‰eq_hz=%u (xèl_c‹ª˘=%.15lf)\n", 
pkt
.
‰eq_hz
, 
GW
.
hÆ
.
xèl_c‹ª˘
);

848 
	`±hªad_muãx_u∆ock
(&
GW
.
hÆ
.
mx_xc‹r
);

851 
	`±hªad_muãx_lock
(&
GW
.
log
.
mx_ªp‹t
);

852 
GW
.
bóc⁄
.
mós_nb_bóc⁄_£¡
 += 1;

853 
	`±hªad_muãx_u∆ock
(&
GW
.
log
.
mx_ªp‹t
);

854 
	`lgw_log
(
LOG_INFO
, "INFO~ [jô-bóc⁄] Bóc⁄ dequeued (cou¡_us=%u)\n", 
pkt
.
cou¡_us
);

858 
	`±hªad_muãx_lock
(&
GW
.
hÆ
.
mx_c⁄˚¡
);

859 
ªsu…
 = 
HAL
.
	`lgw_°©us
(
pkt
.
rf_chaö
, 
TX_STATUS
, &
tx_°©us
);

860 
	`±hªad_muãx_u∆ock
(&
GW
.
hÆ
.
mx_c⁄˚¡
);

861 i‡(
ªsu…
 =
LGW_HAL_ERROR
) {

862 
	`lgw_log
(
LOG_WARNING
, "WARNING~ [jô%d]Ügw_°©u†Áûed\n", 
i
);

864 i‡(
tx_°©us
 =
TX_EMITTING
) {

865 
	`lgw_log
(
LOG_ERROR
, "ERROR~ [jô] c⁄˚¡øt‹ i†cuºíéyÉmôtög o¿rf_chaö %d\n", 
i
);

866 
	`¥öt_tx_°©us
(
tx_°©us
);

868 } i‡(
tx_°©us
 =
TX_SCHEDULED
) {

869 
	`lgw_log
(
LOG_WARNING
, "WARNING~ [jô]á dow∆ök wa†Æªady scheduÀd o¿rf_chaö %d, ovîwrôtög it...\n", 
i
);

870 
	`¥öt_tx_°©us
(
tx_°©us
);

877 
	`±hªad_muãx_lock
(&
GW
.
hÆ
.
mx_c⁄˚¡
);

878 
ªsu…
 = 
HAL
.
	`lgw_£nd
(&
pkt
);

879 
	`±hªad_muãx_u∆ock
(&
GW
.
hÆ
.
mx_c⁄˚¡
);

880 i‡(
ªsu…
 =
LGW_HAL_ERROR
) {

881 
	`±hªad_muãx_lock
(&
GW
.
log
.
mx_ªp‹t
);

882 
GW
.
log
.
°©_dw
.
mós_nb_tx_Áû
 += 1;

883 
	`±hªad_muãx_u∆ock
(&
GW
.
log
.
mx_ªp‹t
);

884 
	`lgw_log
(
LOG_INFO
, "WARNING~ [jô]Ügw_£nd faûed o¿rf_chaö %d\n", 
i
);

887 
	`±hªad_muãx_lock
(&
GW
.
log
.
mx_ªp‹t
);

888 
GW
.
log
.
°©_dw
.
mós_nb_tx_ok
 += 1;

889 
	`±hªad_muãx_u∆ock
(&
GW
.
log
.
mx_ªp‹t
);

890 
	`lgw_log
(
LOG_INFO
, "INFO~ [jô]Ügw_£nd d⁄ê⁄Ñf_chaö %d: cou¡_us=%u\n", 
i
, 
pkt
.
cou¡_us
);

893 
	`lgw_log
(
LOG_ERROR
, "ERROR~ [jô] jô_dequeuêÁûed o¿rf_chaö %d wôh %d\n", 
i
, 
jô_ªsu…
);

896 } i‡(
jô_ªsu…
 =
JIT_ERROR_EMPTY
) {

899 
	`lgw_log
(
LOG_ERROR
, "ERROR~ [jô] jô_≥ek faûed o¿rf_chaö %d wôh %d\n", 
i
, 
jô_ªsu…
);

903 
	}
}

909 
	$gps_¥o˚ss_sync
() {

910 
time•ec
 
gps_time
;

911 
time•ec
 
utc
;

912 
uöt32_t
 
åig_t°amp
;

913 
i
 = 
	`lgw_gps_gë
(&
utc
, &
gps_time
, 
NULL
, NULL);

916 i‡(
i
 !
LGW_GPS_SUCCESS
) {

917 
	`lgw_log
(
LOG_WARNING
, "WARNING~ [gps] couldÇot get GPSÅime from GPS\n");

922 
	`±hªad_muãx_lock
(&
GW
.
hÆ
.
mx_c⁄˚¡
);

923 
i
 = 
HAL
.
	`lgw_gë_åig˙t
(&
åig_t°amp
);

924 
	`±hªad_muãx_u∆ock
(&
GW
.
hÆ
.
mx_c⁄˚¡
);

925 i‡(
i
 !
LGW_HAL_SUCCESS
) {

926 
	`lgw_log
(
LOG_WARNING
, "WARNING~ [gps] failedÅoÑead concentratorÅimestamp\n");

931 
	`±hªad_muãx_lock
(&
GW
.
gps
.
mx_timîef
);

932 
i
 = 
	`lgw_gps_sync
(&
GW
.
gps
.
time_ª„ªn˚_gps
, 
åig_t°amp
, 
utc
, 
gps_time
);

933 
	`±hªad_muãx_u∆ock
(&
GW
.
gps
.
mx_timîef
);

934 i‡(
i
 !
LGW_GPS_SUCCESS
) {

935 
	`lgw_log
(
LOG_WARNING
, "WARNING~ [gps] GPS out of sync, keepingÖreviousÅimeÑeference\n");

937 
	}
}

939 
	$gps_¥o˚ss_co‹ds
() {

941 
co‹d_s
 
co‹d
;

942 
co‹d_s
 
gp£º
;

943 
i
 = 
	`lgw_gps_gë
(
NULL
, NULL, &
co‹d
, &
gp£º
);

946 
	`±hªad_muãx_lock
(&
GW
.
gps
.
mx_mós_gps
);

947 i‡(
i
 =
LGW_GPS_SUCCESS
) {

948 
GW
.
gps
.
gps_co‹d_vÆid
 = 
åue
;

949 
GW
.
gps
.
mós_gps_co‹d
 = 
co‹d
;

950 
GW
.
gps
.
mós_gps_îr
 = 
gp£º
;

953 
GW
.
gps
.
gps_co‹d_vÆid
 = 
Ál£
;

955 
	`±hªad_muãx_u∆ock
(&
GW
.
gps
.
mx_mós_gps
);

956 
	}
}

958 
	$thªad_gps
() {

960 
£rül_buff
[128];

961 
size_t
 
wr_idx
 = 0;

964 
gps_msg
 
œã°_msg
;

967 
	`mem£t
(
£rül_buff
, 0,  serial_buff);

969 !
exô_sig
 && !
quô_sig
) {

970 
size_t
 
rd_idx
 = 0;

971 
size_t
 
‰ame_íd_idx
 = 0;

974 
ssize_t
 
nb_ch¨
 = 
	`ªad
(
GW
.
gps
.
gps_ây_fd
, 
£rül_buff
 + 
wr_idx
, 
LGW_GPS_MIN_MSG_SIZE
);

975 i‡(
nb_ch¨
 <= 0) {

976 
	`lgw_log
(
LOG_WARNING
, "WARNING~ [gps]Ñód(Ëªtu∫ed vÆuê%d\n", 
nb_ch¨
);

979 
wr_idx
 +(
size_t
Ë
nb_ch¨
;

985 
rd_idx
 < 
wr_idx
) {

986 
size_t
 
‰ame_size
 = 0;

989 i‡(
£rül_buff
[
rd_idx
] =()
LGW_GPS_UBX_SYNC_CHAR
) {

994 
œã°_msg
 = 
	`lgw_∑r£_ubx
(&
£rül_buff
[
rd_idx
], (
wr_idx
 -Ñd_idx), &
‰ame_size
);

996 i‡(
‰ame_size
 > 0) {

997 i‡(
œã°_msg
 =
INCOMPLETE
) {

999 
‰ame_size
 = 0;

1000 } i‡(
œã°_msg
 =
INVALID
) {

1002 
	`lgw_log
(
LOG_WARNING
, "WARNING~ [gps] couldÇot getá valid message from GPS (noÅime)\n");

1003 
‰ame_size
 = 0;

1004 } i‡(
œã°_msg
 =
UBX_NAV_TIMEGPS
) {

1005 
	`gps_¥o˚ss_sync
();

1008 } i‡(
£rül_buff
[
rd_idx
] =
LGW_GPS_NMEA_SYNC_CHAR
) {

1013 *
nmó_íd_±r
 = 
	`memchr
(&
£rül_buff
[
rd_idx
], ()0x0a, (
wr_idx
 -Ñd_idx));

1015 i‡(
nmó_íd_±r
) {

1017 
‰ame_size
 = 
nmó_íd_±r
 - &
£rül_buff
[
rd_idx
] + 1;

1018 
œã°_msg
 = 
	`lgw_∑r£_nmó
(&
£rül_buff
[
rd_idx
], 
‰ame_size
);

1020 i‡(
œã°_msg
 =
INVALID
 ||Ü©e°_msg =
UNKNOWN
) {

1022 
‰ame_size
 = 0;

1023 } i‡(
œã°_msg
 =
NMEA_GGA
) {

1024 
	`gps_¥o˚ss_co‹ds
();

1025 } i‡(
œã°_msg
 =
NMEA_RMC
) {

1026 
	`gps_¥o˚ss_sync
();

1031 i‡(
‰ame_size
 > 0) {

1034 
rd_idx
 +
‰ame_size
;

1035 
‰ame_íd_idx
 = 
rd_idx
;

1037 
rd_idx
++;

1041 i‡(
‰ame_íd_idx
) {

1043 
	`mem˝y
(
£rül_buff
, &£rül_buff[
‰ame_íd_idx
], 
wr_idx
 - frame_end_idx);

1044 
wr_idx
 -
‰ame_íd_idx
;

1049 i‡(((
£rül_buff
Ë- 
wr_idx
Ë< 
LGW_GPS_MIN_MSG_SIZE
) {

1050 
	`mem˝y
(
£rül_buff
, &£rül_buff[
LGW_GPS_MIN_MSG_SIZE
], 
wr_idx
 - LGW_GPS_MIN_MSG_SIZE);

1051 
wr_idx
 -
LGW_GPS_MIN_MSG_SIZE
;

1054 
	`lgw_log
(
LOG_INFO
, "INFO~ End of GPSÅhread\n");

1055 
	}
}

1060 
	$thªad_vÆid
() {

1063 
gps_ªf_age
 = 0;

1064 
boﬁ
 
ªf_vÆid_loˇl
 = 
Ál£
;

1065 
xèl_îr_˝y
;

1068 
öô_˝t
 = 0;

1069 
öô_acc
 = 0.0;

1070 
x
;

1072 
	`lgw_log
(
LOG_INFO
, "INFO~ ValidationÅhreadáctivated.\n");

1075 !
exô_sig
 && !
quô_sig
) {

1076 
	`waô_ms
(1000);

1079 
	`±hªad_muãx_lock
(&
GW
.
gps
.
mx_timîef
);

1080 
gps_ªf_age
 = ()
	`dif·ime
(
	`time
(
NULL
), 
GW
.
gps
.
time_ª„ªn˚_gps
.
sy°ime
);

1081 i‡((
gps_ªf_age
 >0Ë&& (gps_ªf_agê<
GPS_REF_MAX_AGE
)) {

1083 
GW
.
gps
.
gps_ªf_vÆid
 = 
åue
;

1084 
ªf_vÆid_loˇl
 = 
åue
;

1085 
xèl_îr_˝y
 = 
GW
.
gps
.
time_ª„ªn˚_gps
.
xèl_îr
;

1088 
GW
.
gps
.
gps_ªf_vÆid
 = 
Ál£
;

1089 
ªf_vÆid_loˇl
 = 
Ál£
;

1091 
	`±hªad_muãx_u∆ock
(&
GW
.
gps
.
mx_timîef
);

1094 i‡(
ªf_vÆid_loˇl
 =
Ál£
) {

1096 
	`±hªad_muãx_lock
(&
GW
.
hÆ
.
mx_xc‹r
);

1097 
GW
.
hÆ
.
xèl_c‹ª˘_ok
 = 
Ál£
;

1098 
GW
.
hÆ
.
xèl_c‹ª˘
 = 1.0;

1099 
	`±hªad_muãx_u∆ock
(&
GW
.
hÆ
.
mx_xc‹r
);

1100 
öô_˝t
 = 0;

1101 
öô_acc
 = 0.0;

1103 i‡(
öô_˝t
 < 
XERR_INIT_AVG
) {

1105 
öô_acc
 +
xèl_îr_˝y
;

1106 ++
öô_˝t
;

1107 } i‡(
öô_˝t
 =
XERR_INIT_AVG
) {

1109 
	`±hªad_muãx_lock
(&
GW
.
hÆ
.
mx_xc‹r
);

1110 
GW
.
hÆ
.
xèl_c‹ª˘
 = ()(
XERR_INIT_AVG
Ë/ 
öô_acc
;

1111 
GW
.
hÆ
.
xèl_c‹ª˘_ok
 = 
åue
;

1112 
	`±hªad_muãx_u∆ock
(&
GW
.
hÆ
.
mx_xc‹r
);

1113 ++
öô_˝t
;

1117 
x
 = 1 / 
xèl_îr_˝y
;

1118 
	`±hªad_muãx_lock
(&
GW
.
hÆ
.
mx_xc‹r
);

1119 
GW
.
hÆ
.
xèl_c‹ª˘
 = GW.hÆ.xèl_c‹ª˘ - GW.hÆ.xèl_c‹ª˘ / 
XERR_FILT_COEF
 + 
x
 / XERR_FILT_COEF;

1120 
	`±hªad_muãx_u∆ock
(&
GW
.
hÆ
.
mx_xc‹r
);

1124 
	`lgw_log
(
LOG_INFO
, "TimeÑef: %s, XTAL correct: %s (%.15lf)\n",

1125 
ªf_vÆid_loˇl
 ? "vÆid" : "övÆid", 
GW
.
hÆ
.
xèl_c‹ª˘_ok
 ? "vÆid" : "övÆid", GW.hÆ.
xèl_c‹ª˘
);

1127 
	`lgw_log
(
LOG_INFO
, "INFO~ End of validationÅhread\n");

1128 
	}
}

1133 
	$thªad_w©chdog
() {

1135 
	`lgw_log
(
LOG_INFO
, "INFO~ [watchdog] Watchdog starting...\n");

1136 !
exô_sig
 && !
quô_sig
) {

1137 
	`waô_ms
(30000);

1139 i‡((
	`time
(
NULL
Ë- 
GW
.
cfg
.
œ°_lo›
Ë> ()((GW.cfg.
time_öãrvÆ
 * 3) + 5)) {

1140 
	`lgw_log
(
LOG_ERROR
, "ERROR~ [wd] WatchdogÅimerÉxpired!\n");

1141 
	`exô
(254);

1144 
	}
}

	@fwd/src/ghost.c

12 #ifde‡
__MACH__


13 #ñi‡
__STDC_VERSION__
 >= 199901L

14 
	#_XOPEN_SOURCE
 600

	)

16 
	#_XOPEN_SOURCE
 500

	)

19 
	~<°döt.h
>

20 
	~<°dboﬁ.h
>

21 
	~<°dio.h
>

23 
	~<°rög.h
>

24 
	~<sig«l.h
>

25 
	~<time.h
>

26 
	~<sys/time.h
>

27 
	~<uni°d.h
>

28 
	~<°dlib.h
>

29 
	~<î∫o.h
>

31 
	~<sys/sockë.h
>

32 
	~<√töë/ö.h
>

33 
	~<¨∑/öë.h
>

34 
	~<√tdb.h
>

36 
	~<±hªad.h
>

37 
	~"fwd.h
"

38 
	~"gho°.h
"

39 
	~"ídü√xt.h
"

41 
	~"l‹agw_gps.h
"

46 
	#PROTOCOL_VERSION
 2

	)

47 
	#GHOST_DATA
 11

	)

49 vﬁ©ûê
boﬁ
 
	ggho°_run
 = 
Ál£
;

51 
timevÆ
 
	ggho°_timeout
 = { 0, (200 * 1000) };

53 
±hªad_muãx_t
 
	gcb_gho°
 = 
PTHREAD_MUTEX_INITIALIZER
;

58 
uöt8_t
 
	gbuffRX
[
GHST_RX_BUFFSIZE
 * 
GHST_NM_RCV
];

62 
uöt8_t
 
	ggh°_íd
;

63 
uöt8_t
 
	ggh°_bgn
;

65 
	gsock_gho°
;

66 
	gg©eway_id
[16] = "";

69 
±hªad_t
 
	gthrid_gho°
;

72 
co‹d_s
 
	gª„ªn˚_co‹d
;

75 
	$¥ötBuf„r
(
uöt8_t
 * 
b
, uöt8_à
Àn
Ë
	`__©åibuã__
 ((
unu£d
));

76 
	$¥ötBuf„r
(
uöt8_t
 * 
b
, uöt8_à
Àn
) {

77 
i
;

78 
i
 = 0; i < 
Àn
; i++) {

79 
	`¥ötf
("%i,", 
b
[
i
]);

81 
	}
}

84 
	$¥ötRX
(
lgw_pkt_rx_s
 *
p
Ë
	`__©åibuã__
 ((
unu£d
));

85 
	$¥ötRX
(
lgw_pkt_rx_s
 *
p
) {

86 
	`¥ötf
("Ö->freq_hz = %i\n"

102 
p
->
‰eq_hz
,Ö->
if_chaö
,Ö->
°©us
,Ö->
cou¡_us
,

103 
p
->
rf_chaö
,Ö->
moduœti⁄
,Ö->
b™dwidth
,Ö->
d©¨©e
,

104 
p
->
codî©e
,Ö->
rssis
,Ö->
¢r
,Ö->
¢r_mö
,Ö->
¢r_max
,

105 
p
->
¸c
,Ö->
size
,Ö->
∑ylﬂd
);

106 
	}
}

110 
uöt32_t
 
	mu
;

111 
	mf
;

112 } 
	tmix
;

116 
uöt32_t
 
	$u32
(
uöt8_t
 * 
p
, uöt8_à
i
) {

117  (
uöt32_t
Ë(
p
[
i
 + 3]) + ((uint32_t) (p[i + 2]) << 8) +

118 ((
uöt32_t
Ë(
p
[
i
 + 1]) << 16) + ((uint32_t) (p[i]) << 24);

119 
	}
}

120 
uöt16_t
 
	$u16
(
uöt8_t
 * 
p
, uöt8_à
i
) {

121  (
uöt16_t
Ë
p
[
i
 + 1] + ((uint16_t)Ö[i] << 8);

122 
	}
}

123 
uöt8_t
 
	$u8
(
uöt8_t
 * 
p
, uöt8_à
i
) {

124  
p
[
i
];

125 
	}
}

126 
	$eÊt
(
uöt8_t
 * 
p
, uöt8_à
i
) {

127 
mix
 
uf
;

129 
uf
.
u
 = 
	`u32
(
p
, 
i
);

130  
uf
.
f
;

131 
	}
}

134 
	$ªadRX
(
lgw_pkt_rx_s
 *
p
, 
uöt8_t
 * 
b
) {

135 
p
->
‰eq_hz
 = 
	`u32
(
b
, 0);

136 
p
->
if_chaö
 = 
	`u8
(
b
, 4);

137 
p
->
°©us
 = 
	`u8
(
b
, 5);

138 
p
->
cou¡_us
 = 
	`u32
(
b
, 6);

139 
p
->
rf_chaö
 = 
	`u8
(
b
, 10);

140 
p
->
moduœti⁄
 = 
	`u8
(
b
, 11);

141 
p
->
b™dwidth
 = 
	`u8
(
b
, 12);

142 
p
->
d©¨©e
 = 
	`u32
(
b
, 13);

143 
p
->
codî©e
 = 
	`u8
(
b
, 17);

144 
p
->
rssis
 = 
	`eÊt
(
b
, 18);

145 
p
->
¢r
 = 
	`eÊt
(
b
, 22);

146 
p
->
¢r_mö
 = 
	`eÊt
(
b
, 26);

147 
p
->
¢r_max
 = 
	`eÊt
(
b
, 30);

148 
p
->
¸c
 = 
	`u16
(
b
, 34);

149 
p
->
size
 = 
	`u16
(
b
, 36);

150 
	`mem˝y
((
p
->
∑ylﬂd
), &
b
[38],Ö->
size
);

151 
	}
}

153 
thªad_gho°
();

158 
	$gho°_°¨t
(c⁄° *
gho°_addr
, c⁄° *
gho°_p‹t
, c⁄° 
co‹d_s
 
ªfco‹
, c⁄° *
gwid
) {

160 i‡(
gho°_run
)

163 
i
;

165 
ª„ªn˚_co‹d
 = 
ªfco‹
;

166 
	`°∫˝y
(
g©eway_id
, 
gwid
,  gateway_id);

168 
addröfo
 
addªs£s
;

169 
addröfo
 *
ªsu…
;

170 
addröfo
 *
q
;

171 
ho°_«me
[64];

172 
p‹t_«me
[64];

174 
	`mem£t
(&
addªs£s
, 0, áddresses);

175 
addªs£s
.
ai_Ámûy
 = 
AF_UNSPEC
;

176 
addªs£s
.
ai_sockty≥
 = 
SOCK_DGRAM
;

179 
i
 = 
	`gëaddröfo
(
gho°_addr
, 
gho°_p‹t
, &
addªs£s
, &
ªsu…
);

180 i‡(
i
 != 0) {

181 
	`lgw_log
(
LOG_ERROR
, "ERROR: [up] gëaddröfÿ⁄áddªs†%†(PORT %sËªtu∫ed %s\n", 
gho°_addr
, 
gho°_p‹t
, 
	`gai_°ªº‹
(
i
));

182 
	`exô
(
EXIT_FAILURE
);

186 
q
 = 
ªsu…
; q !
NULL
; q = q->
ai_√xt
) {

187 
sock_gho°
 = 
	`sockë
(
q
->
ai_Ámûy
, q->
ai_sockty≥
, q->
ai_¥Ÿocﬁ
);

188 i‡(
sock_gho°
 == -1)

195 i‡(
q
 =
NULL
) {

196 
	`lgw_log
(
LOG_ERROR
, "ERROR: [down] faûedÅÿ›í sockëÅÿ™y o‡£rvî %†addªs£†’‹à%s)\n", 
gho°_addr
, 
gho°_p‹t
);

197 
i
 = 1;

198 
q
 = 
ªsu…
; q !
NULL
; q = q->
ai_√xt
) {

199 
	`gë«meöfo
(
q
->
ai_addr
, q->
ai_addæí
, 
ho°_«me
,  ho°_«me, 
p‹t_«me
, Ö‹t_«me, 
NI_NUMERICHOST
);

200 
	`lgw_log
(
LOG_INFO
, "INFO: [down]Ñesu… %òho°:%†£rvi˚:%s\n", 
i
, 
ho°_«me
, 
p‹t_«me
);

201 ++
i
;

203 
	`exô
(
EXIT_FAILURE
);

207 
i
 = 
	`c⁄√˘
(
sock_gho°
, 
q
->
ai_addr
, q->
ai_addæí
);

208 i‡(
i
 != 0) {

209 
	`lgw_log
(
LOG_ERROR
, "ERROR: [down] c⁄√˘Ñëu∫ed %s\n", 
	`°ªº‹
(
î∫o
));

210 
	`exô
(
EXIT_FAILURE
);

213 
	`‰ìaddröfo
(
ªsu…
);

216 
gh°_bgn
 = 0;

217 
gh°_íd
 = 0;

220 
gho°_run
 = 
åue
;

221 
i
 = 
	`lgw_±hªad_¸óã
(&
thrid_gho°
, 
NULL
, (*(*)(*))
thªad_gho°
, NULL);

222 i‡(
i
 != 0) {

223 
	`lgw_log
(
LOG_ERROR
, "ERROR: [main] impossibleÅo create ghostÅhread\n");

224 
	`exô
(
EXIT_FAILURE
);

229 
	}
}

231 
	$gho°_°›
() {

232 
gho°_run
 = 
Ál£
;

233 
	`±hªad_ˇn˚l
(
thrid_gho°
);

234 
	`shutdown
(
sock_gho°
, 
SHUT_RDWR
);

235 
	}
}

238 
	$gho°_gë
(
max_pkt
, 
lgw_pkt_rx_s
 *
pkt_d©a
) {

239 
	`±hªad_muãx_lock
(&
cb_gho°
);

240 
uöt8_t
 
avaû
 = (
gh°_bgn
 - 
gh°_íd
 + 
GHST_NM_RCV
) % GHST_NM_RCV;

242 
	`±hªad_muãx_u∆ock
(&
cb_gho°
);

245 
uöt8_t
 
gë_pkt
 = (
avaû
 < 
max_pkt
) ?ávail : max_pkt;

248 
i
;

250 
i
 = 0; i < 
gë_pkt
; i++) {

251 
öd
 = (
gh°_íd
 + 
i
Ë% 
GHST_NM_RCV
;

253 
	`ªadRX
(&
pkt_d©a
[
i
], (
buffRX
 + 
öd
 * 
GHST_RX_BUFFSIZE
));

257 
	`±hªad_muãx_lock
(&
cb_gho°
);

258 
gh°_íd
 = (gh°_íd + 
gë_pkt
Ë% 
GHST_NM_RCV
;

259 
	`±hªad_muãx_u∆ock
(&
cb_gho°
);

261 i‡(
gë_pkt
 > 0) {

262 
	`lgw_log
(
LOG_INFO
, "INFO: c›õd %ò∑ckë†‰om gho°, gh°_íd = %ò\n", 
gë_pkt
, 
gh°_íd
);

270  
gë_pkt
;

271 
	}
}

275 
	$gho°_put
() {

277 
	}
}

279 
	$thªad_gho°
() {

280 
i
;

283 
time•ec
 
£nd_time
;

284 
time•ec
 
ªcv_time
;

287 
uöt8_t
 
buff_down
[
GHST_MIN_PACKETSIZE
 + 
GHST_RX_BUFFSIZE
];

288 
uöt8_t
 
buff_ªq
[
GHST_REQ_BUFFSIZE
];

289 
msg_Àn
;

291 
	`lgw_log
(
LOG_INFO
, "INFO: GhostÅhread started.\n");

293 
i
 = 
	`£tsock›t
(
sock_gho°
, 
SOL_SOCKET
, 
SO_RCVTIMEO
, (*)&
gho°_timeout
,  ghost_timeout);

294 i‡(
i
 != 0) {

295 
	`lgw_log
(
LOG_ERROR
, "ERROR: [gho°] sësock›àªtu∫ed %s\n", 
	`°ªº‹
(
î∫o
));

296 
	`exô
(
EXIT_FAILURE
);

300 i‡((
buff_ªq
Ë< 4 +  
g©eway_id
 + 2 * ()) {

301 
	`lgw_log
(
LOG_ERROR
, "INTERNAL ERROR: [ghost] BUFFER TO SMALL.\n");

302 
	`exô
(
EXIT_FAILURE
);

304 
	`mem£t
(
buff_ªq
, 0,  buff_req);

307 
buff_ªq
[0] = 
PROTOCOL_VERSION
;

308 
buff_ªq
[1] = 0;

309 
buff_ªq
[2] = 0;

310 
buff_ªq
[3] = 
GHOST_DATA
;

313 
	`mem˝y
(&
buff_ªq
[4], &
g©eway_id
,  gateway_id);

316 
	`tobe˝y
(&
buff_ªq
[4 + (
g©eway_id
)], &
ª„ªn˚_co‹d
.
l⁄
, ());

317 
	`tobe˝y
(&
buff_ªq
[4 + (
g©eway_id
Ë+ ()], &
ª„ªn˚_co‹d
.
œt
, ());

320 
√xt
;

321 
boﬁ
 
fuŒ
;

323 
gho°_run
) {

325 
	`£nd
(
sock_gho°
, (*)
buff_ªq
,  buff_req, 0);

326 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
£nd_time
);

330 
ªcv_time
 = 
£nd_time
;

331 ()
	`dif·ime•ec
(
ªcv_time
, 
£nd_time
Ë< 
NODE_CALL_SECS
) {

332 
msg_Àn
 = 
	`ªcv
(
sock_gho°
, (*)
buff_down
, ( buff_down) - 1, 0);

333 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
ªcv_time
);

338 i‡(
msg_Àn
 < 0) {

343 i‡((
msg_Àn
 < 4 + 
GHST_MIN_PACKETSIZE
)

344 || (
msg_Àn
 > 4 + 
GHST_RX_BUFFSIZE
)

345 || (
buff_down
[0] !
PROTOCOL_VERSION
)

346 || ((
buff_down
[3] !
GHOST_DATA
))) {

347 
	`lgw_log
(
LOG_WARNING
, "WARNING: [gho°] ign‹ög invÆidÖackëÜí=%d,ÖrŸocﬁ_vîsi⁄=%d, id=%d\n", 
msg_Àn
, 
buff_down
[0], buff_down[3]);

352 
buff_down
[
msg_Àn
] = 0;

355 
√xt
 = (
gh°_bgn
 + 1Ë% 
GHST_NM_RCV
;

356 
	`±hªad_muãx_lock
(&
cb_gho°
);

357 
fuŒ
 = 
√xt
 =
gh°_íd
;

358 
	`±hªad_muãx_u∆ock
(&
cb_gho°
);

361 i‡(
fuŒ
) {

362 
	`lgw_log
(
LOG_WARNING
, "WARNING: [ghost] buffer is full, droppingÖacket)\n");

364 
	`mem˝y
((*)(
buffRX
 + 
gh°_bgn
 * 
GHST_RX_BUFFSIZE
), 
buff_down
 + 4, 
msg_Àn
 - 3);

365 
	`±hªad_muãx_lock
(&
cb_gho°
);

366 
gh°_bgn
 = 
√xt
;

367 
	`±hªad_muãx_u∆ock
(&
cb_gho°
);

368 
	`lgw_log
(
LOG_INFO
, "RECEIVED, [gho°] gh°_bg¿%ò\n", 
gh°_bgn
);

373 
	`lgw_log
(
LOG_INFO
, "INFO: End of ghostÅhread\n");

374 
	}
}

	@fwd/src/gwcfg.c

27 
	~<°döt.h
>

28 
	~<°dlib.h
>

29 
	~<°dboﬁ.h
>

30 
	~<¨∑/öë.h
>

32 
	~"fwd.h
"

33 
	~"∑rs⁄.h
"

34 
	~"l‹agw_aux.h
"

35 
	~"l‹agw_hÆ.h
"

36 
	~"l‹agw_hÆ_sx1301.h
"

37 
	~"l‹agw_hÆ_sx1302.h
"

39 
	gDECLARE_GW
;

40 
	gDECLARE_HAL
;

42 
	$∑r£_SX130x_c⁄figuøti⁄
(c⁄° * 
c⁄f_fûe
) {

43 
i
, 
j
;

44 
∑øm_«me
[32];

45 c⁄° *
°r
;

46 c⁄° 
c⁄f_obj_«me
[] = "SX130x_conf";

47 
JSON_VÆue
 *
roŸ_vÆ
 = 
NULL
;

48 
JSON_VÆue
 *
vÆ
 = 
NULL
;

49 
JSON_Obje˘
 *
c⁄f_obj
 = 
NULL
;

50 
JSON_Obje˘
 *
c⁄f_txgaö_obj
;

51 
JSON_Obje˘
 *
c⁄f_ts_obj
;

52 
JSON_Aºay
 *
c⁄f_txlut_¨øy
;

54 
lgw_c⁄f_bﬂrd_s
 
bﬂrdc⁄f
;

55 
lgw_c⁄f_rxrf_s
 
rfc⁄f
;

56 
lgw_c⁄f_rxif_s
 
ifc⁄f
;

57 
lgw_c⁄f_time°amp_s
 
tsc⁄f
;

58 
uöt32_t
 
sf
, 
bw
, 
fdev
;

59 
boﬁ
 
sx1250_tx_lut
;

62 
roŸ_vÆ
 = 
	`js⁄_∑r£_fûe_wôh_commíts
(
c⁄f_fûe
);

63 i‡(
roŸ_vÆ
 =
NULL
) {

64 
	`lgw_log
(
LOG_INFO
, "ERROR: %†i†nŸá vÆid JSON fûe\n", 
c⁄f_fûe
);

69 
c⁄f_obj
 = 
	`js⁄_obje˘_gë_obje˘
(
	`js⁄_vÆue_gë_obje˘
(
roŸ_vÆ
), 
c⁄f_obj_«me
);

70 i‡(
c⁄f_obj
 =
NULL
) {

71 
	`lgw_log
(
LOG_INFO
, "INFO: %†d€†nŸ c⁄èöá JSON obje˘Çamed %s\n", 
c⁄f_fûe
, 
c⁄f_obj_«me
);

74 
	`lgw_log
(
LOG_INFO
, "INFO: %†d€†c⁄èöá JSON obje˘Çamed %s,Ö¨sög SX130xÖ¨amëîs\n", 
c⁄f_fûe
, 
c⁄f_obj_«me
);

78 
	`mem£t
(&
bﬂrdc⁄f
, 0,  boardconf);

79 
°r
 = 
	`js⁄_obje˘_gë_°rög
(
c⁄f_obj
, "spidev_path");

80 i‡(
°r
 !
NULL
) {

81 
	`°∫˝y
(
bﬂrdc⁄f
.
•idev_∑th
, 
°r
,  boardconf.spidev_path);

82 
bﬂrdc⁄f
.
•idev_∑th
[ boardconf.spidev_path - 1] = '\0';

84 
	`lgw_log
(
LOG_INFO
, "ERROR: spidevÖ©h mu° bêc⁄figuªd i¿%s\n", 
c⁄f_fûe
);

88 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "lorawan_public");

89 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

90 
bﬂrdc⁄f
.
l‹aw™_public
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

92 
	`lgw_log
(
LOG_INFO
, "WARNING: DataÅype forÜorawan_public seems wrong,Ölease check\n");

93 
bﬂrdc⁄f
.
l‹aw™_public
 = 
Ál£
;

95 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "clksrc");

96 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONNumbî
) {

97 
bﬂrdc⁄f
.
˛k§c
 = (
uöt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

99 
	`lgw_log
(
LOG_INFO
, "WARNING: DataÅype for clksrc seems wrong,Ölease check\n");

100 
bﬂrdc⁄f
.
˛k§c
 = 0;

102 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "full_duplex");

103 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

104 
bﬂrdc⁄f
.
fuŒ_du∂ex
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

106 
	`lgw_log
(
LOG_INFO
, "WARNING: DataÅype for full_duplex seems wrong,Ölease check\n");

107 
bﬂrdc⁄f
.
fuŒ_du∂ex
 = 
Ál£
;

109 
	`lgw_log
(
LOG_INFO
, "INFO: spidev_∑th %s,Ü‹aw™_publi¯%d, clk§¯%d, fuŒ_du∂ex %d\n", 
bﬂrdc⁄f
.
•idev_∑th
, bﬂrdc⁄f.
l‹aw™_public
, bﬂrdc⁄f.
˛k§c
, bﬂrdc⁄f.
fuŒ_du∂ex
);

111 i‡(
HAL
.
	`lgw_bﬂrd_£tc⁄f
(&
bﬂrdc⁄f
Ë!
LGW_HAL_SUCCESS
) {

112 
	`lgw_log
(
LOG_INFO
, "ERROR: FailedÅo configure board\n");

117 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "antenna_gain");

118 i‡(
vÆ
 !
NULL
) {

119 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONNumbî
) {

120 
GW
.
hÆ
.
™ã¬a_gaö
 = (
öt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

122 
	`lgw_log
(
LOG_INFO
, "WARNING: DataÅype forántenna_gain seems wrong,Ölease check\n");

123 
GW
.
hÆ
.
™ã¬a_gaö
 = 0;

126 
	`lgw_log
(
LOG_INFO
, "INFO:á¡í«_gaö %d dBi\n", 
GW
.
hÆ
.
™ã¬a_gaö
);

129 
c⁄f_ts_obj
 = 
	`js⁄_obje˘_gë_obje˘
(
c⁄f_obj
, "precision_timestamp");

130 i‡(
c⁄f_ts_obj
 =
NULL
) {

131 
	`lgw_log
(
LOG_INFO
, "INFO: %†d€†nŸ c⁄èöá JSON obje˘ f‹Öªcisi⁄Åime°amp\n", 
c⁄f_fûe
);

133 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_ts_obj
, "enable");

134 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

135 
tsc⁄f
.
íabÀ_¥ecisi⁄_ts
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

137 
	`lgw_log
(
LOG_INFO
, "WARNING: DataÅype forÖrecision_timestamp.enable seems wrong,Ölease check\n");

138 
tsc⁄f
.
íabÀ_¥ecisi⁄_ts
 = 
Ál£
;

140 i‡(
tsc⁄f
.
íabÀ_¥ecisi⁄_ts
 =
åue
) {

141 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_ts_obj
, "max_ts_metrics");

142 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONNumbî
) {

143 
tsc⁄f
.
max_ts_mërics
 = (
uöt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

145 
	`lgw_log
(
LOG_INFO
, "WARNING: DataÅype forÖrecision_timestamp.max_ts_metrics seems wrong,Ölease check\n");

146 
tsc⁄f
.
max_ts_mërics
 = 0xFF;

148 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_ts_obj
, "nb_symbols");

149 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONNumbî
) {

150 
tsc⁄f
.
nb_symbﬁs
 = (
uöt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

152 
	`lgw_log
(
LOG_INFO
, "WARNING: DataÅype forÖrecision_timestamp.nb_symbols seems wrong,Ölease check\n");

153 
tsc⁄f
.
nb_symbﬁs
 = 1;

155 
	`lgw_log
(
LOG_INFO
, "INFO: C⁄figurögÖªcisi⁄Åime°amp: max_ts_mërics:%u,Çb_symbﬁs:%u\n", 
tsc⁄f
.
max_ts_mërics
,Åsc⁄f.
nb_symbﬁs
);

158 i‡(
HAL
.
	`lgw_time°amp_£tc⁄f
(&
tsc⁄f
Ë!
LGW_HAL_SUCCESS
) {

159 
	`lgw_log
(
LOG_INFO
, "ERROR: FailedÅo configureÖrecisionÅimestamp\n");

163 
	`lgw_log
(
LOG_INFO
, "INFO: ConfiguringÜegacyÅimestamp\n");

168 
i
 = 0; i < 
LGW_RF_CHAIN_NB
; ++i) {

169 
	`mem£t
(&
rfc⁄f
, 0, Ñfconf);

170 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ødio_%i", 
i
);

171 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, 
∑øm_«me
);

172 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë!
JSONObje˘
) {

173 
	`lgw_log
(
LOG_INFO
, "INFO:Çÿc⁄figuøti⁄ f‹Ñadiÿ%i\n", 
i
);

177 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ødio_%i.íabÀ", 
i
);

178 
vÆ
 = 
	`js⁄_obje˘_dŸgë_vÆue
(
c⁄f_obj
, 
∑øm_«me
);

179 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

180 
rfc⁄f
.
íabÀ
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

182 
rfc⁄f
.
íabÀ
 = 
Ál£
;

184 i‡(
rfc⁄f
.
íabÀ
 =
Ál£
) {

185 
	`lgw_log
(
LOG_INFO
, "INFO:Ñadiÿ%òdißbÀd\n", 
i
);

187 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ødio_%i.‰eq", 
i
);

188 
rfc⁄f
.
‰eq_hz
 = (
uöt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, 
∑øm_«me
);

189 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ødio_%i.rssi_off£t", 
i
);

190 
rfc⁄f
.
rssi_off£t
 = ()
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, 
∑øm_«me
);

191 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ødio_%i.rssi_tcomp.c€ff_a", 
i
);

192 
rfc⁄f
.
rssi_tcomp
.
c€ff_a
 = ()
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, 
∑øm_«me
);

193 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ødio_%i.rssi_tcomp.c€ff_b", 
i
);

194 
rfc⁄f
.
rssi_tcomp
.
c€ff_b
 = ()
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, 
∑øm_«me
);

195 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ødio_%i.rssi_tcomp.c€ff_c", 
i
);

196 
rfc⁄f
.
rssi_tcomp
.
c€ff_c
 = ()
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, 
∑øm_«me
);

197 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ødio_%i.rssi_tcomp.c€ff_d", 
i
);

198 
rfc⁄f
.
rssi_tcomp
.
c€ff_d
 = ()
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, 
∑øm_«me
);

199 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ødio_%i.rssi_tcomp.c€ff_e", 
i
);

200 
rfc⁄f
.
rssi_tcomp
.
c€ff_e
 = ()
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, 
∑øm_«me
);

201 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ødio_%i.ty≥", 
i
);

202 
°r
 = 
	`js⁄_obje˘_dŸgë_°rög
(
c⁄f_obj
, 
∑øm_«me
);

203 i‡(!
	`°∫cmp
(
°r
, "SX1255", 6)) {

204 
rfc⁄f
.
ty≥
 = 
LGW_RADIO_TYPE_SX1255
;

205 } i‡(!
	`°∫cmp
(
°r
, "SX1257", 6)) {

206 
rfc⁄f
.
ty≥
 = 
LGW_RADIO_TYPE_SX1257
;

207 } i‡(!
	`°∫cmp
(
°r
, "SX1250", 6)) {

208 
rfc⁄f
.
ty≥
 = 
LGW_RADIO_TYPE_SX1250
;

210 
	`lgw_log
(
LOG_INFO
, "WARNING: invÆidÑadiÿty≥: %†(should bêSX1255 o∏SX1257 o∏SX1250)\n", 
°r
);

212 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ødio_%i.sögÀ_öput_mode", 
i
);

213 
vÆ
 = 
	`js⁄_obje˘_dŸgë_vÆue
(
c⁄f_obj
, 
∑øm_«me
);

214 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

215 
rfc⁄f
.
sögÀ_öput_mode
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

217 
rfc⁄f
.
sögÀ_öput_mode
 = 
Ál£
;

220 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ødio_%i.tx_íabÀ", 
i
);

221 
vÆ
 = 
	`js⁄_obje˘_dŸgë_vÆue
(
c⁄f_obj
, 
∑øm_«me
);

222 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

223 
rfc⁄f
.
tx_íabÀ
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

224 i‡(
rfc⁄f
.
tx_íabÀ
 =
åue
) {

226 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ødio_%i.tx_‰eq_mö", 
i
);

227 
GW
.
tx
.
tx_‰eq_mö
[
i
] = (
uöt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, 
∑øm_«me
);

228 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ødio_%i.tx_‰eq_max", 
i
);

229 
GW
.
tx
.
tx_‰eq_max
[
i
] = (
uöt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, 
∑øm_«me
);

230 i‡((
GW
.
tx
.
tx_‰eq_mö
[
i
] =0Ë|| (GW.tx.
tx_‰eq_max
[i] == 0)) {

231 
	`lgw_log
(
LOG_INFO
, "WARNING:Çÿ‰equícyÑ™gê•ecifõd f‹ TXÑ‡chaö %d\n", 
i
);

235 
	`mem£t
(&
GW
.
tx
.
txlut
[
i
], 0,  GW.tx.txlut[i]);

236 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ødio_%i.tx_gaö_lut", 
i
);

237 
c⁄f_txlut_¨øy
 = 
	`js⁄_obje˘_dŸgë_¨øy
(
c⁄f_obj
, 
∑øm_«me
);

238 i‡(
c⁄f_txlut_¨øy
 !
NULL
) {

239 
GW
.
tx
.
txlut
[
i
].
size
 = 
	`js⁄_¨øy_gë_cou¡
(
c⁄f_txlut_¨øy
);

241 
c⁄f_txgaö_obj
 = 
	`js⁄_¨øy_gë_obje˘
(
c⁄f_txlut_¨øy
, 0);

242 
vÆ
 = 
	`js⁄_obje˘_dŸgë_vÆue
(
c⁄f_txgaö_obj
, "pwr_idx");

243 i‡(
vÆ
 !
NULL
) {

244 
	`lgw_log
(
LOG_INFO
, "INFO: C⁄figurög Tx Gaö LUT f‹Ñf_chaö %u wôh %u indexe†f‹ sx1250\n", 
i
, 
GW
.
tx
.
txlut
[i].
size
);

245 
sx1250_tx_lut
 = 
åue
;

247 
	`lgw_log
(
LOG_INFO
, "INFO: C⁄figurög Tx Gaö LUT f‹Ñf_chaö %u wôh %u indexe†f‹ sx125x\n", 
i
, 
GW
.
tx
.
txlut
[i].
size
);

248 
sx1250_tx_lut
 = 
Ál£
;

251 
j
 = 0; j < ()
GW
.
tx
.
txlut
[
i
].
size
; j++) {

253 i‡(
j
 >
TX_GAIN_LUT_SIZE_MAX
) {

254 
	`lgw_log
(
LOG_INFO
, "ERROR: TX Gaö LUT [%u] index %dÇŸ suµ‹ãd, skù it\n", 
i
, 
j
);

258 
c⁄f_txgaö_obj
 = 
	`js⁄_¨øy_gë_obje˘
(
c⁄f_txlut_¨øy
, 
j
);

260 
vÆ
 = 
	`js⁄_obje˘_dŸgë_vÆue
(
c⁄f_txgaö_obj
, "rf_power");

261 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONNumbî
) {

262 
GW
.
tx
.
txlut
[
i
].
lut
[
j
].
rf_powî
 = (
öt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

264 
	`lgw_log
(
LOG_INFO
, "WARNING: D©®ty≥ f‹ %s[%d] sìm†wr⁄g,ÖÀa£ check\n", "rf_powî", 
j
);

265 
GW
.
tx
.
txlut
[
i
].
lut
[
j
].
rf_powî
 = 0;

268 
vÆ
 = 
	`js⁄_obje˘_dŸgë_vÆue
(
c⁄f_txgaö_obj
, "pa_gain");

269 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONNumbî
) {

270 
GW
.
tx
.
txlut
[
i
].
lut
[
j
].
∑_gaö
 = (
uöt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

272 
	`lgw_log
(
LOG_INFO
, "WARNING: D©®ty≥ f‹ %s[%d] sìm†wr⁄g,ÖÀa£ check\n", "∑_gaö", 
j
);

273 
GW
.
tx
.
txlut
[
i
].
lut
[
j
].
∑_gaö
 = 0;

275 i‡(
sx1250_tx_lut
 =
Ál£
) {

277 
vÆ
 = 
	`js⁄_obje˘_dŸgë_vÆue
(
c⁄f_txgaö_obj
, "dig_gain");

278 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONNumbî
) {

279 
GW
.
tx
.
txlut
[
i
].
lut
[
j
].
dig_gaö
 = (
uöt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

281 
	`lgw_log
(
LOG_INFO
, "WARNING: D©®ty≥ f‹ %s[%d] sìm†wr⁄g,ÖÀa£ check\n", "dig_gaö", 
j
);

282 
GW
.
tx
.
txlut
[
i
].
lut
[
j
].
dig_gaö
 = 0;

285 
vÆ
 = 
	`js⁄_obje˘_dŸgë_vÆue
(
c⁄f_txgaö_obj
, "dac_gain");

286 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONNumbî
) {

287 
GW
.
tx
.
txlut
[
i
].
lut
[
j
].
dac_gaö
 = (
uöt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

289 
	`lgw_log
(
LOG_INFO
, "WARNING: D©®ty≥ f‹ %s[%d] sìm†wr⁄g,ÖÀa£ check\n", "dac_gaö", 
j
);

290 
GW
.
tx
.
txlut
[
i
].
lut
[
j
].
dac_gaö
 = 3;

293 
vÆ
 = 
	`js⁄_obje˘_dŸgë_vÆue
(
c⁄f_txgaö_obj
, "mix_gain");

294 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONNumbî
) {

295 
GW
.
tx
.
txlut
[
i
].
lut
[
j
].
mix_gaö
 = (
uöt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

297 
	`lgw_log
(
LOG_INFO
, "WARNING: D©®ty≥ f‹ %s[%d] sìm†wr⁄g,ÖÀa£ check\n", "mix_gaö", 
j
);

298 
GW
.
tx
.
txlut
[
i
].
lut
[
j
].
mix_gaö
 = 0;

302 
GW
.
tx
.
txlut
[
i
].
lut
[
j
].
mix_gaö
 = 5;

305 
vÆ
 = 
	`js⁄_obje˘_dŸgë_vÆue
(
c⁄f_txgaö_obj
, "pwr_idx");

306 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONNumbî
) {

307 
GW
.
tx
.
txlut
[
i
].
lut
[
j
].
pwr_idx
 = (
uöt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

309 
	`lgw_log
(
LOG_INFO
, "WARNING: D©®ty≥ f‹ %s[%d] sìm†wr⁄g,ÖÀa£ check\n", "pwr_idx", 
j
);

310 
GW
.
tx
.
txlut
[
i
].
lut
[
j
].
pwr_idx
 = 0;

315 i‡(
GW
.
tx
.
txlut
[
i
].
size
 > 0) {

316 i‡(
HAL
.
	`lgw_txgaö_£tc⁄f
(
i
, &
GW
.
tx
.
txlut
[i]Ë!
LGW_HAL_SUCCESS
) {

317 
	`lgw_log
(
LOG_INFO
, "ERROR: FaûedÅÿc⁄figuª c⁄˚¡øt‹ TX Gaö LUT f‹Ñf_chaö %u\n", 
i
);

321 
	`lgw_log
(
LOG_INFO
, "WARNING: NÿTX gaö LUT deföed f‹Ñf_chaö %u\n", 
i
);

324 
	`lgw_log
(
LOG_INFO
, "WARNING: NÿTX gaö LUT deföed f‹Ñf_chaö %u\n", 
i
);

328 
rfc⁄f
.
tx_íabÀ
 = 
Ál£
;

330 
	`lgw_log
(
LOG_INFO
, "INFO:Ñadiÿ%òíabÀd (ty≥ %s), cíã∏‰equícy %u, RSSI off£à%f,ÅxÉ«bÀd %d, sögÀ i≈uàmodê%d\n", 
i
, 
°r
, 
rfc⁄f
.
‰eq_hz
,Ñfc⁄f.
rssi_off£t
,Ñfc⁄f.
tx_íabÀ
,Ñfc⁄f.
sögÀ_öput_mode
);

333 i‡(
HAL
.
	`lgw_rxrf_£tc⁄f
(
i
, &
rfc⁄f
Ë!
LGW_HAL_SUCCESS
) {

334 
	`lgw_log
(
LOG_INFO
, "ERROR: invÆid c⁄figuøti⁄ f‹Ñadiÿ%i\n", 
i
);

340 
i
 = 0; i < 
LGW_MULTI_NB
; ++i) {

341 
	`mem£t
(&
ifc⁄f
, 0,  ifconf);

342 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ch™_mu…iSF_%i", 
i
);

343 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, 
∑øm_«me
);

344 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë!
JSONObje˘
) {

345 
	`lgw_log
(
LOG_INFO
, "INFO:Çÿc⁄figuøti⁄ f‹ L‹®mu…i-SF ch™√»%i\n", 
i
);

349 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ch™_mu…iSF_%i.íabÀ", 
i
);

350 
vÆ
 = 
	`js⁄_obje˘_dŸgë_vÆue
(
c⁄f_obj
, 
∑øm_«me
);

351 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

352 
ifc⁄f
.
íabÀ
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

354 
ifc⁄f
.
íabÀ
 = 
Ál£
;

356 i‡(
ifc⁄f
.
íabÀ
 =
Ál£
) {

357 
	`lgw_log
(
LOG_INFO
, "INFO: L‹®mu…i-SF ch™√»%òdißbÀd\n", 
i
);

359 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ch™_mu…iSF_%i.ødio", 
i
);

360 
ifc⁄f
.
rf_chaö
 = (
uöt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, 
∑øm_«me
);

361 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ch™_mu…iSF_%i.if", 
i
);

362 
ifc⁄f
.
‰eq_hz
 = (
öt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, 
∑øm_«me
);

364 
	`lgw_log
(
LOG_INFO
, "INFO: L‹®mu…i-SF ch™√»%i>Ñadiÿ%i, IF %òHz, 125 kHz bw, SF 5Åÿ12\n", 
i
, 
ifc⁄f
.
rf_chaö
, ifc⁄f.
‰eq_hz
);

367 i‡(
HAL
.
	`lgw_rxif_£tc⁄f
(
i
, &
ifc⁄f
Ë!
LGW_HAL_SUCCESS
) {

368 
	`lgw_log
(
LOG_INFO
, "ERROR: invÆid c⁄figuøti⁄ f‹ L‹®mu…i-SF ch™√»%i\n", 
i
);

374 
	`mem£t
(&
ifc⁄f
, 0,  ifconf);

375 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "chan_Lora_std");

376 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë!
JSONObje˘
) {

377 
	`lgw_log
(
LOG_INFO
, "INFO:Ço configuration for Lora standard channel\n");

379 
vÆ
 = 
	`js⁄_obje˘_dŸgë_vÆue
(
c⁄f_obj
, "chan_Lora_std.enable");

380 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

381 
ifc⁄f
.
íabÀ
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

383 
ifc⁄f
.
íabÀ
 = 
Ál£
;

385 i‡(
ifc⁄f
.
íabÀ
 =
Ál£
) {

386 
	`lgw_log
(
LOG_INFO
, "INFO: L‹®°™d¨d ch™√»%òdißbÀd\n", 
i
);

388 
ifc⁄f
.
rf_chaö
 = (
uöt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, "chan_Lora_std.radio");

389 
ifc⁄f
.
‰eq_hz
 = (
öt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, "chan_Lora_std.if");

390 
bw
 = (
uöt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, "chan_Lora_std.bandwidth");

391 
bw
) {

392 500000: 
ifc⁄f
.
b™dwidth
 = 
BW_500KHZ
; ;

393 250000: 
ifc⁄f
.
b™dwidth
 = 
BW_250KHZ
; ;

394 125000: 
ifc⁄f
.
b™dwidth
 = 
BW_125KHZ
; ;

395 : 
ifc⁄f
.
b™dwidth
 = 
BW_UNDEFINED
;

397 
sf
 = (
uöt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, "chan_Lora_std.spread_factor");

398 
sf
) {

399 5: 
ifc⁄f
.
d©¨©e
 = 
DR_LORA_SF5
; ;

400 6: 
ifc⁄f
.
d©¨©e
 = 
DR_LORA_SF6
; ;

401 7: 
ifc⁄f
.
d©¨©e
 = 
DR_LORA_SF7
; ;

402 8: 
ifc⁄f
.
d©¨©e
 = 
DR_LORA_SF8
; ;

403 9: 
ifc⁄f
.
d©¨©e
 = 
DR_LORA_SF9
; ;

404 10: 
ifc⁄f
.
d©¨©e
 = 
DR_LORA_SF10
; ;

405 11: 
ifc⁄f
.
d©¨©e
 = 
DR_LORA_SF11
; ;

406 12: 
ifc⁄f
.
d©¨©e
 = 
DR_LORA_SF12
; ;

407 : 
ifc⁄f
.
d©¨©e
 = 
DR_UNDEFINED
;

409 
vÆ
 = 
	`js⁄_obje˘_dŸgë_vÆue
(
c⁄f_obj
, "chan_Lora_std.implicit_hdr");

410 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

411 
ifc⁄f
.
im∂icô_hdr
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

413 
ifc⁄f
.
im∂icô_hdr
 = 
Ál£
;

415 i‡(
ifc⁄f
.
im∂icô_hdr
 =
åue
) {

416 
vÆ
 = 
	`js⁄_obje˘_dŸgë_vÆue
(
c⁄f_obj
, "chan_Lora_std.implicit_payload_length");

417 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONNumbî
) {

418 
ifc⁄f
.
im∂icô_∑ylﬂd_Àngth
 = (
uöt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

420 
	`lgw_log
(
LOG_INFO
, "ERROR:ÖayloadÜength setting is mandatory for implicit header mode\n");

423 
vÆ
 = 
	`js⁄_obje˘_dŸgë_vÆue
(
c⁄f_obj
, "chan_Lora_std.implicit_crc_en");

424 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

425 
ifc⁄f
.
im∂icô_¸c_í
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

427 
	`lgw_log
(
LOG_INFO
, "ERROR: CRCÉnable setting is mandatory for implicit header mode\n");

430 
vÆ
 = 
	`js⁄_obje˘_dŸgë_vÆue
(
c⁄f_obj
, "chan_Lora_std.implicit_coderate");

431 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONNumbî
) {

432 
ifc⁄f
.
im∂icô_codî©e
 = (
uöt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

434 
	`lgw_log
(
LOG_INFO
, "ERROR: codingÑate setting is mandatory for implicit header mode\n");

439 
	`lgw_log
(
LOG_INFO
, "INFO: L‹®°d ch™√l>Ñadiÿ%i, IF %òHz, %u Hz bw, SF %u, %s\n", 
ifc⁄f
.
rf_chaö
, ifc⁄f.
‰eq_hz
, 
bw
, 
sf
, (ifc⁄f.
im∂icô_hdr
 =
åue
) ? "Implicit header" : "Explicit header");

441 i‡(
HAL
.
	`lgw_rxif_£tc⁄f
(8, &
ifc⁄f
Ë!
LGW_HAL_SUCCESS
) {

442 
	`lgw_log
(
LOG_INFO
, "ERROR: invalid configuration for Lora standard channel\n");

448 
	`mem£t
(&
ifc⁄f
, 0,  ifconf);

449 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "chan_FSK");

450 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë!
JSONObje˘
) {

451 
	`lgw_log
(
LOG_INFO
, "INFO:Ço configuration for FSK channel\n");

453 
vÆ
 = 
	`js⁄_obje˘_dŸgë_vÆue
(
c⁄f_obj
, "chan_FSK.enable");

454 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

455 
ifc⁄f
.
íabÀ
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

457 
ifc⁄f
.
íabÀ
 = 
Ál£
;

459 i‡(
ifc⁄f
.
íabÀ
 =
Ál£
) {

460 
	`lgw_log
(
LOG_INFO
, "INFO: FSK ch™√»%òdißbÀd\n", 
i
);

462 
ifc⁄f
.
rf_chaö
 = (
uöt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, "chan_FSK.radio");

463 
ifc⁄f
.
‰eq_hz
 = (
öt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, "chan_FSK.if");

464 
bw
 = (
uöt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, "chan_FSK.bandwidth");

465 
fdev
 = (
uöt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, "chan_FSK.freq_deviation");

466 
ifc⁄f
.
d©¨©e
 = (
uöt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, "chan_FSK.datarate");

469 i‡((
bw
 =0Ë&& (
fdev
 != 0)) {

470 
bw
 = 2 * 
fdev
 + 
ifc⁄f
.
d©¨©e
;

472 i‡(
bw
 =0Ë
ifc⁄f
.
b™dwidth
 = 
BW_UNDEFINED
;

474 i‡(
bw
 <7800Ë
ifc⁄f
.
b™dwidth
 = 
BW_7K8HZ
;

475 i‡(
bw
 <15600Ë
ifc⁄f
.
b™dwidth
 = 
BW_15K6HZ
;

476 i‡(
bw
 <31200Ë
ifc⁄f
.
b™dwidth
 = 
BW_31K2HZ
;

477 i‡(
bw
 <62500Ë
ifc⁄f
.
b™dwidth
 = 
BW_62K5HZ
;

479 i‡(
bw
 <125000Ë
ifc⁄f
.
b™dwidth
 = 
BW_125KHZ
;

480 i‡(
bw
 <250000Ë
ifc⁄f
.
b™dwidth
 = 
BW_250KHZ
;

481 i‡(
bw
 <500000Ë
ifc⁄f
.
b™dwidth
 = 
BW_500KHZ
;

482 
ifc⁄f
.
b™dwidth
 = 
BW_UNDEFINED
;

484 
	`lgw_log
(
LOG_INFO
, "INFO: FSK ch™√l>Ñadiÿ%i, IF %òHz, %u Hz bw, %u bp†d©¨©e\n", 
ifc⁄f
.
rf_chaö
, ifc⁄f.
‰eq_hz
, 
bw
, ifc⁄f.
d©¨©e
);

486 i‡(
HAL
.
	`lgw_rxif_£tc⁄f
(9, &
ifc⁄f
Ë!
LGW_HAL_SUCCESS
) {

487 
	`lgw_log
(
LOG_INFO
, "ERROR: invalid configuration for FSK channel\n");

491 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

494 
	}
}

496 
	$∑r£_g©eway_c⁄figuøti⁄
(c⁄° * 
c⁄f_fûe
) {

497 c⁄° 
c⁄f_obj_«me
[] = "gateway_conf";

498 
JSON_VÆue
 *
roŸ_vÆ
;

499 
JSON_Obje˘
 *
c⁄f_obj
 = 
NULL
;

500 
JSON_Obje˘
 *
£rv_obj
 = 
NULL
;

501 
JSON_Aºay
 *
£rv_¨ry
 = 
NULL
;

502 
JSON_VÆue
 *
vÆ
 = 
NULL
;

503 c⁄° *
°r
;

504 c⁄° *
°º
;

505 
uŒ
 = 0;

507 
£rv_s
* 
£rv_íåy
 = 
NULL
;

510 
roŸ_vÆ
 = 
	`js⁄_∑r£_fûe_wôh_commíts
(
c⁄f_fûe
);

511 i‡(
roŸ_vÆ
 =
NULL
) {

512 
	`lgw_log
(
LOG_INFO
, "ERROR: %†i†nŸá vÆid JSON fûe\n", 
c⁄f_fûe
);

517 
c⁄f_obj
 = 
	`js⁄_obje˘_gë_obje˘
(
	`js⁄_vÆue_gë_obje˘
(
roŸ_vÆ
), 
c⁄f_obj_«me
);

518 i‡(
c⁄f_obj
 =
NULL
) {

519 
	`lgw_log
(
LOG_INFO
, "INFO: %†d€†nŸ c⁄èöá JSON obje˘Çamed %s\n", 
c⁄f_fûe
, 
c⁄f_obj_«me
);

522 
	`lgw_log
(
LOG_INFO
, "INFO: %†d€†c⁄èöá JSON obje˘Çamed %s,Ö¨sög g©ewayÖ¨amëîs\n", 
c⁄f_fûe
, 
c⁄f_obj_«me
);

526 
°r
 = 
	`js⁄_obje˘_gë_°rög
(
c⁄f_obj
, "gateway_ID");

527 i‡(
°r
 !
NULL
) {

528 
	`ssˇnf
(
°r
, "%Œx", &
uŒ
);

529 
GW
.
öfo
.
lgwm
 = 
uŒ
;

530 
GW
.
öfo
.
√t_mac_h
 = 
	`ht⁄l
((
uöt32_t
)(0xFFFFFFFF & (
uŒ
>>32)));

531 
GW
.
öfo
.
√t_mac_l
 = 
	`ht⁄l
((
uöt32_t
)(0xFFFFFFFF & 
uŒ
 ));

532 
	`lgw_log
(
LOG_INFO
, "INFO: g©eway MACáddªs†i†c⁄figuªdÅÿ%016ŒX\n", 
uŒ
);

535 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "ghoststream_enabled");

536 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

537 
GW
.
cfg
.
gho°°ªam_íabÀd
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

538 i‡(
GW
.
cfg
.
gho°°ªam_íabÀd
 =
åue
) {

539 
	`lgw_log
(
LOG_INFO
, "INFO: ghoststream_enabled isÅrue\n");

541 
	`lgw_log
(
LOG_INFO
, "INFO: ghoststream_enabled is false\n");

545 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "radiostream_enabled");

546 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

547 
GW
.
cfg
.
ødio°ªam_íabÀd
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

548 i‡(
GW
.
cfg
.
ødio°ªam_íabÀd
 =
åue
) {

549 
	`lgw_log
(
LOG_INFO
, "INFO:Ñadiostream_enable isÅrue\n");

551 
	`lgw_log
(
LOG_INFO
, "INFO:Ñadiostream_enable is false\n");

555 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "wd_enabled");

556 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

557 
GW
.
cfg
.
wd_íabÀd
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

558 i‡(
GW
.
cfg
.
wd_íabÀd
 =
åue
) {

559 
	`lgw_log
(
LOG_INFO
, "INFO: wd_enable isÅrue\n");

561 
	`lgw_log
(
LOG_INFO
, "INFO: wd_enable is false\n");

565 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "logger_enabled");

566 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

567 
GW
.
log
.
loggî_íabÀd
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

568 i‡(
GW
.
log
.
loggî_íabÀd
 =
åue
) {

569 
	`lgw_log
(
LOG_INFO
, "INFO:Üogger_enabled isÅrue\n");

571 
	`lgw_log
(
LOG_INFO
, "INFO:Üogger_enabled is false\n");

575 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "mac_decoded");

576 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

577 
GW
.
cfg
.
mac_decoded
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

578 i‡(
GW
.
cfg
.
mac_decoded
 =
åue
) {

579 
	`lgw_log
(
LOG_INFO
, "INFO: mac_decoded isÅrue\n");

581 
	`lgw_log
(
LOG_INFO
, "INFO: mac_decoded is false\n");

585 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "mac2db");

586 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

587 
GW
.
cfg
.
mac2db
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

588 i‡(
GW
.
cfg
.
mac2db
 =
åue
) {

589 
	`lgw_log
(
LOG_INFO
, "INFO: mac2db isÅrue\n");

591 
	`lgw_log
(
LOG_INFO
, "INFO: mac2db is false\n");

595 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "mac2file");

596 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

597 
GW
.
cfg
.
mac2fûe
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

598 i‡(
GW
.
cfg
.
mac2fûe
 =
åue
) {

599 
	`lgw_log
(
LOG_INFO
, "INFO: mac2file isÅrue\n");

601 
	`lgw_log
(
LOG_INFO
, "INFO: mac2file is false\n");

605 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "custom_downlink");

606 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

607 
GW
.
cfg
.
cu°om_dow∆ök
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

608 i‡(
GW
.
cfg
.
cu°om_dow∆ök
 =
åue
) {

609 
	`lgw_log
(
LOG_INFO
, "INFO: custom_downlink isÅrue\n");

611 
	`lgw_log
(
LOG_INFO
, "INFO: custom_downlink is false\n");

615 
°r
 = 
	`js⁄_obje˘_gë_°rög
(
c⁄f_obj
, "ghost_host");

616 i‡(
°r
 !
NULL
) {

617 
	`°∫˝y
(
GW
.
cfg
.
gho°_ho°
, 
°r
,  GW.cfg.ghost_host);

618 
GW
.
cfg
.
gho°_ho°
[ GW.cfg.ghost_host - 1] = '\0';

619 
	`lgw_log
(
LOG_INFO
, "INFO: gho°_ho° i†c⁄figuªdÅÿ\"%s\"\n", 
GW
.
cfg
.
gho°_ho°
);

622 
°r
 = 
	`js⁄_obje˘_gë_°rög
(
c⁄f_obj
, "ghost_port");

623 i‡(
°r
 !
NULL
) {

624 
	`°∫˝y
(
GW
.
cfg
.
gho°_p‹t
, 
°r
,  GW.cfg.ghost_port);

625 
GW
.
cfg
.
gho°_p‹t
[ GW.cfg.ghost_port - 1] = '\0';

626 
	`lgw_log
(
LOG_INFO
, "INFO: gho°_p‹ài†c⁄figuªdÅÿ\"%s\"\n", 
GW
.
cfg
.
gho°_p‹t
);

629 
°r
 = 
	`js⁄_obje˘_gë_°rög
(
c⁄f_obj
, "platform");

630 i‡(
°r
 !
NULL
) {

631 
	`°∫˝y
(
GW
.
öfo
.
∂©f‹m
, 
°r
,  GW.info.platform);

632 
GW
.
öfo
.
∂©f‹m
[ GW.info.platform - 1] = '\0';

633 
	`lgw_log
(
LOG_INFO
, "INFO: GPS sîü»p‹à∑th i†c⁄figuªdÅÿ\"%s\"\n", 
GW
.
öfo
.
∂©f‹m
);

636 
°r
 = 
	`js⁄_obje˘_gë_°rög
(
c⁄f_obj
, "platform");

637 i‡(
°r
 !
NULL
) {

638 
	`°∫˝y
(
GW
.
öfo
.
∂©f‹m
, 
°r
,  GW.info.platform);

639 
GW
.
öfo
.
∂©f‹m
[ GW.info.platform - 1] = '\0';

640 
	`lgw_log
(
LOG_INFO
, "INFO: GPS sîü»p‹à∑th i†c⁄figuªdÅÿ\"%s\"\n", 
GW
.
öfo
.
∂©f‹m
);

643 
°r
 = 
	`js⁄_obje˘_gë_°rög
(
c⁄f_obj
, "email");

644 i‡(
°r
 !
NULL
) {

645 
	`°∫˝y
(
GW
.
öfo
.
emaû
, 
°r
,  GW.info.email);

646 
GW
.
öfo
.
emaû
[ GW.info.email - 1] = '\0';

647 
	`lgw_log
(
LOG_INFO
, "INFO: GPS sîü»p‹à∑th i†c⁄figuªdÅÿ\"%s\"\n", 
GW
.
öfo
.
emaû
);

650 
°r
 = 
	`js⁄_obje˘_gë_°rög
(
c⁄f_obj
, "description");

651 i‡(
°r
 !
NULL
) {

652 
	`°∫˝y
(
GW
.
öfo
.
des¸ùti⁄
, 
°r
,  GW.info.description);

653 
GW
.
öfo
.
des¸ùti⁄
[ GW.info.description - 1] = '\0';

654 
	`lgw_log
(
LOG_INFO
, "INFO: GPS sîü»p‹à∑th i†c⁄figuªdÅÿ\"%s\"\n", 
GW
.
öfo
.
des¸ùti⁄
);

658 
°r
 = 
	`js⁄_obje˘_gë_°rög
(
c⁄f_obj
, "gps_tty_path");

659 i‡(
°r
 !
NULL
) {

660 
	`°∫˝y
(
GW
.
gps
.
gps_ây_∑th
, 
°r
,  GW.gps.gps_tty_path);

661 
GW
.
gps
.
gps_ây_∑th
[ GW.gps.gps_tty_path - 1] = '\0';

662 
	`lgw_log
(
LOG_INFO
, "INFO: GPS sîü»p‹à∑th i†c⁄figuªdÅÿ\"%s\"\n", 
GW
.
gps
.
gps_ây_∑th
);

665 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "autoquit_threshold");

666 i‡(
vÆ
 !
NULL
) {

667 
GW
.
cfg
.
autoquô_thªshﬁd
 = (
uöt32_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

668 
	`lgw_log
(
LOG_INFO
, "INFO:áutoquô_thªshﬁd i†c⁄figuªdÅÿ%u \n", 
GW
.
cfg
.
autoquô_thªshﬁd
);

671 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "time_interval");

672 i‡(
vÆ
 !
NULL
) {

673 
GW
.
cfg
.
time_öãrvÆ
 = (
uöt32_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

674 
	`lgw_log
(
LOG_INFO
, "INFO:Åime_öãrvÆ i†c⁄figuªdÅÿ%u \n", 
GW
.
cfg
.
time_öãrvÆ
);

679 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "ref_latitude");

680 i‡(
vÆ
 !
NULL
) {

681 
GW
.
gps
.
ª„ªn˚_co‹d
.
œt
 = ()
	`js⁄_vÆue_gë_numbî
(
vÆ
);

682 
	`lgw_log
(
LOG_INFO
, "INFO: Re„ªn˚Ü©ôudêi†c⁄figuªdÅÿ%‡deg\n", 
GW
.
gps
.
ª„ªn˚_co‹d
.
œt
);

684 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "ref_longitude");

685 i‡(
vÆ
 !
NULL
) {

686 
GW
.
gps
.
ª„ªn˚_co‹d
.
l⁄
 = ()
	`js⁄_vÆue_gë_numbî
(
vÆ
);

687 
	`lgw_log
(
LOG_INFO
, "INFO: Re„ªn˚Ü⁄gôudêi†c⁄figuªdÅÿ%‡deg\n", 
GW
.
gps
.
ª„ªn˚_co‹d
.
l⁄
);

689 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "ref_altitude");

690 i‡(
vÆ
 !
NULL
) {

691 
GW
.
gps
.
ª„ªn˚_co‹d
.
Æt
 = ()
	`js⁄_vÆue_gë_numbî
(
vÆ
);

692 
	`lgw_log
(
LOG_INFO
, "INFO: Re„ªn˚á…ôudêi†c⁄figuªdÅÿ%òmëîs\n", 
GW
.
gps
.
ª„ªn˚_co‹d
.
Æt
);

696 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "fake_gps");

697 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

698 
GW
.
gps
.
gps_Áke_íabÀ
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

699 i‡(
GW
.
gps
.
gps_Áke_íabÀ
 =
åue
) {

700 
	`lgw_log
(
LOG_INFO
, "INFO: fake GPS isÉnabled\n");

702 
	`lgw_log
(
LOG_INFO
, "INFO: fake GPS is disabled\n");

707 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "beacon_period");

708 i‡(
vÆ
 !
NULL
) {

709 
GW
.
bóc⁄
.
bóc⁄_≥riod
 = (
uöt32_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

710 i‡((
GW
.
bóc⁄
.
bóc⁄_≥riod
 > 0) && (GW.beacon.beacon_period < 6)) {

711 
	`lgw_log
(
LOG_INFO
, "ERROR: invalid configuration for BeaconÖeriod, must be >= 6s\n");

714 
	`lgw_log
(
LOG_INFO
, "INFO: Bóc⁄ögÖîiod i†c⁄figuªdÅÿ%u sec⁄ds\n", 
GW
.
bóc⁄
.
bóc⁄_≥riod
);

719 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "beacon_freq_hz");

720 i‡(
vÆ
 !
NULL
) {

721 
GW
.
bóc⁄
.
bóc⁄_‰eq_hz
 = (
uöt32_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

722 
	`lgw_log
(
LOG_INFO
, "INFO: Bóc⁄ög sig«»wû»bêemôãdáà%u Hz\n", 
GW
.
bóc⁄
.
bóc⁄_‰eq_hz
);

726 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "beacon_freq_nb");

727 i‡(
vÆ
 !
NULL
) {

728 
GW
.
bóc⁄
.
bóc⁄_‰eq_nb
 = (
uöt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

729 
	`lgw_log
(
LOG_INFO
, "INFO: Bóc⁄ög ch™√»numbî i†£àtÿ%u\n", 
GW
.
bóc⁄
.
bóc⁄_‰eq_nb
);

733 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "beacon_freq_step");

734 i‡(
vÆ
 !
NULL
) {

735 
GW
.
bóc⁄
.
bóc⁄_‰eq_°ï
 = (
uöt32_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

736 
	`lgw_log
(
LOG_INFO
, "INFO: Bóc⁄ög ch™√»‰equícy sã∞i†£àtÿ%uHz\n", 
GW
.
bóc⁄
.
bóc⁄_‰eq_°ï
);

740 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "beacon_datarate");

741 i‡(
vÆ
 !
NULL
) {

742 
GW
.
bóc⁄
.
bóc⁄_d©¨©e
 = (
uöt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

743 
	`lgw_log
(
LOG_INFO
, "INFO: Bóc⁄ög d©¨©êi†£àtÿSF%d\n", 
GW
.
bóc⁄
.
bóc⁄_d©¨©e
);

747 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "beacon_bw_hz");

748 i‡(
vÆ
 !
NULL
) {

749 
GW
.
bóc⁄
.
bóc⁄_bw_hz
 = (
uöt32_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

750 
	`lgw_log
(
LOG_INFO
, "INFO: Bóc⁄ög moduœti⁄ b™dwidth i†£àtÿ%dHz\n", 
GW
.
bóc⁄
.
bóc⁄_bw_hz
);

754 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "beacon_power");

755 i‡(
vÆ
 !
NULL
) {

756 
GW
.
bóc⁄
.
bóc⁄_powî
 = (
öt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

757 
	`lgw_log
(
LOG_INFO
, "INFO: Bóc⁄ög TXÖowî i†£àtÿ%ddBm\n", 
GW
.
bóc⁄
.
bóc⁄_powî
);

761 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "beacon_infodesc");

762 i‡(
vÆ
 !
NULL
) {

763 
GW
.
bóc⁄
.
bóc⁄_öfodesc
 = (
uöt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

764 
	`lgw_log
(
LOG_INFO
, "INFO: Bóc⁄ög inf‹m©i⁄ des¸ùt‹ i†£àtÿ%u\n", 
GW
.
bóc⁄
.
bóc⁄_öfodesc
);

768 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "autoquit_threshold");

769 i‡(
vÆ
 !
NULL
) {

770 
GW
.
cfg
.
autoquô_thªshﬁd
 = (
uöt32_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

771 
	`lgw_log
(
LOG_INFO
, "INFO: Auto-quôá·î %uÇ⁄-acknowÀdged PULL_DATA\n", 
GW
.
cfg
.
autoquô_thªshﬁd
);

775 
£rv_¨ry
 = 
	`js⁄_obje˘_gë_¨øy
(
c⁄f_obj
, "servers");

776 i‡–
NULL
 !
£rv_¨ry
) {

778 
cou¡
 = 0, 
i
 = 0, 
åy
 = 0;

779 
cou¡
 = 
	`js⁄_¨øy_gë_cou¡
(
£rv_¨ry
);

780 
	`lgw_log
(
LOG_INFO
, "INFO: Found %ò£rvî†öáºay.\n", 
cou¡
);

781 
i
 = 0; i < 
cou¡
; i++) {

782 
£rv_íåy
 = (
£rv_s
*)
	`lgw_mÆloc
((serv_s));

785 
£rv_íåy
->
li°
.
√xt
 = 
NULL
;

794 
£rv_íåy
->
öfo
.
°amp
 = 1 << (
i
+1);

797 
£rv_íåy
->
√t
 = (
£rv_√t_s
*)
	`lgw_mÆloc
((serv_net_s));

798 
£rv_íåy
->
√t
->
sock_up
 = -1;

799 
£rv_íåy
->
√t
->
sock_down
 = -1;

800 
£rv_íåy
->
√t
->
push_timeout_hÆf
.
tv_£c
 = 0;

801 
£rv_íåy
->
√t
->
push_timeout_hÆf
.
tv_u£c
 = 
DEFAULT_PUSH_TIMEOUT_MS
 * 500;

802 
£rv_íåy
->
√t
->
puŒ_timeout
.
tv_£c
 = 0;

803 
£rv_íåy
->
√t
->
puŒ_timeout
.
tv_u£c
 = 
DEFAULT_PULL_TIMEOUT_MS
 * 1000;

804 
£rv_íåy
->
√t
->
puŒ_öãrvÆ
 = 
DEFAULT_PULL_INTERVAL
;

807 
£rv_íåy
->
fûãr
.
fwd_vÆid_pkt
 = 
åue
;

808 
£rv_íåy
->
fûãr
.
fwd_îr‹_pkt
 = 
Ál£
;

809 
£rv_íåy
->
fûãr
.
fwd_no¸c_pkt
 = 
Ál£
;

810 
£rv_íåy
->
fûãr
.
Â‹t
 = 0;

811 
£rv_íåy
->
fûãr
.
devaddr
 = 0;

813 
£rv_íåy
->
ªp‹t
 = 
NULL
;

816 
£rv_íåy
->
°©e
.
live
 = 
Ál£
;

817 
£rv_íåy
->
°©e
.
c⁄è˘
 = 0;

819 
åy
 = 0;

822 i‡(
	`£m_öô
(&
£rv_íåy
->
thªad
.
£ma
, 0, 0) != 0) {

823 
åy
++;

826 } 
åy
 < 3);

828 i‡(
åy
 == 3) {

829 
	`lgw_log
(
LOG_INFO
, "WARNING, Can't initializesÅhe unnamed semaphore of service, ignoreÅhisÉlement.\n");

830 
	`lgw_‰ì
(
£rv_íåy
->
√t
);

831 
	`lgw_‰ì
(
£rv_íåy
);

835 
£rv_íåy
->
thªad
.
°›_sig
 = 
Ál£
;

837 
£rv_obj
 = 
	`js⁄_¨øy_gë_obje˘
(
£rv_¨ry
, 
i
);

839 
°r
 = 
	`js⁄_obje˘_gë_°rög
(
£rv_obj
, "server_name");

840 i‡(
°r
 !
NULL
) {

841 
	`°∫˝y
(
£rv_íåy
->
öfo
.
«me
, 
°r
,  serv_entry->info.name);

842 
£rv_íåy
->
öfo
.
«me
[ serv_entry->info.name - 1] = '\0';

843 
	`lgw_log
(
LOG_INFO
, "INFO: Foundá sîvîÇamêi†\"%s\"\n", 
°r
);

845 
	`lgw_gí_°r
((*)&
£rv_íåy
->
öfo
.
«me
, (serv_entry->info.name));

846 
	`lgw_log
(
LOG_INFO
, "INFO: Thê£rvîÇamêmu°bêc⁄figuª, gíî©ê®øndomÇame: %s\n", 
£rv_íåy
->
öfo
.
«me
);

850 
°r
 = 
	`js⁄_obje˘_gë_°rög
(
£rv_obj
, "server_key");

851 i‡(
°r
 !
NULL
) {

852 
£rv_íåy
->
öfo
.
key
 = 
	`lgw_mÆloc
(
PATH_LEN
);

853 
	`°∫˝y
(
£rv_íåy
->
öfo
.
key
, 
°r
, 
PATH_LEN
);

854 
£rv_íåy
->
öfo
.
key
[
PATH_LEN
 - 1] = '\0';

855 
	`lgw_log
(
LOG_INFO
, "INFO: Foundá sîvî key i†\"%s\"\n", 
°r
);

858 
°r
 = 
	`js⁄_obje˘_gë_°rög
(
£rv_obj
, "server_type");

859 i‡(
°r
 !
NULL
) {

860 i‡(!
	`°∫cmp
(
°r
, "semtech", 7)) {

861 
£rv_íåy
->
öfo
.
ty≥
 = 
£mãch
;

862 } i‡(!
	`°∫cmp
(
°r
, "ttn", 3)) {

863 
£rv_íåy
->
öfo
.
ty≥
 = 
ân
;

864 } i‡(!
	`°∫cmp
(
°r
, "mqtt", 4)) {

865 
£rv_íåy
->
öfo
.
ty≥
 = 
mqâ
;

866 
£rv_íåy
->
√t
->
mqâ
 = (
mqâöfo_s
*)
	`lgw_mÆloc
((mqttinfo_s));

867 
°º
 = 
	`js⁄_obje˘_gë_°rög
(
£rv_obj
, "uptopic");

868 i‡(
°º
 !
NULL
) {

869 
	`°∫˝y
(
£rv_íåy
->
√t
->
mqâ
->
u±›ic
, 
°º
, (serv_entry->net->mqtt->uptopic));

870 
£rv_íåy
->
√t
->
mqâ
->
u±›ic
[(serv_entry->net->mqtt->uptopic) - 1] = '\0';

871 
	`lgw_log
(
LOG_INFO
, "INFO: Foundá mqâ u±›i¯i†\"%s\"\n", 
°º
);

873 
	`°r˝y
(
£rv_íåy
->
√t
->
mqâ
->
u±›ic
, "test");

874 
	`lgw_log
(
LOG_WARNING
, "WARNING: Needá uptopic for mqttÖublish, setÅo default value \"test\"\n");

876 
°º
 = 
	`js⁄_obje˘_gë_°rög
(
£rv_obj
, "dntopic");

877 i‡(
°º
 !
NULL
) {

878 
	`°∫˝y
(
£rv_íåy
->
√t
->
mqâ
->
d¡›ic
, 
°º
, (serv_entry->net->mqtt->dntopic));

879 
£rv_íåy
->
√t
->
mqâ
->
d¡›ic
[(serv_entry->net->mqtt->dntopic) - 1] = '\0';

880 
	`lgw_log
(
LOG_INFO
, "INFO: Foundá mqâ d¡›i¯i†\"%s\"\n", 
°º
);

882 
	`°r˝y
(
£rv_íåy
->
√t
->
mqâ
->
d¡›ic
, "test");

883 
	`lgw_log
(
LOG_WARNING
, "WARNING: Needá dntopic for mqttÖublish, setÅo default value \"test\"\n");

885 } i‡(!
	`°∫cmp
(
°r
, "gwtraf", 6)) {

886 
£rv_íåy
->
öfo
.
ty≥
 = 
gwåaf
;

888 
£rv_íåy
->
öfo
.
ty≥
 = 
£mãch
;

890 
£rv_íåy
->
öfo
.
ty≥
 = 
£mãch
;

893 i‡(
£rv_íåy
->
öfo
.
ty≥
 =
£mãch
) {

895 
£rv_íåy
->
ªp‹t
 = (
ªp‹t_s
*)
	`lgw_mÆloc
((report_s));

896 
£rv_íåy
->
ªp‹t
->
ªp‹t_ªady
 = 
Ál£
;

897 
	`°r˝y
(
£rv_íåy
->
ªp‹t
->
°©_f‹m©
, "semtech");;

898 
£rv_íåy
->
ªp‹t
->
°©_öãrvÆ
 = 
DEFAULT_STAT_INTERVAL
;

899 
	`±hªad_muãx_öô
(&
£rv_íåy
->
ªp‹t
->
mx_ªp‹t
, 
NULL
);

902 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
£rv_obj
, "enabled");

903 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
)

904 
£rv_íåy
->
öfo
.
íabÀd
 = 
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

906 
£rv_íåy
->
öfo
.
íabÀd
 = 
åue
;

908 
°r
 = 
	`js⁄_obje˘_gë_°rög
(
£rv_obj
, "server_address");

909 i‡(
°r
 !
NULL
) {

910 
	`°∫˝y
(
£rv_íåy
->
√t
->
addr
, 
°r
,  serv_entry->net->addr);

911 
£rv_íåy
->
√t
->
addr
[ serv_entry->net->addr - 1] = '\0';

912 
	`lgw_log
(
LOG_INFO
, "INFO: Foundá sîvîÇamêi†\"%s\"\n", 
°r
);

914 
	`lgw_‰ì
(
£rv_íåy
->
√t
);

915 
	`lgw_‰ì
(
£rv_íåy
->
ªp‹t
);

916 
	`lgw_‰ì
(
£rv_íåy
);

919 
°r
 = 
	`js⁄_obje˘_gë_°rög
(
£rv_obj
, "serv_port_up");

920 i‡(
°r
 !
NULL
) {

921 
	`°∫˝y
(
£rv_íåy
->
√t
->
p‹t_up
, 
°r
,  serv_entry->net->port_up);

922 
£rv_íåy
->
√t
->
p‹t_up
[ serv_entry->net->port_up - 1] = '\0';

923 
	`lgw_log
(
LOG_INFO
, "INFO: [%s] Foundá sîv_p‹t_u∞i†\"%s\"\n", 
£rv_íåy
->
öfo
.
«me
, sîv_íåy->
√t
->
p‹t_up
);

925 
	`°r˝y
(
£rv_íåy
->
√t
->
p‹t_up
, "1700");

926 
	`lgw_log
(
LOG_INFO
, "INFO: [%s] Së sîv_p‹t_u∞tÿ\"%s\"\n", 
£rv_íåy
->
öfo
.
«me
, sîv_íåy->
√t
->
p‹t_up
);

929 
°r
 = 
	`js⁄_obje˘_gë_°rög
(
£rv_obj
, "serv_port_down");

930 i‡(
°r
 !
NULL
) {

931 
	`°∫˝y
(
£rv_íåy
->
√t
->
p‹t_down
, 
°r
,  serv_entry->net->port_down);

932 
£rv_íåy
->
√t
->
p‹t_down
[ serv_entry->net->port_down - 1] = '\0';

933 
	`lgw_log
(
LOG_INFO
, "INFO: Foundá sîv_p‹t_dow¿\"%s\"\n", 
£rv_íåy
->
√t
->
p‹t_down
);

935 
	`°r˝y
(
£rv_íåy
->
√t
->
p‹t_down
, "1700");

936 
	`lgw_log
(
LOG_INFO
, "INFO: [%s] Së sîv_p‹t_dow¿tÿ\"%s\"\n", 
£rv_íåy
->
öfo
.
«me
, sîv_íåy->
√t
->
p‹t_down
);

939 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
£rv_obj
, "push_timeout_ms");

940 i‡(
vÆ
 !
NULL
) {

941 
£rv_íåy
->
√t
->
push_timeout_hÆf
.
tv_u£c
 = 500 * ()
	`js⁄_vÆue_gë_numbî
(
vÆ
);

944 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
£rv_obj
, "pull_timeout_ms");

945 i‡(
vÆ
 !
NULL
) {

946 
£rv_íåy
->
√t
->
puŒ_timeout
.
tv_u£c
 = 1000 * ()
	`js⁄_vÆue_gë_numbî
(
vÆ
);

949 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
£rv_obj
, "pull_interval");

950 i‡(
vÆ
 !
NULL
) {

951 
£rv_íåy
->
√t
->
puŒ_öãrvÆ
 = ()
	`js⁄_vÆue_gë_numbî
(
vÆ
);

954 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
£rv_obj
, "stat_interval");

955 i‡(
vÆ
 !
NULL
) {

956 
£rv_íåy
->
ªp‹t
->
°©_öãrvÆ
 = ()
	`js⁄_vÆue_gë_numbî
(
vÆ
);

957 
	`lgw_log
(
LOG_INFO
, "INFO: Foundá sèt_öãrvÆ i†\"%d\"\n", 
£rv_íåy
->
ªp‹t
->
°©_öãrvÆ
);

960 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
£rv_obj
, "forward_crc_valid");

961 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

962 
£rv_íåy
->
fûãr
.
fwd_vÆid_pkt
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

964 
	`lgw_log
(
LOG_INFO
, "INFO:Öackë†ª˚ived wôhá vÆid CRC wûl%†bêf‹w¨ded\n", (
£rv_íåy
->
fûãr
.
fwd_vÆid_pkt
 ? "" : " NOT"));

965 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
£rv_obj
, "forward_crc_error");

966 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

967 
£rv_íåy
->
fûãr
.
fwd_îr‹_pkt
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

969 
	`lgw_log
(
LOG_INFO
, "INFO:Öackë†ª˚ived wôhá CRCÉº‹ wûl%†bêf‹w¨ded\n", (
£rv_íåy
->
fûãr
.
fwd_îr‹_pkt
 ? "" : " NOT"));

970 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
£rv_obj
, "forward_crc_disabled");

971 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

972 
£rv_íåy
->
fûãr
.
fwd_no¸c_pkt
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

974 
	`lgw_log
(
LOG_INFO
, "INFO:Öackë†ª˚ived wôháÇÿCRC wûl%†bêf‹w¨ded\n", (
£rv_íåy
->
fûãr
.
fwd_no¸c_pkt
 ? "" : " NOT"));

975 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
£rv_obj
, "filter_fport");

976 i‡(
vÆ
 !
NULL
) {

977 
£rv_íåy
->
fûãr
.
Â‹t
 = (
uöt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

980 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
£rv_obj
, "filter_devaddr");

981 i‡(
vÆ
 !
NULL
) {

982 
£rv_íåy
->
fûãr
.
devaddr
 = (
uöt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

985 
	`LGW_LIST_INSERT_TAIL
(&
GW
.
£rv_li°
, 
£rv_íåy
, 
li°
);

988 
	`lgw_log
(
LOG_WARNING
, "WARNING~ [GWCFG] None service offer.\n");

991 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

993 
	}
}

995 
	$∑r£_debug_c⁄figuøti⁄
(c⁄° * 
c⁄f_fûe
) {

996 
i
;

997 c⁄° 
c⁄f_obj_«me
[] = "debug_conf";

998 
JSON_VÆue
 *
roŸ_vÆ
;

999 
JSON_Obje˘
 *
c⁄f_obj
 = 
NULL
;

1000 
JSON_Aºay
 *
c⁄f_¨øy
 = 
NULL
;

1001 
JSON_Obje˘
 *
c⁄f_obj_¨øy
 = 
NULL
;

1002 c⁄° *
°r
;

1004 
lgw_c⁄f_debug_s
 
debugc⁄f
;

1007 
	`mem£t
(&
debugc⁄f
, 0,  debugconf);

1010 
roŸ_vÆ
 = 
	`js⁄_∑r£_fûe_wôh_commíts
(
c⁄f_fûe
);

1011 i‡(
roŸ_vÆ
 =
NULL
) {

1012 
	`lgw_log
(
LOG_INFO
, "ERROR: %†i†nŸá vÆid JSON fûe\n", 
c⁄f_fûe
);

1017 
c⁄f_obj
 = 
	`js⁄_obje˘_gë_obje˘
(
	`js⁄_vÆue_gë_obje˘
(
roŸ_vÆ
), 
c⁄f_obj_«me
);

1018 i‡(
c⁄f_obj
 =
NULL
) {

1019 
	`lgw_log
(
LOG_INFO
, "INFO: %†d€†nŸ c⁄èöá JSON obje˘Çamed %s\n", 
c⁄f_fûe
, 
c⁄f_obj_«me
);

1020 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

1023 
	`lgw_log
(
LOG_INFO
, "INFO: %†d€†c⁄èöá JSON obje˘Çamed %s,Ö¨sög debugÖ¨amëîs\n", 
c⁄f_fûe
, 
c⁄f_obj_«me
);

1027 
c⁄f_¨øy
 = 
	`js⁄_obje˘_gë_¨øy
 (
c⁄f_obj
, "ref_payload");

1028 i‡(
c⁄f_¨øy
 !
NULL
) {

1029 
debugc⁄f
.
nb_ªf_∑ylﬂd
 = 
	`js⁄_¨øy_gë_cou¡
(
c⁄f_¨øy
);

1030 
	`lgw_log
(
LOG_INFO
, "INFO: gŸ %u debugÑe„ªn˚Öaylﬂd\n", 
debugc⁄f
.
nb_ªf_∑ylﬂd
);

1032 
i
 = 0; i < ()
debugc⁄f
.
nb_ªf_∑ylﬂd
; i++) {

1033 
c⁄f_obj_¨øy
 = 
	`js⁄_¨øy_gë_obje˘
(
c⁄f_¨øy
, 
i
);

1035 
°r
 = 
	`js⁄_obje˘_gë_°rög
(
c⁄f_obj_¨øy
, "id");

1036 i‡(
°r
 !
NULL
) {

1037 
	`ssˇnf
(
°r
, "0x%08X", &(
debugc⁄f
.
ªf_∑ylﬂd
[
i
].
id
));

1038 
	`lgw_log
(
LOG_INFO
, "INFO:Ñe„ªn˚Öaylﬂd ID %d i†0x%08X\n", 
i
, 
debugc⁄f
.
ªf_∑ylﬂd
[i].
id
);

1042 
GW
.
log
.
nb_pkt_ª˚ived_ªf
[
i
] = 0;

1047 
°r
 = 
	`js⁄_obje˘_gë_°rög
(
c⁄f_obj
, "log_file");

1048 i‡(
°r
 !
NULL
) {

1049 
	`°∫˝y
(
debugc⁄f
.
log_fûe_«me
, 
°r
,  debugconf.log_file_name);

1050 
debugc⁄f
.
log_fûe_«me
[ debugconf.log_file_name - 1] = '\0';

1051 
	`lgw_log
(
LOG_INFO
, "INFO: sëtög debugÜog fûê«mêtÿ%s\n", 
debugc⁄f
.
log_fûe_«me
);

1055 i‡(
HAL
.
	`lgw_debug_£tc⁄f
(&
debugc⁄f
Ë!
LGW_HAL_SUCCESS
) {

1056 
	`lgw_log
(
LOG_INFO
, "ERROR: FailedÅo configure debug\n");

1057 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

1062 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

1064 
	}
}

1066 
	$∑r£cfg
() {

1067 
ªt
 = 0;

1068 i‡(!
	`°∫cmp
(
GW
.
hÆ
.
bﬂrd
, "LG301", 5)) {

1069 
ªt
 = 
	`∑r£_SX130x_c⁄figuøti⁄
(
GW
.
hÆ
.
c⁄fs
.
sxcfg
);

1070 } i‡(!
	`°∫cmp
(
GW
.
hÆ
.
bﬂrd
, "LG302", 5)) {

1071 
ªt
 = 
	`∑r£_SX130x_c⁄figuøti⁄
(
GW
.
hÆ
.
c⁄fs
.
sxcfg
);

1072 
ªt
 |
	`∑r£_debug_c⁄figuøti⁄
(
GW
.
hÆ
.
c⁄fs
.
gwcfg
);

1078 
ªt
 = 
	`∑r£_SX130x_c⁄figuøti⁄
(
GW
.
hÆ
.
c⁄fs
.
sxcfg
);

1079 
ªt
 |
	`∑r£_g©eway_c⁄figuøti⁄
(
GW
.
hÆ
.
c⁄fs
.
gwcfg
);

1080  
ªt
;

1081 
	}
}

	@fwd/src/gwtraf_serv.c

28 
	~<uni°d.h
>

29 
	~<°rög.h
>

30 
	~<£m≠h‹e.h
>

31 
	~<time.h
>

33 
	~<sys/ty≥s.h
>

34 
	~<sys/sockë.h
>

36 
	~"fwd.h
"

37 
	~"£rvi˚.h
"

38 
	~"gwåaf_£rvi˚.h
"

40 
	~"l‹agw_hÆ.h
"

41 
	~"l‹agw_aux.h
"

43 
	gDECLARE_GW
;

45 
gwåaf_push_up
(* 
¨g
);

47 
	$gwåaf_°¨t
(
£rv_s
* 
£rv
) {

48 
£rv
->
√t
->
sock_up
 = 
	`öô_sock
((*)&£rv->√t->
addr
, (*)&£rv->√t->
p‹t_up
, (*)&£rv->√t->
push_timeout_hÆf
, (
timevÆ
));

49 i‡(
	`lgw_±hªad_¸óã_background
(&
£rv
->
thªad
.
t_up
, 
NULL
, (*(*)(*))
gwåaf_push_up
, serv)) {

50 
	`lgw_log
(
LOG_WARNING
, "WARNING~ [%s] C™'à¸óãÖush u∞±hªad.\n", 
£rv
->
öfo
.
«me
);

53 
£rv
->
°©e
.
live
 = 
åue
;

54 
£rv
->
°©e
.
°Æl_time
 = 0;

57 
	}
}

59 
	$gwåaf_°›
(
£rv_s
* 
£rv
) {

60 
	`£m_po°
(&
£rv
->
thªad
.
£ma
);

61 
£rv
->
thªad
.
°›_sig
 = 
åue
;

62 
	`±hªad_joö
(
£rv
->
thªad
.
t_up
, 
NULL
);

63 
£rv
->
°©e
.
live
 = 
Ál£
;

64 
£rv
->
√t
->
sock_up
 = -1;

65 
£rv
->
√t
->
sock_down
 = -1;

66 
	}
}

68 
	$gwåaf_push_up
(* 
¨g
) {

69 
£rv_s
* 
£rv
 = (£rv_s*Ë
¨g
;

70 
i
, 
j
;

71 
°π
, 
ªåy
;

72 
nb_pkt
 = 0;

74 
lgw_pkt_rx_s
 *
p
;

76 
rxpkts_s
* 
rxpkt_íåy
 = 
NULL
;

79 
boﬁ
 
ªf_ok
 = 
Ál£
;

80 
åef
 
loˇl_ªf
;

83 
uöt8_t
 
buff_up
[
TX_BUFF_SIZE
];

84 
buff_ödex
;

87 
time•ec
 
pkt_utc_time
;

88 
tm
 *
x
;

91 
iso_time°amp
[24];

92 
time_t
 
sy°em_time
;

94 
uöt32_t
 
mŸe_addr
 = 0;

95 
uöt16_t
 
mŸe_f˙t
 = 0;

96 
uöt8_t
 
mŸe_Â‹t
 = 0;

98 !
£rv
->
thªad
.
°›_sig
) {

100 
	`£m_waô
(&
£rv
->
thªad
.
£ma
);

102 
nb_pkt
 = 
	`gë_rxpkt
(
£rv
);

103 i‡(
nb_pkt
 == 0)

106 
	`lgw_log
(
LOG_DEBUG
, "DEBUG~ [%s] gwåaf_push_u∞„tch %dÖachages.\n", 
£rv
->
öfo
.
«me
, 
nb_pkt
);

110 i‡(
GW
.
gps
.
gps_íabÀd
 =
åue
) {

111 
	`±hªad_muãx_lock
(&
GW
.
gps
.
mx_timîef
);

112 
ªf_ok
 = 
GW
.
gps
.
gps_ªf_vÆid
;

113 
loˇl_ªf
 = 
GW
.
gps
.
time_ª„ªn˚_gps
;

114 
	`±hªad_muãx_u∆ock
(&
GW
.
gps
.
mx_timîef
);

116 
ªf_ok
 = 
Ál£
;

120 
buff_ödex
 = 0;

123 
sy°em_time
 = 
	`time
(
NULL
);

124 
	`°r·ime
(
iso_time°amp
,  iso_time°amp, "%FT%TZ", 
	`gmtime
(&
sy°em_time
));

125 
j
 = 
	`¢¥ötf
((*)(
buff_up
 + 
buff_ödex
), 
TX_BUFF_SIZE
 - buff_index,

127 ()
GW
.
öfo
.
lgwm
, 
iso_time°amp
);

128 i‡(
j
 > 0) {

129 
buff_ödex
 +
j
;

134 
°π
 = 
buff_ödex
;

137 
i
 = 0; i < 
nb_pkt
; i++) {

138 
p
 = &
£rv
->
rxpkt
[
i
];

140 
buff_ödex
 = 
°π
;

143 
p
->
°©us
) {

144 
STAT_CRC_OK
:

145 i‡(!
£rv
->
fûãr
.
fwd_vÆid_pkt
) {

149 
STAT_CRC_BAD
:

150 i‡(!
£rv
->
fûãr
.
fwd_îr‹_pkt
) {

154 
STAT_NO_CRC
:

155 i‡(!
£rv
->
fûãr
.
fwd_no¸c_pkt
) {

163 i‡(
p
->
size
 >= 8) {

164 
mŸe_addr
 = 
p
->
∑ylﬂd
[1];

165 
mŸe_addr
 |
p
->
∑ylﬂd
[2] << 8;

166 
mŸe_addr
 |
p
->
∑ylﬂd
[3] << 16;

167 
mŸe_addr
 |
p
->
∑ylﬂd
[4] << 24;

168 
mŸe_f˙t
 = 
p
->
∑ylﬂd
[6];

169 
mŸe_f˙t
 |
p
->
∑ylﬂd
[7] << 8;

170 
mŸe_Â‹t
 = 
p
->
∑ylﬂd
[8];

172 
mŸe_addr
 = 0;

173 
mŸe_f˙t
 = 0;

174 
mŸe_Â‹t
 = 0;

177 i‡(
mŸe_addr
 !0 && 
mŸe_Â‹t
 != 0) {

178 i‡(
	`pkt_basic_fûãr
(
£rv
, 
mŸe_addr
, 
mŸe_Â‹t
)) {

179 
	`lgw_log
(
LOG_INFO
, "INFO~ [%s-up] Dr›áÖackë.\n", 
£rv
->
öfo
.
«me
);

185 
j
 = 
	`¢¥ötf
((*)(
buff_up
 + 
buff_ödex
), 
TX_BUFF_SIZE
 - buff_ödex, "\"tm°\":%u", 
p
->
cou¡_us
);

186 i‡(
j
 > 0) {

187 
buff_ödex
 +
j
;

189 
	`lgw_log
(
LOG_ERROR
, "ERROR: [%s-up] faûedÅÿadd fõld \"tm°\"Åÿthêå™smissi⁄ buf„r.\n", 
£rv
->
öfo
.
«me
);

195 i‡(
ªf_ok
 =
åue
) {

197 
j
 = 
	`lgw_˙t2utc
(
loˇl_ªf
, 
p
->
cou¡_us
, &
pkt_utc_time
);

198 i‡(
j
 =
LGW_GPS_SUCCESS
) {

200 
x
 = 
	`gmtime
(&(
pkt_utc_time
.
tv_£c
));

201 
j
 = 
	`¢¥ötf
((*)(
buff_up
 + 
buff_ödex
), 
TX_BUFF_SIZE
 - buff_ödex, ",\"time\":\"%04i-%02i-%02iT%02i:%02i:%02i.%06liZ\"", (
x
->
tm_yór
Ë+ 1900, (x->
tm_m⁄
Ë+ 1, x->
tm_mday
, x->
tm_hour
, x->
tm_mö
, x->
tm_£c
, (
pkt_utc_time
.
tv_n£c
) / 1000);

202 i‡(
j
 > 0) {

203 
buff_ödex
 +
j
;

205 
	`lgw_log
(
LOG_ERROR
, "ERROR: [%s-up] faûedÅÿadd fõld \"time\"Åÿthêå™smissi⁄ buf„r.\n", 
£rv
->
öfo
.
«me
);

213 
j
 = 
	`¢¥ötf
((*)(
buff_up
 + 
buff_ödex
), 
TX_BUFF_SIZE
 - buff_index,

215 
p
->
if_chaö
,Ö->
rf_chaö
, ((Ì->
‰eq_hz
 / 1e6));

216 i‡(
j
 > 0) {

217 
buff_ödex
 +
j
;

223 
p
->
°©us
) {

224 
STAT_CRC_OK
:

225 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"stat\":1", 9);

226 
buff_ödex
 += 9;

228 
STAT_CRC_BAD
:

229 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"stat\":-1", 10);

230 
buff_ödex
 += 10;

232 
STAT_NO_CRC
:

233 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"stat\":0", 9);

234 
buff_ödex
 += 9;

241 i‡(
p
->
moduœti⁄
 =
MOD_LORA
) {

242 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"modu\":\"LORA\"", 14);

243 
buff_ödex
 += 14;

246 
p
->
d©¨©e
) {

247 
DR_LORA_SF7
:

248 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"datr\":\"SF7", 12);

249 
buff_ödex
 += 12;

251 
DR_LORA_SF8
:

252 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"datr\":\"SF8", 12);

253 
buff_ödex
 += 12;

255 
DR_LORA_SF9
:

256 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"datr\":\"SF9", 12);

257 
buff_ödex
 += 12;

259 
DR_LORA_SF10
:

260 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"datr\":\"SF10", 13);

261 
buff_ödex
 += 13;

263 
DR_LORA_SF11
:

264 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"datr\":\"SF11", 13);

265 
buff_ödex
 += 13;

267 
DR_LORA_SF12
:

268 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"datr\":\"SF12", 13);

269 
buff_ödex
 += 13;

274 
p
->
b™dwidth
) {

275 
BW_125KHZ
:

276 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)"BW125\"", 6);

277 
buff_ödex
 += 6;

279 
BW_250KHZ
:

280 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)"BW250\"", 6);

281 
buff_ödex
 += 6;

283 
BW_500KHZ
:

284 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)"BW500\"", 6);

285 
buff_ödex
 += 6;

292 
p
->
codî©e
) {

293 
CR_LORA_4_5
:

294 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"codr\":\"4/5\"", 13);

295 
buff_ödex
 += 13;

297 
CR_LORA_4_6
:

298 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"codr\":\"4/6\"", 13);

299 
buff_ödex
 += 13;

301 
CR_LORA_4_7
:

302 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"codr\":\"4/7\"", 13);

303 
buff_ödex
 += 13;

305 
CR_LORA_4_8
:

306 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"codr\":\"4/8\"", 13);

307 
buff_ödex
 += 13;

310 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"codr\":\"OFF\"", 13);

311 
buff_ödex
 += 13;

318 
j
 = 
	`¢¥ötf
((*)(
buff_up
 + 
buff_ödex
), 
TX_BUFF_SIZE
 - buff_ödex, ",\"l¢r\":%.1f", 
p
->
¢r
);

319 i‡(
j
 > 0) {

320 
buff_ödex
 +
j
;

324 } i‡(
p
->
moduœti⁄
 =
MOD_FSK
) {

325 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"modu\":\"FSK\"", 13);

326 
buff_ödex
 += 13;

329 
j
 = 
	`¢¥ötf
((*)(
buff_up
 + 
buff_ödex
), 
TX_BUFF_SIZE
 - buff_ödex, ",\"d©r\":%u", 
p
->
d©¨©e
);

330 i‡(
j
 > 0) {

331 
buff_ödex
 +
j
;

340 
j
 = 
	`¢¥ötf
((*)(
buff_up
 + 
buff_ödex
), 
TX_BUFF_SIZE
 - buff_ödex, ",\"rssi\":%.0f,\"size\":%u", 
p
->
rssis
,Ö->
size
);

341 i‡(
j
 > 0) {

342 
buff_ödex
 +
j
;

347 
j
 = 
	`¢¥ötf
((*)(
buff_up
 + 
buff_ödex
), 
TX_BUFF_SIZE
 - buff_ödex, ",\"mŸe\":\"%08X\",\"f˙t\":%u", 
mŸe_addr
, 
mŸe_f˙t
);

348 i‡(
j
 > 0) {

349 
buff_ödex
 +
j
;

355 
buff_up
[
buff_ödex
] = '}';

356 ++
buff_ödex
;

359 
buff_up
[
buff_ödex
] = 0;

361 
	`lgw_log
(
LOG_INFO
, "\n[%s] gwåa‡up: %s\n", 
£rv
->
öfo
.
«me
, (*)(
buff_up
 + 12));

362 
ªåy
 = 0;

363 
£rv
->
√t
->
sock_up
 == -1) {

364 
£rv
->
√t
->
sock_up
 = 
	`öô_sock
((*)&£rv->√t->
addr
, (*)&£rv->√t->
p‹t_up
, (*)&£rv->√t->
push_timeout_hÆf
, (
timevÆ
));

365 i‡(
£rv
->
√t
->
sock_up
 =-1 && 
ªåy
 < 
DEFAULT_TRY_TIMES
) {

366 
	`lgw_log
(
LOG_WARNING
, "WARNING~ [%s-up] makêsockë inôÉº‹,Åryágaö!\n", 
£rv
->
öfo
.
«me
);

367 
	`waô_ms
(
DEFAULT_FETCH_SLEEP_MS
);

368 
ªåy
++;

374 i‡(
£rv
->
√t
->
sock_up
 == -1)

378 
	`£nd
(
£rv
->
√t
->
sock_up
, (*)
buff_up
, 
buff_ödex
, 0);

382 
	}
}

	@fwd/src/jitqueue.c

19 
	~<°dlib.h
>

20 
	~<°dio.h
>

21 
	~<°rög.h
>

22 
	~<±hªad.h
>

23 
	~<as£π.h
>

24 
	~<m©h.h
>

25 
	~<sys/time.h
>

27 
	~"loggî.h
"

28 
	~"jôqueue.h
"

35 
	#TX_START_DELAY
 1500

	)

37 
	#TX_MARGIN_DELAY
 1000

	)

39 
	#TX_JIT_DELAY
 30000

	)

40 
	#TX_MAX_ADVANCE_DELAY
 ((
JIT_NUM_BEACON_IN_QUEUE
 + 1Ë* 128 * 1E6Ë

	)

42 
	#BEACON_GUARD
 3000000

	)

44 
	#BEACON_RESERVED
 2120000

	)

48 
±hªad_muãx_t
 
	gmx_jô_queue
 = 
PTHREAD_MUTEX_INITIALIZER
;

53 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

54 
	$qs‹t_r
(*
ba£
, 
size_t
 
√l
, size_à
width
, 
__com∑r_d_‚_t
 
comp
, *
¨g
) {

55 
size_t
 
wg≠
, 
i
, 
j
, 
k
;

56 
tmp
;

58 i‡((
√l
 > 1Ë&& (
width
 > 0)) {

59 
	`as£π
(
√l
 <((
size_t
Ë(-1)Ë/ 
width
);

60 
wg≠
 = 0;

62 
wg≠
 = 3 * wgap + 1;

63 } 
wg≠
 < (
√l
 - 1) / 3);

66 
wg≠
 *
width
;

67 
√l
 *
width
;

69 
i
 = 
wg≠
;

71 
j
 = 
i
;

73 *
a
;

74 *
b
;

76 
j
 -
wg≠
;

77 
a
 = 
j
 + ((*)
ba£
);

78 
b
 = 
a
 + 
wg≠
;

79 i‡((*
comp
Ë(
a
, 
b
, 
¨g
) <= 0) {

82 
k
 = 
width
;

84 
tmp
 = *
a
;

85 *
a
++ = *
b
;

86 *
b
++ = 
tmp
;

87 } --
k
);

88 } 
j
 >
wg≠
);

89 
i
 +
width
;

90 } 
i
 < 
√l
);

91 
wg≠
 = (wg≠ - 
width
) / 3;

92 } 
wg≠
);

94 
	}
}

99 
boﬁ
 
	$jô_queue_is_fuŒ
(
jô_queue_s
 *
queue
) {

100 
boﬁ
 
ªsu…
;

102 
	`±hªad_muãx_lock
(&
mx_jô_queue
);

104 
ªsu…
 = (
queue
->
num_pkt
 =
JIT_QUEUE_MAX
)?
åue
:
Ál£
;

106 
	`±hªad_muãx_u∆ock
(&
mx_jô_queue
);

108  
ªsu…
;

109 
	}
}

111 
boﬁ
 
	$jô_queue_is_em±y
(
jô_queue_s
 *
queue
) {

112 
boﬁ
 
ªsu…
;

114 
	`±hªad_muãx_lock
(&
mx_jô_queue
);

116 
ªsu…
 = (
queue
->
num_pkt
 =0)?
åue
:
Ál£
;

118 
	`±hªad_muãx_u∆ock
(&
mx_jô_queue
);

120  
ªsu…
;

121 
	}
}

123 
	$jô_queue_öô
(
jô_queue_s
 *
queue
) {

124 
i
;

126 
	`±hªad_muãx_lock
(&
mx_jô_queue
);

128 
	`mem£t
(
queue
, 0, (*queue));

129 
i
=0; i<
JIT_QUEUE_MAX
; i++) {

130 
queue
->
nodes
[
i
].
¥e_dñay
 = 0;

131 
queue
->
nodes
[
i
].
po°_dñay
 = 0;

134 
	`±hªad_muãx_u∆ock
(&
mx_jô_queue
);

135 
	}
}

137 
	$com∑ª
(c⁄° *
a
, c⁄° *
b
, *
¨g
)

139 
jô_node_s
 *
p
 = (jô_node_†*)
a
;

140 
jô_node_s
 *
q
 = (jô_node_†*)
b
;

141 *
cou¡î
 = (*)
¨g
;

142 
p_cou¡
, 
q_cou¡
;

144 
p_cou¡
 = 
p
->
pkt
.
cou¡_us
;

145 
q_cou¡
 = 
q
->
pkt
.
cou¡_us
;

147 i‡(
p_cou¡
 > 
q_cou¡
)

148 *
cou¡î
 = *counter + 1;

150  
p_cou¡
 - 
q_cou¡
;

151 
	}
}

153 
	$jô_s‹t_queue
(
jô_queue_s
 *
queue
) {

154 
cou¡î
 = 0;

156 i‡(
queue
->
num_pkt
 == 0) {

160 
	`lgw_log
(
LOG_JIT
, "s‹tög queuêöás˚ndög ordîÖackëÅime°am∞- queuêsize:%u\n", 
queue
->
num_pkt
);

161 
	`qs‹t_r
(
queue
->
nodes
, queue->
num_pkt
, (queue->nodes[0]), 
com∑ª
, &
cou¡î
);

162 
	`lgw_log
(
LOG_JIT
, "s‹tög queuêd⁄ê- sw≠≥d:%d\n", 
cou¡î
);

163 
	}
}

165 
boﬁ
 
	$jô_cﬁlisi⁄_ã°
(
uöt32_t
 
p1_cou¡_us
, uöt32_à
p1_¥e_dñay
, uöt32_à
p1_po°_dñay
, uöt32_à
p2_cou¡_us
, uöt32_à
p2_¥e_dñay
, uöt32_à
p2_po°_dñay
) {

166 i‡(((
p1_cou¡_us
 - 
p2_cou¡_us
Ë<(
p1_¥e_dñay
 + 
p2_po°_dñay
 + 
TX_MARGIN_DELAY
)) ||

167 ((
p2_cou¡_us
 - 
p1_cou¡_us
Ë<(
p2_¥e_dñay
 + 
p1_po°_dñay
 + 
TX_MARGIN_DELAY
))) {

168  
åue
;

170  
Ál£
;

172 
	}
}

174 
jô_îr‹_e
 
	$jô_íqueue
(
jô_queue_s
 *
queue
, 
uöt32_t
 
time_us
, 
lgw_pkt_tx_s
 *
∑ckë
, 
jô_pkt_ty≥_e
 
pkt_ty≥
) {

175 
i
 = 0;

176 
uöt32_t
 
∑ckë_po°_dñay
 = 0;

177 
uöt32_t
 
∑ckë_¥e_dñay
 = 0;

178 
uöt32_t
 
èrgë_¥e_dñay
 = 0;

179 
jô_îr‹_e
 
îr_cﬁlisi⁄
;

180 
uöt32_t
 
aßp_cou¡_us
;

182 
	`lgw_log
(
LOG_JIT
, "Cuºíàc⁄˚¡øt‹Åimêi†%u,Ökt_ty≥=%d\n", 
time_us
, 
pkt_ty≥
);

184 i‡(
∑ckë
 =
NULL
) {

185 
	`lgw_log
(
LOG_JIT_ERROR
, "ERROR: invalidÖarameter\n");

186  
JIT_ERROR_INVALID
;

189 i‡(
	`jô_queue_is_fuŒ
(
queue
)) {

190 
	`lgw_log
(
LOG_JIT_ERROR
, "ERROR: cannotÉnqueueÖacket, JIT queue is full\n");

191  
JIT_ERROR_FULL
;

195 
pkt_ty≥
) {

196 
JIT_PKT_TYPE_DOWNLINK_CLASS_A
:

197 
JIT_PKT_TYPE_DOWNLINK_CLASS_B
:

198 
JIT_PKT_TYPE_DOWNLINK_CLASS_C
:

199 
∑ckë_¥e_dñay
 = 
TX_START_DELAY
 + 
TX_JIT_DELAY
;

200 
∑ckë_po°_dñay
 = 
	`lgw_time_⁄_aú
(
∑ckë
) * 1000UL;

202 
JIT_PKT_TYPE_BEACON
:

204 
∑ckë_¥e_dñay
 = 
TX_START_DELAY
 + 
BEACON_GUARD
 + 
TX_JIT_DELAY
;

205 
∑ckë_po°_dñay
 = 
BEACON_RESERVED
;

211 
	`±hªad_muãx_lock
(&
mx_jô_queue
);

215 i‡(
pkt_ty≥
 =
JIT_PKT_TYPE_DOWNLINK_CLASS_C
) {

217 
∑ckë
->
tx_mode
 = 
TIMESTAMPED
;

220 
aßp_cou¡_us
 = 
time_us
 + 1E6;

221 i‡(
queue
->
num_pkt
 == 0) {

223 
	`lgw_log
(
LOG_JIT
, "DEBUG: in£π IMMEDIATE dow∆ök, fú° i¿JiT queuê(cou¡_us=%u)\n", 
aßp_cou¡_us
);

232 
i
=0; i<
queue
->
num_pkt
; i++) {

233 i‡(
	`jô_cﬁlisi⁄_ã°
(
aßp_cou¡_us
, 
∑ckë_¥e_dñay
, 
∑ckë_po°_dñay
, 
queue
->
nodes
[
i
].
pkt
.
cou¡_us
, queue->nodes[i].
¥e_dñay
, queue->nodes[i].
po°_dñay
Ë=
åue
) {

234 
	`lgw_log
(
LOG_JIT
, "DEBUG: c™nŸ in£π IMMEDIATE dow∆ökáàcou¡_us=%u, cﬁlide†wôh %u (ödex=%d)\n", 
aßp_cou¡_us
, 
queue
->
nodes
[
i
].
pkt
.
cou¡_us
, i);

238 i‡(
i
 =
queue
->
num_pkt
) {

240 
	`lgw_log
(
LOG_JIT
, "DEBUG: in£π IMMEDIATE dow∆ök ASAPáà%u (nÿcﬁlisi⁄)\n", 
aßp_cou¡_us
);

243 
i
=0; i<
queue
->
num_pkt
; i++) {

244 
aßp_cou¡_us
 = 
queue
->
nodes
[
i
].
pkt
.
cou¡_us
 + queue->nodes[i].
po°_dñay
 + 
∑ckë_¥e_dñay
 + 
TX_JIT_DELAY
 + 
TX_MARGIN_DELAY
;

245 i‡(
i
 =(
queue
->
num_pkt
 - 1)) {

247 
	`lgw_log
(
LOG_JIT
, "DEBUG: in£π IMMEDIATE dow∆ök,Üa° i¿JiT queuê(cou¡_us=%u)\n", 
aßp_cou¡_us
);

250 
	`lgw_log
(
LOG_JIT
, "DEBUG:ÅryÅÿö£π IMMEDIATE dow∆ök (cou¡_us=%uËbëwì¿ödex %dánd index %d?\n", 
aßp_cou¡_us
, 
i
, i+1);

251 i‡(
	`jô_cﬁlisi⁄_ã°
(
aßp_cou¡_us
, 
∑ckë_¥e_dñay
, 
∑ckë_po°_dñay
, 
queue
->
nodes
[
i
+1].
pkt
.
cou¡_us
, queue->nodes[i+1].
¥e_dñay
, queue->nodes[i+1].
po°_dñay
Ë=
åue
) {

252 
	`lgw_log
(
LOG_JIT
, "DEBUG: faûedÅÿö£π IMMEDIATE dow∆ök (cou¡_us=%u), c⁄töue...\n", 
aßp_cou¡_us
);

255 
	`lgw_log
(
LOG_JIT
, "DEBUG: in£π IMMEDIATE dow∆ök (cou¡_us=%u)\n", 
aßp_cou¡_us
);

263 
∑ckë
->
cou¡_us
 = 
aßp_cou¡_us
;

274 i‡((
∑ckë
->
cou¡_us
 - 
time_us
Ë<(
TX_START_DELAY
 + 
TX_MARGIN_DELAY
 + 
TX_JIT_DELAY
)) {

275 
	`lgw_log
(
LOG_JIT_ERROR
, "ERROR: Packë REJECTED,áÃódyÅoÿœãÅÿ£nd ià(cuºít=%u,Öackë=%u,Åy≥=%d)\n", 
time_us
, 
∑ckë
->
cou¡_us
, 
pkt_ty≥
);

276 
	`±hªad_muãx_u∆ock
(&
mx_jô_queue
);

277  
JIT_ERROR_TOO_LATE
;

291 i‡((
pkt_ty≥
 =
JIT_PKT_TYPE_DOWNLINK_CLASS_A
Ë|| (pkt_ty≥ =
JIT_PKT_TYPE_DOWNLINK_CLASS_B
)) {

292 i‡((
∑ckë
->
cou¡_us
 - 
time_us
Ë> 
TX_MAX_ADVANCE_DELAY
) {

293 
	`lgw_log
(
LOG_JIT_ERROR
, "ERROR: Packë REJECTED,Åime°am∞£em†wr⁄g,Åoÿmuch i¿adv™˚ (cuºít=%u,Öackë=%u,Åy≥=%d)\n", 
time_us
, 
∑ckë
->
cou¡_us
, 
pkt_ty≥
);

294 
	`±hªad_muãx_u∆ock
(&
mx_jô_queue
);

295  
JIT_ERROR_TOO_EARLY
;

304 
i
=0; i<
queue
->
num_pkt
; i++) {

306 i‡(((
pkt_ty≥
 =
JIT_PKT_TYPE_DOWNLINK_CLASS_A
Ë|| (pkt_ty≥ =
JIT_PKT_TYPE_DOWNLINK_CLASS_C
)Ë&& (
queue
->
nodes
[
i
].pkt_ty≥ =
JIT_PKT_TYPE_BEACON
)) {

307 
èrgë_¥e_dñay
 = 
TX_START_DELAY
;

309 
èrgë_¥e_dñay
 = 
queue
->
nodes
[
i
].
¥e_dñay
;

317 i‡(
	`jô_cﬁlisi⁄_ã°
(
∑ckë
->
cou¡_us
, 
∑ckë_¥e_dñay
, 
∑ckë_po°_dñay
, 
queue
->
nodes
[
i
].
pkt
.cou¡_us, 
èrgë_¥e_dñay
, queue->nodes[i].
po°_dñay
Ë=
åue
) {

318 
queue
->
nodes
[
i
].
pkt_ty≥
) {

319 
JIT_PKT_TYPE_DOWNLINK_CLASS_A
:

320 
JIT_PKT_TYPE_DOWNLINK_CLASS_B
:

321 
JIT_PKT_TYPE_DOWNLINK_CLASS_C
:

322 
	`lgw_log
(
LOG_JIT_ERROR
, "ERROR: Packë (ty≥=%dËREJECTED, cﬁlisi⁄ wôhÖackëáÃódyÖrogømmedáà%u (%u)\n", 
pkt_ty≥
, 
queue
->
nodes
[
i
].
pkt
.
cou¡_us
, 
∑ckë
->count_us);

323 
îr_cﬁlisi⁄
 = 
JIT_ERROR_COLLISION_PACKET
;

325 
JIT_PKT_TYPE_BEACON
:

326 i‡(
pkt_ty≥
 !
JIT_PKT_TYPE_BEACON
) {

328 
	`lgw_log
(
LOG_JIT_ERROR
, "ERROR: Packë (ty≥=%dËREJECTED, cﬁlisi⁄ wôh bóc⁄áÃódyÖrogømmedáà%u (%u)\n", 
pkt_ty≥
, 
queue
->
nodes
[
i
].
pkt
.
cou¡_us
, 
∑ckë
->count_us);

330 
îr_cﬁlisi⁄
 = 
JIT_ERROR_COLLISION_BEACON
;

333 
	`MSG
("ERROR: UnknownÖacketÅype, shouldÇot occur, BUG?\n");

334 
	`as£π
(0);

337 
	`±hªad_muãx_u∆ock
(&
mx_jô_queue
);

338  
îr_cﬁlisi⁄
;

344 
	`mem˝y
(&(
queue
->
nodes
[queue->
num_pkt
].
pkt
), 
∑ckë
, (
lgw_pkt_tx_s
));

345 
queue
->
nodes
[queue->
num_pkt
].
¥e_dñay
 = 
∑ckë_¥e_dñay
;

346 
queue
->
nodes
[queue->
num_pkt
].
po°_dñay
 = 
∑ckë_po°_dñay
;

347 
queue
->
nodes
[queue->
num_pkt
].
pkt_ty≥
 =Ökt_type;

348 i‡(
pkt_ty≥
 =
JIT_PKT_TYPE_BEACON
) {

349 
queue
->
num_bóc⁄
++;

351 
queue
->
num_pkt
++;

353 
	`jô_s‹t_queue
(
queue
);

356 
	`±hªad_muãx_u∆ock
(&
mx_jô_queue
);

358 
	`jô_¥öt_queue
(
queue
, 
Ál£
, 
LOG_JIT
);

360 
	`lgw_log
(
LOG_JIT
, "íqueuedÖackë wôh cou¡_us=%u (size=%u byãs,Åﬂ=%u us,Åy≥=%u)\n", 
∑ckë
->
cou¡_us
,Öackë->
size
, 
∑ckë_po°_dñay
, 
pkt_ty≥
);

362  
JIT_ERROR_OK
;

363 
	}
}

365 
jô_îr‹_e
 
	$jô_dequeue
(
jô_queue_s
 *
queue
, 
ödex
, 
lgw_pkt_tx_s
 *
∑ckë
, 
jô_pkt_ty≥_e
 *
pkt_ty≥
) {

366 i‡(
∑ckë
 =
NULL
) {

367 
	`MSG
("ERROR: invalidÖarameter\n");

368  
JIT_ERROR_INVALID
;

371 i‡((
ödex
 < 0Ë|| (ödex >
JIT_QUEUE_MAX
)) {

372 
	`MSG
("ERROR: invalidÖarameter\n");

373  
JIT_ERROR_INVALID
;

376 i‡(
	`jô_queue_is_em±y
(
queue
)) {

377 
	`MSG
("ERROR: cannot dequeueÖacket, JIT queue isÉmpty\n");

378  
JIT_ERROR_EMPTY
;

381 
	`±hªad_muãx_lock
(&
mx_jô_queue
);

384 
	`mem˝y
(
∑ckë
, &(
queue
->
nodes
[
ödex
].
pkt
), (
lgw_pkt_tx_s
));

385 
queue
->
num_pkt
--;

386 *
pkt_ty≥
 = 
queue
->
nodes
[
ödex
].pkt_type;

387 i‡(*
pkt_ty≥
 =
JIT_PKT_TYPE_BEACON
) {

388 
queue
->
num_bóc⁄
--;

389 
	`lgw_log
(
LOG_BEACON
, "--- Beacon dequeued ---\n");

393 
	`mem˝y
(&(
queue
->
nodes
[
ödex
]), &(queue->nodes[queue->
num_pkt
]), (
jô_node_s
));

394 
	`mem£t
(&(
queue
->
nodes
[queue->
num_pkt
]), 0, (
jô_node_s
));

397 
	`jô_s‹t_queue
(
queue
);

400 
	`±hªad_muãx_u∆ock
(&
mx_jô_queue
);

402 
	`jô_¥öt_queue
(
queue
, 
Ál£
, 
LOG_JIT
);

404 
	`lgw_log
(
LOG_JIT
, "dequeuedÖackë wôh cou¡_us=%u from index %d\n", 
∑ckë
->
cou¡_us
, 
ödex
);

406  
JIT_ERROR_OK
;

407 
	}
}

409 
jô_îr‹_e
 
	$jô_≥ek
(
jô_queue_s
 *
queue
, 
uöt32_t
 
time_us
, *
pkt_idx
) {

411 
i
 = 0;

412 
idx_highe°_¥i‹ôy
 = -1;

413 i‡(
pkt_idx
 =
NULL
) {

414 
	`MSG
("ERROR: invalidÖarameter\n");

415  
JIT_ERROR_INVALID
;

418 i‡(
	`jô_queue_is_em±y
(
queue
)) {

419  
JIT_ERROR_EMPTY
;

422 
	`±hªad_muãx_lock
(&
mx_jô_queue
);

425 
i
=0; i<
queue
->
num_pkt
; i++) {

433 i‡((
queue
->
nodes
[
i
].
pkt
.
cou¡_us
 - 
time_us
Ë>
TX_MAX_ADVANCE_DELAY
) {

435 
queue
->
num_pkt
--;

436 i‡(
queue
->
nodes
[
i
].
pkt_ty≥
 =
JIT_PKT_TYPE_BEACON
) {

437 
queue
->
num_bóc⁄
--;

438 
	`MSG
("WARNING: --- Bóc⁄ dr›≥d (cuºít_time=%u,Öackë_time=%uË---\n", 
time_us
, 
queue
->
nodes
[
i
].
pkt
.
cou¡_us
);

440 
	`MSG
("WARNING: --- Packë dr›≥d (cuºít_time=%u,Öackë_time=%uË---\n", 
time_us
, 
queue
->
nodes
[
i
].
pkt
.
cou¡_us
);

444 
	`mem˝y
(&(
queue
->
nodes
[
i
]), &(queue->nodes[queue->
num_pkt
]), (
jô_node_s
));

445 
	`mem£t
(&(
queue
->
nodes
[queue->
num_pkt
]), 0, (
jô_node_s
));

448 
	`jô_s‹t_queue
(
queue
);

451 
i
 = 0;

459 i‡((
idx_highe°_¥i‹ôy
 =-1Ë|| (((
queue
->
nodes
[
i
].
pkt
.
cou¡_us
 - 
time_us
) < (queue->nodes[idx_highest_priority].pkt.count_us -Åime_us)))) {

460 
idx_highe°_¥i‹ôy
 = 
i
;

468 i‡((
queue
->
nodes
[
idx_highe°_¥i‹ôy
].
pkt
.
cou¡_us
 - 
time_us
Ë< 
TX_JIT_DELAY
) {

469 *
pkt_idx
 = 
idx_highe°_¥i‹ôy
;

470 
	`lgw_log
(
LOG_JIT
, "peekÖacket with count_us=%uát index %d\n",

471 
queue
->
nodes
[
idx_highe°_¥i‹ôy
].
pkt
.
cou¡_us
, idx_highest_priority);

473 *
pkt_idx
 = -1;

476 
	`±hªad_muãx_u∆ock
(&
mx_jô_queue
);

478  
JIT_ERROR_OK
;

479 
	}
}

481 
	$jô_¥öt_queue
(
jô_queue_s
 *
queue
, 
boﬁ
 
show_Æl
, 
debug_Àvñ
) {

482 
i
 = 0;

483 
lo›_íd
;

485 i‡(
	`jô_queue_is_em±y
(
queue
)) {

486 
	`lgw_log
(
debug_Àvñ
, "INFO: [jit] queue isÉmpty\n");

488 
	`±hªad_muãx_lock
(&
mx_jô_queue
);

490 
	`lgw_log
(
debug_Àvñ
, "INFO: [jô] queuêc⁄èö†%dÖackës:\n", 
queue
->
num_pkt
);

491 
	`lgw_log
(
debug_Àvñ
, "INFO: [jô] queuêc⁄èö†%d bóc⁄s:\n", 
queue
->
num_bóc⁄
);

492 
lo›_íd
 = (
show_Æl
 =
åue
Ë? 
JIT_QUEUE_MAX
 : 
queue
->
num_pkt
;

493 
i
=0; i<
lo›_íd
; i++) {

494 
	`lgw_log
(
debug_Àvñ
, " -Çode[%d]: count_us=%u -Åype=%d\n",

495 
i
,

496 
queue
->
nodes
[
i
].
pkt
.
cou¡_us
,

497 
queue
->
nodes
[
i
].
pkt_ty≥
);

500 
	`±hªad_muãx_u∆ock
(&
mx_jô_queue
);

502 
	}
}

	@fwd/src/lgwmm.c

30 
	#_GNU_SOURCE


	)

31 
	~<°dio.h
>

32 
	~<°rög.h
>

33 
	~<°d¨g.h
>

34 
	~<°dlib.h
>

36 
	~"fwd.h
"

38 
	#MALLOC_FAILURE_MSG
 \

39 
	`lgw_log
(
LOG_MEM
, "Mem‹y AŒoˇti⁄ Faûuª i¿fun˘i⁄ %†©Üöê%d o‡%s\n", 
func
, 
löío
, 
fûe
)

	)

41 
	#FREE_FAILURE_MSG
 \

42 
	`lgw_log
(
LOG_MEM
, "Mem‹y PoöàtÿNULL i¿fun˘i⁄ %†©Üöê%d o‡%s\n", 
func
, 
löío
, 
fûe
)

	)

44 
	$__lgw_‰ì
(*
±r
, c⁄° *
fûe
, 
löío
, c⁄° *
func
)

47 i‡(!
±r
) {

52 
	`‰ì
(
±r
);

53 
	}
}

55 *
	$__lgw__ªÆloc
(*
±r
, 
size_t
 
size
, c⁄° *
fûe
, 
löío
, c⁄° *
func
)

57 *
p
;

58 
p
 = 
	`ªÆloc
(
±r
, 
size
);

59 i‡(!
p
) {

60 
MALLOC_FAILURE_MSG
;

62  
p
;

63 
	}
}

65 *
	$__lgw_ˇŒoc
(
size_t
 
nmemb
, size_à
size
, c⁄° *
fûe
, 
löío
, c⁄° *
func
)

67 *
p
;

69 
p
 = 
	`ˇŒoc
(
nmemb
, 
size
);

70 i‡(!
p
) {

71 
MALLOC_FAILURE_MSG
;

74  
p
;

75 
	}
}

77 *
	$__lgw_mÆloc
(
size_t
 
size
, c⁄° *
fûe
, 
löío
, c⁄° *
func
)

79 *
p
;

81 
p
 = 
	`mÆloc
(
size
);

82 i‡(!
p
) {

83 
MALLOC_FAILURE_MSG
;

86 
	`mem£t
(
p
, 0, 
size
);

88  
p
;

89 
	}
}

91 *
	$__lgw_ªÆloc
(*
±r
, 
size_t
 
size
, c⁄° *
fûe
, 
löío
, c⁄° *
func
)

93 *
√wp
;

95 
√wp
 = 
	`ªÆloc
(
±r
, 
size
);

96 i‡(!
√wp
) {

97 
MALLOC_FAILURE_MSG
;

100  
√wp
;

101 
	}
}

103 *
	$__lgw_°rdup
(c⁄° *
s
, c⁄° *
fûe
, 
löío
, c⁄° *
func
)

105 *
√w°r
 = 
NULL
;

107 i‡(
s
) {

108 
√w°r
 = 
	`°rdup
(
s
);

109 i‡(!
√w°r
) {

110 
MALLOC_FAILURE_MSG
;

114  
√w°r
;

115 
	}
}

117 *
	$__lgw_°∫dup
(c⁄° *
s
, 
size_t
 
n
, c⁄° *
fûe
, 
löío
, c⁄° *
func
)

119 *
√w°r
 = 
NULL
;

121 i‡(
s
) {

122 
√w°r
 = 
	`°∫dup
(
s
, 
n
);

123 i‡(!
√w°r
) {

124 
MALLOC_FAILURE_MSG
;

128  
√w°r
;

129 
	}
}

131 
	$__lgw_a•rötf
(c⁄° *
fûe
, 
löío
, c⁄° *
func
, **
°Ω
, c⁄° *
f‹m©
, ...)

133 
ªs
;

134 
va_li°
 
≠
;

136 
	`va_°¨t
(
≠
, 
f‹m©
);

137 
ªs
 = 
	`va•rötf
(
°Ω
, 
f‹m©
, 
≠
);

138 i‡(
ªs
 < 0) {

143 *
°Ω
 = 
NULL
;

145 
MALLOC_FAILURE_MSG
;

147 
	`va_íd
(
≠
);

149  
ªs
;

150 
	}
}

152 
	$__lgw_va•rötf
(**
°Ω
, c⁄° *
f‹m©
, 
va_li°
 
≠
, c⁄° *
fûe
, 
löío
, c⁄° *
func
)

154 
ªs
;

156 
ªs
 = 
	`va•rötf
(
°Ω
, 
f‹m©
, 
≠
);

157 i‡(
ªs
 < 0) {

162 *
°Ω
 = 
NULL
;

164 
MALLOC_FAILURE_MSG
;

167  
ªs
;

168 
	}
}

170 *
	$lgw_°d_mÆloc
(
size_t
 
size
)

172  
	`mÆloc
(
size
);

173 
	}
}

175 *
	$lgw_°d_ˇŒoc
(
size_t
 
nmemb
, size_à
size
)

177  
	`ˇŒoc
(
nmemb
, 
size
);

178 
	}
}

180 *
	$lgw_°d_ªÆloc
(*
±r
, 
size_t
 
size
)

182  
	`ªÆloc
(
±r
, 
size
);

183 
	}
}

185 
	$lgw_°d_‰ì
(*
±r
)

187 
	`lgw_‰ì
(
±r
);

188 
	}
}

190 
	$lgw_‰ì_±r
(*
±r
)

192 
	`lgw_‰ì
(
±r
);

193 
	}
}

	@fwd/src/loramac-crypto.c

8 
	~<°dlib.h
>

9 
	~<°döt.h
>

10 
	~"utûôõs.h
"

12 
	~"´s.h
"

13 
	~"cmac.h
"

15 
	~"l‹amac-¸y±o.h
"

20 
	#LORAMAC_MIC_BLOCK_B0_SIZE
 16

	)

25 
uöt8_t
 
	gMicBlockB0
[] = { 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

34 
uöt8_t
 
	gMic
[16];

39 
uöt8_t
 
	gaBlock
[] = { 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

42 
uöt8_t
 
	gsBlock
[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

49 
´s_c⁄ãxt
 
	gAesC⁄ãxt
;

54 
AES_CMAC_CTX
 
	gAesCmacCtx
[1];

67 
	$LoRaMacCompuãMic
–c⁄° 
uöt8_t
 *
buf„r
, 
uöt16_t
 
size
, c⁄° uöt8_à*
key
, 
uöt32_t
 
addªss
, uöt8_à
dú
, uöt32_à
£quí˚Cou¡î
, uöt32_à*
mic
 )

69 
MicBlockB0
[5] = 
dú
;

71 
MicBlockB0
[6] = ( 
addªss
 ) & 0xFF;

72 
MicBlockB0
[7] = ( 
addªss
 >> 8 ) & 0xFF;

73 
MicBlockB0
[8] = ( 
addªss
 >> 16 ) & 0xFF;

74 
MicBlockB0
[9] = ( 
addªss
 >> 24 ) & 0xFF;

76 
MicBlockB0
[10] = ( 
£quí˚Cou¡î
 ) & 0xFF;

77 
MicBlockB0
[11] = ( 
£quí˚Cou¡î
 >> 8 ) & 0xFF;

78 
MicBlockB0
[12] = ( 
£quí˚Cou¡î
 >> 16 ) & 0xFF;

79 
MicBlockB0
[13] = ( 
£quí˚Cou¡î
 >> 24 ) & 0xFF;

81 
MicBlockB0
[15] = 
size
 & 0xFF;

83 
	`AES_CMAC_Inô
–
AesCmacCtx
 );

85 
	`AES_CMAC_SëKey
–
AesCmacCtx
, 
key
 );

87 
	`AES_CMAC_Upd©e
–
AesCmacCtx
, 
MicBlockB0
, 
LORAMAC_MIC_BLOCK_B0_SIZE
 );

89 
	`AES_CMAC_Upd©e
–
AesCmacCtx
, 
buf„r
, 
size
 & 0xFF );

91 
	`AES_CMAC_FöÆ
–
Mic
, 
AesCmacCtx
 );

93 *
mic
 = ( 
uöt32_t
 )––uöt32_à)
Mic
[3] << 24 | ( uint32_t )Mic[2] << 16 | ( uint32_t )Mic[1] << 8 | ( uint32_t )Mic[0] );

94 
	}
}

96 
	$LoRaMacPaylﬂdEn¸y±
–c⁄° 
uöt8_t
 *
buf„r
, 
uöt16_t
 
size
, c⁄° uöt8_à*
key
, 
uöt32_t
 
addªss
, uöt8_à
dú
, uöt32_à
£quí˚Cou¡î
, uöt8_à*
ícBuf„r
 )

98 
uöt16_t
 
i
;

99 
uöt8_t
 
buf„rIndex
 = 0;

100 
uöt16_t
 
˘r
 = 1;

102 
	`lgw_mem£t
–
AesC⁄ãxt
.
ksch
, '\0', 240 );

103 
	`´s_£t_key
–
key
, 16, &
AesC⁄ãxt
 );

105 
aBlock
[5] = 
dú
;

107 
aBlock
[6] = ( 
addªss
 ) & 0xFF;

108 
aBlock
[7] = ( 
addªss
 >> 8 ) & 0xFF;

109 
aBlock
[8] = ( 
addªss
 >> 16 ) & 0xFF;

110 
aBlock
[9] = ( 
addªss
 >> 24 ) & 0xFF;

112 
aBlock
[10] = ( 
£quí˚Cou¡î
 ) & 0xFF;

113 
aBlock
[11] = ( 
£quí˚Cou¡î
 >> 8 ) & 0xFF;

114 
aBlock
[12] = ( 
£quí˚Cou¡î
 >> 16 ) & 0xFF;

115 
aBlock
[13] = ( 
£quí˚Cou¡î
 >> 24 ) & 0xFF;

131  
size
 >= 16 )

133 
aBlock
[15] = ( ( 
˘r
 ) & 0xFF );

134 
˘r
++;

135 
	`´s_í¸y±
–
aBlock
, 
sBlock
, &
AesC⁄ãxt
 );

136  
i
 = 0; i < 16; i++ )

138 
ícBuf„r
[
buf„rIndex
 + 
i
] = 
buf„r
[buf„rIndex + i] ^ 
sBlock
[i];

140 
size
 -= 16;

141 
buf„rIndex
 += 16;

144 if–
size
 > 0 )

146 
aBlock
[15] = ( ( 
˘r
 ) & 0xFF );

147 
	`´s_í¸y±
–
aBlock
, 
sBlock
, &
AesC⁄ãxt
 );

155  
i
 = 0; i < 
size
; i++ )

157 
ícBuf„r
[
buf„rIndex
 + 
i
] = 
buf„r
[buf„rIndex + i] ^ 
sBlock
[i];

160 
	}
}

162 
	$LoRaMacPaylﬂdDe¸y±
–c⁄° 
uöt8_t
 *
buf„r
, 
uöt16_t
 
size
, c⁄° uöt8_à*
key
, 
uöt32_t
 
addªss
, uöt8_à
dú
, uöt32_à
£quí˚Cou¡î
, uöt8_à*
decBuf„r
 )

164 
	`LoRaMacPaylﬂdEn¸y±
–
buf„r
, 
size
, 
key
, 
addªss
, 
dú
, 
£quí˚Cou¡î
, 
decBuf„r
 );

165 
	}
}

167 
	$LoRaMacJoöCompuãMic
–c⁄° 
uöt8_t
 *
buf„r
, 
uöt16_t
 
size
, c⁄° uöt8_à*
key
, 
uöt32_t
 *
mic
 )

169 
	`AES_CMAC_Inô
–
AesCmacCtx
 );

171 
	`AES_CMAC_SëKey
–
AesCmacCtx
, 
key
 );

173 
	`AES_CMAC_Upd©e
–
AesCmacCtx
, 
buf„r
, 
size
 & 0xFF );

175 
	`AES_CMAC_FöÆ
–
Mic
, 
AesCmacCtx
 );

177 *
mic
 = ( 
uöt32_t
 )––uöt32_à)
Mic
[3] << 24 | ( uint32_t )Mic[2] << 16 | ( uint32_t )Mic[1] << 8 | ( uint32_t )Mic[0] );

178 
	}
}

180 
	$LoRaMacJoöDe¸y±
–c⁄° 
uöt8_t
 *
buf„r
, 
uöt16_t
 
size
, c⁄° uöt8_à*
key
, uöt8_à*
decBuf„r
 )

182 
	`lgw_mem£t
–
AesC⁄ãxt
.
ksch
, '\0', 240 );

183 
	`´s_£t_key
–
key
, 16, &
AesC⁄ãxt
 );

184 
	`´s_de¸y±
–
buf„r
, 
decBuf„r
, &
AesC⁄ãxt
 );

186 if–
size
 >= 16 )

188 
	`´s_de¸y±
–
buf„r
 + 16, 
decBuf„r
 + 16, &
AesC⁄ãxt
 ); }

189 
	}
}

191 
	$LoRaMacJoöCompuãSKeys
–c⁄° 
uöt8_t
 *
key
, c⁄° uöt8_à*
≠pN⁄˚
, 
uöt16_t
 
devN⁄˚
, uöt8_à*
nwkSKey
, uöt8_à*
≠pSKey
 )

193 
uöt8_t
 
n⁄˚
[16];

194 
uöt8_t
 *
pDevN⁄˚
 = ( uöt8_à* )&
devN⁄˚
;

196 
	`lgw_mem£t
–
AesC⁄ãxt
.
ksch
, '\0', 240 );

197 
	`´s_£t_key
–
key
, 16, &
AesC⁄ãxt
 );

199 
	`lgw_mem£t
–
n⁄˚
, 0, (Çonce ) );

200 
n⁄˚
[0] = 0x01;

209 
	`lgw_mem˝y
–
n⁄˚
 + 1, 
≠pN⁄˚
, 6 );

210 #ifde‡
BIGENDIAN


211 
n⁄˚
[7] = 
pDevN⁄˚
[1];

212 
n⁄˚
[8] = 
pDevN⁄˚
[0];

214 
n⁄˚
[7] = 
pDevN⁄˚
[0];

215 
n⁄˚
[8] = 
pDevN⁄˚
[1];

217 
	`´s_í¸y±
–
n⁄˚
, 
nwkSKey
, &
AesC⁄ãxt
 );

219 
	`lgw_mem£t
–
n⁄˚
, 0, (Çonce ) );

220 
n⁄˚
[0] = 0x02;

221 
	`lgw_mem˝y
–
n⁄˚
 + 1, 
≠pN⁄˚
, 6 );

222 #ifde‡
BIGENDIAN


223 
n⁄˚
[7] = 
pDevN⁄˚
[1];

224 
n⁄˚
[8] = 
pDevN⁄˚
[0];

226 
n⁄˚
[7] = 
pDevN⁄˚
[0];

227 
n⁄˚
[8] = 
pDevN⁄˚
[1];

229 
	`´s_í¸y±
–
n⁄˚
, 
≠pSKey
, &
AesC⁄ãxt
 );

230 
	}
}

231 
	$LoRaMacJoöEn¸y±
–c⁄° 
uöt8_t
 *
buf„r
, 
uöt16_t
 
size
, c⁄° uöt8_à*
key
, uöt8_à*
ícBuf„r
 ){

232 
	`LoRaMacJoöDe¸y±
(
buf„r
,
size
,
key
,
ícBuf„r
);

233 
	}
}

	@fwd/src/mac-header-decode.c

1 
	~<°dio.h
>

3 
	~"fwd.h
"

4 
	~"mac-hódî-decode.h
"

6 
LoRaMacP¨£rSètus_t
 
	$LoRaMacP¨£rD©a
–
LoRaMacMesßgeD©a_t
* 
macMsg
 )

8 if––
macMsg
 =0 ) || ( macMsg->
Buf„r
 == 0 ) )

10  
LORAMAC_PARSER_ERROR_NPE
;

13 
uöt16_t
 
bufIå
 = 0;

15 
macMsg
->
MHDR
.
VÆue
 = macMsg->
Buf„r
[
bufIå
++];

17 
macMsg
->
FHDR
.
DevAddr
 = macMsg->
Buf„r
[
bufIå
++];

18 
macMsg
->
FHDR
.
DevAddr
 |––
uöt32_t
 ) macMsg->
Buf„r
[
bufIå
++] << 8 );

19 
macMsg
->
FHDR
.
DevAddr
 |––
uöt32_t
 ) macMsg->
Buf„r
[
bufIå
++] << 16 );

20 
macMsg
->
FHDR
.
DevAddr
 |––
uöt32_t
 ) macMsg->
Buf„r
[
bufIå
++] << 24 );

22 
macMsg
->
FHDR
.
FCål
.
VÆue
 = macMsg->
Buf„r
[
bufIå
++];

24 
macMsg
->
FHDR
.
FC¡
 = macMsg->
Buf„r
[
bufIå
++];

25 
macMsg
->
FHDR
.
FC¡
 |macMsg->
Buf„r
[
bufIå
++] << 8;

27 if–
macMsg
->
FHDR
.
FCål
.
Bôs
.
FO±sLí
 <= 15 )

29 
	`lgw_mem˝y
–
macMsg
->
FHDR
.
FO±s
, &macMsg->
Buf„r
[
bufIå
], macMsg->FHDR.
FCål
.
Bôs
.
FO±sLí
 );

30 
bufIå
 = bufIå + 
macMsg
->
FHDR
.
FCål
.
Bôs
.
FO±sLí
;

34  
LORAMAC_PARSER_FAIL
;

38 
macMsg
->
FP‹t
 = 0;

41 if––
macMsg
->
BufSize
 - 
bufIå
 - 
LORAMAC_MIC_FIELD_SIZE
 ) > 0 )

43 
macMsg
->
FP‹t
 = macMsg->
Buf„r
[
bufIå
++];

47 
macMsg
->
MIC
 = ( 
uöt32_t
 ) macMsg->
Buf„r
[–macMsg->
BufSize
 - 
LORAMAC_MIC_FIELD_SIZE
 )];

48 
macMsg
->
MIC
 |––
uöt32_t
 ) macMsg->
Buf„r
[–macMsg->
BufSize
 - 
LORAMAC_MIC_FIELD_SIZE
 ) + 1] << 8 );

49 
macMsg
->
MIC
 |––
uöt32_t
 ) macMsg->
Buf„r
[–macMsg->
BufSize
 - 
LORAMAC_MIC_FIELD_SIZE
 ) + 2] << 16 );

50 
macMsg
->
MIC
 |––
uöt32_t
 ) macMsg->
Buf„r
[–macMsg->
BufSize
 - 
LORAMAC_MIC_FIELD_SIZE
 ) + 3] << 24 );

52  
LORAMAC_PARSER_SUCCESS
;

53 
	}
}

55 
	$¥ötf_mac_hódî
–
LoRaMacMesßgeD©a_t
* 
macMsg
 )

57 if––
macMsg
 =0 ) || ( macMsg->
Buf„r
 == 0 ) )

62 
macMsg
->
MHDR
.
Bôs
.
MTy≥
) {

63 
FRAME_TYPE_DATA_CONFIRMED_UP
:

64 
	`lgw_log
(
LOG_PKT
, "DATA_CONF_UP: {\"DevAddr\": \"%08X\", \"FCtrl\": [\"ADR\": %u, \"ADRACKReq\": %u, \"ACK\": %u, \"RFU\" : \"RFU\", \"FOptsLen\": %u], \"FCnt\": %u, \"FPort\": %u, \"MIC\": \"%08X\"}\n",

65 
macMsg
->
FHDR
.
DevAddr
,

66 
macMsg
->
FHDR
.
FCål
.
Bôs
.
Adr
,

67 
macMsg
->
FHDR
.
FCål
.
Bôs
.
AdrAckReq
,

68 
macMsg
->
FHDR
.
FCål
.
Bôs
.
Ack
,

69 
macMsg
->
FHDR
.
FCål
.
Bôs
.
FO±sLí
,

70 
macMsg
->
FHDR
.
FC¡
,

71 
macMsg
->
FP‹t
,

72 
macMsg
->
MIC
);

74 
FRAME_TYPE_DATA_UNCONFIRMED_UP
:

75 
	`lgw_log
(
LOG_PKT
, "DATA_UNCONF_UP:{\"DevAddr\": \"%08X\", \"FCtrl\": [\"ADR\": %u, \"ADRACKReq\": %u, \"ACK\": %u, \"RFU\" : \"RFU\", \"FOptsLen\": %u], \"FCnt\": %u, \"FPort\": %u, \"MIC\": \"%08X\"}\n",

76 
macMsg
->
FHDR
.
DevAddr
,

77 
macMsg
->
FHDR
.
FCål
.
Bôs
.
Adr
,

78 
macMsg
->
FHDR
.
FCål
.
Bôs
.
AdrAckReq
,

79 
macMsg
->
FHDR
.
FCål
.
Bôs
.
Ack
,

80 
macMsg
->
FHDR
.
FCål
.
Bôs
.
FO±sLí
,

81 
macMsg
->
FHDR
.
FC¡
,

82 
macMsg
->
FP‹t
,

83 
macMsg
->
MIC
);

85 
FRAME_TYPE_DATA_CONFIRMED_DOWN
:

86 
	`lgw_log
(
LOG_PKT
, "DATA_CONF_DOWN:{\"DevAddr\": \"%08X\", \"FCtrl\": [\"ADR\": %u, \"RFU\": \"RFU\", \"ACK\": %u, \"FPending\" : %u, \"FOptsLen\": %u], \"FCnt\": %u, \"FPort\": %u, \"MIC\": \"%08X\"}\n",

87 
macMsg
->
FHDR
.
DevAddr
,

88 
macMsg
->
FHDR
.
FCål
.
Bôs
.
Adr
,

89 
macMsg
->
FHDR
.
FCål
.
Bôs
.
Ack
,

90 
macMsg
->
FHDR
.
FCål
.
Bôs
.
FPídög
,

91 
macMsg
->
FHDR
.
FCål
.
Bôs
.
FO±sLí
,

92 
macMsg
->
FHDR
.
FC¡
,

93 
macMsg
->
FP‹t
,

94 
macMsg
->
MIC
);

96 
FRAME_TYPE_DATA_UNCONFIRMED_DOWN
:

97 
	`lgw_log
(
LOG_PKT
, "DATA_UNCONF_DOWN:{\"DevAddr\": \"%08X\", \"FCtrl\": [\"ADR\": %u, \"RFU\": \"RFU\", \"ACK\": %u, \"FPending\" : %u, \"FOptsLen\": %u], \"FCnt\": %u, \"FPort\": %u, \"MIC\": \"%08X\"}\n",

98 
macMsg
->
FHDR
.
DevAddr
,

99 
macMsg
->
FHDR
.
FCål
.
Bôs
.
Adr
,

100 
macMsg
->
FHDR
.
FCål
.
Bôs
.
Ack
,

101 
macMsg
->
FHDR
.
FCål
.
Bôs
.
FPídög
,

102 
macMsg
->
FHDR
.
FCål
.
Bôs
.
FO±sLí
,

103 
macMsg
->
FHDR
.
FC¡
,

104 
macMsg
->
FP‹t
,

105 
macMsg
->
MIC
);

107 
FRAME_TYPE_JOIN_ACCEPT
:

108 
	`lgw_log
(
LOG_PKT
, "JOIN_ACCEPT:{Message ...}\n");

110 
FRAME_TYPE_JOIN_REQ
:

111 
	`lgw_log
(
LOG_PKT
, "JOIN_REQ:{Message ...}\n");

116 
	}
}

118 
	$fûãr_by_mac
(
LoRaMacMesßgeD©a_t
* 
macMsg
, 
uöt8_t
 
Â‹t
, 
uöt32_t
 
devaddr
, uöt8_à
Àn
) {

119 if––
macMsg
 =0 ) || ( macMsg->
Buf„r
 == 0 ) )

123 i‡(
Â‹t
 !0 && (
macMsg
->
FP‹t
 != fport))

125 i‡(
devaddr
 !0 && ((
macMsg
->
FHDR
.
DevAddr
 >> (32-
Àn
)) != devaddr ))

129 
	}
}

	@fwd/src/mqtt_serv.c

28 
	~<uni°d.h
>

29 
	~<°dlib.h
>

30 
	~<°rög.h
>

32 
	~<£m≠h‹e.h
>

33 
	~<time.h
>

35 
	~<MQTTPackë.h
>

37 
	~"fwd.h
"

38 
	~"l‹agw_hÆ.h
"

40 
	~"£rvi˚.h
"

41 
	~"mqâ_£rvi˚.h
"

43 
	gDECLARE_GW
;

44 
	gDECLARE_HAL
;

46 
∑ylﬂd_dól
(
mqâ£ssi⁄_s
* 
£ssi⁄
, 
lgw_pkt_rx_s
* 
p
);

47 
mqâ_push_up
(* 
¨g
);

48 
mqâ_öô
(
£rv_s
* 
£rv
);

50 
	$mqâ_˛ónup
(
mqâ£ssi⁄_s
* 
£ssi⁄
) {

51 
	`MQTTClõ¡De°roy
(&
£ssi⁄
->
˛õ¡
);

52 
	`lgw_‰ì
(
£ssi⁄
);

53 
	}
}

55 
	$mqâ_£ndpög
(
mqâ£ssi⁄_s
 *
£ssi⁄
) {

56  
	`MQTTSídPög
(&
£ssi⁄
->
˛õ¡
);

57 
	}
}

59 
	$mqâ_gëπt
(
mqâ£ssi⁄_s
 *
£ssi⁄
) {

60  
	`MQTTGëPögTime
(&
£ssi⁄
->
˛õ¡
) / 1000;

61 
	}
}

63 
	$mqâ_d∆ök_cb
(
MesßgeD©a
 *
d©a
, * 
s
) {

65 
mqâ£ssi⁄_s
* 
£ssi⁄
 = (mqâ£ssi⁄_s*)
s
;

67 i‡(
d©a
->
mesßge
->
∑ylﬂdÀn
 < 0)

70 i‡(
£ssi⁄
->
d∆ök_h™dÀr
)

71 
£ssi⁄
->
	`d∆ök_h™dÀr
(
d©a
);

72 
	}
}

74 
	$d∆ök_h™dÀr
(
MesßgeD©a
* 
d©a
) {

75 
	`lgw_log
(
LOG_INFO
, "INFO~ mqâ sus¸ibê%d byã†mesßge: %s/%s\n", 
d©a
->
mesßge
->
∑ylﬂdÀn
, d©a->
t›icName
, (*)d©a->mesßge->
∑ylﬂd
);

76 
	}
}

78 
	$mqâ_c⁄√˘
(
£rv_s
 *
£rv
) {

79 
îr
 = -1;

81 
	`mqâ_öô
(
£rv
);

83 
mqâ£ssi⁄_s
* 
£ssi⁄
 = (mqâ£ssi⁄_s*)
£rv
->
√t
->
mqâ
->session;

85 i‡(
NULL
 =
£ssi⁄
)

86  
îr
;

88 
MQTTPackë_c⁄√˘D©a
 
c⁄√˘
 = 
MQTTPackë_c⁄√˘D©a_öôülizî
;

90 
îr
 = 
	`Nëw‹kC⁄√˘
(&
£ssi⁄
->
√tw‹k
, (*)&
£rv
->
√t
->
addr
, 
	`©oi
((*)&£rv->√t->
p‹t_up
));

92 i‡(
îr
 !
SUCCESS
)

93 
exô
;

95 
c⁄√˘
.
˛õ¡ID
.
c°rög
 = 
£ssi⁄
->
id
;

96 
c⁄√˘
.
kìpAliveI¡îvÆ
 = 
KEEP_ALIVE_INTERVAL
;

99 i‡(
NULL
 !
£ssi⁄
->
key
) {

100 
c⁄√˘
.
u£∫ame
.
c°rög
 = 
£ssi⁄
->
id
;

101 
c⁄√˘
.
∑ssw‹d
.
c°rög
 = 
£ssi⁄
->
key
;

104 
îr
 = 
	`MQTTC⁄√˘
(&
£ssi⁄
->
˛õ¡
, &
c⁄√˘
);

105 i‡(
îr
 !
SUCCESS
)

106 
exô
;

108 
£rv
->
°©e
.
live
 = 
åue
;

109 
£rv
->
°©e
.
°Æl_time
 = 0;

110 
£rv
->
°©e
.
c⁄√˘ög
 = 
åue
;

111 i‡(
£ssi⁄
->
d∆ök_t›ic
)

112 
îr
 = 
	`MQTTSubs¸ibe
(&
£ssi⁄
->
˛õ¡
, sessi⁄->
d∆ök_t›ic
, 
QOS_DOWN
, &
mqâ_d∆ök_cb
, session);

114 
exô
:

115  
îr
;

116 
	}
}

118 
	$mqâ_disc⁄√˘
(
mqâ£ssi⁄_s
 *
£ssi⁄
) {

119 
	`MQTTDisc⁄√˘
(&
£ssi⁄
->
˛õ¡
);

120 
	`Nëw‹kDisc⁄√˘
(&
£ssi⁄
->
√tw‹k
);

121 
	}
}

123 
	$mqâ_ªc⁄√˘
(
£rv_s
* 
£rv
) {

124 
£rv
->
°©e
.
live
 = 
Ál£
;

125 
	`lgw_log
(
LOG_INFO
, "INFO: [TTN] Rec⁄√˘ög %s\n",
£rv
->
öfo
.
«me
);

126 i‡(
£rv
->
√t
->
mqâ
->
£ssi⁄
) {

127 
	`mqâ_disc⁄√˘
((
mqâ£ssi⁄_s
*)
£rv
->
√t
->
mqâ
->
£ssi⁄
);

128 
	`mqâ_˛ónup
((
mqâ£ssi⁄_s
*)
£rv
->
√t
->
mqâ
->
£ssi⁄
);

130 
£rv
->
°©e
.
c⁄√˘ög
 = 
Ál£
;

132  
	`mqâ_c⁄√˘
(
£rv
);

133 
	}
}

135 
	$mqâ_checkc⁄√˘ed
(
mqâ£ssi⁄_s
 *
£ssi⁄
) {

136  
	`Nëw‹kCheckC⁄√˘ed
(&
£ssi⁄
->
√tw‹k
);

137 
	}
}

139 
	$mqâ_£nd_u∂ök
(
mqâ£ssi⁄_s
 *
£ssi⁄
, *
u∂ök
, 
Àn
) {

141 
rc
 = 
FAILURE
;

142 *
∑ylﬂd
 = 
NULL
;

143 *
t›ic
 = 
NULL
;

145 
MQTTMesßge
 
mesßge
;

146 
mesßge
.
qos
 = 
QOS_UP
;

147 
mesßge
.
ªèöed
 = 0;

148 
mesßge
.
dup
 = 0;

149 
mesßge
.
∑ylﬂd
 = 
u∂ök
;

150 
mesßge
.
∑ylﬂdÀn
 = 
Àn
;

152 i‡(
£ssi⁄
->
u∂ök_t›ic
)

153 
rc
 = 
	`MQTTPublish
(&
£ssi⁄
->
˛õ¡
, sessi⁄->
u∂ök_t›ic
, &
mesßge
);

155  
rc
;

156 
	}
}

167 
	$mqâ_öô
(
£rv_s
* 
£rv
){

168 
mqâ£ssi⁄_s
* 
mqâ£ssi⁄
 = (mqâ£ssi⁄_s*)
	`lgw_mÆloc
((mqttsession_s));

169 
	`mem£t
(
mqâ£ssi⁄
, 0, (
mqâ£ssi⁄_s
));

170 
mqâ£ssi⁄
->
id
 = 
£rv
->
öfo
.
«me
;

171 
mqâ£ssi⁄
->
key
 = 
£rv
->
öfo
.key;

172 
mqâ£ssi⁄
->
d∆ök_h™dÀr
 = &dnlink_handler;

173 
mqâ£ssi⁄
->
ªad_buf„r
 = 
	`lgw_mÆloc
(
READ_BUFFER_SIZE
);

174 
mqâ£ssi⁄
->
£nd_buf„r
 = 
	`lgw_mÆloc
(
SEND_BUFFER_SIZE
);

175 
mqâ£ssi⁄
->
d∆ök_t›ic
 = 
£rv
->
√t
->
mqâ
->
d¡›ic
;

176 
mqâ£ssi⁄
->
u∂ök_t›ic
 = 
£rv
->
√t
->
mqâ
->
u±›ic
;

178 
	`Nëw‹kInô
(&
mqâ£ssi⁄
->
√tw‹k
);

179 
	`MQTTClõ¡Inô
(&
mqâ£ssi⁄
->
˛õ¡
, &mqâ£ssi⁄->
√tw‹k
, 
COMMAND_TIMEOUT
,

180 
mqâ£ssi⁄
->
£nd_buf„r
, 
SEND_BUFFER_SIZE
, mqâ£ssi⁄->
ªad_buf„r
,

181 
READ_BUFFER_SIZE
);

182 
£rv
->
√t
->
mqâ
->
£ssi⁄
 = (*)
mqâ£ssi⁄
;

183 
	}
}

185 
	$mqâ_°¨t
(
£rv_s
* 
£rv
) {

186 
ªt
;

187 
ªt
 = 
	`mqâ_c⁄√˘
(
£rv
);

188 i‡(
ªt
 !
SUCCESS
) {

189 
	`lgw_log
(
LOG_WARNING
, "WARNING~ [%s] C™'àc⁄√àmqâ sîvî.\n", 
£rv
->
öfo
.
«me
);

190  
FAILURE
;

192 i‡(
	`lgw_±hªad_¸óã_background
(&
£rv
->
thªad
.
t_up
, 
NULL
, (*(*)(*))
mqâ_push_up
, serv)) {

193 
	`lgw_log
(
LOG_WARNING
, "WARNING~ [%s] C™'à¸óãÖush u∞±hªad.\n", 
£rv
->
öfo
.
«me
);

197 
	}
}

199 
	$mqâ_°›
(
£rv_s
* 
£rv
) {

200 
£rv
->
thªad
.
°›_sig
 = 
åue
;

201 
	`£m_po°
(&
£rv
->
thªad
.
£ma
);

202 
	`±hªad_joö
(
£rv
->
thªad
.
t_up
, 
NULL
);

203 i‡(
£rv
->
°©e
.
c⁄√˘ög
)

204 
	`mqâ_disc⁄√˘
((
mqâ£ssi⁄_s
*)
£rv
->
√t
->
mqâ
->
£ssi⁄
);

205 
	`mqâ_˛ónup
((
mqâ£ssi⁄_s
*)
£rv
->
√t
->
mqâ
->
£ssi⁄
);

206 
£rv
->
°©e
.
c⁄√˘ög
 = 
Ál£
;

207 
£rv
->
°©e
.
live
 = 
Ál£
;

208 
	}
}

210 
	$mqâ_push_up
(* 
¨g
) {

211 
£rv_s
* 
£rv
 = (£rv_s*Ë
¨g
;

213 
i
, 
j
;

214 
îr
;

215 
nb_pkt
 = 0;

216 
lgw_pkt_rx_s
 *
p
;

218 
rxpkts_s
* 
rxpkt_íåy
 = 
NULL
;

220 
mqâ£ssi⁄_s
* 
£ssi⁄
 = (mqâ£ssi⁄_s*)
£rv
->
√t
->
mqâ
->session;

222 i‡(!
£ssi⁄
) {

223 
	`mqâ_ªc⁄√˘
(
£rv
);

226 !
£rv
->
thªad
.
°›_sig
) {

228 
	`£m_waô
(&
£rv
->
thªad
.
£ma
);

230 
nb_pkt
 = 
	`gë_rxpkt
(
£rv
);

231 i‡(
nb_pkt
 == 0)

234 
	`lgw_log
(
LOG_DEBUG
, "DEBUG~ [%s] mqâ_push_u∞„tch %dÖachages.\n", 
£rv
->
öfo
.
«me
, 
nb_pkt
);

236 
i
 = 0; i < 
nb_pkt
; i++) {

237 
p
 = &
£rv
->
rxpkt
[
i
];

239 
p
->
°©us
) {

240 
STAT_CRC_OK
:

241 i‡(!
£rv
->
fûãr
.
fwd_vÆid_pkt
) {

245 
STAT_CRC_BAD
:

246 i‡(!
£rv
->
fûãr
.
fwd_îr‹_pkt
) {

250 
STAT_NO_CRC
:

251 i‡(!
£rv
->
fûãr
.
fwd_no¸c_pkt
) {

258 
îr
 = 
	`∑ylﬂd_dól
((
mqâ£ssi⁄_s
*)
£rv
->
√t
->
mqâ
->
£ssi⁄
, 
p
);

259 i‡(
îr
) {

260 
	`lgw_log
(
LOG_WARNING
, "WARNING~ [%s] síd d©®tÿmqâ sîvîÉº‹,ÅryÅÿªc⁄√˘.\n", 
£rv
->
öfo
.
«me
);

261 
	`mqâ_ªc⁄√˘
(
£rv
);

263 
	`lgw_log
(
LOG_INFO
, "INFO~ [%s] síd d©®tÿmqâ sîvî suc˚ed.\n", 
£rv
->
öfo
.
«me
);

267 
	}
}

269 
	$∑ylﬂd_dól
(
mqâ£ssi⁄_s
* 
£ssi⁄
, 
lgw_pkt_rx_s
* 
p
) {

270 
i
;

271 
tmp
[256] = {'\0'};

272 
ch™_∑th
[32] = {'\0'};

273 *
ch™_id
 = 
NULL
;

274 *
ch™_d©a
 = 
NULL
;

275 
id_found
 = 0, 
d©a_size
 = 
p
->
size
;

277 
FILE
 *
Â
;

279 
i
 = 0; i < 
p
->
size
; i++) {

280 
tmp
[
i
] = 
p
->
∑ylﬂd
[i];

283 i‡(
tmp
[2] == 0x00 &&Åmp[3] == 0x00)

284 
ch™_d©a
 = &
tmp
[4];

286 
ch™_d©a
 = 
tmp
;

288 
i
 = 0; i < 16; i++) {

289 i‡(
tmp
[
i
] ='<' && 
id_found
 == 0) {

290 
ch™_id
 = &
tmp
[
i
 + 1];

291 ++
id_found
;

294 i‡(
tmp
[
i
] == '>') {

295 
tmp
[
i
] = '\0';

296 
ch™_d©a
 = 
tmp
 + 
i
 + 1;

297 
d©a_size
 = d©a_sizê- 
i
;

298 ++
id_found
;

301 i‡(
id_found
 == 2)

305  
	`mqâ_£nd_u∂ök
(
£ssi⁄
, 
ch™_d©a
, 
d©a_size
);

306 
	}
}

	@fwd/src/parson.c

23 #ifde‡
_MSC_VER


24 
	#_CRT_SECURE_NO_WARNINGS


	)

27 
	~"∑rs⁄.h
"

29 
	~<°dio.h
>

30 
	~<°dlib.h
>

31 
	~<°rög.h
>

32 
	~<˘y≥.h
>

33 
	~<m©h.h
>

35 
	~"compûî.h
"

36 
	~"lgwmm.h
"

38 
	#STARTING_CAPACITY
 15

	)

39 
	#ARRAY_MAX_CAPACITY
 122880

	)

40 
	#OBJECT_MAX_CAPACITY
 960

	)

41 
	#MAX_NESTING
 19

	)

42 
	#DOUBLE_SERIALIZATION_FORMAT
 "%f"

	)

44 
	#SIZEOF_TOKEN
(
a
Ë(◊Ë- 1)

	)

45 
	#SKIP_CHAR
(
°r
Ë((*°r)++)

	)

46 
	#SKIP_WHITESPACES
(
°r
Ë
	`is•a˚
(**°r)Ë{ 
	`SKIP_CHAR
(°r); }

	)

47 
	#MAX
(
a
, 
b
Ë(◊Ë> (bË? (aË: (b))

	)

49 #unde‡
mÆloc


50 #unde‡
‰ì


52 
JSON_MÆloc_Fun˘i⁄
 
	g∑rs⁄_mÆloc
 = 
mÆloc
;

53 
JSON_Fªe_Fun˘i⁄
 
	g∑rs⁄_‰ì
 = 
‰ì
;

55 
	#IS_CONT
(
b
Ë((()(bË& 0xC0Ë=0x80Ë

	)

58 
	ujs⁄_vÆue_vÆue
 {

59 *
	m°rög
;

60 
	mnumbî
;

61 
JSON_Obje˘
 *
	mobje˘
;

62 
JSON_Aºay
 *
	m¨øy
;

63 
	mboﬁón
;

64 
	mnuŒ
;

65 } 
	tJSON_VÆue_VÆue
;

67 
	sjs⁄_vÆue_t
 {

68 
JSON_VÆue_Ty≥
 
	mty≥
;

69 
JSON_VÆue_VÆue
 
	mvÆue
;

72 
	sjs⁄_obje˘_t
 {

73 **
	m«mes
;

74 
JSON_VÆue
 **
	mvÆues
;

75 
size_t
 
	mcou¡
;

76 
size_t
 
	mˇ∑côy
;

79 
	sjs⁄_¨øy_t
 {

80 
JSON_VÆue
 **
	môems
;

81 
size_t
 
	mcou¡
;

82 
size_t
 
	mˇ∑côy
;

86 * 
ªad_fûe
(c⁄° *
fûíame
);

87 
ªmove_commíts
(*
°rög
, c⁄° *
°¨t_tokí
, c⁄° *
íd_tokí
);

88 * 
∑rs⁄_°∫dup
(c⁄° *
°rög
, 
size_t
 
n
);

89 * 
∑rs⁄_°rdup
(c⁄° *
°rög
);

90 
is_utf16_hex
(c⁄° *
°rög
);

91 
num_byãs_ö_utf8_£quí˚
(
c
);

92 
vîify_utf8_£quí˚
(c⁄° *
°rög
, *
Àn
);

93 
is_vÆid_utf8
(c⁄° *
°rög
, 
size_t
 
°rög_Àn
);

94 
is_decimÆ
(c⁄° *
°rög
, 
size_t
 
Àngth
);

97 
JSON_Obje˘
 * 
js⁄_obje˘_öô
();

98 
JSON_Sètus
 
js⁄_obje˘_add
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, 
JSON_VÆue
 *
vÆue
);

99 
JSON_Sètus
 
js⁄_obje˘_ªsize
(
JSON_Obje˘
 *
obje˘
, 
size_t
 
√w_ˇ∑côy
);

100 
JSON_VÆue
 * 
js⁄_obje˘_ngë_vÆue
(c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, 
size_t
 
n
);

101 
js⁄_obje˘_‰ì
(
JSON_Obje˘
 *
obje˘
);

104 
JSON_Aºay
 * 
js⁄_¨øy_öô
();

105 
JSON_Sètus
 
js⁄_¨øy_add
(
JSON_Aºay
 *
¨øy
, 
JSON_VÆue
 *
vÆue
);

106 
JSON_Sètus
 
js⁄_¨øy_ªsize
(
JSON_Aºay
 *
¨øy
, 
size_t
 
√w_ˇ∑côy
);

107 
js⁄_¨øy_‰ì
(
JSON_Aºay
 *
¨øy
);

110 
JSON_VÆue
 * 
js⁄_vÆue_öô_°rög_no_c›y
(*
°rög
);

113 
skù_quŸes
(c⁄° **
°rög
);

114 
∑r£_utf_16
(c⁄° **
u≈ro˚s£d
, **
¥o˚s£d
);

115 * 
¥o˚ss_°rög
(c⁄° *
öput
, 
size_t
 
Àn
);

116 * 
gë_quŸed_°rög
(c⁄° **
°rög
);

117 
JSON_VÆue
 * 
∑r£_obje˘_vÆue
(c⁄° **
°rög
, 
size_t
 
√°ög
);

118 
JSON_VÆue
 * 
∑r£_¨øy_vÆue
(c⁄° **
°rög
, 
size_t
 
√°ög
);

119 
JSON_VÆue
 * 
∑r£_°rög_vÆue
(c⁄° **
°rög
);

120 
JSON_VÆue
 * 
∑r£_boﬁón_vÆue
(c⁄° **
°rög
);

121 
JSON_VÆue
 * 
∑r£_numbî_vÆue
(c⁄° **
°rög
);

122 
JSON_VÆue
 * 
∑r£_nuŒ_vÆue
(c⁄° **
°rög
);

123 
JSON_VÆue
 * 
∑r£_vÆue
(c⁄° **
°rög
, 
size_t
 
√°ög
);

126 
js⁄_£rülize_to_buf„r_r
(c⁄° 
JSON_VÆue
 *
vÆue
, *
buf
, 
Àvñ
, 
is_¥ëty
, *
num_buf
);

127 
js⁄_£rülize_°rög
(c⁄° *
°rög
, *
buf
);

128 
≠≥nd_ödít
(*
buf
, 
Àvñ
);

129 
≠≥nd_°rög
(*
buf
, c⁄° *
°rög
);

132 * 
	$∑rs⁄_°∫dup
(c⁄° *
°rög
, 
size_t
 
n
) {

133 *
ouçut_°rög
 = (*)
	`lgw_mÆloc
(
n
 + 1);

134 i‡(!
ouçut_°rög
)

135  
NULL
;

136 
ouçut_°rög
[
n
] = '\0';

137 
	`°∫˝y
(
ouçut_°rög
, 
°rög
, 
n
);

138  
ouçut_°rög
;

139 
	}
}

141 * 
	$∑rs⁄_°rdup
(c⁄° *
°rög
) {

142  
	`∑rs⁄_°∫dup
(
°rög
, 
	`°æí
(string));

143 
	}
}

145 
	$is_utf16_hex
(c⁄° *
s
) {

146  
	`isxdigô
(
s
[0]) && isxdigit(s[1]) && isxdigit(s[2]) && isxdigit(s[3]);

147 
	}
}

149 
	$num_byãs_ö_utf8_£quí˚
(
c
) {

150 i‡(
c
 =0xC0 || c =0xC1 || c > 0xF4 || 
	`IS_CONT
(c)) {

152 } i‡((
c
 & 0x80) == 0) {

154 } i‡((
c
 & 0xE0) == 0xC0) {

156 } i‡((
c
 & 0xF0) == 0xE0) {

158 } i‡((
c
 & 0xF8) == 0xF0) {

162 
	}
}

164 
	$vîify_utf8_£quí˚
(c⁄° *
°rög
, *
Àn
) {

165 
˝
 = 0;

166 *
Àn
 = 
	`num_byãs_ö_utf8_£quí˚
(
°rög
[0]);

168 i‡(*
Àn
 == 1) {

169 
˝
 = 
°rög
[0];

170 } i‡(*
Àn
 =2 && 
	`IS_CONT
(
°rög
[1])) {

171 
˝
 = 
°rög
[0] & 0x1F;

172 
˝
 = (˝ << 6Ë| (
°rög
[1] & 0x3F);

173 } i‡(*
Àn
 =3 && 
	`IS_CONT
(
°rög
[1]) && IS_CONT(string[2])) {

174 
˝
 = (()
°rög
[0]) & 0xF;

175 
˝
 = (˝ << 6Ë| (
°rög
[1] & 0x3F);

176 
˝
 = (˝ << 6Ë| (
°rög
[2] & 0x3F);

177 } i‡(*
Àn
 =4 && 
	`IS_CONT
(
°rög
[1]) && IS_CONT(string[2]) && IS_CONT(string[3])) {

178 
˝
 = 
°rög
[0] & 0x7;

179 
˝
 = (˝ << 6Ë| (
°rög
[1] & 0x3F);

180 
˝
 = (˝ << 6Ë| (
°rög
[2] & 0x3F);

181 
˝
 = (˝ << 6Ë| (
°rög
[3] & 0x3F);

187 i‡((
˝
 < 0x80 && *
Àn
 > 1) ||

188 (
˝
 < 0x800 && *
Àn
 > 2) ||

189 (
˝
 < 0x10000 && *
Àn
 > 3)) {

194 i‡(
˝
 > 0x10FFFF) {

199 i‡(
˝
 >= 0xD800 && cp <= 0xDFFF) {

204 
	}
}

206 
	$is_vÆid_utf8
(c⁄° *
°rög
, 
size_t
 
°rög_Àn
) {

207 
Àn
 = 0;

208 c⁄° *
°rög_íd
 = 
°rög
 + 
°rög_Àn
;

209 
°rög
 < 
°rög_íd
) {

210 i‡(!
	`vîify_utf8_£quí˚
((c⁄° *)
°rög
, &
Àn
)) {

213 
°rög
 +
Àn
;

216 
	}
}

218 
	$is_decimÆ
(c⁄° *
°rög
, 
size_t
 
Àngth
) {

219 i‡(
Àngth
 > 1 && 
°rög
[0] == '0' && string[1] != '.')

221 i‡(
Àngth
 > 2 && !
	`°∫cmp
(
°rög
, "-0", 2) && string[2] != '.')

223 
Àngth
--)

224 i‡(
	`°rchr
("xX", 
°rög
[
Àngth
]))

227 
	}
}

229 * 
	$ªad_fûe
(c⁄° * 
fûíame
) {

230 
FILE
 *
Â
 = 
	`f›í
(
fûíame
, "r");

231 
size_t
 
fûe_size
;

232 
pos
;

233 *
fûe_c⁄ã¡s
;

234 i‡(!
Â
)

235  
NULL
;

236 
	`f£ek
(
Â
, 0L, 
SEEK_END
);

237 
pos
 = 
	`·ñl
(
Â
);

238 i‡(
pos
 < 0) {

239 
	`f˛o£
(
Â
);

240  
NULL
;

242 
fûe_size
 = 
pos
;

243 
	`ªwöd
(
Â
);

244 
fûe_c⁄ã¡s
 = (*)
	`lgw_mÆloc
((Ë* (
fûe_size
 + 1));

245 i‡(!
fûe_c⁄ã¡s
) {

246 
	`f˛o£
(
Â
);

247  
NULL
;

249 i‡(
	`‰ód
(
fûe_c⁄ã¡s
, 
fûe_size
, 1, 
Â
) < 1) {

250 i‡(
	`„º‹
(
Â
)) {

251 
	`f˛o£
(
Â
);

252 
	`lgw_‰ì
(
fûe_c⁄ã¡s
);

253  
NULL
;

256 
	`f˛o£
(
Â
);

257 
fûe_c⁄ã¡s
[
fûe_size
] = '\0';

258  
fûe_c⁄ã¡s
;

259 
	}
}

261 
	$ªmove_commíts
(*
°rög
, c⁄° *
°¨t_tokí
, c⁄° *
íd_tokí
) {

262 
ö_°rög
 = 0, 
esˇ≥d
 = 0;

263 
size_t
 
i
;

264 *
±r
 = 
NULL
, 
cuºít_ch¨
;

265 
size_t
 
°¨t_tokí_Àn
 = 
	`°æí
(
°¨t_tokí
);

266 
size_t
 
íd_tokí_Àn
 = 
	`°æí
(
íd_tokí
);

267 i‡(
°¨t_tokí_Àn
 =0 || 
íd_tokí_Àn
 == 0)

269 (
cuºít_ch¨
 = *
°rög
) != '\0') {

270 i‡(
cuºít_ch¨
 ='\\' && !
esˇ≥d
) {

271 
esˇ≥d
 = 1;

272 
°rög
++;

274 } i‡(
cuºít_ch¨
 ='\"' && !
esˇ≥d
) {

275 
ö_°rög
 = !in_string;

276 } i‡(!
ö_°rög
 && 
	`°∫cmp
(
°rög
, 
°¨t_tokí
, 
°¨t_tokí_Àn
) == 0) {

277 
i
 = 0; i < 
°¨t_tokí_Àn
; i++)

278 
°rög
[
i
] = ' ';

279 
°rög
 = såög + 
°¨t_tokí_Àn
;

280 
±r
 = 
	`°r°r
(
°rög
, 
íd_tokí
);

281 i‡(!
±r
)

283 
i
 = 0; i < (
±r
 - 
°rög
Ë+ 
íd_tokí_Àn
; i++)

284 
°rög
[
i
] = ' ';

285 
°rög
 = 
±r
 + 
íd_tokí_Àn
 - 1;

287 
esˇ≥d
 = 0;

288 
°rög
++;

290 
	}
}

293 
JSON_Obje˘
 * 
	$js⁄_obje˘_öô
() {

294 
JSON_Obje˘
 *
√w_obj
 = (JSON_Obje˘*)
	`lgw_mÆloc
((JSON_Object));

295 i‡(!
√w_obj
)

296  
NULL
;

297 
√w_obj
->
«mes
 = (**)
NULL
;

298 
√w_obj
->
vÆues
 = (
JSON_VÆue
**)
NULL
;

299 
√w_obj
->
ˇ∑côy
 = 0;

300 
√w_obj
->
cou¡
 = 0;

301  
√w_obj
;

302 
	}
}

304 
JSON_Sètus
 
	$js⁄_obje˘_add
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, 
JSON_VÆue
 *
vÆue
) {

305 
size_t
 
ödex
 = 0;

306 i‡(
obje˘
 =
NULL
 || 
«me
 =NULL || 
vÆue
 == NULL) {

307  
JSONFaûuª
;

309 i‡(
obje˘
->
cou¡
 >obje˘->
ˇ∑côy
) {

310 
size_t
 
√w_ˇ∑côy
 = 
	`MAX
(
obje˘
->
ˇ∑côy
 * 2, 
STARTING_CAPACITY
);

311 i‡(
√w_ˇ∑côy
 > 
OBJECT_MAX_CAPACITY
)

312  
JSONFaûuª
;

313 i‡(
	`js⁄_obje˘_ªsize
(
obje˘
, 
√w_ˇ∑côy
Ë=
JSONFaûuª
)

314  
JSONFaûuª
;

316 i‡(
	`js⁄_obje˘_gë_vÆue
(
obje˘
, 
«me
Ë!
NULL
)

317  
JSONFaûuª
;

318 
ödex
 = 
obje˘
->
cou¡
;

319 
obje˘
->
«mes
[
ödex
] = 
	`∑rs⁄_°rdup
(
«me
);

320 i‡(
obje˘
->
«mes
[
ödex
] =
NULL
)

321  
JSONFaûuª
;

322 
obje˘
->
vÆues
[
ödex
] = 
vÆue
;

323 
obje˘
->
cou¡
++;

324  
JSONSuc˚ss
;

325 
	}
}

327 
JSON_Sètus
 
	$js⁄_obje˘_ªsize
(
JSON_Obje˘
 *
obje˘
, 
size_t
 
√w_ˇ∑côy
) {

328 **
ãmp_«mes
 = 
NULL
;

329 
JSON_VÆue
 **
ãmp_vÆues
 = 
NULL
;

331 i‡((
obje˘
->
«mes
 =
NULL
 && obje˘->
vÆues
 != NULL) ||

332 (
obje˘
->
«mes
 !
NULL
 && obje˘->
vÆues
 == NULL) ||

333 
√w_ˇ∑côy
 == 0) {

334  
JSONFaûuª
;

337 
ãmp_«mes
 = (**)
	`lgw_mÆloc
(
√w_ˇ∑côy
 * (*));

338 i‡(
ãmp_«mes
 =
NULL
)

339  
JSONFaûuª
;

341 
ãmp_vÆues
 = (
JSON_VÆue
**)
	`lgw_mÆloc
(
√w_ˇ∑côy
 * (JSON_Value*));

342 i‡(
ãmp_vÆues
 =
NULL
) {

343 
	`lgw_‰ì
(
ãmp_«mes
);

344  
JSONFaûuª
;

347 i‡(
obje˘
->
«mes
 !
NULL
 && obje˘->
vÆues
 !NULL && obje˘->
cou¡
 > 0) {

348 
	`mem˝y
(
ãmp_«mes
, 
obje˘
->
«mes
, obje˘->
cou¡
 * (*));

349 
	`mem˝y
(
ãmp_vÆues
, 
obje˘
->
vÆues
, obje˘->
cou¡
 * (
JSON_VÆue
*));

351 
	`lgw_‰ì
(
obje˘
->
«mes
);

352 
	`lgw_‰ì
(
obje˘
->
vÆues
);

353 
obje˘
->
«mes
 = 
ãmp_«mes
;

354 
obje˘
->
vÆues
 = 
ãmp_vÆues
;

355 
obje˘
->
ˇ∑côy
 = 
√w_ˇ∑côy
;

356  
JSONSuc˚ss
;

357 
	}
}

359 
JSON_VÆue
 * 
	$js⁄_obje˘_ngë_vÆue
(c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, 
size_t
 
n
) {

360 
size_t
 
i
, 
«me_Àngth
;

361 
i
 = 0; i < 
	`js⁄_obje˘_gë_cou¡
(
obje˘
); i++) {

362 
«me_Àngth
 = 
	`°æí
(
obje˘
->
«mes
[
i
]);

363 i‡(
«me_Àngth
 !
n
)

365 i‡(
	`°∫cmp
(
obje˘
->
«mes
[
i
], 
«me
, 
n
) == 0)

366  
obje˘
->
vÆues
[
i
];

368  
NULL
;

369 
	}
}

371 
	$js⁄_obje˘_‰ì
(
JSON_Obje˘
 *
obje˘
) {

372 
obje˘
->
cou¡
--) {

373 
	`lgw_‰ì
(
obje˘
->
«mes
[obje˘->
cou¡
]);

374 
	`js⁄_vÆue_‰ì
(
obje˘
->
vÆues
[obje˘->
cou¡
]);

376 
	`lgw_‰ì
(
obje˘
->
«mes
);

377 
	`lgw_‰ì
(
obje˘
->
vÆues
);

378 
	`lgw_‰ì
(
obje˘
);

379 
	}
}

382 
JSON_Aºay
 * 
	$js⁄_¨øy_öô
() {

383 
JSON_Aºay
 *
√w_¨øy
 = (JSON_Aºay*)
	`lgw_mÆloc
((JSON_Array));

384 i‡(!
√w_¨øy
)

385  
NULL
;

386 
√w_¨øy
->
ôems
 = (
JSON_VÆue
**)
NULL
;

387 
√w_¨øy
->
ˇ∑côy
 = 0;

388 
√w_¨øy
->
cou¡
 = 0;

389  
√w_¨øy
;

390 
	}
}

392 
JSON_Sètus
 
	$js⁄_¨øy_add
(
JSON_Aºay
 *
¨øy
, 
JSON_VÆue
 *
vÆue
) {

393 i‡(
¨øy
->
cou¡
 >¨øy->
ˇ∑côy
) {

394 
size_t
 
√w_ˇ∑côy
 = 
	`MAX
(
¨øy
->
ˇ∑côy
 * 2, 
STARTING_CAPACITY
);

395 i‡(
√w_ˇ∑côy
 > 
ARRAY_MAX_CAPACITY
)

396  
JSONFaûuª
;

397 i‡(
	`js⁄_¨øy_ªsize
(
¨øy
, 
√w_ˇ∑côy
Ë=
JSONFaûuª
)

398  
JSONFaûuª
;

400 
¨øy
->
ôems
[¨øy->
cou¡
] = 
vÆue
;

401 
¨øy
->
cou¡
++;

402  
JSONSuc˚ss
;

403 
	}
}

405 
JSON_Sètus
 
	$js⁄_¨øy_ªsize
(
JSON_Aºay
 *
¨øy
, 
size_t
 
√w_ˇ∑côy
) {

406 
JSON_VÆue
 **
√w_ôems
 = 
NULL
;

407 i‡(
√w_ˇ∑côy
 == 0) {

408  
JSONFaûuª
;

410 
√w_ôems
 = (
JSON_VÆue
**)
	`lgw_mÆloc
(
√w_ˇ∑côy
 * (JSON_Value*));

411 i‡(
√w_ôems
 =
NULL
) {

412  
JSONFaûuª
;

414 i‡(
¨øy
->
ôems
 !
NULL
 &&áºay->
cou¡
 > 0) {

415 
	`mem˝y
(
√w_ôems
, 
¨øy
->
ôems
,áºay->
cou¡
 * (
JSON_VÆue
*));

417 
	`lgw_‰ì
(
¨øy
->
ôems
);

418 
¨øy
->
ôems
 = 
√w_ôems
;

419 
¨øy
->
ˇ∑côy
 = 
√w_ˇ∑côy
;

420  
JSONSuc˚ss
;

421 
	}
}

423 
	$js⁄_¨øy_‰ì
(
JSON_Aºay
 *
¨øy
) {

424 
¨øy
->
cou¡
--)

425 
	`js⁄_vÆue_‰ì
(
¨øy
->
ôems
[¨øy->
cou¡
]);

426 
	`lgw_‰ì
(
¨øy
->
ôems
);

427 
	`lgw_‰ì
(
¨øy
);

428 
	}
}

431 
JSON_VÆue
 * 
	$js⁄_vÆue_öô_°rög_no_c›y
(*
°rög
) {

432 
JSON_VÆue
 *
√w_vÆue
 = (JSON_VÆue*)
	`lgw_mÆloc
((JSON_Value));

433 i‡(!
√w_vÆue
)

434  
NULL
;

435 
√w_vÆue
->
ty≥
 = 
JSONSåög
;

436 
√w_vÆue
->
vÆue
.
°rög
 = string;

437  
√w_vÆue
;

438 
	}
}

441 
	$skù_quŸes
(c⁄° **
°rög
) {

442 
	`SKIP_CHAR
(
°rög
);

443 **
°rög
 != '\"') {

444 i‡(**
°rög
 == '\0')

446 i‡(**
°rög
 == '\\') {

447 
	`SKIP_CHAR
(
°rög
);

448 i‡(**
°rög
 == '\0')

451 
	`SKIP_CHAR
(
°rög
);

453 
	`SKIP_CHAR
(
°rög
);

454 
	}
}

456 
	$∑r£_utf_16
(c⁄° **
u≈ro˚s£d
, **
¥o˚s£d
) {

457 
˝
, 
Àad
, 
åaû
;

458 *
¥o˚s£d_±r
 = *
¥o˚s£d
;

459 c⁄° *
u≈ro˚s£d_±r
 = *
u≈ro˚s£d
;

460 
u≈ro˚s£d_±r
++;

461 i‡(!
	`is_utf16_hex
((c⁄° *)
u≈ro˚s£d_±r
Ë|| 
	`ssˇnf
(u≈ro˚s£d_±r, "%4x", &
˝
Ë=
EOF
)

462  
JSONFaûuª
;

463 i‡(
˝
 < 0x80) {

464 *
¥o˚s£d_±r
 = 
˝
;

465 } i‡(
˝
 < 0x800) {

466 *
¥o˚s£d_±r
++ = ((
˝
 >> 6) & 0x1F) | 0xC0;

467 *
¥o˚s£d_±r
 = ((
˝
 ) & 0x3F) | 0x80;

468 } i‡(
˝
 < 0xD800 || cp > 0xDFFF) {

469 *
¥o˚s£d_±r
++ = ((
˝
 >> 12) & 0x0F) | 0xE0;

470 *
¥o˚s£d_±r
++ = ((
˝
 >> 6) & 0x3F) | 0x80;

471 *
¥o˚s£d_±r
 = ((
˝
 ) & 0x3F) | 0x80;

472 } i‡(
˝
 >= 0xD800 && cp <= 0xDBFF) {

473 
Àad
 = 
˝
;

474 
u≈ro˚s£d_±r
 += 4;

475 i‡(*
u≈ro˚s£d_±r
++ != '\\' || *unprocessed_ptr++ != 'u' ||

476 !
	`is_utf16_hex
((c⁄° *)
u≈ro˚s£d_±r
) ||

477 
	`ssˇnf
(
u≈ro˚s£d_±r
, "%4x", &
åaû
Ë=
EOF
 ||

478 
åaû
 < 0xDC00 ||Årail > 0xDFFF) {

479  
JSONFaûuª
;

481 
˝
 = ((((
Àad
-0xD800)&0x3FF)<<10)|((
åaû
-0xDC00)&0x3FF))+0x010000;

482 *
¥o˚s£d_±r
++ = (((
˝
 >> 18) & 0x07) | 0xF0);

483 *
¥o˚s£d_±r
++ = (((
˝
 >> 12) & 0x3F) | 0x80);

484 *
¥o˚s£d_±r
++ = (((
˝
 >> 6) & 0x3F) | 0x80);

485 *
¥o˚s£d_±r
 = (((
˝
 ) & 0x3F) | 0x80);

487  
JSONFaûuª
;

489 
u≈ro˚s£d_±r
 += 3;

490 *
¥o˚s£d
 = 
¥o˚s£d_±r
;

491 *
u≈ro˚s£d
 = 
u≈ro˚s£d_±r
;

492  
JSONSuc˚ss
;

493 
	}
}

498 * 
	$¥o˚ss_°rög
(c⁄° *
öput
, 
size_t
 
Àn
) {

499 c⁄° *
öput_±r
 = 
öput
;

500 
size_t
 
öôül_size
 = (
Àn
 + 1) * ();

501 
size_t
 
föÆ_size
 = 0;

502 *
ouçut
 = (*)
	`lgw_mÆloc
(
öôül_size
);

503 *
ouçut_±r
 = 
ouçut
;

504 *
ªsized_ouçut
 = 
NULL
;

505 (*
öput_±r
 !'\0'Ë&& (
size_t
)(öput_±∏- 
öput
Ë< 
Àn
) {

506 i‡(*
öput_±r
 == '\\') {

507 
öput_±r
++;

508 *
öput_±r
) {

509 '\"': *
ouçut_±r
 = '\"'; ;

510 '\\': *
ouçut_±r
 = '\\'; ;

511 '/': *
ouçut_±r
 = '/'; ;

512 'b': *
ouçut_±r
 = '\b'; ;

513 'f': *
ouçut_±r
 = '\f'; ;

514 'n': *
ouçut_±r
 = '\n'; ;

515 'r': *
ouçut_±r
 = '\r'; ;

516 't': *
ouçut_±r
 = '\t'; ;

518 i‡(
	`∑r£_utf_16
(&
öput_±r
, &
ouçut_±r
Ë=
JSONFaûuª
)

519 
îr‹
;

522 
îr‹
;

524 } i‡(()*
öput_±r
 < 0x20) {

525 
îr‹
;

527 *
ouçut_±r
 = *
öput_±r
;

529 
ouçut_±r
++;

530 
öput_±r
++;

532 *
ouçut_±r
 = '\0';

534 
föÆ_size
 = (
size_t
)(
ouçut_±r
-
ouçut
) + 1;

535 
ªsized_ouçut
 = (*)
	`lgw_mÆloc
(
föÆ_size
);

536 i‡(
ªsized_ouçut
 =
NULL
)

537 
îr‹
;

538 
	`mem˝y
(
ªsized_ouçut
, 
ouçut
, 
föÆ_size
);

539 
	`lgw_‰ì
(
ouçut
);

540  
ªsized_ouçut
;

541 
îr‹
:

542 
	`lgw_‰ì
(
ouçut
);

543  
NULL
;

544 
	}
}

548 * 
	$gë_quŸed_°rög
(c⁄° **
°rög
) {

549 c⁄° *
°rög_°¨t
 = *
°rög
;

550 
size_t
 
°rög_Àn
 = 0;

551 
	`skù_quŸes
(
°rög
);

552 i‡(**
°rög
 == '\0')

553  
NULL
;

554 
°rög_Àn
 = *
°rög
 - 
°rög_°¨t
 - 2;

555  
	`¥o˚ss_°rög
(
°rög_°¨t
 + 1, 
°rög_Àn
);

556 
	}
}

558 
JSON_VÆue
 * 
	$∑r£_vÆue
(c⁄° **
°rög
, 
size_t
 
√°ög
) {

559 i‡(
√°ög
 > 
MAX_NESTING
)

560  
NULL
;

561 
	`SKIP_WHITESPACES
(
°rög
);

562 **
°rög
) {

564  
	`∑r£_obje˘_vÆue
(
°rög
, 
√°ög
 + 1);

566  
	`∑r£_¨øy_vÆue
(
°rög
, 
√°ög
 + 1);

568  
	`∑r£_°rög_vÆue
(
°rög
);

570  
	`∑r£_boﬁón_vÆue
(
°rög
);

574  
	`∑r£_numbî_vÆue
(
°rög
);

576  
	`∑r£_nuŒ_vÆue
(
°rög
);

578  
NULL
;

580 
	}
}

582 
JSON_VÆue
 * 
	$∑r£_obje˘_vÆue
(c⁄° **
°rög
, 
size_t
 
√°ög
) {

583 
JSON_VÆue
 *
ouçut_vÆue
 = 
	`js⁄_vÆue_öô_obje˘
(), *
√w_vÆue
 = 
NULL
;

584 
JSON_Obje˘
 *
ouçut_obje˘
 = 
	`js⁄_vÆue_gë_obje˘
(
ouçut_vÆue
);

585 *
√w_key
 = 
NULL
;

586 i‡(
ouçut_vÆue
 =
NULL
)

587  
NULL
;

588 
	`SKIP_CHAR
(
°rög
);

589 
	`SKIP_WHITESPACES
(
°rög
);

590 i‡(**
°rög
 == '}') {

591 
	`SKIP_CHAR
(
°rög
);

592  
ouçut_vÆue
;

594 **
°rög
 != '\0') {

595 
√w_key
 = 
	`gë_quŸed_°rög
(
°rög
);

596 
	`SKIP_WHITESPACES
(
°rög
);

597 i‡(
√w_key
 =
NULL
 || **
°rög
 != ':') {

598 
	`js⁄_vÆue_‰ì
(
ouçut_vÆue
);

599  
NULL
;

601 
	`SKIP_CHAR
(
°rög
);

602 
√w_vÆue
 = 
	`∑r£_vÆue
(
°rög
, 
√°ög
);

603 i‡(
√w_vÆue
 =
NULL
) {

604 
	`lgw_‰ì
(
√w_key
);

605 
	`js⁄_vÆue_‰ì
(
ouçut_vÆue
);

606  
NULL
;

608 if(
	`js⁄_obje˘_add
(
ouçut_obje˘
, 
√w_key
, 
√w_vÆue
Ë=
JSONFaûuª
) {

609 
	`lgw_‰ì
(
√w_key
);

610 
	`lgw_‰ì
(
√w_vÆue
);

611 
	`js⁄_vÆue_‰ì
(
ouçut_vÆue
);

612  
NULL
;

614 
	`lgw_‰ì
(
√w_key
);

615 
	`SKIP_WHITESPACES
(
°rög
);

616 i‡(**
°rög
 != ',')

618 
	`SKIP_CHAR
(
°rög
);

619 
	`SKIP_WHITESPACES
(
°rög
);

621 
	`SKIP_WHITESPACES
(
°rög
);

622 i‡(**
°rög
 != '}' ||

623 
	`js⁄_obje˘_ªsize
(
ouçut_obje˘
, 
	`js⁄_obje˘_gë_cou¡
(ouçut_obje˘)Ë=
JSONFaûuª
) {

624 
	`js⁄_vÆue_‰ì
(
ouçut_vÆue
);

625  
NULL
;

627 
	`SKIP_CHAR
(
°rög
);

628  
ouçut_vÆue
;

629 
	}
}

631 
JSON_VÆue
 * 
	$∑r£_¨øy_vÆue
(c⁄° **
°rög
, 
size_t
 
√°ög
) {

632 
JSON_VÆue
 *
ouçut_vÆue
 = 
	`js⁄_vÆue_öô_¨øy
(), *
√w_¨øy_vÆue
 = 
NULL
;

633 
JSON_Aºay
 *
ouçut_¨øy
 = 
	`js⁄_vÆue_gë_¨øy
(
ouçut_vÆue
);

634 i‡(!
ouçut_vÆue
)

635  
NULL
;

636 
	`SKIP_CHAR
(
°rög
);

637 
	`SKIP_WHITESPACES
(
°rög
);

638 i‡(**
°rög
 == ']') {

639 
	`SKIP_CHAR
(
°rög
);

640  
ouçut_vÆue
;

642 **
°rög
 != '\0') {

643 
√w_¨øy_vÆue
 = 
	`∑r£_vÆue
(
°rög
, 
√°ög
);

644 i‡(!
√w_¨øy_vÆue
) {

645 
	`js⁄_vÆue_‰ì
(
ouçut_vÆue
);

646  
NULL
;

648 if(
	`js⁄_¨øy_add
(
ouçut_¨øy
, 
√w_¨øy_vÆue
Ë=
JSONFaûuª
) {

649 
	`lgw_‰ì
(
√w_¨øy_vÆue
);

650 
	`js⁄_vÆue_‰ì
(
ouçut_vÆue
);

651  
NULL
;

653 
	`SKIP_WHITESPACES
(
°rög
);

654 i‡(**
°rög
 != ',')

656 
	`SKIP_CHAR
(
°rög
);

657 
	`SKIP_WHITESPACES
(
°rög
);

659 
	`SKIP_WHITESPACES
(
°rög
);

660 i‡(**
°rög
 != ']' ||

661 
	`js⁄_¨øy_ªsize
(
ouçut_¨øy
, 
	`js⁄_¨øy_gë_cou¡
(ouçut_¨øy)Ë=
JSONFaûuª
) {

662 
	`js⁄_vÆue_‰ì
(
ouçut_vÆue
);

663  
NULL
;

665 
	`SKIP_CHAR
(
°rög
);

666  
ouçut_vÆue
;

667 
	}
}

669 
JSON_VÆue
 * 
	$∑r£_°rög_vÆue
(c⁄° **
°rög
) {

670 
JSON_VÆue
 *
vÆue
 = 
NULL
;

671 *
√w_°rög
 = 
	`gë_quŸed_°rög
(
°rög
);

672 i‡(
√w_°rög
 =
NULL
)

673  
NULL
;

674 
vÆue
 = 
	`js⁄_vÆue_öô_°rög_no_c›y
(
√w_°rög
);

675 i‡(
vÆue
 =
NULL
) {

676 
	`lgw_‰ì
(
√w_°rög
);

677  
NULL
;

679  
vÆue
;

680 
	}
}

682 
JSON_VÆue
 * 
	$∑r£_boﬁón_vÆue
(c⁄° **
°rög
) {

683 
size_t
 
åue_tokí_size
 = 
	`SIZEOF_TOKEN
("true");

684 
size_t
 
Ál£_tokí_size
 = 
	`SIZEOF_TOKEN
("false");

685 i‡(
	`°∫cmp
("åue", *
°rög
, 
åue_tokí_size
) == 0) {

686 *
°rög
 +
åue_tokí_size
;

687  
	`js⁄_vÆue_öô_boﬁón
(1);

688 } i‡(
	`°∫cmp
("Ál£", *
°rög
, 
Ál£_tokí_size
) == 0) {

689 *
°rög
 +
Ál£_tokí_size
;

690  
	`js⁄_vÆue_öô_boﬁón
(0);

692  
NULL
;

693 
	}
}

695 
JSON_VÆue
 * 
	$∑r£_numbî_vÆue
(c⁄° **
°rög
) {

696 *
íd
;

697 
numbî
 = 
	`°πod
(*
°rög
, &
íd
);

698 
JSON_VÆue
 *
ouçut_vÆue
;

699 i‡(
	`is_decimÆ
(*
°rög
, 
íd
 - *string)) {

700 *
°rög
 = 
íd
;

701 
ouçut_vÆue
 = 
	`js⁄_vÆue_öô_numbî
(
numbî
);

703 
ouçut_vÆue
 = 
NULL
;

705  
ouçut_vÆue
;

706 
	}
}

708 
JSON_VÆue
 * 
	$∑r£_nuŒ_vÆue
(c⁄° **
°rög
) {

709 
size_t
 
tokí_size
 = 
	`SIZEOF_TOKEN
("null");

710 i‡(
	`°∫cmp
("nuŒ", *
°rög
, 
tokí_size
) == 0) {

711 *
°rög
 +
tokí_size
;

712  
	`js⁄_vÆue_öô_nuŒ
();

714  
NULL
;

715 
	}
}

718 
	#APPEND_STRING
(
°r
Ëdÿ{ 
wrôãn
 = 
	`≠≥nd_°rög
(
buf
, (str)); \

719 i‡(
wrôãn
 < 0) {  -1; } \

720 i‡(
buf
 !
NULL
Ë{ bu‡+
wrôãn
; } \

721 
wrôãn_tŸÆ
 +
wrôãn
; } 0)

	)

723 
	#APPEND_INDENT
(
Àvñ
Ëdÿ{ 
wrôãn
 = 
	`≠≥nd_ödít
(
buf
, (level)); \

724 i‡(
wrôãn
 < 0) {  -1; } \

725 i‡(
buf
 !
NULL
Ë{ bu‡+
wrôãn
; } \

726 
wrôãn_tŸÆ
 +
wrôãn
; } 0)

	)

728 
	$js⁄_£rülize_to_buf„r_r
(c⁄° 
JSON_VÆue
 *
vÆue
, *
buf
, 
Àvñ
, 
is_¥ëty
, *
num_buf
)

730 c⁄° *
key
 = 
NULL
, *
°rög
 = NULL;

731 
JSON_VÆue
 *
ãmp_vÆue
 = 
NULL
;

732 
JSON_Aºay
 *
¨øy
 = 
NULL
;

733 
JSON_Obje˘
 *
obje˘
 = 
NULL
;

734 
size_t
 
i
 = 0, 
cou¡
 = 0;

735 
num
 = 0.0;

736 
wrôãn
 = -1, 
wrôãn_tŸÆ
 = 0;

738 
	`js⁄_vÆue_gë_ty≥
(
vÆue
)) {

739 
JSONAºay
:

740 
¨øy
 = 
	`js⁄_vÆue_gë_¨øy
(
vÆue
);

741 
cou¡
 = 
	`js⁄_¨øy_gë_cou¡
(
¨øy
);

742 
	`APPEND_STRING
("[");

743 i‡(
cou¡
 > 0 && 
is_¥ëty
)

744 
	`APPEND_STRING
("\n");

745 
i
 = 0; i < 
cou¡
; i++) {

746 i‡(
is_¥ëty
)

747 
	`APPEND_INDENT
(
Àvñ
+1);

748 
ãmp_vÆue
 = 
	`js⁄_¨øy_gë_vÆue
(
¨øy
, 
i
);

749 
wrôãn
 = 
	`js⁄_£rülize_to_buf„r_r
(
ãmp_vÆue
, 
buf
, 
Àvñ
+1, 
is_¥ëty
, 
num_buf
);

750 i‡(
wrôãn
 < 0)

752 i‡(
buf
 !
NULL
)

753 
buf
 +
wrôãn
;

754 
wrôãn_tŸÆ
 +
wrôãn
;

755 i‡(
i
 < (
cou¡
 - 1))

756 
	`APPEND_STRING
(",");

757 i‡(
is_¥ëty
)

758 
	`APPEND_STRING
("\n");

760 i‡(
cou¡
 > 0 && 
is_¥ëty
)

761 
	`APPEND_INDENT
(
Àvñ
);

762 
	`APPEND_STRING
("]");

763  
wrôãn_tŸÆ
;

764 
JSONObje˘
:

765 
obje˘
 = 
	`js⁄_vÆue_gë_obje˘
(
vÆue
);

766 
cou¡
 = 
	`js⁄_obje˘_gë_cou¡
(
obje˘
);

767 
	`APPEND_STRING
("{");

768 i‡(
cou¡
 > 0 && 
is_¥ëty
)

769 
	`APPEND_STRING
("\n");

770 
i
 = 0; i < 
cou¡
; i++) {

771 
key
 = 
	`js⁄_obje˘_gë_«me
(
obje˘
, 
i
);

772 i‡(
is_¥ëty
)

773 
	`APPEND_INDENT
(
Àvñ
+1);

774 
wrôãn
 = 
	`js⁄_£rülize_°rög
(
key
, 
buf
);

775 i‡(
wrôãn
 < 0)

777 i‡(
buf
 !
NULL
)

778 
buf
 +
wrôãn
;

779 
wrôãn_tŸÆ
 +
wrôãn
;

780 
	`APPEND_STRING
(":");

781 i‡(
is_¥ëty
)

782 
	`APPEND_STRING
(" ");

783 
ãmp_vÆue
 = 
	`js⁄_obje˘_gë_vÆue
(
obje˘
, 
key
);

784 
wrôãn
 = 
	`js⁄_£rülize_to_buf„r_r
(
ãmp_vÆue
, 
buf
, 
Àvñ
+1, 
is_¥ëty
, 
num_buf
);

785 i‡(
wrôãn
 < 0)

787 i‡(
buf
 !
NULL
)

788 
buf
 +
wrôãn
;

789 
wrôãn_tŸÆ
 +
wrôãn
;

790 i‡(
i
 < (
cou¡
 - 1))

791 
	`APPEND_STRING
(",");

792 i‡(
is_¥ëty
)

793 
	`APPEND_STRING
("\n");

795 i‡(
cou¡
 > 0 && 
is_¥ëty
)

796 
	`APPEND_INDENT
(
Àvñ
);

797 
	`APPEND_STRING
("}");

798  
wrôãn_tŸÆ
;

799 
JSONSåög
:

800 
°rög
 = 
	`js⁄_vÆue_gë_°rög
(
vÆue
);

801 
wrôãn
 = 
	`js⁄_£rülize_°rög
(
°rög
, 
buf
);

802 i‡(
wrôãn
 < 0)

804 i‡(
buf
 !
NULL
)

805 
buf
 +
wrôãn
;

806 
wrôãn_tŸÆ
 +
wrôãn
;

807  
wrôãn_tŸÆ
;

808 
JSONBoﬁón
:

809 i‡(
	`js⁄_vÆue_gë_boﬁón
(
vÆue
))

810 
	`APPEND_STRING
("true");

812 
	`APPEND_STRING
("false");

813  
wrôãn_tŸÆ
;

814 
JSONNumbî
:

815 
num
 = 
	`js⁄_vÆue_gë_numbî
(
vÆue
);

816 i‡(
buf
 !
NULL
)

817 
num_buf
 = 
buf
;

818 i‡(
num
 == (()()num))

819 
wrôãn
 = 
	`•rötf
(
num_buf
, "%d", ()
num
);

821 
wrôãn
 = 
	`•rötf
(
num_buf
, 
DOUBLE_SERIALIZATION_FORMAT
, 
num
);

822 i‡(
wrôãn
 < 0)

824 i‡(
buf
 !
NULL
)

825 
buf
 +
wrôãn
;

826 
wrôãn_tŸÆ
 +
wrôãn
;

827  
wrôãn_tŸÆ
;

828 
JSONNuŒ
:

829 
	`APPEND_STRING
("null");

830  
wrôãn_tŸÆ
;

831 
JSONEº‹
:

836 
	}
}

838 
	$js⁄_£rülize_°rög
(c⁄° *
°rög
, *
buf
) {

839 
size_t
 
i
 = 0, 
Àn
 = 
	`°æí
(
°rög
);

840 
c
 = '\0';

841 
wrôãn
 = -1, 
wrôãn_tŸÆ
 = 0;

842 
	`APPEND_STRING
("\"");

843 
i
 = 0; i < 
Àn
; i++) {

844 
c
 = 
°rög
[
i
];

845 
c
) {

846 '\"': 
	`APPEND_STRING
("\\\""); ;

847 '\\': 
	`APPEND_STRING
("\\\\"); ;

848 '/': 
	`APPEND_STRING
("\\/"); ;

849 '\b': 
	`APPEND_STRING
("\\b"); ;

850 '\f': 
	`APPEND_STRING
("\\f"); ;

851 '\n': 
	`APPEND_STRING
("\\n"); ;

852 '\r': 
	`APPEND_STRING
("\\r"); ;

853 '\t': 
	`APPEND_STRING
("\\t"); ;

855 i‡(
buf
 !
NULL
) {

856 
buf
[0] = 
c
;

857 
buf
 += 1;

859 
wrôãn_tŸÆ
 += 1;

863 
	`APPEND_STRING
("\"");

864  
wrôãn_tŸÆ
;

865 
	}
}

867 
	$≠≥nd_ödít
(*
buf
, 
Àvñ
) {

868 
i
;

869 
wrôãn
 = -1, 
wrôãn_tŸÆ
 = 0;

870 
i
 = 0; i < 
Àvñ
; i++) {

871 
	`APPEND_STRING
(" ");

873  
wrôãn_tŸÆ
;

874 
	}
}

876 
	$≠≥nd_°rög
(*
buf
, c⁄° *
°rög
) {

877 i‡(
buf
 =
NULL
) {

878  ()
	`°æí
(
°rög
);

880  
	`•rötf
(
buf
, "%s", 
°rög
);

881 
	}
}

883 #unde‡
APPEND_STRING


884 #unde‡
APPEND_INDENT


887 
JSON_VÆue
 * 
	$js⁄_∑r£_fûe
(c⁄° *
fûíame
) {

888 *
fûe_c⁄ã¡s
 = 
	`ªad_fûe
(
fûíame
);

889 
JSON_VÆue
 *
ouçut_vÆue
 = 
NULL
;

890 i‡(
fûe_c⁄ã¡s
 =
NULL
)

891  
NULL
;

892 
ouçut_vÆue
 = 
	`js⁄_∑r£_°rög
(
fûe_c⁄ã¡s
);

893 
	`lgw_‰ì
(
fûe_c⁄ã¡s
);

894  
ouçut_vÆue
;

895 
	}
}

897 
JSON_VÆue
 * 
	$js⁄_∑r£_fûe_wôh_commíts
(c⁄° *
fûíame
) {

898 *
fûe_c⁄ã¡s
 = 
	`ªad_fûe
(
fûíame
);

899 
JSON_VÆue
 *
ouçut_vÆue
 = 
NULL
;

900 i‡(
fûe_c⁄ã¡s
 =
NULL
)

901  
NULL
;

902 
ouçut_vÆue
 = 
	`js⁄_∑r£_°rög_wôh_commíts
(
fûe_c⁄ã¡s
);

903 
	`lgw_‰ì
(
fûe_c⁄ã¡s
);

904  
ouçut_vÆue
;

905 
	}
}

907 
JSON_VÆue
 * 
	$js⁄_∑r£_°rög
(c⁄° *
°rög
) {

908 i‡(
°rög
 =
NULL
)

909  
NULL
;

910 
	`SKIP_WHITESPACES
(&
°rög
);

911 i‡(*
°rög
 != '{' && *string != '[')

912  
NULL
;

913  
	`∑r£_vÆue
((c⁄° **)&
°rög
, 0);

914 
	}
}

916 
JSON_VÆue
 * 
	$js⁄_∑r£_°rög_wôh_commíts
(c⁄° *
°rög
) {

917 
JSON_VÆue
 *
ªsu…
 = 
NULL
;

918 *
°rög_muèbÀ_c›y
 = 
NULL
, *
°rög_muèbÀ_c›y_±r
 = NULL;

919 
°rög_muèbÀ_c›y
 = 
	`∑rs⁄_°rdup
(
°rög
);

920 i‡(
°rög_muèbÀ_c›y
 =
NULL
)

921  
NULL
;

922 
	`ªmove_commíts
(
°rög_muèbÀ_c›y
, "/*", "*/");

923 
	`ªmove_commíts
(
°rög_muèbÀ_c›y
, "//", "\n");

924 
°rög_muèbÀ_c›y_±r
 = 
°rög_muèbÀ_c›y
;

925 
	`SKIP_WHITESPACES
(&
°rög_muèbÀ_c›y_±r
);

926 i‡(*
°rög_muèbÀ_c›y_±r
 != '{' && *string_mutable_copy_ptr != '[') {

927 
	`lgw_‰ì
(
°rög_muèbÀ_c›y
);

928  
NULL
;

930 
ªsu…
 = 
	`∑r£_vÆue
((c⁄° **)&
°rög_muèbÀ_c›y_±r
, 0);

931 
	`lgw_‰ì
(
°rög_muèbÀ_c›y
);

932  
ªsu…
;

933 
	}
}

938 
JSON_VÆue
 * 
	$js⁄_obje˘_gë_vÆue
(c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
) {

939 i‡(
obje˘
 =
NULL
 || 
«me
 == NULL)

940  
NULL
;

941  
	`js⁄_obje˘_ngë_vÆue
(
obje˘
, 
«me
, 
	`°æí
(name));

942 
	}
}

944 c⁄° * 
	$js⁄_obje˘_gë_°rög
(c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
) {

945  
	`js⁄_vÆue_gë_°rög
(
	`js⁄_obje˘_gë_vÆue
(
obje˘
, 
«me
));

946 
	}
}

948 
	$js⁄_obje˘_gë_numbî
(c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
) {

949  
	`js⁄_vÆue_gë_numbî
(
	`js⁄_obje˘_gë_vÆue
(
obje˘
, 
«me
));

950 
	}
}

952 
JSON_Obje˘
 * 
	$js⁄_obje˘_gë_obje˘
(c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
) {

953  
	`js⁄_vÆue_gë_obje˘
(
	`js⁄_obje˘_gë_vÆue
(
obje˘
, 
«me
));

954 
	}
}

956 
JSON_Aºay
 * 
	$js⁄_obje˘_gë_¨øy
(c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
) {

957  
	`js⁄_vÆue_gë_¨øy
(
	`js⁄_obje˘_gë_vÆue
(
obje˘
, 
«me
));

958 
	}
}

960 
	$js⁄_obje˘_gë_boﬁón
(c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
) {

961  
	`js⁄_vÆue_gë_boﬁón
(
	`js⁄_obje˘_gë_vÆue
(
obje˘
, 
«me
));

962 
	}
}

964 
JSON_VÆue
 * 
	$js⁄_obje˘_dŸgë_vÆue
(c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
) {

965 c⁄° *
dŸ_posôi⁄
 = 
	`°rchr
(
«me
, '.');

966 i‡(!
dŸ_posôi⁄
)

967  
	`js⁄_obje˘_gë_vÆue
(
obje˘
, 
«me
);

968 
obje˘
 = 
	`js⁄_vÆue_gë_obje˘
(
	`js⁄_obje˘_ngë_vÆue
(obje˘, 
«me
, 
dŸ_posôi⁄
 -Çame));

969  
	`js⁄_obje˘_dŸgë_vÆue
(
obje˘
, 
dŸ_posôi⁄
 + 1);

970 
	}
}

972 c⁄° * 
	$js⁄_obje˘_dŸgë_°rög
(c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
) {

973  
	`js⁄_vÆue_gë_°rög
(
	`js⁄_obje˘_dŸgë_vÆue
(
obje˘
, 
«me
));

974 
	}
}

976 
	$js⁄_obje˘_dŸgë_numbî
(c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
) {

977  
	`js⁄_vÆue_gë_numbî
(
	`js⁄_obje˘_dŸgë_vÆue
(
obje˘
, 
«me
));

978 
	}
}

980 
JSON_Obje˘
 * 
	$js⁄_obje˘_dŸgë_obje˘
(c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
) {

981  
	`js⁄_vÆue_gë_obje˘
(
	`js⁄_obje˘_dŸgë_vÆue
(
obje˘
, 
«me
));

982 
	}
}

984 
JSON_Aºay
 * 
	$js⁄_obje˘_dŸgë_¨øy
(c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
) {

985  
	`js⁄_vÆue_gë_¨øy
(
	`js⁄_obje˘_dŸgë_vÆue
(
obje˘
, 
«me
));

986 
	}
}

988 
	$js⁄_obje˘_dŸgë_boﬁón
(c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
) {

989  
	`js⁄_vÆue_gë_boﬁón
(
	`js⁄_obje˘_dŸgë_vÆue
(
obje˘
, 
«me
));

990 
	}
}

992 
size_t
 
	$js⁄_obje˘_gë_cou¡
(c⁄° 
JSON_Obje˘
 *
obje˘
) {

993  
obje˘
 ? obje˘->
cou¡
 : 0;

994 
	}
}

996 c⁄° * 
	$js⁄_obje˘_gë_«me
(c⁄° 
JSON_Obje˘
 *
obje˘
, 
size_t
 
ödex
) {

997 i‡(
ödex
 >
	`js⁄_obje˘_gë_cou¡
(
obje˘
))

998  
NULL
;

999  
obje˘
->
«mes
[
ödex
];

1000 
	}
}

1003 
JSON_VÆue
 * 
	$js⁄_¨øy_gë_vÆue
(c⁄° 
JSON_Aºay
 *
¨øy
, 
size_t
 
ödex
) {

1004 i‡(
ödex
 >
	`js⁄_¨øy_gë_cou¡
(
¨øy
))

1005  
NULL
;

1006  
¨øy
->
ôems
[
ödex
];

1007 
	}
}

1009 c⁄° * 
	$js⁄_¨øy_gë_°rög
(c⁄° 
JSON_Aºay
 *
¨øy
, 
size_t
 
ödex
) {

1010  
	`js⁄_vÆue_gë_°rög
(
	`js⁄_¨øy_gë_vÆue
(
¨øy
, 
ödex
));

1011 
	}
}

1013 
	$js⁄_¨øy_gë_numbî
(c⁄° 
JSON_Aºay
 *
¨øy
, 
size_t
 
ödex
) {

1014  
	`js⁄_vÆue_gë_numbî
(
	`js⁄_¨øy_gë_vÆue
(
¨øy
, 
ödex
));

1015 
	}
}

1017 
JSON_Obje˘
 * 
	$js⁄_¨øy_gë_obje˘
(c⁄° 
JSON_Aºay
 *
¨øy
, 
size_t
 
ödex
) {

1018  
	`js⁄_vÆue_gë_obje˘
(
	`js⁄_¨øy_gë_vÆue
(
¨øy
, 
ödex
));

1019 
	}
}

1021 
JSON_Aºay
 * 
	$js⁄_¨øy_gë_¨øy
(c⁄° 
JSON_Aºay
 *
¨øy
, 
size_t
 
ödex
) {

1022  
	`js⁄_vÆue_gë_¨øy
(
	`js⁄_¨øy_gë_vÆue
(
¨øy
, 
ödex
));

1023 
	}
}

1025 
	$js⁄_¨øy_gë_boﬁón
(c⁄° 
JSON_Aºay
 *
¨øy
, 
size_t
 
ödex
) {

1026  
	`js⁄_vÆue_gë_boﬁón
(
	`js⁄_¨øy_gë_vÆue
(
¨øy
, 
ödex
));

1027 
	}
}

1029 
size_t
 
	$js⁄_¨øy_gë_cou¡
(c⁄° 
JSON_Aºay
 *
¨øy
) {

1030  
¨øy
 ?áºay->
cou¡
 : 0;

1031 
	}
}

1034 
JSON_VÆue_Ty≥
 
	$js⁄_vÆue_gë_ty≥
(c⁄° 
JSON_VÆue
 *
vÆue
) {

1035  
vÆue
 ? vÆue->
ty≥
 : 
JSONEº‹
;

1036 
	}
}

1038 
JSON_Obje˘
 * 
	$js⁄_vÆue_gë_obje˘
(c⁄° 
JSON_VÆue
 *
vÆue
) {

1039  
	`js⁄_vÆue_gë_ty≥
(
vÆue
Ë=
JSONObje˘
 ? vÆue->vÆue.
obje˘
 : 
NULL
;

1040 
	}
}

1042 
JSON_Aºay
 * 
	$js⁄_vÆue_gë_¨øy
(c⁄° 
JSON_VÆue
 *
vÆue
) {

1043  
	`js⁄_vÆue_gë_ty≥
(
vÆue
Ë=
JSONAºay
 ? vÆue->vÆue.
¨øy
 : 
NULL
;

1044 
	}
}

1046 c⁄° * 
	$js⁄_vÆue_gë_°rög
(c⁄° 
JSON_VÆue
 *
vÆue
) {

1047  
	`js⁄_vÆue_gë_ty≥
(
vÆue
Ë=
JSONSåög
 ? vÆue->vÆue.
°rög
 : 
NULL
;

1048 
	}
}

1050 
	$js⁄_vÆue_gë_numbî
(c⁄° 
JSON_VÆue
 *
vÆue
) {

1051  
	`js⁄_vÆue_gë_ty≥
(
vÆue
Ë=
JSONNumbî
 ? vÆue->vÆue.
numbî
 : 0;

1052 
	}
}

1054 
	$js⁄_vÆue_gë_boﬁón
(c⁄° 
JSON_VÆue
 *
vÆue
) {

1055  
	`js⁄_vÆue_gë_ty≥
(
vÆue
Ë=
JSONBoﬁón
 ? vÆue->vÆue.
boﬁón
 : -1;

1056 
	}
}

1058 
	$js⁄_vÆue_‰ì
(
JSON_VÆue
 *
vÆue
) {

1059 
	`js⁄_vÆue_gë_ty≥
(
vÆue
)) {

1060 
JSONObje˘
:

1061 
	`js⁄_obje˘_‰ì
(
vÆue
->vÆue.
obje˘
);

1063 
JSONSåög
:

1064 i‡(
vÆue
->vÆue.
°rög
Ë{ 
	`lgw_‰ì
(value->value.string); }

1066 
JSONAºay
:

1067 
	`js⁄_¨øy_‰ì
(
vÆue
->vÆue.
¨øy
);

1072 
	`lgw_‰ì
(
vÆue
);

1073 
	}
}

1075 
JSON_VÆue
 * 
	$js⁄_vÆue_öô_obje˘
() {

1076 
JSON_VÆue
 *
√w_vÆue
 = (JSON_VÆue*)
	`lgw_mÆloc
((JSON_Value));

1077 i‡(!
√w_vÆue
)

1078  
NULL
;

1079 
√w_vÆue
->
ty≥
 = 
JSONObje˘
;

1080 
√w_vÆue
->
vÆue
.
obje˘
 = 
	`js⁄_obje˘_öô
();

1081 i‡(!
√w_vÆue
->
vÆue
.
obje˘
) {

1082 
	`lgw_‰ì
(
√w_vÆue
);

1083  
NULL
;

1085  
√w_vÆue
;

1086 
	}
}

1088 
JSON_VÆue
 * 
	$js⁄_vÆue_öô_¨øy
() {

1089 
JSON_VÆue
 *
√w_vÆue
 = (JSON_VÆue*)
	`lgw_mÆloc
((JSON_Value));

1090 i‡(!
√w_vÆue
)

1091  
NULL
;

1092 
√w_vÆue
->
ty≥
 = 
JSONAºay
;

1093 
√w_vÆue
->
vÆue
.
¨øy
 = 
	`js⁄_¨øy_öô
();

1094 i‡(!
√w_vÆue
->
vÆue
.
¨øy
) {

1095 
	`lgw_‰ì
(
√w_vÆue
);

1096  
NULL
;

1098  
√w_vÆue
;

1099 
	}
}

1101 
JSON_VÆue
 * 
	$js⁄_vÆue_öô_°rög
(c⁄° *
°rög
) {

1102 *
c›y
 = 
NULL
;

1103 
JSON_VÆue
 *
vÆue
;

1104 
size_t
 
°rög_Àn
 = 0;

1105 i‡(
°rög
 =
NULL
)

1106  
NULL
;

1107 
°rög_Àn
 = 
	`°æí
(
°rög
);

1108 i‡(!
	`is_vÆid_utf8
(
°rög
, 
°rög_Àn
))

1109  
NULL
;

1110 
c›y
 = 
	`∑rs⁄_°∫dup
(
°rög
, 
°rög_Àn
);

1111 i‡(
c›y
 =
NULL
)

1112  
NULL
;

1113 
vÆue
 = 
	`js⁄_vÆue_öô_°rög_no_c›y
(
c›y
);

1114 i‡(
vÆue
 =
NULL
)

1115 
	`lgw_‰ì
(
c›y
);

1116  
vÆue
;

1117 
	}
}

1119 
JSON_VÆue
 * 
	$js⁄_vÆue_öô_numbî
(
numbî
) {

1120 
JSON_VÆue
 *
√w_vÆue
 = (JSON_VÆue*)
	`lgw_mÆloc
((JSON_Value));

1121 i‡(!
√w_vÆue
)

1122  
NULL
;

1123 
√w_vÆue
->
ty≥
 = 
JSONNumbî
;

1124 
√w_vÆue
->
vÆue
.
numbî
 =Çumber;

1125  
√w_vÆue
;

1126 
	}
}

1128 
JSON_VÆue
 * 
	$js⁄_vÆue_öô_boﬁón
(
boﬁón
) {

1129 
JSON_VÆue
 *
√w_vÆue
 = (JSON_VÆue*)
	`lgw_mÆloc
((JSON_Value));

1130 i‡(!
√w_vÆue
)

1131  
NULL
;

1132 
√w_vÆue
->
ty≥
 = 
JSONBoﬁón
;

1133 
√w_vÆue
->
vÆue
.
boﬁón
 = boolean ? 1 : 0;

1134  
√w_vÆue
;

1135 
	}
}

1137 
JSON_VÆue
 * 
	$js⁄_vÆue_öô_nuŒ
() {

1138 
JSON_VÆue
 *
√w_vÆue
 = (JSON_VÆue*)
	`lgw_mÆloc
((JSON_Value));

1139 i‡(!
√w_vÆue
)

1140  
NULL
;

1141 
√w_vÆue
->
ty≥
 = 
JSONNuŒ
;

1142  
√w_vÆue
;

1143 
	}
}

1145 
JSON_VÆue
 * 
	$js⁄_vÆue_dìp_c›y
(c⁄° 
JSON_VÆue
 *
vÆue
) {

1146 
size_t
 
i
 = 0;

1147 
JSON_VÆue
 *
ªtu∫_vÆue
 = 
NULL
, *
ãmp_vÆue_c›y
 = NULL, *
ãmp_vÆue
 = NULL;

1148 c⁄° *
ãmp_°rög
 = 
NULL
, *
ãmp_key
 = NULL;

1149 *
ãmp_°rög_c›y
 = 
NULL
;

1150 
JSON_Aºay
 *
ãmp_¨øy
 = 
NULL
, *
ãmp_¨øy_c›y
 = NULL;

1151 
JSON_Obje˘
 *
ãmp_obje˘
 = 
NULL
, *
ãmp_obje˘_c›y
 = NULL;

1153 
	`js⁄_vÆue_gë_ty≥
(
vÆue
)) {

1154 
JSONAºay
:

1155 
ãmp_¨øy
 = 
	`js⁄_vÆue_gë_¨øy
(
vÆue
);

1156 
ªtu∫_vÆue
 = 
	`js⁄_vÆue_öô_¨øy
();

1157 i‡(
ªtu∫_vÆue
 =
NULL
)

1158  
NULL
;

1159 
ãmp_¨øy_c›y
 = 
	`js⁄_vÆue_gë_¨øy
(
ªtu∫_vÆue
);

1160 
i
 = 0; i < 
	`js⁄_¨øy_gë_cou¡
(
ãmp_¨øy
); i++) {

1161 
ãmp_vÆue
 = 
	`js⁄_¨øy_gë_vÆue
(
ãmp_¨øy
, 
i
);

1162 
ãmp_vÆue_c›y
 = 
	`js⁄_vÆue_dìp_c›y
(
ãmp_vÆue
);

1163 i‡(
ãmp_vÆue_c›y
 =
NULL
) {

1164 
	`js⁄_vÆue_‰ì
(
ªtu∫_vÆue
);

1165  
NULL
;

1167 i‡(
	`js⁄_¨øy_add
(
ãmp_¨øy_c›y
, 
ãmp_vÆue_c›y
Ë=
JSONFaûuª
) {

1168 
	`js⁄_vÆue_‰ì
(
ªtu∫_vÆue
);

1169 
	`js⁄_vÆue_‰ì
(
ãmp_vÆue_c›y
);

1170  
NULL
;

1173  
ªtu∫_vÆue
;

1174 
JSONObje˘
:

1175 
ãmp_obje˘
 = 
	`js⁄_vÆue_gë_obje˘
(
vÆue
);

1176 
ªtu∫_vÆue
 = 
	`js⁄_vÆue_öô_obje˘
();

1177 i‡(
ªtu∫_vÆue
 =
NULL
)

1178  
NULL
;

1179 
ãmp_obje˘_c›y
 = 
	`js⁄_vÆue_gë_obje˘
(
ªtu∫_vÆue
);

1180 
i
 = 0; i < 
	`js⁄_obje˘_gë_cou¡
(
ãmp_obje˘
); i++) {

1181 
ãmp_key
 = 
	`js⁄_obje˘_gë_«me
(
ãmp_obje˘
, 
i
);

1182 
ãmp_vÆue
 = 
	`js⁄_obje˘_gë_vÆue
(
ãmp_obje˘
, 
ãmp_key
);

1183 
ãmp_vÆue_c›y
 = 
	`js⁄_vÆue_dìp_c›y
(
ãmp_vÆue
);

1184 i‡(
ãmp_vÆue_c›y
 =
NULL
) {

1185 
	`js⁄_vÆue_‰ì
(
ªtu∫_vÆue
);

1186  
NULL
;

1188 i‡(
	`js⁄_obje˘_add
(
ãmp_obje˘_c›y
, 
ãmp_key
, 
ãmp_vÆue_c›y
Ë=
JSONFaûuª
) {

1189 
	`js⁄_vÆue_‰ì
(
ªtu∫_vÆue
);

1190 
	`js⁄_vÆue_‰ì
(
ãmp_vÆue_c›y
);

1191  
NULL
;

1194  
ªtu∫_vÆue
;

1195 
JSONBoﬁón
:

1196  
	`js⁄_vÆue_öô_boﬁón
(
	`js⁄_vÆue_gë_boﬁón
(
vÆue
));

1197 
JSONNumbî
:

1198  
	`js⁄_vÆue_öô_numbî
(
	`js⁄_vÆue_gë_numbî
(
vÆue
));

1199 
JSONSåög
:

1200 
ãmp_°rög
 = 
	`js⁄_vÆue_gë_°rög
(
vÆue
);

1201 
ãmp_°rög_c›y
 = 
	`∑rs⁄_°rdup
(
ãmp_°rög
);

1202 i‡(
ãmp_°rög_c›y
 =
NULL
)

1203  
NULL
;

1204 
ªtu∫_vÆue
 = 
	`js⁄_vÆue_öô_°rög_no_c›y
(
ãmp_°rög_c›y
);

1205 i‡(
ªtu∫_vÆue
 =
NULL
)

1206 
	`lgw_‰ì
(
ãmp_°rög_c›y
);

1207  
ªtu∫_vÆue
;

1208 
JSONNuŒ
:

1209  
	`js⁄_vÆue_öô_nuŒ
();

1210 
JSONEº‹
:

1211  
NULL
;

1213  
NULL
;

1215 
	}
}

1217 
size_t
 
	$js⁄_£rüliz©i⁄_size
(c⁄° 
JSON_VÆue
 *
vÆue
) {

1218 
num_buf
[1100];

1219 
ªs
 = 
	`js⁄_£rülize_to_buf„r_r
(
vÆue
, 
NULL
, 0, 0, 
num_buf
);

1220  
ªs
 < 0 ? 0 : (
size_t
)(res + 1);

1221 
	}
}

1223 
JSON_Sètus
 
	$js⁄_£rülize_to_buf„r
(c⁄° 
JSON_VÆue
 *
vÆue
, *
buf
, 
size_t
 
buf_size_ö_byãs
) {

1224 
wrôãn
 = -1;

1225 
size_t
 
√eded_size_ö_byãs
 = 
	`js⁄_£rüliz©i⁄_size
(
vÆue
);

1226 i‡(
√eded_size_ö_byãs
 =0 || 
buf_size_ö_byãs
 <Çeeded_size_in_bytes) {

1227  
JSONFaûuª
;

1229 
wrôãn
 = 
	`js⁄_£rülize_to_buf„r_r
(
vÆue
, 
buf
, 0, 0, 
NULL
);

1230 i‡(
wrôãn
 < 0)

1231  
JSONFaûuª
;

1232  
JSONSuc˚ss
;

1233 
	}
}

1235 
JSON_Sètus
 
	$js⁄_£rülize_to_fûe
(c⁄° 
JSON_VÆue
 *
vÆue
, c⁄° *
fûíame
) {

1236 
JSON_Sètus
 
ªtu∫_code
 = 
JSONSuc˚ss
;

1237 
FILE
 *
Â
 = 
NULL
;

1238 *
£rülized_°rög
 = 
	`js⁄_£rülize_to_°rög
(
vÆue
);

1239 i‡(
£rülized_°rög
 =
NULL
) {

1240  
JSONFaûuª
;

1242 
Â
 = 
	`f›í
 (
fûíame
, "w");

1243 i‡(
Â
 !
NULL
) {

1244 i‡(
	`Âuts
 (
£rülized_°rög
, 
Â
Ë=
EOF
) {

1245 
ªtu∫_code
 = 
JSONFaûuª
;

1247 i‡(
	`f˛o£
 (
Â
Ë=
EOF
) {

1248 
ªtu∫_code
 = 
JSONFaûuª
;

1251 
	`js⁄_‰ì_£rülized_°rög
(
£rülized_°rög
);

1252  
ªtu∫_code
;

1253 
	}
}

1255 * 
	$js⁄_£rülize_to_°rög
(c⁄° 
JSON_VÆue
 *
vÆue
) {

1256 
JSON_Sètus
 
£rüliz©i⁄_ªsu…
 = 
JSONFaûuª
;

1257 
size_t
 
buf_size_byãs
 = 
	`js⁄_£rüliz©i⁄_size
(
vÆue
);

1258 *
buf
 = 
NULL
;

1259 i‡(
buf_size_byãs
 == 0) {

1260  
NULL
;

1262 
buf
 = (*)
	`lgw_mÆloc
(
buf_size_byãs
);

1263 i‡(
buf
 =
NULL
)

1264  
NULL
;

1265 
£rüliz©i⁄_ªsu…
 = 
	`js⁄_£rülize_to_buf„r
(
vÆue
, 
buf
, 
buf_size_byãs
);

1266 i‡(
£rüliz©i⁄_ªsu…
 =
JSONFaûuª
) {

1267 
	`js⁄_‰ì_£rülized_°rög
(
buf
);

1268  
NULL
;

1270  
buf
;

1271 
	}
}

1273 
size_t
 
	$js⁄_£rüliz©i⁄_size_¥ëty
(c⁄° 
JSON_VÆue
 *
vÆue
) {

1274 
num_buf
[1100];

1275 
ªs
 = 
	`js⁄_£rülize_to_buf„r_r
(
vÆue
, 
NULL
, 0, 1, 
num_buf
);

1276  
ªs
 < 0 ? 0 : (
size_t
)(res + 1);

1277 
	}
}

1279 
JSON_Sètus
 
	$js⁄_£rülize_to_buf„r_¥ëty
(c⁄° 
JSON_VÆue
 *
vÆue
, *
buf
, 
size_t
 
buf_size_ö_byãs
) {

1280 
wrôãn
 = -1;

1281 
size_t
 
√eded_size_ö_byãs
 = 
	`js⁄_£rüliz©i⁄_size_¥ëty
(
vÆue
);

1282 i‡(
√eded_size_ö_byãs
 =0 || 
buf_size_ö_byãs
 <Çeeded_size_in_bytes)

1283  
JSONFaûuª
;

1284 
wrôãn
 = 
	`js⁄_£rülize_to_buf„r_r
(
vÆue
, 
buf
, 0, 1, 
NULL
);

1285 i‡(
wrôãn
 < 0)

1286  
JSONFaûuª
;

1287  
JSONSuc˚ss
;

1288 
	}
}

1290 
JSON_Sètus
 
	$js⁄_£rülize_to_fûe_¥ëty
(c⁄° 
JSON_VÆue
 *
vÆue
, c⁄° *
fûíame
) {

1291 
JSON_Sètus
 
ªtu∫_code
 = 
JSONSuc˚ss
;

1292 
FILE
 *
Â
 = 
NULL
;

1293 *
£rülized_°rög
 = 
	`js⁄_£rülize_to_°rög_¥ëty
(
vÆue
);

1294 i‡(
£rülized_°rög
 =
NULL
) {

1295  
JSONFaûuª
;

1297 
Â
 = 
	`f›í
 (
fûíame
, "w");

1298 i‡(
Â
 !
NULL
) {

1299 i‡(
	`Âuts
 (
£rülized_°rög
, 
Â
Ë=
EOF
) {

1300 
ªtu∫_code
 = 
JSONFaûuª
;

1302 i‡(
	`f˛o£
 (
Â
Ë=
EOF
) {

1303 
ªtu∫_code
 = 
JSONFaûuª
;

1306 
	`js⁄_‰ì_£rülized_°rög
(
£rülized_°rög
);

1307  
ªtu∫_code
;

1308 
	}
}

1310 * 
	$js⁄_£rülize_to_°rög_¥ëty
(c⁄° 
JSON_VÆue
 *
vÆue
) {

1311 
JSON_Sètus
 
£rüliz©i⁄_ªsu…
 = 
JSONFaûuª
;

1312 
size_t
 
buf_size_byãs
 = 
	`js⁄_£rüliz©i⁄_size_¥ëty
(
vÆue
);

1313 *
buf
 = 
NULL
;

1314 i‡(
buf_size_byãs
 == 0) {

1315  
NULL
;

1317 
buf
 = (*)
	`lgw_mÆloc
(
buf_size_byãs
);

1318 i‡(
buf
 =
NULL
)

1319  
NULL
;

1320 
£rüliz©i⁄_ªsu…
 = 
	`js⁄_£rülize_to_buf„r_¥ëty
(
vÆue
, 
buf
, 
buf_size_byãs
);

1321 i‡(
£rüliz©i⁄_ªsu…
 =
JSONFaûuª
) {

1322 
	`js⁄_‰ì_£rülized_°rög
(
buf
);

1323  
NULL
;

1325  
buf
;

1326 
	}
}

1328 
	$js⁄_‰ì_£rülized_°rög
(*
°rög
) {

1329 
	`lgw_‰ì
(
°rög
);

1330 
	}
}

1332 
JSON_Sètus
 
	$js⁄_¨øy_ªmove
(
JSON_Aºay
 *
¨øy
, 
size_t
 
ix
) {

1333 
JSON_VÆue
 *
ãmp_vÆue
 = 
NULL
;

1334 
size_t
 
œ°_ñemít_ix
 = 0;

1335 i‡(
¨øy
 =
NULL
 || 
ix
 >
	`js⁄_¨øy_gë_cou¡
(array)) {

1336  
JSONFaûuª
;

1338 
œ°_ñemít_ix
 = 
	`js⁄_¨øy_gë_cou¡
(
¨øy
) - 1;

1339 
	`js⁄_vÆue_‰ì
(
	`js⁄_¨øy_gë_vÆue
(
¨øy
, 
ix
));

1340 i‡(
ix
 !
œ°_ñemít_ix
) {

1341 
ãmp_vÆue
 = 
	`js⁄_¨øy_gë_vÆue
(
¨øy
, 
œ°_ñemít_ix
);

1342 i‡(
ãmp_vÆue
 =
NULL
) {

1343  
JSONFaûuª
;

1345 
¨øy
->
ôems
[
ix
] = 
ãmp_vÆue
;

1347 
¨øy
->
cou¡
 -= 1;

1348  
JSONSuc˚ss
;

1349 
	}
}

1351 
JSON_Sètus
 
	$js⁄_¨øy_ª∂a˚_vÆue
(
JSON_Aºay
 *
¨øy
, 
size_t
 
ix
, 
JSON_VÆue
 *
vÆue
) {

1352 i‡(
¨øy
 =
NULL
 || 
vÆue
 =NULL || 
ix
 >
	`js⁄_¨øy_gë_cou¡
(array)) {

1353  
JSONFaûuª
;

1355 
	`js⁄_vÆue_‰ì
(
	`js⁄_¨øy_gë_vÆue
(
¨øy
, 
ix
));

1356 
¨øy
->
ôems
[
ix
] = 
vÆue
;

1357  
JSONSuc˚ss
;

1358 
	}
}

1360 
JSON_Sètus
 
	$js⁄_¨øy_ª∂a˚_°rög
(
JSON_Aºay
 *
¨øy
, 
size_t
 
i
, c⁄° * 
°rög
) {

1361 
JSON_VÆue
 *
vÆue
 = 
	`js⁄_vÆue_öô_°rög
(
°rög
);

1362 i‡(
vÆue
 =
NULL
)

1363  
JSONFaûuª
;

1364 i‡(
	`js⁄_¨øy_ª∂a˚_vÆue
(
¨øy
, 
i
, 
vÆue
Ë=
JSONFaûuª
) {

1365 
	`js⁄_vÆue_‰ì
(
vÆue
);

1366  
JSONFaûuª
;

1368  
JSONSuc˚ss
;

1369 
	}
}

1371 
JSON_Sètus
 
	$js⁄_¨øy_ª∂a˚_numbî
(
JSON_Aºay
 *
¨øy
, 
size_t
 
i
, 
numbî
) {

1372 
JSON_VÆue
 *
vÆue
 = 
	`js⁄_vÆue_öô_numbî
(
numbî
);

1373 i‡(
vÆue
 =
NULL
)

1374  
JSONFaûuª
;

1375 i‡(
	`js⁄_¨øy_ª∂a˚_vÆue
(
¨øy
, 
i
, 
vÆue
Ë=
JSONFaûuª
) {

1376 
	`js⁄_vÆue_‰ì
(
vÆue
);

1377  
JSONFaûuª
;

1379  
JSONSuc˚ss
;

1380 
	}
}

1382 
JSON_Sètus
 
	$js⁄_¨øy_ª∂a˚_boﬁón
(
JSON_Aºay
 *
¨øy
, 
size_t
 
i
, 
boﬁón
) {

1383 
JSON_VÆue
 *
vÆue
 = 
	`js⁄_vÆue_öô_boﬁón
(
boﬁón
);

1384 i‡(
vÆue
 =
NULL
)

1385  
JSONFaûuª
;

1386 i‡(
	`js⁄_¨øy_ª∂a˚_vÆue
(
¨øy
, 
i
, 
vÆue
Ë=
JSONFaûuª
) {

1387 
	`js⁄_vÆue_‰ì
(
vÆue
);

1388  
JSONFaûuª
;

1390  
JSONSuc˚ss
;

1391 
	}
}

1393 
JSON_Sètus
 
	$js⁄_¨øy_ª∂a˚_nuŒ
(
JSON_Aºay
 *
¨øy
, 
size_t
 
i
) {

1394 
JSON_VÆue
 *
vÆue
 = 
	`js⁄_vÆue_öô_nuŒ
();

1395 i‡(
vÆue
 =
NULL
)

1396  
JSONFaûuª
;

1397 i‡(
	`js⁄_¨øy_ª∂a˚_vÆue
(
¨øy
, 
i
, 
vÆue
Ë=
JSONFaûuª
) {

1398 
	`js⁄_vÆue_‰ì
(
vÆue
);

1399  
JSONFaûuª
;

1401  
JSONSuc˚ss
;

1402 
	}
}

1404 
JSON_Sètus
 
	$js⁄_¨øy_˛ór
(
JSON_Aºay
 *
¨øy
) {

1405 
size_t
 
i
 = 0;

1406 i‡(
¨øy
 =
NULL
)

1407  
JSONFaûuª
;

1408 
i
 = 0; i < 
	`js⁄_¨øy_gë_cou¡
(
¨øy
); i++) {

1409 
	`js⁄_vÆue_‰ì
(
	`js⁄_¨øy_gë_vÆue
(
¨øy
, 
i
));

1411 
¨øy
->
cou¡
 = 0;

1412  
JSONSuc˚ss
;

1413 
	}
}

1415 
JSON_Sètus
 
	$js⁄_¨øy_≠≥nd_vÆue
(
JSON_Aºay
 *
¨øy
, 
JSON_VÆue
 *
vÆue
) {

1416 i‡(
¨øy
 =
NULL
 || 
vÆue
 == NULL)

1417  
JSONFaûuª
;

1418  
	`js⁄_¨øy_add
(
¨øy
, 
vÆue
);

1419 
	}
}

1421 
JSON_Sètus
 
	$js⁄_¨øy_≠≥nd_°rög
(
JSON_Aºay
 *
¨øy
, c⁄° *
°rög
) {

1422 
JSON_VÆue
 *
vÆue
 = 
	`js⁄_vÆue_öô_°rög
(
°rög
);

1423 i‡(
vÆue
 =
NULL
)

1424  
JSONFaûuª
;

1425 i‡(
	`js⁄_¨øy_≠≥nd_vÆue
(
¨øy
, 
vÆue
Ë=
JSONFaûuª
) {

1426 
	`js⁄_vÆue_‰ì
(
vÆue
);

1427  
JSONFaûuª
;

1429  
JSONSuc˚ss
;

1430 
	}
}

1432 
JSON_Sètus
 
	$js⁄_¨øy_≠≥nd_numbî
(
JSON_Aºay
 *
¨øy
, 
numbî
) {

1433 
JSON_VÆue
 *
vÆue
 = 
	`js⁄_vÆue_öô_numbî
(
numbî
);

1434 i‡(
vÆue
 =
NULL
)

1435  
JSONFaûuª
;

1436 i‡(
	`js⁄_¨øy_≠≥nd_vÆue
(
¨øy
, 
vÆue
Ë=
JSONFaûuª
) {

1437 
	`js⁄_vÆue_‰ì
(
vÆue
);

1438  
JSONFaûuª
;

1440  
JSONSuc˚ss
;

1441 
	}
}

1443 
JSON_Sètus
 
	$js⁄_¨øy_≠≥nd_boﬁón
(
JSON_Aºay
 *
¨øy
, 
boﬁón
) {

1444 
JSON_VÆue
 *
vÆue
 = 
	`js⁄_vÆue_öô_boﬁón
(
boﬁón
);

1445 i‡(
vÆue
 =
NULL
)

1446  
JSONFaûuª
;

1447 i‡(
	`js⁄_¨øy_≠≥nd_vÆue
(
¨øy
, 
vÆue
Ë=
JSONFaûuª
) {

1448 
	`js⁄_vÆue_‰ì
(
vÆue
);

1449  
JSONFaûuª
;

1451  
JSONSuc˚ss
;

1452 
	}
}

1454 
JSON_Sètus
 
	$js⁄_¨øy_≠≥nd_nuŒ
(
JSON_Aºay
 *
¨øy
) {

1455 
JSON_VÆue
 *
vÆue
 = 
	`js⁄_vÆue_öô_nuŒ
();

1456 i‡(
vÆue
 =
NULL
)

1457  
JSONFaûuª
;

1458 i‡(
	`js⁄_¨øy_≠≥nd_vÆue
(
¨øy
, 
vÆue
Ë=
JSONFaûuª
) {

1459 
	`js⁄_vÆue_‰ì
(
vÆue
);

1460  
JSONFaûuª
;

1462  
JSONSuc˚ss
;

1463 
	}
}

1465 
JSON_Sètus
 
	$js⁄_obje˘_£t_vÆue
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, 
JSON_VÆue
 *
vÆue
) {

1466 
size_t
 
i
 = 0;

1467 
JSON_VÆue
 *
ﬁd_vÆue
;

1468 i‡(
obje˘
 =
NULL
 || 
«me
 =NULL || 
vÆue
 == NULL)

1469  
JSONFaûuª
;

1470 
ﬁd_vÆue
 = 
	`js⁄_obje˘_gë_vÆue
(
obje˘
, 
«me
);

1471 i‡(
ﬁd_vÆue
 !
NULL
) {

1472 
	`js⁄_vÆue_‰ì
(
ﬁd_vÆue
);

1473 
i
 = 0; i < 
	`js⁄_obje˘_gë_cou¡
(
obje˘
); i++) {

1474 i‡(
	`°rcmp
(
obje˘
->
«mes
[
i
], 
«me
) == 0) {

1475 
obje˘
->
vÆues
[
i
] = 
vÆue
;

1476  
JSONSuc˚ss
;

1481  
	`js⁄_obje˘_add
(
obje˘
, 
«me
, 
vÆue
);

1482 
	}
}

1484 
JSON_Sètus
 
	$js⁄_obje˘_£t_°rög
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, c⁄° *
°rög
) {

1485  
	`js⁄_obje˘_£t_vÆue
(
obje˘
, 
«me
, 
	`js⁄_vÆue_öô_°rög
(
°rög
));

1486 
	}
}

1488 
JSON_Sètus
 
	$js⁄_obje˘_£t_numbî
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, 
numbî
) {

1489  
	`js⁄_obje˘_£t_vÆue
(
obje˘
, 
«me
, 
	`js⁄_vÆue_öô_numbî
(
numbî
));

1490 
	}
}

1492 
JSON_Sètus
 
	$js⁄_obje˘_£t_boﬁón
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, 
boﬁón
) {

1493  
	`js⁄_obje˘_£t_vÆue
(
obje˘
, 
«me
, 
	`js⁄_vÆue_öô_boﬁón
(
boﬁón
));

1494 
	}
}

1496 
JSON_Sètus
 
	$js⁄_obje˘_£t_nuŒ
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
) {

1497  
	`js⁄_obje˘_£t_vÆue
(
obje˘
, 
«me
, 
	`js⁄_vÆue_öô_nuŒ
());

1498 
	}
}

1500 
JSON_Sètus
 
	$js⁄_obje˘_dŸ£t_vÆue
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, 
JSON_VÆue
 *
vÆue
) {

1501 c⁄° *
dŸ_pos
 = 
NULL
;

1502 *
cuºít_«me
 = 
NULL
;

1503 
JSON_Obje˘
 *
ãmp_obj
 = 
NULL
;

1504 
JSON_VÆue
 *
√w_vÆue
 = 
NULL
;

1505 i‡(
vÆue
 =
NULL
 || 
«me
 == NULL || value == NULL)

1506  
JSONFaûuª
;

1507 
dŸ_pos
 = 
	`°rchr
(
«me
, '.');

1508 i‡(
dŸ_pos
 =
NULL
) {

1509  
	`js⁄_obje˘_£t_vÆue
(
obje˘
, 
«me
, 
vÆue
);

1511 
cuºít_«me
 = 
	`∑rs⁄_°∫dup
(
«me
, 
dŸ_pos
 -Çame);

1512 
ãmp_obj
 = 
	`js⁄_obje˘_gë_obje˘
(
obje˘
, 
cuºít_«me
);

1513 i‡(
ãmp_obj
 =
NULL
) {

1514 
√w_vÆue
 = 
	`js⁄_vÆue_öô_obje˘
();

1515 i‡(
√w_vÆue
 =
NULL
) {

1516 
	`lgw_‰ì
(
cuºít_«me
);

1517  
JSONFaûuª
;

1519 i‡(
	`js⁄_obje˘_add
(
obje˘
, 
cuºít_«me
, 
√w_vÆue
Ë=
JSONFaûuª
) {

1520 
	`js⁄_vÆue_‰ì
(
√w_vÆue
);

1521 
	`lgw_‰ì
(
cuºít_«me
);

1522  
JSONFaûuª
;

1524 
ãmp_obj
 = 
	`js⁄_obje˘_gë_obje˘
(
obje˘
, 
cuºít_«me
);

1526 
	`lgw_‰ì
(
cuºít_«me
);

1527  
	`js⁄_obje˘_dŸ£t_vÆue
(
ãmp_obj
, 
dŸ_pos
 + 1, 
vÆue
);

1529 
	}
}

1531 
JSON_Sètus
 
	$js⁄_obje˘_dŸ£t_°rög
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, c⁄° *
°rög
) {

1532 
JSON_VÆue
 *
vÆue
 = 
	`js⁄_vÆue_öô_°rög
(
°rög
);

1533 i‡(
vÆue
 =
NULL
)

1534  
JSONFaûuª
;

1535 i‡(
	`js⁄_obje˘_dŸ£t_vÆue
(
obje˘
, 
«me
, 
vÆue
Ë=
JSONFaûuª
) {

1536 
	`js⁄_vÆue_‰ì
(
vÆue
);

1537  
JSONFaûuª
;

1539  
JSONSuc˚ss
;

1540 
	}
}

1542 
JSON_Sètus
 
	$js⁄_obje˘_dŸ£t_numbî
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, 
numbî
) {

1543 
JSON_VÆue
 *
vÆue
 = 
	`js⁄_vÆue_öô_numbî
(
numbî
);

1544 i‡(
vÆue
 =
NULL
)

1545  
JSONFaûuª
;

1546 i‡(
	`js⁄_obje˘_dŸ£t_vÆue
(
obje˘
, 
«me
, 
vÆue
Ë=
JSONFaûuª
) {

1547 
	`js⁄_vÆue_‰ì
(
vÆue
);

1548  
JSONFaûuª
;

1550  
JSONSuc˚ss
;

1551 
	}
}

1553 
JSON_Sètus
 
	$js⁄_obje˘_dŸ£t_boﬁón
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, 
boﬁón
) {

1554 
JSON_VÆue
 *
vÆue
 = 
	`js⁄_vÆue_öô_boﬁón
(
boﬁón
);

1555 i‡(
vÆue
 =
NULL
)

1556  
JSONFaûuª
;

1557 i‡(
	`js⁄_obje˘_dŸ£t_vÆue
(
obje˘
, 
«me
, 
vÆue
Ë=
JSONFaûuª
) {

1558 
	`js⁄_vÆue_‰ì
(
vÆue
);

1559  
JSONFaûuª
;

1561  
JSONSuc˚ss
;

1562 
	}
}

1564 
JSON_Sètus
 
	$js⁄_obje˘_dŸ£t_nuŒ
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
) {

1565 
JSON_VÆue
 *
vÆue
 = 
	`js⁄_vÆue_öô_nuŒ
();

1566 i‡(
vÆue
 =
NULL
)

1567  
JSONFaûuª
;

1568 i‡(
	`js⁄_obje˘_dŸ£t_vÆue
(
obje˘
, 
«me
, 
vÆue
Ë=
JSONFaûuª
) {

1569 
	`js⁄_vÆue_‰ì
(
vÆue
);

1570  
JSONFaûuª
;

1572  
JSONSuc˚ss
;

1573 
	}
}

1575 
JSON_Sètus
 
	$js⁄_obje˘_ªmove
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
) {

1576 
size_t
 
i
 = 0, 
œ°_ôem_ödex
 = 0;

1577 i‡(
obje˘
 =
NULL
 || 
	`js⁄_obje˘_gë_vÆue
(obje˘, 
«me
) == NULL)

1578  
JSONFaûuª
;

1579 
œ°_ôem_ödex
 = 
	`js⁄_obje˘_gë_cou¡
(
obje˘
) - 1;

1580 
i
 = 0; i < 
	`js⁄_obje˘_gë_cou¡
(
obje˘
); i++) {

1581 i‡(
	`°rcmp
(
obje˘
->
«mes
[
i
], 
«me
) == 0) {

1582 
	`lgw_‰ì
(
obje˘
->
«mes
[
i
]);

1583 
	`js⁄_vÆue_‰ì
(
obje˘
->
vÆues
[
i
]);

1584 i‡(
i
 !
œ°_ôem_ödex
) {

1585 
obje˘
->
«mes
[
i
] = obje˘->«mes[
œ°_ôem_ödex
];

1586 
obje˘
->
vÆues
[
i
] = obje˘->vÆues[
œ°_ôem_ödex
];

1588 
obje˘
->
cou¡
 -= 1;

1589  
JSONSuc˚ss
;

1592  
JSONFaûuª
;

1593 
	}
}

1595 
JSON_Sètus
 
	$js⁄_obje˘_dŸªmove
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
) {

1596 c⁄° *
dŸ_pos
 = 
	`°rchr
(
«me
, '.');

1597 *
cuºít_«me
 = 
NULL
;

1598 
JSON_Obje˘
 *
ãmp_obj
 = 
NULL
;

1599 i‡(
dŸ_pos
 =
NULL
) {

1600  
	`js⁄_obje˘_ªmove
(
obje˘
, 
«me
);

1602 
cuºít_«me
 = 
	`∑rs⁄_°∫dup
(
«me
, 
dŸ_pos
 -Çame);

1603 
ãmp_obj
 = 
	`js⁄_obje˘_gë_obje˘
(
obje˘
, 
cuºít_«me
);

1604 i‡(
ãmp_obj
 =
NULL
) {

1605 
	`lgw_‰ì
(
cuºít_«me
);

1606  
JSONFaûuª
;

1608 
	`lgw_‰ì
(
cuºít_«me
);

1609  
	`js⁄_obje˘_dŸªmove
(
ãmp_obj
, 
dŸ_pos
 + 1);

1611 
	}
}

1613 
JSON_Sètus
 
	$js⁄_obje˘_˛ór
(
JSON_Obje˘
 *
obje˘
) {

1614 
size_t
 
i
 = 0;

1615 i‡(
obje˘
 =
NULL
) {

1616  
JSONFaûuª
;

1618 
i
 = 0; i < 
	`js⁄_obje˘_gë_cou¡
(
obje˘
); i++) {

1619 
	`lgw_‰ì
(
obje˘
->
«mes
[
i
]);

1620 
	`js⁄_vÆue_‰ì
(
obje˘
->
vÆues
[
i
]);

1622 
obje˘
->
cou¡
 = 0;

1623  
JSONSuc˚ss
;

1624 
	}
}

1626 
JSON_Sètus
 
	$js⁄_vÆid©e
(c⁄° 
JSON_VÆue
 *
schema
, c⁄° JSON_VÆuê*
vÆue
) {

1627 
JSON_VÆue
 *
ãmp_schema_vÆue
 = 
NULL
, *
ãmp_vÆue
 = NULL;

1628 
JSON_Aºay
 *
schema_¨øy
 = 
NULL
, *
vÆue_¨øy
 = NULL;

1629 
JSON_Obje˘
 *
schema_obje˘
 = 
NULL
, *
vÆue_obje˘
 = NULL;

1630 
JSON_VÆue_Ty≥
 
schema_ty≥
 = 
JSONEº‹
, 
vÆue_ty≥
 = JSONError;

1631 c⁄° *
key
 = 
NULL
;

1632 
size_t
 
i
 = 0, 
cou¡
 = 0;

1633 i‡(
schema
 =
NULL
 || 
vÆue
 == NULL)

1634  
JSONFaûuª
;

1635 
schema_ty≥
 = 
	`js⁄_vÆue_gë_ty≥
(
schema
);

1636 
vÆue_ty≥
 = 
	`js⁄_vÆue_gë_ty≥
(
vÆue
);

1637 i‡(
schema_ty≥
 !
vÆue_ty≥
 && schema_ty≥ !
JSONNuŒ
)

1638  
JSONFaûuª
;

1639 
schema_ty≥
) {

1640 
JSONAºay
:

1641 
schema_¨øy
 = 
	`js⁄_vÆue_gë_¨øy
(
schema
);

1642 
vÆue_¨øy
 = 
	`js⁄_vÆue_gë_¨øy
(
vÆue
);

1643 
cou¡
 = 
	`js⁄_¨øy_gë_cou¡
(
schema_¨øy
);

1644 i‡(
cou¡
 == 0)

1645  
JSONSuc˚ss
;

1647 
ãmp_schema_vÆue
 = 
	`js⁄_¨øy_gë_vÆue
(
schema_¨øy
, 0);

1648 
i
 = 0; i < 
	`js⁄_¨øy_gë_cou¡
(
vÆue_¨øy
); i++) {

1649 
ãmp_vÆue
 = 
	`js⁄_¨øy_gë_vÆue
(
vÆue_¨øy
, 
i
);

1650 i‡(
	`js⁄_vÆid©e
(
ãmp_schema_vÆue
, 
ãmp_vÆue
) == 0) {

1651  
JSONFaûuª
;

1654  
JSONSuc˚ss
;

1655 
JSONObje˘
:

1656 
schema_obje˘
 = 
	`js⁄_vÆue_gë_obje˘
(
schema
);

1657 
vÆue_obje˘
 = 
	`js⁄_vÆue_gë_obje˘
(
vÆue
);

1658 
cou¡
 = 
	`js⁄_obje˘_gë_cou¡
(
schema_obje˘
);

1659 i‡(
cou¡
 == 0)

1660  
JSONSuc˚ss
;

1661 i‡(
	`js⁄_obje˘_gë_cou¡
(
vÆue_obje˘
Ë< 
cou¡
)

1662  
JSONFaûuª
;

1663 
i
 = 0; i < 
cou¡
; i++) {

1664 
key
 = 
	`js⁄_obje˘_gë_«me
(
schema_obje˘
, 
i
);

1665 
ãmp_schema_vÆue
 = 
	`js⁄_obje˘_gë_vÆue
(
schema_obje˘
, 
key
);

1666 
ãmp_vÆue
 = 
	`js⁄_obje˘_gë_vÆue
(
vÆue_obje˘
, 
key
);

1667 i‡(
ãmp_vÆue
 =
NULL
)

1668  
JSONFaûuª
;

1669 i‡(
	`js⁄_vÆid©e
(
ãmp_schema_vÆue
, 
ãmp_vÆue
Ë=
JSONFaûuª
)

1670  
JSONFaûuª
;

1672  
JSONSuc˚ss
;

1673 
JSONSåög
: 
JSONNumbî
: 
JSONBoﬁón
: 
JSONNuŒ
:

1674  
JSONSuc˚ss
;

1675 
JSONEº‹
: :

1676  
JSONFaûuª
;

1678 
	}
}

1680 
JSON_Sètus
 
	$js⁄_vÆue_equÆs
(c⁄° 
JSON_VÆue
 *
a
, c⁄° JSON_VÆuê*
b
) {

1681 
JSON_Obje˘
 *
a_obje˘
 = 
NULL
, *
b_obje˘
 = NULL;

1682 
JSON_Aºay
 *
a_¨øy
 = 
NULL
, *
b_¨øy
 = NULL;

1683 c⁄° *
a_°rög
 = 
NULL
, *
b_°rög
 = NULL;

1684 c⁄° *
key
 = 
NULL
;

1685 
size_t
 
a_cou¡
 = 0, 
b_cou¡
 = 0, 
i
 = 0;

1686 
JSON_VÆue_Ty≥
 
a_ty≥
, 
b_ty≥
;

1687 
a_ty≥
 = 
	`js⁄_vÆue_gë_ty≥
(
a
);

1688 
b_ty≥
 = 
	`js⁄_vÆue_gë_ty≥
(
b
);

1689 i‡(
a_ty≥
 !
b_ty≥
) {

1692 
a_ty≥
) {

1693 
JSONAºay
:

1694 
a_¨øy
 = 
	`js⁄_vÆue_gë_¨øy
(
a
);

1695 
b_¨øy
 = 
	`js⁄_vÆue_gë_¨øy
(
b
);

1696 
a_cou¡
 = 
	`js⁄_¨øy_gë_cou¡
(
a_¨øy
);

1697 
b_cou¡
 = 
	`js⁄_¨øy_gë_cou¡
(
b_¨øy
);

1698 i‡(
a_cou¡
 !
b_cou¡
) {

1701 
i
 = 0; i < 
a_cou¡
; i++) {

1702 i‡(!
	`js⁄_vÆue_equÆs
(
	`js⁄_¨øy_gë_vÆue
(
a_¨øy
, 
i
),

1703 
	`js⁄_¨øy_gë_vÆue
(
b_¨øy
, 
i
))) {

1708 
JSONObje˘
:

1709 
a_obje˘
 = 
	`js⁄_vÆue_gë_obje˘
(
a
);

1710 
b_obje˘
 = 
	`js⁄_vÆue_gë_obje˘
(
b
);

1711 
a_cou¡
 = 
	`js⁄_obje˘_gë_cou¡
(
a_obje˘
);

1712 
b_cou¡
 = 
	`js⁄_obje˘_gë_cou¡
(
b_obje˘
);

1713 i‡(
a_cou¡
 !
b_cou¡
) {

1716 
i
 = 0; i < 
a_cou¡
; i++) {

1717 
key
 = 
	`js⁄_obje˘_gë_«me
(
a_obje˘
, 
i
);

1718 i‡(!
	`js⁄_vÆue_equÆs
(
	`js⁄_obje˘_gë_vÆue
(
a_obje˘
, 
key
),

1719 
	`js⁄_obje˘_gë_vÆue
(
b_obje˘
, 
key
))) {

1724 
JSONSåög
:

1725 
a_°rög
 = 
	`js⁄_vÆue_gë_°rög
(
a
);

1726 
b_°rög
 = 
	`js⁄_vÆue_gë_°rög
(
b
);

1727  
	`°rcmp
(
a_°rög
, 
b_°rög
) == 0;

1728 
JSONBoﬁón
:

1729  
	`js⁄_vÆue_gë_boﬁón
(
a
Ë=js⁄_vÆue_gë_boﬁón(
b
);

1730 
JSONNumbî
:

1731  
	`Ábs
(
	`js⁄_vÆue_gë_numbî
(
a
Ë- js⁄_vÆue_gë_numbî(
b
)) < 0.000001;

1732 
JSONEº‹
:

1734 
JSONNuŒ
:

1739 
	}
}

1741 
JSON_VÆue_Ty≥
 
	$js⁄_ty≥
(c⁄° 
JSON_VÆue
 *
vÆue
) {

1742  
	`js⁄_vÆue_gë_ty≥
(
vÆue
);

1743 
	}
}

1745 
JSON_Obje˘
 * 
	$js⁄_obje˘
 (c⁄° 
JSON_VÆue
 *
vÆue
) {

1746  
	`js⁄_vÆue_gë_obje˘
(
vÆue
);

1747 
	}
}

1749 
JSON_Aºay
 * 
	$js⁄_¨øy
 (c⁄° 
JSON_VÆue
 *
vÆue
) {

1750  
	`js⁄_vÆue_gë_¨øy
(
vÆue
);

1751 
	}
}

1753 c⁄° * 
	$js⁄_°rög
 (c⁄° 
JSON_VÆue
 *
vÆue
) {

1754  
	`js⁄_vÆue_gë_°rög
(
vÆue
);

1755 
	}
}

1757 
	$js⁄_numbî
 (c⁄° 
JSON_VÆue
 *
vÆue
) {

1758  
	`js⁄_vÆue_gë_numbî
(
vÆue
);

1759 
	}
}

1761 
	$js⁄_boﬁón
(c⁄° 
JSON_VÆue
 *
vÆue
) {

1762  
	`js⁄_vÆue_gë_boﬁón
(
vÆue
);

1763 
	}
}

1765 
	$js⁄_£t_Æloˇti⁄_fun˘i⁄s
(
JSON_MÆloc_Fun˘i⁄
 
mÆloc_fun
, 
JSON_Fªe_Fun˘i⁄
 
‰ì_fun
) {

1766 
∑rs⁄_mÆloc
 = 
mÆloc_fun
;

1767 
∑rs⁄_‰ì
 = 
‰ì_fun
;

1768 
	}
}

	@fwd/src/pkt_serv.c

28 
	~<uni°d.h
>

29 
	~<°dlib.h
>

30 
	~<°rög.h
>

31 
	~<dúít.h
>

33 
	~<£m≠h‹e.h
>

34 
	~<time.h
>

36 
	~<sys/ty≥s.h
>

37 
	~<sys/°©.h
>

38 
	~<sys/sockë.h
>

40 
	~"db.h
"

41 
	~"fwd.h
"

42 
	~"jôqueue.h
"

43 
	~"l‹agw_hÆ.h
"

44 
	~"l‹agw_aux.h
"

46 
	~"£rvi˚.h
"

47 
	~"pkt_£rvi˚.h
"

48 
	~"l‹amac-¸y±o.h
"

49 
	~"mac-hódî-decode.h
"

51 
	gDECLARE_GW
;

52 
	gDECLARE_HAL
;

54 
uöt8_t
 
	grx2bw
;

55 
uöt8_t
 
	grx2dr
;

56 
uöt32_t
 
	grx2‰eq
;

58 
	gdb_Ámûy
[32] = {'\0'};

59 
	gdb_key
[32] = {'\0'};

60 
	gtmp°r
[16] = {'\0'};

62 
LGW_LIST_HEAD_STATIC
(
dn_li°
, 
_dn_pkt
);

64 
pkt_¥ï¨e_dow∆ök
(* 
¨g
);

65 
pkt_dól_up
(* 
¨g
);

66 
¥ï¨e_‰ame
(
uöt8_t
, 
devöfo_s
*, 
uöt32_t
, const uint8_t*, , uint8_t*, *);

68 
jô_îr‹_e
 
	$cu°om_rx2dn
(
dn_pkt_s
* 
d√Àm
, 
devöfo_s
 *
devöfo
, 
uöt32_t
 
us
, 
uöt8_t
 
txmode
) {

69 
i
, 
fsize
 = 0;

71 
uöt32_t
 
dwf˙t
 = 0;

73 
uöt8_t
 
∑ylﬂd_í
[
DEFAULT_PAYLOAD_SIZE
] = {'\0'};

74 
lgw_pkt_tx_s
 
txpkt
;

76 
uöt32_t
 
cuºít_c⁄˚¡øt‹_time
;

77 
jô_îr‹_e
 
jô_ªsu…
 = 
JIT_ERROR_OK
;

78 
jô_pkt_ty≥_e
 
dow∆ök_ty≥
;

80 
	`mem£t
(&
txpkt
, 0, (txpkt));

81 
txpkt
.
moduœti⁄
 = 
MOD_LORA
;

82 
txpkt
.
cou¡_us
 = 
us
 + 2000000UL;

83 
txpkt
.
no_¸c
 = 
åue
;

84 
txpkt
.
‰eq_hz
 = 
rx2‰eq
;

85 
txpkt
.
rf_chaö
 = 0;

86 
txpkt
.
rf_powî
 = 20;

87 
txpkt
.
d©¨©e
 = 
rx2dr
;

88 
txpkt
.
b™dwidth
 = 
rx2bw
;

89 
txpkt
.
codî©e
 = 
CR_LORA_4_5
;

90 
txpkt
.
övît_pﬁ
 = 
åue
;

91 
txpkt
.
¥ómbÀ
 = 
STD_LORA_PREAMB
;

92 
txpkt
.
tx_mode
 = 
txmode
;

93 i‡(
txmode
)

94 
dow∆ök_ty≥
 = 
JIT_PKT_TYPE_DOWNLINK_CLASS_A
;

96 
dow∆ök_ty≥
 = 
JIT_PKT_TYPE_DOWNLINK_CLASS_C
;

99 
	`•rötf
(
db_Ámûy
, "/dow∆ök/%08X", 
devöfo
->
devaddr
);

100 i‡(
	`lgw_db_gë
(
db_Ámûy
, "f˙t", 
tmp°r
, (tmpstr)) == -1) {

101 
	`lgw_db_put
(
db_Ámûy
, "fcnt", "0");

103 
dwf˙t
 = 
	`©ﬁ
(
tmp°r
);

104 
	`•rötf
(
tmp°r
, "%u", 
dwf˙t
 + 1);

105 
	`lgw_db_put
(
db_Ámûy
, "f˙t", 
tmp°r
);

109 
	`lgw_mem£t
(
∑ylﬂd_í
, '\0', (payload_en));

111 
	`¥ï¨e_‰ame
(
FRAME_TYPE_DATA_UNCONFIRMED_DOWN
, 
devöfo
, 
dwf˙t
++, (
uöt8_t
 *)
d√Àm
->
∑ylﬂd
, d√Àm->
psize
, 
∑ylﬂd_í
, &
fsize
);

113 
	`lgw_mem˝y
(
txpkt
.
∑ylﬂd
, 
∑ylﬂd_í
, 
fsize
);

115 
txpkt
.
size
 = 
fsize
;

117 
	`lgw_log
(
LOG_DEBUG
, "DEBUG~ [pkt-dwn] TX(%d):", 
fsize
);

118 
i
 = 0; i < 
fsize
; ++i) {

119 
	`lgw_log
(
LOG_DEBUG
, "%02X", 
∑ylﬂd_í
[
i
]);

121 
	`lgw_log
(
LOG_DEBUG
, "\n");

123 
	`±hªad_muãx_lock
(&
GW
.
hÆ
.
mx_c⁄˚¡
);

124 
HAL
.
	`lgw_gë_ö°˙t
(&
cuºít_c⁄˚¡øt‹_time
);

125 
	`±hªad_muãx_u∆ock
(&
GW
.
hÆ
.
mx_c⁄˚¡
);

126 
jô_ªsu…
 = 
	`jô_íqueue
(&
GW
.
tx
.
jô_queue
[
txpkt
.
rf_chaö
], 
cuºít_c⁄˚¡øt‹_time
, &txpkt, 
dow∆ök_ty≥
);

127 
	`lgw_log
(
LOG_DEBUG
, "DEBUG~ [pkt-dwn] DNRX2->Åm°:%u, fªq:%u,Ösize:%u.\n", 
txpkt
.
cou¡_us
,Åxpkt.
‰eq_hz
,Åxpkt.
size
);

128  
jô_ªsu…
;

129 
	}
}

131 
	$¥ï¨e_‰ame
(
uöt8_t
 
ty≥
, 
devöfo_s
 *
devöfo
, 
uöt32_t
 
down˙t
, c⁄° uöt8_t* 
∑ylﬂd
, 
∑ylﬂd_size
, uöt8_t* 
‰ame
, * 
‰ame_size
) {

132 
uöt32_t
 
mic
;

133 
uöt8_t
 
ödex
 = 0;

134 
uöt8_t
* 
í¸y±_∑ylﬂd
;

136 
LoRaMacHódî_t
 
hdr
;

137 
LoRaMacFømeCål_t
 
f˘æ
;

140 
hdr
.
VÆue
 = 0;

141 
hdr
.
Bôs
.
MTy≥
 = 
ty≥
;

142 
‰ame
[
ödex
] = 
hdr
.
VÆue
;

145 
‰ame
[++
ödex
] = 
devöfo
->
devaddr
&0xFF;

146 
‰ame
[++
ödex
] = (
devöfo
->
devaddr
>>8)&0xFF;

147 
‰ame
[++
ödex
] = (
devöfo
->
devaddr
>>16)&0xFF;

148 
‰ame
[++
ödex
] = (
devöfo
->
devaddr
>>24)&0xFF;

151 
f˘æ
.
VÆue
 = 0;

152 if(
ty≥
 =
FRAME_TYPE_DATA_UNCONFIRMED_DOWN
){

153 
f˘æ
.
Bôs
.
Ack
 = 1;

155 
f˘æ
.
Bôs
.
Adr
 = 1;

156 
‰ame
[++
ödex
] = 
f˘æ
.
VÆue
;

159 
‰ame
[++
ödex
] = (
down˙t
)&0xFF;

160 
‰ame
[++
ödex
] = (
down˙t
>>8)&0xFF;

164 
‰ame
[++
ödex
] = (
DEFAULT_DOWN_FPORT
)&0xFF;

167 
í¸y±_∑ylﬂd
 = 
	`lgw_mÆloc
((
uöt8_t
Ë* 
∑ylﬂd_size
);

168 
	`LoRaMacPaylﬂdEn¸y±
(
∑ylﬂd
, 
∑ylﬂd_size
, (
DEFAULT_DOWN_FPORT
 =0Ë? 
devöfo
->
nwkskey
 : devöfo->
≠pskey
, devöfo->
devaddr
, 
DOWN
, 
down˙t
, 
í¸y±_∑ylﬂd
);

169 ++
ödex
;

170 
	`mem˝y
(
‰ame
 + 
ödex
, 
í¸y±_∑ylﬂd
, 
∑ylﬂd_size
);

171 
	`lgw_‰ì
(
í¸y±_∑ylﬂd
);

172 
ödex
 +
∑ylﬂd_size
;

175 
	`LoRaMacCompuãMic
(
‰ame
, 
ödex
, 
devöfo
->
nwkskey
, devöfo->
devaddr
, 
DOWN
, 
down˙t
, &
mic
);

177 
‰ame
[
ödex
] = 
mic
&0xFF;

178 
‰ame
[++
ödex
] = (
mic
>>8)&0xFF;

179 
‰ame
[++
ödex
] = (
mic
>>16)&0xFF;

180 
‰ame
[++
ödex
] = (
mic
>>24)&0xFF;

181 *
‰ame_size
 = 
ödex
 + 1;

182 
	}
}

184 
dn_pkt_s
* 
	$£¨ch_dn_li°
(c⁄° * 
addr
) {

185 
dn_pkt_s
* 
íåy
 = 
NULL
;

187 
	`LGW_LIST_LOCK
(&
dn_li°
);

188 
	`LGW_LIST_TRAVERSE
(&
dn_li°
, 
íåy
, 
li°
) {

189 i‡(!
	`°rˇ£cmp
(
íåy
->
devaddr
, 
addr
))

192 
	`LGW_LIST_UNLOCK
(&
dn_li°
);

194  
íåy
;

195 
	}
}

198 
	$pkt_°¨t
(
£rv_s
* 
£rv
) {

199 i‡(
	`lgw_±hªad_¸óã_background
(&
£rv
->
thªad
.
t_up
, 
NULL
, (*(*)(*))
pkt_dól_up
, serv)) {

200 
	`lgw_log
(
LOG_WARNING
, "WARNING~ [%s] C™'à¸óãÖackage†dó»±hªad.\n", 
£rv
->
öfo
.
«me
);

204 i‡(
GW
.
cfg
.
cu°om_dow∆ök
) {

205 
GW
.
cfg
.
ªgi⁄
) {

206 
EU
:

207 
rx2dr
 = 
DR_LORA_SF12
;

208 
rx2bw
 = 
BW_125KHZ
;

209 
rx2‰eq
 = 869525000UL;

211 
US
:

212 
rx2dr
 = 
DR_LORA_SF12
;

213 
rx2bw
 = 
BW_500KHZ
;

214 
rx2‰eq
 = 923300000UL;

216 
CN
:

217 
rx2dr
 = 
DR_LORA_SF12
;

218 
rx2bw
 = 
BW_125KHZ
;

219 
rx2‰eq
 = 505300000UL;

221 
AU
:

222 
rx2dr
 = 
DR_LORA_SF12
;

223 
rx2bw
 = 
BW_500KHZ
;

224 
rx2‰eq
 = 923300000UL;

227 
rx2dr
 = 
DR_LORA_SF12
;

228 
rx2bw
 = 
BW_125KHZ
;

229 
rx2‰eq
 = 921900000UL;

233 i‡(
	`lgw_±hªad_¸óã_background
(&
£rv
->
thªad
.
t_down
, 
NULL
, (*(*)(*))
pkt_¥ï¨e_dow∆ök
, serv)) {

234 
	`lgw_log
(
LOG_WARNING
, "WARNING~ [%s] C™'à¸óãÖthªad f‹ cu°om dow∆⁄k.\n", 
£rv
->
öfo
.
«me
);

240 
	}
}

242 
	$pkt_°›
(
£rv_s
* 
£rv
) {

243 
£rv
->
thªad
.
°›_sig
 = 
åue
;

244 
	`£m_po°
(&
£rv
->
thªad
.
£ma
);

245 
	`±hªad_joö
(
£rv
->
thªad
.
t_up
, 
NULL
);

246 
	`±hªad_joö
(
£rv
->
thªad
.
t_down
, 
NULL
);

247 
	}
}

249 
	$pkt_dól_up
(* 
¨g
) {

250 
£rv_s
* 
£rv
 = (£rv_s*Ë
¨g
;

251 
	`lgw_log
(
LOG_DEBUG
, "DEBUG~ [%s] SèrögÖkt_dól_u∞thªad\n", 
£rv
->
öfo
.
«me
);

253 
i
;

254 
fsize
 = 0;

255 
ödex
 = 0;

256 
nb_pkt
 = 0;

258 
lgw_pkt_rx_s
 *
p
;

260 
rxpkts_s
* 
rxpkt_íåy
 = 
NULL
;

262 
buff_ödex
;

264 
jô_îr‹_e
 
jô_ªsu…
 = 
JIT_ERROR_OK
;

266 
uöt8_t
 
∑ylﬂd_í¸y±
[
DEFAULT_PAYLOAD_SIZE
] = {'\0'};

267 
uöt8_t
 
∑ylﬂd_txt
[
DEFAULT_PAYLOAD_SIZE
] = {'\0'};

269 
LoRaMacMesßgeD©a_t
 
macmsg
;

271 !
£rv
->
thªad
.
°›_sig
) {

273 
	`£m_waô
(&
£rv
->
thªad
.
£ma
);

275 
nb_pkt
 = 
	`gë_rxpkt
(
£rv
);

277 i‡(
nb_pkt
 == 0)

280 
	`lgw_log
(
LOG_DEBUG
, "DEBUG~ [%s]Ökt_push_u∞„tch %dÖachages.\n", 
£rv
->
öfo
.
«me
, 
nb_pkt
);

283 
i
 = 0; i < 
nb_pkt
; i++) {

284 
p
 = &
£rv
->
rxpkt
[
i
];

286 i‡(
p
->
size
 < 13)

289 
macmsg
.
Buf„r
 = 
p
->
∑ylﬂd
;

290 
macmsg
.
BufSize
 = 
p
->
size
;

292 i‡(
	`LoRaMacP¨£rD©a
(&
macmsg
Ë!
LORAMAC_PARSER_SUCCESS
)

295 
	`¥ötf_mac_hódî
(&
macmsg
);

297 i‡(
GW
.
cfg
.
mac_decoded
 || GW.cfg.
cu°om_dow∆ök
) {

298 
devöfo_s
 
devöfo
 = { .
devaddr
 = 
macmsg
.
FHDR
.
DevAddr
,

299 .
devaddr_°r
 = {0},

300 .
≠pskey_°r
 = {0},

301 .
nwkskey_°r
 = {0}

303 
	`•rötf
(
db_Ámûy
, "devöfo/%08X", 
devöfo
.
devaddr
);

304 i‡((
	`lgw_db_gë
(
db_Ámûy
, "≠pskey", 
devöfo
.
≠pskey_°r
, (devinfo.appskey_str)) == -1) ||

305 (
	`lgw_db_gë
(
db_Ámûy
, "nwkskey", 
devöfo
.
nwkskey_°r
, (devinfo.nwkskey_str)) == -1)) {

309 
	`°r2hex
(
devöfo
.
≠pskey
, devöfo.
≠pskey_°r
, (devinfo.appskey));

310 
	`°r2hex
(
devöfo
.
nwkskey
, devöfo.
nwkskey_°r
, (devinfo.nwkskey));

313 
	`lgw_log
(
LOG_DEBUG
, "\nDEBUG~ [MAC-Decode]appskey:");

314 
i
 = 0; i < ()(
devöfo
.
≠pskey
); ++i) {

315 
	`lgw_log
(
LOG_DEBUG
, "%02X", 
devöfo
.
≠pskey
[
i
]);

317 
	`lgw_log
(
LOG_DEBUG
, "\n");

319 i‡(
GW
.
cfg
.
mac_decoded
) {

320 
fsize
 = 
p
->
size
 - 13 - 
macmsg
.
FHDR
.
FCål
.
Bôs
.
FO±sLí
;

321 
	`mem˝y
(
∑ylﬂd_í¸y±
, 
p
->
∑ylﬂd
 + 9 + 
macmsg
.
FHDR
.
FCål
.
Bôs
.
FO±sLí
, 
fsize
);

322 
	`LoRaMacPaylﬂdDe¸y±
(
∑ylﬂd_í¸y±
, 
fsize
, 
devöfo
.
≠pskey
, devöfo.
devaddr
, 
UP
, (
uöt32_t
)
macmsg
.
FHDR
.
FC¡
, 
∑ylﬂd_txt
);

325 
	`lgw_log
(
LOG_DEBUG
, "\nDEBUG~ [MAC-Decode] RX(%d):", 
fsize
);

326 
i
 = 0; i < 
fsize
; ++i) {

327 
	`lgw_log
(
LOG_DEBUG
, "%02X", 
∑ylﬂd_txt
[
i
]);

329 
	`lgw_log
(
LOG_DEBUG
, "\n");

331 i‡(
GW
.
cfg
.
mac2fûe
) {

332 
FILE
 *
Â
;

333 
push∑th
[128];

334 
	`¢¥ötf
(
push∑th
, ’ush∑th), "/v¨/iŸ/ch™√ls/%08X", 
devöfo
.
devaddr
);

335 
Â
 = 
	`f›í
(
push∑th
, "w+");

336 i‡(
NULL
 =
Â
)

337 
	`lgw_log
(
LOG_INFO
, "INFO~ [De¸y±o] FaûÅÿ›íÖ©h: %s\n", 
push∑th
);

339 
	`fwrôe
(
∑ylﬂd_txt
, (
uöt8_t
), 
fsize
 + 1, 
Â
);

340 
	`fÊush
(
Â
);

341 
	`f˛o£
(
Â
);

346 i‡(
GW
.
cfg
.
mac2db
) {

347 
	`•rötf
(
db_Ámûy
, "/∑ylﬂd/%08X", 
devöfo
.
devaddr
);

348 i‡(
	`lgw_db_gë
(
db_Ámûy
, "ödex", 
tmp°r
, (tmpstr)) == -1) {

349 
	`lgw_db_put
(
db_Ámûy
, "index", "0");

351 
ödex
 = 
	`©oi
(
tmp°r
) % 9;

352 
	`•rötf
(
db_Ámûy
, "/∑ylﬂd/%08X/%d", 
devöfo
.
devaddr
, 
ödex
);

353 
	`•rötf
(
db_key
, "%u", 
p
->
cou¡_us
);

354 
	`lgw_db_put
(
db_Ámûy
, 
db_key
, (*)
∑ylﬂd_txt
);

358 i‡(
GW
.
cfg
.
cu°om_dow∆ök
) {

360 
dn_pkt_s
* 
d√Àm
 = 
NULL
;

361 
	`•rötf
(
tmp°r
, "%08X", 
devöfo
.
devaddr
);

362 
d√Àm
 = 
	`£¨ch_dn_li°
(
tmp°r
);

363 i‡(
d√Àm
 !
NULL
) {

364 
	`lgw_log
(
LOG_INFO
, "INFO~ [cus-dwn]Foundá m©ch devaddr: %s,Öª∑ªá dow∆ök!\n", 
tmp°r
);

365 
jô_ªsu…
 = 
	`cu°om_rx2dn
(
d√Àm
, &
devöfo
, 
p
->
cou¡_us
, 
TIMESTAMPED
);

366 i‡(
jô_ªsu…
 =
JIT_ERROR_OK
) {

367 
	`LGW_LIST_LOCK
(&
dn_li°
);

368 
	`LGW_LIST_REMOVE
(&
dn_li°
, 
d√Àm
, 
li°
);

369 
	`lgw_‰ì
(
d√Àm
);

370 
	`LGW_LIST_UNLOCK
(&
dn_li°
);

372 
	`lgw_log
(
LOG_ERROR
, "ERROR~ [cus-dwn]Packë REJECTED (jôÉº‹=%d)\n", 
jô_ªsu…
);

376 
	`lgw_log
(
LOG_INFO
, "INFO~ [cus-dwn] C™'àföd Sessi⁄Key†f‹ Dev %08X\n", 
devöfo
.
devaddr
);

381 
	}
}

383 
	$pkt_¥ï¨e_dow∆ök
(* 
¨g
) {

384 
£rv_s
* 
£rv
 = (£rv_s*Ë
¨g
;

385 
	`lgw_log
(
LOG_INFO
, "INFO~ [%s] SèrögÖkt_¥ï¨e_dow∆ökÅhªad\n", 
£rv
->
öfo
.
«me
);

387 
i
, 
j
;

389 
DIR
 *
dú
;

390 
FILE
 *
Â
;

391 
dúít
 *
±r
;

392 
°©
 
°©buf
;

393 
dn_fûe
[128];

395 
db_Ámûy
[32] = {'\0'};

398 
uöt8_t
 
buff_down
[512];

399 
uöt8_t
 
d≈ld
[256];

400 
uöt8_t
 
hex∂d
[256];

402 
uöt32_t
 
uaddr
;

403 
addr
[16];

404 
txmode
[8];

405 
pdf‹m©
[8];

406 
uöt8_t
 
psize
 = 0;

408 
dn_pkt_s
* 
íåy
 = 
NULL
;

410 
jô_îr‹_e
 
jô_ªsu…
 = 
JIT_ERROR_OK
;

412 !
£rv
->
thªad
.
°›_sig
) {

415 i‡((
dú
 = 
	`›ídú
(
DNPATH
)Ë=
NULL
) {

417 
	`waô_ms
(100);

421 (
±r
 = 
	`ªaddú
(
dú
)Ë!
NULL
) {

422 i‡(
	`°rcmp
(
±r
->
d_«me
, ".") == 0 || strcmp(ptr->d_name, "..") == 0)

425 
	`lgw_log
(
LOG_INFO
, "INFO~ [DNLK]Lookög fûê: %s\n", 
±r
->
d_«me
);

427 
	`¢¥ötf
(
dn_fûe
, (dn_fûe), "%s/%s", 
DNPATH
, 
±r
->
d_«me
);

429 i‡(
	`°©
(
dn_fûe
, &
°©buf
) < 0) {

430 
	`lgw_log
(
LOG_ERROR
, "ERROR~ [DNLK]C™Ÿ sèà%s!\n", 
±r
->
d_«me
);

434 i‡((
°©buf
.
°_mode
 & 
S_IFMT
Ë=
S_IFREG
) {

435 i‡((
Â
 = 
	`f›í
(
dn_fûe
, "r")Ë=
NULL
) {

436 
	`lgw_log
(
LOG_ERROR
, "ERROR~ [DNLK]C™nŸ o≥¿%s\n", 
±r
->
d_«me
);

440 
	`lgw_mem£t
(
buff_down
, '\0', (buff_down));

442 
psize
 = 
	`‰ód
(
buff_down
, (), (buff_down), 
Â
);

443 
	`f˛o£
(
Â
);

445 
	`u∆ök
(
dn_fûe
);

447 
	`mem£t
(
addr
, '\0', (addr));

448 
	`mem£t
(
pdf‹m©
, '\0', (pdformat));

449 
	`mem£t
(
txmode
, '\0', (txmode));

450 
	`lgw_mem£t
(
hex∂d
, '\0', (hexpld));

451 
	`lgw_mem£t
(
d≈ld
, '\0', (dnpld));

453 
i
 = 0, 
j
 = 0; i < 
psize
; i++) {

454 i‡(
buff_down
[
i
] == ',')

455 
j
++;

458 i‡(
j
 < 3) {

459 
	`lgw_log
(
LOG_INFO
, "INFO~ [DNLK]F‹m©Éº‹: %s\n", 
buff_down
);

463 
i
 = 0, 
j
 = 0; i < ()(
addr
); i++) {

464 i‡(
buff_down
[
i
] == ',') {

465 
i
++;

468 i‡(
buff_down
[
i
] != ' ')

469 
addr
[
j
++] = 
buff_down
[
i
];

472 
buff_down
[
i
] =' ' && i < 
psize
) {

473 
i
++;

476 
j
 = 0; j < ()(
txmode
); 
i
++) {

477 i‡(
buff_down
[
i
] == ',') {

478 
i
++;

481 i‡(
buff_down
[
i
] != ' ')

482 
txmode
[
j
++] = 
buff_down
[
i
];

485 
buff_down
[
i
] =' ' && i < 
psize
) {

486 
i
++;

489 
j
 = 0; j < ()(
pdf‹m©
); 
i
++) {

490 i‡(
buff_down
[
i
] == ',') {

491 
i
++;

494 i‡(
buff_down
[
i
] != ' ')

495 
pdf‹m©
[
j
++] = 
buff_down
[
i
];

498 
buff_down
[
i
] =' ' && i < 
psize
) {

499 
i
++;

502 
j
 = 0; 
i
 < 
psize
 + 1; i++) {

503 if(
buff_down
[
i
] != 0 && buff_down[i] != 10 )

504 
d≈ld
[
j
++] = 
buff_down
[
i
];

507 
psize
 = 
j
;

509 i‡((
	`°æí
(
addr
Ë< 1Ë|| (
psize
 < 1))

512 i‡(
	`°æí
(
txmode
) < 1)

513 
	`°r˝y
(
txmode
, "time");

515 i‡(
	`°æí
(
pdf‹m©
) < 1)

516 
	`°r˝y
(
pdf‹m©
, "txt");

518 
íåy
 = (
dn_pkt_s
*Ë
	`lgw_mÆloc
((dn_pkt_s));

519 
	`°r˝y
(
íåy
->
devaddr
, 
addr
);

521 i‡(
	`°r°r
(
pdf‹m©
, "hex"Ë!
NULL
) {

522 i‡(
psize
 % 2) {

523 
	`lgw_log
(
LOG_INFO
, "INFO~ [DNLK] Size of hexÖayload invalid.\n");

524 
	`lgw_‰ì
(
íåy
);

527 
	`hex2°r
(
d≈ld
, 
hex∂d
, 
psize
);

528 
psize
 =Ösize/2;

529 
	`lgw_mem˝y
(
íåy
->
∑ylﬂd
, 
hex∂d
, 
psize
 + 1);

531 
	`lgw_mem˝y
(
íåy
->
∑ylﬂd
, 
d≈ld
, 
psize
 + 1);

533 
	`°r˝y
(
íåy
->
txmode
,Åxmode);

534 
	`°r˝y
(
íåy
->
pdf‹m©
,Ödformat);

535 
íåy
->
psize
 =Ösize;

537 
	`lgw_log
(
LOG_DEBUG
, "DEBUG~ [DNLK]devaddr:%s,Åxmode:%s,Ödfm:%s, size:%d\n",

538 
íåy
->
devaddr
,É¡ry->
txmode
,É¡ry->
pdf‹m©
,É¡ry->
psize
);

540 i‡(
	`°r°r
(
íåy
->
txmode
, "imme"Ë!
NULL
) {

541 
	`lgw_log
(
LOG_INFO
, "INFO~ [DNLK] Pídög IMMEDIATE dow∆ök f‹ %s\n", 
addr
);

543 
uaddr
 = 
	`°πoul
(
addr
, 
NULL
, 16);

545 
devöfo_s
 
devöfo
 = { .
devaddr
 = 
uaddr
 };

547 
	`•rötf
(
db_Ámûy
, "devöfo/%08X", 
devöfo
.
devaddr
);

549 i‡((
	`lgw_db_gë
(
db_Ámûy
, "≠pskey", 
devöfo
.
≠pskey_°r
, (devinfo.appskey_str)) == -1) ||

550 (
	`lgw_db_gë
(
db_Ámûy
, "nwkskey", 
devöfo
.
devaddr_°r
, (devöfo.
nwkskey_°r
)) == -1)) {

551 
	`lgw_‰ì
(
íåy
);

555 
	`°r2hex
(
devöfo
.
≠pskey
, devöfo.
≠pskey_°r
, (devinfo.appskey));

556 
	`°r2hex
(
devöfo
.
nwkskey
, devöfo.
nwkskey_°r
, (devinfo.nwkskey));

558 
jô_ªsu…
 = 
	`cu°om_rx2dn
(
íåy
, &
devöfo
, 0, 
IMMEDIATE
);

560 i‡(
jô_ªsu…
 !
JIT_ERROR_OK
)

561 
	`lgw_log
(
LOG_ERROR
, "ERROR~ [DNLK]Packë REJECTED (jôÉº‹=%d)\n", 
jô_ªsu…
);

563 
	`lgw_log
(
LOG_INFO
, "INFO~ [DNLK]Nÿdevadd∏m©ch, Dr›Åhêlök o‡%s\n", 
addr
);

565 
	`lgw_‰ì
(
íåy
);

569 
	`LGW_LIST_LOCK
(&
dn_li°
);

570 
	`LGW_LIST_INSERT_TAIL
(&
dn_li°
, 
íåy
, 
li°
);

571 
	`LGW_LIST_UNLOCK
(&
dn_li°
);

573 i‡(
dn_li°
.
size
 > 16) {

574 
	`LGW_LIST_LOCK
(&
dn_li°
);

575 
	`LGW_LIST_TRAVERSE_SAFE_BEGIN
(&
dn_li°
, 
íåy
, 
li°
) {

576 i‡(
dn_li°
.
size
 < 8)

578 
	`LGW_LIST_REMOVE_CURRENT
(
li°
);

579 
dn_li°
.
size
--;

580 
	`lgw_‰ì
(
íåy
);

582 
LGW_LIST_TRAVERSE_SAFE_END
;

583 
	`LGW_LIST_UNLOCK
(&
dn_li°
);

586 
	`waô_ms
(20);

588 i‡(
	`˛o£dú
(
dú
) < 0)

589 
	`lgw_log
(
LOG_INFO
, "INFO~ [DNLK] C™nŸ clo£ DIR: %s\n", 
DNPATH
);

590 
	`waô_ms
(100);

592 
	}
}

	@fwd/src/semtech_serv.c

28 
	~<uni°d.h
>

29 
	~<°dlib.h
>

30 
	~<°rög.h
>

31 
	~<£m≠h‹e.h
>

32 
	~<time.h
>

33 
	~<öây≥s.h
>

34 
	~<m©h.h
>

35 
	~<î∫o.h
>

37 
	~<sys/ty≥s.h
>

38 
	~<sys/sockë.h
>

40 
	~"fwd.h
"

41 
	~"£rvi˚.h
"

42 
	~"£mãch_£rvi˚.h
"

43 
	~"jôqueue.h
"

44 
	~"∑rs⁄.h
"

45 
	~"ba£64.h
"

47 
	~"l‹agw_aux.h
"

49 
	gDECLARE_GW
;

50 
	gDECLARE_HAL
;

52 
£mãch_puŒ_down
(* 
¨g
);

53 
£mãch_push_up
(* 
¨g
);

55 
	$£mãch_°¨t
(
£rv_s
* 
£rv
) {

56 
£rv
->
√t
->
sock_up
 = 
	`öô_sock
((*)&£rv->√t->
addr
, (*)&£rv->√t->
p‹t_up
, (*)&£rv->√t->
push_timeout_hÆf
, (
timevÆ
));

57 
£rv
->
√t
->
sock_down
 = 
	`öô_sock
((*)&£rv->√t->
addr
, (*)&£rv->√t->
p‹t_down
, (*)&£rv->√t->
puŒ_timeout
, (
timevÆ
));

59 i‡(
	`lgw_±hªad_¸óã_background
(&
£rv
->
thªad
.
t_up
, 
NULL
, (*(*)(*))
£mãch_push_up
, serv)) {

60 
	`lgw_log
(
LOG_WARNING
, "WARNING~ [%s] C™'à¸óãÖush u∞±hªad.\n", 
£rv
->
öfo
.
«me
);

63 i‡(
	`lgw_±hªad_¸óã_background
(&
£rv
->
thªad
.
t_down
, 
NULL
, (*(*)(*))
£mãch_puŒ_down
, serv)) {

64 
	`lgw_log
(
LOG_WARNING
, "WARNING~ [%s] C™'à¸óãÖuŒ dow¿±hªad.\n", 
£rv
->
öfo
.
«me
);

68 
£rv
->
°©e
.
live
 = 
åue
;

69 
£rv
->
°©e
.
°Æl_time
 = 0;

72 
	}
}

74 
	$£mãch_°›
(
£rv_s
* 
£rv
) {

75 
£rv
->
thªad
.
°›_sig
 = 
åue
;

76 
	`£m_po°
(&
£rv
->
thªad
.
£ma
);

77 
	`±hªad_joö
(
£rv
->
thªad
.
t_up
, 
NULL
);

78 
	`±hªad_ˇn˚l
(
£rv
->
thªad
.
t_down
);

79 
	`˛o£
(
£rv
->
√t
->
sock_up
);

80 
	`˛o£
(
£rv
->
√t
->
sock_down
);

81 
£rv
->
°©e
.
live
 = 
Ál£
;

82 
£rv
->
√t
->
sock_up
 = -1;

83 
£rv
->
√t
->
sock_down
 = -1;

85 
	}
}

87 
	$£mãch_push_up
(* 
¨g
) {

88 
£rv_s
* 
£rv
 = (£rv_s*Ë
¨g
;

89 
	`lgw_log
(
LOG_DEBUG
, "DEBUG~ [%s] Sèπög semãch_push_u∞thªad.\n", 
£rv
->
öfo
.
«me
);

91 
i
, 
j
;

93 
nb_pkt
;

95 
pkt_ö_dgøm
 = 0;

97 
rxpkts_s
 
rxpkt_íåy
;

100 
lgw_pkt_rx_s
 *
p
;

103 
boﬁ
 
ªf_ok
 = 
Ál£
;

104 
åef
 
loˇl_ªf
;

107 
uöt8_t
 
buff_up
[
TX_BUFF_SIZE
];

108 
buff_ödex
;

109 
uöt8_t
 
buff_ack
[32];

112 
uöt8_t
 
tokí_h
;

113 
uöt8_t
 
tokí_l
;

116 
time•ec
 
£nd_time
;

117 
time•ec
 
ªcv_time
;

120 
time•ec
 
pkt_utc_time
;

121 
tm
* 
x
;

122 
time•ec
 
pkt_gps_time
;

123 
uöt64_t
 
pkt_gps_time_ms
;

126 
uöt32_t
 
mŸe_addr
 = 0;

127 
uöt16_t
 
mŸe_f˙t
 = 0;

128 
uöt8_t
 
mŸe_Â‹t
 = 0;

131 
buff_up
[0] = 
PROTOCOL_VERSION
;

132 
buff_up
[3] = 
PKT_PUSH_DATA
;

133 *(
uöt32_t
 *)(
buff_up
 + 4Ë
GW
.
öfo
.
√t_mac_h
;

134 *(
uöt32_t
 *)(
buff_up
 + 8Ë
GW
.
öfo
.
√t_mac_l
;

136 !
£rv
->
thªad
.
°›_sig
) {

138 
	`£m_waô
(&
£rv
->
thªad
.
£ma
);

140 
nb_pkt
 = 
	`gë_rxpkt
(
£rv
);

142 i‡(
nb_pkt
 =0 && 
£rv
->
ªp‹t
->
ªp‹t_ªady
 =
Ál£
)

145 
	`lgw_log
(
LOG_DEBUG
, "DEBUG~ [%s] semãch_push_u∞„tch %dÖachages.\n", 
£rv
->
öfo
.
«me
, 
nb_pkt
);

147 i‡(
GW
.
gps
.
gps_íabÀd
 =
åue
) {

148 
	`±hªad_muãx_lock
(&
GW
.
gps
.
mx_timîef
);

149 
ªf_ok
 = 
GW
.
gps
.
gps_ªf_vÆid
;

150 
loˇl_ªf
 = 
GW
.
gps
.
time_ª„ªn˚_gps
;

151 
	`±hªad_muãx_u∆ock
(&
GW
.
gps
.
mx_timîef
);

153 
ªf_ok
 = 
Ál£
;

157 
tokí_h
 = (
uöt8_t
)
	`ønd
();

158 
tokí_l
 = (
uöt8_t
)
	`ønd
();

159 
buff_up
[1] = 
tokí_h
;

160 
buff_up
[2] = 
tokí_l
;

161 
buff_ödex
 = 12;

163 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)"{\"rxpk\":[", 9);

164 
buff_ödex
 += 9;

167 
pkt_ö_dgøm
 = 0;

169 
i
 = 0; i < 
nb_pkt
; i++) {

170 
p
 = &
£rv
->
rxpkt
[
i
];

174 i‡(
p
->
size
 >= 8) {

175 
mŸe_addr
 = 
p
->
∑ylﬂd
[1];

176 
mŸe_addr
 |
p
->
∑ylﬂd
[2] << 8;

177 
mŸe_addr
 |
p
->
∑ylﬂd
[3] << 16;

178 
mŸe_addr
 |
p
->
∑ylﬂd
[4] << 24;

180 
mŸe_f˙t
 = 
p
->
∑ylﬂd
[6];

181 
mŸe_f˙t
 |
p
->
∑ylﬂd
[7] << 8;

183 
mŸe_Â‹t
 = 
p
->
∑ylﬂd
[8];

186 
mŸe_addr
 = 0;

187 
mŸe_f˙t
 = 0;

188 
mŸe_Â‹t
 = 0;

192 
	`±hªad_muãx_lock
(&
£rv
->
ªp‹t
->
mx_ªp‹t
);

193 
£rv
->
ªp‹t
->
°©_up
.
mós_nb_rx_rcv
 += 1;

194 
p
->
°©us
) {

195 
STAT_CRC_OK
:

196 
£rv
->
ªp‹t
->
°©_up
.
mós_nb_rx_ok
 += 1;

197 i‡(!
£rv
->
fûãr
.
fwd_vÆid_pkt
) {

198 
	`±hªad_muãx_u∆ock
(&
£rv
->
ªp‹t
->
mx_ªp‹t
);

202 
STAT_CRC_BAD
:

203 
£rv
->
ªp‹t
->
°©_up
.
mós_nb_rx_bad
 += 1;

204 i‡(!
£rv
->
fûãr
.
fwd_îr‹_pkt
) {

205 
	`±hªad_muãx_u∆ock
(&
£rv
->
ªp‹t
->
mx_ªp‹t
);

209 
STAT_NO_CRC
:

210 
£rv
->
ªp‹t
->
°©_up
.
mós_nb_rx_no¸c
 += 1;

211 i‡(!
£rv
->
fûãr
.
fwd_no¸c_pkt
) {

212 
	`±hªad_muãx_u∆ock
(&
£rv
->
ªp‹t
->
mx_ªp‹t
);

217 
	`lgw_log
(
LOG_WARNING
, "WARNING~ [%s-up]Ñe˚ivedÖackë wôh unknow¿°©u†%u (sizê%u, moduœti⁄ %u, BW %u, DR %u, RSSI %.1f)\n", 
£rv
->
öfo
.
«me
, 
p
->
°©us
,Ö->
size
,Ö->
moduœti⁄
,Ö->
b™dwidth
,Ö->
d©¨©e
,Ö->
rssic
);

218 
	`±hªad_muãx_u∆ock
(&
£rv
->
ªp‹t
->
mx_ªp‹t
);

223 i‡(
mŸe_addr
 !0 && 
mŸe_Â‹t
 != 0) {

224 i‡(
	`pkt_basic_fûãr
(
£rv
, 
mŸe_addr
, 
mŸe_Â‹t
)) {

225 
	`lgw_log
(
LOG_INFO
, "INFO~ [%s-up] Dr›áÖackë.\n", 
£rv
->
öfo
.
«me
);

226 
	`±hªad_muãx_u∆ock
(&
£rv
->
ªp‹t
->
mx_ªp‹t
);

231 
£rv
->
ªp‹t
->
°©_up
.
mós_up_pkt_fwd
 += 1;

232 
£rv
->
ªp‹t
->
°©_up
.
mós_up_∑ylﬂd_byã
 +
p
->
size
;

233 
	`±hªad_muãx_u∆ock
(&
£rv
->
ªp‹t
->
mx_ªp‹t
);

234 
	`lgw_log
(
LOG_INFO
, "\nINFO~ [%s-up]Ñe˚ivedÖackage†‰om mŸe: %08X (f˙t=%u)\n", 
£rv
->
öfo
.
«me
, 
mŸe_addr
, 
mŸe_f˙t
);

237 i‡(
pkt_ö_dgøm
 == 0) {

238 
buff_up
[
buff_ödex
] = '{';

239 ++
buff_ödex
;

241 
buff_up
[
buff_ödex
] = ',';

242 
buff_up
[
buff_ödex
+1] = '{';

243 
buff_ödex
 += 2;

247 
j
 = 
	`¢¥ötf
((*)(
buff_up
 + 
buff_ödex
), 
TX_BUFF_SIZE
-buff_ödex, "\"jvî\":%d", 
PROTOCOL_JSON_RXPK_FRAME_FORMAT
);

248 i‡(
j
 > 0) {

249 
buff_ödex
 +
j
;

251 
	`lgw_log
(
LOG_ERROR
, "ERROR~ [%s-up] s≈röt‡ÁûedÜöê%u\n", 
£rv
->
öfo
.
«me
, (
__LINE__
 - 4));

252 
buff_ödex
 = 21;

257 
j
 = 
	`¢¥ötf
((*)(
buff_up
 + 
buff_ödex
), 
TX_BUFF_SIZE
-buff_ödex, ",\"tm°\":%u", 
p
->
cou¡_us
);

258 i‡(
j
 > 0) {

259 
buff_ödex
 +
j
;

261 
	`lgw_log
(
LOG_ERROR
, "ERROR~ [%s-up] s≈röt‡ÁûedÜöê%u\n", 
£rv
->
öfo
.
«me
, (
__LINE__
 - 4));

262 
buff_ödex
 = 21;

267 i‡(
ªf_ok
 =
åue
) {

269 
j
 = 
	`lgw_˙t2utc
(
loˇl_ªf
, 
p
->
cou¡_us
, &
pkt_utc_time
);

270 i‡(
j
 =
LGW_GPS_SUCCESS
) {

272 
x
 = 
	`gmtime
(&(
pkt_utc_time
.
tv_£c
));

273 
j
 = 
	`¢¥ötf
((*)(
buff_up
 + 
buff_ödex
), 
TX_BUFF_SIZE
-buff_ödex, ",\"time\":\"%04i-%02i-%02iT%02i:%02i:%02i.%06liZ\"", (
x
->
tm_yór
)+1900, (x->
tm_m⁄
)+1, x->
tm_mday
, x->
tm_hour
, x->
tm_mö
, x->
tm_£c
, (
pkt_utc_time
.
tv_n£c
)/1000);

274 i‡(
j
 > 0) {

275 
buff_ödex
 +
j
;

277 
	`lgw_log
(
LOG_ERROR
, "ERROR~ [%s-up] s≈röt‡ÁûedÜöê%u\n", 
£rv
->
öfo
.
«me
, (
__LINE__
 - 4));

278 
buff_ödex
 = 21;

283 
j
 = 
	`lgw_˙t2gps
(
loˇl_ªf
, 
p
->
cou¡_us
, &
pkt_gps_time
);

284 i‡(
j
 =
LGW_GPS_SUCCESS
) {

285 
pkt_gps_time_ms
 = 
pkt_gps_time
.
tv_£c
 * 1E3 +Ökt_gps_time.
tv_n£c
 / 1E6;

286 
j
 = 
	`¢¥ötf
((*)(
buff_up
 + 
buff_ödex
), 
TX_BUFF_SIZE
-buff_ödex, ",\"tmms\":%" 
PRIu64
 "", 
pkt_gps_time_ms
);

287 i‡(
j
 > 0) {

288 
buff_ödex
 +
j
;

290 
	`lgw_log
(
LOG_ERROR
, "ERROR~ [%s-up] s≈röt‡ÁûedÜöê%u\n", 
£rv
->
öfo
.
«me
, (
__LINE__
 - 4));

291 
buff_ödex
 = 21;

299 
j
 = 
	`¢¥ötf
((*)(
buff_up
 + 
buff_ödex
), 
TX_BUFF_SIZE
-buff_ödex, ",\"ch™\":%1u,\"rfch\":%1u,\"‰eq\":%.6lf,\"mid\":%2u", 
p
->
if_chaö
,Ö->
rf_chaö
, ((Ì->
‰eq_hz
 / 1e6),Ö->
modem_id
);

300 i‡(
j
 > 0) {

301 
buff_ödex
 +
j
;

303 
	`lgw_log
(
LOG_ERROR
, "ERROR~ [%s-up] s≈röt‡ÁûedÜöê%u\n", 
£rv
->
öfo
.
«me
, (
__LINE__
 - 4));

304 
buff_ödex
 = 21;

310 
p
->
°©us
) {

311 
STAT_CRC_OK
:

312 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"stat\":1", 9);

313 
buff_ödex
 += 9;

315 
STAT_CRC_BAD
:

316 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"stat\":-1", 10);

317 
buff_ödex
 += 10;

319 
STAT_NO_CRC
:

320 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"stat\":0", 9);

321 
buff_ödex
 += 9;

324 
	`lgw_log
(
LOG_ERROR
, "ERROR~ [%s-up]Ñe˚ivedÖackë wôh unknow¿°©u†0x%02X\n", 
£rv
->
öfo
.
«me
, 
p
->
°©us
);

325 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"stat\":?", 9);

326 
buff_ödex
 += 9;

332 i‡(
p
->
moduœti⁄
 =
MOD_LORA
) {

333 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"modu\":\"LORA\"", 14);

334 
buff_ödex
 += 14;

337 
p
->
d©¨©e
) {

338 
DR_LORA_SF5
:

339 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"datr\":\"SF5", 12);

340 
buff_ödex
 += 12;

342 
DR_LORA_SF6
:

343 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"datr\":\"SF6", 12);

344 
buff_ödex
 += 12;

346 
DR_LORA_SF7
:

347 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"datr\":\"SF7", 12);

348 
buff_ödex
 += 12;

350 
DR_LORA_SF8
:

351 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"datr\":\"SF8", 12);

352 
buff_ödex
 += 12;

354 
DR_LORA_SF9
:

355 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"datr\":\"SF9", 12);

356 
buff_ödex
 += 12;

358 
DR_LORA_SF10
:

359 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"datr\":\"SF10", 13);

360 
buff_ödex
 += 13;

362 
DR_LORA_SF11
:

363 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"datr\":\"SF11", 13);

364 
buff_ödex
 += 13;

366 
DR_LORA_SF12
:

367 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"datr\":\"SF12", 13);

368 
buff_ödex
 += 13;

371 
	`lgw_log
(
LOG_ERROR
, "ERROR~ [%s-up]Ü‹®∑ckë wôh unknow¿d©¨©ê0x%02X\n", 
£rv
->
öfo
.
«me
, 
p
->
d©¨©e
);

372 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"datr\":\"SF?", 12);

373 
buff_ödex
 += 12;

377 
p
->
b™dwidth
) {

378 
BW_125KHZ
:

379 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)"BW125\"", 6);

380 
buff_ödex
 += 6;

382 
BW_250KHZ
:

383 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)"BW250\"", 6);

384 
buff_ödex
 += 6;

386 
BW_500KHZ
:

387 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)"BW500\"", 6);

388 
buff_ödex
 += 6;

391 
	`lgw_log
(
LOG_WARNING
, "WARNING~ [%s-up]Ü‹®∑ckë wôh unknow¿b™dwidth 0x%02X\n", 
£rv
->
öfo
.
«me
, 
p
->
b™dwidth
);

392 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)"BW?\"", 4);

393 
buff_ödex
 += 4;

399 
p
->
codî©e
) {

400 
CR_LORA_4_5
:

401 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"codr\":\"4/5\"", 13);

402 
buff_ödex
 += 13;

404 
CR_LORA_4_6
:

405 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"codr\":\"4/6\"", 13);

406 
buff_ödex
 += 13;

408 
CR_LORA_4_7
:

409 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"codr\":\"4/7\"", 13);

410 
buff_ödex
 += 13;

412 
CR_LORA_4_8
:

413 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"codr\":\"4/8\"", 13);

414 
buff_ödex
 += 13;

417 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"codr\":\"OFF\"", 13);

418 
buff_ödex
 += 13;

421 
	`lgw_log
(
LOG_WARNING
, "WARNING~ [%s-up]Ü‹®∑ckë wôh unknow¿codî©ê0x%02X\n", 
£rv
->
öfo
.
«me
, 
p
->
codî©e
);

422 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"codr\":\"?\"", 11);

423 
buff_ödex
 += 11;

429 
j
 = 
	`¢¥ötf
((*)(
buff_up
 + 
buff_ödex
), 
TX_BUFF_SIZE
-buff_ödex, ",\"rssis\":%.0f", 
	`roundf
(
p
->
rssis
));

430 i‡(
j
 > 0) {

431 
buff_ödex
 +
j
;

433 
	`lgw_log
(
LOG_ERROR
, "ERROR~ [%s-up] s≈röt‡ÁûedÜöê%u\n", 
£rv
->
öfo
.
«me
, (
__LINE__
 - 4));

434 
buff_ödex
 = 21;

440 
j
 = 
	`¢¥ötf
((*)(
buff_up
 + 
buff_ödex
), 
TX_BUFF_SIZE
-buff_ödex, ",\"l¢r\":%.1f", 
p
->
¢r
);

441 i‡(
j
 > 0) {

442 
buff_ödex
 +
j
;

444 
	`lgw_log
(
LOG_ERROR
, "ERROR~ [%s-up] s≈röt‡ÁûedÜöê%u\n", 
£rv
->
öfo
.
«me
, (
__LINE__
 - 4));

445 
buff_ödex
 = 21;

451 
j
 = 
	`¢¥ötf
((*)(
buff_up
 + 
buff_ödex
), 
TX_BUFF_SIZE
-buff_ödex, ",\"foff\":%d", 
p
->
‰eq_off£t
);

452 i‡(
j
 > 0) {

453 
buff_ödex
 +
j
;

455 
	`lgw_log
(
LOG_ERROR
, "ERROR~ [%s-up] s≈röt‡ÁûedÜöê%u\n", 
£rv
->
öfo
.
«me
, (
__LINE__
 - 4));

456 
buff_ödex
 = 21;

460 } i‡(
p
->
moduœti⁄
 =
MOD_FSK
) {

461 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"modu\":\"FSK\"", 13);

462 
buff_ödex
 += 13;

465 
j
 = 
	`¢¥ötf
((*)(
buff_up
 + 
buff_ödex
), 
TX_BUFF_SIZE
-buff_ödex, ",\"d©r\":%u", 
p
->
d©¨©e
);

466 i‡(
j
 > 0) {

467 
buff_ödex
 +
j
;

469 
	`lgw_log
(
LOG_ERROR
, "ERROR~ [%s-up] s≈röt‡ÁûedÜöê%u\n", 
£rv
->
öfo
.
«me
, (
__LINE__
 - 4));

470 
buff_ödex
 = 21;

475 
	`lgw_log
(
LOG_ERROR
, "ERROR~ [%s-up]Ñe˚ivedÖackë wôh unknow¿moduœti⁄ 0x%02X\n", 
£rv
->
öfo
.
«me
, 
p
->
moduœti⁄
);

476 
buff_ödex
 = 21;

482 
j
 = 
	`¢¥ötf
((*)(
buff_up
 + 
buff_ödex
), 
TX_BUFF_SIZE
-buff_ödex, ",\"rssi\":%.0f,\"size\":%u", 
	`roundf
(
p
->
rssic
),Ö->
size
);

483 i‡(
j
 > 0) {

484 
buff_ödex
 +
j
;

486 
	`lgw_log
(
LOG_ERROR
, "ERROR~ [%s-up] s≈röt‡ÁûedÜöê%u\n", 
£rv
->
öfo
.
«me
, (
__LINE__
 - 4));

487 
buff_ödex
 = 21;

492 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"data\":\"", 9);

493 
buff_ödex
 += 9;

494 
j
 = 
	`bö_to_b64
(
p
->
∑ylﬂd
,Ö->
size
, (*)(
buff_up
 + 
buff_ödex
), 341);

495 i‡(
j
>=0) {

496 
buff_ödex
 +
j
;

498 
	`lgw_log
(
LOG_ERROR
, "ERROR~ [%s-up] bö_to_b64 faûedÜöê%u\n", 
£rv
->
öfo
.
«me
, (
__LINE__
 - 5));

499 
buff_ödex
 = 21;

503 
buff_up
[
buff_ödex
] = '"';

504 ++
buff_ödex
;

507 
buff_up
[
buff_ödex
] = '}';

508 ++
buff_ödex
;

509 ++
pkt_ö_dgøm
;

514 i‡(
pkt_ö_dgøm
 == 0) {

515 i‡(
£rv
->
ªp‹t
->
ªp‹t_ªady
 =
åue
) {

517 
buff_ödex
 -= 8;

523 
buff_up
[
buff_ödex
] = ']';

524 ++
buff_ödex
;

526 i‡(
£rv
->
ªp‹t
->
ªp‹t_ªady
 =
åue
) {

527 
buff_up
[
buff_ödex
] = ',';

528 ++
buff_ödex
;

533 i‡(
£rv
->
ªp‹t
->
ªp‹t_ªady
 =
åue
) {

534 
	`±hªad_muãx_lock
(&
£rv
->
ªp‹t
->
mx_ªp‹t
);

535 
£rv
->
ªp‹t
->
ªp‹t_ªady
 = 
Ál£
;

536 
j
 = 
	`¢¥ötf
((*)(
buff_up
 + 
buff_ödex
), 
TX_BUFF_SIZE
-buff_ödex, "%s", 
£rv
->
ªp‹t
->
°©us_ªp‹t
);

537 
	`±hªad_muãx_u∆ock
(&
£rv
->
ªp‹t
->
mx_ªp‹t
);

538 i‡(
j
 > 0) {

539 
buff_ödex
 +
j
;

541 
	`lgw_log
(
LOG_ERROR
, "ERROR~ [%s-up] s≈röt‡ÁûedÜöê%u\n", 
£rv
->
öfo
.
«me
, (
__LINE__
 - 5));

542 
	`±hªad_muãx_lock
(&
£rv
->
ªp‹t
->
mx_ªp‹t
);

543 
£rv
->
ªp‹t
->
ªp‹t_ªady
 = 
åue
;

544 
	`±hªad_muãx_u∆ock
(&
£rv
->
ªp‹t
->
mx_ªp‹t
);

545 
buff_ödex
 -= 1;

550 
buff_up
[
buff_ödex
] = '}';

551 ++
buff_ödex
;

552 
buff_up
[
buff_ödex
] = 0;

554 
	`lgw_log
(
LOG_PKT
, "PKTUP~ [%s] JSON: %s\n", 
£rv
->
öfo
.
«me
, (*)(
buff_up
 + 12));

557 i‡(
£rv
->
√t
->
sock_up
 == -1) {

558 
£rv
->
√t
->
sock_up
 = 
	`öô_sock
((*)&£rv->√t->
addr
, (*)&£rv->√t->
p‹t_up
, (*)&£rv->√t->
push_timeout_hÆf
, (
timevÆ
));

561 i‡(
£rv
->
√t
->
sock_up
 == -1)

564 
	`£nd
(
£rv
->
√t
->
sock_up
, (*)
buff_up
, 
buff_ödex
, 0);

565 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
£nd_time
);

567 
	`±hªad_muãx_lock
(&
£rv
->
ªp‹t
->
mx_ªp‹t
);

568 
£rv
->
ªp‹t
->
°©_up
.
mós_up_dgøm_£¡
 += 1;

569 
£rv
->
ªp‹t
->
°©_up
.
mós_up_√tw‹k_byã
 +
buff_ödex
;

572 
i
=0; i<2; ++i) {

573 
j
 = 
	`ªcv
(
£rv
->
√t
->
sock_up
, (*)
buff_ack
,  buff_ack, 0);

574 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
ªcv_time
);

575 i‡(
j
 == -1) {

576 i‡(
î∫o
 =
EAGAIN
) {

581 } i‡((
j
 < 4Ë|| (
buff_ack
[0] !
PROTOCOL_VERSION
Ë|| (buff_ack[3] !
PKT_PUSH_ACK
)) {

584 } i‡((
buff_ack
[1] !
tokí_h
Ë|| (buff_ack[2] !
tokí_l
)) {

588 
	`lgw_log
(
LOG_DEBUG
, "DEBUG~ [%s-up] PUSH_ACKÑe˚ived i¿%òms\n", 
£rv
->
öfo
.
«me
, ()(1000 * 
	`dif·ime•ec
(
ªcv_time
, 
£nd_time
)));

589 
	`time
(&
£rv
->
°©e
.
c⁄è˘
);

590 
£rv
->
ªp‹t
->
°©_up
.
mós_up_ack_rcv
 += 1;

594 
	`±hªad_muãx_u∆ock
(&
£rv
->
ªp‹t
->
mx_ªp‹t
);

596 
	`lgw_log
(
LOG_INFO
, "\nINFO~ [%s-up] End o‡£mãch up°ªamÅhªad\n", 
£rv
->
öfo
.
«me
);

597 
	}
}

602 
	$£mãch_puŒ_down
(* 
¨g
) {

603 
£rv_s
* 
£rv
 = (£rv_s*Ë
¨g
;

604 
	`lgw_log
(
LOG_DEBUG
, "DEBUG~ [%s] Sèπög semãch_push_dow¿thªad.\n", 
£rv
->
öfo
.
«me
);

606 
i
;

607 
ªåy
;

610 
lgw_pkt_tx_s
 
txpkt
;

611 
boﬁ
 
£¡_immedüã
 = 
Ál£
;

614 
time•ec
 
£nd_time
;

615 
time•ec
 
ªcv_time
;

618 
uöt8_t
 
buff_down
[1000];

619 
uöt8_t
 
buff_ªq
[12];

620 
msg_Àn
;

623 
uöt8_t
 
tokí_h
;

624 
uöt8_t
 
tokí_l
;

625 
boﬁ
 
ªq_ack
 = 
Ál£
;

628 
JSON_VÆue
 *
roŸ_vÆ
 = 
NULL
;

629 
JSON_Obje˘
 *
txpk_obj
 = 
NULL
;

630 
JSON_VÆue
 *
vÆ
 = 
NULL
;

631 c⁄° *
°r
;

632 
x0
, 
x1
;

633 
uöt64_t
 
x2
;

634 
x3
, 
x4
;

637 
åef
 
loˇl_ªf
;

638 
time•ec
 
gps_tx
;

641 
lgw_pkt_tx_s
 
bóc⁄_pkt
;

642 
uöt8_t
 
bóc⁄_ch™
;

643 
uöt8_t
 
bóc⁄_lo›
;

644 
size_t
 
bóc⁄_RFU1_size
 = 0;

645 
size_t
 
bóc⁄_RFU2_size
 = 0;

646 
uöt8_t
 
bóc⁄_pyld_idx
 = 0;

647 
time_t
 
diff_bóc⁄_time
;

648 
time•ec
 
√xt_bóc⁄_gps_time
;

649 
time•ec
 
œ°_bóc⁄_gps_time
;

652 
öt32_t
 
fõld_œtôude
;

653 
öt32_t
 
fõld_l⁄gôude
;

654 
uöt16_t
 
fõld_¸c1
, 
fõld_¸c2
;

657 
uöt32_t
 
autoquô_˙t
 = 0;

660 
uöt32_t
 
cuºít_c⁄˚¡øt‹_time
;

661 
jô_îr‹_e
 
jô_ªsu…
 = 
JIT_ERROR_OK
;

662 
jô_pkt_ty≥_e
 
dow∆ök_ty≥
;

663 
jô_îr‹_e
 
w¨nög_ªsu…
 = 
JIT_ERROR_OK
;

664 
öt32_t
 
w¨nög_vÆue
 = 0;

665 
uöt8_t
 
tx_lut_idx
 = 0;

668 
buff_ªq
[0] = 
PROTOCOL_VERSION
;

669 
buff_ªq
[3] = 
PKT_PULL_DATA
;

670 *(
uöt32_t
 *)(
buff_ªq
 + 4Ë
GW
.
öfo
.
√t_mac_h
;

671 *(
uöt32_t
 *)(
buff_ªq
 + 8Ë
GW
.
öfo
.
√t_mac_l
;

674 
œ°_bóc⁄_gps_time
.
tv_£c
 = 0;

675 
œ°_bóc⁄_gps_time
.
tv_n£c
 = 0;

678 
bóc⁄_pkt
.
tx_mode
 = 
ON_GPS
;

679 
bóc⁄_pkt
.
rf_chaö
 = 0;

680 
bóc⁄_pkt
.
rf_powî
 = 
GW
.
bóc⁄
.
bóc⁄_powî
;

681 
bóc⁄_pkt
.
moduœti⁄
 = 
MOD_LORA
;

682 
GW
.
bóc⁄
.
bóc⁄_bw_hz
) {

684 
bóc⁄_pkt
.
b™dwidth
 = 
BW_125KHZ
;

687 
bóc⁄_pkt
.
b™dwidth
 = 
BW_500KHZ
;

691 
	`lgw_log
(
LOG_ERROR
, "ERROR~ [%s-down] unsuµ‹ãd b™dwidth f‹ bóc⁄\n", 
£rv
->
öfo
.
«me
);

695 
GW
.
bóc⁄
.
bóc⁄_d©¨©e
) {

697 
bóc⁄_pkt
.
d©¨©e
 = 
DR_LORA_SF8
;

698 
bóc⁄_RFU1_size
 = 1;

699 
bóc⁄_RFU2_size
 = 3;

702 
bóc⁄_pkt
.
d©¨©e
 = 
DR_LORA_SF9
;

703 
bóc⁄_RFU1_size
 = 2;

704 
bóc⁄_RFU2_size
 = 0;

707 
bóc⁄_pkt
.
d©¨©e
 = 
DR_LORA_SF10
;

708 
bóc⁄_RFU1_size
 = 3;

709 
bóc⁄_RFU2_size
 = 1;

712 
bóc⁄_pkt
.
d©¨©e
 = 
DR_LORA_SF12
;

713 
bóc⁄_RFU1_size
 = 5;

714 
bóc⁄_RFU2_size
 = 3;

718 
	`lgw_log
(
LOG_ERROR
, "ERROR~ %†unsuµ‹ãd d©¨©êf‹ bóc⁄\n", 
£rv
->
öfo
.
«me
);

721 
bóc⁄_pkt
.
size
 = 
bóc⁄_RFU1_size
 + 4 + 2 + 7 + 
bóc⁄_RFU2_size
 + 2;

722 
bóc⁄_pkt
.
codî©e
 = 
CR_LORA_4_5
;

723 
bóc⁄_pkt
.
övît_pﬁ
 = 
Ál£
;

724 
bóc⁄_pkt
.
¥ómbÀ
 = 10;

725 
bóc⁄_pkt
.
no_¸c
 = 
åue
;

726 
bóc⁄_pkt
.
no_hódî
 = 
åue
;

729 
i
 = 0; i < ()
bóc⁄_RFU1_size
; i++) {

730 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 0x0;

734 
bóc⁄_pyld_idx
 += 4;

735 
bóc⁄_pyld_idx
 += 2;

738 
fõld_œtôude
 = (
öt32_t
)((
GW
.
gps
.
ª„ªn˚_co‹d
.
œt
 / 90.0) * ()(1<<23));

739 i‡(
fõld_œtôude
 > (
öt32_t
)0x007FFFFF) {

740 
fõld_œtôude
 = (
öt32_t
)0x007FFFFF;

741 } i‡(
fõld_œtôude
 < (
öt32_t
)0xFF800000) {

742 
fõld_œtôude
 = (
öt32_t
)0xFF800000;

744 
fõld_l⁄gôude
 = (
öt32_t
)((
GW
.
gps
.
ª„ªn˚_co‹d
.
l⁄
 / 180.0) * ()(1<<23));

745 i‡(
fõld_l⁄gôude
 > (
öt32_t
)0x007FFFFF) {

746 
fõld_l⁄gôude
 = (
öt32_t
)0x007FFFFF;

747 } i‡(
fõld_l⁄gôude
 < (
öt32_t
)0xFF800000) {

748 
fõld_l⁄gôude
 = (
öt32_t
)0xFF800000;

752 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 
GW
.
bóc⁄
.
bóc⁄_öfodesc
;

753 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 0xFF & 
fõld_œtôude
;

754 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 0xFF & (
fõld_œtôude
 >> 8);

755 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 0xFF & (
fõld_œtôude
 >> 16);

756 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 0xFF & 
fõld_l⁄gôude
;

757 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 0xFF & (
fõld_l⁄gôude
 >> 8);

758 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 0xFF & (
fõld_l⁄gôude
 >> 16);

761 
i
 = 0; i < ()
bóc⁄_RFU2_size
; i++) {

762 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 0x0;

766 
fõld_¸c2
 = 
	`¸c16
((
bóc⁄_pkt
.
∑ylﬂd
 + 6 + 
bóc⁄_RFU1_size
), 7 + 
bóc⁄_RFU2_size
);

767 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 0xFF & 
fõld_¸c2
;

768 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 0xFF & (
fõld_¸c2
 >> 8);

770 !
£rv
->
thªad
.
°›_sig
) {

773 i‡((
GW
.
cfg
.
autoquô_thªshﬁd
 > 0Ë&& (
autoquô_˙t
 >= GW.cfg.autoquit_threshold)) {

774 
£rv
->
thªad
.
°›_sig
 = 
åue
;

775 
	`lgw_log
(
LOG_ERROR
, "INFO~ [%s-down]Åhêœ° %u PULL_DATA wîênŸ ACKed,Éxôögáµliˇti⁄\n", 
£rv
->
öfo
.
«me
, 
GW
.
cfg
.
autoquô_thªshﬁd
);

780 
tokí_h
 = (
uöt8_t
)
	`ønd
();

781 
tokí_l
 = (
uöt8_t
)
	`ønd
();

782 
buff_ªq
[1] = 
tokí_h
;

783 
buff_ªq
[2] = 
tokí_l
;

785 i‡(
£rv
->
√t
->
sock_down
 == -1) {

786 
£rv
->
√t
->
sock_down
 = 
	`öô_sock
((*)&£rv->√t->
addr
, (*)&£rv->√t->
p‹t_down
, (*)&£rv->√t->
puŒ_timeout
, (
timevÆ
));

789 i‡(
£rv
->
√t
->
sock_down
 == -1)

793 
	`£nd
(
£rv
->
√t
->
sock_down
, (*)
buff_ªq
,  buff_req, 0);

794 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
£nd_time
);

795 
	`±hªad_muãx_lock
(&
£rv
->
ªp‹t
->
mx_ªp‹t
);

796 
£rv
->
ªp‹t
->
°©_down
.
mós_dw_puŒ_£¡
 += 1;

797 
	`±hªad_muãx_u∆ock
(&
£rv
->
ªp‹t
->
mx_ªp‹t
);

798 
ªq_ack
 = 
Ál£
;

799 
autoquô_˙t
++;

802 
ªcv_time
 = 
£nd_time
;

803 ()
	`dif·ime•ec
(
ªcv_time
, 
£nd_time
Ë< 
DEFAULT_KEEPALIVE
) {

806 
msg_Àn
 = 
	`ªcv
(
£rv
->
√t
->
sock_down
, (*)
buff_down
, ( buff_down)-1, 0);

807 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
ªcv_time
);

810 
bóc⁄_lo›
 = 
JIT_NUM_BEACON_IN_QUEUE
 - 
GW
.
tx
.
jô_queue
[0].
num_bóc⁄
;

811 
ªåy
 = 0;

812 
bóc⁄_lo›
 && (
GW
.
bóc⁄
.
bóc⁄_≥riod
 != 0)) {

813 
	`±hªad_muãx_lock
(&
GW
.
gps
.
mx_timîef
);

815 i‡((
GW
.
gps
.
gps_ªf_vÆid
 =
åue
Ë&& (GW.
hÆ
.
xèl_c‹ª˘_ok
 ==Årue)) {

820 i‡(
œ°_bóc⁄_gps_time
.
tv_£c
 == 0) {

822 
diff_bóc⁄_time
 = 
GW
.
gps
.
time_ª„ªn˚_gps
.gps.
tv_£c
 % ((
time_t
)GW.
bóc⁄
.
bóc⁄_≥riod
);

823 
√xt_bóc⁄_gps_time
.
tv_£c
 = 
GW
.
gps
.
time_ª„ªn˚_gps
.gps.tv_sec +

824 ((
time_t
)
GW
.
bóc⁄
.
bóc⁄_≥riod
 - 
diff_bóc⁄_time
);

827 
√xt_bóc⁄_gps_time
.
tv_£c
 = 
œ°_bóc⁄_gps_time
.tv_£¯+ 
GW
.
bóc⁄
.
bóc⁄_≥riod
;

830 
√xt_bóc⁄_gps_time
.
tv_£c
 +(
ªåy
 * 
GW
.
bóc⁄
.
bóc⁄_≥riod
);

831 
√xt_bóc⁄_gps_time
.
tv_n£c
 = 0;

833 #i‡
DEBUG_BEACON


835 
time_t
 
time_unix
;

837 
time_unix
 = 
GW
.
gps
.
time_ª„ªn˚_gps
.gps.
tv_£c
 + 
UNIX_GPS_EPOCH_OFFSET
;

838 
	`lgw_log
(
DEBUG_BEACON
, "DEBUG~ [%s] GPS-now : %s", 
£rv
->
öfo
.
«me
, 
	`˘ime
(&
time_unix
));

839 
time_unix
 = 
œ°_bóc⁄_gps_time
.
tv_£c
 + 
UNIX_GPS_EPOCH_OFFSET
;

840 
	`lgw_log
(
DEBUG_BEACON
, "DEBUG~ [%s] GPS-œ°: %s", 
£rv
->
öfo
.
«me
, 
	`˘ime
(&
time_unix
));

841 
time_unix
 = 
√xt_bóc⁄_gps_time
.
tv_£c
 + 
UNIX_GPS_EPOCH_OFFSET
;

842 
	`lgw_log
(
DEBUG_BEACON
, "DEBUG~ [%s] GPS-√xt: %s", 
£rv
->
öfo
.
«me
, 
	`˘ime
(&
time_unix
));

847 
	`lgw_gps2˙t
(
GW
.
gps
.
time_ª„ªn˚_gps
, 
√xt_bóc⁄_gps_time
, &(
bóc⁄_pkt
.
cou¡_us
));

848 
	`±hªad_muãx_u∆ock
(&
GW
.
gps
.
mx_timîef
);

851 i‡(
GW
.
bóc⁄
.
bóc⁄_‰eq_nb
 > 1) {

852 
bóc⁄_ch™
 = (
√xt_bóc⁄_gps_time
.
tv_£c
 / 
GW
.
bóc⁄
.
bóc⁄_≥riod
Ë% GW.bóc⁄.
bóc⁄_‰eq_nb
;

854 
bóc⁄_ch™
 = 0;

857 
bóc⁄_pkt
.
‰eq_hz
 = 
GW
.
bóc⁄
.
bóc⁄_‰eq_hz
 + (
bóc⁄_ch™
 * GW.bóc⁄.
bóc⁄_‰eq_°ï
);

860 
bóc⁄_pyld_idx
 = 
bóc⁄_RFU1_size
;

861 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 0xFF & 
√xt_bóc⁄_gps_time
.
tv_£c
;

862 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 0xFF & (
√xt_bóc⁄_gps_time
.
tv_£c
 >> 8);

863 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 0xFF & (
√xt_bóc⁄_gps_time
.
tv_£c
 >> 16);

864 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 0xFF & (
√xt_bóc⁄_gps_time
.
tv_£c
 >> 24);

867 
fõld_¸c1
 = 
	`¸c16
(
bóc⁄_pkt
.
∑ylﬂd
, 4 + 
bóc⁄_RFU1_size
);

868 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 0xFF & 
fõld_¸c1
;

869 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 0xFF & (
fõld_¸c1
 >> 8);

872 
	`±hªad_muãx_lock
(&
GW
.
hÆ
.
mx_c⁄˚¡
);

873 
HAL
.
	`lgw_gë_ö°˙t
(&
cuºít_c⁄˚¡øt‹_time
);

874 
	`±hªad_muãx_u∆ock
(&
GW
.
hÆ
.
mx_c⁄˚¡
);

875 
jô_ªsu…
 = 
	`jô_íqueue
(&
GW
.
tx
.
jô_queue
[0], 
cuºít_c⁄˚¡øt‹_time
, &
bóc⁄_pkt
, 
JIT_PKT_TYPE_BEACON
);

876 i‡(
jô_ªsu…
 =
JIT_ERROR_OK
) {

878 
	`±hªad_muãx_lock
(&
£rv
->
ªp‹t
->
mx_ªp‹t
);

879 
£rv
->
ªp‹t
->
mós_nb_bóc⁄_queued
 += 1;

880 
	`±hªad_muãx_u∆ock
(&
£rv
->
ªp‹t
->
mx_ªp‹t
);

883 
bóc⁄_lo›
--;

884 
ªåy
 = 0;

885 
œ°_bóc⁄_gps_time
.
tv_£c
 = 
√xt_bóc⁄_gps_time
.tv_sec;

888 
	`lgw_log
(
LOG_INFO
, "INFO~ [%s-bóc⁄] Bóc⁄ queued (cou¡_us=%u, fªq_hz=%u, size=%u):\n", 
£rv
->
öfo
.
«me
, 
bóc⁄_pkt
.
cou¡_us
, bóc⁄_pkt.
‰eq_hz
, bóc⁄_pkt.
size
);

889 
	`lgw_log
(
LOG_INFO
, " => ");

890 
i
 = 0; i < 
bóc⁄_pkt
.
size
; ++i) {

891 
	`lgw_log
(
LOG_INFO
, "%02X ", 
bóc⁄_pkt
.
∑ylﬂd
[
i
]);

893 
	`lgw_log
(
LOG_INFO
, "\n");

895 
	`lgw_log
(
LOG_BEACON
, "[%s-bóc⁄]--> bóc⁄ queuög faûed wôh %d\n", 
£rv
->
öfo
.
«me
, 
jô_ªsu…
);

897 
	`±hªad_muãx_lock
(&
£rv
->
ªp‹t
->
mx_ªp‹t
);

898 i‡(
jô_ªsu…
 !
JIT_ERROR_COLLISION_BEACON
) {

899 
£rv
->
ªp‹t
->
mós_nb_bóc⁄_ªje˘ed
 += 1;

901 
	`±hªad_muãx_u∆ock
(&
£rv
->
ªp‹t
->
mx_ªp‹t
);

905 
ªåy
++;

906 
	`lgw_log
(
LOG_BEACON
, "DEBUG~ [%s-bóc⁄]--> bóc⁄ queuögÑëry=%d\n", 
£rv
->
öfo
.
«me
, 
ªåy
);

909 
	`±hªad_muãx_u∆ock
(&
GW
.
gps
.
mx_timîef
);

915 i‡(
msg_Àn
 == -1) {

921 i‡((
msg_Àn
 < 4Ë|| (
buff_down
[0] !
PROTOCOL_VERSION
Ë|| ((buff_down[3] !
PKT_PULL_RESP
Ë&& (buff_down[3] !
PKT_PULL_ACK
))) {

922 
	`lgw_log
(
LOG_WARNING
, "WARNING~ [%s-down] ign‹ög invÆidÖackëÜí=%d,ÖrŸocﬁ_vîsi⁄=%d, id=%d\n", 
£rv
->
öfo
.
«me
, 
msg_Àn
, 
buff_down
[0], buff_down[3]);

927 i‡(
buff_down
[3] =
PKT_PULL_ACK
) {

928 i‡((
buff_down
[1] =
tokí_h
Ë&& (buff_down[2] =
tokí_l
)) {

929 i‡(
ªq_ack
) {

930 
	`lgw_log
(
LOG_INFO
, "INFO~ [%s-down] du∂iˇã ACKÑe˚ived :)\n", 
£rv
->
öfo
.
«me
);

932 
ªq_ack
 = 
åue
;

933 
autoquô_˙t
 = 0;

934 
	`±hªad_muãx_lock
(&
£rv
->
ªp‹t
->
mx_ªp‹t
);

935 
£rv
->
ªp‹t
->
°©_down
.
mós_dw_ack_rcv
 += 1;

936 
	`±hªad_muãx_u∆ock
(&
£rv
->
ªp‹t
->
mx_ªp‹t
);

937 
	`lgw_log
(
LOG_INFO
, "INFO~ [%s-down] PULL_ACKÑe˚ived i¿%òms\n", 
£rv
->
öfo
.
«me
, ()(1000 * 
	`dif·ime•ec
(
ªcv_time
, 
£nd_time
)));

940 
	`lgw_log
(
LOG_INFO
, "INFO~ [%s-down]Ñe˚ived out-of-syn¯ACK\n", 
£rv
->
öfo
.
«me
);

946 
buff_down
[
msg_Àn
] = 0;

948 
	`lgw_log
(
LOG_PKT
, "\nPKT~ %†JSON down: %s\n", 
£rv
->
öfo
.
«me
, (*)(
buff_down
 + 4));

951 
	`mem£t
(&
txpkt
, 0, Åxpkt);

952 
roŸ_vÆ
 = 
	`js⁄_∑r£_°rög_wôh_commíts
((c⁄° *)(
buff_down
 + 4));

953 i‡(
roŸ_vÆ
 =
NULL
) {

954 
	`lgw_log
(
LOG_WARNING
, "WARNING~ [%s-down] invÆid JSON, TXáb‹ãd\n", 
£rv
->
öfo
.
«me
);

959 
txpk_obj
 = 
	`js⁄_obje˘_gë_obje˘
(
	`js⁄_vÆue_gë_obje˘
(
roŸ_vÆ
), "txpk");

960 i‡(
txpk_obj
 =
NULL
) {

961 
	`lgw_log
(
LOG_WARNING
, "WARNING~ [%s-down]Çÿ\"txpk\" obje˘ i¿JSON, TXáb‹ãd\n", 
£rv
->
öfo
.
«me
);

962 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

967 
i
 = 
	`js⁄_obje˘_gë_boﬁón
(
txpk_obj
,"imme");

968 i‡(
i
 == 1) {

970 
£¡_immedüã
 = 
åue
;

971 
dow∆ök_ty≥
 = 
JIT_PKT_TYPE_DOWNLINK_CLASS_C
;

972 
	`lgw_log
(
LOG_INFO
, "INFO~ [%s-down]áÖackë wû»bê£¡ i¿\"immedüã\" mode\n", 
£rv
->
öfo
.
«me
);

974 
£¡_immedüã
 = 
Ál£
;

975 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
txpk_obj
,"tmst");

976 i‡(
vÆ
 !
NULL
) {

978 
txpkt
.
cou¡_us
 = (
uöt32_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

981 
dow∆ök_ty≥
 = 
JIT_PKT_TYPE_DOWNLINK_CLASS_A
;

984 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
txpk_obj
, "tmms");

985 i‡(
vÆ
 =
NULL
) {

986 
	`lgw_log
(
LOG_WARNING
, "WARNING~ [%s-down]Çÿm™d©‹y \"txpk.tm°\" o∏\"txpk.tmms\" obje˘†ö JSON, TXáb‹ãd\n", 
£rv
->
öfo
.
«me
);

987 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

990 i‡(
GW
.
gps
.
gps_íabÀd
 =
åue
) {

991 
	`±hªad_muãx_lock
(&
GW
.
gps
.
mx_timîef
);

992 i‡(
GW
.
gps
.
gps_ªf_vÆid
 =
åue
) {

993 
loˇl_ªf
 = 
GW
.
gps
.
time_ª„ªn˚_gps
;

994 
	`±hªad_muãx_u∆ock
(&
GW
.
gps
.
mx_timîef
);

996 
	`±hªad_muãx_u∆ock
(&
GW
.
gps
.
mx_timîef
);

997 
	`lgw_log
(
LOG_WARNING
, "WARNING~ [%s-down]ÇÿvÆid GPSÅimêª„ªn˚ yë, impossibÀÅÿ£ndÖackë o¿•ecifi¯GPSÅime, TXáb‹ãd\n", 
£rv
->
öfo
.
«me
);

998 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

1001 
	`£nd_tx_ack
(
£rv
, 
buff_down
[1], buff_down[2], 
JIT_ERROR_GPS_UNLOCKED
, 0);

1005 
	`lgw_log
(
LOG_WARNING
, "WARNING~ [%s-down] GPS dißbÀd, impossibÀÅÿ£ndÖackë o¿•ecifi¯GPSÅime, TXáb‹ãd\n", 
£rv
->
öfo
.
«me
);

1006 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

1009 
	`£nd_tx_ack
(
£rv
, 
buff_down
[1], buff_down[2], 
JIT_ERROR_GPS_UNLOCKED
, 0);

1014 
x2
 = (
uöt64_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

1017 
x3
 = 
	`modf
(()
x2
/1E3, &
x4
);

1018 
gps_tx
.
tv_£c
 = (
time_t
)
x4
;

1019 
gps_tx
.
tv_n£c
 = ()(
x3
 * 1E9);

1022 
i
 = 
	`lgw_gps2˙t
(
loˇl_ªf
, 
gps_tx
, &(
txpkt
.
cou¡_us
));

1023 i‡(
i
 !
LGW_GPS_SUCCESS
) {

1024 
	`lgw_log
(
LOG_WARNING
, "WARNING~ [%s-down] couldÇŸ c⁄vîàGPSÅimêtÿtime°amp, TXáb‹ãd\n", 
£rv
->
öfo
.
«me
);

1025 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

1028 
	`lgw_log
(
LOG_INFO
, "INFO~ [%s-down]áÖackë wû»bê£¡ o¿time°am∞vÆuê%u (ˇlcuœãd from GPSÅime)\n", 
£rv
->
öfo
.
«me
, 
txpkt
.
cou¡_us
);

1032 
dow∆ök_ty≥
 = 
JIT_PKT_TYPE_DOWNLINK_CLASS_B
;

1037 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
txpk_obj
,"ncrc");

1038 i‡(
vÆ
 !
NULL
) {

1039 
txpkt
.
no_¸c
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

1043 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
txpk_obj
,"freq");

1044 i‡(
vÆ
 =
NULL
) {

1045 
	`lgw_log
(
LOG_WARNING
, "WARNING~ [%s-down]Çÿm™d©‹y \"txpk.‰eq\" obje˘ i¿JSON, TXáb‹ãd\n", 
£rv
->
öfo
.
«me
);

1046 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

1049 
txpkt
.
‰eq_hz
 = (
uöt32_t
)(()(1.0e6Ë* 
	`js⁄_vÆue_gë_numbî
(
vÆ
));

1052 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
txpk_obj
,"rfch");

1053 i‡(
vÆ
 =
NULL
) {

1054 
	`lgw_log
(
LOG_WARNING
, "WARNING~ [%s-down]Çÿm™d©‹y \"txpk.rfch\" obje˘ i¿JSON, TXáb‹ãd\n", 
£rv
->
öfo
.
«me
);

1055 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

1058 
txpkt
.
rf_chaö
 = (
uöt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

1061 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
txpk_obj
,"powe");

1062 i‡(
vÆ
 !
NULL
) {

1063 
txpkt
.
rf_powî
 = (
öt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
Ë- 
GW
.
hÆ
.
™ã¬a_gaö
;

1067 
°r
 = 
	`js⁄_obje˘_gë_°rög
(
txpk_obj
, "modu");

1068 i‡(
°r
 =
NULL
) {

1069 
	`lgw_log
(
LOG_WARNING
, "WARNING~ [%s-down]Çÿm™d©‹y \"txpk.modu\" obje˘ i¿JSON, TXáb‹ãd\n", 
£rv
->
öfo
.
«me
);

1070 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

1073 i‡(
	`°rcmp
(
°r
, "LORA") == 0) {

1075 
txpkt
.
moduœti⁄
 = 
MOD_LORA
;

1078 
°r
 = 
	`js⁄_obje˘_gë_°rög
(
txpk_obj
, "datr");

1079 i‡(
°r
 =
NULL
) {

1080 
	`lgw_log
(
LOG_WARNING
, "WARNING~ [%s-down]Çÿm™d©‹y \"txpk.d©r\" obje˘ i¿JSON, TXáb‹ãd\n", 
£rv
->
öfo
.
«me
);

1081 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

1084 
i
 = 
	`ssˇnf
(
°r
, "SF%2hdBW%3hd", &
x0
, &
x1
);

1085 i‡(
i
 != 2) {

1086 
	`lgw_log
(
LOG_WARNING
, "WARNING~ [%s-down] f‹m©Éº‹ i¿\"txpk.d©r\", TXáb‹ãd\n", 
£rv
->
öfo
.
«me
);

1087 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

1090 
x0
) {

1091 5: 
txpkt
.
d©¨©e
 = 
DR_LORA_SF5
; ;

1092 6: 
txpkt
.
d©¨©e
 = 
DR_LORA_SF6
; ;

1093 7: 
txpkt
.
d©¨©e
 = 
DR_LORA_SF7
; ;

1094 8: 
txpkt
.
d©¨©e
 = 
DR_LORA_SF8
; ;

1095 9: 
txpkt
.
d©¨©e
 = 
DR_LORA_SF9
; ;

1096 10: 
txpkt
.
d©¨©e
 = 
DR_LORA_SF10
; ;

1097 11: 
txpkt
.
d©¨©e
 = 
DR_LORA_SF11
; ;

1098 12: 
txpkt
.
d©¨©e
 = 
DR_LORA_SF12
; ;

1100 
	`lgw_log
(
LOG_WARNING
, "WARNING~ [%s-down] f‹m©Éº‹ i¿\"txpk.d©r\", invÆid SF, TXáb‹ãd\n", 
£rv
->
öfo
.
«me
);

1101 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

1104 
x1
) {

1105 125: 
txpkt
.
b™dwidth
 = 
BW_125KHZ
; ;

1106 250: 
txpkt
.
b™dwidth
 = 
BW_250KHZ
; ;

1107 500: 
txpkt
.
b™dwidth
 = 
BW_500KHZ
; ;

1109 
	`lgw_log
(
LOG_WARNING
, "WARNING~ [%s-down] f‹m©Éº‹ i¿\"txpk.d©r\", invÆid BW, TXáb‹ãd\n", 
£rv
->
öfo
.
«me
);

1110 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

1115 
°r
 = 
	`js⁄_obje˘_gë_°rög
(
txpk_obj
, "codr");

1116 i‡(
°r
 =
NULL
) {

1117 
	`lgw_log
(
LOG_WARNING
, "WARNING~ [%s-down]Çÿm™d©‹y \"txpk.codr\" obje˘ i¿js⁄, TXáb‹ãd\n", 
£rv
->
öfo
.
«me
);

1118 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

1121 i‡(
	`°rcmp
(
°r
, "4/5"Ë=0Ë
txpkt
.
codî©e
 = 
CR_LORA_4_5
;

1122 i‡(
	`°rcmp
(
°r
, "4/6"Ë=0Ë
txpkt
.
codî©e
 = 
CR_LORA_4_6
;

1123 i‡(
	`°rcmp
(
°r
, "2/3"Ë=0Ë
txpkt
.
codî©e
 = 
CR_LORA_4_6
;

1124 i‡(
	`°rcmp
(
°r
, "4/7"Ë=0Ë
txpkt
.
codî©e
 = 
CR_LORA_4_7
;

1125 i‡(
	`°rcmp
(
°r
, "4/8"Ë=0Ë
txpkt
.
codî©e
 = 
CR_LORA_4_8
;

1126 i‡(
	`°rcmp
(
°r
, "1/2"Ë=0Ë
txpkt
.
codî©e
 = 
CR_LORA_4_8
;

1128 
	`lgw_log
(
LOG_WARNING
, "WARNING~ [%s-down] f‹m©Éº‹ i¿\"txpk.codr\", TXáb‹ãd\n", 
£rv
->
öfo
.
«me
);

1129 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

1134 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
txpk_obj
,"ipol");

1135 i‡(
vÆ
 !
NULL
) {

1136 
txpkt
.
övît_pﬁ
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

1140 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
txpk_obj
,"prea");

1141 i‡(
vÆ
 !
NULL
) {

1142 
i
 = ()
	`js⁄_vÆue_gë_numbî
(
vÆ
);

1143 i‡(
i
 >
MIN_LORA_PREAMB
) {

1144 
txpkt
.
¥ómbÀ
 = (
uöt16_t
)
i
;

1146 
txpkt
.
¥ómbÀ
 = (
uöt16_t
)
MIN_LORA_PREAMB
;

1149 
txpkt
.
¥ómbÀ
 = (
uöt16_t
)
STD_LORA_PREAMB
;

1152 } i‡(
	`°rcmp
(
°r
, "FSK") == 0) {

1154 
txpkt
.
moduœti⁄
 = 
MOD_FSK
;

1157 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
txpk_obj
,"datr");

1158 i‡(
vÆ
 =
NULL
) {

1159 
	`lgw_log
(
LOG_WARNING
, "WARNING~ [%s-down]Çÿm™d©‹y \"txpk.d©r\" obje˘ i¿JSON, TXáb‹ãd\n", 
£rv
->
öfo
.
«me
);

1160 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

1163 
txpkt
.
d©¨©e
 = (
uöt32_t
)(
	`js⁄_vÆue_gë_numbî
(
vÆ
));

1166 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
txpk_obj
,"fdev");

1167 i‡(
vÆ
 =
NULL
) {

1168 
	`lgw_log
(
LOG_WARNING
, "WARNING~ [%s-down]Çÿm™d©‹y \"txpk.fdev\" obje˘ i¿JSON, TXáb‹ãd\n", 
£rv
->
öfo
.
«me
);

1169 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

1172 
txpkt
.
f_dev
 = (
uöt8_t
)(
	`js⁄_vÆue_gë_numbî
(
vÆ
) / 1000.0);

1175 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
txpk_obj
,"prea");

1176 i‡(
vÆ
 !
NULL
) {

1177 
i
 = ()
	`js⁄_vÆue_gë_numbî
(
vÆ
);

1178 i‡(
i
 >
MIN_FSK_PREAMB
) {

1179 
txpkt
.
¥ómbÀ
 = (
uöt16_t
)
i
;

1181 
txpkt
.
¥ómbÀ
 = (
uöt16_t
)
MIN_FSK_PREAMB
;

1184 
txpkt
.
¥ómbÀ
 = (
uöt16_t
)
STD_FSK_PREAMB
;

1188 
	`lgw_log
(
LOG_WARNING
, "WARNING~ [%s-down] invÆid moduœti⁄ i¿\"txpk.modu\", TXáb‹ãd\n", 
£rv
->
öfo
.
«me
);

1189 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

1194 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
txpk_obj
,"size");

1195 i‡(
vÆ
 =
NULL
) {

1196 
	`lgw_log
(
LOG_WARNING
, "WARNING~ [%s-down]Çÿm™d©‹y \"txpk.size\" obje˘ i¿JSON, TXáb‹ãd\n", 
£rv
->
öfo
.
«me
);

1197 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

1200 
txpkt
.
size
 = (
uöt16_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

1203 
°r
 = 
	`js⁄_obje˘_gë_°rög
(
txpk_obj
, "data");

1204 i‡(
°r
 =
NULL
) {

1205 
	`lgw_log
(
LOG_WARNING
, "WARNING~ [%s-down]Çÿm™d©‹y \"txpk.d©a\" obje˘ i¿JSON, TXáb‹ãd\n", 
£rv
->
öfo
.
«me
);

1206 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

1209 
i
 = 
	`b64_to_bö
(
°r
, 
	`°æí
(°r), 
txpkt
.
∑ylﬂd
, Åxpkt.payload);

1210 i‡(
i
 !
txpkt
.
size
) {

1211 
	`lgw_log
(
LOG_WARNING
, "WARNING~ [%s-down] mism©ch bëwì¿.sizê™d .d©®sizê⁄˚ c⁄vîã∏tÿbö¨y\n", 
£rv
->
öfo
.
«me
);

1215 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

1218 i‡(
£¡_immedüã
) {

1219 
txpkt
.
tx_mode
 = 
IMMEDIATE
;

1221 
txpkt
.
tx_mode
 = 
TIMESTAMPED
;

1225 
	`±hªad_muãx_lock
(&
£rv
->
ªp‹t
->
mx_ªp‹t
);

1226 
£rv
->
ªp‹t
->
°©_down
.
mós_dw_dgøm_rcv
 += 1;

1227 
£rv
->
ªp‹t
->
°©_down
.
mós_dw_√tw‹k_byã
 +
msg_Àn
;

1228 
£rv
->
ªp‹t
->
°©_down
.
mós_dw_∑ylﬂd_byã
 +
txpkt
.
size
;

1229 
	`±hªad_muãx_u∆ock
(&
£rv
->
ªp‹t
->
mx_ªp‹t
);

1232 
jô_ªsu…
 = 
w¨nög_ªsu…
 = 
JIT_ERROR_OK
;

1233 
w¨nög_vÆue
 = 0;

1236 i‡((
txpkt
.
‰eq_hz
 < 
GW
.
tx
.
tx_‰eq_mö
[txpkt.
rf_chaö
]Ë|| (txpkt.‰eq_hz > GW.tx.
tx_‰eq_max
[txpkt.rf_chain])) {

1237 
jô_ªsu…
 = 
JIT_ERROR_TX_FREQ
;

1238 
	`lgw_log
(
LOG_ERROR
, "ERROR~ [%s-down] Packë REJECTED, unsuµ‹ãd fªquícy - %u (mö:%u,max:%u)\n", 
£rv
->
öfo
.
«me
, 
txpkt
.
‰eq_hz
, 
GW
.
tx
.
tx_‰eq_mö
[txpkt.
rf_chaö
], GW.tx.
tx_‰eq_max
[txpkt.rf_chain]);

1242 i‡(
jô_ªsu…
 =
JIT_ERROR_OK
) {

1243 
i
 = 
	`gë_tx_gaö_lut_ödex
(
txpkt
.
rf_chaö
,Åxpkt.
rf_powî
, &
tx_lut_idx
);

1244 i‡((
i
 < 0Ë|| (
GW
.
tx
.
txlut
[
txpkt
.
rf_chaö
].
lut
[
tx_lut_idx
].
rf_powî
 !=Åxpkt.rf_power)) {

1246 
w¨nög_ªsu…
 = 
JIT_ERROR_TX_POWER
;

1247 
w¨nög_vÆue
 = (
öt32_t
)
GW
.
tx
.
txlut
[
txpkt
.
rf_chaö
].
lut
[
tx_lut_idx
].
rf_powî
;

1248 
	`¥ötf
("WARNING~ Reque°ed TXÖowî i†nŸ suµ‹ãd (%ddBm),á˘uÆÖowî u£d: %ddBm\n", 
txpkt
.
rf_powî
, 
w¨nög_vÆue
);

1249 
txpkt
.
rf_powî
 = 
GW
.
tx
.
txlut
[txpkt.
rf_chaö
].
lut
[
tx_lut_idx
].rf_power;

1254 i‡(
jô_ªsu…
 =
JIT_ERROR_OK
) {

1255 
	`±hªad_muãx_lock
(&
GW
.
hÆ
.
mx_c⁄˚¡
);

1256 
HAL
.
	`lgw_gë_ö°˙t
(&
cuºít_c⁄˚¡øt‹_time
);

1257 
	`±hªad_muãx_u∆ock
(&
GW
.
hÆ
.
mx_c⁄˚¡
);

1258 
jô_ªsu…
 = 
	`jô_íqueue
(&
GW
.
tx
.
jô_queue
[
txpkt
.
rf_chaö
], 
cuºít_c⁄˚¡øt‹_time
, &txpkt, 
dow∆ök_ty≥
);

1259 i‡(
jô_ªsu…
 !
JIT_ERROR_OK
) {

1260 
	`¥ötf
("ERROR~ Packë REJECTED (jôÉº‹=%d)\n", 
jô_ªsu…
);

1263 
jô_ªsu…
 = 
w¨nög_ªsu…
;

1265 
	`±hªad_muãx_lock
(&
£rv
->
ªp‹t
->
mx_ªp‹t
);

1266 
£rv
->
ªp‹t
->
°©_down
.
mós_nb_tx_ªque°ed
 += 1;

1267 
	`±hªad_muãx_u∆ock
(&
£rv
->
ªp‹t
->
mx_ªp‹t
);

1271 
	`£nd_tx_ack
(
£rv
, 
buff_down
[1], buff_down[2], 
jô_ªsu…
, 
w¨nög_vÆue
);

1274 
	`lgw_log
(
LOG_INFO
, "\nINFO~ [%s-down] End o‡down°ªamÅhªad\n", 
£rv
->
öfo
.
«me
);

1275 
	}
}

	@fwd/src/service.c

28 
	~<°rög.h
>

29 
	~<°dio.h
>

31 
	~<sys/sockë.h
>

32 
	~<√töë/ö.h
>

33 
	~<¨∑/öë.h
>

34 
	~<√tdb.h
>

36 
	~<î∫o.h
>

38 
	~"fwd.h
"

39 
	~"db.h
"

40 
	~"£rvi˚.h
"

41 
	~"£mãch_£rvi˚.h
"

42 
	~"pkt_£rvi˚.h
"

43 
	~"mqâ_£rvi˚.h
"

45 
	gDECLARE_GW
;

47 
	$öô_sock
(c⁄° *
addr
, c⁄° *
p‹t
, c⁄° *
timeout
, 
size
) {

48 
i
;

49 
sockfd
;

51 
addröfo
 
höts
;

52 
addröfo
 *
ªsu…
;

53 
addröfo
 *
q
;

55 
ho°_«me
[64];

56 
p‹t_«me
[64];

59 
	`mem£t
(&
höts
, 0,  hints);

60 
höts
.
ai_Ámûy
 = 
AF_INET
;

61 
höts
.
ai_sockty≥
 = 
SOCK_DGRAM
;

64 
i
 = 
	`gëaddröfo
(
addr
, 
p‹t
, &
höts
, &
ªsu…
);

65 i‡(
i
 != 0) {

66 
	`lgw_log
(
LOG_INFO
, "ERROR~ [öô_sock] gëaddröfÿ⁄áddªs†%†(PORT %sËªtu∫ed %s\n", 
addr
, 
p‹t
, 
	`gai_°ªº‹
(
i
));

71 
q
 = 
ªsu…
; q !
NULL
; q = q->
ai_√xt
) {

72 
sockfd
 = 
	`sockë
(
q
->
ai_Ámûy
, q->
ai_sockty≥
, q->
ai_¥Ÿocﬁ
);

73 i‡(
sockfd
 == -1)

79 i‡(
q
 =
NULL
) {

80 
	`lgw_log
(
LOG_INFO
, "ERROR~ [öô_sock] faûedÅÿ›í sockëÅÿ™y o‡£rvî %†addªs£†’‹à%s)\n", 
addr
, 
p‹t
);

81 
i
 = 1;

82 
q
 = 
ªsu…
; q !
NULL
; q = q->
ai_√xt
) {

83 
	`gë«meöfo
(
q
->
ai_addr
, q->
ai_addæí
, 
ho°_«me
,  host_name,

84 
p‹t_«me
, Ö‹t_«me, 
NI_NUMERICHOST
);

85 ++
i
;

92 
i
 = 
	`c⁄√˘
(
sockfd
, 
q
->
ai_addr
, q->
ai_addæí
);

93 i‡(
i
 != 0) {

94 
	`lgw_log
(
LOG_INFO
, "ERROR~ [öô_socke] c⁄√˘Ñëu∫ed %s\n", 
	`°ªº‹
(
î∫o
));

98 
	`‰ìaddröfo
(
ªsu…
);

100 i‡((
	`£tsock›t
(
sockfd
, 
SOL_SOCKET
, 
SO_RCVTIMEO
, 
timeout
, 
size
)) != 0) {

101 
	`lgw_log
(
LOG_INFO
, "ERROR~ [öô_sock] sësock›àªtu∫ed %s\n", 
	`°ªº‹
(
î∫o
));

105  
sockfd
;

106 
	}
}

108 
boﬁ
 
	$pkt_basic_fûãr
(
£rv_s
* 
£rv
, c⁄° 
uöt32_t
 
addr
, c⁄° 
uöt8_t
 
Â‹t
) {

109 
addr_key
[48] = {0};

110 
Â‹t_key
[32] = {0};

112 
	`¢¥ötf
(
addr_key
, ◊ddr_key), "/%s/devaddr/%08X", 
£rv
->
öfo
.
«me
, 
addr
);

113 
	`¢¥ötf
(
Â‹t_key
, (Â‹t_key), "/%s/Â‹t/%u", 
£rv
->
öfo
.
«me
, 
Â‹t
);

115 
£rv
->
fûãr
.
Â‹t
) {

116 
INCLUDE
:

117 i‡(!
	`lgw_db_key_exi°
(
Â‹t_key
))

120  
åue
;

121 
EXCLUDE
:

122 i‡(
	`lgw_db_key_exi°
(
Â‹t_key
))

123  
åue
;

126 
NOTHING
:

131 
£rv
->
fûãr
.
devaddr
) {

132 
INCLUDE
:

133  
	`lgw_db_key_exi°
(
addr_key
);

134 
EXCLUDE
:

135  
	`lgw_db_key_exi°
(
addr_key
);

136 
NOTHING
:

141  
Ál£
;

142 
	}
}

160 
	$£rvi˚_°¨t
() {

161 
£rv_s
* 
£rv_íåy
;

162 
	`LGW_LIST_TRAVERSE
(&
GW
.
£rv_li°
, 
£rv_íåy
, 
li°
) {

163 
£rv_íåy
->
öfo
.
ty≥
) {

164 
£mãch
:

165 
	`£mãch_°¨t
(
£rv_íåy
);

167 
pkt
:

168 
	`pkt_°¨t
(
£rv_íåy
);

170 
mqâ
:

171 
	`mqâ_°¨t
(
£rv_íåy
);

174 
	`£mãch_°¨t
(
£rv_íåy
);

178 
	}
}

180 
	$£rvi˚_°›
() {

181 
£rv_s
* 
£rv_íåy
;

182 
	`LGW_LIST_TRAVERSE
(&
GW
.
£rv_li°
, 
£rv_íåy
, 
li°
) {

183 
£rv_íåy
->
öfo
.
ty≥
) {

184 
£mãch
:

185 
	`£mãch_°›
(
£rv_íåy
);

187 
pkt
:

188 
	`pkt_°›
(
£rv_íåy
);

190 
mqâ
:

191 
	`mqâ_°›
(
£rv_íåy
);

194 
	`£mãch_°›
(
£rv_íåy
);

198 
	}
}

200 
uöt16_t
 
	$¸c16
(c⁄° 
uöt8_t
 * 
d©a
, 
size
) {

201 c⁄° 
uöt16_t
 
¸c_pﬁy
 = 0x1021;

202 c⁄° 
uöt16_t
 
öô_vÆ
 = 0x0000;

203 
uöt16_t
 
x
 = 
öô_vÆ
;

204 
i
, 
j
;

206 i‡(
d©a
 =
NULL
) {

210 
i
=0; i<
size
; ++i) {

211 
x
 ^(
uöt16_t
)
d©a
[
i
] << 8;

212 
j
=0; j<8; ++j) {

213 
x
 = (x & 0x8000Ë? (x<<1Ë^ 
¸c_pﬁy
 : (x<<1);

217  
x
;

218 
	}
}

	@fwd/src/stats.c

27 
	~<°döt.h
>

28 
	~<°dboﬁ.h
>

29 
	~<°dio.h
>

31 
	~<°rög.h
>

32 
	~<time.h
>

33 
	~<sys/time.h
>

34 
	~<uni°d.h
>

35 
	~<°dlib.h
>

36 
	~<î∫o.h
>

37 
	~<m©h.h
>

38 
	~<as£π.h
>

40 
	~<±hªad.h
>

42 
	~"fwd.h
"

43 
	~"°©s.h
"

44 
	~"jôqueue.h
"

45 
	~"∑rs⁄.h
"

46 
	~"l‹agw_hÆ.h
"

47 
	~"l‹agw_gps.h
"

49 
	gDECLARE_GW
;

51 
	$£mãch_ªp‹t
(
£rv_s
 *
£rv
) {

52 
time_t
 
cuºít_time
;

54 
uöt32_t
 
˝_nb_rx_rcv
 = 0;

55 
uöt32_t
 
˝_nb_rx_ok
 = 0;

56 
uöt32_t
 
˝_nb_rx_bad
 = 0;

57 
uöt32_t
 
˝_nb_rx_dr›
 = 0;

58 
uöt32_t
 
˝_nb_rx_no¸c
 = 0;

59 
uöt32_t
 
˝_up_pkt_fwd
 = 0;

60 
uöt32_t
 
˝_up_√tw‹k_byã
 = 0;

61 
uöt32_t
 
˝_up_∑ylﬂd_byã
 = 0;

62 
uöt32_t
 
˝_up_dgøm_£¡
 = 0;

63 
uöt32_t
 
˝_up_ack_rcv
 = 0;

64 
uöt32_t
 
˝_dw_puŒ_£¡
 = 0;

65 
uöt32_t
 
˝_dw_ack_rcv
 = 0;

66 
uöt32_t
 
˝_dw_dgøm_rcv
 = 0;

67 
uöt32_t
 
˝_dw_dgøm_a˝
 = 0;

68 
uöt32_t
 
˝_dw_√tw‹k_byã
 = 0;

69 
uöt32_t
 
˝_dw_∑ylﬂd_byã
 = 0;

70 
uöt32_t
 
˝_nb_tx_ok
 = 0;

71 
uöt32_t
 
˝_nb_tx_Áû
 = 0;

72 
uöt32_t
 
˝_nb_tx_ªque°ed
 = 0;

73 
uöt32_t
 
˝_nb_tx_ªje˘ed_cﬁlisi⁄_∑ckë
 = 0;

74 
uöt32_t
 
˝_nb_tx_ªje˘ed_cﬁlisi⁄_bóc⁄
 = 0;

75 
uöt32_t
 
˝_nb_tx_ªje˘ed_too_œã
 = 0;

76 
uöt32_t
 
˝_nb_tx_ªje˘ed_too_óæy
 = 0;

77 
uöt32_t
 
˝_nb_bóc⁄_queued
 = 0;

78 
uöt32_t
 
˝_nb_bóc⁄_£¡
 = 0;

79 
uöt32_t
 
˝_nb_bóc⁄_ªje˘ed
 = 0;

82 
boﬁ
 
co‹d_ok
 = 
Ál£
;

83 
co‹d_s
 
˝_gps_co‹d
 = { 0.0, 0.0, 0 };

84 
gps_°©e
[16] = "unknown";

89 
°©_time°amp
[24];

90 
iso_time°amp
[24];

91 
rx_ok_øtio
;

92 
rx_bad_øtio
;

93 
rx_no¸c_øtio
;

94 
up_ack_øtio
;

95 
dw_ack_øtio
;

98 
	`±hªad_muãx_lock
(&(
£rv
->
ªp‹t
->
mx_ªp‹t
));

99 
˝_nb_rx_rcv
 = 
£rv
->
ªp‹t
->
°©_up
.
mós_nb_rx_rcv
;

100 
˝_nb_rx_ok
 = 
£rv
->
ªp‹t
->
°©_up
.
mós_nb_rx_ok
;

101 
˝_nb_rx_bad
 = 
£rv
->
ªp‹t
->
°©_up
.
mós_nb_rx_bad
;

102 
˝_nb_rx_no¸c
 = 
£rv
->
ªp‹t
->
°©_up
.
mós_nb_rx_no¸c
;

103 
˝_up_pkt_fwd
 = 
£rv
->
ªp‹t
->
°©_up
.
mós_up_pkt_fwd
;

104 
˝_up_√tw‹k_byã
 = 
£rv
->
ªp‹t
->
°©_up
.
mós_up_√tw‹k_byã
;

105 
˝_up_∑ylﬂd_byã
 = 
£rv
->
ªp‹t
->
°©_up
.
mós_up_∑ylﬂd_byã
;

107 
˝_nb_rx_dr›
 = 
˝_nb_rx_rcv
 - 
˝_nb_rx_ok
 - 
˝_nb_rx_bad
 - 
˝_nb_rx_no¸c
;

109 
˝_up_dgøm_£¡
 = 
£rv
->
ªp‹t
->
°©_up
.
mós_up_dgøm_£¡
;

110 
˝_up_ack_rcv
 = 
£rv
->
ªp‹t
->
°©_up
.
mós_up_ack_rcv
;

112 
£rv
->
ªp‹t
->
°©_up
.
mós_nb_rx_rcv
 = 0;

113 
£rv
->
ªp‹t
->
°©_up
.
mós_nb_rx_ok
 = 0;

114 
£rv
->
ªp‹t
->
°©_up
.
mós_nb_rx_bad
 = 0;

115 
£rv
->
ªp‹t
->
°©_up
.
mós_nb_rx_no¸c
 = 0;

116 
£rv
->
ªp‹t
->
°©_up
.
mós_up_pkt_fwd
 = 0;

117 
£rv
->
ªp‹t
->
°©_up
.
mós_up_√tw‹k_byã
 = 0;

118 
£rv
->
ªp‹t
->
°©_up
.
mós_up_∑ylﬂd_byã
 = 0;

121 
cuºít_time
 = 
	`time
(
NULL
);

122 
£rv
->
°©e
.
°Æl_time
 = ()(
cuºít_time
 - sîv->°©e.
c⁄è˘
);

123 
	`±hªad_muãx_u∆ock
(&
£rv
->
ªp‹t
->
mx_ªp‹t
);

126 
	`°r·ime
(
°©_time°amp
,  sèt_time°amp, "%F %T %Z", 
	`gmtime
(&
cuºít_time
));

127 
	`°r·ime
(
iso_time°amp
,  
°©_time°amp
, "%FT%TZ", 
	`gmtime
(&
cuºít_time
));

129 i‡(
˝_nb_rx_rcv
 > 0) {

130 
rx_ok_øtio
 = ()
˝_nb_rx_ok
 / ()
˝_nb_rx_rcv
;

131 
rx_bad_øtio
 = ()
˝_nb_rx_bad
 / ()
˝_nb_rx_rcv
;

132 
rx_no¸c_øtio
 = ()
˝_nb_rx_no¸c
 / ()
˝_nb_rx_rcv
;

134 
rx_ok_øtio
 = 0.0;

135 
rx_bad_øtio
 = 0.0;

136 
rx_no¸c_øtio
 = 0.0;

139 i‡(
˝_up_dgøm_£¡
 > 0) {

140 
up_ack_øtio
 = ()
˝_up_ack_rcv
 / ()
˝_up_dgøm_£¡
;

142 
up_ack_øtio
 = 0.0;

146 
	`±hªad_muãx_lock
(&
£rv
->
ªp‹t
->
mx_ªp‹t
);

148 
˝_dw_puŒ_£¡
 = 
£rv
->
ªp‹t
->
°©_down
.
mós_dw_puŒ_£¡
;

149 
˝_dw_ack_rcv
 = 
£rv
->
ªp‹t
->
°©_down
.
mós_dw_ack_rcv
;

150 
˝_dw_dgøm_rcv
 = 
£rv
->
ªp‹t
->
°©_down
.
mós_dw_dgøm_rcv
;

151 
˝_dw_dgøm_a˝
 = 
£rv
->
ªp‹t
->
°©_down
.
mós_dw_dgøm_a˝
;

153 
˝_dw_√tw‹k_byã
 = 
£rv
->
ªp‹t
->
°©_down
.
mós_dw_√tw‹k_byã
;

154 
˝_dw_∑ylﬂd_byã
 = 
£rv
->
ªp‹t
->
°©_down
.
mós_dw_∑ylﬂd_byã
;

155 
˝_nb_tx_ok
 = 
£rv
->
ªp‹t
->
°©_down
.
mós_nb_tx_ok
;

156 
˝_nb_tx_Áû
 = 
£rv
->
ªp‹t
->
°©_down
.
mós_nb_tx_Áû
;

159 
˝_nb_tx_ªque°ed
 +
£rv
->
ªp‹t
->
°©_down
.
mós_nb_tx_ªque°ed
;

160 
˝_nb_tx_ªje˘ed_cﬁlisi⁄_∑ckë
 +
£rv
->
ªp‹t
->
°©_down
.
mós_nb_tx_ªje˘ed_cﬁlisi⁄_∑ckë
;

161 
˝_nb_tx_ªje˘ed_cﬁlisi⁄_bóc⁄
 +
£rv
->
ªp‹t
->
°©_down
.
mós_nb_tx_ªje˘ed_cﬁlisi⁄_bóc⁄
;

162 
˝_nb_tx_ªje˘ed_too_œã
 +
£rv
->
ªp‹t
->
°©_down
.
mós_nb_tx_ªje˘ed_too_œã
;

163 
˝_nb_tx_ªje˘ed_too_óæy
 +
£rv
->
ªp‹t
->
°©_down
.
mós_nb_tx_ªje˘ed_too_óæy
;

164 
˝_nb_bóc⁄_queued
 +
£rv
->
ªp‹t
->
mós_nb_bóc⁄_queued
;

165 
˝_nb_bóc⁄_£¡
 +
£rv
->
ªp‹t
->
mós_nb_bóc⁄_£¡
;

166 
˝_nb_bóc⁄_ªje˘ed
 +
£rv
->
ªp‹t
->
mós_nb_bóc⁄_ªje˘ed
;

168 
£rv
->
ªp‹t
->
°©_down
.
mós_dw_√tw‹k_byã
 = 0;

169 
£rv
->
ªp‹t
->
°©_down
.
mós_dw_∑ylﬂd_byã
 = 0;

170 
£rv
->
ªp‹t
->
°©_down
.
mós_nb_tx_ok
 = 0;

171 
£rv
->
ªp‹t
->
°©_down
.
mós_nb_tx_Áû
 = 0;

172 
£rv
->
ªp‹t
->
°©_down
.
mós_nb_tx_ªque°ed
 = 0;

173 
£rv
->
ªp‹t
->
°©_down
.
mós_nb_tx_ªje˘ed_cﬁlisi⁄_∑ckë
 = 0;

174 
£rv
->
ªp‹t
->
°©_down
.
mós_nb_tx_ªje˘ed_cﬁlisi⁄_bóc⁄
 = 0;

175 
£rv
->
ªp‹t
->
°©_down
.
mós_nb_tx_ªje˘ed_too_œã
 = 0;

176 
£rv
->
ªp‹t
->
°©_down
.
mós_nb_tx_ªje˘ed_too_óæy
 = 0;

177 
£rv
->
ªp‹t
->
mós_nb_bóc⁄_queued
 = 0;

178 
£rv
->
ªp‹t
->
mós_nb_bóc⁄_£¡
 = 0;

179 
£rv
->
ªp‹t
->
mós_nb_bóc⁄_ªje˘ed
 = 0;

180 
	`±hªad_muãx_u∆ock
(&
£rv
->
ªp‹t
->
mx_ªp‹t
);

182 i‡(
˝_dw_puŒ_£¡
 > 0) {

183 
dw_ack_øtio
 = ()
˝_dw_ack_rcv
 / ()
˝_dw_puŒ_£¡
;

185 
dw_ack_øtio
 = 0.0;

189 i‡(
GW
.
gps
.
gps_íabÀd
) {

190 
	`±hªad_muãx_lock
(&
GW
.
gps
.
mx_mós_gps
);

191 
co‹d_ok
 = 
GW
.
gps
.
gps_co‹d_vÆid
;

192 
˝_gps_co‹d
 = 
GW
.
gps
.
mós_gps_co‹d
;

193 
	`±hªad_muãx_u∆ock
(&
GW
.
gps
.
mx_mós_gps
);

197 i‡(
GW
.
gps
.
gps_Áke_íabÀ
 =
åue
) {

198 
˝_gps_co‹d
 = 
GW
.
gps
.
ª„ªn˚_co‹d
;

203 i‡(
GW
.
gps
.
gps_íabÀd
 =
Ál£
)

204 
	`¢¥ötf
(
gps_°©e
,  gps_state, "disabled");

205 i‡(
GW
.
gps
.
gps_Áke_íabÀ
 =
åue
)

206 
	`¢¥ötf
(
gps_°©e
,  gps_state, "fake");

207 i‡(
GW
.
gps
.
gps_ªf_vÆid
 =
Ál£
)

208 
	`¢¥ötf
(
gps_°©e
,  gps_state, "searching");

209 i‡(
GW
.
gps
.
gps_íabÀd
 =
åue
)

210 
	`¢¥ötf
(
gps_°©e
,  gps_state, "enabled");

212 
	`¢¥ötf
(
gps_°©e
,  gps_state, "locked");

216 
	`lgw_log
(
LOG_INFO
, "\n#######################################################\n");

217 
	`lgw_log
(
LOG_INFO
, "##### [%s] %†#####\n", 
°©_time°amp
, 
£rv
->
öfo
.
«me
);

218 
	`lgw_log
(
LOG_INFO
, "### [UPSTREAM] ###\n");

219 
	`lgw_log
(
LOG_INFO
, "# RFÖackë†ª˚ived by c⁄˚¡øt‹: %u\n", 
˝_nb_rx_rcv
);

220 
	`lgw_log
(
LOG_INFO
, "# CRC_OK: %.2f%%, CRC_FAIL: %.2f%%, NO_CRC: %.2f%%\n",

221 100.0 * 
rx_ok_øtio
, 100.0 * 
rx_bad_øtio
,

222 100.0 * 
rx_no¸c_øtio
);

223 
	`lgw_log
(
LOG_INFO
, "# RFÖackë†f‹w¨ded: %u (%u byãs)\n", 
˝_up_pkt_fwd
, 
˝_up_∑ylﬂd_byã
);

224 
	`lgw_log
(
LOG_INFO
, "# PUSH_DATA d©agøm†£¡: %u (%u byãs)\n", 
˝_up_dgøm_£¡
, 
˝_up_√tw‹k_byã
);

225 
	`lgw_log
(
LOG_INFO
, "# PUSH_DATAácknowÀdged: %.2f%%\n", 100.0 * 
up_ack_øtio
);

227 
	`lgw_log
(
LOG_INFO
, "### [DOWNSTREAM] ###\n");

228 
	`lgw_log
(
LOG_INFO
, "# PULL_DATA sít: %u (%.2f%%ácknowÀdged)\n", 
˝_dw_puŒ_£¡
, 100.0 * 
dw_ack_øtio
);

229 
	`lgw_log
(
LOG_INFO
, "# PULL_RESP(⁄£Ëd©agøm†ª˚ived: %u (%u byãs)\n", 
˝_dw_dgøm_rcv
, 
˝_dw_√tw‹k_byã
);

230 
	`lgw_log
(
LOG_INFO
, "# RFÖackë†£¡Åÿc⁄˚¡øt‹: %u (%u byãs)\n", (
˝_nb_tx_ok
 + 
˝_nb_tx_Áû
), 
˝_dw_∑ylﬂd_byã
);

231 
	`lgw_log
(
LOG_INFO
, "# TXÉº‹s: %u\n", 
˝_nb_tx_Áû
);

233 i‡(
˝_nb_tx_ªque°ed
 != 0) {

234 
	`lgw_log
(
LOG_INFO
, "# TXÑejected (collisionÖacket): %.2f%% (req:%u,Ñej:%u)\n",

235 100.0 * 
˝_nb_tx_ªje˘ed_cﬁlisi⁄_∑ckë
 / 
˝_nb_tx_ªque°ed
,

236 
˝_nb_tx_ªque°ed
,

237 
˝_nb_tx_ªje˘ed_cﬁlisi⁄_∑ckë
);

238 
	`lgw_log
(
LOG_INFO
, "# TXÑejected (collision beacon): %.2f%% (req:%u,Ñej:%u)\n",

239 100.0 * 
˝_nb_tx_ªje˘ed_cﬁlisi⁄_bóc⁄
 / 
˝_nb_tx_ªque°ed
,

240 
˝_nb_tx_ªque°ed
,

241 
˝_nb_tx_ªje˘ed_cﬁlisi⁄_bóc⁄
);

242 
	`lgw_log
(
LOG_INFO
, "# TXÑejected (tooÜate): %.2f%% (req:%u,Ñej:%u)\n",

243 100.0 * 
˝_nb_tx_ªje˘ed_too_œã
 / 
˝_nb_tx_ªque°ed
,

244 
˝_nb_tx_ªque°ed
,

245 
˝_nb_tx_ªje˘ed_too_œã
);

246 
	`lgw_log
(
LOG_INFO
, "# TXÑejected (tooÉarly): %.2f%% (req:%u,Ñej:%u)\n",

247 100.0 * 
˝_nb_tx_ªje˘ed_too_óæy
 / 
˝_nb_tx_ªque°ed
,

248 
˝_nb_tx_ªque°ed
,

249 
˝_nb_tx_ªje˘ed_too_óæy
);

252 
	`lgw_log
(
LOG_INFO
, "### [BEACON] ###\n");

253 
	`lgw_log
(
LOG_INFO
, "# Packë†queued: %u\n", 
˝_nb_bóc⁄_queued
);

254 
	`lgw_log
(
LOG_INFO
, "# Packë†£¡ sÿÁr: %u\n", 
˝_nb_bóc⁄_£¡
);

255 
	`lgw_log
(
LOG_INFO
, "# Packë†ªje˘ed: %u\n", 
˝_nb_bóc⁄_ªje˘ed
);

257 
	`lgw_log
(
LOG_INFO
, "### [JIT] ###\n");

258 
	`jô_¥öt_queue
 (&
GW
.
tx
.
jô_queue
[0], 
Ál£
, 
LOG_JIT
);

259 
	`lgw_log
(
LOG_INFO
, "#--------\n");

260 
	`jô_¥öt_queue
 (&
GW
.
tx
.
jô_queue
[1], 
Ál£
, 
LOG_JIT
);

262 
	`lgw_log
(
LOG_INFO
, "### [GPS] ###\n");

264 i‡(
GW
.
gps
.
gps_íabÀd
 =
åue
) {

265 
	`lgw_log
(
LOG_INFO
, "### [GPS] ###\n");

267 i‡(
GW
.
gps
.
gps_ªf_vÆid
 =
åue
) {

268 
	`lgw_log
(
LOG_INFO
, "# VÆid gp†timêª„ªn˚ (age: %lò£c)\n", ()
	`dif·ime
(
	`time
(
NULL
), 
GW
.
gps
.
time_ª„ªn˚_gps
.
sy°ime
));

270 
	`lgw_log
(
LOG_INFO
, "# InvÆid gp†timêª„ªn˚ (age: %lò£c)\n", ()
	`dif·ime
(
	`time
(
NULL
), 
GW
.
gps
.
time_ª„ªn˚_gps
.
sy°ime
));

273 i‡(
co‹d_ok
) {

274 
	`lgw_log
(
LOG_INFO
, "# System GPS coordinates:Üatitude %.5f,Üongitude %.5f,áltitude %i m\n",

275 
˝_gps_co‹d
.
œt
, cp_gps_co‹d.
l⁄
, cp_gps_co‹d.
Æt
);

277 
	`lgw_log
(
LOG_INFO
, "#Ço valid GPS coordinatesávailable yet\n");

279 } i‡(
GW
.
gps
.
gps_Áke_íabÀ
 =
åue
) {

280 
	`lgw_log
(
LOG_INFO
, "# GPS *FAKE* co‹dö©es:Ü©ôudê%.5f,Ü⁄gôudê%.5f,á…ôudê%òm\n", 
˝_gps_co‹d
.
œt
, cp_gps_co‹d.
l⁄
, cp_gps_co‹d.
Æt
);

282 
	`lgw_log
(
LOG_INFO
, "### GPS IS DISABLED! \n");

288 
boﬁ
 
£mãch_f‹m©
 = 
	`°rcmp
(
£rv
->
ªp‹t
->
°©_f‹m©
, "semtech") == 0;

289 
boﬁ
 
Ÿhî_f‹m©
 = 
	`°rcmp
(
£rv
->
ªp‹t
->
°©_f‹m©
, "other") == 0;

291 
JSON_VÆue
 *
roŸ_vÆue_vîbo£
 = 
NULL
;

292 
JSON_Obje˘
 *
roŸ_obje˘_vîbo£
 = 
NULL
;

296 i‡(
Ÿhî_f‹m©
) {

297 
roŸ_vÆue_vîbo£
 = 
	`js⁄_vÆue_öô_obje˘
();

298 
roŸ_obje˘_vîbo£
 = 
	`js⁄_vÆue_gë_obje˘
(
roŸ_vÆue_vîbo£
);

299 
JSON_VÆue
 *
£rvîs_¨øy_vÆue
 = 
	`js⁄_vÆue_öô_¨øy
();

300 
JSON_Aºay
 *
£rvîs_¨øy_obje˘
 = 
	`js⁄_vÆue_gë_¨øy
(
£rvîs_¨øy_vÆue
);

302 i‡(
£rv
->
öfo
.
ty≥
 =
£mãch
) {

303 
JSON_VÆue
 *
sub_vÆue
 = 
	`js⁄_vÆue_öô_obje˘
();

304 
JSON_Obje˘
 *
sub_obje˘
 = 
	`js⁄_vÆue_gë_obje˘
(
sub_vÆue
);

305 
	`js⁄_obje˘_£t_°rög
(
sub_obje˘
, "«me", 
£rv
->
öfo
.
«me
);

306 
	`js⁄_obje˘_£t_boﬁón
(
sub_obje˘
, "found", 
£rv
->
°©e
.
live
 =
åue
);

307 i‡(
£rv
->
°©e
.
live
 =
åue
)

308 
	`js⁄_obje˘_£t_numbî
(
sub_obje˘
, "œ°_£í", 
£rv
->
°©e
.
°Æl_time
);

310 
	`js⁄_obje˘_£t_°rög
(
sub_obje˘
, "last_seen", "never");

311 
	`js⁄_¨øy_≠≥nd_vÆue
(
£rvîs_¨øy_obje˘
, 
sub_vÆue
);

313 
	`js⁄_obje˘_£t_vÆue
(
roŸ_obje˘_vîbo£
, "£rvîs", 
£rvîs_¨øy_vÆue
);

314 
	`js⁄_obje˘_£t_°rög
(
roŸ_obje˘_vîbo£
, "time", 
iso_time°amp
);

315 
	`js⁄_obje˘_dŸ£t_°rög
(
roŸ_obje˘_vîbo£
, "devi˚.id", 
GW
.
öfo
.
g©eway_id
);

316 
	`js⁄_obje˘_dŸ£t_numbî
(
roŸ_obje˘_vîbo£
, "devi˚.œtôude", 
˝_gps_co‹d
.
œt
);

317 
	`js⁄_obje˘_dŸ£t_numbî
(
roŸ_obje˘_vîbo£
, "devi˚.l⁄gôude", 
˝_gps_co‹d
.
l⁄
);

318 
	`js⁄_obje˘_dŸ£t_numbî
(
roŸ_obje˘_vîbo£
, "devi˚.Ætôude", 
˝_gps_co‹d
.
Æt
);

319 
	`js⁄_obje˘_dŸ£t_numbî
(
roŸ_obje˘_vîbo£
, "devi˚.u±ime", 
cuºít_time
 - 
£rv
->
°©e
.
°¨tup_time
);

320 
	`js⁄_obje˘_dŸ£t_°rög
(
roŸ_obje˘_vîbo£
, "devi˚.gps", 
gps_°©e
);

321 
	`js⁄_obje˘_dŸ£t_°rög
(
roŸ_obje˘_vîbo£
, "devi˚.∂©f‹m", 
GW
.
öfo
.
∂©f‹m
);

322 
	`js⁄_obje˘_dŸ£t_°rög
(
roŸ_obje˘_vîbo£
, "devi˚.emaû", 
GW
.
öfo
.
emaû
);

323 
	`js⁄_obje˘_dŸ£t_°rög
(
roŸ_obje˘_vîbo£
, "devi˚.des¸ùti⁄", 
GW
.
öfo
.
des¸ùti⁄
);

324 
	`js⁄_obje˘_dŸ£t_numbî
(
roŸ_obje˘_vîbo£
, "cuºít.up_ødio_∑ckës_ª˚ived", 
˝_nb_rx_rcv
);

325 
	`js⁄_obje˘_dŸ£t_numbî
(
roŸ_obje˘_vîbo£
, "cuºít.up_ødio_∑ckës_¸c_good", 
˝_nb_rx_ok
);

326 
	`js⁄_obje˘_dŸ£t_numbî
(
roŸ_obje˘_vîbo£
, "cuºít.up_ødio_∑ckës_¸c_bad", 
˝_nb_rx_bad
);

327 
	`js⁄_obje˘_dŸ£t_numbî
(
roŸ_obje˘_vîbo£
, "cuºít.up_ødio_∑ckës_¸c_ab£¡", 
˝_nb_rx_no¸c
);

328 
	`js⁄_obje˘_dŸ£t_numbî
(
roŸ_obje˘_vîbo£
, "cuºít.up_ødio_∑ckës_dr›≥d", 
˝_nb_rx_dr›
);

329 
	`js⁄_obje˘_dŸ£t_numbî
(
roŸ_obje˘_vîbo£
, "cuºít.up_ødio_∑ckës_f‹w¨ded", 
˝_up_pkt_fwd
);

330 
	`js⁄_obje˘_dŸ£t_numbî
(
roŸ_obje˘_vîbo£
, "cuºít.up_£rvî_d©agøms_£nd", 
˝_up_dgøm_£¡
);

331 
	`js⁄_obje˘_dŸ£t_numbî
(
roŸ_obje˘_vîbo£
, "cuºít.up_£rvî_d©agøms_acknowÀdged", 
˝_up_ack_rcv
);

332 
	`js⁄_obje˘_dŸ£t_numbî
(
roŸ_obje˘_vîbo£
, "cuºít.down_hóπbót_£nd", 
˝_dw_puŒ_£¡
);

333 
	`js⁄_obje˘_dŸ£t_numbî
(
roŸ_obje˘_vîbo£
, "cuºít.down_hóπbót_ª˚ived", 
˝_dw_ack_rcv
);

334 
	`js⁄_obje˘_dŸ£t_numbî
(
roŸ_obje˘_vîbo£
, "cuºít.down_£rvî_d©agøms_ª˚ived", 
˝_dw_dgøm_rcv
);

335 
	`js⁄_obje˘_dŸ£t_numbî
(
roŸ_obje˘_vîbo£
, "cuºít.down_£rvî_d©agøms_ac˚±ed", 
˝_dw_dgøm_a˝
);

336 
	`js⁄_obje˘_dŸ£t_numbî
(
roŸ_obje˘_vîbo£
, "cuºít.down_ødio_∑ckës_suc˚s", 
˝_nb_tx_ok
);

337 
	`js⁄_obje˘_dŸ£t_numbî
(
roŸ_obje˘_vîbo£
, "cuºít.down_ødio_∑ckës_Áûuª", 
˝_nb_tx_Áû
);

338 
	`js⁄_obje˘_dŸ£t_numbî
(
roŸ_obje˘_vîbo£
, "cuºít.down_ødio_∑ckës_cﬁlisi⁄_∑ckë", 
˝_nb_tx_ªje˘ed_cﬁlisi⁄_∑ckë
);

339 
	`js⁄_obje˘_dŸ£t_numbî
(
roŸ_obje˘_vîbo£
, "cuºít.down_ødio_∑ckës_cﬁlisi⁄_bóc⁄", 
˝_nb_tx_ªje˘ed_cﬁlisi⁄_bóc⁄
);

340 
	`js⁄_obje˘_dŸ£t_numbî
(
roŸ_obje˘_vîbo£
, "cuºít.down_ødio_∑ckës_too_óæy", 
˝_nb_tx_ªje˘ed_too_óæy
);

341 
	`js⁄_obje˘_dŸ£t_numbî
(
roŸ_obje˘_vîbo£
, "cuºít.down_ødio_∑ckës_too_œã", 
˝_nb_tx_ªje˘ed_too_œã
);

342 
	`js⁄_obje˘_dŸ£t_numbî
(
roŸ_obje˘_vîbo£
, "cuºít.down_bóc⁄_∑ckës_queued", 
˝_nb_bóc⁄_queued
);

343 
	`js⁄_obje˘_dŸ£t_numbî
(
roŸ_obje˘_vîbo£
, "cuºít.down_bóc⁄_∑ckës_£nd", 
˝_nb_bóc⁄_£¡
);

344 
	`js⁄_obje˘_dŸ£t_numbî
(
roŸ_obje˘_vîbo£
, "cuºít.down_bóc⁄_∑ckës_ªje˘ed", 
˝_nb_bóc⁄_ªje˘ed
);

347 i‡(
£mãch_f‹m©
) {

348 
	`±hªad_muãx_lock
(&
£rv
->
ªp‹t
->
mx_ªp‹t
);

350 
	`mem£t
(
£rv
->
ªp‹t
->
°©us_ªp‹t
, 0, (serv->report->status_report));

352 i‡((
GW
.
gps
.
gps_íabÀd
 && 
co‹d_ok
Ë|| GW.gps.
gps_Áke_íabÀ
) {

353 
	`¢¥ötf
(
£rv
->
ªp‹t
->
°©us_ªp‹t
, 
STATUS_SIZE
,

355 
°©_time°amp
, 
˝_gps_co‹d
.
œt
, cp_gps_co‹d.
l⁄
,

356 
˝_gps_co‹d
.
Æt
, 
˝_nb_rx_rcv
, 
˝_nb_rx_ok
,

357 
˝_up_pkt_fwd
, 100.0 * 
up_ack_øtio
, 
˝_dw_dgøm_rcv
,

358 
˝_nb_tx_ok
, 
GW
.
öfo
.
∂©f‹m
,

359 
GW
.
öfo
.
emaû
, GW.öfo.
des¸ùti⁄
);

361 
	`¢¥ötf
(
£rv
->
ªp‹t
->
°©us_ªp‹t
, 
STATUS_SIZE
,

363 
°©_time°amp
, 
˝_nb_rx_rcv
, 
˝_nb_rx_ok
,

364 
˝_up_pkt_fwd
, 100.0 * 
up_ack_øtio
, 
˝_dw_dgøm_rcv
,

365 
˝_nb_tx_ok
, 
GW
.
öfo
.
∂©f‹m
,

366 
GW
.
öfo
.
emaû
, GW.öfo.
des¸ùti⁄
);

368 
	`lgw_log
(
LOG_INFO
, "#[%s] Semãch sètu†ªp‹à£¡. \n", 
£rv
->
öfo
.
«me
);

370 
£rv
->
ªp‹t
->
ªp‹t_ªady
 = 
åue
;

371 
	`±hªad_muãx_u∆ock
(&
£rv
->
ªp‹t
->
mx_ªp‹t
);

372 
	`£m_po°
(&
£rv
->
thªad
.
£ma
);

375 i‡(
Ÿhî_f‹m©
)

376 
	`js⁄_vÆue_‰ì
(
roŸ_vÆue_vîbo£
);

378 
	`lgw_log
(
LOG_INFO
, "################### [%s]Énd o‡ªp‹tög #########################\n", 
£rv
->
öfo
.
«me
);

380 
	}
}

382 
	$ªp‹t_°¨t
() {

383 
£rv_s
* 
£rv_íåy
;

384 
	`LGW_LIST_TRAVERSE
(&
GW
.
£rv_li°
, 
£rv_íåy
, 
li°
) {

385 
£rv_íåy
->
öfo
.
ty≥
) {

386 
£mãch
:

387 
	`£mãch_ªp‹t
(
£rv_íåy
);

390 
	`lgw_log
(
LOG_INFO
, "\n################[%s]Çÿªp‹ào‡thi†£rvi˚ ###############\n", 
£rv_íåy
->
öfo
.
«me
);

394 
	}
}

	@fwd/src/timersync.c

20 
	~<±hªad.h
>

22 
	~"loggî.h
"

23 
	~"gwcfg.h
"

24 
	~"timîsync.h
"

25 
	~"l‹agw_hÆ.h
"

26 
	~"l‹agw_ªg.h
"

27 
	~"l‹agw_aux.h
"

51 
±hªad_muãx_t
 
	gmx_timîsync
 = 
PTHREAD_MUTEX_INITIALIZER
;

52 
timevÆ
 
	goff£t_unix_c⁄˚¡
 = {0,0};

56 
boﬁ
 
exô_sig
;

57 
boﬁ
 
quô_sig
;

62 
	gDECLARE_GW
;

63 
	gDECLARE_HAL
;

65 
	$gë_c⁄˚¡øt‹_time
(
timevÆ
 *
c⁄˚¡_time
, timevÆ 
unix_time
) {

66 
timevÆ
 
loˇl_timevÆ
;

68 i‡(
c⁄˚¡_time
 =
NULL
) {

69 
	`lgw_log
(
LOG_ERROR
, "ERROR: %†övÆidÖ¨amëî\n", 
__FUNCTION__
);

73 
	`±hªad_muãx_lock
(&
mx_timîsync
);

74 
	`timîsub
(&
unix_time
, &
off£t_unix_c⁄˚¡
, &
loˇl_timevÆ
);

75 
	`±hªad_muãx_u∆ock
(&
mx_timîsync
);

78 
c⁄˚¡_time
->
tv_£c
 = 
loˇl_timevÆ
.tv_sec;

79 
c⁄˚¡_time
->
tv_u£c
 = 
loˇl_timevÆ
.tv_usec;

81 
	`lgw_log
(
LOG_TIMERSYNC
, " --> TIME: unix cuºíàtimêi† %ld,%ld\n", 
unix_time
.
tv_£c
, unix_time.
tv_u£c
);

82 
	`lgw_log
(
LOG_TIMERSYNC
, " off£ài† %ld,%ld\n", 
off£t_unix_c⁄˚¡
.
tv_£c
, off£t_unix_c⁄˚¡.
tv_u£c
);

83 
	`lgw_log
(
LOG_TIMERSYNC
, " sx130x cuºíàtimêi†%ld,%ld\n", 
loˇl_timevÆ
.
tv_£c
,Üoˇl_timevÆ.
tv_u£c
);

86 
	}
}

91 
	$thªad_timîsync
() {

92 
timevÆ
 
unix_timevÆ
;

93 
timevÆ
 
c⁄˚¡øt‹_timevÆ
;

94 
uöt32_t
 
sx130x_timecou¡
 = 0;

95 
timevÆ
 
off£t_¥evious
 = {0,0};

96 
timevÆ
 
off£t_dri·
 = {0,0};

98 !
exô_sig
 && !
quô_sig
) {

101 
	`lgw_log
(
LOG_INFO
, "\nINFO: Disabling GPS mode for concentrator's counter...\n");

107 
	`gëtimeofday
(&
unix_timevÆ
, 
NULL
);

110 
	`±hªad_muãx_lock
(&
GW
.
hÆ
.
mx_c⁄˚¡
);

111 
HAL
.
	`lgw_gë_åig˙t
(&
sx130x_timecou¡
);

112 
	`±hªad_muãx_u∆ock
(&
GW
.
hÆ
.
mx_c⁄˚¡
);

113 
c⁄˚¡øt‹_timevÆ
.
tv_£c
 = 
sx130x_timecou¡
 / 1000000UL;

114 
c⁄˚¡øt‹_timevÆ
.
tv_u£c
 = 
sx130x_timecou¡
 - (c⁄˚¡øt‹_timevÆ.
tv_£c
 * 1000000UL);

117 
off£t_¥evious
.
tv_£c
 = 
off£t_unix_c⁄˚¡
.tv_sec;

118 
off£t_¥evious
.
tv_u£c
 = 
off£t_unix_c⁄˚¡
.tv_usec;

121 
	`±hªad_muãx_lock
(&
mx_timîsync
);

122 
	`timîsub
(&
unix_timevÆ
, &
c⁄˚¡øt‹_timevÆ
, &
off£t_unix_c⁄˚¡
);

123 
	`±hªad_muãx_u∆ock
(&
mx_timîsync
);

125 
	`timîsub
(&
off£t_unix_c⁄˚¡
, &
off£t_¥evious
, &
off£t_dri·
);

127 
	`lgw_log
(
LOG_TIMERSYNC
, " sx130x = %u (¬µs) -Åimeval (%ld,%ld)\n",

128 
sx130x_timecou¡
,

129 
c⁄˚¡øt‹_timevÆ
.
tv_£c
,

130 
c⁄˚¡øt‹_timevÆ
.
tv_u£c
);

131 
	`lgw_log
(
LOG_TIMERSYNC
, " unix_timevÆ = %ld,%ld\n", 
unix_timevÆ
.
tv_£c
, unix_timevÆ.
tv_u£c
);

133 
	`lgw_log
(
LOG_INFO
, "INFO: host/sx130xÅime offset=(%lds:%ld¬µs) - drift=%ld¬µs\n",

134 
off£t_unix_c⁄˚¡
.
tv_£c
,

135 
off£t_unix_c⁄˚¡
.
tv_u£c
,

136 
off£t_dri·
.
tv_£c
 * 1000000UL + off£t_dri·.
tv_u£c
);

137 
	`lgw_log
(
LOG_INFO
, "INFO: Enabling GPS mode for concentrator's counter.\n\n");

148 
	`waô_ms
(60000);

150 
	}
}

	@fwd/src/utilities.c

27 
	~<°dlib.h
>

28 
	~<°dio.h
>

29 
	~<˘y≥.h
>

30 
	~<î∫o.h
>

32 
	~"fwd.h
"

33 
	~"utûôõs.h
"

35 
	#RAND_LOCAL_MAX
 2147483647L

	)

37 
uöt32_t
 
	g√xt
 = 1;

39 
öt32_t
 
	$lgw_ønd
( )

41  ( ( 
√xt
 =Çexà* 1103515245L + 12345L ) % 
RAND_LOCAL_MAX
 );

42 
	}
}

44 
	$lgw_§™d
–
uöt32_t
 
£ed
 )

46 
√xt
 = 
£ed
;

47 
	}
}

50 
öt32_t
 
	$lgw_øndr
–
öt32_t
 
mö
, i¡32_à
max
 )

52  ( 
öt32_t
 )
	`lgw_ønd
–Ë% ( 
max
 - 
mö
 + 1 ) + min;

53 
	}
}

55 
	$lgw_mem˝y
–
uöt8_t
 *
d°
, c⁄° uöt8_à*
§c
, 
uöt16_t
 
size
 )

57  
size
-- )

59 *
d°
++ = *
§c
++;

61 
	}
}

63 
	$lgw_mem˝yr
–
uöt8_t
 *
d°
, c⁄° uöt8_à*
§c
, 
uöt16_t
 
size
 )

65 
d°
 = d° + ( 
size
 - 1 );

66  
size
-- )

68 *
d°
-- = *
§c
++;

70 
	}
}

72 
	$lgw_mem£t
–
uöt8_t
 *
d°
, uöt8_à
vÆue
, 
uöt16_t
 
size
 )

74  
size
-- )

76 *
d°
++ = 
vÆue
;

78 
	}
}

80 
öt8_t
 
	$nibbÀ2hexch¨
–
uöt8_t
 
a
 )

82 if–
a
 < 10 )

84  '0' + 
a
;

86 if–
a
 < 16 )

88  'A' + ( 
a
 - 10 );

94 
	}
}

96 
	$°r2hex
(
uöt8_t
* 
de°
, * 
§c
, 
Àn
) {

97 
i
;

98 
uöt8_t
 
ch1
;

99 
uöt8_t
 
ch2
;

100 
uöt8_t
 
ui1
;

101 
uöt8_t
 
ui2
;

102 
i
 = 0; i < 
Àn
; i++) {

103 
ch1
 = 
§c
[
i
*2];

104 
ch2
 = 
§c
[
i
*2+1];

105 
ui1
 = (
uöt8_t
)
	`touµî
(
ch1
) - 0x30;

106 i‡(
ui1
 > 9)

107 
ui1
 -= 7;

108 
ui2
 = (
uöt8_t
)
	`touµî
(
ch2
) - 0x30;

109 i‡(
ui2
 > 9)

110 
ui2
 -= 7;

111 
de°
[
i
] = 
ui1
*16 + 
ui2
;

113 
	}
}

115 
uöt8_t
 
	$hex2öt
(
c
) {

120 if–
c
 >= '0' && c <= '9') {

121  (
uöt8_t
Ë(
c
 - 0x30);

122 } if–
c
 >= 'A' && c <= 'F') {

123  (
uöt8_t
Ë(
c
 - 0x37);

124 } if–
c
 >= 'a' && c <= 'f') {

125  (
uöt8_t
Ë(
c
 - 0x57);

129 
	}
}

131 
	$hex2°r
(
uöt8_t
* 
hex
, uöt8_t* 
°r
, uöt8_à
Àn
) {

132 
i
 = 0, 
j
;

133 
uöt8_t
 
h
, 
l
;

135 
j
 = 0; j < 
Àn
 - 1; ) {

136 
h
 = 
	`hex2öt
(
hex
[
j
++]);

137 
l
 = 
	`hex2öt
(
hex
[
j
++]);

138 
°r
[
i
++] = (
h
<<4Ë| 
l
;

140 
	}
}

142 * 
	$lgw_gí_°r
(*
°r
, 
size
) {

143 
i
, 
Êag
;

144 
	`§™d
(
	`time
(
NULL
));

145 
i
 = 0; i < 
size
 - 1; i++)

147 
Êag
 = 
	`ønd
()%3;

148 
Êag
)

151 
°r
[
i
] = 
	`ønd
()%26 + 'a';

154 
°r
[
i
] = 
	`ønd
()%26 + 'A';

157 
°r
[
i
] = 
	`ønd
()%10 + '0';

161 
°r
[
i
] = '\0';

162  
°r
;

163 
	}
}

165 
	sthr_¨g
 {

166 *(*
	m°¨t_routöe
)(*);

167 *
	md©a
;

168 *
	m«me
;

171 
	$lgw_background_°acksize
()

173 #i‡!
	`deföed
(
LOW_MEMORY
)

174  
LGW_STACKSIZE
;

176  
LGW_STACKSIZE_LOW
;

178 
	}
}

180 
	$lgw_±hªad_¸óã_°ack
(
±hªad_t
 *
thªad
, 
±hªad_©å_t
 *
©å
, *(*
°¨t_routöe
)(*),

181 *
d©a
, 
size_t
 
°acksize
, c⁄° *
fûe
, c⁄° *
ˇŒî
,

182 
löe
, c⁄° *
°¨t_‚
)

185 
ªs
;

187 i‡(!
©å
) {

188 
©å
 = 
	`lgw_Æloˇ
((*attr));

189 
	`±hªad_©å_öô
(
©å
);

192 #i‡
	`deföed
(
__löux__
Ë|| deföed(
__FªeBSD__
)

200 i‡((
î∫o
 = 
	`±hªad_©å_£töhîôsched
(
©å
, 
PTHREAD_INHERIT_SCHED
)))

201 
	`lgw_log
(
LOG_WARNING
, "±hªad_©å_£töhîôsched: %s\n", 
	`°ªº‹
(
î∫o
));

204 i‡(!
°acksize
)

205 
°acksize
 = 
LGW_STACKSIZE
;

207 i‡((
î∫o
 = 
	`±hªad_©å_£t°acksize
(
©å
, 
°acksize
 ? sècksizê: 
LGW_STACKSIZE
)))

208 
	`lgw_log
(
LOG_WARNING
, "±hªad_©å_£t°acksize: %s\n", 
	`°ªº‹
(
î∫o
));

210 i‡((
ªs
 = 
	`±hªad_¸óã
(
thªad
, 
©å
, 
°¨t_routöe
, 
d©a
)))

211 
	`lgw_log
(
LOG_ERROR
, "%s->%s:%s:%dÖthªad_¸óã: %s\n", 
ˇŒî
, 
fûe
, 
°¨t_‚
, 
löe
, 
	`°ªº‹
(
ªs
));

213  
ªs
;

214 
	}
}

217 
	$lgw_±hªad_¸óã_dëached_°ack
(
±hªad_t
 *
thªad
, 
±hªad_©å_t
 *
©å
, *(*
°¨t_routöe
)(*),

218 *
d©a
, 
size_t
 
°acksize
, c⁄° *
fûe
, c⁄° *
ˇŒî
,

219 
löe
, c⁄° *
°¨t_‚
)

221 
©å_de°roy
 = 0;

222 
ªs
;

224 i‡(!
©å
) {

225 
©å
 = 
	`lgw_Æloˇ
((*attr));

226 
	`±hªad_©å_öô
(
©å
);

227 
©å_de°roy
 = 1;

230 i‡((
î∫o
 = 
	`±hªad_©å_£tdëach°©e
(
©å
, 
PTHREAD_CREATE_DETACHED
)))

231 
	`lgw_log
(
LOG_WARNING
, "±hªad_©å_£tdëach°©e: %s\n", 
	`°ªº‹
(
î∫o
));

233 
ªs
 = 
	`lgw_±hªad_¸óã_°ack
(
thªad
, 
©å
, 
°¨t_routöe
, 
d©a
, 
°acksize
, 
fûe
, 
ˇŒî
, 
löe
, 
°¨t_‚
);

235 i‡(
©å_de°roy
)

236 
	`±hªad_©å_de°roy
(
©å
);

238  
ªs
;

239 
	}
}

241 
	$lgw_gë_tid
()

243 
ªt
 = -1;

244 
ªt
 = ()
	`±hªad_£lf
();

245  
ªt
;

246 
	}
}

248 
DO_CRASH_NORETURN
 
	$lgw_do_¸ash
()

250 #i‡
	`deföed
(
DO_CRASH
)

251 
	`ab‹t
();

258 
	}
}

260 
DO_CRASH_NORETURN
 
	$__lgw_as£π_Áûed
(
c⁄dôi⁄
, c⁄° *
c⁄dôi⁄_°r
, c⁄° *
fûe
, 
löe
, c⁄° *
fun˘i⁄
)

266 
	`Ârötf
(
°dîr
, "FRACK!, Faûedás£πi⁄ %†(%dË©Üöê%d i¿%†o‡%s\n", 
c⁄dôi⁄_°r
, 
c⁄dôi⁄
, 
löe
, 
fun˘i⁄
, 
fûe
);

267 
	`lgw_log
(
LOG_ERROR
, 
fûe
, 
löe
, 
fun˘i⁄
, "FRACK!, Faûedás£πi⁄ %†(%d)\n", 
c⁄dôi⁄_°r
, 
c⁄dôi⁄
);

277 
	`u¶ìp
(1);

278 
	`lgw_do_¸ash
();

279 
	}
}

	@hal/config.h

1 #i‚de‡
_LORAGW_CONFIGURATION_H


2 
	#_LORAGW_CONFIGURATION_H


	)

3 
	#LIBLORAGW_VERSION
 "1.0.5"

	)

4 
	#DEBUG_AUX
 0

	)

5 
	#DEBUG_SPI
 0

	)

6 
	#DEBUG_I2C
 1

	)

7 
	#DEBUG_REG
 0

	)

8 
	#DEBUG_HAL
 1

	)

9 
	#DEBUG_LBT
 0

	)

10 
	#DEBUG_GPS
 0

	)

11 
	#DEBUG_RAD
 0

	)

12 
	#DEBUG_CAL
 0

	)

13 
	#DEBUG_SX1302
 1

	)

	@hal/gpio.c

12 
	~"gpio.h
"

19 
boﬁ
 
	$gpio_ª£rve
(
gpio
) {

20 
fd
;

21 
buf
[3];

24 
fd
 = 
	`›í
("/sys/˛ass/gpio/exp‹t", 
O_WRONLY
);

25 i‡(
fd
 < 0) {

27 
	`Ârötf
(
°dîr
, "gpio_reserve: couldÇot open /sys/class/gpio/export\r\n");

28  
Ál£
;

32 
	`¢¥ötf
(
buf
, 3, "%d", 
gpio
);

35 i‡(
	`wrôe
(
fd
, 
buf
, 
	`°æí
(buf)) < 0) {

36 
	`˛o£
(
fd
);

37 
	`Ârötf
(
°dîr
, "gpio_ª£rve: couldÇŸ wrôê'%s'Åÿ/sys/˛ass/gpio/exp‹t\r\n", 
buf
);

38  
Ál£
;

42 i‡(
	`˛o£
(
fd
) < 0) {

43 
	`Ârötf
(
°dîr
, "gpio_reserve: couldÇot close /sys/class/gpio/export\r\n");

44  
Ál£
;

48  
åue
;

49 
	}
}

56 
boﬁ
 
	$gpio_ªÀa£
(
gpio
) {

57 
fd
;

58 
buf
[3];

61 
fd
 = 
	`›í
("/sys/˛ass/gpio/u√xp‹t", 
O_WRONLY
);

62 i‡(
fd
 < 0) {

64 
	`Ârötf
(
°dîr
, "gpio_release: couldÇot open /sys/class/gpio/unexport\r\n");

65  
Ál£
;

69 
	`¢¥ötf
(
buf
, 3, "%d", 
gpio
);

72 i‡(
	`wrôe
(
fd
, 
buf
, 
	`°æí
(buf)) < 0) {

73 
	`Ârötf
(
°dîr
, "gpio_release: couldÇot write /sys/class/gpio/unexport\r\n");

74  
Ál£
;

78 i‡(
	`˛o£
(
fd
) < 0) {

79 
	`Ârötf
(
°dîr
, "gpio_release: couldÇot close /sys/class/gpio/unexport\r\n");

80  
Ál£
;

84  
åue
;

85 
	}
}

93 
boﬁ
 
	$gpio_£t_dúe˘i⁄
(
gpio
, 
dúe˘i⁄
) {

94 
fd
;

95 
buf
[33];

98 
	`¢¥ötf
(
buf
, 33, "/sys/˛ass/gpio/gpio%d/dúe˘i⁄", 
gpio
);

101 
fd
 = 
	`›í
(
buf
, 
O_WRONLY
);

102 i‡(
fd
 < 0) {

104  
Ál£
;

108 i‡(
dúe˘i⁄
 =
GPIO_OUT
) {

109 i‡(
	`wrôe
(
fd
, "out", 3) < 0) {

110  
Ál£
;

113 i‡(
	`wrôe
(
fd
, "in", 2) < 0) {

114  
Ál£
;

119 i‡(
	`˛o£
(
fd
) < 0) {

120  
Ál£
;

124  
åue
;

125 
	}
}

133 
boﬁ
 
	$gpio_£t_°©e
(
gpio
, 
°©e
) {

134 
fd
;

135 
buf
[29];

138 
	`¢¥ötf
(
buf
, 29, "/sys/˛ass/gpio/gpio%d/vÆue", 
gpio
);

141 
fd
 = 
	`›í
(
buf
, 
O_WRONLY
);

142 i‡(
fd
 < 0) {

144  
Ál£
;

148 i‡(
	`wrôe
(
fd
, (
°©e
 == 1 ? "1" : "0"), 1) < 0) {

149  
Ál£
;

153 i‡(
	`˛o£
(
fd
) < 0) {

154  
Ál£
;

158  
åue
;

159 
	}
}

167 
	$gpio_gë_°©e
(
gpio
) {

168 
fd
;

169 
buf
[29];

170 
p‹t_°©e
;

171 
°©e
;

174 
	`¢¥ötf
(
buf
, 29, "/sys/˛ass/gpio/gpio%d/vÆue", 
gpio
);

177 
fd
 = 
	`›í
(
buf
, 
O_RDONLY
);

178 i‡(
fd
 < 0) {

180 
	`Ârötf
(
°dîr
, "gpio_gë_°©e: couldÇŸ o≥¿/sys/˛ass/gpio/gpio%d/vÆue\r\n", 
gpio
);

181  
LOW
;

185 i‡(
	`ªad
(
fd
, &
p‹t_°©e
, 1) < 0) {

186 
	`˛o£
(
fd
);

187 
	`Ârötf
(
°dîr
, "gpio_gë_°©e: couldÇŸÑód /sys/˛ass/gpio/gpio%d/vÆue\r\n", 
gpio
);

188  
LOW
;

192 
°©e
 = 
p‹t_°©e
 ='1' ? 
HIGH
 : 
LOW
;

195 i‡(
	`˛o£
(
fd
) < 0) {

196 
	`Ârötf
(
°dîr
, "gpio_gë_°©e: couldÇŸ clo£ /sys/˛ass/gpio/gpio%d/vÆue\r\n", 
gpio
);

197  
LOW
;

201  
°©e
;

202 
	}
}

206 
	$digôÆ_wrôe
(
gpio
, 
°©e
)

208 
	`gpio_ª£rve
(
gpio
);

209 
	`gpio_£t_dúe˘i⁄
(
gpio
, 
GPIO_OUT
);

210 
	`gpio_£t_°©e
(
gpio
, 
°©e
);

211 
	`gpio_ªÀa£
(
gpio
);

212 
	}
}

221 
	$digôÆ_ªad
(
gpio
) {

222 
°©e
;

225 i‡(!
	`gpio_ª£rve
(
gpio
)) {

230 
°©e
 = 
	`gpio_gë_°©e
(
gpio
);

232 i‡(!
	`gpio_ªÀa£
(
gpio
)) {

237  
°©e
;

238 
	}
}

	@hal/gpio.h

12 #i‚de‡
_GPIO_H


13 
	#_GPIO_H


	)

15 
	~<°dio.h
>

16 
	~<°rög.h
>

17 
	~<°döt.h
>

18 
	~<°dlib.h
>

19 
	~<°d¨g.h
>

20 
	~<°dboﬁ.h
>

21 
	~<f˙é.h
>

22 
	~<uni°d.h
>

23 
	~<î∫o.h
>

24 
	~<time.h
>

26 
	~<löux/•i/•idev.h
>

27 
	~<sys/io˘l.h
>

34 
	#LOW
 0

	)

35 
	#HIGH
 1

	)

37 
	#GPIO_OUT
 0

	)

38 
	#GPIO_IN
 1

	)

40 
	#SX127X_RESET_PIN
 12

	)

49 
digôÆ_ªad
();

51 
digôÆ_wrôe
(, );

	@hal/lg02hal/loragw_hal_lg02.c

31 
	~<°döt.h
>

32 
	~<°dboﬁ.h
>

33 
	~<°dio.h
>

34 
	~<°rög.h
>

35 
	~<°dlib.h
>

36 
	~<time.h
>

38 
	~<sys/time.h
>

40 
	~"gpio.h
"

41 
	~"l‹agw_aux.h
"

42 
	~"l‹agw_•i.h
"

43 
	~"l‹agw_sx1276_ªgs.h
"

44 
	~"l‹agw_sx1272_ªgs.h
"

45 
	~"l‹agw_sx127x_ødio.h
"

46 
	~"l‹agw_hÆ_lg02.h
"

51 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

52 #i‡
DEBUG_HAL
 == 1

53 
	#DEBUG_MSG
(
°r
Ë
	`Ârötf
(
°dîr
, så)

	)

54 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...Ë
	`Ârötf
(
°dîr
,"%s:%d: "fmt, 
__FUNCTION__
, 
__LINE__
,árgs)

	)

55 
	#DEBUG_ARRAY
(
a
,
b
,
c
Ëa=0;a<b;++aË
	`Ârötf
(
°dîr
,"%x.",c[a]);Ârötf(°dîr,"íd\n")

	)

56 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){
	`Ârötf
(
°dîr
,"%s:%d: ERROR~ NULL POINTER AS ARGUMENT\n", 
__FUNCTION__
, 
__LINE__
); 
LGW_HAL_ERROR
;}

	)

58 
	#DEBUG_MSG
(
°r
)

	)

59 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...)

	)

60 
	#DEBUG_ARRAY
(
a
,
b
,
c
Ëa=0;a!=0;){}

	)

61 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){ 
LGW_HAL_ERROR
;}

	)

66 c⁄° 
uöt8_t
 
	grxl‹aúqmask
[] = {

67 [
RXMODE_SINGLE
] = 
IRQ_LORA_RXDONE_MASK
|
IRQ_LORA_RXTOUT_MASK
|
IRQ_LORA_CRCERR_MASK
,

68 [
RXMODE_SCAN
] = 
IRQ_LORA_RXDONE_MASK
|
IRQ_LORA_CRCERR_MASK
,

69 [
RXMODE_RSSI
] = 0x00,

79 
	$›mode
 (* 
•idev
, 
boﬁ
 
is·di
, 
uöt8_t
 
mode
) {

80 
ªt
;

81 
uöt8_t
 
vÆ
;

83 
ªt
 = 
	`lg02_ªg_r
(
•idev
, 
is·di
, 
SX1276_REG_LR_OPMODE
, &
vÆ
);

84 
ªt
 |
	`lg02_ªg_w
(
•idev
, 
is·di
, 
SX1276_REG_LR_OPMODE
, (
vÆ
 & ~
OPMODE_MASK
Ë| 
mode
);

86  
ªt
;

87 
	}
}

91 
	$l‹amode
(* 
•idev
, 
boﬁ
 
is·di
) {

92 
uöt8_t
 
u
 = 
OPMODE_LORA
 | 0x8;

93  
	`lg02_ªg_w
(
•idev
, 
is·di
, 
SX1276_REG_LR_OPMODE
, 
u
);

94 
	}
}

98 
	$lg02_£çowî
(* 
•idev
, 
boﬁ
 
is·di
, 
uöt8_t
 
pw
) {

99 
ªt
;

100 
ªt
 = 
	`lg02_ªg_w
(
•idev
, 
is·di
, 
SX1276_REG_LR_PADAC
, 0x87);

101 i‡(
pw
 < 5)Öw = 5;

102 i‡(
pw
 > 20)Öw = 20;

103 
ªt
 |
	`lg02_ªg_w
(
•idev
, 
is·di
, 
SX1276_REG_LR_PACONFIG
, (
uöt16_t
)(0x80 | ((
pw
 - 5) & 0x0f)));

105  
ªt
;

106 
	}
}

110 
	$lg02_£t‰eq
(* 
•idev
, 
boﬁ
 
is·di
, 
‰equícy
)

112 
ªt
;

113 
uöt64_t
 
‰f
 = ((uöt64_t)
‰equícy
 << 19) / 32000000;

115 
ªt
 = 
	`lg02_ªg_w
(
•idev
, 
is·di
, 
SX1276_REG_LR_FRFMSB
, (
uöt8_t
)(
‰f
 >> 16));

116 
ªt
 |
	`lg02_ªg_w
(
•idev
, 
is·di
, 
SX1276_REG_LR_FRFMID
, (
uöt8_t
)(
‰f
 >> 8));

117 
ªt
 |
	`lg02_ªg_w
(
•idev
, 
is·di
, 
SX1276_REG_LR_FRFLSB
, (
uöt8_t
)(
‰f
 >> 0));

119  
ªt
;

120 
	}
}

124 
	$lg02_£tsf
(* 
•idev
, 
boﬁ
 
is·di
, 
sf
)

126 
ªt
;

127 
uöt8_t
 
vÆ
;

129 i‡(
sf
 < 6) {

130 
sf
 = 6;

131 } i‡(
sf
 > 12) {

132 
sf
 = 12;

135 i‡(
sf
 == 6) {

136 
ªt
 = 
	`lg02_ªg_w
(
•idev
, 
is·di
, 
SX1276_REG_LR_DETECTOPTIMIZE
, 0xc5);

137 
ªt
 |
	`lg02_ªg_w
(
•idev
, 
is·di
, 
SX1276_REG_LR_DETECTIONTHRESHOLD
, 0x0c);

139 
ªt
 = 
	`lg02_ªg_w
(
•idev
, 
is·di
, 
SX1276_REG_LR_DETECTOPTIMIZE
, 0xc3);

140 
ªt
 |
	`lg02_ªg_w
(
•idev
, 
is·di
, 
SX1276_REG_LR_DETECTIONTHRESHOLD
, 0x0a);

143 
ªt
 |
	`lg02_ªg_r
(
•idev
, 
is·di
, 
SX1276_REG_LR_MODEMCONFIG2
, &
vÆ
);

144 
ªt
 |
	`lg02_ªg_w
(
•idev
, 
is·di
, 
SX1276_REG_LR_MODEMCONFIG2
, (
vÆ
 & 0x0fË| ((
sf
 << 4) & 0xf0));

146  
ªt
;

147 
	}
}

151 
	$lg02_£tsbw
(* 
•idev
, 
boﬁ
 
is·di
, 
sbw
)

153 
ªt
, 
bw
;

154 
uöt8_t
 
vÆ
;

156 i‡(
sbw
 <= 7.8E3) {

157 
bw
 = 0;

158 } i‡(
sbw
 <= 10.4E3) {

159 
bw
 = 1;

160 } i‡(
sbw
 <= 15.6E3) {

161 
bw
 = 2;

162 } i‡(
sbw
 <= 20.8E3) {

163 
bw
 = 3;

164 } i‡(
sbw
 <= 31.25E3) {

165 
bw
 = 4;

166 } i‡(
sbw
 <= 41.7E3) {

167 
bw
 = 5;

168 } i‡(
sbw
 <= 62.5E3) {

169 
bw
 = 6;

170 } i‡(
sbw
 <= 125E3) {

171 
bw
 = 7;

172 } i‡(
sbw
 <= 250E3) {

173 
bw
 = 8;

175 
bw
 = 9;

178 
ªt
 = 
	`lg02_ªg_r
(
•idev
, 
is·di
, 
SX1276_REG_LR_MODEMCONFIG1
, &
vÆ
);

179 
ªt
 |
	`lg02_ªg_w
(
•idev
, 
is·di
, 
SX1276_REG_LR_MODEMCONFIG1
, (
vÆ
 & 0x0fË| (
bw
 << 4));

181  
ªt
;

182 
	}
}

186 
	$lg02_£t¸
(* 
•idev
, 
boﬁ
 
is·di
, 
díomö©‹
)

188 
ªt
, 
¸
;

189 
uöt8_t
 
vÆ
;

191 i‡(
díomö©‹
 < 5) {

192 
díomö©‹
 = 5;

193 } i‡(
díomö©‹
 > 8) {

194 
díomö©‹
 = 8;

197 
¸
 = 
díomö©‹
 - 4;

199 
ªt
 = 
	`lg02_ªg_r
(
•idev
, 
is·di
, 
SX1276_REG_LR_MODEMCONFIG1
, &
vÆ
);

200 
ªt
 |=
	`lg02_ªg_w
(
•idev
, 
is·di
, 
SX1276_REG_LR_MODEMCONFIG1
, (
vÆ
 & 0xf1Ë| (
¸
 << 1));

202  
ªt
;

203 
	}
}

207 
	$lg02_£çæí
(* 
•idev
, 
boﬁ
 
is·di
, 
Àngth
)

209 
ªt
;

210 
ªt
 = 
	`lg02_ªg_w
(
•idev
, 
is·di
, 
SX1276_REG_LR_PREAMBLEMSB
, (
uöt8_t
)(
Àngth
 >> 8));

211 
ªt
 |
	`lg02_ªg_w
(
•idev
, 
is·di
, 
SX1276_REG_LR_PREAMBLELSB
, (
uöt8_t
)(
Àngth
 >> 0));

212  
ªt
;

213 
	}
}

217 
	$lg02_£tsyncw‹d
(* 
•idev
, 
boﬁ
 
is·di
, 
sw
)

219  
	`lg02_ªg_w
(
•idev
, 
is·di
, 
SX1276_REG_LR_SYNCWORD
, 
sw
);

220 
	}
}

224 
	$lg02_¸ccheck
(* 
•idev
, 
boﬁ
 
is·di
, 
uöt8_t
 
no¸c
)

226 
ªt
;

227 
uöt8_t
 
vÆ
;

229 
ªt
 = 
	`lg02_ªg_r
(
•idev
, 
is·di
, 
SX1276_REG_LR_MODEMCONFIG2
, &
vÆ
);

231 i‡(
no¸c
)

232 
ªt
 |
	`lg02_ªg_w
(
•idev
, 
is·di
, 
SX1276_REG_LR_MODEMCONFIG2
, 
vÆ
 & 0xfb);

234 
ªt
 |
	`lg02_ªg_w
(
•idev
, 
is·di
, 
SX1276_REG_LR_MODEMCONFIG2
, 
vÆ
 | 0x04);

236  
ªt
;

237 
	}
}

246 
boﬁ
 
	$lg02_dëe˘
(
sx127x_dev
 *
dev
)

248 
uöt8_t
 
vîsi⁄
;

250 
	`digôÆ_wrôe
(
dev
->
r°
, 
LOW
);

251 
	`waô_ms
(10);

252 
	`digôÆ_wrôe
(
dev
->
r°
, 
HIGH
);

253 
	`waô_ms
(10);

255 
	`›mode
(
dev
->
•ù‹t
, dev->
is·di
, 
OPMODE_SLEEP
);

257 
	`lg02_ªg_r
(
dev
->
•ù‹t
, dev->
is·di
, 
SX1276_REG_LR_VERSION
, &
vîsi⁄
);

259 i‡(
vîsi⁄
 == 0x12) {

260 
	`Ârötf
(
°dîr
, "INFO~ %s: SX1276 dëe˘ed, sèπög.\n", 
dev
->
desc
);

261  
åue
;

262 } i‡(
vîsi⁄
 == 0x22) {

263 
	`Ârötf
(
°dîr
, "INFO~ %s: SX1272 dëe˘ed, sèπög.\n", 
dev
->
desc
);

265 
	`Ârötf
(
°dîr
, "ERROR~ %s: SX127xÑadiÿhßÇŸ bì¿found.\n", 
dev
->
desc
);

266  
Ál£
;

269  
Ál£
;

271 
	}
}

273 
	$lg02_£tup
(
sx127x_dev
 *
dev
, 
uöt8_t
 
moduœti⁄
)

275 
ªt
 = 0;

276 
uöt8_t
 
vÆ
;

278 i‡(
dev
->
is·di
) {

279 i‡(
	`lgw_·_•i_›í
(&
dev
->
•ù‹t
Ë=
LGW_SPI_ERROR
) {

280 
	`DEBUG_MSG
("LG02_setup Error: can't open ftdi device.\n");

281  
ªt
;

284 i‡(
	`lgw_•i_›í
(
dev
->
•ù©h
, &dev->
•ù‹t
Ë=
LGW_SPI_ERROR
) {

285 
	`DEBUG_PRINTF
("LG02_£tu∞Eº‹: c™'à›í spòdevi˚ %s.\n", 
dev
->
•ù©h
);

286  
ªt
;

290 
	`CHECK_NULL
(
dev
->
•ù‹t
);

292 
ªt
 = 
	`›mode
(
dev
->
•ù‹t
, dev->
is·di
, 
OPMODE_SLEEP
);

293 
moduœti⁄
) {

294 
MOD_LORA
:

295 
ªt
 |
	`l‹amode
(
dev
->
•ù‹t
, dev->
is·di
);

296 
ªt
 |
	`lg02_ªg_r
(
dev
->
•ù‹t
, dev->
is·di
, 
SX1276_REG_LR_OPMODE
, &
vÆ
);

297 
	`ASSERT
(–
vÆ
 & 
OPMODE_LORA
) != 0);

300 
ªt
 |
	`lg02_£t‰eq
(
dev
->
•ù‹t
, dev->
is·di
, dev->
‰eq
);

301 
ªt
 |
	`lg02_£tsf
(
dev
->
•ù‹t
, dev->
is·di
, dev->
sf
);

302 
ªt
 |
	`lg02_£tsbw
(
dev
->
•ù‹t
, dev->
is·di
, dev->
bw
);

303 
ªt
 |
	`lg02_£t¸
(
dev
->
•ù‹t
, dev->
is·di
, dev->
¸
);

304 
ªt
 |
	`lg02_£çæí
(
dev
->
•ù‹t
, dev->
is·di
, dev->
¥Àn
);

305 
ªt
 |
	`lg02_£tsyncw‹d
(
dev
->
•ù‹t
, dev->
is·di
, dev->
syncw‹d
);

308 
ªt
 |
	`lg02_¸ccheck
(
dev
->
•ù‹t
, dev->
is·di
, dev->
no¸c
);

311 
ªt
 |
	`lg02_ªg_w
(
dev
->
•ù‹t
, dev->
is·di
, 
SX1276_REG_LR_LNA
, 
LNA_MAX_GAIN
);

314 i‡(
dev
->
sf
 < 11)

315 
ªt
 |
	`lg02_ªg_w
(
dev
->
•ù‹t
, dev->
is·di
, 
SX1276_REG_LR_MODEMCONFIG3
, 
SX1276_MC3_AGCAUTO
);

317 
ªt
 |
	`lg02_ªg_w
(
dev
->
•ù‹t
, dev->
is·di
, 
SX1276_REG_LR_MODEMCONFIG3
, 
SX1276_MC3_LOW_DATA_RATE_OPTIMIZE
);

320 
ªt
 |
	`lg02_ªg_w
(
dev
->
•ù‹t
, dev->
is·di
, 0x36, 0x02);

321 
ªt
 |
	`lg02_ªg_w
(
dev
->
•ù‹t
, dev->
is·di
, 0x3a, 0x64);

327  
ªt
;

328 
MOD_FSK
:

329  
LGW_HAL_ERROR
;

331  
LGW_HAL_ERROR
;

333  
ªt
;

334 
	}
}

338 
	$lg02_°¨t_rx
(
sx127x_dev
 *
dev
, 
uöt8_t
 
moduœti⁄
, uöt8_à
rxmode
)

340 
ªt
 = 0;

341 
uöt8_t
 
vÆ
;

342 
moduœti⁄
) {

344 
MOD_LORA
:

346 
ªt
 = 
	`lg02_ªg_r
(
dev
->
•ù‹t
, dev->
is·di
, 
SX1276_REG_LR_OPMODE
, &
vÆ
);

347 
	`ASSERT
((
vÆ
 & 
OPMODE_LORA
) != 0);

350 
ªt
 |
	`›mode
(
dev
->
•ù‹t
, dev->
is·di
, 
OPMODE_STANDBY
);

354 
ªt
 |
	`lg02_ªg_r
(
dev
->
•ù‹t
, dev->
is·di
, 
SX1276_REG_LR_INVERTIQ
, &
vÆ
);

356 i‡(
dev
->
övîtio
) {

357 
ªt
 |
	`lg02_ªg_w
(
dev
->
•ù‹t
, dev->
is·di
, 
SX1276_REG_LR_INVERTIQ
, (
vÆ
 & 
INVERTIQ_RX_MASK
 & 
INVERTIQ_TX_MASK
Ë| 
INVERTIQ_RX_ON
 | 
INVERTIQ_TX_OFF
);

358 
ªt
 |
	`lg02_ªg_w
(
dev
->
•ù‹t
, dev->
is·di
, 
SX1276_REG_LR_INVERTIQ2
, 
INVERTIQ2_ON
);

360 
ªt
 |
	`lg02_ªg_w
(
dev
->
•ù‹t
, dev->
is·di
, 
SX1276_REG_LR_INVERTIQ
, (
vÆ
 & 
INVERTIQ_RX_MASK
 & 
INVERTIQ_TX_MASK
Ë| 
INVERTIQ_RX_OFF
 | 
INVERTIQ_TX_OFF
);

361 
ªt
 |
	`lg02_ªg_w
(
dev
->
•ù‹t
, dev->
is·di
, 
SX1276_REG_LR_INVERTIQ2
, 
INVERTIQ2_OFF
);

365 i‡(
rxmode
 =
RXMODE_RSSI
) {

366 
ªt
 |
	`lg02_ªg_w
(
dev
->
•ù‹t
, dev->
is·di
, 
SX1276_REG_LR_MODEMCONFIG1
, 0x0A);

367 
ªt
 |
	`lg02_ªg_w
(
dev
->
•ù‹t
, dev->
is·di
, 
SX1276_REG_LR_MODEMCONFIG2
, 0x70);

370 
ªt
 |
	`lg02_ªg_w
(
dev
->
•ù‹t
, dev->
is·di
, 
SX1276_REG_LR_PAYLOADMAXLENGTH
, 0x80);

372 
ªt
 |
	`lg02_ªg_w
(
dev
->
•ù‹t
, dev->
is·di
, 
SX1276_REG_LR_HOPPERIOD
, 0xFF);

373 
ªt
 |
	`lg02_ªg_w
(
dev
->
•ù‹t
, dev->
is·di
, 
SX1276_REG_LR_FIFORXBASEADDR
, 0x00);

374 
ªt
 |
	`lg02_ªg_w
(
dev
->
•ù‹t
, dev->
is·di
, 
SX1276_REG_LR_FIFOADDRPTR
, 0x00);

377 
ªt
 |
	`lg02_ªg_w
(
dev
->
•ù‹t
, dev->
is·di
, 
SX1276_REG_LR_DIOMAPPING1
, 
MAP_DIO0_LORA_RXDONE
|
MAP_DIO1_LORA_RXTOUT
|
MAP_DIO2_LORA_NOP
);

380 
ªt
 |
	`lg02_ªg_w
(
dev
->
•ù‹t
, dev->
is·di
, 
SX1276_REG_LR_IRQFLAGS
, 0xFF);

382 
ªt
 |
	`lg02_ªg_w
(
dev
->
•ù‹t
, dev->
is·di
, 
SX1276_REG_LR_IRQFLAGSMASK
, ~
rxl‹aúqmask
[
rxmode
]);

387 i‡(
rxmode
 =
RXMODE_SINGLE
) {

389 
ªt
 |
	`›mode
(
dev
->
•ù‹t
, dev->
is·di
, 
OPMODE_RX_SINGLE
);

392 
ªt
 |
	`›mode
(
dev
->
•ù‹t
, dev->
is·di
, 
OPMODE_RX
);

395  
ªt
;

396 
MOD_FSK
:

397  
ªt
;

399  
ªt
;

401  
ªt
;

402 
	}
}

406 
	$lg02_ª˚ive
(* 
•idev
, 
boﬁ
 
is·di
, 
lgw_pkt_rx_s
* 
pkt_d©a
) {

408 
i
, 
ªt
 = 0;

409 
uöt8_t
 
rssic‹r
, 
úqÊags
, 
cuøddr
, 
ªccou¡
, 
vÆue
;

411 
ªt
 = 
	`lg02_ªg_r
(
•idev
, 
is·di
, 
SX1276_REG_LR_IRQFLAGS
, &
úqÊags
);

413 
	`CHECK_NULL
(
pkt_d©a
);

416 
ªt
 |
	`lg02_ªg_w
(
•idev
, 
is·di
, 
SX1276_REG_LR_IRQFLAGS
, 0xFF);

420 i‡((
úqÊags
 & 
IRQ_LORA_RXDONE_MASK
Ë&& (úqÊag†& 
IRQ_LORA_CRCERR_MASK
) == 0) {

423 
ªt
 |
	`lg02_ªg_r
(
•idev
, 
is·di
, 
SX1276_REG_LR_FIFORXCURRENTADDR
, &
cuøddr
);

424 
ªt
 |
	`lg02_ªg_r
(
•idev
, 
is·di
, 
SX1276_REG_LR_RXNBBYTES
, &
ªccou¡
);

426 
pkt_d©a
->
size
 = 
ªccou¡
;

428 
ªt
 |
	`lg02_ªg_w
(
•idev
, 
is·di
, 
SX1276_REG_LR_FIFOADDRPTR
, 
cuøddr
);

430 
	`DEBUG_MSG
("\nRXTX~ Receive(HEX):");

431 
i
 = 0; i < 
ªccou¡
; i++) {

432 
ªt
 |
	`lg02_ªg_r
(
•idev
, 
is·di
, 
SX1276_REG_LR_FIFO
, &
vÆue
);

433 
pkt_d©a
->
∑ylﬂd
[
i
] = 
vÆue
;

434 
	`DEBUG_PRINTF
("%02x", 
pkt_d©a
->
∑ylﬂd
[
i
]);

436 
	`DEBUG_MSG
("\n");

438 
ªt
 |
	`lg02_ªg_r
(
•idev
, 
is·di
, 
SX1276_REG_LR_PKTSNRVALUE
, &
vÆue
);

440 if–
vÆue
 & 0x80 )

443 
vÆue
 = ( ( ~value + 1 ) & 0xFF ) >> 2;

444 
pkt_d©a
->
¢r
 = -
vÆue
;

447 
pkt_d©a
->
¢r
 = ( 
vÆue
 & 0xFF ) >> 2;

450 
rssic‹r
 = 157;

452 
ªt
 |
	`lg02_ªg_r
(
•idev
, 
is·di
, 
SX1276_REG_LR_PKTRSSIVALUE
, &
vÆue
);

453 
pkt_d©a
->
rssic
 = 
vÆue
 - 
rssic‹r
;

459  
ªt
;

460 
	}
}

464 
	$lg02_£nd
(
sx127x_dev
 *
dev
, 
lgw_pkt_tx_s
 *
pkt_d©a
) {

466 
i
, 
ªt
 = 0;

467 
uöt8_t
 
vÆ
;

469 
timevÆ
 
cuºít_unix_time
;

470 
uöt32_t
 
time_us
;

472 
	`CHECK_NULL
(
pkt_d©a
);

474 
ªt
 = 
	`›mode
(
dev
->
•ù‹t
, dev->
is·di
, 
OPMODE_SLEEP
);

476 
ªt
 |
	`l‹amode
(
dev
->
•ù‹t
, dev->
is·di
);

478 
ªt
 |
	`lg02_ªg_r
(
dev
->
•ù‹t
, dev->
is·di
, 
SX1276_REG_LR_OPMODE
, &
vÆ
);

480 
	`ASSERT
((
vÆ
 & 
OPMODE_LORA
) != 0);

482 
ªt
 |
	`lg02_£çowî
(
dev
->
•ù‹t
, dev->
is·di
, 
pkt_d©a
->
rf_powî
);

483 
ªt
 |
	`lg02_£t‰eq
(
dev
->
•ù‹t
, dev->
is·di
, 
pkt_d©a
->
‰eq_hz
);

484 
ªt
 |
	`lg02_£tsf
(
dev
->
•ù‹t
, dev->
is·di
, 
	`lgw_sf_gëvÆ
(
pkt_d©a
->
d©¨©e
));

485 
ªt
 |
	`lg02_£tsbw
(
dev
->
•ù‹t
, dev->
is·di
, 
	`lgw_bw_gëvÆ
(
pkt_d©a
->
b™dwidth
));

486 
ªt
 |
	`lg02_£t¸
(
dev
->
•ù‹t
, dev->
is·di
, 
pkt_d©a
->
codî©e
);

487 
ªt
 |
	`lg02_£çæí
(
dev
->
•ù‹t
, dev->
is·di
, 
pkt_d©a
->
¥ómbÀ
);

488 
ªt
 |
	`lg02_£tsyncw‹d
(
dev
->
•ù‹t
, dev->
is·di
, dev->
syncw‹d
);

491 
ªt
 |
	`lg02_¸ccheck
(
dev
->
•ù‹t
, dev->
is·di
, 
pkt_d©a
->
no_¸c
);

494 
ªt
 |
	`lg02_ªg_w
(
dev
->
•ù‹t
, dev->
is·di
, 
SX1276_REG_LR_LNA
, 
LNA_MAX_GAIN
);

496 
ªt
 |
	`lg02_ªg_w
(
dev
->
•ù‹t
, dev->
is·di
, 
SX1276_REG_LR_PARAMP
, 0x08);

499 i‡(
dev
->
sf
 < 11)

500 
ªt
 |
	`lg02_ªg_w
(
dev
->
•ù‹t
, dev->
is·di
, 
SX1276_REG_LR_MODEMCONFIG3
, 
SX1276_MC3_AGCAUTO
);

502 
ªt
 |
	`lg02_ªg_w
(
dev
->
•ù‹t
, dev->
is·di
, 
SX1276_REG_LR_MODEMCONFIG3
, 
SX1276_MC3_LOW_DATA_RATE_OPTIMIZE
);

505 
ªt
 |
	`lg02_ªg_w
(
dev
->
•ù‹t
, dev->
is·di
, 
SX1276_REG_LR_PACONFIG
, (
uöt8_t
)(0x80|(15&0xf)));

507 
ªt
 |
	`lg02_ªg_r
(
dev
->
•ù‹t
, dev->
is·di
, 
SX1276_REG_LR_INVERTIQ
, &
vÆ
);

509 i‡(
pkt_d©a
->
övît_pﬁ
) {

510 
ªt
 |
	`lg02_ªg_w
(
dev
->
•ù‹t
, dev->
is·di
, 
SX1276_REG_LR_INVERTIQ
, (
vÆ
 & 
INVERTIQ_RX_MASK
 & 
INVERTIQ_TX_MASK
Ë| 
INVERTIQ_RX_OFF
 | 
INVERTIQ_TX_ON
);

511 
ªt
 |
	`lg02_ªg_w
(
dev
->
•ù‹t
, dev->
is·di
, 
SX1276_REG_LR_INVERTIQ2
, 
INVERTIQ2_ON
);

513 
ªt
 |
	`lg02_ªg_w
(
dev
->
•ù‹t
, dev->
is·di
, 
SX1276_REG_LR_INVERTIQ
, (
vÆ
 & 
INVERTIQ_RX_MASK
 & 
INVERTIQ_TX_MASK
Ë| 
INVERTIQ_RX_OFF
 | 
INVERTIQ_TX_OFF
);

514 
ªt
 |
	`lg02_ªg_w
(
dev
->
•ù‹t
, dev->
is·di
, 
SX1276_REG_LR_INVERTIQ2
, 
INVERTIQ2_OFF
);

518 
ªt
 |
	`›mode
(
dev
->
•ù‹t
, dev->
is·di
, 
OPMODE_STANDBY
);

521 
ªt
 |
	`lg02_ªg_w
(
dev
->
•ù‹t
, dev->
is·di
, 
SX1276_REG_LR_DIOMAPPING1
, 
MAP_DIO0_LORA_TXDONE
|
MAP_DIO1_LORA_NOP
|
MAP_DIO2_LORA_NOP
);

523 
ªt
 |
	`lg02_ªg_w
(
dev
->
•ù‹t
, dev->
is·di
, 
SX1276_REG_LR_IRQFLAGS
, 0xFF);

525 
ªt
 |
	`lg02_ªg_w
(
dev
->
•ù‹t
, dev->
is·di
, 
SX1276_REG_LR_IRQFLAGSMASK
, ~
IRQ_LORA_TXDONE_MASK
);

528 
ªt
 |
	`lg02_ªg_w
(
dev
->
•ù‹t
, dev->
is·di
, 
SX1276_REG_LR_FIFOTXBASEADDR
, 0x00);

529 
ªt
 |
	`lg02_ªg_w
(
dev
->
•ù‹t
, dev->
is·di
, 
SX1276_REG_LR_FIFOADDRPTR
, 0x00);

531 
i
 = 0; i < 
pkt_d©a
->
size
; i++) {

532 
ªt
 |
	`lg02_ªg_w
(
dev
->
•ù‹t
, dev->
is·di
, 
SX1276_REG_LR_FIFO
, 
pkt_d©a
->
∑ylﬂd
[
i
]);

535 
ªt
 |
	`lg02_ªg_w
(
dev
->
•ù‹t
, dev->
is·di
, 
SX1276_REG_LR_PAYLOADLENGTH
, 
pkt_d©a
->
size
);

537 i‡(
pkt_d©a
->
tx_mode
 =
TIMESTAMPED
) {

538 
	`gëtimeofday
(&
cuºít_unix_time
, 
NULL
);

539 
time_us
 = 
cuºít_unix_time
.
tv_£c
 * 1000000UL + cuºít_unix_time.
tv_u£c
;

540 
time_us
 = 
pkt_d©a
->
cou¡_us
 - 1495 -Åime_us;

541 i‡(
time_us
 > 0 &&Åime_us < 30000 )

542 
	`waô_us
(
time_us
);

546 
ªt
 |
	`›mode
(
dev
->
•ù‹t
, dev->
is·di
, 
OPMODE_TX
);

549 
	`digôÆ_ªad
(
dev
->
dio
[0]) == 0);

551 
	`DEBUG_PRINTF
("\nDEBUG~ TønsmôáàSF%iBW%d o¿%.6lf.\n", 
	`lgw_sf_gëvÆ
(
pkt_d©a
->
d©¨©e
), 
	`lgw_bw_gëvÆ
’kt_d©a->
b™dwidth
)/1000, ()’kt_d©a->
‰eq_hz
)/1000000);

554 
ªt
 |
	`lg02_ªg_w
(
dev
->
•ù‹t
, dev->
is·di
, 
SX1276_REG_LR_IRQFLAGSMASK
, 0xFF);

557 
ªt
 |
	`lg02_ªg_w
(
dev
->
•ù‹t
, dev->
is·di
, 
SX1276_REG_LR_IRQFLAGS
, 0xFF);

560 
ªt
 |
	`›mode
(
dev
->
•ù‹t
, dev->
is·di
, 
OPMODE_SLEEP
);

562  
ªt
;

563 
	}
}

567 
	$lg02_sögÀ_tx
(
sx127x_dev
 *
dev
, 
uöt8_t
* 
∑ylﬂd
, 
size
) {

569 
i
, 
ªt
;

570 
uöt8_t
 
vÆ
;

572 
ªt
 = 
	`lg02_ªg_r
(
dev
->
•ù‹t
, dev->
is·di
, 
SX1276_REG_LR_OPMODE
, &
vÆ
);

574 
	`ASSERT
((
vÆ
 & 
OPMODE_LORA
) != 0);

577 
ªt
 |
	`›mode
(
dev
->
•ù‹t
, dev->
is·di
, 
OPMODE_STANDBY
);

579 
vÆ
 |
	`lg02_ªg_r
(
dev
->
•ù‹t
, dev->
is·di
, 
SX1276_REG_LR_INVERTIQ
, &val);

581 i‡(
dev
->
övîtio
) {

582 
ªt
 |
	`lg02_ªg_w
(
dev
->
•ù‹t
, dev->
is·di
, 
SX1276_REG_LR_INVERTIQ
, (
vÆ
 & 
INVERTIQ_RX_MASK
 & 
INVERTIQ_TX_MASK
Ë| 
INVERTIQ_RX_OFF
 | 
INVERTIQ_TX_ON
);

583 
ªt
 |
	`lg02_ªg_w
(
dev
->
•ù‹t
, dev->
is·di
, 
SX1276_REG_LR_INVERTIQ2
, 
INVERTIQ2_ON
);

585 
ªt
 |
	`lg02_ªg_w
(
dev
->
•ù‹t
, dev->
is·di
, 
SX1276_REG_LR_INVERTIQ
, (
vÆ
 & 
INVERTIQ_RX_MASK
 & 
INVERTIQ_TX_MASK
Ë| 
INVERTIQ_RX_OFF
 | 
INVERTIQ_TX_OFF
);

586 
ªt
 |
	`lg02_ªg_w
(
dev
->
•ù‹t
, dev->
is·di
, 
SX1276_REG_LR_INVERTIQ2
, 
INVERTIQ2_OFF
);

589 
ªt
 |
	`lg02_£tsyncw‹d
(
dev
->
•ù‹t
, dev->
is·di
, dev->
syncw‹d
);

591 
ªt
 |
	`lg02_£çowî
(
dev
->
•ù‹t
, dev->
is·di
, dev->
powî
);

594 
ªt
 |
	`lg02_ªg_w
(
dev
->
•ù‹t
, dev->
is·di
, 
SX1276_REG_LR_DIOMAPPING1
, 
MAP_DIO0_LORA_TXDONE
|
MAP_DIO1_LORA_NOP
|
MAP_DIO2_LORA_NOP
);

596 
ªt
 |
	`lg02_ªg_w
(
dev
->
•ù‹t
, dev->
is·di
, 
SX1276_REG_LR_IRQFLAGS
, 0xFF);

598 
ªt
 |
	`lg02_ªg_w
(
dev
->
•ù‹t
, dev->
is·di
, 
SX1276_REG_LR_IRQFLAGSMASK
, ~
IRQ_LORA_TXDONE_MASK
);

601 
ªt
 |
	`lg02_ªg_w
(
dev
->
•ù‹t
, dev->
is·di
, 
SX1276_REG_LR_FIFOTXBASEADDR
, 0x00);

602 
ªt
 |
	`lg02_ªg_w
(
dev
->
•ù‹t
, dev->
is·di
, 
SX1276_REG_LR_FIFOADDRPTR
, 0x00);

606 
i
 = 0; i < 
size
; i++) {

607 
ªt
 |
	`lg02_ªg_w
(
dev
->
•ù‹t
, dev->
is·di
, 
SX1276_REG_LR_FIFO
, 
∑ylﬂd
[
i
]);

610 
ªt
 |
	`lg02_ªg_w
(
dev
->
•ù‹t
, dev->
is·di
, 
SX1276_REG_LR_PAYLOADLENGTH
, 
size
);

613 
ªt
 |
	`›mode
(
dev
->
•ù‹t
, dev->
is·di
, 
OPMODE_TX
);

616 
	`digôÆ_ªad
(
dev
->
dio
[0]) == 0);

618 
	`DEBUG_PRINTF
("\nINFO~TønsmôáàSF%iBW%d o¿%.6lf.\n", 
dev
->
sf
, (dev->
bw
)/1000, ()(dev->
‰eq
)/1000000);

621 
ªt
 |
	`lg02_ªg_w
(
dev
->
•ù‹t
, dev->
is·di
, 
SX1276_REG_LR_IRQFLAGSMASK
, 0xFF);

624 
ªt
 |
	`lg02_ªg_w
(
dev
->
•ù‹t
, dev->
is·di
, 
SX1276_REG_LR_IRQFLAGS
, 0xFF);

627 
ªt
 |
	`›mode
(
dev
->
•ù‹t
, dev->
is·di
, 
OPMODE_SLEEP
);

629  
ªt
;

630 
	}
}

	@hal/lg02hal/loragw_hal_lg02.h

28 #i‚de‡
_LGW_HAL_SX127X_


29 
	#_LGW_HAL_SX127X_


	)

31 
	~<°dio.h
>

32 
	~<°rög.h
>

33 
	~<°döt.h
>

34 
	~<°dboﬁ.h
>

35 
	~"l‹agw_hÆ.h
"

37 
	#ASSERT
(
c⁄d
Ëif(!(c⁄d)Ë{
	`¥ötf
("%s:%d\n", 
__FILE__
, 
__LINE__
); 
	`exô
(1);}

	)

40 
	#REG_LNA
 0x0C

	)

41 
	#LNA_MAX_GAIN
 0x23

	)

42 
	#LNA_OFF_GAIN
 0x00

	)

43 
	#LNA_LOW_GAIN
 0x20

	)

47 
	#OPMODE_LORA
 0x80

	)

48 
	#OPMODE_MASK
 0x07

	)

49 
	#OPMODE_SLEEP
 0x00

	)

50 
	#OPMODE_STANDBY
 0x01

	)

51 
	#OPMODE_FSTX
 0x02

	)

52 
	#OPMODE_TX
 0x03

	)

53 
	#OPMODE_FSRX
 0x04

	)

54 
	#OPMODE_RX
 0x05

	)

55 
	#OPMODE_RX_SINGLE
 0x06

	)

56 
	#OPMODE_CAD
 0x07

	)

60 
	#IRQ_LORA_RXTOUT_MASK
 0x80

	)

61 
	#IRQ_LORA_RXDONE_MASK
 0x40

	)

62 
	#IRQ_LORA_CRCERR_MASK
 0x20

	)

63 
	#IRQ_LORA_HEADER_MASK
 0x10

	)

64 
	#IRQ_LORA_TXDONE_MASK
 0x08

	)

65 
	#IRQ_LORA_CDDONE_MASK
 0x04

	)

66 
	#IRQ_LORA_FHSSCH_MASK
 0x02

	)

67 
	#IRQ_LORA_CDDETD_MASK
 0x01

	)

71 
	#MAP_DIO0_LORA_RXDONE
 0x00

72 
	#MAP_DIO0_LORA_TXDONE
 0x40

73 
	#MAP_DIO1_LORA_RXTOUT
 0x00

74 
	#MAP_DIO1_LORA_NOP
 0x30

75 
	#MAP_DIO2_LORA_NOP
 0xC0

76 

	)

80 
	#INVERTIQ_RX_MASK
 0xBF

	)

81 
	#INVERTIQ_RX_OFF
 0x00

	)

82 
	#INVERTIQ_RX_ON
 0x40

	)

83 
	#INVERTIQ_TX_MASK
 0xFE

	)

84 
	#INVERTIQ_TX_OFF
 0x01

	)

85 
	#INVERTIQ_TX_ON
 0x00

	)

89 
	#INVERTIQ2_ON
 0x19

	)

90 
	#INVERTIQ2_OFF
 0x1D

	)

92 íum { 
	mRXMODE_SINGLE
, 
	mRXMODE_SCAN
, 
	mRXMODE_RSSI
 };

94 
	esf_t
 { 
	mSF7
=7, 
	mSF8
, 
	mSF9
, 
	mSF10
, 
	mSF11
, 
	mSF12
 };

97 
	m•ù©h
[32];

98 * 
	mdesc
;

99 * 
	m•ù‹t
;

100 
boﬁ
 
	mis·di
;

101 
uöt8_t
 
	mnss
;

102 
uöt8_t
 
	mr°
;

103 
uöt8_t
 
	mdio
[3];

104 
uöt32_t
 
	m‰eq
;

105 
uöt32_t
 
	mbw
;

106 
uöt8_t
 
	msf
;

107 
uöt8_t
 
	m¸
;

108 
uöt8_t
 
	mno¸c
;

109 
uöt8_t
 
	m¥Àn
;

110 
uöt8_t
 
	msyncw‹d
;

111 
uöt8_t
 
	mövîtio
;

112 
uöt8_t
 
	mpowî
;

113 } 
	tsx127x_dev
;

119 
lg02_£çowî
(*, 
boﬁ
, 
uöt8_t
);

121 
lg02_£t‰eq
(*, 
boﬁ
, );

123 
lg02_£tsf
(*, 
boﬁ
, );

125 
lg02_£tsbw
(*, 
boﬁ
, );

127 
lg02_£t¸
(*, 
boﬁ
, );

129 
lg02_£çæí
(*, 
boﬁ
, );

131 
lg02_£tsyncw‹d
(*, 
boﬁ
, );

133 
lg02_¸ccheck
(*, 
boﬁ
, 
uöt8_t
);

135 
boﬁ
 
lg02_dëe˘
(
sx127x_dev
*);

139 
lg02_£tup
(
sx127x_dev
*, 
uöt8_t
);

143 
lg02_°¨t_rx
(
sx127x_dev
*, 
uöt8_t
, uint8_t);

147 
lg02_ª˚ive
(*, 
boﬁ
, 
lgw_pkt_rx_s
*);

151 
lg02_£nd
(
sx127x_dev
*, 
lgw_pkt_tx_s
*);

155 
lg02_sögÀ_tx
(
sx127x_dev
*, 
uöt8_t
*, );

	@hal/lg02hal/loragw_sx1272_regs.h

15 #i‚de‡
_LORAGW_SX1272_REGS_H


16 
	#_LORAGW_SX1272_REGS_H


	)

23 
	#SX1272_REG_FIFO
 0x00

	)

25 
	#SX1272_REG_OPMODE
 0x01

	)

26 
	#SX1272_REG_BITRATEMSB
 0x02

	)

27 
	#SX1272_REG_BITRATELSB
 0x03

	)

28 
	#SX1272_REG_FDEVMSB
 0x04

	)

29 
	#SX1272_REG_FDEVLSB
 0x05

	)

30 
	#SX1272_REG_FRFMSB
 0x06

	)

31 
	#SX1272_REG_FRFMID
 0x07

	)

32 
	#SX1272_REG_FRFLSB
 0x08

	)

34 
	#SX1272_REG_PACONFIG
 0x09

	)

35 
	#SX1272_REG_PARAMP
 0x0A

	)

36 
	#SX1272_REG_OCP
 0x0B

	)

38 
	#SX1272_REG_LNA
 0x0C

	)

39 
	#SX1272_REG_RXCONFIG
 0x0D

	)

40 
	#SX1272_REG_RSSICONFIG
 0x0E

	)

41 
	#SX1272_REG_RSSICOLLISION
 0x0F

	)

42 
	#SX1272_REG_RSSITHRESH
 0x10

	)

43 
	#SX1272_REG_RSSIVALUE
 0x11

	)

44 
	#SX1272_REG_RXBW
 0x12

	)

45 
	#SX1272_REG_AFCBW
 0x13

	)

46 
	#SX1272_REG_OOKPEAK
 0x14

	)

47 
	#SX1272_REG_OOKFIX
 0x15

	)

48 
	#SX1272_REG_OOKAVG
 0x16

	)

49 
	#SX1272_REG_RES17
 0x17

	)

50 
	#SX1272_REG_RES18
 0x18

	)

51 
	#SX1272_REG_RES19
 0x19

	)

52 
	#SX1272_REG_AFCFEI
 0x1A

	)

53 
	#SX1272_REG_AFCMSB
 0x1B

	)

54 
	#SX1272_REG_AFCLSB
 0x1C

	)

55 
	#SX1272_REG_FEIMSB
 0x1D

	)

56 
	#SX1272_REG_FEILSB
 0x1E

	)

57 
	#SX1272_REG_PREAMBLEDETECT
 0x1F

	)

58 
	#SX1272_REG_RXTIMEOUT1
 0x20

	)

59 
	#SX1272_REG_RXTIMEOUT2
 0x21

	)

60 
	#SX1272_REG_RXTIMEOUT3
 0x22

	)

61 
	#SX1272_REG_RXDELAY
 0x23

	)

63 
	#SX1272_REG_OSC
 0x24

	)

65 
	#SX1272_REG_PREAMBLEMSB
 0x25

	)

66 
	#SX1272_REG_PREAMBLELSB
 0x26

	)

67 
	#SX1272_REG_SYNCCONFIG
 0x27

	)

68 
	#SX1272_REG_SYNCVALUE1
 0x28

	)

69 
	#SX1272_REG_SYNCVALUE2
 0x29

	)

70 
	#SX1272_REG_SYNCVALUE3
 0x2A

	)

71 
	#SX1272_REG_SYNCVALUE4
 0x2B

	)

72 
	#SX1272_REG_SYNCVALUE5
 0x2C

	)

73 
	#SX1272_REG_SYNCVALUE6
 0x2D

	)

74 
	#SX1272_REG_SYNCVALUE7
 0x2E

	)

75 
	#SX1272_REG_SYNCVALUE8
 0x2F

	)

76 
	#SX1272_REG_PACKETCONFIG1
 0x30

	)

77 
	#SX1272_REG_PACKETCONFIG2
 0x31

	)

78 
	#SX1272_REG_PAYLOADLENGTH
 0x32

	)

79 
	#SX1272_REG_NODEADRS
 0x33

	)

80 
	#SX1272_REG_BROADCASTADRS
 0x34

	)

81 
	#SX1272_REG_FIFOTHRESH
 0x35

	)

83 
	#SX1272_REG_SEQCONFIG1
 0x36

	)

84 
	#SX1272_REG_SEQCONFIG2
 0x37

	)

85 
	#SX1272_REG_TIMERRESOL
 0x38

	)

86 
	#SX1272_REG_TIMER1COEF
 0x39

	)

87 
	#SX1272_REG_TIMER2COEF
 0x3A

	)

89 
	#SX1272_REG_IMAGECAL
 0x3B

	)

90 
	#SX1272_REG_TEMP
 0x3C

	)

91 
	#SX1272_REG_LOWBAT
 0x3D

	)

93 
	#SX1272_REG_IRQFLAGS1
 0x3E

	)

94 
	#SX1272_REG_IRQFLAGS2
 0x3F

	)

96 
	#SX1272_REG_DIOMAPPING1
 0x40

	)

97 
	#SX1272_REG_DIOMAPPING2
 0x41

	)

99 
	#SX1272_REG_VERSION
 0x42

	)

101 
	#SX1272_REG_AGCREF
 0x43

	)

102 
	#SX1272_REG_AGCTHRESH1
 0x44

	)

103 
	#SX1272_REG_AGCTHRESH2
 0x45

	)

104 
	#SX1272_REG_AGCTHRESH3
 0x46

	)

105 
	#SX1272_REG_PLLHOP
 0x4B

	)

106 
	#SX1272_REG_TCXO
 0x58

	)

107 
	#SX1272_REG_PADAC
 0x5A

	)

108 
	#SX1272_REG_PLL
 0x5C

	)

109 
	#SX1272_REG_PLLLOWPN
 0x5E

	)

110 
	#SX1272_REG_FORMERTEMP
 0x6C

	)

111 
	#SX1272_REG_BITRATEFRAC
 0x70

	)

118 
	#SX1272_REG_LR_FIFO
 0x00

	)

120 
	#SX1272_REG_LR_OPMODE
 0x01

	)

121 
	#SX1272_REG_LR_FRFMSB
 0x06

	)

122 
	#SX1272_REG_LR_FRFMID
 0x07

	)

123 
	#SX1272_REG_LR_FRFLSB
 0x08

	)

125 
	#SX1272_REG_LR_PACONFIG
 0x09

	)

126 
	#SX1272_REG_LR_PARAMP
 0x0A

	)

127 
	#SX1272_REG_LR_OCP
 0x0B

	)

129 
	#SX1272_REG_LR_LNA
 0x0C

	)

131 
	#SX1272_REG_LR_FIFOADDRPTR
 0x0D

	)

132 
	#SX1272_REG_LR_FIFOTXBASEADDR
 0x0E

	)

133 
	#SX1272_REG_LR_FIFORXBASEADDR
 0x0F

	)

134 
	#SX1272_REG_LR_FIFORXCURRENTADDR
 0x10

	)

135 
	#SX1272_REG_LR_IRQFLAGSMASK
 0x11

	)

136 
	#SX1272_REG_LR_IRQFLAGS
 0x12

	)

137 
	#SX1272_REG_LR_RXNBBYTES
 0x13

	)

138 
	#SX1272_REG_LR_RXHEADERCNTVALUEMSB
 0x14

	)

139 
	#SX1272_REG_LR_RXHEADERCNTVALUELSB
 0x15

	)

140 
	#SX1272_REG_LR_RXPACKETCNTVALUEMSB
 0x16

	)

141 
	#SX1272_REG_LR_RXPACKETCNTVALUELSB
 0x17

	)

142 
	#SX1272_REG_LR_MODEMSTAT
 0x18

	)

143 
	#SX1272_REG_LR_PKTSNRVALUE
 0x19

	)

144 
	#SX1272_REG_LR_PKTRSSIVALUE
 0x1A

	)

145 
	#SX1272_REG_LR_RSSIVALUE
 0x1B

	)

146 
	#SX1272_REG_LR_HOPCHANNEL
 0x1C

	)

147 
	#SX1272_REG_LR_MODEMCONFIG1
 0x1D

	)

148 
	#SX1272_REG_LR_MODEMCONFIG2
 0x1E

	)

149 
	#SX1272_REG_LR_SYMBTIMEOUTLSB
 0x1F

	)

150 
	#SX1272_REG_LR_PREAMBLEMSB
 0x20

	)

151 
	#SX1272_REG_LR_PREAMBLELSB
 0x21

	)

152 
	#SX1272_REG_LR_PAYLOADLENGTH
 0x22

	)

153 
	#SX1272_REG_LR_PAYLOADMAXLENGTH
 0x23

	)

154 
	#SX1272_REG_LR_HOPPERIOD
 0x24

	)

155 
	#SX1272_REG_LR_FIFORXBYTEADDR
 0x25

	)

156 
	#SX1272_REG_LR_FEIMSB
 0x28

	)

157 
	#SX1272_REG_LR_FEIMID
 0x29

	)

158 
	#SX1272_REG_LR_FEILSB
 0x2A

	)

159 
	#SX1272_REG_LR_RSSIWIDEBAND
 0x2C

	)

160 
	#SX1272_REG_LR_DETECTOPTIMIZE
 0x31

	)

161 
	#SX1272_REG_LR_INVERTIQ
 0x33

	)

162 
	#SX1272_REG_LR_DETECTIONTHRESHOLD
 0x37

	)

163 
	#SX1272_REG_LR_SYNCWORD
 0x39

	)

164 
	#SX1272_REG_LR_INVERTIQ2
 0x3B

	)

168 
	#SX1272_REG_LR_DIOMAPPING1
 0x40

	)

169 
	#SX1272_REG_LR_DIOMAPPING2
 0x41

	)

171 
	#SX1272_REG_LR_VERSION
 0x42

	)

173 
	#SX1272_REG_LR_AGCREF
 0x43

	)

174 
	#SX1272_REG_LR_AGCTHRESH1
 0x44

	)

175 
	#SX1272_REG_LR_AGCTHRESH2
 0x45

	)

176 
	#SX1272_REG_LR_AGCTHRESH3
 0x46

	)

177 
	#SX1272_REG_LR_PLLHOP
 0x4B

	)

178 
	#SX1272_REG_LR_TCXO
 0x58

	)

179 
	#SX1272_REG_LR_PADAC
 0x5A

	)

180 
	#SX1272_REG_LR_PLL
 0x5C

	)

181 
	#SX1272_REG_LR_PLLLOWPN
 0x5E

	)

182 
	#SX1272_REG_LR_FORMERTEMP
 0x6C

	)

	@hal/lg02hal/loragw_sx1276_regs.h

15 #i‚de‡
_LORAGW_SX1276_REGS_H


16 
	#_LORAGW_SX1276_REGS_H


	)

23 
	#SX1276_REG_FIFO
 0x00

	)

25 
	#SX1276_REG_OPMODE
 0x01

	)

26 
	#SX1276_REG_BITRATEMSB
 0x02

	)

27 
	#SX1276_REG_BITRATELSB
 0x03

	)

28 
	#SX1276_REG_FDEVMSB
 0x04

	)

29 
	#SX1276_REG_FDEVLSB
 0x05

	)

30 
	#SX1276_REG_FRFMSB
 0x06

	)

31 
	#SX1276_REG_FRFMID
 0x07

	)

32 
	#SX1276_REG_FRFLSB
 0x08

	)

34 
	#SX1276_REG_PACONFIG
 0x09

	)

35 
	#SX1276_REG_PARAMP
 0x0A

	)

36 
	#SX1276_REG_OCP
 0x0B

	)

38 
	#SX1276_REG_LNA
 0x0C

	)

39 
	#SX1276_REG_RXCONFIG
 0x0D

	)

40 
	#SX1276_REG_RSSICONFIG
 0x0E

	)

41 
	#SX1276_REG_RSSICOLLISION
 0x0F

	)

42 
	#SX1276_REG_RSSITHRESH
 0x10

	)

43 
	#SX1276_REG_RSSIVALUE
 0x11

	)

44 
	#SX1276_REG_RXBW
 0x12

	)

45 
	#SX1276_REG_AFCBW
 0x13

	)

46 
	#SX1276_REG_OOKPEAK
 0x14

	)

47 
	#SX1276_REG_OOKFIX
 0x15

	)

48 
	#SX1276_REG_OOKAVG
 0x16

	)

49 
	#SX1276_REG_RES17
 0x17

	)

50 
	#SX1276_REG_RES18
 0x18

	)

51 
	#SX1276_REG_RES19
 0x19

	)

52 
	#SX1276_REG_AFCFEI
 0x1A

	)

53 
	#SX1276_REG_AFCMSB
 0x1B

	)

54 
	#SX1276_REG_AFCLSB
 0x1C

	)

55 
	#SX1276_REG_FEIMSB
 0x1D

	)

56 
	#SX1276_REG_FEILSB
 0x1E

	)

57 
	#SX1276_REG_PREAMBLEDETECT
 0x1F

	)

58 
	#SX1276_REG_RXTIMEOUT1
 0x20

	)

59 
	#SX1276_REG_RXTIMEOUT2
 0x21

	)

60 
	#SX1276_REG_RXTIMEOUT3
 0x22

	)

61 
	#SX1276_REG_RXDELAY
 0x23

	)

63 
	#SX1276_REG_OSC
 0x24

	)

65 
	#SX1276_REG_PREAMBLEMSB
 0x25

	)

66 
	#SX1276_REG_PREAMBLELSB
 0x26

	)

67 
	#SX1276_REG_SYNCCONFIG
 0x27

	)

68 
	#SX1276_REG_SYNCVALUE1
 0x28

	)

69 
	#SX1276_REG_SYNCVALUE2
 0x29

	)

70 
	#SX1276_REG_SYNCVALUE3
 0x2A

	)

71 
	#SX1276_REG_SYNCVALUE4
 0x2B

	)

72 
	#SX1276_REG_SYNCVALUE5
 0x2C

	)

73 
	#SX1276_REG_SYNCVALUE6
 0x2D

	)

74 
	#SX1276_REG_SYNCVALUE7
 0x2E

	)

75 
	#SX1276_REG_SYNCVALUE8
 0x2F

	)

76 
	#SX1276_REG_PACKETCONFIG1
 0x30

	)

77 
	#SX1276_REG_PACKETCONFIG2
 0x31

	)

78 
	#SX1276_REG_PAYLOADLENGTH
 0x32

	)

79 
	#SX1276_REG_NODEADRS
 0x33

	)

80 
	#SX1276_REG_BROADCASTADRS
 0x34

	)

81 
	#SX1276_REG_FIFOTHRESH
 0x35

	)

83 
	#SX1276_REG_SEQCONFIG1
 0x36

	)

84 
	#SX1276_REG_SEQCONFIG2
 0x37

	)

85 
	#SX1276_REG_TIMERRESOL
 0x38

	)

86 
	#SX1276_REG_TIMER1COEF
 0x39

	)

87 
	#SX1276_REG_TIMER2COEF
 0x3A

	)

89 
	#SX1276_REG_IMAGECAL
 0x3B

	)

90 
	#SX1276_REG_TEMP
 0x3C

	)

91 
	#SX1276_REG_LOWBAT
 0x3D

	)

93 
	#SX1276_REG_IRQFLAGS1
 0x3E

	)

94 
	#SX1276_REG_IRQFLAGS2
 0x3F

	)

96 
	#SX1276_REG_DIOMAPPING1
 0x40

	)

97 
	#SX1276_REG_DIOMAPPING2
 0x41

	)

99 
	#SX1276_REG_VERSION
 0x42

	)

101 
	#SX1276_REG_PLLHOP
 0x44

	)

102 
	#SX1276_REG_TCXO
 0x4B

	)

103 
	#SX1276_REG_PADAC
 0x4D

	)

104 
	#SX1276_REG_FORMERTEMP
 0x5B

	)

105 
	#SX1276_REG_BITRATEFRAC
 0x5D

	)

106 
	#SX1276_REG_AGCREF
 0x61

	)

107 
	#SX1276_REG_AGCTHRESH1
 0x62

	)

108 
	#SX1276_REG_AGCTHRESH2
 0x63

	)

109 
	#SX1276_REG_AGCTHRESH3
 0x64

	)

110 
	#SX1276_REG_PLL
 0x70

	)

117 
	#SX1276_REG_LR_FIFO
 0x00

	)

119 
	#SX1276_REG_LR_OPMODE
 0x01

	)

120 
	#SX1276_REG_LR_FRFMSB
 0x06

	)

121 
	#SX1276_REG_LR_FRFMID
 0x07

	)

122 
	#SX1276_REG_LR_FRFLSB
 0x08

	)

124 
	#SX1276_REG_LR_PACONFIG
 0x09

	)

125 
	#SX1276_REG_LR_PARAMP
 0x0A

	)

126 
	#SX1276_REG_LR_OCP
 0x0B

	)

128 
	#SX1276_REG_LR_LNA
 0x0C

	)

130 
	#SX1276_REG_LR_FIFOADDRPTR
 0x0D

	)

131 
	#SX1276_REG_LR_FIFOTXBASEADDR
 0x0E

	)

132 
	#SX1276_REG_LR_FIFORXBASEADDR
 0x0F

	)

133 
	#SX1276_REG_LR_FIFORXCURRENTADDR
 0x10

	)

134 
	#SX1276_REG_LR_IRQFLAGSMASK
 0x11

	)

135 
	#SX1276_REG_LR_IRQFLAGS
 0x12

	)

136 
	#SX1276_REG_LR_RXNBBYTES
 0x13

	)

137 
	#SX1276_REG_LR_RXHEADERCNTVALUEMSB
 0x14

	)

138 
	#SX1276_REG_LR_RXHEADERCNTVALUELSB
 0x15

	)

139 
	#SX1276_REG_LR_RXPACKETCNTVALUEMSB
 0x16

	)

140 
	#SX1276_REG_LR_RXPACKETCNTVALUELSB
 0x17

	)

141 
	#SX1276_REG_LR_MODEMSTAT
 0x18

	)

142 
	#SX1276_REG_LR_PKTSNRVALUE
 0x19

	)

143 
	#SX1276_REG_LR_PKTRSSIVALUE
 0x1A

	)

144 
	#SX1276_REG_LR_RSSIVALUE
 0x1B

	)

145 
	#SX1276_REG_LR_HOPCHANNEL
 0x1C

	)

146 
	#SX1276_REG_LR_MODEMCONFIG1
 0x1D

	)

147 
	#SX1276_REG_LR_MODEMCONFIG2
 0x1E

	)

148 
	#SX1276_REG_LR_SYMBTIMEOUTLSB
 0x1F

	)

149 
	#SX1276_REG_LR_PREAMBLEMSB
 0x20

	)

150 
	#SX1276_REG_LR_PREAMBLELSB
 0x21

	)

151 
	#SX1276_REG_LR_PAYLOADLENGTH
 0x22

	)

152 
	#SX1276_REG_LR_PAYLOADMAXLENGTH
 0x23

	)

153 
	#SX1276_REG_LR_HOPPERIOD
 0x24

	)

154 
	#SX1276_REG_LR_FIFORXBYTEADDR
 0x25

	)

155 
	#SX1276_REG_LR_MODEMCONFIG3
 0x26

	)

156 
	#SX1276_REG_LR_FEIMSB
 0x28

	)

157 
	#SX1276_REG_LR_FEIMID
 0x29

	)

158 
	#SX1276_REG_LR_FEILSB
 0x2A

	)

159 
	#SX1276_REG_LR_RSSIWIDEBAND
 0x2C

	)

160 
	#SX1276_REG_LR_TEST2F
 0x2F

	)

161 
	#SX1276_REG_LR_TEST30
 0x30

	)

162 
	#SX1276_REG_LR_DETECTOPTIMIZE
 0x31

	)

163 
	#SX1276_REG_LR_INVERTIQ
 0x33

	)

164 
	#SX1276_REG_LR_TEST36
 0x36

	)

165 
	#SX1276_REG_LR_DETECTIONTHRESHOLD
 0x37

	)

166 
	#SX1276_REG_LR_SYNCWORD
 0x39

	)

167 
	#SX1276_REG_LR_TEST3A
 0x3A

	)

168 
	#SX1276_REG_LR_INVERTIQ2
 0x3B

	)

172 
	#SX1276_REG_LR_DIOMAPPING1
 0x40

	)

173 
	#SX1276_REG_LR_DIOMAPPING2
 0x41

	)

175 
	#SX1276_REG_LR_VERSION
 0x42

	)

177 
	#SX1276_REG_LR_PLLHOP
 0x44

	)

178 
	#SX1276_REG_LR_TCXO
 0x4B

	)

179 
	#SX1276_REG_LR_PADAC
 0x4D

	)

180 
	#SX1276_REG_LR_FORMERTEMP
 0x5B

	)

181 
	#SX1276_REG_LR_BITRATEFRAC
 0x5D

	)

182 
	#SX1276_REG_LR_AGCREF
 0x61

	)

183 
	#SX1276_REG_LR_AGCTHRESH1
 0x62

	)

184 
	#SX1276_REG_LR_AGCTHRESH2
 0x63

	)

185 
	#SX1276_REG_LR_AGCTHRESH3
 0x64

	)

186 
	#SX1276_REG_LR_PLL
 0x70

	)

189 
	#SX1276_MC2_RX_PAYLOAD_CRCON
 0x04

	)

192 
	#SX1276_MC3_LOW_DATA_RATE_OPTIMIZE
 0x08

	)

193 
	#SX1276_MC3_AGCAUTO
 0x04

	)

	@hal/lg02hal/loragw_sx127x_radio.c

30 
	~<°dio.h
>

32 
	~"gpio.h
"

33 
	~"l‹agw_hÆ.h
"

34 
	~"l‹agw_•i.h
"

35 
	~"l‹agw_aux.h
"

37 
	~"l‹agw_sx1272_ªgs.h
"

38 
	~"l‹agw_sx1276_ªgs.h
"

39 
	~"l‹agw_sx127x_ødio.h
"

44 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

45 #i‡
DEBUG_REG
 == 1

46 
	#DEBUG_MSG
(
°r
Ë
	`Ârötf
(
°dîr
, så)

	)

47 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...Ë
	`Ârötf
(
°dîr
,"%s:%d: "fmt, 
__FUNCTION__
, 
__LINE__
,árgs)

	)

48 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){
	`Ârötf
(
°dîr
,"%s:%d: ERROR~ NULL POINTER AS ARGUMENT\n", 
__FUNCTION__
, 
__LINE__
); 
SX127X_REG_ERROR
;}

	)

50 
	#DEBUG_MSG
(
°r
)

	)

51 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...)

	)

52 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){ 
SX127X_REG_ERROR
;}

	)

62 
	slgw_sx127x_FSK_b™dwidth_s
 {

63 
uöt32_t
 
	mRxBwKHz
;

64 
uöt8_t
 
	mRxBwM™t
;

65 
uöt8_t
 
	mRxBwExp
;

73 
	slgw_ødio_ty≥_vîsi⁄_s
 {

74 
lgw_ødio_ty≥_e
 
	mty≥
;

75 
uöt8_t
 
	mªg_vîsi⁄
;

80 c⁄° 
lgw_sx127x_FSK_b™dwidth_s
 
	gsx127x_FskB™dwidths
[] =

107 *
lgw_•i_èrgë
;

108 *
lgw_lbt_èrgë
;

112 
£tup_sx1272_FSK
(
boﬁ
 
is·di
, 
uöt32_t
 
‰equícy
, 
lgw_sx127x_rxbw_e
 
rxbw_khz
, 
öt8_t
 
rssi_off£t
);

113 
£tup_sx1276_FSK
(
boﬁ
 
is·di
, 
uöt32_t
 
‰equícy
, 
lgw_sx127x_rxbw_e
 
rxbw_khz
, 
öt8_t
 
rssi_off£t
);

117 
	$£tup_sx1272_FSK
(
boﬁ
 
is·di
, 
uöt32_t
 
‰equícy
, 
lgw_sx127x_rxbw_e
 
rxbw_khz
, 
öt8_t
 
rssi_off£t
) {

118 
uöt64_t
 
‰eq_ªg
;

119 
uöt8_t
 
Moduœti⁄Sh≠ög
 = 0;

120 
uöt8_t
 
PŒH›
 = 1;

121 
uöt8_t
 
L«Gaö
 = 1;

122 
uöt8_t
 
L«Boo°
 = 3;

123 
uöt8_t
 
AdcBwAuto
 = 0;

124 
uöt8_t
 
AdcBw
 = 7;

125 
uöt8_t
 
AdcLowPwr
 = 0;

126 
uöt8_t
 
AdcTrim
 = 6;

127 
uöt8_t
 
AdcTe°
 = 0;

128 
uöt8_t
 
RxBwExp
 = 
sx127x_FskB™dwidths
[
rxbw_khz
].RxBwExp;

129 
uöt8_t
 
RxBwM™t
 = 
sx127x_FskB™dwidths
[
rxbw_khz
].RxBwMant;

130 
uöt8_t
 
RssiSmoŸhög
 = 5;

131 
uöt8_t
 
RssiOff£tReg
;

132 
uöt8_t
 
ªg_vÆ
;

133 
x
;

136 
x
 = 
	`lgw_sx127x_ªg_w
(
is·di
, 
SX1272_REG_OPMODE
, 0);

137 
	`waô_ms
(100);

138 
x
 |
	`lgw_sx127x_ªg_w
(
is·di
, 
SX1272_REG_OPMODE
, 0 | (
Moduœti⁄Sh≠ög
 << 3));

139 
	`waô_ms
(100);

140 
x
 |
	`lgw_sx127x_ªg_w
(
is·di
, 
SX1272_REG_OPMODE
, 1 | (
Moduœti⁄Sh≠ög
 << 3));

141 
	`waô_ms
(100);

144 
x
 |
	`lgw_sx127x_ªg_w
(
is·di
, 
SX1272_REG_PLLHOP
, 
PŒH›
 << 7);

145 
‰eq_ªg
 = ((
uöt64_t
)
‰equícy
 << 19) / (uint64_t)32000000;

146 
x
 |
	`lgw_sx127x_ªg_w
(
is·di
, 
SX1272_REG_FRFMSB
, (
‰eq_ªg
 >> 16) & 0xFF);

147 
x
 |
	`lgw_sx127x_ªg_w
(
is·di
, 
SX1272_REG_FRFMID
, (
‰eq_ªg
 >> 8) & 0xFF);

148 
x
 |
	`lgw_sx127x_ªg_w
(
is·di
, 
SX1272_REG_FRFLSB
, (
‰eq_ªg
 >> 0) & 0xFF);

151 
x
 |
	`lgw_sx127x_ªg_w
(
is·di
, 
SX1272_REG_LNA
, 
L«Boo°
 | (
L«Gaö
 << 5));

152 
x
 |
	`lgw_sx127x_ªg_w
(
is·di
, 0x68, 
AdcBw
 | (
AdcBwAuto
 << 3));

153 
x
 |
	`lgw_sx127x_ªg_w
(
is·di
, 0x69, 
AdcTe°
 | (
AdcTrim
 << 4Ë| (
AdcLowPwr
 << 7));

156 
x
 |
	`lgw_sx127x_ªg_w
(
is·di
, 
SX1272_REG_BITRATEMSB
, 125);

157 
x
 |
	`lgw_sx127x_ªg_w
(
is·di
, 
SX1272_REG_BITRATELSB
, 0);

158 
x
 |
	`lgw_sx127x_ªg_w
(
is·di
, 
SX1272_REG_FDEVMSB
, 2);

159 
x
 |
	`lgw_sx127x_ªg_w
(
is·di
, 
SX1272_REG_FDEVLSB
, 225);

162 
x
 |
	`lgw_sx127x_ªg_w
(
is·di
, 
SX1272_REG_RXCONFIG
, 0);

163 
RssiOff£tReg
 = (
rssi_off£t
 >0Ë? (
uöt8_t
)rssi_offset : (uint8_t)(~(-rssi_offset)+1);

164 
x
 |
	`lgw_sx127x_ªg_w
(
is·di
, 
SX1272_REG_RSSICONFIG
, 
RssiSmoŸhög
 | (
RssiOff£tReg
 << 3));

165 
x
 |
	`lgw_sx127x_ªg_w
(
is·di
, 
SX1272_REG_RXBW
, 
RxBwExp
 | (
RxBwM™t
 << 3));

166 
x
 |
	`lgw_sx127x_ªg_w
(
is·di
, 
SX1272_REG_RXDELAY
, 2);

167 
x
 |
	`lgw_sx127x_ªg_w
(
is·di
, 
SX1272_REG_PLL
, 0x10);

168 
x
 |
	`lgw_sx127x_ªg_w
(
is·di
, 0x47, 1);

170 i‡(
x
 !
SX127X_REG_SUCCESS
) {

171 
	`DEBUG_MSG
("ERROR~ FailedÅo configure SX1272\n");

172  
x
;

176 
x
 = 
	`lgw_sx127x_ªg_w
(
is·di
, 
SX1272_REG_OPMODE
, 5 | (
Moduœti⁄Sh≠ög
 << 3));

177 
	`waô_ms
(500);

178 
x
 |
	`lgw_sx127x_ªg_r
(
is·di
, 
SX1272_REG_IRQFLAGS1
, &
ªg_vÆ
);

180 i‡((
	`TAKE_N_BITS_FROM
(
ªg_vÆ
, 6, 1Ë=0Ë|| (TAKE_N_BITS_FROM‘eg_vÆ, 7, 1Ë=0Ë|| (
x
 !
SX127X_REG_SUCCESS
)) {

181 
	`DEBUG_MSG
("ERROR~ SX1272 failedÅoÉnter RX continuous mode\n");

182  
SX127X_REG_ERROR
;

184 
	`waô_ms
(500);

186 
	`DEBUG_PRINTF
("INFO: Suc˚ssfuŒy c⁄figuªd SX1272 f‹ FSK moduœti⁄ (rxbw=%d)\n", 
rxbw_khz
);

188  
SX127X_REG_SUCCESS
;

189 
	}
}

193 
	$£tup_sx1276_FSK
(
boﬁ
 
is·di
, 
uöt32_t
 
‰equícy
, 
lgw_sx127x_rxbw_e
 
rxbw_khz
, 
öt8_t
 
rssi_off£t
) {

194 
uöt32_t
 
‰eq_ªg
;

195 
uöt8_t
 
Moduœti⁄Sh≠ög
 = 0;

196 
uöt8_t
 
PŒH›
 = 1;

197 
uöt8_t
 
L«Gaö
 = 1;

198 
uöt8_t
 
L«Boo°
 = 3;

199 
uöt8_t
 
AdcBwAuto
 = 0;

200 
uöt8_t
 
AdcBw
 = 7;

201 
uöt8_t
 
AdcLowPwr
 = 0;

202 
uöt8_t
 
AdcTrim
 = 6;

203 
uöt8_t
 
AdcTe°
 = 0;

204 
uöt8_t
 
RxBwExp
 = 
sx127x_FskB™dwidths
[
rxbw_khz
].RxBwExp;

205 
uöt8_t
 
RxBwM™t
 = 
sx127x_FskB™dwidths
[
rxbw_khz
].RxBwMant;

206 
uöt8_t
 
RssiSmoŸhög
 = 5;

207 
uöt8_t
 
RssiOff£tReg
;

208 
uöt8_t
 
ªg_vÆ
;

209 
x
;

212 
x
 = 
	`lgw_sx127x_ªg_w
(
is·di
, 
SX1276_REG_OPMODE
, 0);

213 
	`waô_ms
(100);

214 
x
 |
	`lgw_sx127x_ªg_w
(
is·di
, 
SX1276_REG_OPMODE
, 0 | (
Moduœti⁄Sh≠ög
 << 3));

215 
	`waô_ms
(100);

216 
x
 |
	`lgw_sx127x_ªg_w
(
is·di
, 
SX1276_REG_OPMODE
, 1 | (
Moduœti⁄Sh≠ög
 << 3));

217 
	`waô_ms
(100);

220 
x
 |
	`lgw_sx127x_ªg_w
(
is·di
, 
SX1276_REG_PLLHOP
, 
PŒH›
 << 7);

221 
‰eq_ªg
 = ((
uöt64_t
)
‰equícy
 << 19) / (uint64_t)32000000;

222 
x
 |
	`lgw_sx127x_ªg_w
(
is·di
, 
SX1276_REG_FRFMSB
, (
‰eq_ªg
 >> 16) & 0xFF);

223 
x
 |
	`lgw_sx127x_ªg_w
(
is·di
, 
SX1276_REG_FRFMID
, (
‰eq_ªg
 >> 8) & 0xFF);

224 
x
 |
	`lgw_sx127x_ªg_w
(
is·di
, 
SX1276_REG_FRFLSB
, (
‰eq_ªg
 >> 0) & 0xFF);

227 
x
 |
	`lgw_sx127x_ªg_w
(
is·di
, 
SX1276_REG_LNA
, 
L«Boo°
 | (
L«Gaö
 << 5));

228 
x
 |
	`lgw_sx127x_ªg_w
(
is·di
, 0x57, 
AdcBw
 | (
AdcBwAuto
 << 3));

229 
x
 |
	`lgw_sx127x_ªg_w
(
is·di
, 0x58, 
AdcTe°
 | (
AdcTrim
 << 4Ë| (
AdcLowPwr
 << 7));

232 
x
 |
	`lgw_sx127x_ªg_w
(
is·di
, 
SX1276_REG_BITRATEMSB
, 125);

233 
x
 |
	`lgw_sx127x_ªg_w
(
is·di
, 
SX1276_REG_BITRATELSB
, 0);

234 
x
 |
	`lgw_sx127x_ªg_w
(
is·di
, 
SX1276_REG_FDEVMSB
, 2);

235 
x
 |
	`lgw_sx127x_ªg_w
(
is·di
, 
SX1276_REG_FDEVLSB
, 225);

238 
x
 |
	`lgw_sx127x_ªg_w
(
is·di
, 
SX1276_REG_RXCONFIG
, 0);

239 
RssiOff£tReg
 = (
rssi_off£t
 >0Ë? (
uöt8_t
)rssi_offset : (uint8_t)(~(-rssi_offset)+1);

240 
x
 |
	`lgw_sx127x_ªg_w
(
is·di
, 
SX1276_REG_RSSICONFIG
, 
RssiSmoŸhög
 | (
RssiOff£tReg
 << 3));

241 
x
 |
	`lgw_sx127x_ªg_w
(
is·di
, 
SX1276_REG_RXBW
, 
RxBwExp
 | (
RxBwM™t
 << 3));

242 
x
 |
	`lgw_sx127x_ªg_w
(
is·di
, 
SX1276_REG_RXDELAY
, 2);

243 
x
 |
	`lgw_sx127x_ªg_w
(
is·di
, 
SX1276_REG_PLL
, 0x10);

244 
x
 |
	`lgw_sx127x_ªg_w
(
is·di
, 0x43, 1);

247 
x
 |
	`lgw_sx127x_ªg_w
(
is·di
, 
SX1276_REG_DIOMAPPING1
, (1 << 6) & 0xFF);

248 
x
 |
	`lgw_sx127x_ªg_w
(
is·di
, 
SX1276_REG_DIOMAPPING2
, 0);

251 
x
 |
	`lgw_sx127x_ªg_w
(
is·di
, 
SX1276_REG_RSSITHRESH
, 160);

253 i‡(
x
 !
SX127X_REG_SUCCESS
) {

254 
	`DEBUG_MSG
("ERROR~ FailedÅo configure SX1276\n");

255  
x
;

259 
x
 = 
	`lgw_sx127x_ªg_w
(
is·di
, 
SX1276_REG_OPMODE
, 5 | (
Moduœti⁄Sh≠ög
 << 3));

260 
	`waô_ms
(500);

261 
x
 |
	`lgw_sx127x_ªg_r
(
is·di
, 
SX1276_REG_IRQFLAGS1
, &
ªg_vÆ
);

263 i‡((
	`TAKE_N_BITS_FROM
(
ªg_vÆ
, 6, 1Ë=0Ë|| (TAKE_N_BITS_FROM‘eg_vÆ, 7, 1Ë=0Ë|| (
x
 !
SX127X_REG_SUCCESS
)) {

264 
	`DEBUG_MSG
("ERROR~ SX1276 failedÅoÉnter RX continuous mode\n");

265  
SX127X_REG_ERROR
;

267 
	`waô_ms
(500);

269 
	`DEBUG_PRINTF
("INFO: Suc˚ssfuŒy c⁄figuªd SX1276 f‹ FSK moduœti⁄ (rxbw=%d)\n", 
rxbw_khz
);

271  
SX127X_REG_SUCCESS
;

272 
	}
}

276 
	$ª£t_sx127x
(
boﬁ
 
is·di
, 
övît
) {

277 i‡(
is·di
) {

278  
	`·di_sx127x_ª£t
(
lgw_lbt_èrgë
, 
övît
);

280 i‡(
övît
 == 0) {

281 
	`digôÆ_wrôe
(
SX127X_RESET_PIN
, 0);

282 
	`waô_ms
(10);

283 
	`digôÆ_wrôe
(
SX127X_RESET_PIN
, 1);

284 
	`waô_ms
(10);

286 
	`digôÆ_wrôe
(
SX127X_RESET_PIN
, 1);

287 
	`waô_ms
(10);

288 
	`digôÆ_wrôe
(
SX127X_RESET_PIN
, 0);

289 
	`waô_ms
(10);

292  
SX127X_REG_SUCCESS
;

293 
	}
}

297 
	$lgw_sx127x_ªg_w
(
boﬁ
 
is·di
, 
uöt8_t
 
addªss
, uöt8_à
ªg_vÆue
) {

298 i‡(
is·di
)

299  
	`lgw_·_•i_w
(
lgw_lbt_èrgë
, 
LGW_SPI_MUX_TARGET_SX127X
, 
addªss
, 
ªg_vÆue
);

301  
	`lgw_•i_w
(
lgw_lbt_èrgë
, 
LGW_SPI_MUX_TARGET_SX127X
, 
addªss
, 
ªg_vÆue
);

302 
	}
}

306 
	$lg02_ªg_w
(*
èrgë
, 
boﬁ
 
is·di
, 
uöt8_t
 
addªss
, uöt8_à
ªg_vÆue
) {

307 i‡(
is·di
)

308  
	`lgw_·_•i_w
(
èrgë
, 
LGW_SPI_MUX_TARGET_SX127X
, 
addªss
, 
ªg_vÆue
);

310  
	`lgw_•i_w
(
èrgë
, 
LGW_SPI_MUX_TARGET_SX127X
, 
addªss
, 
ªg_vÆue
);

311 
	}
}

315 
	$lgw_sx127x_ªg_r
(
boﬁ
 
is·di
, 
uöt8_t
 
addªss
, uöt8_à*
ªg_vÆue
) {

316 i‡(
is·di
)

317  
	`lgw_·_•i_r
(
lgw_lbt_èrgë
, 
LGW_SPI_MUX_TARGET_SX127X
, 
addªss
, 
ªg_vÆue
);

319  
	`lgw_•i_r
(
lgw_lbt_èrgë
, 
LGW_SPI_MUX_TARGET_SX127X
, 
addªss
, 
ªg_vÆue
);

320 
	}
}

324 
	$lg02_ªg_r
(*
èrgë
, 
boﬁ
 
is·di
, 
uöt8_t
 
addªss
, uöt8_à*
ªg_vÆue
) {

325 i‡(
is·di
)

326  
	`lgw_·_•i_r
(
èrgë
, 
LGW_SPI_MUX_TARGET_SX127X
, 
addªss
, 
ªg_vÆue
);

328  
	`lgw_•i_r
(
èrgë
, 
LGW_SPI_MUX_TARGET_SX127X
, 
addªss
, 
ªg_vÆue
);

329 
	}
}

333 
	$lgw_£tup_sx127x
(
boﬁ
 
is·di
, 
uöt32_t
 
‰equícy
, 
uöt8_t
 
moduœti⁄
, 
lgw_sx127x_rxbw_e
 
rxbw_khz
, 
öt8_t
 
rssi_off£t
) {

334 
x
, 
i
;

335 
uöt8_t
 
vîsi⁄
;

336 
lgw_ødio_ty≥_e
 
ødio_ty≥
 = 
LGW_RADIO_TYPE_NONE
;

337 
lgw_ødio_ty≥_vîsi⁄_s
 
suµ‹ãd_ødio_ty≥
[2] = {

338 {
LGW_RADIO_TYPE_SX1276
, 0x12},

339 {
LGW_RADIO_TYPE_SX1272
, 0x22}

343 i‡(
moduœti⁄
 !
MOD_FSK
) {

344 
	`DEBUG_PRINTF
("ERROR~ moduœti⁄ÇŸ suµ‹ãd f‹ SX127x (%u)\n", 
moduœti⁄
);

345  
SX127X_REG_ERROR
;

347 i‡(
rxbw_khz
 > 
LGW_SX127X_RXBW_250K_HZ
) {

348 
	`DEBUG_PRINTF
("ERROR~ RX b™dwidthÇŸ suµ‹ãd f‹ SX127x (%u)\n", 
rxbw_khz
);

349  
SX127X_REG_ERROR
;

353 
i
 = 0; i < ()( 
suµ‹ãd_ødio_ty≥
); i++) {

355 
x
 = 
	`ª£t_sx127x
(
is·di
, 
i
);

356 i‡(
x
 !
LGW_SPI_SUCCESS
) {

357 
	`DEBUG_MSG
("ERROR~ FailedÅoÑeset sx127x\n");

358  
x
;

361 
x
 = 
	`lgw_sx127x_ªg_r
(
is·di
, 0x42, &
vîsi⁄
);

362 i‡(
x
 !
LGW_SPI_SUCCESS
) {

363 
	`DEBUG_MSG
("ERROR~ FailedÅoÑead sx127x versionÑegister\n");

364  
x
;

367 i‡(
vîsi⁄
 !
suµ‹ãd_ødio_ty≥
[
i
].
ªg_vîsi⁄
) {

368 
	`DEBUG_PRINTF
("INFO: sx127x vîsi⁄Ñegi°î -Ñód:0x%02x,Éx≥˘ed:0x%02x\n", 
vîsi⁄
, 
suµ‹ãd_ødio_ty≥
[
i
].
ªg_vîsi⁄
);

371 
	`DEBUG_PRINTF
("INFO: sx127xÑadiÿha†bì¿found (ty≥:%d, vîsi⁄:0x%02x)\n", 
suµ‹ãd_ødio_ty≥
[
i
].
ty≥
, 
vîsi⁄
);

372 
ødio_ty≥
 = 
suµ‹ãd_ødio_ty≥
[
i
].
ty≥
;

376 i‡(
ødio_ty≥
 =
LGW_RADIO_TYPE_NONE
) {

377 
	`DEBUG_MSG
("ERROR~ sx127xÑadio hasÇot been found\n");

378  
SX127X_REG_ERROR
;

382 
moduœti⁄
) {

383 
MOD_FSK
:

384 i‡(
ødio_ty≥
 =
LGW_RADIO_TYPE_SX1272
) {

385 
x
 = 
	`£tup_sx1272_FSK
(
is·di
, 
‰equícy
, 
rxbw_khz
, 
rssi_off£t
);

387 
x
 = 
	`£tup_sx1276_FSK
(
is·di
, 
‰equícy
, 
rxbw_khz
, 
rssi_off£t
);

394 i‡(
x
 !
SX127X_REG_SUCCESS
) {

395 
	`DEBUG_MSG
("ERROR~ failedÅo setup SX127x\n");

396  
x
;

399  
SX127X_REG_SUCCESS
;

400 
	}
}

	@hal/lg02hal/loragw_sx127x_radio.h

28 #i‚de‡
_LORAGW_SX127X_RADIO_H


29 
	#_LORAGW_SX127X_RADIO_H


	)

31 
	~<°döt.h
>

32 
	~<°dboﬁ.h
>

34 
	#SX127X_REG_SUCCESS
 0

	)

35 
	#SX127X_REG_ERROR
 -1

	)

39 
	elgw_sx127x_rxbw_e
 {

40 
	mLGW_SX127X_RXBW_2K6_HZ
,

41 
	mLGW_SX127X_RXBW_3K1_HZ
,

42 
	mLGW_SX127X_RXBW_3K9_HZ
,

43 
	mLGW_SX127X_RXBW_5K2_HZ
,

44 
	mLGW_SX127X_RXBW_6K3_HZ
,

45 
	mLGW_SX127X_RXBW_7K8_HZ
,

46 
	mLGW_SX127X_RXBW_10K4_HZ
,

47 
	mLGW_SX127X_RXBW_12K5_HZ
,

48 
	mLGW_SX127X_RXBW_15K6_HZ
,

49 
	mLGW_SX127X_RXBW_20K8_HZ
,

50 
	mLGW_SX127X_RXBW_25K_HZ
,

51 
	mLGW_SX127X_RXBW_31K3_HZ
,

52 
	mLGW_SX127X_RXBW_41K7_HZ
,

53 
	mLGW_SX127X_RXBW_50K_HZ
,

54 
	mLGW_SX127X_RXBW_62K5_HZ
,

55 
	mLGW_SX127X_RXBW_83K3_HZ
,

56 
	mLGW_SX127X_RXBW_100K_HZ
,

57 
	mLGW_SX127X_RXBW_125K_HZ
,

58 
	mLGW_SX127X_RXBW_166K7_HZ
,

59 
	mLGW_SX127X_RXBW_200K_HZ
,

60 
	mLGW_SX127X_RXBW_250K_HZ


66 
ª£t_sx127x
(
boﬁ
 
is·di
, 
övît
);

68 
lgw_£tup_sx127x
(
boﬁ
 
is·di
, 
uöt32_t
 
‰equícy
, 
uöt8_t
 
moduœti⁄
, 
lgw_sx127x_rxbw_e
 
rxbw_khz
, 
öt8_t
 
rssi_off£t
);

70 
lgw_sx127x_ªg_w
(
boﬁ
 
is·di
, 
uöt8_t
 
addªss
, uöt8_à
ªg_vÆue
);

72 
lgw_sx127x_ªg_r
(
boﬁ
 
is·di
, 
uöt8_t
 
addªss
, uöt8_à*
ªg_vÆue
);

74 
lg02_ªg_r
(*
èrgë
, 
boﬁ
 
is·di
, 
uöt8_t
 
addªss
, uöt8_à*
ªg_vÆue
);

76 
lg02_ªg_w
(*
èrgë
, 
boﬁ
 
is·di
, 
uöt8_t
 
addªss
, uöt8_à
ªg_vÆue
);

	@hal/loragw_aux.c

20 #i‡
__STDC_VERSION__
 >= 199901L

21 
	#_XOPEN_SOURCE
 600

	)

23 
	#_XOPEN_SOURCE
 500

	)

26 
	~<°dio.h
>

27 
	~<time.h
>

32 #i‡
DEBUG_AUX
 == 1

33 
	#DEBUG_MSG
(
°r
Ë
	`Ârötf
(
°dîr
, så)

	)

34 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...Ë
	`Ârötf
(
°dîr
,"%s:%d: "fmt, 
__FUNCTION__
, 
__LINE__
,árgs)

	)

36 
	#DEBUG_MSG
(
°r
)

	)

37 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...)

	)

44 
	$waô_ms
(
a
) {

45 
time•ec
 
dly
;

46 
time•ec
 
ªm
;

48 
dly
.
tv_£c
 = 
a
 / 1000;

49 
dly
.
tv_n£c
 = (()
a
 % 1000) * 1000000;

51 
	`DEBUG_PRINTF
("NOTE dly: %ld se¯%ldÇs\n", 
dly
.
tv_£c
, dly.
tv_n£c
);

53 if((
dly
.
tv_£c
 > 0Ë|| ((dly.tv_£¯=0Ë&& (dly.
tv_n£c
 > 100000))) {

54 
	`˛ock_«no¶ìp
(
CLOCK_MONOTONIC
, 0, &
dly
, &
ªm
);

55 
	`DEBUG_PRINTF
("NOTEÑemaö: %ld se¯%ldÇs\n", 
ªm
.
tv_£c
,Ñem.
tv_n£c
);

58 
	}
}

60 
	$waô_us
(
a
) {

61 
time•ec
 
dly
;

62 
time•ec
 
ªm
;

64 
dly
.
tv_£c
 = 
a
 / 1000000;

65 
dly
.
tv_n£c
 = (()
a
 % 1000000) * 1000;

67 
	`DEBUG_PRINTF
("NOTE dly: %ld se¯%ldÇs\n", 
dly
.
tv_£c
, dly.
tv_n£c
);

69 if((
dly
.
tv_£c
 > 0Ë|| ((dly.tv_£¯=0Ë&& (dly.
tv_n£c
 > 10000))) {

70 
	`˛ock_«no¶ìp
(
CLOCK_MONOTONIC
, 0, &
dly
, &
ªm
);

71 
	`DEBUG_PRINTF
("NOTEÑemaö: %ld se¯%ldÇs\n", 
ªm
.
tv_£c
,Ñem.
tv_n£c
);

74 
	}
}

	@hal/loragw_aux.h

16 #i‚de‡
_LORAGW_AUX_H


17 
	#_LORAGW_AUX_H


	)

22 
	~"c⁄fig.h
"

34 
	#TAKE_N_BITS_FROM
(
b
, 
p
, 
n
Ë(((bË>> (p)Ë& ((1 << (n)Ë- 1))

	)

43 
waô_ms
(
t
);

49 
waô_us
(
t
);

	@hal/loragw_debug.c

19 
	~<°döt.h
>

20 
	~<°dboﬁ.h
>

21 
	~<°dio.h
>

22 
	~<°rög.h
>

23 
	~<time.h
>

25 
	~"l‹agw_aux.h
"

26 
	~"l‹agw_hÆ.h
"

27 
	~"l‹agw_debug.h
"

29 
	~"töymt32.h
"

43 
töymt32_t
 
	gtöymt
;

54 
	$dbg_öô_øndom
() {

55 
töymt
.
m©1
 = 0x8f7011ee;

56 
töymt
.
m©2
 = 0xfc78ff1f;

57 
töymt
.
tm©
 = 0x3793fdff;

58 
	}
}

62 
	$dbg_log_buf„r_to_fûe
(
FILE
 * 
fûe
, 
uöt8_t
 * 
buf„r
, 
uöt16_t
 
size
) {

63 
i
;

64 
°©_time°amp
[24];

65 
time_t
 
t
;

67 
t
 = 
	`time
(
NULL
);

68 
	`°r·ime
(
°©_time°amp
,  sèt_time°amp, "%F %T %Z", 
	`gmtime
(&
t
));

69 
	`Ârötf
(
fûe
, "---------(%s)------------\n", 
°©_time°amp
);

70 
i
 = 0; i < 
size
; i++) {

71 
	`Ârötf
(
fûe
, "%02X ", 
buf„r
[
i
]);

73 
	`Ârötf
(
fûe
, "\n");

75 
	`fÊush
(
fûe
);

76 
	}
}

80 
	$dbg_log_∑ylﬂd_diff_to_fûe
(
FILE
 * 
fûe
, 
uöt8_t
 * 
buf„r1
, uöt8_à* 
buf„r2
, 
uöt16_t
 
size
) {

81 
i
, 
j
;

82 
uöt16_t
 
nb_bôs_diff
 = 0;

83 
uöt8_t
 
debug_∑ylﬂd_diff
[255];

85 
	`Ârötf
(
fûe
, "Diff: ");

87 
j
 = 0; j < 
size
; j++) {

88 
debug_∑ylﬂd_diff
[
j
] = 
buf„r1
[j] ^ 
buf„r2
[j];

89 
	`Ârötf
(
fûe
, "%02X ", 
debug_∑ylﬂd_diff
[
j
]);

91 
	`Ârötf
(
fûe
, "\n");

94 
j
 = 0; j < 
size
; j++) {

95 
i
 = 7; i >= 0; i--) {

96 
	`Ârötf
(
fûe
, "%u", 
	`TAKE_N_BITS_FROM
(
debug_∑ylﬂd_diff
[
j
], 
i
, 1));

97 i‡(
	`TAKE_N_BITS_FROM
(
debug_∑ylﬂd_diff
[
j
], 
i
, 1) == 1) {

98 
nb_bôs_diff
 += 1;

101 
	`Ârötf
(
fûe
, " ");

103 
	`Ârötf
(
fûe
, "\n");

104 
	`Ârötf
(
fûe
, "%u bô†Êù≥d\n", 
nb_bôs_diff
);

106 
	`fÊush
(
fûe
);

107 
	}
}

111 
	$dbg_gíî©e_øndom_∑ylﬂd
(
uöt32_t
 
pkt_˙t
, 
uöt8_t
 * 
buf„r_ex≥˘ed
, uöt8_à
size
) {

112 
k
;

115 
	`töymt32_öô
(&
töymt
, ()
pkt_˙t
);

116 
buf„r_ex≥˘ed
[4] = (
uöt8_t
)(
pkt_˙t
 >> 24);

117 
buf„r_ex≥˘ed
[5] = (
uöt8_t
)(
pkt_˙t
 >> 16);

118 
buf„r_ex≥˘ed
[6] = (
uöt8_t
)(
pkt_˙t
 >> 8);

119 
buf„r_ex≥˘ed
[7] = (
uöt8_t
)(
pkt_˙t
 >> 0);

120 
	`töymt32_gíî©e_uöt32
(&
töymt
);

121 
k
 = 8; k < ()
size
; k++) {

122 
buf„r_ex≥˘ed
[
k
] = (
uöt8_t
)
	`töymt32_gíî©e_uöt32
(&
töymt
);

124 
	}
}

128 
	$dbg_check_∑ylﬂd
(
lgw_c⁄f_debug_s
 * 
c⁄ãxt
, 
FILE
 * 
fûe
, 
uöt8_t
 * 
∑ylﬂd_ª˚ived
, uöt8_à
size
, uöt8_à
ªf_∑ylﬂd_idx
, uöt8_à
sf
) {

129 
k
;

130 
uöt32_t
 
debug_∑ylﬂd_˙t
;

133 i‡(
	`memcmp
((*)
∑ylﬂd_ª˚ived
, (*)(
c⁄ãxt
->
ªf_∑ylﬂd
[
ªf_∑ylﬂd_idx
].
∑ylﬂd
), 4) == 0) {

135 
debug_∑ylﬂd_˙t
 = ()(
∑ylﬂd_ª˚ived
[4] << 24) | ()(payload_received[5] << 16) | ()(payload_received[6] << 8) | ()(payload_received[7] << 0);

138 i‡(
debug_∑ylﬂd_˙t
 > (
c⁄ãxt
->
ªf_∑ylﬂd
[
ªf_∑ylﬂd_idx
].
¥ev_˙t
 + 1)) {

139 
	`¥ötf
("ERROR: 0x%08X mis£d %uÖkàbef‹ê%u (SF%u, size:%u)\n", 
c⁄ãxt
->
ªf_∑ylﬂd
[
ªf_∑ylﬂd_idx
].
id
, 
debug_∑ylﬂd_˙t
 - c⁄ãxt->ªf_∑ylﬂd[ªf_∑ylﬂd_idx].
¥ev_˙t
 - 1, debug_∑ylﬂd_˙t, 
sf
, 
size
);

140 i‡(
fûe
 !
NULL
) {

141 
	`Ârötf
(
fûe
, "ERROR: 0x%08X mis£d %uÖkàbef‹ê%u (SF%u, size:%u)\n", 
c⁄ãxt
->
ªf_∑ylﬂd
[
ªf_∑ylﬂd_idx
].
id
, 
debug_∑ylﬂd_˙t
 - c⁄ãxt->ªf_∑ylﬂd[ªf_∑ylﬂd_idx].
¥ev_˙t
 - 1, debug_∑ylﬂd_˙t, 
sf
, 
size
);

142 
	`fÊush
(
fûe
);

144 } i‡(
debug_∑ylﬂd_˙t
 < 
c⁄ãxt
->
ªf_∑ylﬂd
[
ªf_∑ylﬂd_idx
].
¥ev_˙t
) {

145 i‡(
fûe
 !
NULL
) {

146 
	`Ârötf
(
fûe
, "INFO: 0x%08X gŸ missögÖkà%u (SF%u, size:%uË?\n", 
c⁄ãxt
->
ªf_∑ylﬂd
[
ªf_∑ylﬂd_idx
].
id
, 
debug_∑ylﬂd_˙t
, 
sf
, 
size
);

147 
	`fÊush
(
fûe
);

151 i‡(
fûe
 !
NULL
) {

152 
	`Ârötf
(
fûe
, "0x%08X %u (SF%u, size:%u)\n", 
c⁄ãxt
.
ªf_∑ylﬂd
[
ªf_∑ylﬂd_idx
].
id
, 
debug_∑ylﬂd_˙t
, 
sf
, 
size
);

156 
c⁄ãxt
->
ªf_∑ylﬂd
[
ªf_∑ylﬂd_idx
].
¥ev_˙t
 = 
debug_∑ylﬂd_˙t
;

159 
	`dbg_gíî©e_øndom_∑ylﬂd
(
debug_∑ylﬂd_˙t
, 
c⁄ãxt
->
ªf_∑ylﬂd
[
ªf_∑ylﬂd_idx
].
∑ylﬂd
, 
size
);

162 i‡(
	`memcmp
((*)
∑ylﬂd_ª˚ived
, (*)(
c⁄ãxt
->
ªf_∑ylﬂd
[
ªf_∑ylﬂd_idx
].
∑ylﬂd
), 
size
) != 0) {

163 i‡(
fûe
 !
NULL
) {

164 
	`Ârötf
(
fûe
, "RECEIVED:");

165 
k
 = 0; k < ()
size
; k++) {

166 
	`Ârötf
(
fûe
, "%02X ", 
∑ylﬂd_ª˚ived
[
k
]);

168 
	`Ârötf
(
fûe
, "\n");

169 
	`Ârötf
(
fûe
, "EXPECTED:");

170 
k
 = 0; k < ()
size
; k++) {

171 
	`Ârötf
(
fûe
, "%02X ", 
c⁄ãxt
->
ªf_∑ylﬂd
[
ªf_∑ylﬂd_idx
].
∑ylﬂd
[
k
]);

173 
	`Ârötf
(
fûe
, "\n");

182 
	}
}

	@hal/loragw_debug.h

16 #i‚de‡
_LORAGW_DBG_H


17 
	#_LORAGW_DBG_H


	)

22 
	~"c⁄fig.h
"

34 
dbg_log_buf„r_to_fûe
(
FILE
 * 
fûe
, 
uöt8_t
 * 
buf„r
, 
uöt16_t
 
size
);

40 
dbg_log_∑ylﬂd_diff_to_fûe
(
FILE
 * 
fûe
, 
uöt8_t
 * 
buf„r1
, uöt8_à* 
buf„r2
, 
uöt16_t
 
size
);

46 
dbg_öô_øndom
();

52 
dbg_gíî©e_øndom_∑ylﬂd
(
uöt32_t
 
pkt_˙t
, 
uöt8_t
 * 
buf„r_ex≥˘ed
, uöt8_à
size
);

58 
dbg_check_∑ylﬂd
(
lgw_c⁄f_debug_s
 * 
c⁄ãxt
, 
FILE
 * 
fûe
, 
uöt8_t
 * 
∑ylﬂd_ª˚ived
, uöt8_à
size
, uöt8_à
ªf_∑ylﬂd_idx
, uöt8_à
sf
);

64 
dbg_öô_gpio
();

70 
dbg_toggÀ_gpio
();

	@hal/loragw_gps.c

21 
	#_GNU_SOURCE


	)

22 
	~<°döt.h
>

23 
	~<°dboﬁ.h
>

24 
	~<°dio.h
>

25 
	~<°rög.h
>

26 
	~<°dlib.h
>

27 
	~<î∫o.h
>

29 
	~<time.h
>

30 
	~<f˙é.h
>

31 
	~<ãrmios.h
>

32 
	~<m©h.h
>

34 
	~"l‹agw_gps.h
"

39 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

40 #i‡
DEBUG_GPS
 == 1

41 
	#DEBUG_MSG
(
¨gs
...Ë
	`Ârötf
(
°dîr
,árgs)

	)

42 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...Ë
	`Ârötf
(
°dîr
,"%s:%d: "fmt, 
__FUNCTION__
, 
__LINE__
,árgs)

	)

43 
	#DEBUG_ARRAY
(
a
,
b
,
c
Ëa=0;a<b;++aË
	`Ârötf
(
°dîr
,"%x.",c[a]);Ârötf(°dîr,"íd\n")

	)

44 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){
	`Ârötf
(
°dîr
,"%s:%d: ERROR: NULL POINTER AS ARGUMENT\n", 
__FUNCTION__
, 
__LINE__
); 
LGW_GPS_ERROR
;}

	)

46 
	#DEBUG_MSG
(
¨gs
...)

	)

47 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...)

	)

48 
	#DEBUG_ARRAY
(
a
,
b
,
c
Ëa=0;a!=0;){}

	)

49 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){ 
LGW_GPS_ERROR
;}

	)

51 
	#TRACE
(Ë
	`Ârötf
(
°dîr
, "@ %†%d\n", 
__FUNCTION__
, 
__LINE__
);

	)

56 
	#TS_CPS
 1E6

	)

57 
	#PLUS_10PPM
 1.00001

	)

58 
	#MINUS_10PPM
 0.99999

	)

59 
	#DEFAULT_BAUDRATE
 
B9600


	)

61 
	#UBX_MSG_NAVTIMEGPS_LEN
 16

	)

68 
	ggps_yó
 = 0;

69 
	ggps_m⁄
 = 0;

70 
	ggps_day
 = 0;

71 
	ggps_hou
 = 0;

72 
	ggps_mö
 = 0;

73 
	ggps_£c
 = 0;

74 
	ggps_‰a
 = 0.0;

75 
boﬁ
 
	ggps_time_ok
 = 
Ál£
;

76 
öt16_t
 
	ggps_wìk
 = 0;

77 
uöt32_t
 
	ggps_iTOW
 = 0;

78 
öt32_t
 
	ggps_fTOW
 = 0;

80 
	ggps_dœ
 = 0;

81 
	ggps_mœ
 = 0.0;

82 
	ggps_ﬁa
 = 0;

83 
	ggps_dlo
 = 0;

84 
	ggps_mlo
 = 0.0;

85 
	ggps_ﬁo
 = 0;

86 
	ggps_Æt
 = 0;

87 
boﬁ
 
	ggps_pos_ok
 = 
Ál£
;

89 
	ggps_mod
 = 'N';

90 
	ggps_ßt
 = 0;

92 
ãrmios
 
	gây›t_ª°‹e
;

97 
nmó_checksum
(c⁄° *
nmó_°rög
, 
buff_size
, *
checksum
);

99 
nibbÀ_to_hexch¨
(
uöt8_t
 
a
);

101 
boﬁ
 
vÆid©e_nmó_checksum
(c⁄° *
£rül_buff
, 
buff_size
);

103 
boﬁ
 
m©ch_œbñ
(c⁄° *
s
, *
œbñ
, 
size
, 
wûdˇrd
);

105 
°r_ch›
(*
s
, 
buff_size
, 
£∑øt‹
, *
idx_¨y
, 
max_idx
);

117 
	$nmó_checksum
(c⁄° *
nmó_°rög
, 
buff_size
, *
checksum
) {

118 
i
 = 0;

119 
uöt8_t
 
check_num
 = 0;

122 i‡((
nmó_°rög
 =
NULL
Ë|| (
checksum
 =NULLË|| (
buff_size
 <= 1)) {

123 
	`DEBUG_MSG
("InvalidÖarameters forÇmea_checksum\n");

128 i‡(
nmó_°rög
[
i
] == '$') {

129 
i
 += 1;

133 
nmó_°rög
[
i
] != '*') {

134 
check_num
 ^
nmó_°rög
[
i
];

135 
i
 += 1;

136 i‡(
i
 >
buff_size
) {

137 
	`DEBUG_MSG
("MaximumÜengthÑeached forÇmea_checksum\n");

143 
checksum
[0] = 
	`nibbÀ_to_hexch¨
(
check_num
 / 16);

144 
checksum
[1] = 
	`nibbÀ_to_hexch¨
(
check_num
 % 16);

146  
i
 + 1;

147 
	}
}

151 
	$nibbÀ_to_hexch¨
(
uöt8_t
 
a
) {

152 i‡(
a
 < 10) {

153  '0' + 
a
;

154 } i‡(
a
 < 16) {

155  'A' + (
a
-10);

159 
	}
}

168 
boﬁ
 
	$vÆid©e_nmó_checksum
(c⁄° *
£rül_buff
, 
buff_size
) {

169 
checksum_ödex
;

170 
checksum
[2];

172 
checksum_ödex
 = 
	`nmó_checksum
(
£rül_buff
, 
buff_size
, 
checksum
);

175 i‡(
checksum_ödex
 < 0) {

176 
	`DEBUG_MSG
("ERROR: IMPOSSIBLE TO PARSE NMEA SENTENCE\n");

177  
Ál£
;

181 i‡(
checksum_ödex
 >(
buff_size
 - 2)) {

182 
	`DEBUG_MSG
("ERROR: IMPOSSIBLE TO READ NMEA SENTENCE CHECKSUM\n");

183  
Ál£
;

187 i‡((
£rül_buff
[
checksum_ödex
] =
checksum
[0]) && (serial_buff[checksum_index+1] == checksum[1])) {

188  
åue
;

190 
	`DEBUG_MSG
("ERROR: NMEA CHECKSUM %c%¯DOESN'T MATCH VERIFICATION CHECKSUM %c%c\n", 
£rül_buff
[
checksum_ödex
], sîül_buff[checksum_ödex+1], 
checksum
[0], checksum[1]);

191  
Ál£
;

193 
	}
}

201 
boﬁ
 
	$m©ch_œbñ
(c⁄° *
s
, *
œbñ
, 
size
, 
wûdˇrd
) {

202 
i
;

204 
i
=0; i < 
size
; i++) {

205 i‡(
œbñ
[
i
] =
wûdˇrd
) ;

206 i‡(
œbñ
[
i
] !
s
[i]Ë 
Ál£
;

208  
åue
;

209 
	}
}

222 
	$°r_ch›
(*
s
, 
buff_size
, 
£∑øt‹
, *
idx_¨y
, 
max_idx
) {

223 
i
 = 0;

224 
j
 = 0;

226 i‡((
s
 =
NULL
Ë|| (
buff_size
 < 0Ë|| (
£∑øt‹
 =0Ë|| (
idx_¨y
 =NULLË|| (
max_idx
 < 0)) {

230 i‡((
buff_size
 =0Ë|| (
max_idx
 == 0)) {

234 
s
[
buff_size
 - 1] = 0;

235 
idx_¨y
[
j
] = 0;

236 
j
 += 1;

238 
s
[
i
] != 0) {

239 i‡(
s
[
i
] =
£∑øt‹
) {

240 
s
[
i
] = 0;

241 i‡(
j
 >
max_idx
) {

242  
j
;

244 
idx_¨y
[
j
] = 
i
+1;

245 ++
j
;

247 ++
i
;

249  
j
;

250 
	}
}

255 
	$lgw_gps_íabÀ
(*
ây_∑th
, *
gps_Ámûy
, 
•ìd_t
 
èrgë_bøã
, *
fd_±r
) {

256 
i
;

257 
ãrmios
 
ây›t
;

258 
gps_ây_dev
;

259 
uöt8_t
 
ubx_cmd_timegps
[
UBX_MSG_NAVTIMEGPS_LEN
] = {

265 
ssize_t
 
num_wrôãn
;

268 
	`CHECK_NULL
(
ây_∑th
);

269 
	`CHECK_NULL
(
fd_±r
);

272 
gps_ây_dev
 = 
	`›í
(
ây_∑th
, 
O_RDWR
 | 
O_NOCTTY
);

273 i‡(
gps_ây_dev
 <= 0) {

274 
	`DEBUG_MSG
("ERROR: TTY PORT FAIL TO OPEN, CHECK PATH AND ACCESS RIGHTS\n");

275  
LGW_GPS_ERROR
;

277 *
fd_±r
 = 
gps_ây_dev
;

280 i‡(
gps_Ámûy
 =
NULL
) {

281 
	`DEBUG_MSG
("WARNING:Åhis version of GPS module mayÇot be supported\n");

282 } i‡(
	`°∫cmp
(
gps_Ámûy
, "ubx7", 4) != 0) {

288 
	`DEBUG_MSG
("WARNING:Åhis version of GPS module mayÇot be supported\n");

292 i‡(
èrgë_bøã
 != 0) {

293 
	`DEBUG_MSG
("WARNING:Åarget_brateÖarameter ignored forÇow\n");

297 
i
 = 
	`tcgë©å
(
gps_ây_dev
, &
ây›t
);

298 i‡(
i
 != 0) {

299 
	`DEBUG_MSG
("ERROR: IMPOSSIBLE TO GET TTY PORT CONFIGURATION\n");

300  
LGW_GPS_ERROR
;

304 
	`mem˝y
(&
ây›t_ª°‹e
, &
ây›t
, Åtyopt);

307 
	`cf£ti•ìd
(&
ây›t
, 
DEFAULT_BAUDRATE
);

308 
	`cf£to•ìd
(&
ây›t
, 
DEFAULT_BAUDRATE
);

318 
ây›t
.
c_cÊag
 |
CLOCAL
;

319 
ây›t
.
c_cÊag
 |
CREAD
;

320 
ây›t
.
c_cÊag
 |
CS8
;

321 
ây›t
.
c_cÊag
 &~
PARENB
;

322 
ây›t
.
c_cÊag
 &~
CSTOPB
;

324 
ây›t
.
c_iÊag
 |
IGNPAR
;

325 
ây›t
.
c_iÊag
 &~
ICRNL
;

326 
ây›t
.
c_iÊag
 &~
IGNCR
;

327 
ây›t
.
c_iÊag
 &~
IXON
;

328 
ây›t
.
c_iÊag
 &~
IXOFF
;

330 
ây›t
.
c_oÊag
 = 0;

332 
ây›t
.
c_lÊag
 &~
ICANON
;

333 
ây›t
.
c_lÊag
 &~
ISIG
;

334 
ây›t
.
c_lÊag
 &~
IEXTEN
;

335 
ây›t
.
c_lÊag
 &~
ECHO
;

336 
ây›t
.
c_lÊag
 &~
ECHOE
;

337 
ây›t
.
c_lÊag
 &~
ECHOK
;

341 
ây›t
.
c_cc
[
VMIN
] = 
LGW_GPS_MIN_MSG_SIZE
;

342 
ây›t
.
c_cc
[
VTIME
] = 0;

345 
i
 = 
	`tc£èâr
(
gps_ây_dev
, 
TCSANOW
, &
ây›t
);

346 i‡(
i
 != 0){

347 
	`DEBUG_MSG
("ERROR: IMPOSSIBLE TO UPDATE TTY PORT CONFIGURATION\n");

348  
LGW_GPS_ERROR
;

350 
	`tcÊush
(
gps_ây_dev
, 
TCIOFLUSH
);

354 
num_wrôãn
 = 
	`wrôe
 (
gps_ây_dev
, 
ubx_cmd_timegps
, 
UBX_MSG_NAVTIMEGPS_LEN
);

355 i‡(
num_wrôãn
 !
UBX_MSG_NAVTIMEGPS_LEN
) {

356 
	`DEBUG_MSG
("ERROR: FaûedÅÿwrôê⁄ sîü»p‹à(wrôãn=%d)\n", (Ë
num_wrôãn
);

360 
	`tz£t
();

363 
gps_time_ok
 = 
Ál£
;

364 
gps_pos_ok
 = 
Ál£
;

365 
gps_mod
 = 'N';

367  
LGW_GPS_SUCCESS
;

368 
	}
}

372 
	$lgw_gps_dißbÀ
(
fd
) {

373 
i
;

376 
i
 = 
	`tc£èâr
(
fd
, 
TCSANOW
, &
ây›t_ª°‹e
);

377 i‡(
i
 != 0){

378 
	`DEBUG_MSG
("ERROR: IMPOSSIBLE TO RESTORE TTY PORT CONFIGURATION - %s\n", 
	`°ªº‹
(
î∫o
));

379  
LGW_GPS_ERROR
;

381 
	`tcÊush
(
fd
, 
TCIOFLUSH
);

383 
i
 = 
	`˛o£
(
fd
);

384 i‡(
i
 != 0) {

385 
	`DEBUG_PRINTF
("ERROR: TTY PORT FAIL TO CLOSE - %s\n", 
	`°ªº‹
(
î∫o
));

386  
LGW_GPS_ERROR
;

389  
LGW_GPS_SUCCESS
;

390 
	}
}

394 
gps_msg
 
	$lgw_∑r£_ubx
(c⁄° *
£rül_buff
, 
size_t
 
buff_size
, size_à*
msg_size
) {

395 
boﬁ
 
vÆid
 = 0;

396 
∑ylﬂd_Àngth
;

397 
uöt8_t
 
ck_a
, 
ck_b
;

398 
uöt8_t
 
ck_a_rcv
, 
ck_b_rcv
;

399 
i
;

401 *
msg_size
 = 0;

404 i‡(
£rül_buff
 =
NULL
) {

405  
IGNORED
;

407 i‡(
buff_size
 < 8) {

408 
	`DEBUG_MSG
("ERROR: TOO SHORT TO BE A VALID UBX MESSAGE\n");

409  
IGNORED
;

413 
	`DEBUG_MSG
("Note:Öarsing UBX frame> ");

414 
i
=0; i<
buff_size
; i++) {

415 
	`DEBUG_MSG
("%02x ", 
£rül_buff
[
i
]);

417 
	`DEBUG_MSG
("\n");

420 i‡((
£rül_buff
[0] == ()0xB5) && (serial_buff[1] == ()0x62)) {

423 
∑ylﬂd_Àngth
 = (
uöt8_t
)
£rül_buff
[4];

424 
∑ylﬂd_Àngth
 |(
uöt8_t
)
£rül_buff
[5] << 8;

425 *
msg_size
 = 6 + 
∑ylﬂd_Àngth
 + 2;

428 if(*
msg_size
 <
buff_size
) {

430 
ck_a_rcv
 = 
£rül_buff
[*
msg_size
-2];

431 
ck_b_rcv
 = 
£rül_buff
[*
msg_size
-1];

433 
ck_a
 = 0; 
ck_b
 = 0;

434 
i
=0; i<(4 + 
∑ylﬂd_Àngth
); i++) {

435 
ck_a
 = ck_®+ 
£rül_buff
[
i
+2];

436 
ck_b
 = ck_b + 
ck_a
;

440 i‡((
ck_a
 =
ck_a_rcv
Ë&& (
ck_b
 =
ck_b_rcv
)) {

442 i‡((
£rül_buff
[2] == 0x01) && (serial_buff[3] == 0x20)) {

444 
vÆid
 = 
£rül_buff
[17] & 0x3;

445 i‡(
vÆid
) {

448 
gps_iTOW
 = (
uöt8_t
)
£rül_buff
[6];

449 
gps_iTOW
 |(
uöt8_t
)
£rül_buff
[7] << 8;

450 
gps_iTOW
 |(
uöt8_t
)
£rül_buff
[8] << 16;

451 
gps_iTOW
 |(
uöt8_t
)
£rül_buff
[9] << 24;

453 
gps_fTOW
 = (
uöt8_t
)
£rül_buff
[10];

454 
gps_fTOW
 |(
uöt8_t
)
£rül_buff
[11] << 8;

455 
gps_fTOW
 |(
uöt8_t
)
£rül_buff
[12] << 16;

456 
gps_fTOW
 |(
uöt8_t
)
£rül_buff
[13] << 24;

458 
gps_wìk
 = (
uöt8_t
)
£rül_buff
[14];

459 
gps_wìk
 |(
uöt8_t
)
£rül_buff
[15] << 8;

461 
gps_time_ok
 = 
åue
;

465 
ubx_gps_hou
 = 0;

466 
ubx_gps_mö
 = 0;

467 
ubx_gps_£c
 = 0;

470 
ubx_gps_£c
 = (
gps_iTOW
 / 1000) % 60;

471 
ubx_gps_mö
 = (
gps_iTOW
 / 1000 / 60) % 60;

472 
ubx_gps_hou
 = (
gps_iTOW
 / 1000 / 60 / 60) % 24;

473 
	`¥ötf
(" GPSÅimê%02d:%02d:%02d\n", 
ubx_gps_hou
, 
ubx_gps_mö
, 
ubx_gps_£c
);

477 
gps_time_ok
 = 
Ál£
;

480  
UBX_NAV_TIMEGPS
;

481 } i‡((
£rül_buff
[2] == 0x05) && (serial_buff[3] == 0x00)) {

482 
	`DEBUG_MSG
("NOTE: UBX ACK-NAKÑeceived\n");

483  
IGNORED
;

484 } i‡((
£rül_buff
[2] == 0x05) && (serial_buff[3] == 0x01)) {

485 
	`DEBUG_MSG
("NOTE: UBX ACK-ACKÑeceived\n");

486  
IGNORED
;

488 
	`DEBUG_MSG
("ERROR: UBX mesßgêi†nŸ suµ‹ãd (%02x %02x)\n", 
£rül_buff
[2], serial_buff[3]);

489  
IGNORED
;

492 
	`DEBUG_MSG
("ERROR: UBX message is corrupted, checksum failed\n");

493  
INVALID
;

496 
	`DEBUG_MSG
("ERROR: UBX message incomplete\n");

497  
INCOMPLETE
;

501  
IGNORED
;

503 
	}
}

507 
gps_msg
 
	$lgw_∑r£_nmó
(c⁄° *
£rül_buff
, 
buff_size
) {

508 
i
, 
j
, 
k
;

509 
°r_ödex
[30];

510 
nb_fõlds
;

511 
∑r£r_buf
[256];

514 i‡(
£rül_buff
 =
NULL
) {

515  
UNKNOWN
;

518 if(
buff_size
 > ()((
∑r£r_buf
) - 1)) {

519 
	`DEBUG_MSG
("Note: input stringÅo big forÖarsing\n");

520  
INVALID
;

524 i‡(
buff_size
 < 8) {

525 
	`DEBUG_MSG
("ERROR: TOO SHORT TO BE A VALID NMEA SENTENCE\n");

526  
UNKNOWN
;

527 } i‡(!
	`vÆid©e_nmó_checksum
(
£rül_buff
, 
buff_size
)) {

528 
	`DEBUG_MSG
("Warning: invalid NMEA sentence (bad checksum)\n");

529  
INVALID
;

530 } i‡(
	`m©ch_œbñ
(
£rül_buff
, "$G?RMC", 6, '?')) {

536 
	`mem˝y
(
∑r£r_buf
, 
£rül_buff
, 
buff_size
);

537 
∑r£r_buf
[
buff_size
] = '\0';

538 
nb_fõlds
 = 
	`°r_ch›
(
∑r£r_buf
, 
buff_size
, ',', 
°r_ödex
, 
	`ARRAY_SIZE
(str_index));

539 i‡(
nb_fõlds
 != 13) {

540 
	`DEBUG_MSG
("Warning: invalid RMC sentence (number of fields)\n");

541  
IGNORED
;

544 
gps_mod
 = *(
∑r£r_buf
 + 
°r_ödex
[12]);

545 i‡((
gps_mod
 != 'N') && (gps_mod != 'A') && (gps_mod != 'D')) {

546 
gps_mod
 = 'N';

549 
i
 = 
	`ssˇnf
(
∑r£r_buf
 + 
°r_ödex
[1], "%2hd%2hd%2hd%4f", &
gps_hou
, &
gps_mö
, &
gps_£c
, &
gps_‰a
);

550 
j
 = 
	`ssˇnf
(
∑r£r_buf
 + 
°r_ödex
[9], "%2hd%2hd%2hd", &
gps_day
, &
gps_m⁄
, &
gps_yó
);

551 i‡((
i
 =4Ë&& (
j
 == 3)) {

552 i‡((
gps_mod
 == 'A') || (gps_mod == 'D')) {

553 
gps_time_ok
 = 
åue
;

554 
	`DEBUG_MSG
("NŸe: VÆid RMC síãn˚, GPSÜocked, d©e: 20%02d-%02d-%02dT%02d:%02d:%06.3fZ\n", 
gps_yó
, 
gps_m⁄
, 
gps_day
, 
gps_hou
, 
gps_mö
, 
gps_‰a
 + ()
gps_£c
);

556 
gps_time_ok
 = 
Ál£
;

557 
	`DEBUG_MSG
("NŸe: VÆid RMC síãn˚,ÇÿßãŒôêfix,É°im©ed d©e: 20%02d-%02d-%02dT%02d:%02d:%06.3fZ\n", 
gps_yó
, 
gps_m⁄
, 
gps_day
, 
gps_hou
, 
gps_mö
, 
gps_‰a
 + ()
gps_£c
);

561 
gps_time_ok
 = 
Ál£
;

562 
	`DEBUG_MSG
("NŸe: VÆid RMC síãn˚, modê%c,Çÿd©e\n", 
gps_mod
);

564  
NMEA_RMC
;

565 } i‡(
	`m©ch_œbñ
(
£rül_buff
, "$G?GGA", 6, '?')) {

570 
	`mem˝y
(
∑r£r_buf
, 
£rül_buff
, 
buff_size
);

571 
∑r£r_buf
[
buff_size
] = '\0';

572 
nb_fõlds
 = 
	`°r_ch›
(
∑r£r_buf
, 
buff_size
, ',', 
°r_ödex
, 
	`ARRAY_SIZE
(str_index));

573 i‡(
nb_fõlds
 != 15) {

574 
	`DEBUG_MSG
("Warning: invalid GGA sentence (number of fields)\n");

575  
IGNORED
;

578 
	`ssˇnf
(
∑r£r_buf
 + 
°r_ödex
[7], "%hd", &
gps_ßt
);

580 
i
 = 
	`ssˇnf
(
∑r£r_buf
 + 
°r_ödex
[2], "%2hd%10lf", &
gps_dœ
, &
gps_mœ
);

581 
gps_ﬁa
 = *(
∑r£r_buf
 + 
°r_ödex
[3]);

582 
j
 = 
	`ssˇnf
(
∑r£r_buf
 + 
°r_ödex
[4], "%3hd%10lf", &
gps_dlo
, &
gps_mlo
);

583 
gps_ﬁo
 = *(
∑r£r_buf
 + 
°r_ödex
[5]);

584 
k
 = 
	`ssˇnf
(
∑r£r_buf
 + 
°r_ödex
[9], "%hd", &
gps_Æt
);

585 i‡((
i
 =2Ë&& (
j
 =2Ë&& (
k
 =1Ë&& ((
gps_ﬁa
=='N')||(gps_ﬁa=='S')Ë&& ((
gps_ﬁo
=='E')||(gps_olo=='W'))) {

586 
gps_pos_ok
 = 
åue
;

587 
	`DEBUG_MSG
("NŸe: VÆid GGA síãn˚, %d s©,Ü© %02ddeg %06.3fmö %c,Ü⁄ %03ddeg%06.3fmö %c,á… %d\n", 
gps_ßt
, 
gps_dœ
, 
gps_mœ
, 
gps_ﬁa
, 
gps_dlo
, 
gps_mlo
, 
gps_ﬁo
, 
gps_Æt
);

590 
gps_pos_ok
 = 
Ál£
;

591 
	`DEBUG_MSG
("NŸe: VÆid GGA síãn˚, %d s©,Çÿco‹dö©es\n", 
gps_ßt
);

593  
NMEA_GGA
;

595 
	`DEBUG_MSG
("Note: ignored NMEA sentence\n");

596  
IGNORED
;

598 
	}
}

602 
	$lgw_gps_gë
(
time•ec
 *
utc
, time•e¯*
gps_time
, 
co‹d_s
 *
loc
, co‹d_†*
îr
) {

603 
tm
 
x
;

604 
time_t
 
y
;

605 
öç¨t
, 
‰a˘∑π
;

607 i‡(
utc
 !
NULL
) {

608 i‡(!
gps_time_ok
) {

609 
	`DEBUG_MSG
("ERROR: NO VALID TIME TO RETURN\n");

610  
LGW_GPS_ERROR
;

612 
	`mem£t
(&
x
, 0, (x));

613 i‡(
gps_yó
 < 100) {

614 
x
.
tm_yór
 = 
gps_yó
 + 100;

616 
x
.
tm_yór
 = 
gps_yó
 - 1900;

618 
x
.
tm_m⁄
 = 
gps_m⁄
 - 1;

619 
x
.
tm_mday
 = 
gps_day
;

620 
x
.
tm_hour
 = 
gps_hou
;

621 
x
.
tm_mö
 = 
gps_mö
;

622 
x
.
tm_£c
 = 
gps_£c
;

623 
y
 = 
	`mktime
(&
x
Ë- 
timez⁄e
;

624 i‡(
y
 =(
time_t
)(-1)) {

625 
	`DEBUG_MSG
("ERROR: FAILED TO CONVERT BROKEN-DOWN TIME\n");

626  
LGW_GPS_ERROR
;

628 
utc
->
tv_£c
 = 
y
;

629 
utc
->
tv_n£c
 = (
öt32_t
)(
gps_‰a
 * 1e9);

631 i‡(
gps_time
 !
NULL
) {

632 i‡(!
gps_time_ok
) {

633 
	`DEBUG_MSG
("ERROR: NO VALID TIME TO RETURN\n");

634  
LGW_GPS_ERROR
;

636 
‰a˘∑π
 = 
	`modf
((()
gps_iTOW
 / 1E3Ë+ (()
gps_fTOW
 / 1E9), &
öç¨t
);

638 
gps_time
->
tv_£c
 = (
time_t
)
öç¨t
;

640 
gps_time
->
tv_£c
 +(
time_t
)
gps_wìk
 * 604800;

642 
gps_time
->
tv_n£c
 = ()(
‰a˘∑π
 * 1E9);

644 i‡(
loc
 !
NULL
) {

645 i‡(!
gps_pos_ok
) {

646 
	`DEBUG_MSG
("ERROR: NO VALID POSITION TO RETURN\n");

647  
LGW_GPS_ERROR
;

649 
loc
->
œt
 = (()
gps_dœ
 + (
gps_mœ
/60.0)Ë* ((
gps_ﬁa
 == 'N')?1.0:-1.0);

650 
loc
->
l⁄
 = (()
gps_dlo
 + (
gps_mlo
/60.0)Ë* ((
gps_ﬁo
 == 'E')?1.0:-1.0);

651 
loc
->
Æt
 = 
gps_Æt
;

653 i‡(
îr
 !
NULL
) {

654 
	`DEBUG_MSG
("Warning:ÜocalizationÉrrorÖrocessingÇot implemented yet\n");

655 
îr
->
œt
 = 0.0;

656 
îr
->
l⁄
 = 0.0;

657 
îr
->
Æt
 = 0;

660  
LGW_GPS_SUCCESS
;

661 
	}
}

665 
	$lgw_gps_sync
(
åef
 *
ªf
, 
uöt32_t
 
cou¡_us
, 
time•ec
 
utc
, time•e¯
gps_time
) {

666 
˙t_diff
;

667 
utc_diff
;

668 
¶›e
;

670 
boﬁ
 
abî_n0
;

671 
boﬁ
 
abî_mö1
 = 
Ál£
;

672 
boﬁ
 
abî_mö2
 = 
Ál£
;

674 
	`CHECK_NULL
(
ªf
);

678 
˙t_diff
 = ()(
cou¡_us
 - 
ªf
->cou¡_usË/ ()(
TS_CPS
);

679 
utc_diff
 = ()(
utc
.
tv_£c
 - (
ªf
->utc).tv_£cË+ (1E-9 * ()(utc.
tv_n£c
 - (ref->utc).tv_nsec));

682 i‡(
utc_diff
 != 0) {

683 
¶›e
 = 
˙t_diff
/
utc_diff
;

684 i‡((
¶›e
 > 
PLUS_10PPM
Ë|| (¶›ê< 
MINUS_10PPM
)) {

685 
	`DEBUG_MSG
("Warning: correctionÑangeÉxceeded\n");

686 
abî_n0
 = 
åue
;

688 
abî_n0
 = 
Ál£
;

691 
	`DEBUG_MSG
("Warning:áberrant UTC value for synchronization\n");

692 
abî_n0
 = 
åue
;

696 i‡(
abî_n0
 =
Ál£
) {

698 
ªf
->
sy°ime
 = 
	`time
(
NULL
);

699 
ªf
->
cou¡_us
 = count_us;

700 
ªf
->
utc
.
tv_£c
 = utc.tv_sec;

701 
ªf
->
utc
.
tv_n£c
 = utc.tv_nsec;

702 
ªf
->
gps
.
tv_£c
 = 
gps_time
.tv_sec;

703 
ªf
->
gps
.
tv_n£c
 = 
gps_time
.tv_nsec;

704 
ªf
->
xèl_îr
 = 
¶›e
;

705 
abî_mö2
 = 
abî_mö1
;

706 
abî_mö1
 = 
abî_n0
;

707  
LGW_GPS_SUCCESS
;

708 } i‡(
abî_n0
 && 
abî_mö1
 && 
abî_mö2
) {

710 
ªf
->
sy°ime
 = 
	`time
(
NULL
);

711 
ªf
->
cou¡_us
 = count_us;

712 
ªf
->
utc
.
tv_£c
 = utc.tv_sec;

713 
ªf
->
utc
.
tv_n£c
 = utc.tv_nsec;

714 
ªf
->
gps
.
tv_£c
 = 
gps_time
.tv_sec;

715 
ªf
->
gps
.
tv_n£c
 = 
gps_time
.tv_nsec;

717 i‡((
ªf
->
xèl_îr
 > 
PLUS_10PPM
Ë|| (ªf->xèl_î∏< 
MINUS_10PPM
)) {

718 
ªf
->
xèl_îr
 = 1.0;

720 
	`DEBUG_MSG
("Warning: 3 successiveáberrant syncáttempts, syncÑeset\n");

721 
abî_mö2
 = 
abî_mö1
;

722 
abî_mö1
 = 
abî_n0
;

723  
LGW_GPS_SUCCESS
;

726 
abî_mö2
 = 
abî_mö1
;

727 
abî_mö1
 = 
abî_n0
;

728  
LGW_GPS_ERROR
;

731  
LGW_GPS_SUCCESS
;

732 
	}
}

736 
	$lgw_˙t2utc
(
åef
 
ªf
, 
uöt32_t
 
cou¡_us
, 
time•ec
 *
utc
) {

737 
dñè_£c
;

738 
öç¨t
, 
‰a˘∑π
;

739 
tmp
;

741 
	`CHECK_NULL
(
utc
);

742 i‡((
ªf
.
sy°ime
 =0Ë|| (ªf.
xèl_îr
 > 
PLUS_10PPM
Ë|| (ªf.xèl_î∏< 
MINUS_10PPM
)) {

743 
	`DEBUG_MSG
("ERROR: INVALID REFERENCE FOR CNT -> UTC CONVERSION\n");

744  
LGW_GPS_ERROR
;

748 
dñè_£c
 = ()(
cou¡_us
 - 
ªf
.cou¡_usË/ (
TS_CPS
 *Ñef.
xèl_îr
);

751 
‰a˘∑π
 = 
	`modf
 (
dñè_£c
 , &
öç¨t
);

752 
tmp
 = 
ªf
.
utc
.
tv_n£c
 + ()(
‰a˘∑π
 * 1E9);

753 i‡(
tmp
 < ()1E9) {

754 
utc
->
tv_£c
 = 
ªf
.utc.tv_£¯+ (
time_t
)
öç¨t
;

755 
utc
->
tv_n£c
 = 
tmp
;

757 
utc
->
tv_£c
 = 
ªf
.utc.tv_£¯+ (
time_t
)
öç¨t
 + 1;

758 
utc
->
tv_n£c
 = 
tmp
 - ()1E9;

761  
LGW_GPS_SUCCESS
;

762 
	}
}

766 
	$lgw_utc2˙t
(
åef
 
ªf
, 
time•ec
 
utc
, 
uöt32_t
 *
cou¡_us
) {

767 
dñè_£c
;

769 
	`CHECK_NULL
(
cou¡_us
);

770 i‡((
ªf
.
sy°ime
 =0Ë|| (ªf.
xèl_îr
 > 
PLUS_10PPM
Ë|| (ªf.xèl_î∏< 
MINUS_10PPM
)) {

771 
	`DEBUG_MSG
("ERROR: INVALID REFERENCE FOR UTC -> CNT CONVERSION\n");

772  
LGW_GPS_ERROR
;

776 
dñè_£c
 = ()(
utc
.
tv_£c
 - 
ªf
.utc.tv_sec);

777 
dñè_£c
 +1E-9 * ()(
utc
.
tv_n£c
 - 
ªf
.utc.tv_nsec);

780 *
cou¡_us
 = 
ªf
.cou¡_u†+ (
uöt32_t
)(
dñè_£c
 * 
TS_CPS
 *Ñef.
xèl_îr
);

782  
LGW_GPS_SUCCESS
;

783 
	}
}

787 
	$lgw_˙t2gps
(
åef
 
ªf
, 
uöt32_t
 
cou¡_us
, 
time•ec
 *
gps_time
) {

788 
dñè_£c
;

789 
öç¨t
, 
‰a˘∑π
;

790 
tmp
;

792 
	`CHECK_NULL
(
gps_time
);

793 i‡((
ªf
.
sy°ime
 =0Ë|| (ªf.
xèl_îr
 > 
PLUS_10PPM
Ë|| (ªf.xèl_î∏< 
MINUS_10PPM
)) {

794 
	`DEBUG_MSG
("ERROR: INVALID REFERENCE FOR CNT -> GPS CONVERSION\n");

795  
LGW_GPS_ERROR
;

799 
dñè_£c
 = ()(
cou¡_us
 - 
ªf
.cou¡_usË/ (
TS_CPS
 *Ñef.
xèl_îr
);

802 
‰a˘∑π
 = 
	`modf
 (
dñè_£c
 , &
öç¨t
);

803 
tmp
 = 
ªf
.
gps
.
tv_n£c
 + ()(
‰a˘∑π
 * 1E9);

804 i‡(
tmp
 < ()1E9) {

805 
gps_time
->
tv_£c
 = 
ªf
.
gps
.tv_£¯+ (
time_t
)
öç¨t
;

806 
gps_time
->
tv_n£c
 = 
tmp
;

808 
gps_time
->
tv_£c
 = 
ªf
.
gps
.tv_£¯+ (
time_t
)
öç¨t
 + 1;

809 
gps_time
->
tv_n£c
 = 
tmp
 - ()1E9;

812  
LGW_GPS_SUCCESS
;

813 
	}
}

817 
	$lgw_gps2˙t
(
åef
 
ªf
, 
time•ec
 
gps_time
, 
uöt32_t
 *
cou¡_us
) {

818 
dñè_£c
;

820 
	`CHECK_NULL
(
cou¡_us
);

821 i‡((
ªf
.
sy°ime
 =0Ë|| (ªf.
xèl_îr
 > 
PLUS_10PPM
Ë|| (ªf.xèl_î∏< 
MINUS_10PPM
)) {

822 
	`DEBUG_MSG
("ERROR: INVALID REFERENCE FOR GPS -> CNT CONVERSION\n");

823  
LGW_GPS_ERROR
;

827 
dñè_£c
 = ()(
gps_time
.
tv_£c
 - 
ªf
.
gps
.tv_sec);

828 
dñè_£c
 +1E-9 * ()(
gps_time
.
tv_n£c
 - 
ªf
.
gps
.tv_nsec);

831 *
cou¡_us
 = 
ªf
.cou¡_u†+ (
uöt32_t
)(
dñè_£c
 * 
TS_CPS
 *Ñef.
xèl_îr
);

833  
LGW_GPS_SUCCESS
;

834 
	}
}

	@hal/loragw_gps.h

18 #i‚de‡
_LORAGW_GPS_H


19 
	#_LORAGW_GPS_H


	)

24 
	#_GNU_SOURCE


	)

25 
	~<°döt.h
>

26 
	~<time.h
>

27 
	~<ãrmios.h
>

28 
	~<uni°d.h
>

30 
	~"c⁄fig.h
"

39 
	såef
 {

40 
time_t
 
	msy°ime
;

41 
uöt32_t
 
	mcou¡_us
;

42 
time•ec
 
	mutc
;

43 
time•ec
 
	mgps
;

44 
	mxèl_îr
;

51 
	sco‹d_s
 {

52 
	mœt
;

53 
	ml⁄
;

54 
	mÆt
;

61 
	egps_msg
 {

62 
	mUNKNOWN
,

63 
	mIGNORED
,

64 
	mINVALID
,

65 
	mINCOMPLETE
,

67 
	mNMEA_RMC
,

68 
	mNMEA_GGA
,

69 
	mNMEA_GNS
,

70 
	mNMEA_ZDA
,

72 
	mNMEA_GBS
,

73 
	mNMEA_GST
,

74 
	mNMEA_GSA
,

75 
	mNMEA_GSV
,

77 
	mNMEA_GLL
,

78 
	mNMEA_TXT
,

79 
	mNMEA_VTG
,

81 
	mUBX_NAV_TIMEGPS
,

82 
	mUBX_NAV_TIMEUTC


88 
	#LGW_GPS_SUCCESS
 0

	)

89 
	#LGW_GPS_ERROR
 -1

	)

91 
	#LGW_GPS_MIN_MSG_SIZE
 (8)

	)

92 
	#LGW_GPS_UBX_SYNC_CHAR
 (0xB5)

	)

93 
	#LGW_GPS_NMEA_SYNC_CHAR
 (0x24)

	)

107 
lgw_gps_íabÀ
(* 
ây_∑th
, * 
gps_Ámûly
, 
•ìd_t
 
èrgë_bøã
, * 
fd_±r
);

115 
lgw_gps_dißbÀ
(
fd
);

129 
gps_msg
 
lgw_∑r£_nmó
(c⁄° * 
£rül_buff
, 
buff_size
);

144 
gps_msg
 
lgw_∑r£_ubx
(c⁄° * 
£rül_buff
, 
size_t
 
buff_size
, size_à*
msg_size
);

161 
lgw_gps_gë
(
time•ec
 *
utc
, time•e¯*
gps_time
, 
co‹d_s
 *
loc
, co‹d_†*
îr
);

174 
lgw_gps_sync
(
åef
 *
ªf
, 
uöt32_t
 
cou¡_us
, 
time•ec
 
utc
, time•e¯
gps_time
);

188 
lgw_˙t2utc
(
åef
 
ªf
, 
uöt32_t
 
cou¡_us
, 
time•ec
* 
utc
);

202 
lgw_utc2˙t
(
åef
 
ªf
,
time•ec
 
utc
, 
uöt32_t
* 
cou¡_us
);

216 
lgw_˙t2gps
(
åef
 
ªf
, 
uöt32_t
 
cou¡_us
, 
time•ec
* 
gps_time
);

230 
lgw_gps2˙t
(
åef
 
ªf
, 
time•ec
 
gps_time
, 
uöt32_t
* 
cou¡_us
);

	@hal/loragw_hal.c

31 
	~<°döt.h
>

32 
	~<°dboﬁ.h
>

33 
	~<°dio.h
>

34 
	~<°rög.h
>

35 
	~<m©h.h
>

37 
	~"l‹agw_hÆ.h
"

38 
	~"l‹agw_aux.h
"

39 
	~"l‹agw_lbt.h
"

42 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

43 #i‡
DEBUG_HAL
 == 1

44 
	#DEBUG_MSG
(
°r
Ë
	`Ârötf
(
°dîr
, så)

	)

45 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...Ë
	`Ârötf
(
°dîr
,"%s:%d: "fmt, 
__FUNCTION__
, 
__LINE__
,árgs)

	)

46 
	#DEBUG_ARRAY
(
a
,
b
,
c
Ëa=0;a<b;++aË
	`Ârötf
(
°dîr
,"%x.",c[a]);Ârötf(°dîr,"íd\n")

	)

47 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){
	`Ârötf
(
°dîr
,"%s:%d: ERROR~ NULL POINTER AS ARGUMENT\n", 
__FUNCTION__
, 
__LINE__
); 
LGW_HAL_ERROR
;}

	)

49 
	#DEBUG_MSG
(
°r
)

	)

50 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...)

	)

51 
	#DEBUG_ARRAY
(
a
,
b
,
c
Ëa=0;a!=0;){}

	)

52 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){ 
LGW_HAL_ERROR
;}

	)

57 
uöt8_t
 
	gfsk_sync_w‹d_size
 = 3;

60 c⁄° 
	glgw_vîsi⁄_°rög
[] = "Vîsi⁄: " 
LIBLORAGW_VERSION
 ";";

64 
boﬁ
 
	glgw_is_°¨ãd
 = 
Ál£
;

69 c⁄° * 
	$lgw_vîsi⁄_öfo
() {

70  
lgw_vîsi⁄_°rög
;

71 
	}
}

75 
öt32_t
 
	$lgw_bw_gëvÆ
(
x
) {

76 
x
) {

77 
BW_500KHZ
:  500000;

78 
BW_250KHZ
:  250000;

79 
BW_125KHZ
:  125000;

80 
BW_62K5HZ
:  62500;

81 
BW_31K2HZ
:  31200;

82 
BW_15K6HZ
:  15600;

83 
BW_7K8HZ
 :  7800;

86 
	}
}

90 
öt32_t
 
	$lgw_sf_gëvÆ
(
x
) {

91 
x
) {

92 
DR_LORA_SF7
:  7;

93 
DR_LORA_SF8
:  8;

94 
DR_LORA_SF9
:  9;

95 
DR_LORA_SF10
:  10;

96 
DR_LORA_SF11
:  11;

97 
DR_LORA_SF12
:  12;

100 
	}
}

104 
uöt16_t
 
	$lgw_gë_tx_°¨t_dñay
(
uöt8_t
 
bw
) {

105 
nŸch_dñay_us
 = 0.0;

106 
bw_dñay_us
 = 0.0;

107 
tx_°¨t_dñay
;

110 
bw
) {

111 
BW_125KHZ
:

112 
bw_dñay_us
 = 1.5;

114 
BW_500KHZ
:

120 
tx_°¨t_dñay
 = ()
TX_START_DELAY_DEFAULT
 - 
bw_dñay_us
 - 
nŸch_dñay_us
;

122 
	`DEBUG_PRINTF
("INFO:Åx_°¨t_dñay=%u (%fË- (%u, bw_dñay=%f,ÇŸch_dñay=%f)\n", (
uöt16_t
)
tx_°¨t_dñay
,Åx_°¨t_dñay, 
TX_START_DELAY_DEFAULT
, 
bw_dñay_us
, 
nŸch_dñay_us
);

124  (
uöt16_t
)
tx_°¨t_dñay
;

125 
	}
}

129 
	$lgw_lbt_£tc⁄f
(
lgw_c⁄f_lbt_s
 *
c⁄f
) {

130 
x
;

133 i‡(
lgw_is_°¨ãd
 =
åue
) {

134 
	`DEBUG_MSG
("ERROR~ CONCENTRATOR IS RUNNING, STOP IT BEFORE TOUCHING CONFIGURATION\n");

135  
LGW_HAL_ERROR
;

138 
x
 = 
	`lbt_£tc⁄f
(
c⁄f
);

139 i‡(
x
 !
LGW_LBT_SUCCESS
) {

140 
	`DEBUG_MSG
("ERROR~ FailedÅo configure concentrator for LBT\n");

141  
LGW_HAL_ERROR
;

144  
LGW_HAL_SUCCESS
;

145 
	}
}

149 
uöt32_t
 
	$lgw_time_⁄_aú
(
lgw_pkt_tx_s
 *
∑ckë
) {

150 
öt32_t
 
vÆ
;

151 
uöt8_t
 
SF
, 
H
, 
DE
;

152 
uöt16_t
 
BW
;

153 
uöt32_t
 
∑ylﬂdSymbNb
, 
T∑ckë
;

154 
Tsym
, 
T¥ómbÀ
, 
T∑ylﬂd
, 
Tfsk
;

156 i‡(
∑ckë
 =
NULL
) {

157 
	`DEBUG_MSG
("ERROR~ FailedÅo computeÅime onáir, wrongÖarameter\n");

161 i‡(
∑ckë
->
moduœti⁄
 =
MOD_LORA
) {

163 
vÆ
 = 
	`lgw_bw_gëvÆ
(
∑ckë
->
b™dwidth
);

164 i‡(
vÆ
 != -1) {

165 
BW
 = (
uöt16_t
)(
vÆ
 / 1E3);

167 
	`DEBUG_PRINTF
("ERROR~ C™nŸ compuãÅimê⁄áú f‹Åhi†∑ckë, unsuµ‹ãd b™dwidth (0x%02X)\n", 
∑ckë
->
b™dwidth
);

172 
vÆ
 = 
	`lgw_sf_gëvÆ
(
∑ckë
->
d©¨©e
);

173 i‡(
vÆ
 != -1) {

174 
SF
 = (
uöt8_t
)
vÆ
;

176 
	`DEBUG_PRINTF
("ERROR~ C™nŸ compuãÅimê⁄áú f‹Åhi†∑ckë, unsuµ‹ãd d©¨©ê(0x%02X)\n", 
∑ckë
->
d©¨©e
);

181 
Tsym
 = 
	`pow
(2, 
SF
Ë/ 
BW
;

184 
T¥ómbÀ
 = (()(
∑ckë
->
¥ómbÀ
Ë+ 4.25Ë* 
Tsym
;

187 
H
 = (
∑ckë
->
no_hódî
==
Ál£
) ? 0 : 1;

188 
DE
 = (
SF
 >= 11) ? 1 : 0;

190 
∑ylﬂdSymbNb
 = 8 + (
	`˚û
(()(8*
∑ckë
->
size
 - 4*
SF
 + 28 + 16 - 20*
H
Ë/ ()(4*(SF - 2*
DE
))Ë* (∑ckë->
codî©e
));

192 
T∑ylﬂd
 = 
∑ylﬂdSymbNb
 * 
Tsym
;

195 
T∑ckë
 = 
T¥ómbÀ
 + 
T∑ylﬂd
;

196 } i‡(
∑ckë
->
moduœti⁄
 =
MOD_FSK
) {

204 
Tfsk
 = (8 * ()(
∑ckë
->
¥ómbÀ
 + 
fsk_sync_w‹d_size
 + 1 +Öackë->
size
 + (’ackë->
no_¸c
 =
åue
Ë? 0 : 2)Ë/ (Ìackë->
d©¨©e
) * 1E3;

207 
T∑ckë
 = (
uöt32_t
)
Tfsk
 + 1;

209 
T∑ckë
 = 0;

210 
	`DEBUG_PRINTF
("ERROR~ C™nŸ compuãÅimê⁄áú f‹Åhi†∑ckë, unsuµ‹ãd moduœti⁄ (0x%02X)\n", 
∑ckë
->
moduœti⁄
);

213  
T∑ckë
;

214 
	}
}

	@hal/loragw_hal.h

28 #i‚de‡
_LORAGW_HAL_H


29 
	#_LORAGW_HAL_H


	)

34 
	~<°döt.h
>

35 
	~<°dboﬁ.h
>

37 
	~"c⁄fig.h
"

42 
	#SET_PPM_ON
(
bw
,
dr
Ë(((bw =
BW_125KHZ
Ë&& ((d∏=
DR_LORA_SF11
Ë|| (d∏=
DR_LORA_SF12
))Ë|| ((bw =
BW_250KHZ
Ë&& (d∏=DR_LORA_SF12)))

	)

43 
	#TRACE
(Ë
	`Ârötf
(
°dîr
, "@ %†%d\n", 
__FUNCTION__
, 
__LINE__
);

	)

45 
	#IS_LORA_BW
(
bw
Ë((bw =
BW_125KHZ
Ë|| (bw =
BW_250KHZ
Ë|| (bw =
BW_500KHZ
))

	)

46 
	#IS_LORA_STD_DR
(
dr
Ë((d∏=
DR_LORA_SF7
Ë|| (d∏=
DR_LORA_SF8
Ë|| (d∏=
DR_LORA_SF9
Ë|| (d∏=
DR_LORA_SF10
Ë|| (d∏=
DR_LORA_SF11
Ë|| (d∏=
DR_LORA_SF12
))

	)

47 
	#IS_LORA_MULTI_DR
(
dr
Ë((d∏& ~
DR_LORA_MULTI
Ë=0Ë

	)

48 
	#IS_LORA_DR
(
dr
Ë((d∏=
DR_LORA_SF5
Ë|| (d∏=
DR_LORA_SF6
Ë|| (d∏=
DR_LORA_SF7
Ë|| (d∏=
DR_LORA_SF8
Ë|| (d∏=
DR_LORA_SF9
Ë|| (d∏=
DR_LORA_SF10
Ë|| (d∏=
DR_LORA_SF11
Ë|| (d∏=
DR_LORA_SF12
))

	)

49 
	#IS_LORA_CR
(
¸
Ë((¸ =
CR_LORA_4_5
Ë|| (¸ =
CR_LORA_4_6
Ë|| (¸ =
CR_LORA_4_7
Ë|| (¸ =
CR_LORA_4_8
))

	)

51 
	#IS_FSK_BW
(
bw
Ë((bw >1Ë&& (bw <7))

	)

52 
	#IS_FSK_DR
(
dr
Ë((d∏>
DR_FSK_MIN
Ë&& (d∏<
DR_FSK_MAX
))

	)

54 
	#IS_TX_MODE
(
mode
Ë((modê=
IMMEDIATE
Ë|| (modê=
TIMESTAMPED
Ë|| (modê=
ON_GPS
))

	)

58 
	#IF_HZ_TO_REG
(
f
Ë((‡<< 5Ë/ 15625)

	)

61 
	#LGW_HAL_SUCCESS
 0

	)

62 
	#LGW_HAL_ERROR
 -1

	)

63 
	#LGW_LBT_ISSUE
 1

	)

66 
	#LGW_XTAL_FREQU
 32000000

	)

67 
	#LGW_RF_CHAIN_NB
 2

	)

68 
	#LGW_RF_RX_BANDWIDTH
 {1000000, 1000000}

	)

71 
	#IF_UNDEFINED
 0

	)

72 
	#IF_LORA_STD
 0x10

	)

73 
	#IF_LORA_MULTI
 0x11

	)

74 
	#IF_FSK_STD
 0x20

	)

78 
	#LGW_IF_CHAIN_NB
 10

	)

79 
	#LGW_PKT_FIFO_SIZE
 16

	)

80 
	#LGW_DATABUFF_SIZE
 1024

	)

81 
	#LGW_REF_BW
 125000

	)

82 
	#LGW_MULTI_NB
 8

	)

83 
	#LGW_IFMODEM_CONFIG
 {\

84 
IF_LORA_MULTI
, \

85 
IF_LORA_MULTI
, \

86 
IF_LORA_MULTI
, \

87 
IF_LORA_MULTI
, \

88 
IF_LORA_MULTI
, \

89 
IF_LORA_MULTI
, \

90 
IF_LORA_MULTI
, \

91 
IF_LORA_MULTI
, \

92 
IF_LORA_STD
, \

93 
IF_FSK_STD
 }

	)

97 
	#MOD_UNDEFINED
 0

	)

98 
	#MOD_CW
 0x08

	)

99 
	#MOD_LORA
 0x10

	)

100 
	#MOD_FSK
 0x20

	)

104 
	#BW_UNDEFINED
 0

	)

105 
	#BW_500KHZ
 0x01

	)

106 
	#BW_250KHZ
 0x02

	)

107 
	#BW_125KHZ
 0x03

	)

108 
	#BW_62K5HZ
 0x04

	)

109 
	#BW_31K2HZ
 0x05

	)

110 
	#BW_15K6HZ
 0x06

	)

111 
	#BW_7K8HZ
 0x07

	)

115 
	#LGW_RF_RX_BANDWIDTH_125KHZ
 925000

	)

116 
	#LGW_RF_RX_BANDWIDTH_250KHZ
 1000000

	)

117 
	#LGW_RF_RX_BANDWIDTH_500KHZ
 1100000

	)

119 
	#LGW_RF_RX_FREQ_MIN
 100E6

	)

120 
	#LGW_RF_RX_FREQ_MAX
 1E9

	)

122 
	#TX_START_DELAY_DEFAULT
 1497

	)

126 
	#DR_UNDEFINED
 0

	)

127 
	#DR_LORA_SF5
 5

	)

128 
	#DR_LORA_SF6
 6

	)

129 
	#DR_LORA_SF7
 7

	)

130 
	#DR_LORA_SF8
 8

	)

131 
	#DR_LORA_SF9
 9

	)

132 
	#DR_LORA_SF10
 10

	)

133 
	#DR_LORA_SF11
 11

	)

134 
	#DR_LORA_SF12
 12

	)

135 
	#DR_LORA_MULTI
 16

	)

137 
	#DR_FSK_MIN
 500

	)

138 
	#DR_FSK_MAX
 250000

	)

142 
	#CR_UNDEFINED
 0

	)

143 
	#CR_LORA_4_5
 0x01

	)

144 
	#CR_LORA_4_6
 0x02

	)

145 
	#CR_LORA_4_7
 0x03

	)

146 
	#CR_LORA_4_8
 0x04

	)

150 
	#STAT_UNDEFINED
 0x00

	)

151 
	#STAT_NO_CRC
 0x01

	)

152 
	#STAT_CRC_BAD
 0x11

	)

153 
	#STAT_CRC_OK
 0x10

	)

156 
	#IMMEDIATE
 0

	)

157 
	#TIMESTAMPED
 1

	)

158 
	#ON_GPS
 2

	)

159 
	#ON_EVENT
 3

	)

160 
	#GPS_DELAYED
 4

	)

161 
	#EVENT_DELAYED
 5

	)

164 
	#TX_STATUS
 1

	)

165 
	#RX_STATUS
 2

	)

169 
	#TX_STATUS_UNKNOWN
 0

	)

170 
	#TX_OFF
 1

	)

171 
	#TX_FREE
 2

	)

172 
	#TX_SCHEDULED
 3

	)

173 
	#TX_EMITTING
 4

	)

177 
	#RX_STATUS_UNKNOWN
 0

	)

178 
	#RX_OFF
 1

	)

179 
	#RX_ON
 2

	)

180 
	#RX_SUSPENDED
 3

	)

183 
	#TX_GAIN_LUT_SIZE_MAX
 16

	)

186 
	#LBT_CHANNEL_FREQ_NB
 8

	)

191 
boﬁ
 
lgw_is_°¨ãd
;

197 
	elgw_modñ_ty≥_e
 {

198 
	mLGW_MODEL_TYPE_NONE
,

199 
	mLGW_MODEL_TYPE_SX1301
,

200 
	mLGW_MODEL_TYPE_SX1302
,

201 
	mLGW_MODEL_TYPE_SX1308
,

202 
	mLGW_MODEL_TYPE_LG01
,

203 
	mLGW_MODEL_TYPE_LG02


210 
	elgw_ødio_ty≥_e
 {

211 
	mLGW_RADIO_TYPE_NONE
,

212 
	mLGW_RADIO_TYPE_SX1255
,

213 
	mLGW_RADIO_TYPE_SX1257
,

214 
	mLGW_RADIO_TYPE_SX1272
,

215 
	mLGW_RADIO_TYPE_SX1276
,

216 
	mLGW_RADIO_TYPE_SX1250


217 } 
	tlgw_ødio_ty≥_t
;

223 
	slgw_c⁄f_bﬂrd_s
 {

224 
boﬁ
 
	ml‹aw™_public
;

225 
uöt8_t
 
	m˛k§c
;

226 
boﬁ
 
	mfuŒ_du∂ex
;

227 
	m•idev_∑th
[64];

234 
	slgw_rssi_tcomp_s
 {

235 
	mc€ff_a
;

236 
	mc€ff_b
;

237 
	mc€ff_c
;

238 
	mc€ff_d
;

239 
	mc€ff_e
;

246 
	slgw_c⁄f_lbt_ch™_s
 {

247 
uöt32_t
 
	m‰eq_hz
;

248 
uöt16_t
 
	msˇn_time_us
;

255 
	slgw_c⁄f_lbt_s
 {

256 
boﬁ
 
	míabÀ
;

257 
boﬁ
 
	mis·di
;

258 
öt8_t
 
	mrssi_èrgë
;

259 
uöt8_t
 
	mnb_ch™√l
;

260 
lgw_c⁄f_lbt_ch™_s
 
	mch™√ls
[
LBT_CHANNEL_FREQ_NB
];

261 * 
	m•i_∑th
;

262 
öt8_t
 
	mrssi_off£t
;

269 
	slgw_c⁄f_rxrf_s
 {

270 
boﬁ
 
	míabÀ
;

271 
uöt32_t
 
	m‰eq_hz
;

272 
	mrssi_off£t
;

273 
lgw_rssi_tcomp_s
 
	mrssi_tcomp
;

274 
lgw_ødio_ty≥_e
 
	mty≥
;

275 
boﬁ
 
	mtx_íabÀ
;

276 
uöt32_t
 
	mtx_nŸch_‰eq
;

277 
boﬁ
 
	msögÀ_öput_mode
;

284 
	slgw_c⁄f_rxif_s
 {

285 
boﬁ
 
	míabÀ
;

286 
uöt8_t
 
	mrf_chaö
;

287 
öt32_t
 
	m‰eq_hz
;

288 
uöt8_t
 
	mb™dwidth
;

289 
uöt32_t
 
	md©¨©e
;

290 
uöt8_t
 
	msync_w‹d_size
;

291 
uöt64_t
 
	msync_w‹d
;

292 
boﬁ
 
	mim∂icô_hdr
;

293 
uöt8_t
 
	mim∂icô_∑ylﬂd_Àngth
;

294 
boﬁ
 
	mim∂icô_¸c_í
;

295 
uöt8_t
 
	mim∂icô_codî©e
;

302 
	slgw_pkt_rx_s
 {

303 
uöt32_t
 
	m‰eq_hz
;

304 
öt32_t
 
	m‰eq_off£t
;

305 
uöt8_t
 
	mif_chaö
;

306 
uöt8_t
 
	m°©us
;

307 
uöt32_t
 
	mcou¡_us
;

308 
uöt8_t
 
	mrf_chaö
;

309 
uöt8_t
 
	mmodem_id
;

310 
uöt8_t
 
	mmoduœti⁄
;

311 
uöt8_t
 
	mb™dwidth
;

312 
uöt32_t
 
	md©¨©e
;

313 
uöt8_t
 
	mcodî©e
;

314 
	mrssic
;

315 
	mrssis
;

316 
	m¢r
;

317 
	m¢r_mö
;

318 
	m¢r_max
;

319 
uöt16_t
 
	m¸c
;

320 
uöt16_t
 
	msize
;

321 
uöt8_t
 
	m∑ylﬂd
[256];

328 
	slgw_pkt_tx_s
 {

329 
uöt32_t
 
	m‰eq_hz
;

330 
öt32_t
 
	m‰eq_off£t
;

331 
uöt8_t
 
	mtx_mode
;

332 
uöt32_t
 
	mcou¡_us
;

333 
uöt8_t
 
	mrf_chaö
;

334 
öt8_t
 
	mrf_powî
;

335 
uöt8_t
 
	mmoduœti⁄
;

336 
uöt8_t
 
	mb™dwidth
;

337 
uöt32_t
 
	md©¨©e
;

338 
uöt8_t
 
	mcodî©e
;

339 
boﬁ
 
	mövît_pﬁ
;

340 
uöt8_t
 
	mf_dev
;

341 
uöt16_t
 
	m¥ómbÀ
;

342 
boﬁ
 
	mno_¸c
;

343 
boﬁ
 
	mno_hódî
;

344 
uöt16_t
 
	msize
;

345 
uöt8_t
 
	m∑ylﬂd
[256];

352 
	slgw_tx_gaö_s
 {

353 
öt8_t
 
	mrf_powî
;

354 
uöt8_t
 
	mdig_gaö
;

355 
uöt8_t
 
	m∑_gaö
;

356 
uöt8_t
 
	mdac_gaö
;

357 
uöt8_t
 
	mmix_gaö
;

358 
öt8_t
 
	moff£t_i
;

359 
öt8_t
 
	moff£t_q
;

360 
uöt8_t
 
	mpwr_idx
;

367 
	slgw_tx_gaö_lut_s
 {

368 
lgw_tx_gaö_s
 
	mlut
[
TX_GAIN_LUT_SIZE_MAX
];

369 
uöt8_t
 
	msize
;

376 
	sc⁄f_ªf_∑ylﬂd_s
 {

377 
uöt32_t
 
	mid
;

378 
uöt8_t
 
	m∑ylﬂd
[255];

379 
uöt32_t
 
	m¥ev_˙t
;

381 
	slgw_c⁄f_debug_s
 {

382 
uöt8_t
 
	mnb_ªf_∑ylﬂd
;

383 
c⁄f_ªf_∑ylﬂd_s
 
	mªf_∑ylﬂd
[16];

384 
	mlog_fûe_«me
[128];

391 
	slgw_c⁄f_time°amp_s
 {

392 
boﬁ
 
	míabÀ_¥ecisi⁄_ts
;

393 
uöt8_t
 
	mmax_ts_mërics
;

394 
uöt8_t
 
	mnb_symbﬁs
;

401 
	slgw_c⁄ãxt_s
 {

403 
boﬁ
 
	mis_°¨ãd
;

404 
lgw_c⁄f_bﬂrd_s
 
	mbﬂrd_cfg
;

406 
lgw_c⁄f_rxrf_s
 
	mrf_chaö_cfg
[
LGW_RF_CHAIN_NB
];

407 
lgw_c⁄f_rxif_s
 
	mif_chaö_cfg
[
LGW_IF_CHAIN_NB
];

408 
lgw_c⁄f_rxif_s
 
	ml‹a_£rvi˚_cfg
;

409 
lgw_c⁄f_rxif_s
 
	mfsk_cfg
;

411 
lgw_tx_gaö_lut_s
 
	mtx_gaö_lut
[
LGW_RF_CHAIN_NB
];

413 
lgw_c⁄f_time°amp_s
 
	mtime°amp_cfg
;

415 
lgw_c⁄f_debug_s
 
	mdebug_cfg
;

416 } 
	tlgw_c⁄ãxt_t
;

418 
	sl‹ahÆ_s
 {

424 (*
	mlgw_bﬂrd_£tc⁄f
)(
lgw_c⁄f_bﬂrd_s
 *
	mc⁄f
);

432 (*
	mlgw_rxrf_£tc⁄f
)(
uöt8_t
 
	mrf_chaö
, 
lgw_c⁄f_rxrf_s
 *
	mc⁄f
);

440 (*
	mlgw_rxif_£tc⁄f
)(
uöt8_t
 
	mif_chaö
, 
lgw_c⁄f_rxif_s
 *
	mc⁄f
);

447 (*
	mlgw_debug_£tc⁄f
)(
lgw_c⁄f_debug_s
 *
	mc⁄f
);

454 (*
	mlgw_txgaö_£tc⁄f
)(
uöt8_t
 
	mrf_chaö
, 
lgw_tx_gaö_lut_s
 *
	mc⁄f
);

461 (*
	mlgw_time°amp_£tc⁄f
)(
lgw_c⁄f_time°amp_s
 *
	mc⁄f
);

467 (*
	mlgw_°¨t
)();

473 (*
	mlgw_°›
)();

481 (*
	mlgw_ª˚ive
)(
uöt8_t
 
	mmax_pkt
, 
lgw_pkt_rx_s
 *
	mpkt_d©a
);

507 (*
	mlgw_£nd
)(
lgw_pkt_tx_s
 *
	mpkt_d©a
);

515 (*
	mlgw_°©us
)(
uöt8_t
 
	mrf_chaö
, uöt8_à
	m£À˘
, uöt8_à*
	mcode
);

521 (*
	mlgw_ab‹t_tx
)(
uöt8_t
 
	mrf_chaö
);

528 (*
	mlgw_gë_åig˙t
)(
uöt32_t
* 
	måig_˙t_us
);

535 (*
	mlgw_gë_ö°˙t
)(
uöt32_t
 * 
	mö°_˙t_us
);

542 (*
	mlgw_gë_eui
)(
uöt64_t
 * 
	meui
);

549 (*
	mlgw_gë_ãm≥øtuª
)(* 
	mãm≥øtuª
);

556 
öt32_t
 
lgw_sf_gëvÆ
(
x
);

557 
öt32_t
 
lgw_bw_gëvÆ
(
x
);

559 
uöt16_t
 
lgw_gë_tx_°¨t_dñay
(
uöt8_t
 
bw
);

566 
lgw_lbt_£tc⁄f
(
lgw_c⁄f_lbt_s
 *
c⁄f
);

573 
uöt32_t
 
lgw_time_⁄_aú
(
lgw_pkt_tx_s
 *
∑ckë
);

579 c⁄° * 
lgw_vîsi⁄_öfo
();

581 
	#DEFI_HAL
 
l‹ahÆ_s
 
HAL
;

	)

582 
	#DECLARE_HAL
 
l‹ahÆ_s
 
HAL
;

	)

	@hal/loragw_i2c.c

19 
	~<°döt.h
>

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<uni°d.h
>

23 
	~<f˙é.h
>

24 
	~<°rög.h
>

25 
	~<î∫o.h
>

27 
	~<sys/io˘l.h
>

28 
	~<löux/i2c.h
>

29 
	~<löux/i2c-dev.h
>

31 
	~"l‹agw_i2c.h
"

32 
	~"l‹agw_aux.h
"

37 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

38 #i‡
DEBUG_I2C
 == 1

39 
	#DEBUG_MSG
(
°r
Ë
	`Ârötf
(
°dîr
, så)

	)

40 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...Ë
	`Ârötf
(
°dîr
,"%s:%d: "fmt, 
__FUNCTION__
, 
__LINE__
,árgs)

	)

41 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){
	`Ârötf
(
°dîr
,"%s:%d: ERROR: NULL POINTER AS ARGUMENT\n", 
__FUNCTION__
, 
__LINE__
); 
LGW_SPI_ERROR
;}

	)

43 
	#DEBUG_MSG
(
°r
)

	)

44 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...)

	)

45 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){ 
LGW_SPI_ERROR
;}

	)

54 
	$i2c_löuxdev_›í
(c⁄° *
∑th
, 
uöt8_t
 
devi˚_addr
, *
i2c_fd
) {

55 
dev
;

58 i‡(
∑th
 =
NULL
) {

59 
	`DEBUG_MSG
("ERROR:ÇullÖointerÖath\n");

60  
LGW_I2C_ERROR
;

62 i‡(
i2c_fd
 =
NULL
) {

63 
	`DEBUG_MSG
("ERROR:ÇullÖointer i2c_fd\n");

64  
LGW_I2C_ERROR
;

68 
dev
 = 
	`›í
(
∑th
, 
O_RDWR
);

69 i‡(
dev
 < 0) {

70 
	`DEBUG_PRINTF
("ERROR: FaûedÅÿ›í I2C %†- %s\n", 
∑th
, 
	`°ªº‹
(
î∫o
));

71  
LGW_I2C_ERROR
;

75 i‡(
	`io˘l
(
dev
, 
I2C_SLAVE
, 
devi˚_addr
) < 0) {

76 
	`DEBUG_PRINTF
("ERROR: FaûedÅÿacquúêbu†ac˚s†™d/‹ÅÆkÅÿ¶avê- %s\n", 
	`°ªº‹
(
î∫o
));

77  
LGW_I2C_ERROR
;

80 
	`DEBUG_PRINTF
("INFO: I2CÖ‹à›íed suc˚ssfuŒy (%s, 0x%02X)\n", 
∑th
, 
devi˚_addr
);

81 *
i2c_fd
 = 
dev
;

83  
LGW_I2C_SUCCESS
;

84 
	}
}

88 
	$i2c_löuxdev_ªad
(
i2c_fd
, 
uöt8_t
 
devi˚_addr
, uöt8_à
ªg_addr
, uöt8_à*
d©a
) {

89 
uöt8_t
 *
öbuff
, 
outbuff
;

90 
i2c_rdwr_io˘l_d©a
 
∑ckës
;

91 
i2c_msg
 
mesßges
[2];

93 
outbuff
 = 
ªg_addr
;

94 
mesßges
[0].
addr
 = 
devi˚_addr
;

95 
mesßges
[0].
Êags
= 0;

96 
mesßges
[0].
Àn
 = (
outbuff
);

97 
mesßges
[0].
buf
 = &
outbuff
;

99 
öbuff
 = 
d©a
;

100 
mesßges
[1].
addr
 = 
devi˚_addr
;

101 
mesßges
[1].
Êags
 = 
I2C_M_RD
;

102 
mesßges
[1].
Àn
 = (*
öbuff
);

103 
mesßges
[1].
buf
 = 
öbuff
;

105 
∑ckës
.
msgs
 = 
mesßges
;

106 
∑ckës
.
nmsgs
 = 2;

108 i‡(
	`io˘l
(
i2c_fd
, 
I2C_RDWR
, &
∑ckës
) < 0) {

109 
	`DEBUG_PRINTF
("ERROR: Ród from I2C Devi˚ faûed (%d, 0x%02x, 0x%02xË- %s\n", 
i2c_fd
, 
devi˚_addr
, 
ªg_addr
, 
	`°ªº‹
(
î∫o
));

110  
LGW_I2C_ERROR
;

113  
LGW_I2C_SUCCESS
;

114 
	}
}

118 
	$i2c_löuxdev_wrôe
(
i2c_fd
, 
uöt8_t
 
devi˚_addr
, uöt8_à
ªg_addr
, uöt8_à
d©a
) {

119 
buff
[2];

120 
i2c_rdwr_io˘l_d©a
 
∑ckës
;

121 
i2c_msg
 
mesßges
[1];

123 
buff
[0] = 
ªg_addr
;

124 
buff
[1] = 
d©a
;

126 
mesßges
[0].
addr
 = 
devi˚_addr
;

127 
mesßges
[0].
Êags
 = 0;

128 
mesßges
[0].
Àn
 = (
buff
);

129 
mesßges
[0].
buf
 = 
buff
;

131 
∑ckës
.
msgs
 = 
mesßges
;

132 
∑ckës
.
nmsgs
 = 1;

134 i‡(
	`io˘l
(
i2c_fd
, 
I2C_RDWR
, &
∑ckës
) < 0) {

135 
	`DEBUG_PRINTF
("ERROR: WrôêtÿI2C Devi˚ faûed (%d, 0x%02x, 0x%02xË- %s\n", 
i2c_fd
, 
devi˚_addr
, 
ªg_addr
, 
	`°ªº‹
(
î∫o
));

136  
LGW_I2C_ERROR
;

139  
LGW_I2C_SUCCESS
;

140 
	}
}

144 
	$i2c_löuxdev_˛o£
(
i2c_fd
) {

145 
i
;

147 
i
 = 
	`˛o£
(
i2c_fd
);

148 i‡(
i
 == 0) {

149 
	`DEBUG_MSG
("INFO: I2CÖort closed successfully\n");

150  
LGW_I2C_SUCCESS
;

152 
	`DEBUG_PRINTF
("ERROR: FaûedÅÿ˛o£ I2C - %s\n", 
	`°ªº‹
(
î∫o
));

153  
LGW_I2C_ERROR
;

155 
	}
}

	@hal/loragw_i2c.h

16 #i‚de‡
_LORAGW_I2C_H


17 
	#_LORAGW_I2C_H


	)

22 
	~<°döt.h
>

24 
	~"c⁄fig.h
"

29 
	#LGW_I2C_SUCCESS
 0

	)

30 
	#LGW_I2C_ERROR
 -1

	)

32 
	#I2C_DEVICE
 "/dev/i2c-0"

	)

44 
i2c_löuxdev_›í
(c⁄° *
∑th
, 
uöt8_t
 
devi˚_addr
, *
i2c_fd
);

51 
i2c_löuxdev_˛o£
(
i2c_fd
);

61 
i2c_löuxdev_ªad
(
i2c_fd
, 
uöt8_t
 
devi˚_addr
, uöt8_à
ªg_addr
, uöt8_à*
d©a
);

71 
i2c_löuxdev_wrôe
(
i2c_fd
, 
uöt8_t
 
devi˚_addr
, uöt8_à
ªg_addr
, uöt8_à
d©a
);

	@hal/loragw_lbt.c

18 #i‡
__STDC_VERSION__
 >= 199901L

19 
	#_XOPEN_SOURCE
 600

	)

21 
	#_XOPEN_SOURCE
 500

	)

24 
	~<°döt.h
>

25 
	~<°dboﬁ.h
>

26 
	~<°dio.h
>

27 
	~<°dlib.h
>

28 
	~<°rög.h
>

29 
	~<time.h
>

30 
	~<sys/time.h
>

32 
	~"gpio.h
"

33 
	~"l‹agw_aux.h
"

34 
	~"l‹agw_lbt.h
"

35 
	~"l‹agw_•i.h
"

37 
	~"l‹agw_sx127x_ødio.h
"

38 
	~"l‹agw_sx1272_ªgs.h
"

39 
	~"l‹agw_sx1276_ªgs.h
"

44 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

45 #i‡
DEBUG_LBT
 == 1

46 
	#DEBUG_MSG
(
°r
Ë
	`Ârötf
(
°dîr
, så)

	)

47 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...Ë
	`Ârötf
(
°dîr
,"%s:%d: "fmt, 
__FUNCTION__
, 
__LINE__
,árgs)

	)

48 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){
	`Ârötf
(
°dîr
,"%s:%d: ERROR~ NULL POINTER AS ARGUMENT\n", 
__FUNCTION__
, 
__LINE__
); 
SX127X_REG_ERROR
;}

	)

50 
	#DEBUG_MSG
(
°r
)

	)

51 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...)

	)

52 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){ 
SX127X_REG_ERROR
;}

	)

64 *
lgw_•i_èrgë
;

66 *
	glgw_lbt_èrgë
 = 
NULL
;

71 
boﬁ
 
	glbt_íabÀ
;

72 
boﬁ
 
	glbt_is·di
;

73 
	glbt_•i_∑th
[32];

74 
uöt8_t
 
	glbt_nb_a˘ive_ch™√l
;

75 
öt8_t
 
	glbt_rssi_èrgë_dBm
;

76 
öt8_t
 
	glbt_rssi_off£t_dB
;

77 
uöt32_t
 
	glbt_°¨t_‰eq
;

78 
lgw_c⁄f_lbt_ch™_s
 
	glbt_ch™√l_cfg
[
LBT_CHANNEL_FREQ_NB
];

81 
boﬁ
 
	glbt_ch™_‰ì
[
LBT_CHANNEL_FREQ_NB
];

89 
boﬁ
 
is_equÆ_‰eq
(
uöt32_t
 
a
, uöt32_à
b
);

91 
lgw_sx127x_rxbw_e
 
gë_rxbw_ödex
(
uöt32_t
 
hz
);

94 
uöt64_t
 
dif·ime•ec
(
time•ec
* 
íd
, time•ec* 
begö
);

101 
	$lbt_£tc⁄f
(
lgw_c⁄f_lbt_s
 * 
c⁄f
) {

102 
i
;

105 i‡(
c⁄f
 =
NULL
) {

106  
LGW_LBT_ERROR
;

108 i‡((
c⁄f
->
nb_ch™√l
 < 1Ë|| (c⁄f->nb_ch™√»> 
LBT_CHANNEL_FREQ_NB
)) {

109 
	`DEBUG_PRINTF
("ERROR~ Numbî o‡deföed LBT ch™√l†i†ouào‡øngê(%u)\n", 
c⁄f
->
nb_ch™√l
);

110  
LGW_LBT_ERROR
;

114 
	`mem£t
(
lbt_ch™√l_cfg
, 0, Übt_channel_cfg);

117 
lbt_íabÀ
 = 
c⁄f
->
íabÀ
;

118 
lbt_is·di
 = 
c⁄f
->
is·di
;

119 
	`°∫˝y
(
lbt_•i_∑th
, 
c⁄f
->
•i_∑th
, (lbt_spi_path));

120 
lbt_nb_a˘ive_ch™√l
 = 
c⁄f
->
nb_ch™√l
;

121 
lbt_rssi_èrgë_dBm
 = 
c⁄f
->
rssi_èrgë
;

122 
lbt_rssi_off£t_dB
 = 
c⁄f
->
rssi_off£t
;

124 
i
=0; i<
lbt_nb_a˘ive_ch™√l
; i++) {

125 
lbt_ch™√l_cfg
[
i
].
‰eq_hz
 = 
c⁄f
->
ch™√ls
[i].freq_hz;

126 
lbt_ch™√l_cfg
[
i
].
sˇn_time_us
 = 
c⁄f
->
ch™√ls
[i].scan_time_us;

129  
LGW_LBT_SUCCESS
;

130 
	}
}

134 
	$lbt_£tup
() {

135 
x
, 
i
;

142 
lbt_°¨t_‰eq
 = 
lbt_ch™√l_cfg
[0].
‰eq_hz
;

148 
i
=
lbt_nb_a˘ive_ch™√l
; i<
LBT_CHANNEL_FREQ_NB
; i++) {

149 
lbt_ch™√l_cfg
[
i
].
‰eq_hz
 = 
lbt_°¨t_‰eq
;

150 
lbt_ch™√l_cfg
[
i
].
sˇn_time_us
 = 128;

154 
i
=0; i<
LBT_CHANNEL_FREQ_NB
; i++) {

162 i‡((
lbt_ch™√l_cfg
[
i
].
sˇn_time_us
 != 128) && (lbt_channel_cfg[i].scan_time_us != 5000)) {

163 
	`DEBUG_PRINTF
("ERROR~ LBT ch™√»sˇ¿timêi†nŸ suµ‹ãd (%u)\n", 
lbt_ch™√l_cfg
[
i
].
sˇn_time_us
);

164  
LGW_LBT_ERROR
;

171 
x
 = 
	`lgw_£tup_sx127x
(
lbt_is·di
, 
lbt_°¨t_‰eq
, 
MOD_FSK
, 
LGW_SX127X_RXBW_100K_HZ
, 
lbt_rssi_off£t_dB
);

172 i‡(
x
 !
LGW_LBT_SUCCESS
) {

173 
	`DEBUG_MSG
("ERROR~ FailedÅo configure SX127x for LBT\n");

174  
LGW_LBT_ERROR
;

177 
	`DEBUG_MSG
("\n-------------------------------------------------\n");

178 
	`DEBUG_MSG
("Note: LBT configuration:\n");

179 
	`DEBUG_PRINTF
("\ébt_íabÀ: %d\n", 
lbt_íabÀ
 );

180 
	`DEBUG_PRINTF
("\ébt_nb_a˘ive_ch™√l: %d\n", 
lbt_nb_a˘ive_ch™√l
 );

181 
	`DEBUG_PRINTF
("\ébt_°¨t_‰eq: %d\n", 
lbt_°¨t_‰eq
);

182 
	`DEBUG_PRINTF
("\ébt_rssi_èrgë: %d\n", 
lbt_rssi_èrgë_dBm
 );

183 
i
=0; i<
LBT_CHANNEL_FREQ_NB
; i++) {

184 
	`DEBUG_PRINTF
("\ébt_ch™√l_cfg[%d].‰eq_hz: %u\n", 
i
, 
lbt_ch™√l_cfg
[i].
‰eq_hz
 );

185 
	`DEBUG_PRINTF
("\ébt_ch™√l_cfg[%d].sˇn_time_us: %u\n", 
i
, 
lbt_ch™√l_cfg
[i].
sˇn_time_us
 );

187 
	`DEBUG_MSG
("-------------------------------------------------\n");

189  
LGW_LBT_SUCCESS
;

191 
	}
}

195 
	$lbt_°¨t
() {

196 
•i_°©
 = 
LGW_SPI_SUCCESS
;

198 i‡(
lgw_lbt_èrgë
 !
NULL
) {

199 
	`DEBUG_MSG
("WARNING: LBT device wasálready connected\n");

200 
	`lgw_•i_˛o£
(
lgw_lbt_èrgë
);

203 i‡(
lbt_is·di
)

204 
•i_°©
 = 
	`lgw_·_•i_›í
(&
lgw_lbt_èrgë
);

206 
•i_°©
 = 
	`lgw_•i_›í
(
lbt_•i_∑th
, &
lgw_lbt_èrgë
);

208 i‡(
•i_°©
 !
LGW_SPI_SUCCESS
) {

209 
	`DEBUG_MSG
("ERROR CONNECTING LBT TARGET\n");

210 
lbt_íabÀ
 = 
Ál£
;

211  
LGW_LBT_ERROR
;

214  
	`lbt_£tup
();

216 
	}
}

220 
boﬁ
 
	$lbt_sögÀ_sˇn
(
uöt64_t
 
‰equícy
, 
uöt16_t
 
sˇn_time_us
) {

221 
x
;

222 
uöt8_t
 
rssivÆ
 = 0;

223 
öt16_t
 
rssi
 = 0;

224 
uöt8_t
 
PŒH›
 = 1;

225 
time•ec
 
°¨t
;

226 
time•ec
 
íd
;

227 
uöt64_t
 
‰eq_ªg
;

229 
x
 = 
	`lgw_sx127x_ªg_w
(
lbt_is·di
, 
SX1276_REG_PLLHOP
, 
PŒH›
 << 7);

230 
‰eq_ªg
 = ((
uöt64_t
)
‰equícy
 << 19) / (uint64_t)32000000;

231 
x
 |
	`lgw_sx127x_ªg_w
(
lbt_is·di
, 
SX1276_REG_FRFMSB
, (
‰eq_ªg
 >> 16) & 0xFF);

232 
x
 |
	`lgw_sx127x_ªg_w
(
lbt_is·di
, 
SX1276_REG_FRFMID
, (
‰eq_ªg
 >> 8) & 0xFF);

233 
x
 |
	`lgw_sx127x_ªg_w
(
lbt_is·di
, 
SX1276_REG_FRFLSB
, (
‰eq_ªg
 >> 0) & 0xFF);

235 i‡(
x
 !
SX127X_REG_SUCCESS
) {

236 
	`DEBUG_PRINTF
("ERROR: c™'à£à‰eq=%Œu\n", 
‰equícy
);

237  
Ál£
;

240 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
°¨t
);

241 
íd
 = 
°¨t
;

243 
	`dif·ime•ec
(&
íd
, &
°¨t
Ë< 
sˇn_time_us
) {

244 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
íd
);

245 
x
 = 
	`lgw_sx127x_ªg_r
(
lbt_is·di
, 
SX1276_REG_RSSIVALUE
, &
rssivÆ
);

246 i‡(
x
 !
SX127X_REG_SUCCESS
)

248 
rssi
 = -(
rssivÆ
 >> 1);

249 if–
rssi
 > 
lbt_rssi_èrgë_dBm
 ) {

250 
	`DEBUG_PRINTF
("INFO: %Œu RódRssi=%d,Å¨ge=%d\n", 
‰equícy
, 
rssi
, 
lbt_rssi_èrgë_dBm
);

251  
Ál£
;

255 
	`DEBUG_PRINTF
("INFO: %Œu RódRssi=%d,Å¨ge=%d\n", 
‰equícy
, 
rssi
, 
lbt_rssi_èrgë_dBm
);

257  
åue
;

258 
	}
}

260 
	$lbt_run_rssi_sˇn
(* 
exôsig
) {

261 
i
, 
x
;

262 
boﬁ
* 
°›sig
 = (boﬁ*Ë
exôsig
;

263 
uöt8_t
 
rssivÆ
 = 0;

264 
öt16_t
 
rssi
 = 0;

265 
time•ec
 
°¨t
;

266 
time•ec
 
íd
;

269 
boﬁ
 
lbt_‰ì
;

270 
uöt32_t
 
‰eq_ªg
;

272 
i
 = 0; i < 
LBT_CHANNEL_FREQ_NB
; i++) {

273 
lbt_ch™_‰ì
[
i
] = 
Ál£
;

277 !*
°›sig
) {

278 
i
 = 0; i < 
LBT_CHANNEL_FREQ_NB
; i++) {

280 
lbt_‰ì
 = 
åue
;

281 
x
 = 
	`lgw_sx127x_ªg_w
(
lbt_is·di
, 
SX1276_REG_PLLHOP
, 1 << 7);

283 
‰eq_ªg
 = ((
uöt64_t
)
lbt_ch™√l_cfg
[
i
].
‰eq_hz
 << 19) / (uint64_t)32000000;

284 
x
 |
	`lgw_sx127x_ªg_w
(
lbt_is·di
, 
SX1276_REG_FRFMSB
, (
‰eq_ªg
 >> 16) & 0xFF);

285 
x
 |
	`lgw_sx127x_ªg_w
(
lbt_is·di
, 
SX1276_REG_FRFMID
, (
‰eq_ªg
 >> 8) & 0xFF);

286 
x
 |
	`lgw_sx127x_ªg_w
(
lbt_is·di
, 
SX1276_REG_FRFLSB
, 
‰eq_ªg
 & 0xFF);

287 i‡(
x
 !
SX127X_REG_SUCCESS
) {

288 
	`DEBUG_PRINTF
("ERROR: c™'à£à‰eq=%u\n", 
lbt_ch™√l_cfg
[
i
].
‰eq_hz
);

289 
	`waô_us
(
TS_HOP
);

291 
	`waô_ms
(30);

293 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
°¨t
);

294 
íd
 = 
°¨t
;

295 
	`dif·ime•ec
(&
íd
, &
°¨t
Ë< 
lbt_ch™√l_cfg
[
i
].
sˇn_time_us
) {

297 
x
 = 
	`lgw_sx127x_ªg_r
(
lbt_is·di
, 
SX1276_REG_RSSIVALUE
, &
rssivÆ
);

298 i‡(
x
 !
SX127X_REG_SUCCESS
)

300 
rssi
 = -(
rssivÆ
 >> 1);

304 if–
rssi
 > 
lbt_rssi_èrgë_dBm
 ) {

305 
lbt_‰ì
 = 
Ál£
;

306 
lbt_ch™_‰ì
[
i
] = 
Ál£
;

310 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
íd
);

313 i‡(
lbt_‰ì
)

314 
lbt_ch™_‰ì
[
i
] = 
åue
;

317 
	}
}

319 
	$lbt_ch™_is_‰ì
(
lgw_pkt_tx_s
 * 
pkt_d©a
, 
uöt16_t
 
tx_°¨t_dñay
, 
boﬁ
 * 
tx_Ælowed
) {

320 
i
;

321 
lbt_ch™√l_öd
 = -1;

322 
uöt32_t
 
time_us
;

323 
timevÆ
 
cuºít_unix_time
;

326 i‡((
pkt_d©a
 =
NULL
Ë|| (
tx_Ælowed
 == NULL)) {

327  
LGW_LBT_ERROR
;

331 i‡(
lbt_íabÀ
 =
åue
) {

333 i‡(
pkt_d©a
->
moduœti⁄
 !
MOD_LORA
) {

334 *
tx_Ælowed
 = 
Ál£
;

335 
	`DEBUG_PRINTF
("INFO: TX i†nŸáŒowed f‹Åhi†moduœti⁄ (%x)\n", 
pkt_d©a
->
moduœti⁄
);

336  
LGW_LBT_SUCCESS
;

340 
	`DEBUG_MSG
("\n############################(LBT INFO)#############################\n");

341 
lbt_ch™√l_öd
 = -1;

342 
i
=0; i<
lbt_nb_a˘ive_ch™√l
; i++) {

343 i‡(
	`is_equÆ_‰eq
(
pkt_d©a
->
‰eq_hz
, 
lbt_ch™√l_cfg
[
i
].‰eq_hzË=
åue
) {

344 
	`DEBUG_PRINTF
("LBT: sñe˘ ch™√»%d (%u Hz)\n", 
i
, 
lbt_ch™√l_cfg
[i].
‰eq_hz
);

345 
lbt_ch™√l_öd
 = 
i
;

351 i‡(
lbt_ch™√l_öd
 >= 0) {

352 *
tx_Ælowed
 = 
lbt_ch™_‰ì
[
lbt_ch™√l_öd
];

353 
	`DEBUG_MSG
("INFO~ TXÑequestállowed (LBT)\n");

355 
	`DEBUG_MSG
("WARNING~ TXÑequestÑejected (LBT)\n");

356 *
tx_Ælowed
 = 
Ál£
;

358 
	`gëtimeofday
(&
cuºít_unix_time
, 
NULL
);

359 
time_us
 = 
cuºít_unix_time
.
tv_£c
 * 1000000UL + cuºít_unix_time.
tv_u£c
;

360 
	`DEBUG_MSG
("=============================================================\n");

361 
	`DEBUG_PRINTF
("TIME: %u\n", 
time_us
);

362 
i
 = 0; i < 
lbt_nb_a˘ive_ch™√l
; i++) {

363 
	`DEBUG_PRINTF
("%u ch™ i†%s\n", 
lbt_ch™√l_cfg
[
i
].
‰eq_hz
, 
lbt_ch™_‰ì
[i] ? "Free" : "Busy");

366 
	`DEBUG_MSG
("=============================================================\n");

367 
	`DEBUG_MSG
("######################################################################\n\n");

371 *
tx_Ælowed
 = 
åue
;

374  
LGW_LBT_SUCCESS
;

375 
	}
}

379 
boﬁ
 
	$lbt_is_íabÀd
() {

380  
lbt_íabÀ
;

381 
	}
}

389 
boﬁ
 
	$is_equÆ_‰eq
(
uöt32_t
 
a
, uöt32_à
b
) {

390 
öt64_t
 
diff
;

391 
öt64_t
 
a64
 = (öt64_t)
a
;

392 
öt64_t
 
b64
 = (öt64_t)
b
;

395 
diff
 = 
	`Œabs
(
a64
 - 
b64
);

398 if–
diff
 <= 10000 )

400  
åue
;

403  
Ál£
;

404 
	}
}

406 
lgw_sx127x_rxbw_e
 
	$gë_rxbw_ödex
(
uöt32_t
 
hz
) {

407 
hz
) {

409  
LGW_SX127X_RXBW_2K6_HZ
;

411  
LGW_SX127X_RXBW_3K1_HZ
;

413  
LGW_SX127X_RXBW_3K9_HZ
;

415  
LGW_SX127X_RXBW_5K2_HZ
;

417  
LGW_SX127X_RXBW_6K3_HZ
;

419  
LGW_SX127X_RXBW_7K8_HZ
;

421  
LGW_SX127X_RXBW_10K4_HZ
;

423  
LGW_SX127X_RXBW_12K5_HZ
;

425  
LGW_SX127X_RXBW_15K6_HZ
;

427  
LGW_SX127X_RXBW_20K8_HZ
;

429  
LGW_SX127X_RXBW_25K_HZ
;

431  
LGW_SX127X_RXBW_31K3_HZ
;

433  
LGW_SX127X_RXBW_41K7_HZ
;

435  
LGW_SX127X_RXBW_50K_HZ
;

437  
LGW_SX127X_RXBW_62K5_HZ
;

439  
LGW_SX127X_RXBW_83K3_HZ
;

441  
LGW_SX127X_RXBW_100K_HZ
;

443  
LGW_SX127X_RXBW_125K_HZ
;

445  
LGW_SX127X_RXBW_166K7_HZ
;

447  
LGW_SX127X_RXBW_200K_HZ
;

449  
LGW_SX127X_RXBW_250K_HZ
;

451  
LGW_SX127X_RXBW_200K_HZ
;

453 
	}
}

455 
uöt64_t
 
	$dif·ime•ec
(
time•ec
* 
íd
, time•ec* 
begö
) {

456 
uöt64_t
 
x
;

457 
x
 = 1E-3 * (
íd
->
tv_n£c
 - 
begö
->tv_nsec);

458 
x
 +1E6 * (
íd
->
tv_£c
 - 
begö
->tv_sec);

459  
x
;

460 
	}
}

	@hal/loragw_lbt.h

16 #i‚de‡
_LORAGW_LBT_H


17 
	#_LORAGW_LBT_H


	)

22 
	~<°döt.h
>

23 
	~<°dboﬁ.h
>

25 
	~"l‹agw_hÆ.h
"

30 
	#LGW_LBT_SUCCESS
 0

	)

31 
	#LGW_LBT_ERROR
 -1

	)

33 
	#TS_HOP
 20

	)

34 
	#DIO_RSSI_PIN
 6

	)

44 
lbt_£tc⁄f
(
lgw_c⁄f_lbt_s
 * 
c⁄f
);

50 
lbt_£tup
();

56 
lbt_°¨t
();

64 
lbt_ch™_is_‰ì
(
lgw_pkt_tx_s
 * 
pkt_d©a
, 
uöt16_t
 
tx_°¨t_dñay
, 
boﬁ
 * 
tx_Ælowed
);

71 
boﬁ
 
lbt_is_íabÀd
();

76 
lbt_run_rssi_sˇn
(* 
exôsig
);

78 
boﬁ
 
lbt_sögÀ_sˇn
(
uöt64_t
 
‰equícy
, 
uöt16_t
 
sˇn_time_us
);

	@hal/loragw_reg.c

23 
	~<°döt.h
>

24 
	~<°dboﬁ.h
>

25 
	~<°dio.h
>

27 
	~"l‹agw_•i.h
"

28 
	~"l‹agw_ªg.h
"

33 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

34 #i‡
DEBUG_REG
 == 1

35 
	#DEBUG_MSG
(
°r
Ë
	`Ârötf
(
°dîr
, så)

	)

36 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...Ë
	`Ârötf
(
°dîr
,"%s:%d: "fmt, 
__FUNCTION__
, 
__LINE__
,árgs)

	)

37 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){
	`Ârötf
(
°dîr
,"%s:%d: ERROR: NULL POINTER AS ARGUMENT\n", 
__FUNCTION__
, 
__LINE__
); 
LGW_REG_ERROR
;}

	)

39 
	#DEBUG_MSG
(
°r
)

	)

40 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...)

	)

41 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){ 
LGW_REG_ERROR
;}

	)

51 
	$ªg_r_Æign32
(*
•i_èrgë
, 
uöt8_t
 
•i_mux_èrgë
, 
lgw_ªg_s
 
r
, 
öt32_t
 *
ªg_vÆue
) {

52 
•i_°©
 = 
LGW_SPI_SUCCESS
;

53 
uöt8_t
 
bufu
[4] = "\x00\x00\x00\x00";

54 
öt8_t
 *
bufs
 = (öt8_à*)
bufu
;

55 
i
, 
size_byã
;

56 
uöt32_t
 
u
 = 0;

58 i‡((
r
.
offs
 +Ñ.
Àng
) <= 8) {

60 
•i_°©
 +
	`lgw_•i_r
(
•i_èrgë
, 
•i_mux_èrgë
, 
r
.
addr
, &
bufu
[0]);

61 
bufu
[1] = bufu[0] << (8 - 
r
.
Àng
 -Ñ.
offs
);

62 i‡(
r
.
sign
 =
åue
) {

63 
bufs
[2] = bufs[1] >> (8 - 
r
.
Àng
);

64 *
ªg_vÆue
 = (
öt32_t
)
bufs
[2];

66 
bufu
[2] = bufu[1] >> (8 - 
r
.
Àng
);

67 *
ªg_vÆue
 = (
öt32_t
)
bufu
[2];

69 } i‡((
r
.
offs
 =0Ë&& (r.
Àng
 > 0) && (r.leng <= 32)) {

70 
size_byã
 = (
r
.
Àng
 + 7) / 8;

71 
•i_°©
 +
	`lgw_•i_rb
(
•i_èrgë
, 
•i_mux_èrgë
, 
r
.
addr
, 
bufu
, 
size_byã
);

72 
u
 = 0;

73 
i
=(
size_byã
-1); i>=0; --i) {

74 
u
 = (
uöt32_t
)
bufu
[
i
] + (u << 8);

76 i‡(
r
.
sign
 =
åue
) {

77 
u
 = u << (32 - 
r
.
Àng
);

78 *
ªg_vÆue
 = (
öt32_t
)
u
 >> (32 - 
r
.
Àng
);

80 *
ªg_vÆue
 = (
öt32_t
)
u
;

84 
	`DEBUG_MSG
("ERROR: REGISTER SIZE AND OFFSET ARE NOT SUPPORTED\n");

85  
LGW_REG_ERROR
;

88  
•i_°©
;

89 
	}
}

91 
	$ªg_w_Æign32
(*
•i_èrgë
, 
uöt8_t
 
•i_mux_èrgë
, 
lgw_ªg_s
 
r
, 
öt32_t
 
ªg_vÆue
) {

92 
•i_°©
 = 
LGW_REG_SUCCESS
;

93 
i
, 
size_byã
;

94 
uöt8_t
 
buf
[4] = "\x00\x00\x00\x00";

96 i‡((
r
.
Àng
 =8Ë&& (r.
offs
 == 0)) {

98 
•i_°©
 +
	`lgw_•i_w
(
•i_èrgë
, 
•i_mux_èrgë
, 
r
.
addr
, (
uöt8_t
)
ªg_vÆue
);

99 } i‡((
r
.
offs
 +Ñ.
Àng
) <= 8) {

101 
•i_°©
 +
	`lgw_•i_r
(
•i_èrgë
, 
•i_mux_èrgë
, 
r
.
addr
, &
buf
[0]);

102 
buf
[1] = ((1 << 
r
.
Àng
Ë- 1Ë<<Ñ.
offs
;

103 
buf
[2] = ((
uöt8_t
)
ªg_vÆue
Ë<< 
r
.
offs
;

104 
buf
[3] = (~buf[1] & buf[0]) | (buf[1] & buf[2]);

105 
•i_°©
 +
	`lgw_•i_w
(
•i_èrgë
, 
•i_mux_èrgë
, 
r
.
addr
, 
buf
[3]);

106 } i‡((
r
.
offs
 =0Ë&& (r.
Àng
 > 0) && (r.leng <= 32)) {

108 
size_byã
 = (
r
.
Àng
 + 7) / 8;

109 
i
=0; i<
size_byã
; ++i) {

112 
buf
[
i
] = (
uöt8_t
)(0x000000FF & 
ªg_vÆue
);

113 
ªg_vÆue
 = (reg_value >> 8);

115 
•i_°©
 +
	`lgw_•i_wb
(
•i_èrgë
, 
•i_mux_èrgë
, 
r
.
addr
, 
buf
, 
size_byã
);

118 
	`DEBUG_MSG
("ERROR: REGISTER SIZE AND OFFSET ARE NOT SUPPORTED\n");

119  
LGW_REG_ERROR
;

122  
•i_°©
;

123 
	}
}

127 
	$lgw_mem_wb
(
uöt16_t
 
mem_addr
, c⁄° 
uöt8_t
 *
d©a
, uöt16_à
size
) {

128 
•i_°©
 = 
LGW_SPI_SUCCESS
;

129 
chunk_˙t
 = 0;

130 
uöt16_t
 
addr
 = 
mem_addr
;

131 
uöt16_t
 
sz_todo
 = 
size
;

132 
uöt16_t
 
chunk_size
;

133 c⁄° 
uöt16_t
 
CHUNK_SIZE_MAX
 = 1024;

136 
	`CHECK_NULL
(
d©a
);

137 i‡(
size
 == 0) {

138 
	`DEBUG_MSG
("ERROR: BURST OF NULL LENGTH\n");

139  
LGW_REG_ERROR
;

143 i‡(
lgw_•i_èrgë
 =
NULL
) {

144 
	`DEBUG_MSG
("ERROR: CONCENTRATOR UNCONNECTED\n");

145  
LGW_REG_ERROR
;

149 
sz_todo
 > 0) {

151 
chunk_size
 = (
sz_todo
 > 
CHUNK_SIZE_MAX
) ? CHUNK_SIZE_MAX : sz_todo;

154 
•i_°©
 +
	`lgw_•i_wb
(
lgw_•i_èrgë
, 
LGW_SPI_MUX_TARGET_SX1302
, 
addr
, (
uöt8_t
*)&
d©a
[
chunk_˙t
 * 
CHUNK_SIZE_MAX
], 
chunk_size
);

157 
addr
 +
chunk_size
;

158 
sz_todo
 -
chunk_size
;

159 
chunk_˙t
 += 1;

162 i‡(
•i_°©
 !
LGW_SPI_SUCCESS
) {

163 
	`DEBUG_MSG
("ERROR: SPI ERROR DURING REGISTER BURST WRITE\n");

164  
LGW_REG_ERROR
;

166  
LGW_REG_SUCCESS
;

168 
	}
}

172 
	$lgw_mem_rb
(
uöt16_t
 
mem_addr
, 
uöt8_t
 *
d©a
, uöt16_à
size
, 
boﬁ
 
fifo_mode
) {

173 
•i_°©
 = 
LGW_SPI_SUCCESS
;

174 
chunk_˙t
 = 0;

175 
uöt16_t
 
addr
 = 
mem_addr
;

176 
uöt16_t
 
sz_todo
 = 
size
;

177 
uöt16_t
 
chunk_size
;

178 c⁄° 
uöt16_t
 
CHUNK_SIZE_MAX
 = 1024;

181 
	`CHECK_NULL
(
d©a
);

182 i‡(
size
 == 0) {

183 
	`DEBUG_MSG
("ERROR: BURST OF NULL LENGTH\n");

184  
LGW_REG_ERROR
;

188 i‡(
lgw_•i_èrgë
 =
NULL
) {

189 
	`DEBUG_MSG
("ERROR: CONCENTRATOR UNCONNECTED\n");

190  
LGW_REG_ERROR
;

194 
sz_todo
 > 0) {

196 
chunk_size
 = (
sz_todo
 > 
CHUNK_SIZE_MAX
) ? CHUNK_SIZE_MAX : sz_todo;

199 
•i_°©
 +
	`lgw_•i_rb
(
lgw_•i_èrgë
, 
LGW_SPI_MUX_TARGET_SX1302
, 
addr
, (
uöt8_t
*)&
d©a
[
chunk_˙t
 * 
CHUNK_SIZE_MAX
], 
chunk_size
);

202 i‡(
fifo_mode
 =
Ál£
) {

203 
addr
 +
chunk_size
;

207 
sz_todo
 -
chunk_size
;

208 
chunk_˙t
 += 1;

211 i‡(
•i_°©
 !
LGW_SPI_SUCCESS
) {

212 
	`DEBUG_MSG
("ERROR: SPI ERROR DURING REGISTER BURST READ\n");

213  
LGW_REG_ERROR
;

215  
LGW_REG_SUCCESS
;

217 
	}
}

	@hal/loragw_reg.h

20 #i‚de‡
_LORAGW_REG_H


21 
	#_LORAGW_REG_H


	)

26 
	~<°döt.h
>

27 
	~<°dboﬁ.h
>

29 
	~"c⁄fig.h
"

34 
	#LGW_REG_SUCCESS
 0

	)

35 
	#LGW_REG_ERROR
 -1

	)

40 
	slgw_ªg_s
 {

41 
öt8_t
 
	m∑ge
;

42 
uöt16_t
 
	maddr
;

43 
uöt8_t
 
	moffs
;

44 
boﬁ
 
	msign
;

45 
uöt8_t
 
	mÀng
;

46 
boﬁ
 
	mrd⁄
;

47 
boﬁ
 
	mchck
;

48 
öt32_t
 
	mdÊt
;

54 
ªg_w_Æign32
(*
•i_èrgë
, 
uöt8_t
 
•i_mux_èrgë
, 
lgw_ªg_s
 
r
, 
öt32_t
 
ªg_vÆue
);

55 
ªg_r_Æign32
(*
•i_èrgë
, 
uöt8_t
 
•i_mux_èrgë
, 
lgw_ªg_s
 
r
, 
öt32_t
 *
ªg_vÆue
);

63 
lgw_mem_wb
(
uöt16_t
 
mem_addr
, c⁄° 
uöt8_t
 *
d©a
, uöt16_à
size
);

64 
lgw_mem_rb
(
uöt16_t
 
mem_addr
, 
uöt8_t
 *
d©a
, uöt16_à
size
, 
boﬁ
 
fifo_mode
);

	@hal/loragw_spi.ftdi.c

8 
	~<°döt.h
>

9 
	~<°dio.h
>

10 
	~<°dlib.h
>

11 
	~<°rög.h
>

12 
	~<±hªad.h
>

14 
	~<mps£.h
>

16 
	~"l‹agw_•i.h
"

17 
	~"l‹agw_hÆ.h
"

18 
	~"l‹agw_aux.h
"

23 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

24 #i‡
DEBUG_SPI
 == 1

25 
	#DEBUG_MSG
(
°r
Ë
	`Ârötf
(
°dîr
, så)

	)

26 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...Ë
	`Ârötf
(
°dîr
,"%s:%d: "fmt, 
__FUNCTION__
, 
__LINE__
,árgs)

	)

27 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){
	`Ârötf
(
°dîr
,"%s:%d: ERROR~ NULL POINTER AS ARGUMENT\n", 
__FUNCTION__
, 
__LINE__
); 
LGW_SPI_ERROR
;}

	)

29 
	#DEBUG_MSG
(
°r
)

	)

30 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...)

	)

31 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){ 
LGW_SPI_ERROR
;}

	)

34 
	#VID
 0x0403

	)

35 
	#PID
 0x6010

	)

43 
±hªad_muãx_t
 
	gmx_•i
 = 
PTHREAD_MUTEX_INITIALIZER
;

49 
	$lgw_·_•i_›í
(**
•i_èrgë_±r
) {

50 
mps£_c⁄ãxt
 *
mps£
 = 
NULL
;

51 
a
, 
b
;

54 
	`CHECK_NULL
(
•i_èrgë_±r
);

57 
mps£
 = 
	`O≥nIndex
(
VID
,
PID
,
SPI0
, 
SIX_MHZ
, 
MSB
, 
IFACE_A
, 
NULL
, NULL, 0);

58 i‡(
mps£
 =
NULL
) {

59 
	`DEBUG_MSG
("ERROR: MPSSE OPEN FUNCTION RETURNED NULL\n");

60  
LGW_SPI_ERROR
;

62 i‡(
mps£
->
›í
 != 1) {

63 
	`DEBUG_MSG
("ERROR: MPSSE OPEN FUNCTION FAILED\n");

64  
LGW_SPI_ERROR
;

68 
b
 = 
	`PöLow
(
mps£
, 
GPIOL0
);

69 
	`waô_ms
(10);

70 
a
 = 
	`PöHigh
(
mps£
, 
GPIOL0
);

71 
	`waô_ms
(10);

73 i‡((
a
 !
MPSSE_OK
Ë|| (
b
 != MPSSE_OK)) {

74 
	`DEBUG_MSG
("ERROR: IMPOSSIBLE TO TOGGLE GPIOL1/ADBUS5\n");

75  
LGW_SPI_ERROR
;

78 
	`DEBUG_PRINTF
("SPIÖ‹à›íedánd c⁄figuªd ok\ndesc: %s\nPID: 0x%04X\nVID: 0x%04X\n˛ock: %d\nLibmps£ vîsi⁄: 0x%02X\n", 
	`GëDes¸ùti⁄
(
mps£
), 
	`GëPid
(mps£), 
	`GëVid
(mps£), 
	`GëClock
(mps£), 
	`Vîsi⁄
());

79 *
•i_èrgë_±r
 = (*)
mps£
;

80  
LGW_SPI_SUCCESS
;

81 
	}
}

86 
	$lgw_·_•i_˛o£
(*
•i_èrgë
) {

87 
mps£_c⁄ãxt
 *
mps£
 = 
•i_èrgë
;

90 
	`CHECK_NULL
(
•i_èrgë
);

92 
	`Clo£
(
mps£
);

95  
LGW_SPI_SUCCESS
;

96 
	}
}

102 
	$lgw_·_•i_w
(*
•i_èrgë
, 
uöt8_t
 
•i_mux_èrgë
, uöt8_à
addªss
, uöt8_à
d©a
) {

103 
mps£_c⁄ãxt
 *
mps£
 = 
•i_èrgë
;

104 
uöt8_t
 
out_buf
[3];

105 
uöt8_t
 
comm™d_size
;

106 
a
, 
b
;

109 
	`CHECK_NULL
(
•i_èrgë
);

110 i‡((
addªss
 & 0x80) != 0) {

111 
	`DEBUG_MSG
("WARNING: SPIáddress > 127\n");

115 
out_buf
[0] = 
WRITE_ACCESS
 | (
addªss
 & 0x7F);

116 
out_buf
[1] = 
d©a
;

117 
comm™d_size
 = 2;

120 
	`±hªad_muãx_lock
(&
mx_•i
);

123 
a
 = 
	`Sèπ
(
mps£
);

124 
	`Tøns„r
(
mps£
, (*)
out_buf
, 
comm™d_size
);

125 
b
 = 
	`St›
(
mps£
);

128 
	`±hªad_muãx_u∆ock
(&
mx_•i
);

131 i‡((
a
 !
MPSSE_OK
Ë|| (
b
 != MPSSE_OK)) {

132 
	`DEBUG_MSG
("ERROR: SPI WRITE FAILURE\n");

133 
	`exô
(255);

136 
	`DEBUG_MSG
("Note: SPI write success\n");

137  
LGW_SPI_SUCCESS
;

139 
	}
}

145 
	$lgw_·_•i_r
(*
•i_èrgë
, 
uöt8_t
 
•i_mux_èrgë
, uöt8_à
addªss
, uöt8_à*
d©a
) {

146 
mps£_c⁄ãxt
 *
mps£
 = 
•i_èrgë
;

147 
uöt8_t
 
out_buf
[3];

148 
uöt8_t
 
comm™d_size
;

149 
uöt8_t
 *
ö_buf
 = 
NULL
;

150 
a
, 
b
;

153 
	`CHECK_NULL
(
•i_èrgë
);

154 i‡((
addªss
 & 0x80) != 0) {

155 
	`DEBUG_MSG
("WARNING: SPIáddress > 127\n");

157 
	`CHECK_NULL
(
d©a
);

160 
out_buf
[0] = 
READ_ACCESS
 | (
addªss
 & 0x7F);

161 
out_buf
[1] = 0x00;

162 
comm™d_size
 = 2;

165 
	`±hªad_muãx_lock
(&
mx_•i
);

168 
a
 = 
	`Sèπ
(
mps£
);

169 
ö_buf
 = (
uöt8_t
 *)
	`Tøns„r
(
mps£
, (*)
out_buf
, 
comm™d_size
);

170 
b
 = 
	`St›
(
mps£
);

173 
	`±hªad_muãx_u∆ock
(&
mx_•i
);

176 i‡((
ö_buf
 =
NULL
Ë|| (
a
 !
MPSSE_OK
Ë|| (
b
 != MPSSE_OK)) {

177 
	`DEBUG_MSG
("ERROR: SPI READ FAILURE\n");

178 
	`exô
(255);

180 i‡(
ö_buf
 !
NULL
) {

181 
	`‰ì
(
ö_buf
);

183  
LGW_SPI_ERROR
;

186 
	`DEBUG_MSG
("Note: SPIÑead success\n");

187 *
d©a
 = 
ö_buf
[1];

188 
	`‰ì
(
ö_buf
);

189  
LGW_SPI_SUCCESS
;

191 
	}
}

195 
	$·di_sx127x_ª£t
(* 
•i_èrgë
, 
övît
) {

196 
mps£_c⁄ãxt
 *
mps£
 = 
•i_èrgë
;

197 
a
, 
b
;

199 i‡(
övît
 == 0) {

200 
a
 = 
	`PöLow
(
mps£
, 
GPIOL0
);

201 
	`waô_ms
(10);

202 
b
 = 
	`PöHigh
(
mps£
, 
GPIOL0
);

203 
	`waô_ms
(10);

205 
a
 = 
	`PöLow
(
mps£
, 
GPIOL0
);

206 
	`waô_ms
(10);

207 
b
 = 
	`PöHigh
(
mps£
, 
GPIOL0
);

208 
	`waô_ms
(10);

210 i‡((
a
 !
MPSSE_OK
Ë|| (
b
 != MPSSE_OK)) {

211 
	`DEBUG_MSG
("ERROR:Ñeset sx127xÉrror!\n");

212  
LGW_SPI_ERROR
;

214  
LGW_SPI_SUCCESS
;

215 
	}
}

	@hal/loragw_spi.h

21 #i‚de‡
_LORAGW_SPI_H


22 
	#_LORAGW_SPI_H


	)

27 
	~<°döt.h
>

29 
	~"c⁄fig.h
"

34 
	#SPI_DEV_PATH
 "/dev/•idev1.0"

	)

36 
	#READ_ACCESS
 0x00

	)

37 
	#WRITE_ACCESS
 0x80

	)

39 
	#LGW_SPI_SUCCESS
 0

	)

40 
	#LGW_SPI_ERROR
 -1

	)

41 
	#LGW_BURST_CHUNK
 1024

	)

43 
	#SPI_SPEED
 8000000

	)

45 
	#LGW_SPI_MUX_TARGET_SX1301
 0x08

	)

46 
	#LGW_SPI_MUX_TARGET_SX127X
 0x08

	)

48 
	#LGW_SPI_MUX_TARGET_SX1302
 0x00

	)

49 
	#LGW_SPI_MUX_TARGET_RADIOA
 0x01

	)

50 
	#LGW_SPI_MUX_TARGET_RADIOB
 0x02

	)

55 *
lgw_•i_èrgë
;

66 
lgw_•i_›í
(c⁄° * 
•idev_∑th
, **
•i_èrgë_±r
);

68 
lgw_·_•i_›í
(**
•i_èrgë_±r
);

76 
lgw_•i_˛o£
(*
•i_èrgë
);

78 
lgw_·_•i_˛o£
(*
•i_èrgë
);

87 
lgw_•i_w
(*
•i_èrgë
, 
uöt8_t
 
•i_mux_èrgë
, 
uöt16_t
 
addªss
, uöt8_à
d©a
);

89 
lgw_·_•i_w
(*
•i_èrgë
, 
uöt8_t
 
•i_mux_èrgë
, uöt8_à
addªss
, uöt8_à
d©a
);

98 
lgw_•i_r
(*
•i_èrgë
, 
uöt8_t
 
•i_mux_èrgë
, 
uöt16_t
 
addªss
, uöt8_à*
d©a
);

100 
lgw_·_•i_r
(*
•i_èrgë
, 
uöt8_t
 
•i_mux_èrgë
, uöt8_à
addªss
, uöt8_à*
d©a
);

110 
lgw_•i_wb
(*
•i_èrgë
, 
uöt8_t
 
•i_mux_èrgë
, 
uöt16_t
 
addªss
, c⁄° uöt8_à*
d©a
, uöt16_à
size
);

120 
lgw_•i_rb
(*
•i_èrgë
, 
uöt8_t
 
•i_mux_èrgë
, 
uöt16_t
 
addªss
, uöt8_à*
d©a
, uöt16_à
size
);

126 
·di_sx127x_ª£t
(* 
•i_èrgë
, 
övît
);

	@hal/loragw_spi.native.c

24 
	~<°döt.h
>

25 
	~<°dio.h
>

26 
	~<°dlib.h
>

27 
	~<uni°d.h
>

28 
	~<f˙é.h
>

29 
	~<°rög.h
>

31 
	~<sys/io˘l.h
>

32 
	~<löux/•i/•idev.h
>

34 
	~"l‹agw_•i.h
"

35 
	~"l‹agw_hÆ.h
"

40 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

41 #i‡
DEBUG_SPI
 == 1

42 
	#DEBUG_MSG
(
°r
Ë
	`Ârötf
(
°dîr
, så)

	)

43 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...Ë
	`Ârötf
(
°dîr
,"%s:%d: "fmt, 
__FUNCTION__
, 
__LINE__
,árgs)

	)

44 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){
	`Ârötf
(
°dîr
,"%s:%d: ERROR~ NULL POINTER AS ARGUMENT\n", 
__FUNCTION__
, 
__LINE__
); 
LGW_SPI_ERROR
;}

	)

46 
	#DEBUG_MSG
(
°r
)

	)

47 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...)

	)

48 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){ 
LGW_SPI_ERROR
;}

	)

57 *
	glgw_•i_èrgë
 = 
NULL
;

60 
	$lgw_•i_›í
(c⁄° * 
•idev_∑th
, **
•i_èrgë_±r
) {

61 *
•i_devi˚
 = 
NULL
;

62 
dev
;

63 
a
=0, 
b
=0;

64 
i
;

67 
	`CHECK_NULL
(
•i_èrgë_±r
);

70 
•i_devi˚
 = 
	`mÆloc
(());

71 i‡(
•i_devi˚
 =
NULL
) {

72 
	`DEBUG_MSG
("ERROR: MALLOC FAIL\n");

73  
LGW_SPI_ERROR
;

77 
dev
 = 
	`›í
(
•idev_∑th
, 
O_RDWR
);

78 i‡(
dev
 < 0) {

79 
	`DEBUG_PRINTF
("ERROR: faûedÅÿ›í SPI devi˚ %s\n", 
•idev_∑th
);

80  
LGW_SPI_ERROR
;

84 
i
 = 
SPI_MODE_0
;

85 
a
 = 
	`io˘l
(
dev
, 
SPI_IOC_WR_MODE
, &
i
);

86 
b
 = 
	`io˘l
(
dev
, 
SPI_IOC_RD_MODE
, &
i
);

87 i‡((
a
 < 0Ë|| (
b
 < 0)) {

88 
	`DEBUG_MSG
("ERROR: SPI PORT FAIL TO SET IN MODE 0\n");

89 
	`˛o£
(
dev
);

90 
	`‰ì
(
•i_devi˚
);

91  
LGW_SPI_ERROR
;

95 
i
 = 
SPI_SPEED
;

96 
a
 = 
	`io˘l
(
dev
, 
SPI_IOC_WR_MAX_SPEED_HZ
, &
i
);

97 
b
 = 
	`io˘l
(
dev
, 
SPI_IOC_RD_MAX_SPEED_HZ
, &
i
);

98 i‡((
a
 < 0Ë|| (
b
 < 0)) {

99 
	`DEBUG_MSG
("ERROR: SPI PORT FAIL TO SET MAX SPEED\n");

100 
	`˛o£
(
dev
);

101 
	`‰ì
(
•i_devi˚
);

102  
LGW_SPI_ERROR
;

106 
i
 = 0;

107 
a
 = 
	`io˘l
(
dev
, 
SPI_IOC_WR_LSB_FIRST
, &
i
);

108 
b
 = 
	`io˘l
(
dev
, 
SPI_IOC_RD_LSB_FIRST
, &
i
);

109 i‡((
a
 < 0Ë|| (
b
 < 0)) {

110 
	`DEBUG_MSG
("ERROR: SPI PORT FAIL TO SET MSB FIRST\n");

111 
	`˛o£
(
dev
);

112 
	`‰ì
(
•i_devi˚
);

113  
LGW_SPI_ERROR
;

117 
i
 = 0;

118 
a
 = 
	`io˘l
(
dev
, 
SPI_IOC_WR_BITS_PER_WORD
, &
i
);

119 
b
 = 
	`io˘l
(
dev
, 
SPI_IOC_RD_BITS_PER_WORD
, &
i
);

120 i‡((
a
 < 0Ë|| (
b
 < 0)) {

121 
	`DEBUG_MSG
("ERROR: SPI PORT FAIL TO SET 8 BITS-PER-WORD\n");

122 
	`˛o£
(
dev
);

123  
LGW_SPI_ERROR
;

126 *
•i_devi˚
 = 
dev
;

127 *
•i_èrgë_±r
 = (*)
•i_devi˚
;

128 
	`DEBUG_MSG
("Note: SPIÖort openedánd configured ok\n");

129  
LGW_SPI_SUCCESS
;

130 
	}
}

135 
	$lgw_•i_˛o£
(*
•i_èrgë
) {

136 
•i_devi˚
;

137 
a
;

140 
	`CHECK_NULL
(
•i_èrgë
);

143 
•i_devi˚
 = *(*)
•i_èrgë
;

144 
a
 = 
	`˛o£
(
•i_devi˚
);

145 
	`‰ì
(
•i_èrgë
);

148 i‡(
a
 < 0) {

149 
	`DEBUG_MSG
("ERROR: SPI PORT FAILED TO CLOSE\n");

150  
LGW_SPI_ERROR
;

152 
	`DEBUG_MSG
("Note: SPIÖort closed\n");

153  
LGW_SPI_SUCCESS
;

155 
	}
}

160 
	$lgw_•i_w
(*
•i_èrgë
, 
uöt8_t
 
•i_mux_èrgë
, 
uöt16_t
 
addªss
, uöt8_à
d©a
) {

161 
•i_devi˚
;

162 
uöt8_t
 
out_buf
[4];

163 
uöt8_t
 
comm™d_size
;

164 
•i_ioc_å™s„r
 
k
;

165 
a
;

168 
	`CHECK_NULL
(
•i_èrgë
);

170 
•i_devi˚
 = *(*)
•i_èrgë
;

173 i‡(
•i_mux_èrgë
 !
LGW_SPI_MUX_TARGET_SX1301
) {

174 
out_buf
[0] = 
•i_mux_èrgë
;

175 
out_buf
[1] = 
WRITE_ACCESS
 | ((
addªss
 >> 8) & 0x7F);

176 
out_buf
[2] = ((
addªss
 >> 0) & 0xFF);

177 
out_buf
[3] = 
d©a
;

178 
comm™d_size
 = 4;

180 
out_buf
[0] = 
READ_ACCESS
 | (
addªss
 & 0x7F);

181 
out_buf
[1] = 
d©a
;

182 
comm™d_size
 = 2;

186 
	`mem£t
(&
k
, 0, (k));

187 
k
.
tx_buf
 = (Ë
out_buf
;

188 
k
.
Àn
 = 
comm™d_size
;

189 
k
.
•ìd_hz
 = 
SPI_SPEED
;

190 
k
.
cs_ch™ge
 = 0;

191 
k
.
bôs_≥r_w‹d
 = 8;

192 
a
 = 
	`io˘l
(
•i_devi˚
, 
	`SPI_IOC_MESSAGE
(1), &
k
);

195 i‡(
a
 !()
k
.
Àn
) {

196 
	`DEBUG_MSG
("ERROR: SPI WRITE FAILURE\n");

197  
LGW_SPI_ERROR
;

199 
	`DEBUG_MSG
("Note: SPI write success\n");

200  
LGW_SPI_SUCCESS
;

202 
	}
}

207 
	$lgw_•i_r
(*
•i_èrgë
, 
uöt8_t
 
•i_mux_èrgë
, 
uöt16_t
 
addªss
, uöt8_à*
d©a
) {

208 
•i_devi˚
;

209 
uöt8_t
 
out_buf
[5];

210 
uöt8_t
 
comm™d_size
;

211 
uöt8_t
 
ö_buf
[
	`ARRAY_SIZE
(
out_buf
)];

212 
•i_ioc_å™s„r
 
k
;

213 
a
;

216 
	`CHECK_NULL
(
•i_èrgë
);

217 
	`CHECK_NULL
(
d©a
);

219 
•i_devi˚
 = *(*)
•i_èrgë
;

222 i‡(
•i_mux_èrgë
 !
LGW_SPI_MUX_TARGET_SX1301
) {

223 
out_buf
[0] = 
•i_mux_èrgë
;

224 
out_buf
[1] = 
READ_ACCESS
 | ((
addªss
 >> 8) & 0x7F);

225 
out_buf
[2] = ((
addªss
 >> 0) & 0xFF);

226 
out_buf
[3] = 0x00;

227 
out_buf
[4] = 0x00;

228 
comm™d_size
 = 5;

230 
out_buf
[0] = 
READ_ACCESS
 | (
addªss
 & 0x7F);

231 
out_buf
[1] = 0x00;

232 
comm™d_size
 = 2;

236 
	`mem£t
(&
k
, 0, (k));

237 
k
.
tx_buf
 = (Ë
out_buf
;

238 
k
.
rx_buf
 = (Ë
ö_buf
;

239 
k
.
Àn
 = 
comm™d_size
;

240 
k
.
cs_ch™ge
 = 0;

241 
a
 = 
	`io˘l
(
•i_devi˚
, 
	`SPI_IOC_MESSAGE
(1), &
k
);

244 i‡(
a
 !()
k
.
Àn
) {

245 
	`DEBUG_MSG
("ERROR: SPI READ FAILURE\n");

246  
LGW_SPI_ERROR
;

248 
	`DEBUG_MSG
("Note: SPIÑead success\n");

249 *
d©a
 = 
ö_buf
[
comm™d_size
 - 1];

250  
LGW_SPI_SUCCESS
;

252 
	}
}

257 
	$lgw_•i_wb
(*
•i_èrgë
, 
uöt8_t
 
•i_mux_èrgë
, 
uöt16_t
 
addªss
, c⁄° uöt8_à*
d©a
, uöt16_à
size
) {

258 
•i_devi˚
;

259 
uöt8_t
 
comm™d
[3];

260 
uöt8_t
 
comm™d_size
;

261 
•i_ioc_å™s„r
 
k
[2];

262 
size_to_do
, 
chunk_size
, 
off£t
;

263 
byã_å™s„ªd
 = 0;

264 
i
;

267 
	`CHECK_NULL
(
•i_èrgë
);

268 
	`CHECK_NULL
(
d©a
);

269 i‡(
size
 == 0) {

270 
	`DEBUG_MSG
("ERROR: BURST OF NULL LENGTH\n");

271  
LGW_SPI_ERROR
;

274 
•i_devi˚
 = *(*)
•i_èrgë
;

277 i‡(
•i_mux_èrgë
 !
LGW_SPI_MUX_TARGET_SX1301
) {

278 
comm™d
[0] = 
•i_mux_èrgë
;

279 
comm™d
[1] = 
WRITE_ACCESS
 | ((
addªss
 >> 8) & 0x7F);

280 
comm™d
[2] = ((
addªss
 >> 0) & 0xFF);

281 
comm™d_size
 = 3;

283 
comm™d
[0] = 
WRITE_ACCESS
 | (
addªss
 & 0x7F);

284 
comm™d_size
 = 1;

287 
size_to_do
 = 
size
;

290 
	`mem£t
(&
k
, 0, (k));

291 
k
[0].
tx_buf
 = (Ë&
comm™d
[0];

292 
k
[0].
Àn
 = 
comm™d_size
;

293 
k
[0].
cs_ch™ge
 = 0;

294 
k
[1].
cs_ch™ge
 = 0;

295 
i
=0; 
size_to_do
 > 0; ++i) {

296 
chunk_size
 = (
size_to_do
 < 
LGW_BURST_CHUNK
) ? size_to_do : LGW_BURST_CHUNK;

297 
off£t
 = 
i
 * 
LGW_BURST_CHUNK
;

298 
k
[1].
tx_buf
 = ()(
d©a
 + 
off£t
);

299 
k
[1].
Àn
 = 
chunk_size
;

300 
byã_å™s„ªd
 +(
	`io˘l
(
•i_devi˚
, 
	`SPI_IOC_MESSAGE
(2), &
k
Ë- k[0].
Àn
 );

301 
	`DEBUG_PRINTF
("BURST WRITE:Åÿå™†%d # chunk %d #Åøns„ºed %d \n", 
size_to_do
, 
chunk_size
, 
byã_å™s„ªd
);

302 
size_to_do
 -
chunk_size
;

306 i‡(
byã_å™s„ªd
 !
size
) {

307 
	`DEBUG_MSG
("ERROR: SPI BURST WRITE FAILURE\n");

308  
LGW_SPI_ERROR
;

310 
	`DEBUG_MSG
("Note: SPI burst write success\n");

311  
LGW_SPI_SUCCESS
;

313 
	}
}

318 
	$lgw_•i_rb
(*
•i_èrgë
, 
uöt8_t
 
•i_mux_èrgë
, 
uöt16_t
 
addªss
, uöt8_à*
d©a
, uöt16_à
size
) {

319 
•i_devi˚
;

320 
uöt8_t
 
comm™d
[4];

321 
uöt8_t
 
comm™d_size
;

322 
•i_ioc_å™s„r
 
k
[2];

323 
size_to_do
, 
chunk_size
, 
off£t
;

324 
byã_å™s„ªd
 = 0;

325 
i
;

328 
	`CHECK_NULL
(
•i_èrgë
);

329 
	`CHECK_NULL
(
d©a
);

330 i‡(
size
 == 0) {

331 
	`DEBUG_MSG
("ERROR: BURST OF NULL LENGTH\n");

332  
LGW_SPI_ERROR
;

335 
•i_devi˚
 = *(*)
•i_èrgë
;

338 i‡(
•i_mux_èrgë
 !
LGW_SPI_MUX_TARGET_SX1301
) {

339 
comm™d
[0] = 
•i_mux_èrgë
;

340 
comm™d
[1] = 
READ_ACCESS
 | ((
addªss
 >> 8) & 0x7F);

341 
comm™d
[2] = ((
addªss
 >> 0) & 0xFF);

342 
comm™d
[3] = 0x00;

343 
comm™d_size
 = 4;

345 
comm™d
[0] = 
READ_ACCESS
 | (
addªss
 & 0x7F);

346 
comm™d_size
 = 1;

348 
size_to_do
 = 
size
;

351 
	`mem£t
(&
k
, 0, (k));

352 
k
[0].
tx_buf
 = (Ë&
comm™d
[0];

353 
k
[0].
Àn
 = 
comm™d_size
;

354 
k
[0].
cs_ch™ge
 = 0;

355 
k
[1].
cs_ch™ge
 = 0;

356 
i
=0; 
size_to_do
 > 0; ++i) {

357 
chunk_size
 = (
size_to_do
 < 
LGW_BURST_CHUNK
) ? size_to_do : LGW_BURST_CHUNK;

358 
off£t
 = 
i
 * 
LGW_BURST_CHUNK
;

359 
k
[1].
rx_buf
 = ()(
d©a
 + 
off£t
);

360 
k
[1].
Àn
 = 
chunk_size
;

361 
byã_å™s„ªd
 +(
	`io˘l
(
•i_devi˚
, 
	`SPI_IOC_MESSAGE
(2), &
k
Ë- k[0].
Àn
 );

362 
	`DEBUG_PRINTF
("BURST READ:Åÿå™†%d # chunk %d #Åøns„ºed %d \n", 
size_to_do
, 
chunk_size
, 
byã_å™s„ªd
);

363 
size_to_do
 -
chunk_size
;

367 i‡(
byã_å™s„ªd
 !
size
) {

368 
	`DEBUG_MSG
("ERROR: SPI BURST READ FAILURE\n");

369  
LGW_SPI_ERROR
;

371 
	`DEBUG_MSG
("Note: SPI burstÑead success\n");

372  
LGW_SPI_SUCCESS
;

374 
	}
}

	@hal/sx1301hal/loragw_hal_sx1301.c

20 
	~<°döt.h
>

21 
	~<°dboﬁ.h
>

22 
	~<°dio.h
>

23 
	~<°rög.h
>

24 
	~<m©h.h
>

26 
	~"l‹agw_ªg.h
"

27 
	~"l‹agw_hÆ.h
"

28 
	~"l‹agw_aux.h
"

29 
	~"l‹agw_•i.h
"

30 
	~"l‹agw_lbt.h
"

31 
	~"l‹agw_ªg_sx1301.h
"

32 
	~"l‹agw_hÆ_sx1301.h
"

33 
	~"l‹agw_ødio_sx1301.h
"

38 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

39 #i‡
DEBUG_HAL
 == 1

40 
	#DEBUG_MSG
(
°r
Ë
	`Ârötf
(
°dîr
, så)

	)

41 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...Ë
	`Ârötf
(
°dîr
,"%s:%d: "fmt, 
__FUNCTION__
, 
__LINE__
,árgs)

	)

42 
	#DEBUG_ARRAY
(
a
,
b
,
c
Ëa=0;a<b;++aË
	`Ârötf
(
°dîr
,"%x.",c[a]);Ârötf(°dîr,"íd\n")

	)

43 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){
	`Ârötf
(
°dîr
,"%s:%d: ERROR~ NULL POINTER AS ARGUMENT\n", 
__FUNCTION__
, 
__LINE__
); 
LGW_HAL_ERROR
;}

	)

45 
	#DEBUG_MSG
(
°r
)

	)

46 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...)

	)

47 
	#DEBUG_ARRAY
(
a
,
b
,
c
Ëa=0;a!=0;){}

	)

48 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){ 
LGW_HAL_ERROR
;}

	)

54 
	#MCU_ARB
 0

	)

55 
	#MCU_AGC
 1

	)

56 
	#MCU_ARB_FW_BYTE
 8192

	)

57 
	#MCU_AGC_FW_BYTE
 8192

	)

58 
	#FW_VERSION_ADDR
 0x20

	)

59 
	#FW_VERSION_CAL
 2

	)

60 
	#FW_VERSION_AGC
 4

	)

61 
	#FW_VERSION_ARB
 1

	)

63 
	#TX_METADATA_NB
 16

	)

64 
	#RX_METADATA_NB
 16

	)

66 
	#AGC_CMD_WAIT
 16

	)

67 
	#AGC_CMD_ABORT
 17

	)

69 
	#MIN_LORA_PREAMBLE
 6

	)

70 
	#STD_LORA_PREAMBLE
 8

	)

71 
	#MIN_FSK_PREAMBLE
 3

	)

72 
	#STD_FSK_PREAMBLE
 5

	)

74 
	#RSSI_MULTI_BIAS
 -35

	)

75 
	#RSSI_FSK_POLY_0
 60

	)

76 
	#RSSI_FSK_POLY_1
 1.5351

	)

77 
	#RSSI_FSK_POLY_2
 0.003

	)

80 c⁄° 
uöt8_t
 
	gifmod_c⁄fig
[
LGW_IF_CHAIN_NB
] = 
LGW_IFMODEM_CONFIG
;

85 
	~"¨b_fw.v¨
"

86 
	~"agc_fw.v¨
"

87 
	~"ˇl_fw.v¨
"

98 
boﬁ
 
	grf_íabÀ
[
LGW_RF_CHAIN_NB
];

99 
uöt32_t
 
	grf_rx_‰eq
[
LGW_RF_CHAIN_NB
];

100 
	grf_rssi_off£t
[
LGW_RF_CHAIN_NB
];

101 
boﬁ
 
	grf_tx_íabÀ
[
LGW_RF_CHAIN_NB
];

102 
uöt32_t
 
	grf_tx_nŸch_‰eq
[
LGW_RF_CHAIN_NB
];

103 
lgw_ødio_ty≥_e
 
	grf_ødio_ty≥
[
LGW_RF_CHAIN_NB
];

105 
boﬁ
 
	gif_íabÀ
[
LGW_IF_CHAIN_NB
];

106 
boﬁ
 
	gif_rf_chaö
[
LGW_IF_CHAIN_NB
];

107 
öt32_t
 
	gif_‰eq
[
LGW_IF_CHAIN_NB
];

109 
uöt8_t
 
	gl‹a_mu…i_sfmask
[
LGW_MULTI_NB
];

111 
uöt8_t
 
	gl‹a_rx_bw
;

112 
uöt8_t
 
	gl‹a_rx_sf
;

113 
boﬁ
 
	gl‹a_rx_µm_off£t
;

115 
uöt8_t
 
	gfsk_rx_bw
;

116 
uöt32_t
 
	gfsk_rx_dr
;

117 
uöt8_t
 
	gfsk_sync_w‹d_size
 = 3;

118 
uöt64_t
 
	gfsk_sync_w‹d
= 0xC194C1;

120 
boﬁ
 
	gl‹aw™_public
 = 
Ál£
;

121 
uöt8_t
 
	grf_˛kout
 = 0;

122 
	g•idev_∑th
[64] = "/dev/spidev1.0";

124 
lgw_tx_gaö_lut_s
 
	gtxgaö_lut
 = {

125 .
size
 = 2,

126 .
	glut
[0] = {

127 .
dig_gaö
 = 0,

128 .
	g∑_gaö
 = 2,

129 .
	gdac_gaö
 = 3,

130 .
	gmix_gaö
 = 10,

131 .
	grf_powî
 = 14

133 .
	glut
[1] = {

134 .
dig_gaö
 = 0,

135 .
	g∑_gaö
 = 3,

136 .
	gdac_gaö
 = 3,

137 .
	gmix_gaö
 = 14,

138 .
	grf_powî
 = 27

142 
öt8_t
 
	gˇl_off£t_a_i
[8];

143 
öt8_t
 
	gˇl_off£t_a_q
[8];

144 
öt8_t
 
	gˇl_off£t_b_i
[8];

145 
öt8_t
 
	gˇl_off£t_b_q
[8];

150 
lﬂd_fúmw¨e
(
uöt8_t
 
èrgë
, uöt8_à*
fúmw¨e
, 
uöt16_t
 
size
);

152 
lgw_c⁄°™t_adju°
();

158 
	$lﬂd_fúmw¨e
(
uöt8_t
 
èrgë
, uöt8_à*
fúmw¨e
, 
uöt16_t
 
size
) {

159 
ªg_r°
;

160 
ªg_£l
;

161 
uöt8_t
 
fw_check
[8192];

162 
öt32_t
 
dummy
;

165 
	`CHECK_NULL
(
fúmw¨e
);

166 i‡(
èrgë
 =
MCU_ARB
) {

167 i‡(
size
 !
MCU_ARB_FW_BYTE
) {

168 
	`DEBUG_MSG
("ERROR~ NOT A VALID SIZE FOR MCU ARG FIRMWARE\n");

171 
ªg_r°
 = 
LGW_MCU_RST_0
;

172 
ªg_£l
 = 
LGW_MCU_SELECT_MUX_0
;

173 }i‡(
èrgë
 =
MCU_AGC
) {

174 i‡(
size
 !
MCU_AGC_FW_BYTE
) {

175 
	`DEBUG_MSG
("ERROR~ NOT A VALID SIZE FOR MCU AGC FIRMWARE\n");

178 
ªg_r°
 = 
LGW_MCU_RST_1
;

179 
ªg_£l
 = 
LGW_MCU_SELECT_MUX_1
;

181 
	`DEBUG_MSG
("ERROR~ NOT A VALID TARGET FOR LOADING FIRMWARE\n");

186 
	`lgw_sx1301_ªg_w
(
ªg_r°
, 1);

189 
	`lgw_sx1301_ªg_w
(
ªg_£l
, 0);

190 
	`lgw_sx1301_ªg_w
(
LGW_MCU_PROM_ADDR
, 0);

193 
	`lgw_sx1301_ªg_wb
(
LGW_MCU_PROM_DATA
, 
fúmw¨e
, 
size
);

196 
	`lgw_sx1301_ªg_r
–
LGW_MCU_PROM_DATA
, &
dummy
 );

197 
	`lgw_sx1301_ªg_rb
–
LGW_MCU_PROM_DATA
, 
fw_check
, 
size
 );

198 i‡(
	`memcmp
(
fúmw¨e
, 
fw_check
, 
size
) != 0) {

199 
	`¥ötf
 ("ERROR~ FaûedÅÿlﬂd fw %d\n", ()
èrgë
);

204 
	`lgw_sx1301_ªg_w
(
ªg_£l
, 1);

207 
	}
}

211 
	$lgw_c⁄°™t_adju°
() {

220 
	`lgw_sx1301_ªg_w
(
LGW_RSSI_BB_FILTER_ALPHA
,6);

221 
	`lgw_sx1301_ªg_w
(
LGW_RSSI_DEC_FILTER_ALPHA
,7);

222 
	`lgw_sx1301_ªg_w
(
LGW_RSSI_CHANN_FILTER_ALPHA
,7);

223 
	`lgw_sx1301_ªg_w
(
LGW_RSSI_BB_DEFAULT_VALUE
,23);

224 
	`lgw_sx1301_ªg_w
(
LGW_RSSI_CHANN_DEFAULT_VALUE
,85);

225 
	`lgw_sx1301_ªg_w
(
LGW_RSSI_DEC_DEFAULT_VALUE
,66);

226 
	`lgw_sx1301_ªg_w
(
LGW_DEC_GAIN_OFFSET
,7);

227 
	`lgw_sx1301_ªg_w
(
LGW_CHAN_GAIN_OFFSET
,6);

254 
	`lgw_sx1301_ªg_w
(
LGW_SNR_AVG_CST
,3);

255 i‡(
l‹aw™_public
) {

256 
	`lgw_sx1301_ªg_w
(
LGW_FRAME_SYNCH_PEAK1_POS
,3);

257 
	`lgw_sx1301_ªg_w
(
LGW_FRAME_SYNCH_PEAK2_POS
,4);

259 
	`lgw_sx1301_ªg_w
(
LGW_FRAME_SYNCH_PEAK1_POS
,1);

260 
	`lgw_sx1301_ªg_w
(
LGW_FRAME_SYNCH_PEAK2_POS
,2);

277 i‡(
l‹aw™_public
) {

278 
	`lgw_sx1301_ªg_w
(
LGW_MBWSSF_FRAME_SYNCH_PEAK1_POS
,3);

279 
	`lgw_sx1301_ªg_w
(
LGW_MBWSSF_FRAME_SYNCH_PEAK2_POS
,4);

281 
	`lgw_sx1301_ªg_w
(
LGW_MBWSSF_FRAME_SYNCH_PEAK1_POS
,1);

282 
	`lgw_sx1301_ªg_w
(
LGW_MBWSSF_FRAME_SYNCH_PEAK2_POS
,2);

291 
	`lgw_sx1301_ªg_w
(
LGW_ADJUST_MODEM_START_OFFSET_RDX4
, 1);

292 
	`lgw_sx1301_ªg_w
(
LGW_ADJUST_MODEM_START_OFFSET_SF12_RDX4
, 4094);

293 
	`lgw_sx1301_ªg_w
(
LGW_CORR_MAC_GAIN
, 7);

296 
	`lgw_sx1301_ªg_w
(
LGW_FSK_RX_INVERT
,1);

297 
	`lgw_sx1301_ªg_w
(
LGW_FSK_MODEM_INVERT_IQ
,1);

300 
	`lgw_sx1301_ªg_w
(
LGW_FSK_RSSI_LENGTH
,4);

301 
	`lgw_sx1301_ªg_w
(
LGW_FSK_PKT_MODE
,1);

302 
	`lgw_sx1301_ªg_w
(
LGW_FSK_CRC_EN
,1);

303 
	`lgw_sx1301_ªg_w
(
LGW_FSK_DCFREE_ENC
,2);

305 
	`lgw_sx1301_ªg_w
(
LGW_FSK_ERROR_OSR_TOL
,10);

306 
	`lgw_sx1301_ªg_w
(
LGW_FSK_PKT_LENGTH
,255);

310 
	`lgw_sx1301_ªg_w
(
LGW_FSK_PATTERN_TIMEOUT_CFG
,128);

313 
	`lgw_sx1301_ªg_w
(
LGW_TX_START_DELAY
, 
TX_START_DELAY_DEFAULT
);

317 
	`lgw_sx1301_ªg_w
(
LGW_TX_SWAP_IQ
,1);

318 i‡(
l‹aw™_public
) {

319 
	`lgw_sx1301_ªg_w
(
LGW_TX_FRAME_SYNCH_PEAK1_POS
,3);

320 
	`lgw_sx1301_ªg_w
(
LGW_TX_FRAME_SYNCH_PEAK2_POS
,4);

322 
	`lgw_sx1301_ªg_w
(
LGW_TX_FRAME_SYNCH_PEAK1_POS
,1);

323 
	`lgw_sx1301_ªg_w
(
LGW_TX_FRAME_SYNCH_PEAK2_POS
,2);

328 
	`lgw_sx1301_ªg_w
(
LGW_FSK_TX_GAUSSIAN_SELECT_BT
,2);

333 
	}
}

338 
	$lgw_bﬂrd_sx1301_£tc⁄f
(
lgw_c⁄f_bﬂrd_s
 *
c⁄f
) {

341 i‡(
lgw_is_°¨ãd
 =
åue
) {

342 
	`DEBUG_MSG
("ERROR~ CONCENTRATOR IS RUNNING, STOP IT BEFORE TOUCHING CONFIGURATION\n");

343  
LGW_HAL_ERROR
;

347 
l‹aw™_public
 = 
c⁄f
->lorawan_public;

348 
rf_˛kout
 = 
c⁄f
->
˛k§c
;

349 
	`°r˝y
(
•idev_∑th
, 
c⁄f
->spidev_path);

351 
	`DEBUG_PRINTF
("NŸe: bﬂrd c⁄figuøti⁄;Ü‹aw™_public:%d, clk§c:%d\n", 
l‹aw™_public
, 
rf_˛kout
);

353  
LGW_HAL_SUCCESS
;

354 
	}
}

358 
	$lgw_rxrf_sx1301_£tc⁄f
(
uöt8_t
 
rf_chaö
, 
lgw_c⁄f_rxrf_s
 *
c⁄f
) {

361 i‡(
lgw_is_°¨ãd
 =
åue
) {

362 
	`DEBUG_MSG
("ERROR~ CONCENTRATOR IS RUNNING, STOP IT BEFORE TOUCHING CONFIGURATION\n");

363  
LGW_HAL_ERROR
;

367 i‡(
rf_chaö
 >
LGW_RF_CHAIN_NB
) {

368 
	`DEBUG_MSG
("ERROR~ NOT A VALID RF_CHAIN NUMBER\n");

369  
LGW_HAL_ERROR
;

373 i‡((
c⁄f
->
ty≥
 !
LGW_RADIO_TYPE_SX1255
Ë&& (c⁄f->ty≥ !
LGW_RADIO_TYPE_SX1257
)) {

374 
	`DEBUG_MSG
("ERROR~ NOT A VALID RADIO TYPE\n");

375  
LGW_HAL_ERROR
;

379 i‡((
c⁄f
->
tx_íabÀ
 =
åue
Ë&& ((c⁄f->
tx_nŸch_‰eq
 < 
LGW_MIN_NOTCH_FREQ
Ë|| (c⁄f->tx_nŸch_‰eq > 
LGW_MAX_NOTCH_FREQ
))) {

380 
	`DEBUG_PRINTF
("WARNING: NOT A VALID TX NOTCH FILTER FREQUENCY [%u..%u]Hz\n", 
LGW_MIN_NOTCH_FREQ
, 
LGW_MAX_NOTCH_FREQ
);

381 
c⁄f
->
tx_nŸch_‰eq
 = 0;

385 
rf_íabÀ
[
rf_chaö
] = 
c⁄f
->
íabÀ
;

386 
rf_rx_‰eq
[
rf_chaö
] = 
c⁄f
->
‰eq_hz
;

387 
rf_rssi_off£t
[
rf_chaö
] = 
c⁄f
->
rssi_off£t
;

388 
rf_ødio_ty≥
[
rf_chaö
] = 
c⁄f
->
ty≥
;

389 
rf_tx_íabÀ
[
rf_chaö
] = 
c⁄f
->
tx_íabÀ
;

390 
rf_tx_nŸch_‰eq
[
rf_chaö
] = 
c⁄f
->
tx_nŸch_‰eq
;

392 
	`DEBUG_PRINTF
("NŸe:Ñf_chaö %d c⁄figuøti⁄;Én:%d fªq:%dÑssi_off£t:%‡ødio_ty≥:%dÅx_íabÀ:%dÅx_nŸch_‰eq:%u\n", 
rf_chaö
, 
rf_íabÀ
[rf_chaö], 
rf_rx_‰eq
[rf_chaö], 
rf_rssi_off£t
[rf_chaö], 
rf_ødio_ty≥
[rf_chaö], 
rf_tx_íabÀ
[rf_chaö], 
rf_tx_nŸch_‰eq
[rf_chain]);

394  
LGW_HAL_SUCCESS
;

395 
	}
}

399 
	$lgw_rxif_sx1301_£tc⁄f
(
uöt8_t
 
if_chaö
, 
lgw_c⁄f_rxif_s
 *
c⁄f
) {

400 
öt32_t
 
bw_hz
;

401 
uöt32_t
 
rf_rx_b™dwidth
;

404 i‡(
lgw_is_°¨ãd
 =
åue
) {

405 
	`DEBUG_MSG
("ERROR~ CONCENTRATOR IS RUNNING, STOP IT BEFORE TOUCHING CONFIGURATION\n");

406  
LGW_HAL_ERROR
;

410 i‡(
if_chaö
 >
LGW_IF_CHAIN_NB
) {

411 
	`DEBUG_PRINTF
("ERROR~ %d NOT A VALID IF_CHAIN NUMBER\n", 
if_chaö
);

412  
LGW_HAL_ERROR
;

416 i‡(
c⁄f
->
íabÀ
 =
Ál£
) {

417 
if_íabÀ
[
if_chaö
] = 
Ál£
;

418 
if_‰eq
[
if_chaö
] = 0;

419 
	`DEBUG_PRINTF
("NŸe: if_chaö %d dißbÀd\n", 
if_chaö
);

420  
LGW_HAL_SUCCESS
;

424 i‡(
ifmod_c⁄fig
[
if_chaö
] =
IF_UNDEFINED
) {

425 
	`DEBUG_PRINTF
("ERROR~ IF CHAIN %d NOT CONFIGURABLE\n", 
if_chaö
);

427 i‡(
c⁄f
->
rf_chaö
 >
LGW_RF_CHAIN_NB
) {

428 
	`DEBUG_MSG
("ERROR~ INVALID RF_CHAIN TO ASSOCIATE WITH A LORA_STD IF CHAIN\n");

429  
LGW_HAL_ERROR
;

432 
c⁄f
->
b™dwidth
) {

433 
BW_250KHZ
:

434 
rf_rx_b™dwidth
 = 
LGW_RF_RX_BANDWIDTH_250KHZ
;

436 
BW_500KHZ
:

437 
rf_rx_b™dwidth
 = 
LGW_RF_RX_BANDWIDTH_500KHZ
;

441 
rf_rx_b™dwidth
 = 
LGW_RF_RX_BANDWIDTH_125KHZ
;

444 
bw_hz
 = 
	`lgw_bw_gëvÆ
(
c⁄f
->
b™dwidth
);

445 i‡((
c⁄f
->
‰eq_hz
 + ((
bw_hz
==-1)?
LGW_REF_BW
:bw_hz)/2Ë> ((
öt32_t
)
rf_rx_b™dwidth
/2)) {

446 
	`DEBUG_PRINTF
("ERROR~ IF FREQUENCY %d TOO HIGH\n", 
c⁄f
->
‰eq_hz
);

447  
LGW_HAL_ERROR
;

448 } i‡((
c⁄f
->
‰eq_hz
 - ((
bw_hz
==-1)?
LGW_REF_BW
:bw_hz)/2Ë< -((
öt32_t
)
rf_rx_b™dwidth
/2)) {

449 
	`DEBUG_PRINTF
("ERROR~ IF FREQUENCY %d TOO LOW\n", 
c⁄f
->
‰eq_hz
);

450  
LGW_HAL_ERROR
;

455 
ifmod_c⁄fig
[
if_chaö
]) {

456 
IF_LORA_STD
:

458 i‡(
c⁄f
->
b™dwidth
 =
BW_UNDEFINED
) {

459 
c⁄f
->
b™dwidth
 = 
BW_250KHZ
;

461 i‡(
c⁄f
->
d©¨©e
 =
DR_UNDEFINED
) {

462 
c⁄f
->
d©¨©e
 = 
DR_LORA_SF9
;

465 i‡(!
	`IS_LORA_BW
(
c⁄f
->
b™dwidth
)) {

466 
	`DEBUG_MSG
("ERROR~ BANDWIDTH NOT SUPPORTED BY LORA_STD IF CHAIN\n");

467  
LGW_HAL_ERROR
;

469 i‡(!
	`IS_LORA_STD_DR
(
c⁄f
->
d©¨©e
)) {

470 
	`DEBUG_MSG
("ERROR~ DATARATE NOT SUPPORTED BY LORA_STD IF CHAIN\n");

471  
LGW_HAL_ERROR
;

474 
if_íabÀ
[
if_chaö
] = 
c⁄f
->
íabÀ
;

475 
if_rf_chaö
[
if_chaö
] = 
c⁄f
->
rf_chaö
;

476 
if_‰eq
[
if_chaö
] = 
c⁄f
->
‰eq_hz
;

477 
l‹a_rx_bw
 = 
c⁄f
->
b™dwidth
;

478 
l‹a_rx_sf
 = (
uöt8_t
)(
DR_LORA_MULTI
 & 
c⁄f
->
d©¨©e
);

479 i‡(
	`SET_PPM_ON
(
c⁄f
->
b™dwidth
, c⁄f->
d©¨©e
)) {

480 
l‹a_rx_µm_off£t
 = 
åue
;

482 
l‹a_rx_µm_off£t
 = 
Ál£
;

485 
	`DEBUG_PRINTF
("NŸe: LoR®'°d' if_chaö %d c⁄figuøti⁄;Én:%d fªq:%d bw:%d dr:%d\n", 
if_chaö
, 
if_íabÀ
[if_chaö], 
if_‰eq
[if_chaö], 
l‹a_rx_bw
, 
l‹a_rx_sf
);

488 
IF_LORA_MULTI
:

490 i‡(
c⁄f
->
b™dwidth
 =
BW_UNDEFINED
) {

491 
c⁄f
->
b™dwidth
 = 
BW_125KHZ
;

493 i‡(
c⁄f
->
d©¨©e
 =
DR_UNDEFINED
) {

494 
c⁄f
->
d©¨©e
 = 
DR_LORA_MULTI
;

497 i‡(
c⁄f
->
b™dwidth
 !
BW_125KHZ
) {

498 
	`DEBUG_MSG
("ERROR~ BANDWIDTH NOT SUPPORTED BY LORA_MULTI IF CHAIN\n");

499  
LGW_HAL_ERROR
;

501 i‡(!
	`IS_LORA_MULTI_DR
(
c⁄f
->
d©¨©e
)) {

502 
	`DEBUG_MSG
("ERROR~ DATARATE(S) NOT SUPPORTED BY LORA_MULTI IF CHAIN\n");

503  
LGW_HAL_ERROR
;

506 
if_íabÀ
[
if_chaö
] = 
c⁄f
->
íabÀ
;

507 
if_rf_chaö
[
if_chaö
] = 
c⁄f
->
rf_chaö
;

508 
if_‰eq
[
if_chaö
] = 
c⁄f
->
‰eq_hz
;

509 
l‹a_mu…i_sfmask
[
if_chaö
] = (
uöt8_t
)(
DR_LORA_MULTI
 & 
c⁄f
->
d©¨©e
);

511 
	`DEBUG_PRINTF
("NŸe: LoR®'mu…i' if_chaö %d c⁄figuøti⁄;Én:%d fªq:%d SF_mask:0x%02x\n", 
if_chaö
, 
if_íabÀ
[if_chaö], 
if_‰eq
[if_chaö], 
l‹a_mu…i_sfmask
[if_chain]);

514 
IF_FSK_STD
:

516 i‡(
c⁄f
->
b™dwidth
 =
BW_UNDEFINED
) {

517 
c⁄f
->
b™dwidth
 = 
BW_250KHZ
;

519 i‡(
c⁄f
->
d©¨©e
 =
DR_UNDEFINED
) {

520 
c⁄f
->
d©¨©e
 = 64000;

523 if(!
	`IS_FSK_BW
(
c⁄f
->
b™dwidth
)) {

524 
	`DEBUG_MSG
("ERROR~ BANDWIDTH NOT SUPPORTED BY FSK IF CHAIN\n");

525  
LGW_HAL_ERROR
;

527 if(!
	`IS_FSK_DR
(
c⁄f
->
d©¨©e
)) {

528 
	`DEBUG_MSG
("ERROR~ DATARATE NOT SUPPORTED BY FSK IF CHAIN\n");

529  
LGW_HAL_ERROR
;

532 
if_íabÀ
[
if_chaö
] = 
c⁄f
->
íabÀ
;

533 
if_rf_chaö
[
if_chaö
] = 
c⁄f
->
rf_chaö
;

534 
if_‰eq
[
if_chaö
] = 
c⁄f
->
‰eq_hz
;

535 
fsk_rx_bw
 = 
c⁄f
->
b™dwidth
;

536 
fsk_rx_dr
 = 
c⁄f
->
d©¨©e
;

537 i‡(
c⁄f
->
sync_w‹d
 > 0) {

538 
fsk_sync_w‹d_size
 = 
c⁄f
->
sync_w‹d_size
;

539 
fsk_sync_w‹d
 = 
c⁄f
->
sync_w‹d
;

541 
	`DEBUG_PRINTF
("NŸe: FSK if_chaö %d c⁄figuøti⁄;Én:%d fªq:%d bw:%d dr:%d (%dÑó»drËsync:0x%0*ŒX\n", 
if_chaö
, 
if_íabÀ
[if_chaö], 
if_‰eq
[if_chaö], 
fsk_rx_bw
, 
fsk_rx_dr
, 
LGW_XTAL_FREQU
/(LGW_XTAL_FREQU/fsk_rx_dr), 2*
fsk_sync_w‹d_size
, 
fsk_sync_w‹d
);

545 
	`DEBUG_PRINTF
("ERROR~ IF CHAIN %d TYPE NOT SUPPORTED\n", 
if_chaö
);

546  
LGW_HAL_ERROR
;

549  
LGW_HAL_SUCCESS
;

550 
	}
}

554 
	$lgw_txgaö_sx1301_£tc⁄f
(
uöt8_t
 
rf_chaö
, 
lgw_tx_gaö_lut_s
 *
c⁄f
) {

555 
i
;

557 i‡(
rf_chaö
 >
LGW_RF_CHAIN_NB
) {

558 
	`DEBUG_MSG
("ERROR: NOT A VALID RF_CHAIN NUMBER\n");

559  
LGW_HAL_ERROR
;

563 i‡((
c⁄f
->
size
 < 1Ë|| (c⁄f->sizê> 
TX_GAIN_LUT_SIZE_MAX
)) {

564 
	`DEBUG_PRINTF
("ERROR~ TX gaö LUT mu° havê©Üó° o√É¡ryánd maximum %dÉ¡rõs\n", 
TX_GAIN_LUT_SIZE_MAX
);

565  
LGW_HAL_ERROR
;

568 
txgaö_lut
.
size
 = 
c⁄f
->size;

570 
i
 = 0; i < 
txgaö_lut
.
size
; i++) {

572 i‡(
c⁄f
->
lut
[
i
].
dig_gaö
 > 3) {

573 
	`DEBUG_MSG
("ERROR~ TX gain LUT: SX1301 digital gain must be between 0ánd 3\n");

574  
LGW_HAL_ERROR
;

576 i‡(
c⁄f
->
lut
[
i
].
dac_gaö
 != 3) {

577 
	`DEBUG_MSG
("ERROR~ TX gain LUT: SX1257 DAC gains != 3áreÇot supported\n");

578  
LGW_HAL_ERROR
;

580 i‡(
c⁄f
->
lut
[
i
].
mix_gaö
 > 15) {

581 
	`DEBUG_MSG
("ERROR~ TX gain LUT: SX1257 mixer gain mustÇotÉxceed 15\n");

582  
LGW_HAL_ERROR
;

583 } i‡(
c⁄f
->
lut
[
i
].
mix_gaö
 < 8) {

584 
	`DEBUG_MSG
("ERROR~ TX gain LUT: SX1257 mixer gains < 8áreÇot supported\n");

585  
LGW_HAL_ERROR
;

587 i‡(
c⁄f
->
lut
[
i
].
∑_gaö
 > 3) {

588 
	`DEBUG_MSG
("ERROR~ TX gain LUT: External PA gain mustÇotÉxceed 3\n");

589  
LGW_HAL_ERROR
;

593 
txgaö_lut
.
lut
[
i
].
dig_gaö
 = 
c⁄f
->lut[i].dig_gain;

594 
txgaö_lut
.
lut
[
i
].
dac_gaö
 = 
c⁄f
->lut[i].dac_gain;

595 
txgaö_lut
.
lut
[
i
].
mix_gaö
 = 
c⁄f
->lut[i].mix_gain;

596 
txgaö_lut
.
lut
[
i
].
∑_gaö
 = 
c⁄f
->lut[i].pa_gain;

597 
txgaö_lut
.
lut
[
i
].
rf_powî
 = 
c⁄f
->lut[i].rf_power;

600  
LGW_HAL_SUCCESS
;

601 
	}
}

605 
	$lgw_sx1301_°¨t
() {

606 
i
, 
îr
;

607 
ªg_°©
;

608 
x
;

609 
uöt8_t
 
ødio_£À˘
;

610 
öt32_t
 
ªad_vÆ
;

611 
uöt8_t
 
lﬂd_vÆ
;

612 
uöt8_t
 
fw_vîsi⁄
;

613 
uöt8_t
 
ˇl_cmd
;

614 
uöt16_t
 
ˇl_time
;

615 
uöt8_t
 
ˇl_°©us
;

617 
uöt64_t
 
fsk_sync_w‹d_ªg
;

619 i‡(
lgw_is_°¨ãd
 =
åue
) {

620 
	`DEBUG_MSG
("Note: LoRa concentratorálready started,Ñestarting itÇow\n");

623 
ªg_°©
 = 
	`lgw_sx1301_c⁄√˘
(
•idev_∑th
);

624 i‡(
ªg_°©
 =
LGW_REG_ERROR
) {

625 
	`DEBUG_MSG
("ERROR~ FAIL TO CONNECT BOARD\n");

626  
LGW_HAL_ERROR
;

630 
	`lgw_sx1301_ª£t
();

633 
	`lgw_sx1301_ªg_w
(
LGW_GLOBAL_EN
, 0);

634 
	`lgw_sx1301_ªg_w
(
LGW_CLK32M_EN
, 0);

637 
	`lgw_sx1301_ªg_w
(
LGW_RADIO_A_EN
,1);

638 
	`lgw_sx1301_ªg_w
(
LGW_RADIO_B_EN
,1);

639 
	`waô_ms
(500);

640 
	`lgw_sx1301_ªg_w
(
LGW_RADIO_RST
,1);

641 
	`waô_ms
(5);

642 
	`lgw_sx1301_ªg_w
(
LGW_RADIO_RST
,0);

645 
îr
 = 
	`lgw_£tup_sx125x
(0, 
rf_˛kout
, 
rf_íabÀ
[0], 
rf_ødio_ty≥
[0], 
rf_rx_‰eq
[0]);

646 i‡(
îr
 != 0) {

647 
	`DEBUG_MSG
("ERROR~ FailedÅo setup sx125xÑadio for RF chain 0\n");

648  
LGW_HAL_ERROR
;

650 
îr
 = 
	`lgw_£tup_sx125x
(1, 
rf_˛kout
, 
rf_íabÀ
[1], 
rf_ødio_ty≥
[1], 
rf_rx_‰eq
[1]);

651 i‡(
îr
 != 0) {

652 
	`DEBUG_MSG
("ERROR~ FailedÅo setup sx125xÑadio for RF chain 0\n");

653  
LGW_HAL_ERROR
;

657 
	`lgw_sx1301_ªg_w
(
LGW_GPIO_MODE
,31);

658 
	`lgw_sx1301_ªg_w
(
LGW_GPIO_SELECT_OUTPUT
,2);

661 i‡(
	`lbt_is_íabÀd
(Ë=
åue
) {

662 
	`lgw_sx1301_ªg_w
(
LGW_CLK32M_EN
, 1);

672 
	`lgw_sx1301_ªg_w
(
LGW_CLK32M_EN
, 0);

673 
i
 = 
	`lbt_°¨t
();

674 i‡(
i
 !
LGW_LBT_SUCCESS
) {

675 
	`DEBUG_MSG
("ERROR~Übt_start() didÇotÑeturn SUCCESS\n");

676  
LGW_HAL_ERROR
;

681 
	`lgw_sx1301_ªg_w
(
LGW_GLOBAL_EN
, 1);

682 
	`lgw_sx1301_ªg_w
(
LGW_CLK32M_EN
, 1);

693 
ˇl_cmd
 = 0;

694 
ˇl_cmd
 |
rf_íabÀ
[0] ? 0x01 : 0x00;

695 
ˇl_cmd
 |
rf_íabÀ
[1] ? 0x02 : 0x00;

696 
ˇl_cmd
 |(
rf_íabÀ
[0] && 
rf_tx_íabÀ
[0]) ? 0x04 : 0x00;

697 
ˇl_cmd
 |(
rf_íabÀ
[1] && 
rf_tx_íabÀ
[1]) ? 0x08 : 0x00;

698 
ˇl_cmd
 |= 0x10;

700 
rf_ødio_ty≥
[0]) {

701 
LGW_RADIO_TYPE_SX1255
:

702 
ˇl_cmd
 |= 0x20;

704 
LGW_RADIO_TYPE_SX1257
:

705 
ˇl_cmd
 |= 0x00;

708 
	`DEBUG_PRINTF
("ERROR~ UNEXPECTED VALUE %d FOR RADIO TYPE\n", 
rf_ødio_ty≥
[0]);

712 
ˇl_cmd
 |= 0x00;

713 
ˇl_time
 = 2300;

716 
	`lﬂd_fúmw¨e
(
MCU_AGC
, 
ˇl_fúmw¨e
, 
MCU_AGC_FW_BYTE
);

717 
	`lgw_sx1301_ªg_w
(
LGW_FORCE_HOST_RADIO_CTRL
, 0);

718 
	`lgw_sx1301_ªg_w
(
LGW_RADIO_SELECT
, 
ˇl_cmd
);

719 
	`lgw_sx1301_ªg_w
(
LGW_MCU_RST_1
, 0);

722 
	`lgw_sx1301_ªg_w
(
LGW_DBG_AGC_MCU_RAM_ADDR
, 
FW_VERSION_ADDR
);

723 
	`lgw_sx1301_ªg_r
(
LGW_DBG_AGC_MCU_RAM_DATA
, &
ªad_vÆ
);

724 
fw_vîsi⁄
 = (
uöt8_t
)
ªad_vÆ
;

725 i‡(
fw_vîsi⁄
 !
FW_VERSION_CAL
) {

726 
	`¥ötf
("ERROR~ Vîsi⁄ o‡ˇlibøti⁄ fúmw¨ênŸÉx≥˘ed,á˘uÆ:%dÉx≥˘ed:%d\n", 
fw_vîsi⁄
, 
FW_VERSION_CAL
);

730 
	`lgw_sx1301_ªg_w
(
LGW_PAGE_REG
, 3);

731 
	`lgw_sx1301_ªg_w
(
LGW_EMERGENCY_FORCE_HOST_CTRL
, 0);

734 
	`DEBUG_PRINTF
("NŸe: cÆibøti⁄ sèπed (time: %u ms)\n", 
ˇl_time
);

735 
	`waô_ms
(
ˇl_time
);

736 
	`lgw_sx1301_ªg_w
(
LGW_EMERGENCY_FORCE_HOST_CTRL
, 1);

739 
	`lgw_sx1301_ªg_r
(
LGW_MCU_AGC_STATUS
, &
ªad_vÆ
);

740 
ˇl_°©us
 = (
uöt8_t
)
ªad_vÆ
;

751 i‡((
ˇl_°©us
 & 0x81) != 0x81) {

752 
	`DEBUG_PRINTF
("ERROR~ CALIBRATION FAILURE (STATUS = %u)\n", 
ˇl_°©us
);

753  
LGW_HAL_ERROR
;

755 
	`DEBUG_PRINTF
("NŸe: cÆibøti⁄ föished (°©u†%u)\n", 
ˇl_°©us
);

757 i‡(
rf_íabÀ
[0] && ((
ˇl_°©us
 & 0x02) == 0)) {

758 
	`DEBUG_MSG
("WARNING: calibration couldÇotáccessÑadio A\n");

760 i‡(
rf_íabÀ
[1] && ((
ˇl_°©us
 & 0x04) == 0)) {

761 
	`DEBUG_MSG
("WARNING: calibration couldÇotáccessÑadio B\n");

763 i‡(
rf_íabÀ
[0] && ((
ˇl_°©us
 & 0x08) == 0)) {

764 
	`DEBUG_MSG
("WARNING:Öroblem in calibration ofÑadio A for imageÑejection\n");

766 i‡(
rf_íabÀ
[1] && ((
ˇl_°©us
 & 0x10) == 0)) {

767 
	`DEBUG_MSG
("WARNING:Öroblem in calibration ofÑadio B for imageÑejection\n");

769 i‡(
rf_íabÀ
[0] && 
rf_tx_íabÀ
[0] && ((
ˇl_°©us
 & 0x20) == 0)) {

770 
	`DEBUG_MSG
("WARNING:Öroblem in calibration ofÑadio A for TX DC offset\n");

772 i‡(
rf_íabÀ
[1] && 
rf_tx_íabÀ
[1] && ((
ˇl_°©us
 & 0x40) == 0)) {

773 
	`DEBUG_MSG
("WARNING:Öroblem in calibration ofÑadio B for TX DC offset\n");

777 
i
=0; i<=7; ++i) {

778 
	`lgw_sx1301_ªg_w
(
LGW_DBG_AGC_MCU_RAM_ADDR
, 0xA0+
i
);

779 
	`lgw_sx1301_ªg_r
(
LGW_DBG_AGC_MCU_RAM_DATA
, &
ªad_vÆ
);

780 
ˇl_off£t_a_i
[
i
] = (
öt8_t
)
ªad_vÆ
;

781 
	`lgw_sx1301_ªg_w
(
LGW_DBG_AGC_MCU_RAM_ADDR
, 0xA8+
i
);

782 
	`lgw_sx1301_ªg_r
(
LGW_DBG_AGC_MCU_RAM_DATA
, &
ªad_vÆ
);

783 
ˇl_off£t_a_q
[
i
] = (
öt8_t
)
ªad_vÆ
;

784 
	`lgw_sx1301_ªg_w
(
LGW_DBG_AGC_MCU_RAM_ADDR
, 0xB0+
i
);

785 
	`lgw_sx1301_ªg_r
(
LGW_DBG_AGC_MCU_RAM_DATA
, &
ªad_vÆ
);

786 
ˇl_off£t_b_i
[
i
] = (
öt8_t
)
ªad_vÆ
;

787 
	`lgw_sx1301_ªg_w
(
LGW_DBG_AGC_MCU_RAM_ADDR
, 0xB8+
i
);

788 
	`lgw_sx1301_ªg_r
(
LGW_DBG_AGC_MCU_RAM_DATA
, &
ªad_vÆ
);

789 
ˇl_off£t_b_q
[
i
] = (
öt8_t
)
ªad_vÆ
;

793 
	`lgw_c⁄°™t_adju°
();

796 i‡(
rf_rx_‰eq
[0] == 0) {

797 
	`DEBUG_MSG
("ERROR~ wrong configuration,Ñf_rx_freq[0] isÇot set\n");

798  
LGW_HAL_ERROR
;

802 
x
 = 4096000000 / (
rf_rx_‰eq
[0] >> 1);

803 
x
 = ( x > 63 ) ? 63 : x;

804 
	`lgw_sx1301_ªg_w
(
LGW_FREQ_TO_TIME_DRIFT
, 
x
);

806 
x
 = 4096000000 / (
rf_rx_‰eq
[0] >> 3);

807 
x
 = ( x > 63 ) ? 63 : x;

808 
	`lgw_sx1301_ªg_w
(
LGW_MBWSSF_FREQ_TO_TIME_DRIFT
, 
x
);

811 
ødio_£À˘
 = 0;

812 
i
=0; i<
LGW_MULTI_NB
; ++i) {

813 
ødio_£À˘
 +(
if_rf_chaö
[
i
] == 1 ? 1 << i : 0);

822 
	`lgw_sx1301_ªg_w
(
LGW_IF_FREQ_0
, 
	`IF_HZ_TO_REG
(
if_‰eq
[0]));

823 
	`lgw_sx1301_ªg_w
(
LGW_IF_FREQ_1
, 
	`IF_HZ_TO_REG
(
if_‰eq
[1]));

824 
	`lgw_sx1301_ªg_w
(
LGW_IF_FREQ_2
, 
	`IF_HZ_TO_REG
(
if_‰eq
[2]));

825 
	`lgw_sx1301_ªg_w
(
LGW_IF_FREQ_3
, 
	`IF_HZ_TO_REG
(
if_‰eq
[3]));

826 
	`lgw_sx1301_ªg_w
(
LGW_IF_FREQ_4
, 
	`IF_HZ_TO_REG
(
if_‰eq
[4]));

827 
	`lgw_sx1301_ªg_w
(
LGW_IF_FREQ_5
, 
	`IF_HZ_TO_REG
(
if_‰eq
[5]));

828 
	`lgw_sx1301_ªg_w
(
LGW_IF_FREQ_6
, 
	`IF_HZ_TO_REG
(
if_‰eq
[6]));

829 
	`lgw_sx1301_ªg_w
(
LGW_IF_FREQ_7
, 
	`IF_HZ_TO_REG
(
if_‰eq
[7]));

831 
	`lgw_sx1301_ªg_w
(
LGW_CORR0_DETECT_EN
, (
if_íabÀ
[0] =
åue
Ë? 
l‹a_mu…i_sfmask
[0] : 0);

832 
	`lgw_sx1301_ªg_w
(
LGW_CORR1_DETECT_EN
, (
if_íabÀ
[1] =
åue
Ë? 
l‹a_mu…i_sfmask
[1] : 0);

833 
	`lgw_sx1301_ªg_w
(
LGW_CORR2_DETECT_EN
, (
if_íabÀ
[2] =
åue
Ë? 
l‹a_mu…i_sfmask
[2] : 0);

834 
	`lgw_sx1301_ªg_w
(
LGW_CORR3_DETECT_EN
, (
if_íabÀ
[3] =
åue
Ë? 
l‹a_mu…i_sfmask
[3] : 0);

835 
	`lgw_sx1301_ªg_w
(
LGW_CORR4_DETECT_EN
, (
if_íabÀ
[4] =
åue
Ë? 
l‹a_mu…i_sfmask
[4] : 0);

836 
	`lgw_sx1301_ªg_w
(
LGW_CORR5_DETECT_EN
, (
if_íabÀ
[5] =
åue
Ë? 
l‹a_mu…i_sfmask
[5] : 0);

837 
	`lgw_sx1301_ªg_w
(
LGW_CORR6_DETECT_EN
, (
if_íabÀ
[6] =
åue
Ë? 
l‹a_mu…i_sfmask
[6] : 0);

838 
	`lgw_sx1301_ªg_w
(
LGW_CORR7_DETECT_EN
, (
if_íabÀ
[7] =
åue
Ë? 
l‹a_mu…i_sfmask
[7] : 0);

840 
	`lgw_sx1301_ªg_w
(
LGW_PPM_OFFSET
, 0x60);

842 
	`lgw_sx1301_ªg_w
(
LGW_CONCENTRATOR_MODEM_ENABLE
, 1);

845 
	`lgw_sx1301_ªg_w
(
LGW_IF_FREQ_8
, 
	`IF_HZ_TO_REG
(
if_‰eq
[8]));

846 i‡(
if_íabÀ
[8] =
åue
) {

847 
	`lgw_sx1301_ªg_w
(
LGW_MBWSSF_RADIO_SELECT
, 
if_rf_chaö
[8]);

848 
l‹a_rx_bw
) {

849 
BW_125KHZ
: 
	`lgw_sx1301_ªg_w
(
LGW_MBWSSF_MODEM_BW
, 0); ;

850 
BW_250KHZ
: 
	`lgw_sx1301_ªg_w
(
LGW_MBWSSF_MODEM_BW
, 1); ;

851 
BW_500KHZ
: 
	`lgw_sx1301_ªg_w
(
LGW_MBWSSF_MODEM_BW
, 2); ;

853 
	`DEBUG_PRINTF
("ERROR~ UNEXPECTED VALUE %d IN SWITCH STATEMENT\n", 
l‹a_rx_bw
);

854  
LGW_HAL_ERROR
;

856 
l‹a_rx_sf
) {

857 
DR_LORA_SF7
: 
	`lgw_sx1301_ªg_w
(
LGW_MBWSSF_RATE_SF
, 7); ;

858 
DR_LORA_SF8
: 
	`lgw_sx1301_ªg_w
(
LGW_MBWSSF_RATE_SF
, 8); ;

859 
DR_LORA_SF9
: 
	`lgw_sx1301_ªg_w
(
LGW_MBWSSF_RATE_SF
, 9); ;

860 
DR_LORA_SF10
: 
	`lgw_sx1301_ªg_w
(
LGW_MBWSSF_RATE_SF
, 10); ;

861 
DR_LORA_SF11
: 
	`lgw_sx1301_ªg_w
(
LGW_MBWSSF_RATE_SF
, 11); ;

862 
DR_LORA_SF12
: 
	`lgw_sx1301_ªg_w
(
LGW_MBWSSF_RATE_SF
, 12); ;

864 
	`DEBUG_PRINTF
("ERROR~ UNEXPECTED VALUE %d IN SWITCH STATEMENT\n", 
l‹a_rx_sf
);

865  
LGW_HAL_ERROR
;

867 
	`lgw_sx1301_ªg_w
(
LGW_MBWSSF_PPM_OFFSET
, 
l‹a_rx_µm_off£t
);

868 
	`lgw_sx1301_ªg_w
(
LGW_MBWSSF_MODEM_ENABLE
, 1);

870 
	`lgw_sx1301_ªg_w
(
LGW_MBWSSF_MODEM_ENABLE
, 0);

874 
	`lgw_sx1301_ªg_w
(
LGW_IF_FREQ_9
, 
	`IF_HZ_TO_REG
(
if_‰eq
[9]));

875 
	`lgw_sx1301_ªg_w
(
LGW_FSK_PSIZE
, 
fsk_sync_w‹d_size
-1);

876 
	`lgw_sx1301_ªg_w
(
LGW_FSK_TX_PSIZE
, 
fsk_sync_w‹d_size
-1);

877 
fsk_sync_w‹d_ªg
 = 
fsk_sync_w‹d
 << (8 * (8 - 
fsk_sync_w‹d_size
));

878 
	`lgw_sx1301_ªg_w
(
LGW_FSK_REF_PATTERN_LSB
, (
uöt32_t
)(0xFFFFFFFF & 
fsk_sync_w‹d_ªg
));

879 
	`lgw_sx1301_ªg_w
(
LGW_FSK_REF_PATTERN_MSB
, (
uöt32_t
)(0xFFFFFFFF & (
fsk_sync_w‹d_ªg
 >> 32)));

880 i‡(
if_íabÀ
[9] =
åue
) {

881 
	`lgw_sx1301_ªg_w
(
LGW_FSK_RADIO_SELECT
, 
if_rf_chaö
[9]);

882 
	`lgw_sx1301_ªg_w
(
LGW_FSK_BR_RATIO
, 
LGW_XTAL_FREQU
/
fsk_rx_dr
);

883 
	`lgw_sx1301_ªg_w
(
LGW_FSK_CH_BW_EXPO
, 
fsk_rx_bw
);

884 
	`lgw_sx1301_ªg_w
(
LGW_FSK_MODEM_ENABLE
, 1);

886 
	`lgw_sx1301_ªg_w
(
LGW_FSK_MODEM_ENABLE
, 0);

890 
	`lﬂd_fúmw¨e
(
MCU_ARB
, 
¨b_fúmw¨e
, 
MCU_ARB_FW_BYTE
);

891 
	`lﬂd_fúmw¨e
(
MCU_AGC
, 
agc_fúmw¨e
, 
MCU_AGC_FW_BYTE
);

894 
	`lgw_sx1301_ªg_w
(
LGW_FORCE_HOST_RADIO_CTRL
, 0);

895 
	`lgw_sx1301_ªg_w
(
LGW_FORCE_HOST_FE_CTRL
, 0);

896 
	`lgw_sx1301_ªg_w
(
LGW_FORCE_DEC_FILTER_GAIN
, 0);

899 
	`lgw_sx1301_ªg_w
(
LGW_RADIO_SELECT
, 0);

900 
	`lgw_sx1301_ªg_w
(
LGW_MCU_RST_0
, 0);

901 
	`lgw_sx1301_ªg_w
(
LGW_MCU_RST_1
, 0);

904 
	`lgw_sx1301_ªg_w
(
LGW_DBG_AGC_MCU_RAM_ADDR
, 
FW_VERSION_ADDR
);

905 
	`lgw_sx1301_ªg_r
(
LGW_DBG_AGC_MCU_RAM_DATA
, &
ªad_vÆ
);

906 
fw_vîsi⁄
 = (
uöt8_t
)
ªad_vÆ
;

907 i‡(
fw_vîsi⁄
 !
FW_VERSION_AGC
) {

908 
	`DEBUG_PRINTF
("ERROR~ Vîsi⁄ o‡AGC fúmw¨ênŸÉx≥˘ed,á˘uÆ:%dÉx≥˘ed:%d\n", 
fw_vîsi⁄
, 
FW_VERSION_AGC
);

909  
LGW_HAL_ERROR
;

911 
	`lgw_sx1301_ªg_w
(
LGW_DBG_ARB_MCU_RAM_ADDR
, 
FW_VERSION_ADDR
);

912 
	`lgw_sx1301_ªg_r
(
LGW_DBG_ARB_MCU_RAM_DATA
, &
ªad_vÆ
);

913 
fw_vîsi⁄
 = (
uöt8_t
)
ªad_vÆ
;

914 i‡(
fw_vîsi⁄
 !
FW_VERSION_ARB
) {

915 
	`DEBUG_PRINTF
("ERROR~ Vîsi⁄ o‡¨bôî fúmw¨ênŸÉx≥˘ed,á˘uÆ:%dÉx≥˘ed:%d\n", 
fw_vîsi⁄
, 
FW_VERSION_ARB
);

916  
LGW_HAL_ERROR
;

919 
	`DEBUG_MSG
("Info: Initialising AGC firmware...\n");

920 
	`waô_ms
(1);

922 
	`lgw_sx1301_ªg_r
(
LGW_MCU_AGC_STATUS
, &
ªad_vÆ
);

923 i‡(
ªad_vÆ
 != 0x10) {

924 
	`DEBUG_PRINTF
("ERROR~ AGC FIRMWARE INITIALIZATION FAILURE, STATUS 0x%02X\n", (
uöt8_t
)
ªad_vÆ
);

925  
LGW_HAL_ERROR
;

929 
i
 = 0; i < 
txgaö_lut
.
size
; ++i) {

930 
	`lgw_sx1301_ªg_w
(
LGW_RADIO_SELECT
, 
AGC_CMD_WAIT
);

931 
	`waô_ms
(1);

932 
lﬂd_vÆ
 = 
txgaö_lut
.
lut
[
i
].
mix_gaö
 + (16 *Åxgaö_lut.lut[i].
dac_gaö
Ë+ (64 *Åxgaö_lut.lut[i].
∑_gaö
);

933 
	`lgw_sx1301_ªg_w
(
LGW_RADIO_SELECT
, 
lﬂd_vÆ
);

934 
	`waô_ms
(1);

935 
	`lgw_sx1301_ªg_r
(
LGW_MCU_AGC_STATUS
, &
ªad_vÆ
);

936 i‡(
ªad_vÆ
 !(0x30 + 
i
)) {

937 
	`DEBUG_PRINTF
("ERROR~ AGC FIRMWARE INITIALIZATION FAILURE, STATUS 0x%02X\n", (
uöt8_t
)
ªad_vÆ
);

938  
LGW_HAL_ERROR
;

942 i‡(
txgaö_lut
.
size
 < 
TX_GAIN_LUT_SIZE_MAX
) {

943 
	`lgw_sx1301_ªg_w
(
LGW_RADIO_SELECT
, 
AGC_CMD_WAIT
);

944 
	`waô_ms
(1);

945 
lﬂd_vÆ
 = 
AGC_CMD_ABORT
;

946 
	`lgw_sx1301_ªg_w
(
LGW_RADIO_SELECT
, 
lﬂd_vÆ
);

947 
	`waô_ms
(1);

948 
	`lgw_sx1301_ªg_r
(
LGW_MCU_AGC_STATUS
, &
ªad_vÆ
);

949 i‡(
ªad_vÆ
 != 0x30) {

950 
	`DEBUG_PRINTF
("ERROR~ AGC FIRMWARE INITIALIZATION FAILURE, STATUS 0x%02X\n", (
uöt8_t
)
ªad_vÆ
);

951  
LGW_HAL_ERROR
;

956 
	`lgw_sx1301_ªg_w
(
LGW_RADIO_SELECT
, 
AGC_CMD_WAIT
);

957 
	`waô_ms
(1);

958 
	`lgw_sx1301_ªg_w
(
LGW_RADIO_SELECT
, 3);

959 
	`waô_ms
(1);

960 
	`lgw_sx1301_ªg_r
(
LGW_MCU_AGC_STATUS
, &
ªad_vÆ
);

961 i‡(
ªad_vÆ
 != 0x33) {

962 
	`DEBUG_PRINTF
("ERROR~ AGC FIRMWARE INITIALIZATION FAILURE, STATUS 0x%02X\n", (
uöt8_t
)
ªad_vÆ
);

963  
LGW_HAL_ERROR
;

967 
	`lgw_sx1301_ªg_w
(
LGW_RADIO_SELECT
, 
AGC_CMD_WAIT
);

968 
	`waô_ms
(1);

969 
	`lgw_sx1301_ªg_w
(
LGW_RADIO_SELECT
, 0);

970 
	`waô_ms
(1);

971 
	`lgw_sx1301_ªg_r
(
LGW_MCU_AGC_STATUS
, &
ªad_vÆ
);

972 i‡(
ªad_vÆ
 != 0x30) {

973 
	`DEBUG_PRINTF
("ERROR~ AGC FIRMWARE INITIALIZATION FAILURE, STATUS 0x%02X\n", (
uöt8_t
)
ªad_vÆ
);

974  
LGW_HAL_ERROR
;

978 
	`lgw_sx1301_ªg_w
(
LGW_RADIO_SELECT
, 
AGC_CMD_WAIT
);

979 
	`waô_ms
(1);

980 
	`lgw_sx1301_ªg_w
(
LGW_RADIO_SELECT
, 
ødio_£À˘
);

981 
	`waô_ms
(1);

982 
	`DEBUG_MSG
("Info:Öutting back original RADIO_SELECT value\n");

983 
	`lgw_sx1301_ªg_r
(
LGW_MCU_AGC_STATUS
, &
ªad_vÆ
);

984 i‡(
ªad_vÆ
 != 0x40) {

985 
	`DEBUG_PRINTF
("ERROR~ AGC FIRMWARE INITIALIZATION FAILURE, STATUS 0x%02X\n", (
uöt8_t
)
ªad_vÆ
);

986  
LGW_HAL_ERROR
;

990 
	`lgw_sx1301_ªg_w
(
LGW_GPS_EN
, 1);

993 i‡(
	`lbt_is_íabÀd
(Ë=
åue
) {

994 
	`¥ötf
("INFO: Configuring LBT,Åhis mayÅake few seconds,Ölease wait...\n");

995 
	`waô_ms
(8400);

998 
lgw_is_°¨ãd
 = 
åue
;

999  
LGW_HAL_SUCCESS
;

1000 
	}
}

1004 
	$lgw_sx1301_°›
() {

1005 
	`lgw_sx1301_ª£t
();

1006 
	`lgw_sx1301_disc⁄√˘
();

1008 
lgw_is_°¨ãd
 = 
Ál£
;

1009  
LGW_HAL_SUCCESS
;

1010 
	}
}

1014 
	$lgw_sx1301_ª˚ive
(
uöt8_t
 
max_pkt
, 
lgw_pkt_rx_s
 *
pkt_d©a
) {

1015 
nb_pkt_„tch
;

1016 
lgw_pkt_rx_s
 *
p
;

1017 
uöt8_t
 
buff
[255+
RX_METADATA_NB
];

1018 
sz
;

1019 
ifmod
;

1020 
°©_fifo
;

1021 
uöt32_t
 
øw_time°amp
;

1022 
uöt32_t
 
dñay_x
, 
dñay_y
, 
dñay_z
;

1023 
uöt32_t
 
time°amp_c‹ª˘i⁄
;

1024 
uöt32_t
 
sf
, 
¸
, 
bw_pow
, 
¸c_í
, 
µm
;

1027 i‡(
lgw_is_°¨ãd
 =
Ál£
) {

1028 
	`DEBUG_MSG
("ERROR~ CONCENTRATOR IS NOT RUNNING, START IT BEFORE RECEIVING\n");

1029  
LGW_HAL_ERROR
;

1033 i‡((
max_pkt
 <0Ë|| (max_pkà> 
LGW_PKT_FIFO_SIZE
)) {

1034 
	`DEBUG_PRINTF
("ERROR~ %d = INVALID MAX NUMBER OF PACKETS TO FETCH\n", 
max_pkt
);

1035  
LGW_HAL_ERROR
;

1037 
	`CHECK_NULL
(
pkt_d©a
);

1040 
	`mem£t
 (
buff
, 0,  buff);

1043 
nb_pkt_„tch
 = 0;Çb_pkt_„tch < 
max_pkt
; ++nb_pkt_fetch) {

1046 
p
 = &
pkt_d©a
[
nb_pkt_„tch
];

1049 
	`lgw_sx1301_ªg_rb
(
LGW_RX_PACKET_DATA_FIFO_NUM_STORED
, 
buff
, 5);

1056 i‡(
buff
[0] == 0) {

1061 i‡(
buff
[0] > 
LGW_PKT_FIFO_SIZE
) {

1062 
	`DEBUG_PRINTF
("WARNING: %u = INVALID NUMBER OF PACKETS TO FETCH, ABORTING\n", 
buff
[0]);

1066 
	`DEBUG_PRINTF
("FIFO c⁄ã¡: %x %x %x %x %x\n", 
buff
[0], buff[1], buff[2], buff[3], buff[4]);

1068 
p
->
size
 = 
buff
[4];

1069 
sz
 = 
p
->
size
;

1070 
°©_fifo
 = 
buff
[3];

1073 
	`lgw_sx1301_ªg_rb
(
LGW_RX_DATA_BUF_DATA
, 
buff
, 
sz
+
RX_METADATA_NB
);

1076 
	`mem˝y
((*)
p
->
∑ylﬂd
, (*)
buff
, 
sz
);

1079 
p
->
if_chaö
 = 
buff
[
sz
+0];

1080 i‡(
p
->
if_chaö
 >
LGW_IF_CHAIN_NB
) {

1081 
	`DEBUG_PRINTF
("WARNING: %u NOT A VALID IF_CHAIN NUMBER, ABORTING\n", 
p
->
if_chaö
);

1084 
ifmod
 = 
ifmod_c⁄fig
[
p
->
if_chaö
];

1085 
	`DEBUG_PRINTF
("[%d %d]\n", 
p
->
if_chaö
, 
ifmod
);

1087 
p
->
rf_chaö
 = (
uöt8_t
)
if_rf_chaö
[p->
if_chaö
];

1088 
p
->
‰eq_hz
 = (
uöt32_t
)((
öt32_t
)
rf_rx_‰eq
[p->
rf_chaö
] + 
if_‰eq
[p->
if_chaö
]);

1089 
p
->
rssic
 = ()
buff
[
sz
+5] + 
rf_rssi_off£t
[p->
rf_chaö
];

1091 i‡((
ifmod
 =
IF_LORA_MULTI
Ë|| (ifmod =
IF_LORA_STD
)) {

1092 
	`DEBUG_MSG
("Note: LoRaÖacket\n");

1093 
°©_fifo
 & 0x07) {

1095 
p
->
°©us
 = 
STAT_CRC_OK
;

1096 
¸c_í
 = 1;

1099 
p
->
°©us
 = 
STAT_CRC_BAD
;

1100 
¸c_í
 = 1;

1103 
p
->
°©us
 = 
STAT_NO_CRC
;

1104 
¸c_í
 = 0;

1107 
p
->
°©us
 = 
STAT_UNDEFINED
;

1108 
¸c_í
 = 0;

1110 
p
->
moduœti⁄
 = 
MOD_LORA
;

1111 
p
->
¢r
 = (()((
öt8_t
)
buff
[
sz
+2]))/4;

1112 
p
->
¢r_mö
 = (()((
öt8_t
)
buff
[
sz
+3]))/4;

1113 
p
->
¢r_max
 = (()((
öt8_t
)
buff
[
sz
+4]))/4;

1114 i‡(
ifmod
 =
IF_LORA_MULTI
) {

1115 
p
->
b™dwidth
 = 
BW_125KHZ
;

1117 
p
->
b™dwidth
 = 
l‹a_rx_bw
;

1119 
sf
 = (
buff
[
sz
+1] >> 4) & 0x0F;

1120 
sf
) {

1121 7: 
p
->
d©¨©e
 = 
DR_LORA_SF7
; ;

1122 8: 
p
->
d©¨©e
 = 
DR_LORA_SF8
; ;

1123 9: 
p
->
d©¨©e
 = 
DR_LORA_SF9
; ;

1124 10: 
p
->
d©¨©e
 = 
DR_LORA_SF10
; ;

1125 11: 
p
->
d©¨©e
 = 
DR_LORA_SF11
; ;

1126 12: 
p
->
d©¨©e
 = 
DR_LORA_SF12
; ;

1127 : 
p
->
d©¨©e
 = 
DR_UNDEFINED
;

1129 
¸
 = (
buff
[
sz
+1] >> 1) & 0x07;

1130 
¸
) {

1131 1: 
p
->
codî©e
 = 
CR_LORA_4_5
; ;

1132 2: 
p
->
codî©e
 = 
CR_LORA_4_6
; ;

1133 3: 
p
->
codî©e
 = 
CR_LORA_4_7
; ;

1134 4: 
p
->
codî©e
 = 
CR_LORA_4_8
; ;

1135 : 
p
->
codî©e
 = 
CR_UNDEFINED
;

1139 i‡(
	`SET_PPM_ON
(
p
->
b™dwidth
,p->
d©¨©e
)) {

1140 
µm
 = 1;

1142 
µm
 = 0;

1146 i‡(
ifmod
 =
IF_LORA_STD
) {

1147 
l‹a_rx_bw
) {

1148 
BW_125KHZ
:

1149 
dñay_x
 = 64;

1150 
bw_pow
 = 1;

1152 
BW_250KHZ
:

1153 
dñay_x
 = 32;

1154 
bw_pow
 = 2;

1156 
BW_500KHZ
:

1157 
dñay_x
 = 16;

1158 
bw_pow
 = 4;

1161 
	`DEBUG_PRINTF
("ERROR~ UNEXPECTED VALUE %d IN SWITCH STATEMENT\n", 
p
->
b™dwidth
);

1162 
dñay_x
 = 0;

1163 
bw_pow
 = 0;

1166 
dñay_x
 = 114;

1167 
bw_pow
 = 1;

1171 i‡((
sf
 >6Ë&& (s‡<12Ë&& (
bw_pow
 > 0)) {

1172 i‡((2*(
sz
 + 2*
¸c_í
Ë- (
sf
-7)) <= 0) {

1173 
dñay_y
 = ( ((1<<(
sf
-1)Ë* (sf+1)Ë+ (3 * (1<<(sf-4))ËË/ 
bw_pow
;

1174 
dñay_z
 = 32 * (2*(
sz
+2*
¸c_í
Ë+ 5Ë/ 
bw_pow
;

1176 
dñay_y
 = ( ((1<<(
sf
-1)Ë* (sf+1)Ë+ ((4 - 
µm
Ë* (1<<(sf-4))ËË/ 
bw_pow
;

1177 
dñay_z
 = (16 + 4*
¸
Ë* (((2*(
sz
+2*
¸c_í
)-
sf
+6Ë% (s‡- 2*
µm
)Ë+ 1Ë/ 
bw_pow
;

1179 
time°amp_c‹ª˘i⁄
 = 
dñay_x
 + 
dñay_y
 + 
dñay_z
;

1181 
time°amp_c‹ª˘i⁄
 = 0;

1182 
	`DEBUG_MSG
("WARNING: invalidÖacket,ÇoÅimestamp correction\n");

1186 i‡(
ifmod
 =
IF_LORA_MULTI
) {

1187 
p
->
rssic
 -
RSSI_MULTI_BIAS
;

1190 i‡(
p
->
¢r
 < 0) {

1191 
p
->
rssic
 +p->
¢r
;

1194 } i‡(
ifmod
 =
IF_FSK_STD
) {

1195 
	`DEBUG_MSG
("Note: FSKÖacket\n");

1196 
°©_fifo
 & 0x07) {

1198 
p
->
°©us
 = 
STAT_CRC_OK
;

1201 
p
->
°©us
 = 
STAT_CRC_BAD
;

1204 
p
->
°©us
 = 
STAT_NO_CRC
;

1207 
p
->
°©us
 = 
STAT_UNDEFINED
;

1210 
p
->
moduœti⁄
 = 
MOD_FSK
;

1211 
p
->
¢r
 = -128.0;

1212 
p
->
¢r_mö
 = -128.0;

1213 
p
->
¢r_max
 = -128.0;

1214 
p
->
b™dwidth
 = 
fsk_rx_bw
;

1215 
p
->
d©¨©e
 = 
fsk_rx_dr
;

1216 
p
->
codî©e
 = 
CR_UNDEFINED
;

1217 
time°amp_c‹ª˘i⁄
 = ((
uöt32_t
)680000 / 
fsk_rx_dr
) - 20;

1220 
p
->
rssic
 = 
RSSI_FSK_POLY_0
 + 
RSSI_FSK_POLY_1
 *Ö->rssi¯+ 
RSSI_FSK_POLY_2
 * 
	`pow
(p->rssic, 2);

1222 
	`DEBUG_MSG
("ERROR~ UNEXPECTED PACKET ORIGIN\n");

1223 
p
->
°©us
 = 
STAT_UNDEFINED
;

1224 
p
->
moduœti⁄
 = 
MOD_UNDEFINED
;

1225 
p
->
rssic
 = -128.0;

1226 
p
->
¢r
 = -128.0;

1227 
p
->
¢r_mö
 = -128.0;

1228 
p
->
¢r_max
 = -128.0;

1229 
p
->
b™dwidth
 = 
BW_UNDEFINED
;

1230 
p
->
d©¨©e
 = 
DR_UNDEFINED
;

1231 
p
->
codî©e
 = 
CR_UNDEFINED
;

1232 
time°amp_c‹ª˘i⁄
 = 0;

1235 
øw_time°amp
 = (
uöt32_t
)
buff
[
sz
+6] + ((uint32_t)buff[sz+7] << 8) + ((uint32_t)buff[sz+8] << 16) + ((uint32_t)buff[sz+9] << 24);

1236 
p
->
cou¡_us
 = 
øw_time°amp
 - 
time°amp_c‹ª˘i⁄
;

1237 
p
->
¸c
 = (
uöt16_t
)
buff
[
sz
+10] + ((uint16_t)buff[sz+11] << 8);

1240 
	`lgw_sx1301_ªg_w
(
LGW_RX_PACKET_DATA_FIFO_NUM_STORED
, 0);

1243  
nb_pkt_„tch
;

1244 
	}
}

1248 
	$lgw_sx1301_£nd
(
lgw_pkt_tx_s
 *
pkt_d©a
) {

1249 
i
, 
x
;

1250 
uöt8_t
 
buff
[256+
TX_METADATA_NB
];

1251 
uöt32_t
 
∑π_öt
 = 0;

1252 
uöt32_t
 
∑π_‰ac
 = 0;

1253 
uöt16_t
 
fsk_dr_div
;

1254 
å™s„r_size
 = 0;

1255 
∑ylﬂd_off£t
 = 0;

1256 
uöt8_t
 
pow_ödex
 = 0;

1257 
uöt8_t
 
èrgë_mix_gaö
 = 0;

1258 
uöt32_t
 
cou¡_åig
 = 0;

1259 
boﬁ
 
tx_Ælowed
 = 
Ál£
;

1260 
uöt16_t
 
tx_°¨t_dñay
;

1261 
boﬁ
 
tx_nŸch_íabÀ
 = 
Ál£
;

1264 i‡(
lgw_is_°¨ãd
 =
Ál£
) {

1265 
	`DEBUG_MSG
("ERROR~ CONCENTRATOR IS NOT RUNNING, START IT BEFORE SENDING\n");

1266  
LGW_HAL_ERROR
;

1270 i‡(
pkt_d©a
->
rf_chaö
 >
LGW_RF_CHAIN_NB
) {

1271 
	`DEBUG_MSG
("ERROR~ INVALID RF_CHAIN TO SEND PACKETS\n");

1272  
LGW_HAL_ERROR
;

1276 i‡(
rf_tx_íabÀ
[
pkt_d©a
->
rf_chaö
] =
Ál£
) {

1277 
	`DEBUG_MSG
("ERROR~ SELECTED RF_CHAIN IS DISABLED FOR TX ON SELECTED BOARD\n");

1278  
LGW_HAL_ERROR
;

1280 i‡(
rf_íabÀ
[
pkt_d©a
->
rf_chaö
] =
Ál£
) {

1281 
	`DEBUG_MSG
("ERROR~ SELECTED RF_CHAIN IS DISABLED\n");

1282  
LGW_HAL_ERROR
;

1284 i‡(!
	`IS_TX_MODE
(
pkt_d©a
->
tx_mode
)) {

1285 
	`DEBUG_MSG
("ERROR~ TX_MODE NOT SUPPORTED\n");

1286  
LGW_HAL_ERROR
;

1288 i‡(
pkt_d©a
->
moduœti⁄
 =
MOD_LORA
) {

1289 i‡(!
	`IS_LORA_BW
(
pkt_d©a
->
b™dwidth
)) {

1290 
	`DEBUG_MSG
("ERROR~ BANDWIDTH NOT SUPPORTED BY LORA TX\n");

1291  
LGW_HAL_ERROR
;

1293 i‡(!
	`IS_LORA_STD_DR
(
pkt_d©a
->
d©¨©e
)) {

1294 
	`DEBUG_MSG
("ERROR~ DATARATE NOT SUPPORTED BY LORA TX\n");

1295  
LGW_HAL_ERROR
;

1297 i‡(!
	`IS_LORA_CR
(
pkt_d©a
->
codî©e
)) {

1298 
	`DEBUG_MSG
("ERROR~ CODERATE NOT SUPPORTED BY LORA TX\n");

1299  
LGW_HAL_ERROR
;

1301 i‡(
pkt_d©a
->
size
 > 255) {

1302 
	`DEBUG_MSG
("ERROR~ PAYLOAD LENGTH TOO BIG FOR LORA TX\n");

1303  
LGW_HAL_ERROR
;

1305 } i‡(
pkt_d©a
->
moduœti⁄
 =
MOD_FSK
) {

1306 if((
pkt_d©a
->
f_dev
 < 1) || (pkt_data->f_dev > 200)) {

1307 
	`DEBUG_MSG
("ERROR~ TX FREQUENCY DEVIATION OUT OF ACCEPTABLE RANGE\n");

1308  
LGW_HAL_ERROR
;

1310 if(!
	`IS_FSK_DR
(
pkt_d©a
->
d©¨©e
)) {

1311 
	`DEBUG_MSG
("ERROR~ DATARATE NOT SUPPORTED BY FSK IF CHAIN\n");

1312  
LGW_HAL_ERROR
;

1314 i‡(
pkt_d©a
->
size
 > 255) {

1315 
	`DEBUG_MSG
("ERROR~ PAYLOAD LENGTH TOO BIG FOR FSK TX\n");

1316  
LGW_HAL_ERROR
;

1319 
	`DEBUG_MSG
("ERROR~ INVALID TX MODULATION\n");

1320  
LGW_HAL_ERROR
;

1324 i‡((
pkt_d©a
->
moduœti⁄
 =
MOD_LORA
Ë&& (pkt_d©a->
b™dwidth
 =
BW_125KHZ
)) {

1325 
tx_nŸch_íabÀ
 = 
åue
;

1329 
tx_°¨t_dñay
 = 
	`lgw_gë_tx_°¨t_dñay
(
pkt_d©a
->
b™dwidth
);

1332 
pow_ödex
 = 
txgaö_lut
.
size
-1;Öow_index > 0;Öow_index--) {

1333 i‡(
txgaö_lut
.
lut
[
pow_ödex
].
rf_powî
 <
pkt_d©a
->rf_power) {

1339 
èrgë_mix_gaö
 = 
txgaö_lut
.
lut
[
pow_ödex
].
mix_gaö
;

1340 i‡(
pkt_d©a
->
rf_chaö
 == 0) {

1341 
	`lgw_sx1301_ªg_w
(
LGW_TX_OFFSET_I
, 
ˇl_off£t_a_i
[
èrgë_mix_gaö
 - 8]);

1342 
	`lgw_sx1301_ªg_w
(
LGW_TX_OFFSET_Q
, 
ˇl_off£t_a_q
[
èrgë_mix_gaö
 - 8]);

1344 
	`lgw_sx1301_ªg_w
(
LGW_TX_OFFSET_I
, 
ˇl_off£t_b_i
[
èrgë_mix_gaö
 - 8]);

1345 
	`lgw_sx1301_ªg_w
(
LGW_TX_OFFSET_Q
, 
ˇl_off£t_b_q
[
èrgë_mix_gaö
 - 8]);

1349 
	`lgw_sx1301_ªg_w
(
LGW_TX_GAIN
, 
txgaö_lut
.
lut
[
pow_ödex
].
dig_gaö
);

1352 
å™s„r_size
 = 
TX_METADATA_NB
 + 
pkt_d©a
->
size
;

1353 
∑ylﬂd_off£t
 = 
TX_METADATA_NB
;

1356 
rf_ødio_ty≥
[0]) {

1357 
LGW_RADIO_TYPE_SX1255
:

1358 
∑π_öt
 = 
pkt_d©a
->
‰eq_hz
 / (
SX125x_32MHz_FRAC
 << 7);

1359 
∑π_‰ac
 = ((
pkt_d©a
->
‰eq_hz
 % (
SX125x_32MHz_FRAC
 << 7)) << 9) / SX125x_32MHz_FRAC;

1361 
LGW_RADIO_TYPE_SX1257
:

1362 
∑π_öt
 = 
pkt_d©a
->
‰eq_hz
 / (
SX125x_32MHz_FRAC
 << 8);

1363 
∑π_‰ac
 = ((
pkt_d©a
->
‰eq_hz
 % (
SX125x_32MHz_FRAC
 << 8)) << 8) / SX125x_32MHz_FRAC;

1366 
	`DEBUG_PRINTF
("ERROR~ UNEXPECTED VALUE %d FOR RADIO TYPE\n", 
rf_ødio_ty≥
[0]);

1370 
buff
[0] = 0xFF & 
∑π_öt
;

1371 
buff
[1] = 0xFF & (
∑π_‰ac
 >> 8);

1372 
buff
[2] = 0xFF & 
∑π_‰ac
;

1376 i‡(
pkt_d©a
->
tx_mode
 =
TIMESTAMPED
)

1378 
cou¡_åig
 = 
pkt_d©a
->
cou¡_us
 - (
uöt32_t
)
tx_°¨t_dñay
;

1379 
buff
[3] = 0xFF & (
cou¡_åig
 >> 24);

1380 
buff
[4] = 0xFF & (
cou¡_åig
 >> 16);

1381 
buff
[5] = 0xFF & (
cou¡_åig
 >> 8);

1382 
buff
[6] = 0xFF & 
cou¡_åig
;

1386 i‡(
pkt_d©a
->
moduœti⁄
 =
MOD_LORA
) {

1388 
buff
[7] = (0x20 & (
pkt_d©a
->
rf_chaö
 << 5)Ë| (0x0F & 
pow_ödex
);

1390 
buff
[8] = 0;

1393 
pkt_d©a
->
d©¨©e
) {

1394 
DR_LORA_SF7
: 
buff
[9] = 7; ;

1395 
DR_LORA_SF8
: 
buff
[9] = 8; ;

1396 
DR_LORA_SF9
: 
buff
[9] = 9; ;

1397 
DR_LORA_SF10
: 
buff
[9] = 10; ;

1398 
DR_LORA_SF11
: 
buff
[9] = 11; ;

1399 
DR_LORA_SF12
: 
buff
[9] = 12; ;

1400 : 
	`DEBUG_PRINTF
("ERROR~ UNEXPECTED VALUE %d IN SWITCH STATEMENT\n", 
pkt_d©a
->
d©¨©e
);

1402 
pkt_d©a
->
codî©e
) {

1403 
CR_LORA_4_5
: 
buff
[9] |= 1 << 4; ;

1404 
CR_LORA_4_6
: 
buff
[9] |= 2 << 4; ;

1405 
CR_LORA_4_7
: 
buff
[9] |= 3 << 4; ;

1406 
CR_LORA_4_8
: 
buff
[9] |= 4 << 4; ;

1407 : 
	`DEBUG_PRINTF
("ERROR~ UNEXPECTED VALUE %d IN SWITCH STATEMENT\n", 
pkt_d©a
->
codî©e
);

1409 i‡(
pkt_d©a
->
no_¸c
 =
Ál£
) {

1410 
buff
[9] |= 0x80;

1412 
	`DEBUG_MSG
("Info:Öacket will be sent without CRC\n");

1416 
buff
[10] = 
pkt_d©a
->
size
;

1419 
pkt_d©a
->
b™dwidth
) {

1420 
BW_125KHZ
: 
buff
[11] = 0; ;

1421 
BW_250KHZ
: 
buff
[11] = 1; ;

1422 
BW_500KHZ
: 
buff
[11] = 2; ;

1423 : 
	`DEBUG_PRINTF
("ERROR~ UNEXPECTED VALUE %d IN SWITCH STATEMENT\n", 
pkt_d©a
->
b™dwidth
);

1425 i‡(
pkt_d©a
->
no_hódî
 =
åue
) {

1426 
buff
[11] |= 0x04;

1428 i‡(
	`SET_PPM_ON
(
pkt_d©a
->
b™dwidth
,pkt_d©a->
d©¨©e
)) {

1429 
buff
[11] |= 0x08;

1431 i‡(
pkt_d©a
->
övît_pﬁ
 =
åue
) {

1432 
buff
[11] |= 0x10;

1436 i‡(
pkt_d©a
->
¥ómbÀ
 == 0) {

1437 
pkt_d©a
->
¥ómbÀ
 = 
STD_LORA_PREAMBLE
;

1438 } i‡(
pkt_d©a
->
¥ómbÀ
 < 
MIN_LORA_PREAMBLE
) {

1439 
pkt_d©a
->
¥ómbÀ
 = 
MIN_LORA_PREAMBLE
;

1440 
	`DEBUG_MSG
("Note:ÖreambleÜengthádjustedÅoÑespect minimum LoRaÖreamble size\n");

1442 
buff
[12] = 0xFF & (
pkt_d©a
->
¥ómbÀ
 >> 8);

1443 
buff
[13] = 0xFF & 
pkt_d©a
->
¥ómbÀ
;

1446 
buff
[14] = 0;

1447 
buff
[15] = 0;

1450 
buff
[0] &= 0x3F;

1451 i‡(
pkt_d©a
->
b™dwidth
 =
BW_500KHZ
) {

1452 
buff
[0] |= 0x80;

1456 i‡(
tx_nŸch_íabÀ
 =
åue
) {

1457 
	`DEBUG_MSG
("INFO: Enabling TXÇotch filter\n");

1458 
buff
[0] |= 0x40;

1460 } i‡(
pkt_d©a
->
moduœti⁄
 =
MOD_FSK
) {

1462 
buff
[7] = (0x20 & (
pkt_d©a
->
rf_chaö
 << 5)Ë| 0x10 | (0x0F & 
pow_ödex
);

1464 
buff
[8] = 0;

1467 
buff
[9] = 
pkt_d©a
->
f_dev
;

1470 
buff
[10] = 
pkt_d©a
->
size
;

1474 
buff
[11] = 0x01 | (
pkt_d©a
->
no_¸c
?0:0x02) | (0x02 << 2);

1477 i‡(
pkt_d©a
->
¥ómbÀ
 == 0) {

1478 
pkt_d©a
->
¥ómbÀ
 = 
STD_FSK_PREAMBLE
;

1479 } i‡(
pkt_d©a
->
¥ómbÀ
 < 
MIN_FSK_PREAMBLE
) {

1480 
pkt_d©a
->
¥ómbÀ
 = 
MIN_FSK_PREAMBLE
;

1481 
	`DEBUG_MSG
("Note:ÖreambleÜengthádjustedÅoÑespect minimum FSKÖreamble size\n");

1483 
buff
[12] = 0xFF & (
pkt_d©a
->
¥ómbÀ
 >> 8);

1484 
buff
[13] = 0xFF & 
pkt_d©a
->
¥ómbÀ
;

1487 
fsk_dr_div
 = (
uöt16_t
)((
uöt32_t
)
LGW_XTAL_FREQU
 / 
pkt_d©a
->
d©¨©e
);

1488 
buff
[14] = 0xFF & (
fsk_dr_div
 >> 8);

1489 
buff
[15] = 0xFF & 
fsk_dr_div
;

1492 
buff
[16] = 
pkt_d©a
->
size
;

1493 ++
å™s„r_size
;

1494 ++
∑ylﬂd_off£t
;

1497 
buff
[0] &= 0x7F;

1500 
	`DEBUG_MSG
("ERROR~ INVALID TX MODULATION..\n");

1501  
LGW_HAL_ERROR
;

1505 
	`lgw_sx1301_ªg_w
(
LGW_TX_START_DELAY
, 
tx_°¨t_dñay
);

1508 
	`mem˝y
((*)(
buff
 + 
∑ylﬂd_off£t
), (*)(
pkt_d©a
->
∑ylﬂd
),Ökt_d©a->
size
);

1511 
	`lgw_ab‹t_sx1301_tx
(1);

1514 
	`lgw_sx1301_ªg_w
(
LGW_TX_DATA_BUF_ADDR
, 0);

1515 
	`lgw_sx1301_ªg_wb
(
LGW_TX_DATA_BUF_DATA
, 
buff
, 
å™s„r_size
);

1516 
	`DEBUG_ARRAY
(
i
, 
å™s„r_size
, 
buff
);

1519 
x
 = 
	`lbt_ch™_is_‰ì
(
pkt_d©a
, 
tx_°¨t_dñay
, &
tx_Ælowed
);

1520 i‡(
x
 !
LGW_LBT_SUCCESS
) {

1521 
	`DEBUG_MSG
("ERROR~ FailedÅo check channelávailability for TX\n");

1522  
LGW_HAL_ERROR
;

1524 i‡(
tx_Ælowed
 =
åue
) {

1525 
pkt_d©a
->
tx_mode
) {

1526 
IMMEDIATE
:

1527 
	`lgw_sx1301_ªg_w
(
LGW_TX_TRIG_IMMEDIATE
, 1);

1530 
TIMESTAMPED
:

1531 
	`lgw_sx1301_ªg_w
(
LGW_TX_TRIG_DELAYED
, 1);

1534 
ON_GPS
:

1535 
	`lgw_sx1301_ªg_w
(
LGW_TX_TRIG_GPS
, 1);

1539 
	`DEBUG_PRINTF
("ERROR~ UNEXPECTED VALUE %d IN SWITCH STATEMENT\n", 
pkt_d©a
->
tx_mode
);

1540  
LGW_HAL_ERROR
;

1543 
	`DEBUG_MSG
("ERROR~ Cannot sendÖacket, channel is busy (LBT)\n");

1544  
LGW_LBT_ISSUE
;

1547  
LGW_HAL_SUCCESS
;

1548 
	}
}

1552 
	$lgw_sx1301_°©us
(
uöt8_t
 
rf_chaö
, uöt8_à
£À˘
, uöt8_à*
code
) {

1553 
öt32_t
 
ªad_vÆue
;

1556 
	`CHECK_NULL
(
code
);

1558 i‡(
rf_chaö
 >
LGW_RF_CHAIN_NB
) {

1559 
	`DEBUG_MSG
("ERROR: NOT A VALID RF_CHAIN NUMBER\n");

1560  
LGW_HAL_ERROR
;

1563 i‡(
£À˘
 =
TX_STATUS
) {

1564 
	`lgw_sx1301_ªg_r
(
LGW_TX_STATUS
, &
ªad_vÆue
);

1565 i‡(
lgw_is_°¨ãd
 =
Ál£
) {

1566 *
code
 = 
TX_OFF
;

1567 } i‡((
ªad_vÆue
 & 0x10) == 0) {

1568 *
code
 = 
TX_FREE
;

1569 } i‡((
ªad_vÆue
 & 0x60) != 0) {

1570 *
code
 = 
TX_EMITTING
;

1572 *
code
 = 
TX_SCHEDULED
;

1574  
LGW_HAL_SUCCESS
;

1576 } i‡(
£À˘
 =
RX_STATUS
) {

1577 *
code
 = 
RX_STATUS_UNKNOWN
;

1578  
LGW_HAL_SUCCESS
;

1581 
	`DEBUG_MSG
("ERROR~ SELECTION INVALID, NO STATUS TO RETURN\n");

1582  
LGW_HAL_ERROR
;

1585 
	}
}

1589 
	$lgw_ab‹t_sx1301_tx
(
uöt8_t
 
rf_chaö
) {

1590 
i
;

1592 i‡(
rf_chaö
 >
LGW_RF_CHAIN_NB
) {

1593 
	`DEBUG_MSG
("ERROR: NOT A VALID RF_CHAIN NUMBER\n");

1594  
LGW_HAL_ERROR
;

1597 
i
 = 
	`lgw_sx1301_ªg_w
(
LGW_TX_TRIG_ALL
, 0);

1599 i‡(
i
 =
LGW_REG_SUCCESS
Ë 
LGW_HAL_SUCCESS
;

1600  
LGW_HAL_ERROR
;

1601 
	}
}

1605 
	$lgw_gë_sx1301_åig˙t
(
uöt32_t
* 
åig_˙t_us
) {

1606 
i
;

1607 
öt32_t
 
vÆ
;

1609 
	`CHECK_NULL
(
åig_˙t_us
);

1610 
i
 = 
	`lgw_sx1301_ªg_r
(
LGW_TIMESTAMP
, &
vÆ
);

1611 i‡(
i
 =
LGW_REG_SUCCESS
) {

1612 *
åig_˙t_us
 = (
uöt32_t
)
vÆ
;

1613  
LGW_HAL_SUCCESS
;

1615  
LGW_HAL_ERROR
;

1617 
	}
}

1621 
	$lgw_gë_sx1301_ãm≥øtuª
(* 
ãm≥øtuª
) {

1622 
	`CHECK_NULL
(
ãm≥øtuª
);

1623 *
ãm≥øtuª
 = 32.12;

1624  
LGW_HAL_SUCCESS
;

1625 
	}
}

1629 
	$lgw_gë_sx1301_ö°˙t
(
uöt32_t
* 
ö°_˙t_us
) {

1630  
LGW_HAL_SUCCESS
;

1631 
	}
}

1635 
	$lgw_gë_sx1301_eui
(
uöt64_t
* 
eui
) {

1636 
	`CHECK_NULL
(
eui
);

1637 
eui
 = 0;

1638  
LGW_HAL_SUCCESS
;

1639 
	}
}

	@hal/sx1301hal/loragw_hal_sx1301.h

17 #i‚de‡
_LORAGW_HAL_SX1301_H


18 
	#_LORAGW_HAL_SX1301_H


	)

23 
	~<°döt.h
>

24 
	~<°dboﬁ.h
>

26 
	~"c⁄fig.h
"

35 
	#LGW_MIN_NOTCH_FREQ
 126000U

	)

36 
	#LGW_MAX_NOTCH_FREQ
 250000U

	)

37 
	#LGW_DEFAULT_NOTCH_FREQ
 129000U

	)

47 
lgw_bﬂrd_sx1301_£tc⁄f
(
lgw_c⁄f_bﬂrd_s
 *
c⁄f
);

55 
lgw_rxrf_sx1301_£tc⁄f
(
uöt8_t
 
rf_chaö
, 
lgw_c⁄f_rxrf_s
 *
c⁄f
);

63 
lgw_rxif_sx1301_£tc⁄f
(
uöt8_t
 
if_chaö
, 
lgw_c⁄f_rxif_s
 *
c⁄f
);

70 
lgw_txgaö_sx1301_£tc⁄f
(
uöt8_t
 
rf_chaö
, 
lgw_tx_gaö_lut_s
 *
c⁄f
);

76 
lgw_sx1301_°¨t
();

82 
lgw_sx1301_°›
();

90 
lgw_sx1301_ª˚ive
(
uöt8_t
 
max_pkt
, 
lgw_pkt_rx_s
 *
pkt_d©a
);

116 
lgw_sx1301_£nd
(
lgw_pkt_tx_s
 *
pkt_d©a
);

124 
lgw_sx1301_°©us
(
uöt8_t
 
rf_chaö
, uöt8_à
£À˘
, uöt8_à*
code
);

130 
lgw_ab‹t_sx1301_tx
(
uöt8_t
 
rf_chaö
);

137 
lgw_gë_sx1301_åig˙t
(
uöt32_t
* 
åig_˙t_us
);

142 
lgw_gë_sx1301_ö°˙t
(
uöt32_t
 * 
ö°_˙t_us
);

149 
lgw_gë_sx1301_ãm≥øtuª
(* 
ãm≥øtuª
);

156 
lgw_gë_sx1301_eui
(
uöt64_t
* 
eui
);

	@hal/sx1301hal/loragw_radio_sx1301.c

19 
	~<°döt.h
>

20 
	~<°dboﬁ.h
>

21 
	~<°dio.h
>

23 
	~"l‹agw_sx125x.h
"

24 
	~"l‹agw_•i.h
"

25 
	~"l‹agw_aux.h
"

26 
	~"l‹agw_hÆ.h
"

27 
	~"l‹agw_ªg_sx1301.h
"

28 
	~"l‹agw_hÆ_sx1301.h
"

29 
	~"l‹agw_ødio_sx1301.h
"

34 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

35 #i‡
DEBUG_REG
 == 1

36 
	#DEBUG_MSG
(
°r
Ë
	`Ârötf
(
°dîr
, så)

	)

37 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...Ë
	`Ârötf
(
°dîr
,"%s:%d: "fmt, 
__FUNCTION__
, 
__LINE__
,árgs)

	)

38 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){
	`Ârötf
(
°dîr
,"%s:%d: ERROR~ NULL POINTER AS ARGUMENT\n", 
__FUNCTION__
, 
__LINE__
); 
LGW_REG_ERROR
;}

	)

40 
	#DEBUG_MSG
(
°r
)

	)

41 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...)

	)

42 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){ 
LGW_REG_ERROR
;}

	)

48 
	#PLL_LOCK_MAX_ATTEMPTS
 5

	)

57 
sx125x_wrôe
(
uöt8_t
 
ch™√l
, uöt8_à
addr
, uöt8_à
d©a
);

58 
uöt8_t
 
sx125x_ªad
(uöt8_à
ch™√l
, uöt8_à
addr
);

62 
	$sx125x_wrôe
(
uöt8_t
 
ch™√l
, uöt8_à
addr
, uöt8_à
d©a
) {

63 
ªg_add
, 
ªg_d©
, 
ªg_cs
;

66 i‡(
ch™√l
 >
LGW_RF_CHAIN_NB
) {

67 
	`DEBUG_MSG
("ERROR~ INVALID RF_CHAIN\n");

70 i‡(
addr
 >= 0x7F) {

71 
	`DEBUG_MSG
("ERROR~ ADDRESS OUT OF RANGE\n");

76 
ch™√l
) {

78 
ªg_add
 = 
LGW_SPI_RADIO_A__ADDR
;

79 
ªg_d©
 = 
LGW_SPI_RADIO_A__DATA
;

80 
ªg_cs
 = 
LGW_SPI_RADIO_A__CS
;

84 
ªg_add
 = 
LGW_SPI_RADIO_B__ADDR
;

85 
ªg_d©
 = 
LGW_SPI_RADIO_B__DATA
;

86 
ªg_cs
 = 
LGW_SPI_RADIO_B__CS
;

90 
	`DEBUG_PRINTF
("ERROR~ UNEXPECTED VALUE %d IN SWITCH STATEMENT\n", 
ch™√l
);

95 
	`lgw_sx1301_ªg_w
(
ªg_cs
, 0);

96 
	`lgw_sx1301_ªg_w
(
ªg_add
, 0x80 | 
addr
);

97 
	`lgw_sx1301_ªg_w
(
ªg_d©
, 
d©a
);

98 
	`lgw_sx1301_ªg_w
(
ªg_cs
, 1);

99 
	`lgw_sx1301_ªg_w
(
ªg_cs
, 0);

102 
	}
}

106 
uöt8_t
 
	$sx125x_ªad
(
uöt8_t
 
ch™√l
, uöt8_à
addr
) {

107 
ªg_add
, 
ªg_d©
, 
ªg_cs
, 
ªg_rb
;

108 
öt32_t
 
ªad_vÆue
;

111 i‡(
ch™√l
 >
LGW_RF_CHAIN_NB
) {

112 
	`DEBUG_MSG
("ERROR~ INVALID RF_CHAIN\n");

115 i‡(
addr
 >= 0x7F) {

116 
	`DEBUG_MSG
("ERROR~ ADDRESS OUT OF RANGE\n");

121 
ch™√l
) {

123 
ªg_add
 = 
LGW_SPI_RADIO_A__ADDR
;

124 
ªg_d©
 = 
LGW_SPI_RADIO_A__DATA
;

125 
ªg_cs
 = 
LGW_SPI_RADIO_A__CS
;

126 
ªg_rb
 = 
LGW_SPI_RADIO_A__DATA_READBACK
;

130 
ªg_add
 = 
LGW_SPI_RADIO_B__ADDR
;

131 
ªg_d©
 = 
LGW_SPI_RADIO_B__DATA
;

132 
ªg_cs
 = 
LGW_SPI_RADIO_B__CS
;

133 
ªg_rb
 = 
LGW_SPI_RADIO_B__DATA_READBACK
;

137 
	`DEBUG_PRINTF
("ERROR~ UNEXPECTED VALUE %d IN SWITCH STATEMENT\n", 
ch™√l
);

142 
	`lgw_sx1301_ªg_w
(
ªg_cs
, 0);

143 
	`lgw_sx1301_ªg_w
(
ªg_add
, 
addr
);

144 
	`lgw_sx1301_ªg_w
(
ªg_d©
, 0);

145 
	`lgw_sx1301_ªg_w
(
ªg_cs
, 1);

146 
	`lgw_sx1301_ªg_w
(
ªg_cs
, 0);

147 
	`lgw_sx1301_ªg_r
(
ªg_rb
, &
ªad_vÆue
);

149  (
uöt8_t
)
ªad_vÆue
;

150 
	}
}

155 
	$lgw_£tup_sx125x
(
uöt8_t
 
rf_chaö
, uöt8_à
rf_˛kout
, 
boﬁ
 
rf_íabÀ
, uöt8_à
rf_ødio_ty≥
, 
uöt32_t
 
‰eq_hz
) {

156 
uöt32_t
 
∑π_öt
 = 0;

157 
uöt32_t
 
∑π_‰ac
 = 0;

158 
˝t_©ãm±s
 = 0;

160 i‡(
rf_chaö
 >
LGW_RF_CHAIN_NB
) {

161 
	`DEBUG_MSG
("ERROR~ INVALID RF_CHAIN\n");

166 
	`DEBUG_PRINTF
("NŸe: SX125x #%d vîsi⁄Ñegi°îÑëu∫ed 0x%02x\n", 
rf_chaö
, 
	`sx125x_ªad
(rf_chain, 0x07));

169 i‡(
rf_˛kout
 =
rf_chaö
) {

170 
	`sx125x_wrôe
(
rf_chaö
, 0x10, 
SX125x_TX_DAC_CLK_SEL
 + 2);

171 
	`DEBUG_PRINTF
("NŸe: SX125x #%d clock ouçuàíabÀd\n", 
rf_chaö
);

173 
	`sx125x_wrôe
(
rf_chaö
, 0x10, 
SX125x_TX_DAC_CLK_SEL
);

174 
	`DEBUG_PRINTF
("NŸe: SX125x #%d clock ouçuàdißbÀd\n", 
rf_chaö
);

177 
rf_ødio_ty≥
) {

178 
LGW_RADIO_TYPE_SX1255
:

179 
	`sx125x_wrôe
(
rf_chaö
, 0x28, 
SX125x_XOSC_GM_STARTUP
 + 
SX125x_XOSC_DISABLE
*16);

181 
LGW_RADIO_TYPE_SX1257
:

182 
	`sx125x_wrôe
(
rf_chaö
, 0x26, 
SX125x_XOSC_GM_STARTUP
 + 
SX125x_XOSC_DISABLE
*16);

185 
	`DEBUG_PRINTF
("ERROR~ UNEXPECTED VALUE %d FOR RADIO TYPE\n", 
rf_ødio_ty≥
);

189 i‡(
rf_íabÀ
 =
åue
) {

191 
	`sx125x_wrôe
(
rf_chaö
, 0x08, 
SX125x_TX_MIX_GAIN
 + 
SX125x_TX_DAC_GAIN
*16);

192 
	`sx125x_wrôe
(
rf_chaö
, 0x0A, 
SX125x_TX_ANA_BW
 + 
SX125x_TX_PLL_BW
*32);

193 
	`sx125x_wrôe
(
rf_chaö
, 0x0B, 
SX125x_TX_DAC_BW
);

196 
	`sx125x_wrôe
(
rf_chaö
, 0x0C, 
SX125x_LNA_ZIN
 + 
SX125x_RX_BB_GAIN
*2 + 
SX125x_RX_LNA_GAIN
*32);

197 
	`sx125x_wrôe
(
rf_chaö
, 0x0D, 
SX125x_RX_BB_BW
 + 
SX125x_RX_ADC_TRIM
*4 + 
SX125x_RX_ADC_BW
*32);

198 
	`sx125x_wrôe
(
rf_chaö
, 0x0E, 
SX125x_ADC_TEMP
 + 
SX125x_RX_PLL_BW
*2);

201 
rf_ødio_ty≥
) {

202 
LGW_RADIO_TYPE_SX1255
:

203 
∑π_öt
 = 
‰eq_hz
 / (
SX125x_32MHz_FRAC
 << 7);

204 
∑π_‰ac
 = ((
‰eq_hz
 % (
SX125x_32MHz_FRAC
 << 7)) << 9) / SX125x_32MHz_FRAC;

206 
LGW_RADIO_TYPE_SX1257
:

207 
∑π_öt
 = 
‰eq_hz
 / (
SX125x_32MHz_FRAC
 << 8);

208 
∑π_‰ac
 = ((
‰eq_hz
 % (
SX125x_32MHz_FRAC
 << 8)) << 8) / SX125x_32MHz_FRAC;

211 
	`DEBUG_PRINTF
("ERROR~ UNEXPECTED VALUE %d FOR RADIO TYPE\n", 
rf_ødio_ty≥
);

215 
	`sx125x_wrôe
(
rf_chaö
, 0x01,0xFF & 
∑π_öt
);

216 
	`sx125x_wrôe
(
rf_chaö
, 0x02,0xFF & (
∑π_‰ac
 >> 8));

217 
	`sx125x_wrôe
(
rf_chaö
, 0x03,0xFF & 
∑π_‰ac
);

221 i‡(
˝t_©ãm±s
 >
PLL_LOCK_MAX_ATTEMPTS
) {

222 
	`DEBUG_MSG
("ERROR~ FAIL TO LOCK PLL\n");

225 
	`sx125x_wrôe
(
rf_chaö
, 0x00, 1);

226 
	`sx125x_wrôe
(
rf_chaö
, 0x00, 3);

227 ++
˝t_©ãm±s
;

228 
	`DEBUG_PRINTF
("NŸe: SX125x #%d PLL sèπ (©ãm± %d)\n", 
rf_chaö
, 
˝t_©ãm±s
);

229 
	`waô_ms
(1);

230 } (
	`sx125x_ªad
(
rf_chaö
, 0x11) & 0x02) == 0);

232 
	`DEBUG_PRINTF
("NŸe: SX125x #%d kïàö sèndby mode\n", 
rf_chaö
);

236 
	}
}

	@hal/sx1301hal/loragw_radio_sx1301.h

16 #i‚de‡
_LORAGW_RADIO_SX1301_H


17 
	#_LORAGW_RADIO_SX1301_H


	)

22 
	~<°döt.h
>

23 
	~<°dboﬁ.h
>

28 
	#SX125x_32MHz_FRAC
 15625

	)

36 
lgw_£tup_sx125x
(
uöt8_t
 
rf_chaö
, uöt8_à
rf_˛kout
, 
boﬁ
 
rf_íabÀ
, uöt8_à
rf_ødio_ty≥
, 
uöt32_t
 
‰eq_hz
);

	@hal/sx1301hal/loragw_reg_sx1301.c

23 
	~<°döt.h
>

24 
	~<°dboﬁ.h
>

25 
	~<°dio.h
>

27 
	~"l‹agw_•i.h
"

28 
	~"l‹agw_ªg.h
"

29 
	~"l‹agw_ªg_sx1301.h
"

34 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

35 #i‡
DEBUG_REG
 == 1

36 
	#DEBUG_MSG
(
°r
Ë
	`Ârötf
(
°dîr
, så)

	)

37 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...Ë
	`Ârötf
(
°dîr
,"%s:%d: "fmt, 
__FUNCTION__
, 
__LINE__
,árgs)

	)

38 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){
	`Ârötf
(
°dîr
,"%s:%d: ERROR~ NULL POINTER AS ARGUMENT\n", 
__FUNCTION__
, 
__LINE__
); 
LGW_REG_ERROR
;}

	)

40 
	#DEBUG_MSG
(
°r
)

	)

41 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...)

	)

42 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){ 
LGW_REG_ERROR
;}

	)

47 
	#PAGE_ADDR
 0x00

	)

48 
	#PAGE_MASK
 0x03

	)

52 
	glgw_ªg∑ge
 = -1;

57 
	$∑ge_swôch
(
uöt8_t
 
èrgë
) {

58 
lgw_ªg∑ge
 = 
PAGE_MASK
 & 
èrgë
;

59 
	`lgw_•i_w
(
lgw_•i_èrgë
, 
LGW_SPI_MUX_TARGET_SX1301
, 
PAGE_ADDR
, (
uöt8_t
)
lgw_ªg∑ge
);

60  
LGW_REG_SUCCESS
;

61 
	}
}

70 c⁄° 
lgw_ªg_s
 
	gsx1301_ªgs
[
LGW_SX1301_TOTALREGS
] = {

413 
	$lgw_sx1301_c⁄√˘
(c⁄° * 
•idev_∑th
) {

414 
•i_°©
 = 
LGW_SPI_SUCCESS
;

415 
uöt8_t
 
u
 = 0;

416 
x
;

419 i‡(
lgw_•i_èrgë
 !
NULL
) {

420 
	`DEBUG_MSG
("WARNING: concentrator wasálready connected\n");

421 
	`lgw_•i_˛o£
(
lgw_•i_èrgë
);

425 
•i_°©
 = 
	`lgw_•i_›í
(
•idev_∑th
, &
lgw_•i_èrgë
);

426 i‡(
•i_°©
 !
LGW_SPI_SUCCESS
) {

427 
	`DEBUG_MSG
("ERROR CONNECTING CONCENTRATOR SPI\n");

428  
LGW_REG_ERROR
;

432 
•i_°©
 = 
	`lgw_•i_r
(
lgw_•i_èrgë
, 
LGW_SPI_MUX_TARGET_SX1301
, 
sx1301_ªgs
[
LGW_VERSION
].
addr
, &
u
);

433 i‡(
•i_°©
 !
LGW_SPI_SUCCESS
) {

434 
	`DEBUG_MSG
("ERROR READING CHIP VERSION REGISTER\n");

435  
LGW_REG_ERROR
;

437 i‡(
u
 !
sx1301_ªgs
[
LGW_VERSION
].
dÊt
) {

438 
	`DEBUG_PRINTF
("ERROR~ NOT EXPECTED CHIP VERSION (v%u)\n", 
u
);

439  
LGW_REG_ERROR
;

443 
•i_°©
 = 
	`lgw_•i_w
(
lgw_•i_èrgë
, 
LGW_SPI_MUX_TARGET_SX1301
, 
sx1301_ªgs
[
LGW_PAGE_REG
].
addr
, 0);

444 i‡(
•i_°©
 !
LGW_SPI_SUCCESS
) {

445 
	`DEBUG_MSG
("ERROR WRITING PAGE REGISTER\n");

446  
LGW_REG_ERROR
;

448 
lgw_ªg∑ge
 = 0;

451 
	`DEBUG_MSG
("Note: success connectingÅhe concentrator\n");

452  
LGW_REG_SUCCESS
;

453 
	}
}

458 
	$lgw_sx1301_disc⁄√˘
() {

459 i‡(
lgw_•i_èrgë
 !
NULL
) {

460 
	`lgw_•i_˛o£
(
lgw_•i_èrgë
);

461 
lgw_•i_èrgë
 = 
NULL
;

462 
	`DEBUG_MSG
("Note: success disconnectingÅhe concentrator\n");

463  
LGW_REG_SUCCESS
;

465 
	`DEBUG_MSG
("WARNING: concentrator wasálready disconnected\n");

466  
LGW_REG_ERROR
;

468 
	}
}

473 
	$lgw_sx1301_ª£t
() {

475 i‡((
lgw_•i_èrgë
 =
NULL
Ë|| (
lgw_ªg∑ge
 < 0)) {

476 
	`DEBUG_MSG
("ERROR~ CONCENTRATOR UNCONNECTED\n");

477  
LGW_REG_ERROR
;

479 
	`lgw_•i_w
(
lgw_•i_èrgë
, 
LGW_SPI_MUX_TARGET_SX1301
, 0, 0x80);

480 
lgw_ªg∑ge
 = 0;

481  
LGW_REG_SUCCESS
;

482 
	}
}

487 
	$lgw_sx1301_ªg_w
(
uöt16_t
 
ªgi°î_id
, 
öt32_t
 
ªg_vÆue
) {

488 
•i_°©
 = 
LGW_SPI_SUCCESS
;

489 
lgw_ªg_s
 
r
;

492 i‡(
ªgi°î_id
 >
LGW_SX1301_TOTALREGS
) {

493 
	`DEBUG_MSG
("ERROR~ REGISTER NUMBER OUT OF DEFINED RANGE\n");

494  
LGW_REG_ERROR
;

498 i‡((
lgw_•i_èrgë
 =
NULL
Ë|| (
lgw_ªg∑ge
 < 0)) {

499 
	`DEBUG_MSG
("ERROR~ CONCENTRATOR UNCONNECTED\n");

500  
LGW_REG_ERROR
;

504 i‡(
ªgi°î_id
 =
LGW_PAGE_REG
) {

505 
	`∑ge_swôch
(
ªg_vÆue
);

506  
LGW_REG_SUCCESS
;

507 } i‡(
ªgi°î_id
 =
LGW_SOFT_RESET
) {

509 i‡((
ªg_vÆue
 & 0x01) != 0)

510 
	`lgw_sx1301_ª£t
();

511  
LGW_REG_SUCCESS
;

515 
r
 = 
sx1301_ªgs
[
ªgi°î_id
];

518 i‡(
r
.
rd⁄
 == 1){

519 
	`DEBUG_MSG
("ERROR~ TRYING TO WRITE A READ-ONLY REGISTER\n");

520  
LGW_REG_ERROR
;

524 i‡((
r
.
∑ge
 !-1Ë&& (r.∑gê!
lgw_ªg∑ge
)) {

525 
•i_°©
 +
	`∑ge_swôch
(
r
.
∑ge
);

528 
•i_°©
 +
	`ªg_w_Æign32
(
lgw_•i_èrgë
, 
LGW_SPI_MUX_TARGET_SX1301
, 
r
, 
ªg_vÆue
);

530 i‡(
•i_°©
 !
LGW_SPI_SUCCESS
) {

531 
	`DEBUG_MSG
("ERROR~ SPI ERROR DURING REGISTER WRITE\n");

532  
LGW_REG_ERROR
;

534  
LGW_REG_SUCCESS
;

536 
	}
}

541 
	$lgw_sx1301_ªg_r
(
uöt16_t
 
ªgi°î_id
, 
öt32_t
 *
ªg_vÆue
) {

542 
•i_°©
 = 
LGW_SPI_SUCCESS
;

543 
lgw_ªg_s
 
r
;

546 
	`CHECK_NULL
(
ªg_vÆue
);

547 i‡(
ªgi°î_id
 >
LGW_SX1301_TOTALREGS
) {

548 
	`DEBUG_MSG
("ERROR~ REGISTER NUMBER OUT OF DEFINED RANGE\n");

549  
LGW_REG_ERROR
;

553 i‡((
lgw_•i_èrgë
 =
NULL
Ë|| (
lgw_ªg∑ge
 < 0)) {

554 
	`DEBUG_MSG
("ERROR~ CONCENTRATOR UNCONNECTED\n");

555  
LGW_REG_ERROR
;

559 
r
 = 
sx1301_ªgs
[
ªgi°î_id
];

562 i‡((
r
.
∑ge
 !-1Ë&& (r.∑gê!
lgw_ªg∑ge
)) {

563 
•i_°©
 +
	`∑ge_swôch
(
r
.
∑ge
);

566 
•i_°©
 +
	`ªg_r_Æign32
(
lgw_•i_èrgë
, 
LGW_SPI_MUX_TARGET_SX1301
, 
r
, 
ªg_vÆue
);

568 i‡(
•i_°©
 !
LGW_SPI_SUCCESS
) {

569 
	`DEBUG_MSG
("ERROR~ SPI ERROR DURING REGISTER WRITE\n");

570  
LGW_REG_ERROR
;

572  
LGW_REG_SUCCESS
;

574 
	}
}

579 
	$lgw_sx1301_ªg_wb
(
uöt16_t
 
ªgi°î_id
, 
uöt8_t
 *
d©a
, uöt16_à
size
) {

580 
•i_°©
 = 
LGW_SPI_SUCCESS
;

581 
lgw_ªg_s
 
r
;

584 
	`CHECK_NULL
(
d©a
);

585 i‡(
size
 == 0) {

586 
	`DEBUG_MSG
("ERROR~ BURST OF NULL LENGTH\n");

587  
LGW_REG_ERROR
;

589 i‡(
ªgi°î_id
 >
LGW_SX1301_TOTALREGS
) {

590 
	`DEBUG_MSG
("ERROR~ REGISTER NUMBER OUT OF DEFINED RANGE\n");

591  
LGW_REG_ERROR
;

595 i‡((
lgw_•i_èrgë
 =
NULL
Ë|| (
lgw_ªg∑ge
 < 0)) {

596 
	`DEBUG_MSG
("ERROR~ CONCENTRATOR UNCONNECTED\n");

597  
LGW_REG_ERROR
;

601 
r
 = 
sx1301_ªgs
[
ªgi°î_id
];

604 i‡(
r
.
rd⁄
 == 1){

605 
	`DEBUG_MSG
("ERROR~ TRYING TO BURST WRITE A READ-ONLY REGISTER\n");

606  
LGW_REG_ERROR
;

610 i‡((
r
.
∑ge
 !-1Ë&& (r.∑gê!
lgw_ªg∑ge
)) {

611 
•i_°©
 +
	`∑ge_swôch
(
r
.
∑ge
);

615 
•i_°©
 +
	`lgw_•i_wb
(
lgw_•i_èrgë
, 
LGW_SPI_MUX_TARGET_SX1301
, 
r
.
addr
, 
d©a
, 
size
);

617 i‡(
•i_°©
 !
LGW_SPI_SUCCESS
) {

618 
	`DEBUG_MSG
("ERROR~ SPI ERROR DURING REGISTER BURST WRITE\n");

619  
LGW_REG_ERROR
;

621  
LGW_REG_SUCCESS
;

623 
	}
}

628 
	$lgw_sx1301_ªg_rb
(
uöt16_t
 
ªgi°î_id
, 
uöt8_t
 *
d©a
, uöt16_à
size
) {

629 
•i_°©
 = 
LGW_SPI_SUCCESS
;

630 
lgw_ªg_s
 
r
;

633 
	`CHECK_NULL
(
d©a
);

634 i‡(
size
 == 0) {

635 
	`DEBUG_MSG
("ERROR~ BURST OF NULL LENGTH\n");

636  
LGW_REG_ERROR
;

638 i‡(
ªgi°î_id
 >
LGW_SX1301_TOTALREGS
) {

639 
	`DEBUG_MSG
("ERROR~ REGISTER NUMBER OUT OF DEFINED RANGE\n");

640  
LGW_REG_ERROR
;

644 i‡((
lgw_•i_èrgë
 =
NULL
Ë|| (
lgw_ªg∑ge
 < 0)) {

645 
	`DEBUG_MSG
("ERROR~ CONCENTRATOR UNCONNECTED\n");

646  
LGW_REG_ERROR
;

650 
r
 = 
sx1301_ªgs
[
ªgi°î_id
];

653 i‡((
r
.
∑ge
 !-1Ë&& (r.∑gê!
lgw_ªg∑ge
)) {

654 
•i_°©
 +
	`∑ge_swôch
(
r
.
∑ge
);

658 
•i_°©
 +
	`lgw_•i_rb
(
lgw_•i_èrgë
, 
LGW_SPI_MUX_TARGET_SX1301
, 
r
.
addr
, 
d©a
, 
size
);

660 i‡(
•i_°©
 !
LGW_SPI_SUCCESS
) {

661 
	`DEBUG_MSG
("ERROR~ SPI ERROR DURING REGISTER BURST READ\n");

662  
LGW_REG_ERROR
;

664  
LGW_REG_SUCCESS
;

666 
	}
}

	@hal/sx1301hal/loragw_reg_sx1301.h

20 #i‚de‡
_LORAGW_REG_SX1301_H


21 
	#_LORAGW_REG_SX1301_H


	)

26 
	~<°döt.h
>

27 
	~<°dboﬁ.h
>

29 
	~"c⁄fig.h
"

47 
	#LGW_PAGE_REG
 0

	)

48 
	#LGW_SOFT_RESET
 1

	)

49 
	#LGW_VERSION
 2

	)

50 
	#LGW_RX_DATA_BUF_ADDR
 3

	)

51 
	#LGW_RX_DATA_BUF_DATA
 4

	)

52 
	#LGW_TX_DATA_BUF_ADDR
 5

	)

53 
	#LGW_TX_DATA_BUF_DATA
 6

	)

54 
	#LGW_CAPTURE_RAM_ADDR
 7

	)

55 
	#LGW_CAPTURE_RAM_DATA
 8

	)

56 
	#LGW_MCU_PROM_ADDR
 9

	)

57 
	#LGW_MCU_PROM_DATA
 10

	)

58 
	#LGW_RX_PACKET_DATA_FIFO_NUM_STORED
 11

	)

59 
	#LGW_RX_PACKET_DATA_FIFO_ADDR_POINTER
 12

	)

60 
	#LGW_RX_PACKET_DATA_FIFO_STATUS
 13

	)

61 
	#LGW_RX_PACKET_DATA_FIFO_PAYLOAD_SIZE
 14

	)

62 
	#LGW_MBWSSF_MODEM_ENABLE
 15

	)

63 
	#LGW_CONCENTRATOR_MODEM_ENABLE
 16

	)

64 
	#LGW_FSK_MODEM_ENABLE
 17

	)

65 
	#LGW_GLOBAL_EN
 18

	)

66 
	#LGW_CLK32M_EN
 19

	)

67 
	#LGW_CLKHS_EN
 20

	)

68 
	#LGW_START_BIST0
 21

	)

69 
	#LGW_START_BIST1
 22

	)

70 
	#LGW_CLEAR_BIST0
 23

	)

71 
	#LGW_CLEAR_BIST1
 24

	)

72 
	#LGW_BIST0_FINISHED
 25

	)

73 
	#LGW_BIST1_FINISHED
 26

	)

74 
	#LGW_MCU_AGC_PROG_RAM_BIST_STATUS
 27

	)

75 
	#LGW_MCU_ARB_PROG_RAM_BIST_STATUS
 28

	)

76 
	#LGW_CAPTURE_RAM_BIST_STATUS
 29

	)

77 
	#LGW_CHAN_FIR_RAM0_BIST_STATUS
 30

	)

78 
	#LGW_CHAN_FIR_RAM1_BIST_STATUS
 31

	)

79 
	#LGW_CORR0_RAM_BIST_STATUS
 32

	)

80 
	#LGW_CORR1_RAM_BIST_STATUS
 33

	)

81 
	#LGW_CORR2_RAM_BIST_STATUS
 34

	)

82 
	#LGW_CORR3_RAM_BIST_STATUS
 35

	)

83 
	#LGW_CORR4_RAM_BIST_STATUS
 36

	)

84 
	#LGW_CORR5_RAM_BIST_STATUS
 37

	)

85 
	#LGW_CORR6_RAM_BIST_STATUS
 38

	)

86 
	#LGW_CORR7_RAM_BIST_STATUS
 39

	)

87 
	#LGW_MODEM0_RAM0_BIST_STATUS
 40

	)

88 
	#LGW_MODEM1_RAM0_BIST_STATUS
 41

	)

89 
	#LGW_MODEM2_RAM0_BIST_STATUS
 42

	)

90 
	#LGW_MODEM3_RAM0_BIST_STATUS
 43

	)

91 
	#LGW_MODEM4_RAM0_BIST_STATUS
 44

	)

92 
	#LGW_MODEM5_RAM0_BIST_STATUS
 45

	)

93 
	#LGW_MODEM6_RAM0_BIST_STATUS
 46

	)

94 
	#LGW_MODEM7_RAM0_BIST_STATUS
 47

	)

95 
	#LGW_MODEM0_RAM1_BIST_STATUS
 48

	)

96 
	#LGW_MODEM1_RAM1_BIST_STATUS
 49

	)

97 
	#LGW_MODEM2_RAM1_BIST_STATUS
 50

	)

98 
	#LGW_MODEM3_RAM1_BIST_STATUS
 51

	)

99 
	#LGW_MODEM4_RAM1_BIST_STATUS
 52

	)

100 
	#LGW_MODEM5_RAM1_BIST_STATUS
 53

	)

101 
	#LGW_MODEM6_RAM1_BIST_STATUS
 54

	)

102 
	#LGW_MODEM7_RAM1_BIST_STATUS
 55

	)

103 
	#LGW_MODEM0_RAM2_BIST_STATUS
 56

	)

104 
	#LGW_MODEM1_RAM2_BIST_STATUS
 57

	)

105 
	#LGW_MODEM2_RAM2_BIST_STATUS
 58

	)

106 
	#LGW_MODEM3_RAM2_BIST_STATUS
 59

	)

107 
	#LGW_MODEM4_RAM2_BIST_STATUS
 60

	)

108 
	#LGW_MODEM5_RAM2_BIST_STATUS
 61

	)

109 
	#LGW_MODEM6_RAM2_BIST_STATUS
 62

	)

110 
	#LGW_MODEM7_RAM2_BIST_STATUS
 63

	)

111 
	#LGW_MODEM_MBWSSF_RAM0_BIST_STATUS
 64

	)

112 
	#LGW_MODEM_MBWSSF_RAM1_BIST_STATUS
 65

	)

113 
	#LGW_MODEM_MBWSSF_RAM2_BIST_STATUS
 66

	)

114 
	#LGW_MCU_AGC_DATA_RAM_BIST0_STATUS
 67

	)

115 
	#LGW_MCU_AGC_DATA_RAM_BIST1_STATUS
 68

	)

116 
	#LGW_MCU_ARB_DATA_RAM_BIST0_STATUS
 69

	)

117 
	#LGW_MCU_ARB_DATA_RAM_BIST1_STATUS
 70

	)

118 
	#LGW_TX_TOP_RAM_BIST0_STATUS
 71

	)

119 
	#LGW_TX_TOP_RAM_BIST1_STATUS
 72

	)

120 
	#LGW_DATA_MNGT_RAM_BIST0_STATUS
 73

	)

121 
	#LGW_DATA_MNGT_RAM_BIST1_STATUS
 74

	)

122 
	#LGW_GPIO_SELECT_INPUT
 75

	)

123 
	#LGW_GPIO_SELECT_OUTPUT
 76

	)

124 
	#LGW_GPIO_MODE
 77

	)

125 
	#LGW_GPIO_PIN_REG_IN
 78

	)

126 
	#LGW_GPIO_PIN_REG_OUT
 79

	)

127 
	#LGW_MCU_AGC_STATUS
 80

	)

128 
	#LGW_MCU_ARB_STATUS
 81

	)

129 
	#LGW_CHIP_ID
 82

	)

130 
	#LGW_EMERGENCY_FORCE_HOST_CTRL
 83

	)

131 
	#LGW_RX_INVERT_IQ
 84

	)

132 
	#LGW_MODEM_INVERT_IQ
 85

	)

133 
	#LGW_MBWSSF_MODEM_INVERT_IQ
 86

	)

134 
	#LGW_RX_EDGE_SELECT
 87

	)

135 
	#LGW_MISC_RADIO_EN
 88

	)

136 
	#LGW_FSK_MODEM_INVERT_IQ
 89

	)

137 
	#LGW_FILTER_GAIN
 90

	)

138 
	#LGW_RADIO_SELECT
 91

	)

139 
	#LGW_IF_FREQ_0
 92

	)

140 
	#LGW_IF_FREQ_1
 93

	)

141 
	#LGW_IF_FREQ_2
 94

	)

142 
	#LGW_IF_FREQ_3
 95

	)

143 
	#LGW_IF_FREQ_4
 96

	)

144 
	#LGW_IF_FREQ_5
 97

	)

145 
	#LGW_IF_FREQ_6
 98

	)

146 
	#LGW_IF_FREQ_7
 99

	)

147 
	#LGW_IF_FREQ_8
 100

	)

148 
	#LGW_IF_FREQ_9
 101

	)

149 
	#LGW_CHANN_OVERRIDE_AGC_GAIN
 102

	)

150 
	#LGW_CHANN_AGC_GAIN
 103

	)

151 
	#LGW_CORR0_DETECT_EN
 104

	)

152 
	#LGW_CORR1_DETECT_EN
 105

	)

153 
	#LGW_CORR2_DETECT_EN
 106

	)

154 
	#LGW_CORR3_DETECT_EN
 107

	)

155 
	#LGW_CORR4_DETECT_EN
 108

	)

156 
	#LGW_CORR5_DETECT_EN
 109

	)

157 
	#LGW_CORR6_DETECT_EN
 110

	)

158 
	#LGW_CORR7_DETECT_EN
 111

	)

159 
	#LGW_CORR_SAME_PEAKS_OPTION_SF6
 112

	)

160 
	#LGW_CORR_SAME_PEAKS_OPTION_SF7
 113

	)

161 
	#LGW_CORR_SAME_PEAKS_OPTION_SF8
 114

	)

162 
	#LGW_CORR_SAME_PEAKS_OPTION_SF9
 115

	)

163 
	#LGW_CORR_SAME_PEAKS_OPTION_SF10
 116

	)

164 
	#LGW_CORR_SAME_PEAKS_OPTION_SF11
 117

	)

165 
	#LGW_CORR_SAME_PEAKS_OPTION_SF12
 118

	)

166 
	#LGW_CORR_SIG_NOISE_RATIO_SF6
 119

	)

167 
	#LGW_CORR_SIG_NOISE_RATIO_SF7
 120

	)

168 
	#LGW_CORR_SIG_NOISE_RATIO_SF8
 121

	)

169 
	#LGW_CORR_SIG_NOISE_RATIO_SF9
 122

	)

170 
	#LGW_CORR_SIG_NOISE_RATIO_SF10
 123

	)

171 
	#LGW_CORR_SIG_NOISE_RATIO_SF11
 124

	)

172 
	#LGW_CORR_SIG_NOISE_RATIO_SF12
 125

	)

173 
	#LGW_CORR_NUM_SAME_PEAK
 126

	)

174 
	#LGW_CORR_MAC_GAIN
 127

	)

175 
	#LGW_ADJUST_MODEM_START_OFFSET_RDX4
 128

	)

176 
	#LGW_ADJUST_MODEM_START_OFFSET_SF12_RDX4
 129

	)

177 
	#LGW_DBG_CORR_SELECT_SF
 130

	)

178 
	#LGW_DBG_CORR_SELECT_CHANNEL
 131

	)

179 
	#LGW_DBG_DETECT_CPT
 132

	)

180 
	#LGW_DBG_SYMB_CPT
 133

	)

181 
	#LGW_CHIRP_INVERT_RX
 134

	)

182 
	#LGW_DC_NOTCH_EN
 135

	)

183 
	#LGW_IMPLICIT_CRC_EN
 136

	)

184 
	#LGW_IMPLICIT_CODING_RATE
 137

	)

185 
	#LGW_IMPLICIT_PAYLOAD_LENGHT
 138

	)

186 
	#LGW_FREQ_TO_TIME_INVERT
 139

	)

187 
	#LGW_FREQ_TO_TIME_DRIFT
 140

	)

188 
	#LGW_PAYLOAD_FINE_TIMING_GAIN
 141

	)

189 
	#LGW_PREAMBLE_FINE_TIMING_GAIN
 142

	)

190 
	#LGW_TRACKING_INTEGRAL
 143

	)

191 
	#LGW_FRAME_SYNCH_PEAK1_POS
 144

	)

192 
	#LGW_FRAME_SYNCH_PEAK2_POS
 145

	)

193 
	#LGW_PREAMBLE_SYMB1_NB
 146

	)

194 
	#LGW_FRAME_SYNCH_GAIN
 147

	)

195 
	#LGW_SYNCH_DETECT_TH
 148

	)

196 
	#LGW_LLR_SCALE
 149

	)

197 
	#LGW_SNR_AVG_CST
 150

	)

198 
	#LGW_PPM_OFFSET
 151

	)

199 
	#LGW_MAX_PAYLOAD_LEN
 152

	)

200 
	#LGW_ONLY_CRC_EN
 153

	)

201 
	#LGW_ZERO_PAD
 154

	)

202 
	#LGW_DEC_GAIN_OFFSET
 155

	)

203 
	#LGW_CHAN_GAIN_OFFSET
 156

	)

204 
	#LGW_FORCE_HOST_RADIO_CTRL
 157

	)

205 
	#LGW_FORCE_HOST_FE_CTRL
 158

	)

206 
	#LGW_FORCE_DEC_FILTER_GAIN
 159

	)

207 
	#LGW_MCU_RST_0
 160

	)

208 
	#LGW_MCU_RST_1
 161

	)

209 
	#LGW_MCU_SELECT_MUX_0
 162

	)

210 
	#LGW_MCU_SELECT_MUX_1
 163

	)

211 
	#LGW_MCU_CORRUPTION_DETECTED_0
 164

	)

212 
	#LGW_MCU_CORRUPTION_DETECTED_1
 165

	)

213 
	#LGW_MCU_SELECT_EDGE_0
 166

	)

214 
	#LGW_MCU_SELECT_EDGE_1
 167

	)

215 
	#LGW_CHANN_SELECT_RSSI
 168

	)

216 
	#LGW_RSSI_BB_DEFAULT_VALUE
 169

	)

217 
	#LGW_RSSI_DEC_DEFAULT_VALUE
 170

	)

218 
	#LGW_RSSI_CHANN_DEFAULT_VALUE
 171

	)

219 
	#LGW_RSSI_BB_FILTER_ALPHA
 172

	)

220 
	#LGW_RSSI_DEC_FILTER_ALPHA
 173

	)

221 
	#LGW_RSSI_CHANN_FILTER_ALPHA
 174

	)

222 
	#LGW_IQ_MISMATCH_A_AMP_COEFF
 175

	)

223 
	#LGW_IQ_MISMATCH_A_PHI_COEFF
 176

	)

224 
	#LGW_IQ_MISMATCH_B_AMP_COEFF
 177

	)

225 
	#LGW_IQ_MISMATCH_B_SEL_I
 178

	)

226 
	#LGW_IQ_MISMATCH_B_PHI_COEFF
 179

	)

227 
	#LGW_TX_TRIG_IMMEDIATE
 180

	)

228 
	#LGW_TX_TRIG_DELAYED
 181

	)

229 
	#LGW_TX_TRIG_GPS
 182

	)

230 
	#LGW_TX_START_DELAY
 183

	)

231 
	#LGW_TX_FRAME_SYNCH_PEAK1_POS
 184

	)

232 
	#LGW_TX_FRAME_SYNCH_PEAK2_POS
 185

	)

233 
	#LGW_TX_RAMP_DURATION
 186

	)

234 
	#LGW_TX_OFFSET_I
 187

	)

235 
	#LGW_TX_OFFSET_Q
 188

	)

236 
	#LGW_TX_MODE
 189

	)

237 
	#LGW_TX_ZERO_PAD
 190

	)

238 
	#LGW_TX_EDGE_SELECT
 191

	)

239 
	#LGW_TX_EDGE_SELECT_TOP
 192

	)

240 
	#LGW_TX_GAIN
 193

	)

241 
	#LGW_TX_CHIRP_LOW_PASS
 194

	)

242 
	#LGW_TX_FCC_WIDEBAND
 195

	)

243 
	#LGW_TX_SWAP_IQ
 196

	)

244 
	#LGW_MBWSSF_IMPLICIT_HEADER
 197

	)

245 
	#LGW_MBWSSF_IMPLICIT_CRC_EN
 198

	)

246 
	#LGW_MBWSSF_IMPLICIT_CODING_RATE
 199

	)

247 
	#LGW_MBWSSF_IMPLICIT_PAYLOAD_LENGHT
 200

	)

248 
	#LGW_MBWSSF_AGC_FREEZE_ON_DETECT
 201

	)

249 
	#LGW_MBWSSF_FRAME_SYNCH_PEAK1_POS
 202

	)

250 
	#LGW_MBWSSF_FRAME_SYNCH_PEAK2_POS
 203

	)

251 
	#LGW_MBWSSF_PREAMBLE_SYMB1_NB
 204

	)

252 
	#LGW_MBWSSF_FRAME_SYNCH_GAIN
 205

	)

253 
	#LGW_MBWSSF_SYNCH_DETECT_TH
 206

	)

254 
	#LGW_MBWSSF_DETECT_MIN_SINGLE_PEAK
 207

	)

255 
	#LGW_MBWSSF_DETECT_TRIG_SAME_PEAK_NB
 208

	)

256 
	#LGW_MBWSSF_FREQ_TO_TIME_INVERT
 209

	)

257 
	#LGW_MBWSSF_FREQ_TO_TIME_DRIFT
 210

	)

258 
	#LGW_MBWSSF_PPM_CORRECTION
 211

	)

259 
	#LGW_MBWSSF_PAYLOAD_FINE_TIMING_GAIN
 212

	)

260 
	#LGW_MBWSSF_PREAMBLE_FINE_TIMING_GAIN
 213

	)

261 
	#LGW_MBWSSF_TRACKING_INTEGRAL
 214

	)

262 
	#LGW_MBWSSF_ZERO_PAD
 215

	)

263 
	#LGW_MBWSSF_MODEM_BW
 216

	)

264 
	#LGW_MBWSSF_RADIO_SELECT
 217

	)

265 
	#LGW_MBWSSF_RX_CHIRP_INVERT
 218

	)

266 
	#LGW_MBWSSF_LLR_SCALE
 219

	)

267 
	#LGW_MBWSSF_SNR_AVG_CST
 220

	)

268 
	#LGW_MBWSSF_PPM_OFFSET
 221

	)

269 
	#LGW_MBWSSF_RATE_SF
 222

	)

270 
	#LGW_MBWSSF_ONLY_CRC_EN
 223

	)

271 
	#LGW_MBWSSF_MAX_PAYLOAD_LEN
 224

	)

272 
	#LGW_TX_STATUS
 225

	)

273 
	#LGW_FSK_CH_BW_EXPO
 226

	)

274 
	#LGW_FSK_RSSI_LENGTH
 227

	)

275 
	#LGW_FSK_RX_INVERT
 228

	)

276 
	#LGW_FSK_PKT_MODE
 229

	)

277 
	#LGW_FSK_PSIZE
 230

	)

278 
	#LGW_FSK_CRC_EN
 231

	)

279 
	#LGW_FSK_DCFREE_ENC
 232

	)

280 
	#LGW_FSK_CRC_IBM
 233

	)

281 
	#LGW_FSK_ERROR_OSR_TOL
 234

	)

282 
	#LGW_FSK_RADIO_SELECT
 235

	)

283 
	#LGW_FSK_BR_RATIO
 236

	)

284 
	#LGW_FSK_REF_PATTERN_LSB
 237

	)

285 
	#LGW_FSK_REF_PATTERN_MSB
 238

	)

286 
	#LGW_FSK_PKT_LENGTH
 239

	)

287 
	#LGW_FSK_TX_GAUSSIAN_EN
 240

	)

288 
	#LGW_FSK_TX_GAUSSIAN_SELECT_BT
 241

	)

289 
	#LGW_FSK_TX_PATTERN_EN
 242

	)

290 
	#LGW_FSK_TX_PREAMBLE_SEQ
 243

	)

291 
	#LGW_FSK_TX_PSIZE
 244

	)

292 
	#LGW_FSK_NODE_ADRS
 245

	)

293 
	#LGW_FSK_BROADCAST
 246

	)

294 
	#LGW_FSK_AUTO_AFC_ON
 247

	)

295 
	#LGW_FSK_PATTERN_TIMEOUT_CFG
 248

	)

296 
	#LGW_SPI_RADIO_A__DATA
 249

	)

297 
	#LGW_SPI_RADIO_A__DATA_READBACK
 250

	)

298 
	#LGW_SPI_RADIO_A__ADDR
 251

	)

299 
	#LGW_SPI_RADIO_A__CS
 252

	)

300 
	#LGW_SPI_RADIO_B__DATA
 253

	)

301 
	#LGW_SPI_RADIO_B__DATA_READBACK
 254

	)

302 
	#LGW_SPI_RADIO_B__ADDR
 255

	)

303 
	#LGW_SPI_RADIO_B__CS
 256

	)

304 
	#LGW_RADIO_A_EN
 257

	)

305 
	#LGW_RADIO_B_EN
 258

	)

306 
	#LGW_RADIO_RST
 259

	)

307 
	#LGW_LNA_A_EN
 260

	)

308 
	#LGW_PA_A_EN
 261

	)

309 
	#LGW_LNA_B_EN
 262

	)

310 
	#LGW_PA_B_EN
 263

	)

311 
	#LGW_PA_GAIN
 264

	)

312 
	#LGW_LNA_A_CTRL_LUT
 265

	)

313 
	#LGW_PA_A_CTRL_LUT
 266

	)

314 
	#LGW_LNA_B_CTRL_LUT
 267

	)

315 
	#LGW_PA_B_CTRL_LUT
 268

	)

316 
	#LGW_CAPTURE_SOURCE
 269

	)

317 
	#LGW_CAPTURE_START
 270

	)

318 
	#LGW_CAPTURE_FORCE_TRIGGER
 271

	)

319 
	#LGW_CAPTURE_WRAP
 272

	)

320 
	#LGW_CAPTURE_PERIOD
 273

	)

321 
	#LGW_MODEM_STATUS
 274

	)

322 
	#LGW_VALID_HEADER_COUNTER_0
 275

	)

323 
	#LGW_VALID_PACKET_COUNTER_0
 276

	)

324 
	#LGW_VALID_HEADER_COUNTER_MBWSSF
 277

	)

325 
	#LGW_VALID_HEADER_COUNTER_FSK
 278

	)

326 
	#LGW_VALID_PACKET_COUNTER_MBWSSF
 279

	)

327 
	#LGW_VALID_PACKET_COUNTER_FSK
 280

	)

328 
	#LGW_CHANN_RSSI
 281

	)

329 
	#LGW_BB_RSSI
 282

	)

330 
	#LGW_DEC_RSSI
 283

	)

331 
	#LGW_DBG_MCU_DATA
 284

	)

332 
	#LGW_DBG_ARB_MCU_RAM_DATA
 285

	)

333 
	#LGW_DBG_AGC_MCU_RAM_DATA
 286

	)

334 
	#LGW_NEXT_PACKET_CNT
 287

	)

335 
	#LGW_ADDR_CAPTURE_COUNT
 288

	)

336 
	#LGW_TIMESTAMP
 289

	)

337 
	#LGW_DBG_CHANN0_GAIN
 290

	)

338 
	#LGW_DBG_CHANN1_GAIN
 291

	)

339 
	#LGW_DBG_CHANN2_GAIN
 292

	)

340 
	#LGW_DBG_CHANN3_GAIN
 293

	)

341 
	#LGW_DBG_CHANN4_GAIN
 294

	)

342 
	#LGW_DBG_CHANN5_GAIN
 295

	)

343 
	#LGW_DBG_CHANN6_GAIN
 296

	)

344 
	#LGW_DBG_CHANN7_GAIN
 297

	)

345 
	#LGW_DBG_DEC_FILT_GAIN
 298

	)

346 
	#LGW_SPI_DATA_FIFO_PTR
 299

	)

347 
	#LGW_PACKET_DATA_FIFO_PTR
 300

	)

348 
	#LGW_DBG_ARB_MCU_RAM_ADDR
 301

	)

349 
	#LGW_DBG_AGC_MCU_RAM_ADDR
 302

	)

350 
	#LGW_SPI_MASTER_CHIP_SELECT_POLARITY
 303

	)

351 
	#LGW_SPI_MASTER_CPOL
 304

	)

352 
	#LGW_SPI_MASTER_CPHA
 305

	)

353 
	#LGW_SIG_GEN_ANALYSER_MUX_SEL
 306

	)

354 
	#LGW_SIG_GEN_EN
 307

	)

355 
	#LGW_SIG_ANALYSER_EN
 308

	)

356 
	#LGW_SIG_ANALYSER_AVG_LEN
 309

	)

357 
	#LGW_SIG_ANALYSER_PRECISION
 310

	)

358 
	#LGW_SIG_ANALYSER_VALID_OUT
 311

	)

359 
	#LGW_SIG_GEN_FREQ
 312

	)

360 
	#LGW_SIG_ANALYSER_FREQ
 313

	)

361 
	#LGW_SIG_ANALYSER_I_OUT
 314

	)

362 
	#LGW_SIG_ANALYSER_Q_OUT
 315

	)

363 
	#LGW_GPS_EN
 316

	)

364 
	#LGW_GPS_POL
 317

	)

365 
	#LGW_SW_TEST_REG1
 318

	)

366 
	#LGW_SW_TEST_REG2
 319

	)

367 
	#LGW_SW_TEST_REG3
 320

	)

368 
	#LGW_DATA_MNGT_STATUS
 321

	)

369 
	#LGW_DATA_MNGT_CPT_FRAME_ALLOCATED
 322

	)

370 
	#LGW_DATA_MNGT_CPT_FRAME_FINISHED
 323

	)

371 
	#LGW_DATA_MNGT_CPT_FRAME_READEN
 324

	)

372 
	#LGW_TX_TRIG_ALL
 325

	)

374 
	#LGW_SX1301_TOTALREGS
 326

	)

384 
lgw_sx1301_c⁄√˘
(c⁄° * 
•idev_∑th
);

390 
lgw_sx1301_disc⁄√˘
();

396 
lgw_sx1301_ª£t
();

404 
lgw_sx1301_ªg_r
(
uöt16_t
 
ªgi°î_id
, 
öt32_t
* 
ªg_vÆue
);

405 
lgw_sx1301_ªg_w
(
uöt16_t
 
ªgi°î_id
, 
öt32_t
 
ªg_vÆue
);

406 
lgw_sx1301_ªg_rb
(
uöt16_t
 
ªgi°î_id
, 
uöt8_t
* 
d©a
, uöt16_à
size
);

407 
lgw_sx1301_ªg_wb
(
uöt16_t
 
ªgi°î_id
, 
uöt8_t
* 
d©a
, uöt16_à
size
);

	@hal/sx1301hal/loragw_sx125x.h

15 #i‚de‡
__SX125X_REGS_H__


16 
	#__SX125X_REGS_H__


	)

32 
	#SX125x_TX_DAC_CLK_SEL
 1

	)

33 
	#SX125x_TX_DAC_GAIN
 2

	)

34 
	#SX125x_TX_MIX_GAIN
 14

	)

35 
	#SX125x_TX_PLL_BW
 1

	)

36 
	#SX125x_TX_ANA_BW
 0

	)

37 
	#SX125x_TX_DAC_BW
 5

	)

38 
	#SX125x_RX_LNA_GAIN
 1

	)

39 
	#SX125x_RX_BB_GAIN
 12

	)

40 
	#SX125x_LNA_ZIN
 1

	)

41 
	#SX125x_RX_ADC_BW
 7

	)

42 
	#SX125x_RX_ADC_TRIM
 6

	)

43 
	#SX125x_RX_BB_BW
 0

	)

44 
	#SX125x_RX_PLL_BW
 0

	)

45 
	#SX125x_ADC_TEMP
 0

	)

46 
	#SX125x_XOSC_GM_STARTUP
 13

	)

47 
	#SX125x_XOSC_DISABLE
 2

	)

	@hal/sx1302hal/loragw_agc_params.h

16 #i‚de‡
_LORAGW_AGC_PARAMS_H


17 
	#_LORAGW_AGC_PARAMS_H


	)

22 
	sagc_gaö_∑øms_s
 {

23 
uöt8_t
 
	m™a_mö
;

24 
uöt8_t
 
	m™a_max
;

25 
uöt8_t
 
	m™a_thªsh_l
;

26 
uöt8_t
 
	m™a_thªsh_h
;

27 
uöt8_t
 
	mdec_©ä_mö
;

28 
uöt8_t
 
	mdec_©ä_max
;

29 
uöt8_t
 
	mdec_thªsh_l
;

30 
uöt8_t
 
	mdec_thªsh_h1
;

31 
uöt8_t
 
	mdec_thªsh_h2
;

32 
uöt8_t
 
	mch™_©ä_mö
;

33 
uöt8_t
 
	mch™_©ä_max
;

34 
uöt8_t
 
	mch™_thªsh_l
;

35 
uöt8_t
 
	mch™_thªsh_h
;

36 
uöt8_t
 
	mdevi˚Sñ
;

37 
uöt8_t
 
	mhpMax
;

38 
uöt8_t
 
	m∑DutyCy˛e
;

44 c⁄° 
agc_gaö_∑øms_s
 
	gagc_∑øms_sx1250
 = {

45 .
™a_mö
 = 1,

46 .
	g™a_max
 = 13,

47 .
	g™a_thªsh_l
 = 3,

48 .
	g™a_thªsh_h
 = 12,

49 .
	gdec_©ä_mö
 = 4,

50 .
	gdec_©ä_max
 = 15,

51 .
	gdec_thªsh_l
 = 40,

52 .
	gdec_thªsh_h1
 = 80,

53 .
	gdec_thªsh_h2
 = 90,

54 .
	gch™_©ä_mö
 = 4,

55 .
	gch™_©ä_max
 = 14,

56 .
	gch™_thªsh_l
 = 52,

57 .
	gch™_thªsh_h
 = 132,

58 .
	gdevi˚Sñ
 = 0,

59 .
	ghpMax
 = 7,

60 .
	g∑DutyCy˛e
 = 4

63 c⁄° 
agc_gaö_∑øms_s
 
	gagc_∑øms_sx125x
 = {

64 .
™a_mö
 = 0,

65 .
	g™a_max
 = 9,

66 .
	g™a_thªsh_l
 = 16,

67 .
	g™a_thªsh_h
 = 35,

68 .
	gdec_©ä_mö
 = 7,

69 .
	gdec_©ä_max
 = 11,

70 .
	gdec_thªsh_l
 = 45,

71 .
	gdec_thªsh_h1
 = 100,

72 .
	gdec_thªsh_h2
 = 115,

73 .
	gch™_©ä_mö
 = 4,

74 .
	gch™_©ä_max
 = 14,

75 .
	gch™_thªsh_l
 = 52,

76 .
	gch™_thªsh_h
 = 132,

77 .
	gdevi˚Sñ
 = 0,

78 .
	ghpMax
 = 0,

79 .
	g∑DutyCy˛e
 = 0

	@hal/sx1302hal/loragw_cal.c

19 
	~<°döt.h
>

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<uni°d.h
>

23 
	~<f˙é.h
>

24 
	~<°rög.h
>

25 
	~<öây≥s.h
>

26 
	~<m©h.h
>

28 
	~<sys/io˘l.h
>

29 
	~<löux/•i/•idev.h
>

31 
	~"l‹agw_ªg_sx1302.h
"

32 
	~"l‹agw_aux.h
"

33 
	~"l‹agw_hÆ.h
"

34 
	~"l‹agw_sx1302.h
"

35 
	~"l‹agw_sx125x.h
"

36 
	~"l‹agw_ˇl.h
"

41 
	#TX_CALIB_DONE_BY_HAL
 0

	)

46 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

47 #i‡
DEBUG_CAL
 == 1

48 
	#DEBUG_MSG
(
°r
Ë
	`Ârötf
(
°dîr
, så)

	)

49 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...Ë
	`Ârötf
(
°dîr
,"%s:%d: "fmt, 
__FUNCTION__
, 
__LINE__
,árgs)

	)

50 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){
	`Ârötf
(
°dîr
,"%s:%d: ERROR: NULL POINTER AS ARGUMENT\n", 
__FUNCTION__
, 
__LINE__
); 
LGW_SPI_ERROR
;}

	)

52 
	#DEBUG_MSG
(
°r
)

	)

53 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...)

	)

54 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){ 
LGW_SPI_ERROR
;}

	)

60 
	#CAL_TX_TONE_FREQ_HZ
 250000

	)

61 
	#CAL_ITER
 3

	)

62 
	#CAL_TX_CORR_DURATION
 0

	)

68 
öt8_t
 
	grf_rx_image_amp
[
LGW_RF_CHAIN_NB
] = {0, 0};

69 
öt8_t
 
	grf_rx_image_phi
[
LGW_RF_CHAIN_NB
] = {0, 0};

74 
ˇl_rx_ªsu…_öô
(
lgw_sx125x_ˇl_rx_ªsu…_s
 *
ªs_rx_mö
, lgw_sx125x_ˇl_rx_ªsu…_†*
ªs_rx_max
);

75 
ˇl_rx_ªsu…_s‹t
(
lgw_sx125x_ˇl_rx_ªsu…_s
 *
ªs_rx
, lgw_sx125x_ˇl_rx_ªsu…_†*
ªs_rx_mö
, lgw_sx125x_ˇl_rx_ªsu…_†*
ªs_rx_max
);

76 
boﬁ
 
ˇl_rx_ªsu…_as£π
(
lgw_sx125x_ˇl_rx_ªsu…_s
 *
ªs_rx_mö
, lgw_sx125x_ˇl_rx_ªsu…_†*
ªs_rx_max
);

77 
sx125x_ˇl_rx_image
(
uöt8_t
 
rf_chaö
, 
uöt32_t
 
‰eq_hz
, 
boﬁ
 
u£_lo›back
, uöt8_à
ødio_ty≥
, 
lgw_sx125x_ˇl_rx_ªsu…_s
 * 
ªs
);

79 
ˇl_tx_ªsu…_öô
(
lgw_sx125x_ˇl_tx_ªsu…_s
 *
ªs_tx_mö
, lgw_sx125x_ˇl_tx_ªsu…_†*
ªs_tx_max
);

80 
ˇl_tx_ªsu…_s‹t
(
lgw_sx125x_ˇl_tx_ªsu…_s
 *
ªs_tx
, lgw_sx125x_ˇl_tx_ªsu…_†*
ªs_tx_mö
, lgw_sx125x_ˇl_tx_ªsu…_†*
ªs_tx_max
);

81 
boﬁ
 
ˇl_tx_ªsu…_as£π
(
lgw_sx125x_ˇl_tx_ªsu…_s
 *
ªs_tx_mö
, lgw_sx125x_ˇl_tx_ªsu…_†*
ªs_tx_max
);

82 
sx125x_ˇl_tx_dc_off£t
(
uöt8_t
 
rf_chaö
, 
uöt32_t
 
‰eq_hz
, uöt8_à
dac_gaö
, uöt8_à
mix_gaö
, uöt8_à
ødio_ty≥
, 
lgw_sx125x_ˇl_tx_ªsu…_s
 * 
ªs
);

87 
	$sx1302_ˇl_°¨t
(
uöt8_t
 
vîsi⁄
, 
lgw_c⁄f_rxrf_s
 * 
rf_chaö_cfg
, 
lgw_tx_gaö_lut_s
 * 
txgaö_lut
) {

88 
i
, 
j
, 
k
;

89 
uöt8_t
 
vÆ
;

90 
boﬁ
 
ˇl_°©us
 = 
Ál£
;

91 
uöt8_t
 
x_max
;

92 
x_max_idx
;

93 
uöt8_t
 
dac_gaö
[
LGW_RF_CHAIN_NB
][
TX_GAIN_LUT_SIZE_MAX
];

94 
uöt8_t
 
mix_gaö
[
LGW_RF_CHAIN_NB
][
TX_GAIN_LUT_SIZE_MAX
];

95 
öt8_t
 
off£t_i
[
LGW_RF_CHAIN_NB
][
TX_GAIN_LUT_SIZE_MAX
];

96 
öt8_t
 
off£t_q
[
LGW_RF_CHAIN_NB
][
TX_GAIN_LUT_SIZE_MAX
];

97 
uöt8_t
 
nb_gaös
[
LGW_RF_CHAIN_NB
];

98 
boﬁ
 
unique_gaös
;

99 
lgw_sx125x_ˇl_rx_ªsu…_s
 
ˇl_rx
[
CAL_ITER
], 
ˇl_rx_mö
, 
ˇl_rx_max
;

100 
lgw_sx125x_ˇl_tx_ªsu…_s
 
ˇl_tx
[
CAL_ITER
], 
ˇl_tx_mö
, 
ˇl_tx_max
;

103 
	`sx1302_agc_waô_°©us
(0x01);

105 
	`sx1302_agc_maûbox_ªad
(0, &
vÆ
);

106 i‡(
vÆ
 !
vîsi⁄
) {

107 
	`¥ötf
("ERROR: wr⁄g CAL fw vîsi⁄ (%d)\n", 
vÆ
);

108  
LGW_HAL_ERROR
;

110 
	`¥ötf
("CAL FW VERSION: %d\n", 
vÆ
);

113 
	`sx1302_agc_maûbox_wrôe
(3, 0xFF);

116 
	`sx1302_agc_waô_°©us
(0x00);

118 
	`¥ötf
("CAL: started\n");

121 
i
 = 0; i < 
LGW_RF_CHAIN_NB
; i++) {

122 i‡(
rf_chaö_cfg
[
i
].
íabÀ
) {

124 i‡(
rf_chaö_cfg
[0].
ty≥
 ==Ñf_chain_cfg[1].type) {

125 
	`ˇl_rx_ªsu…_öô
(&
ˇl_rx_mö
, &
ˇl_rx_max
);

126 
j
 = 0; j < 
CAL_ITER
; j++) {

127 
	`sx125x_ˇl_rx_image
(
i
, 
rf_chaö_cfg
[i].
‰eq_hz
, 
Ál£
,Ñf_chaö_cfg[i].
ty≥
, &
ˇl_rx
[
j
]);

128 
	`ˇl_rx_ªsu…_s‹t
(&
ˇl_rx
[
j
], &
ˇl_rx_mö
, &
ˇl_rx_max
);

130 
ˇl_°©us
 = 
	`ˇl_rx_ªsu…_as£π
(&
ˇl_rx_mö
, &
ˇl_rx_max
);

134 i‡((
ˇl_°©us
 =
Ál£
Ë|| (
rf_chaö_cfg
[0].
ty≥
 !=Ñf_chain_cfg[1].type)) {

135 
	`ˇl_rx_ªsu…_öô
(&
ˇl_rx_mö
, &
ˇl_rx_max
);

136 
j
 = 0; j < 
CAL_ITER
; j++) {

137 
	`sx125x_ˇl_rx_image
(
i
, 
rf_chaö_cfg
[i].
‰eq_hz
, 
åue
,Ñf_chaö_cfg[i].
ty≥
, &
ˇl_rx
[
j
]);

138 
	`ˇl_rx_ªsu…_s‹t
(&
ˇl_rx
[
j
], &
ˇl_rx_mö
, &
ˇl_rx_max
);

140 
ˇl_°©us
 = 
	`ˇl_rx_ªsu…_as£π
(&
ˇl_rx_mö
, &
ˇl_rx_max
);

143 i‡(
ˇl_°©us
 =
Ál£
) {

144 
	`DEBUG_MSG
("*********************************************\n");

145 
	`DEBUG_PRINTF
("ERROR: Rx imagêˇlibøti⁄ o‡ødiÿ%d faûed\n",
i
);

146 
	`DEBUG_MSG
("*********************************************\n");

147  
LGW_HAL_ERROR
;

151 
x_max
 = 0;

152 
x_max_idx
 = 0;

153 
j
=0; j<
CAL_ITER
; j++) {

154 i‡(
ˇl_rx
[
j
].
ªj
 > 
x_max
) {

155 
x_max
 = 
ˇl_rx
[
j
].
ªj
;

156 
x_max_idx
 = 
j
;

159 
rf_rx_image_amp
[
i
] = 
ˇl_rx
[
x_max_idx
].
amp
;

160 
rf_rx_image_phi
[
i
] = 
ˇl_rx
[
x_max_idx
].
phi
;

162 
	`DEBUG_PRINTF
("INFO: Rx imagêˇlibøti⁄ o‡ødiÿ%d suc˚eded. Im¥oved imagêªje˘i⁄ from %2dÅÿ%2d dB (Amp:%3d Phi:%3d)\n", 
i
, 
ˇl_rx
[
x_max_idx
].
ªj_öô
, cÆ_rx[x_max_idx].
ªj
, cÆ_rx[x_max_idx].
amp
, cÆ_rx[x_max_idx].
phi
);

164 
rf_rx_image_amp
[
i
] = 0;

165 
rf_rx_image_phi
[
i
] = 0;

170 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RADIO_FE_IQ_COMP_AMP_COEFF_RADIO_A_AMP_COEFF
, (
öt32_t
)
rf_rx_image_amp
[0]);

171 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RADIO_FE_IQ_COMP_PHI_COEFF_RADIO_A_PHI_COEFF
, (
öt32_t
)
rf_rx_image_phi
[0]);

172 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RADIO_FE_IQ_COMP_AMP_COEFF_RADIO_B_AMP_COEFF
, (
öt32_t
)
rf_rx_image_amp
[1]);

173 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RADIO_FE_IQ_COMP_PHI_COEFF_RADIO_B_PHI_COEFF
, (
öt32_t
)
rf_rx_image_phi
[1]);

176 
k
 = 0; k < 
LGW_RF_CHAIN_NB
; k++) {

177 
nb_gaös
[
k
] = 0;

178 
i
 = 0; i < 
txgaö_lut
[
k
].
size
; i++) {

179 
unique_gaös
 = 
åue
;

180 
j
 = 0; j < 
nb_gaös
[
k
]; j++) {

181 i‡((
txgaö_lut
[
k
].
lut
[
i
].
dac_gaö
 =dac_gaö[k][
j
]Ë&& (txgaö_lut[k].lut[i].
mix_gaö
 == mix_gain[k][j])) {

182 
unique_gaös
 = 
Ál£
;

185 i‡(
unique_gaös
) {

186 
dac_gaö
[
k
][
nb_gaös
[k]] = 
txgaö_lut
[k].
lut
[
i
].dac_gain;

187 
mix_gaö
[
k
][
nb_gaös
[k]] = 
txgaö_lut
[k].
lut
[
i
].mix_gain;

188 
nb_gaös
[
k
] += 1;

194 
i
 = 0; i < 
LGW_RF_CHAIN_NB
; i++) {

195 i‡(
rf_chaö_cfg
[
i
].
tx_íabÀ
) {

196 
j
 = 0; j < 
nb_gaös
[
i
]; j++) {

197 
	`ˇl_tx_ªsu…_öô
(&
ˇl_tx_mö
, &
ˇl_tx_max
);

198 
k
 = 0; k < 
CAL_ITER
; k++){

199 
	`sx125x_ˇl_tx_dc_off£t
(
i
, 
rf_chaö_cfg
[i].
‰eq_hz
, 
dac_gaö
[i][
j
], 
mix_gaö
[i][j],Ñf_chaö_cfg[i].
ty≥
, &
ˇl_tx
[
k
]);

200 
	`ˇl_tx_ªsu…_s‹t
(&
ˇl_tx
[
k
], &
ˇl_tx_mö
, &
ˇl_tx_max
);

202 
ˇl_°©us
 = 
	`ˇl_tx_ªsu…_as£π
(&
ˇl_tx_mö
, &
ˇl_tx_max
);

204 i‡(
ˇl_°©us
 =
Ál£
) {

205 
	`DEBUG_MSG
("*********************************************\n");

206 
	`DEBUG_PRINTF
("ERROR: Tx DC off£àˇlibøti⁄ o‡ødiÿ%d f‹ DAC gaö %dánd mixî gaö %2d faûed\n", 
i
, 
dac_gaö
[i][
j
], 
mix_gaö
[i][j]);

207 
	`DEBUG_MSG
("*********************************************\n");

208  
LGW_HAL_ERROR
;

212 
x_max
 = 0;

213 
x_max_idx
 = 0;

214 
k
 = 0; k < 
CAL_ITER
; k++) {

215 i‡(
ˇl_tx
[
k
].
ªj
 > 
x_max
) {

216 
x_max
 = 
ˇl_tx
[
k
].
ªj
;

217 
x_max_idx
 = 
k
;

220 
off£t_i
[
i
][
j
] = 
ˇl_tx
[
x_max_idx
].offset_i;

221 
off£t_q
[
i
][
j
] = 
ˇl_tx
[
x_max_idx
].offset_q;

223 
	`DEBUG_PRINTF
("INFO: Tx DC off£àˇlibøti⁄ o‡ødiÿ%d f‹ DAC gaö %dánd mixî gaö %2d suc˚eded. Im¥oved DCÑeje˘i⁄ by %2d dB (I:%4d Q:%4d)\n", 
i
, 
dac_gaö
[i][
j
], 
mix_gaö
[i][j], 
ˇl_tx
[
x_max_idx
].
ªj
, cÆ_tx[x_max_idx].
off£t_i
, cÆ_tx[x_max_idx].
off£t_q
);

229 
k
 = 0; k < 
LGW_RF_CHAIN_NB
; k++) {

230 
i
 = 0; i < 
txgaö_lut
[
k
].
size
; i++) {

231 
j
 = 0; j < 
nb_gaös
[
k
]; j++) {

232 i‡((
txgaö_lut
[
k
].
lut
[
i
].
dac_gaö
 =dac_gaö[k][
j
]Ë&& (txgaö_lut[k].lut[i].
mix_gaö
 == mix_gain[k][j])) {

236 
txgaö_lut
[
k
].
lut
[
i
].
off£t_i
 = off£t_i[k][
j
];

237 
txgaö_lut
[
k
].
lut
[
i
].
off£t_q
 = off£t_q[k][
j
];

241 
	`¥ötf
("-------------------------------------------------------------------\n");

242 
	`¥ötf
("Radio calibration completed:\n");

243 
	`¥ötf
(" RadioA:ámp:%dÖhi:%d\n", 
rf_rx_image_amp
[0], 
rf_rx_image_phi
[0]);

244 
	`¥ötf
(" RadioB:ámp:%dÖhi:%d\n", 
rf_rx_image_amp
[1], 
rf_rx_image_phi
[1]);

245 
k
 = 0; k < 
LGW_RF_CHAIN_NB
; k++) {

246 
	`¥ötf
(" TX cÆibøti⁄Ö¨am†f‹Ñf_chaö %d:\n", 
k
);

247 
i
 = 0; i < 
txgaö_lut
[
k
].
size
; i++) {

248 
	`¥ötf
(" --Öowî:%d\tdac:%u\tmix:%u\toff£t_i:%d\toff£t_q:%d\n", 
txgaö_lut
[
k
].
lut
[
i
].
rf_powî
,Åxgaö_lut[k].lut[i].
dac_gaö
,Åxgaö_lut[k].lut[i].
mix_gaö
,Åxgaö_lut[k].lut[i].
off£t_i
,Åxgaö_lut[k].lut[i].
off£t_q
);

251 
	`¥ötf
("-------------------------------------------------------------------\n");

253  
LGW_HAL_SUCCESS
;

254 
	}
}

258 
	$sx125x_ˇl_rx_image
(
uöt8_t
 
rf_chaö
, 
uöt32_t
 
‰eq_hz
, 
boﬁ
 
u£_lo›back
, uöt8_à
ødio_ty≥
, 
lgw_sx125x_ˇl_rx_ªsu…_s
 * 
ªs
) {

259 
uöt8_t
 
rx
, 
tx
;

260 
uöt32_t
 
rx_‰eq_hz
, 
tx_‰eq_hz
;

261 
uöt32_t
 
rx_‰eq_öt
, 
rx_‰eq_‰ac
;

262 
uöt32_t
 
tx_‰eq_öt
, 
tx_‰eq_‰ac
;

263 
uöt8_t
 
rx_∂l_locked
, 
tx_∂l_locked
;

264 
uöt8_t
 
rx_thªshﬁd
 = 8;

266 
	`¥ötf
("\n%s:Ñf_chaö:%u, fªq_hz:%u,Üo›back:%d,Ñadio_ty≥:%d\n", 
__FUNCTION__
, 
rf_chaö
, 
‰eq_hz
, 
u£_lo›back
, 
ødio_ty≥
);

269 
rx
 = 
rf_chaö
;

270 i‡(
u£_lo›back
 =
åue
) {

271 
tx
 = 
rf_chaö
;

273 
tx
 = 1-
rf_chaö
;

277 
rx_‰eq_hz
 = 
‰eq_hz
;

278 
tx_‰eq_hz
 = 
‰eq_hz
 + 
CAL_TX_TONE_FREQ_HZ
;

279 
ødio_ty≥
) {

280 
LGW_RADIO_TYPE_SX1255
:

281 
rx_‰eq_öt
 = 
rx_‰eq_hz
 / (
SX125x_32MHz_FRAC
 << 7);

282 
rx_‰eq_‰ac
 = ((
rx_‰eq_hz
 % (
SX125x_32MHz_FRAC
 << 7)) << 9) / SX125x_32MHz_FRAC;

283 
tx_‰eq_öt
 = 
tx_‰eq_hz
 / (
SX125x_32MHz_FRAC
 << 7);

284 
tx_‰eq_‰ac
 = ((
tx_‰eq_hz
 % (
SX125x_32MHz_FRAC
 << 7)) << 9) / SX125x_32MHz_FRAC;

286 
LGW_RADIO_TYPE_SX1257
:

287 
rx_‰eq_öt
 = 
rx_‰eq_hz
 / (
SX125x_32MHz_FRAC
 << 8);

288 
rx_‰eq_‰ac
 = ((
rx_‰eq_hz
 % (
SX125x_32MHz_FRAC
 << 8)) << 8) / SX125x_32MHz_FRAC;

289 
tx_‰eq_öt
 = 
tx_‰eq_hz
 / (
SX125x_32MHz_FRAC
 << 8);

290 
tx_‰eq_‰ac
 = ((
tx_‰eq_hz
 % (
SX125x_32MHz_FRAC
 << 8)) << 8) / SX125x_32MHz_FRAC;

293 
	`DEBUG_PRINTF
("ERROR: UNEXPECTED VALUE %d FOR RADIO TYPE\n", 
ødio_ty≥
);

294  
LGW_HAL_ERROR
;

296 
	`lgw_sx125x_ªg_w
(
SX125x_REG_FRF_RX_MSB
, 0xFF & 
rx_‰eq_öt
, 
rx
);

297 
	`lgw_sx125x_ªg_w
(
SX125x_REG_FRF_RX_MID
, 0xFF & (
rx_‰eq_‰ac
 >> 8), 
rx
);

298 
	`lgw_sx125x_ªg_w
(
SX125x_REG_FRF_RX_LSB
, 0xFF & 
rx_‰eq_‰ac
, 
rx
);

299 
	`lgw_sx125x_ªg_w
(
SX125x_REG_FRF_TX_MSB
, 0xFF & 
tx_‰eq_öt
, 
tx
);

300 
	`lgw_sx125x_ªg_w
(
SX125x_REG_FRF_TX_MID
, 0xFF & (
tx_‰eq_‰ac
 >> 8), 
tx
);

301 
	`lgw_sx125x_ªg_w
(
SX125x_REG_FRF_TX_LSB
, 0xFF & 
tx_‰eq_‰ac
, 
tx
);

307 
	`lgw_sx125x_ªg_w
(
SX125x_REG_RX_BW__BB_BW
, 0, 
rx
);

308 
	`lgw_sx125x_ªg_w
(
SX125x_REG_RX_BW__ADC_TRIM
, 6, 
rx
);

310 
	`lgw_sx125x_ªg_w
(
SX125x_REG_RX_PLL_BW__PLL_BW
, 0, 
rx
);

311 
	`lgw_sx125x_ªg_w
(
SX125x_REG_TX_BW__PLL_BW
, 0, 
tx
);

313 
	`lgw_sx125x_ªg_w
(
SX125x_REG_TX_DAC_BW
, 5, 
tx
);

315 i‡(
u£_lo›back
 =
åue
) {

316 
	`lgw_sx125x_ªg_w
(
SX125x_REG_TX_GAIN__DAC_GAIN
, 3, 
tx
);

317 
	`lgw_sx125x_ªg_w
(
SX125x_REG_TX_GAIN__MIX_GAIN
, 10, 
tx
);

318 
	`lgw_sx125x_ªg_w
(
SX125x_REG_CLK_SELECT__RF_LOOPBACK_EN
, 1, 
tx
);

319 
	`lgw_sx125x_ªg_w
(
SX125x_REG_MODE
, 15, 
tx
);

321 
	`lgw_sx125x_ªg_w
(
SX125x_REG_TX_GAIN__DAC_GAIN
, 3, 
tx
);

322 
	`lgw_sx125x_ªg_w
(
SX125x_REG_TX_GAIN__MIX_GAIN
, 15, 
tx
);

323 
	`lgw_sx125x_ªg_w
(
SX125x_REG_MODE
, 3, 
rx
);

324 
	`lgw_sx125x_ªg_w
(
SX125x_REG_MODE
, 13, 
tx
);

326 
	`waô_ms
(10);

327 
	`lgw_sx125x_ªg_r
(
SX125x_REG_MODE_STATUS__RX_PLL_LOCKED
, &
rx_∂l_locked
, 
rx
);

328 
	`lgw_sx125x_ªg_r
(
SX125x_REG_MODE_STATUS__TX_PLL_LOCKED
, &
tx_∂l_locked
, 
tx
);

329 i‡((
rx_∂l_locked
 =0Ë|| (
tx_∂l_locked
 == 0)) {

330 
	`DEBUG_MSG
("ERROR: PLL failedÅoÜock\n");

331  
LGW_HAL_ERROR
;

337 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RADIO_FE_SIG_ANA_CFG_RADIO_SEL
, (
rf_chaö
 == 0) ? 1 : 0);

340 
	`sx1302_agc_maûbox_wrôe
(2, 
rf_chaö
);

341 
	`sx1302_agc_maûbox_wrôe
(1, 
CAL_TX_TONE_FREQ_HZ
 * 64e-6);

342 
	`sx1302_agc_maûbox_wrôe
(0, 
CAL_TX_CORR_DURATION
);

344 
	`sx1302_agc_maûbox_wrôe
(3, 0x00);

345 
	`sx1302_agc_maûbox_wrôe
(3, 0x01);

346 
	`sx1302_agc_waô_°©us
(0x01);

348 
	`sx1302_agc_maûbox_wrôe
(3, 0x02);

349 
	`sx1302_agc_waô_°©us
(0x02);

351 
	`sx1302_agc_maûbox_wrôe
(3, 0x03);

352 
	`sx1302_agc_waô_°©us
(0x03);

354 
	`sx1302_agc_maûbox_wrôe
(2, 0);

355 
	`sx1302_agc_maûbox_wrôe
(1, 
rx_thªshﬁd
);

357 
	`sx1302_agc_maûbox_wrôe
(3, 0x04);

360 
	`sx1302_agc_waô_°©us
(0x06);

361 
uöt8_t
 
thªshﬁd
, 
ˇl_dec_gaö
, 
rx_sig_1
, 
rx_sig_0
;

362 
	`sx1302_agc_maûbox_ªad
(3, &
thªshﬁd
);

363 
	`sx1302_agc_maûbox_ªad
(2, &
ˇl_dec_gaö
);

364 
	`sx1302_agc_maûbox_ªad
(1, &
rx_sig_1
);

365 
	`sx1302_agc_maûbox_ªad
(0, &
rx_sig_0
);

366 
	`DEBUG_PRINTF
("thªshﬁd:%u, cÆ_dec_gaö:%u,Ñx_sig:%u\n", 
thªshﬁd
 * 256, 
ˇl_dec_gaö
, 
rx_sig_1
 * 256 + 
rx_sig_0
);

367 
	`sx1302_agc_maûbox_wrôe
(3, 0x06);

369 
	`sx1302_agc_waô_°©us
(0x07);

370 
uöt8_t
 
rx_img_öô_0
, 
rx_img_öô_1
, 
amp
, 
phi
;

371 
	`sx1302_agc_maûbox_ªad
(3, &
rx_img_öô_1
);

372 
	`sx1302_agc_maûbox_ªad
(2, &
rx_img_öô_0
);

373 
	`sx1302_agc_maûbox_ªad
(1, &
amp
);

374 
	`sx1302_agc_maûbox_ªad
(0, &
phi
);

375 
	`DEBUG_PRINTF
("rx_img_öô_0:%u,Ñx_img_öô_1:%u,ámp:%d,Öhi:%d\n", 
rx_img_öô_0
, 
rx_img_öô_1
, (
öt8_t
)
amp
, (öt8_t)
phi
);

376 
	`sx1302_agc_maûbox_wrôe
(3, 0x07);

378 
	`sx1302_agc_waô_°©us
(0x08);

379 
uöt8_t
 
rx_img_0
, 
rx_img_1
, 
rx_noi£_øw_0
, 
rx_noi£_øw_1
;

380 
rx_img
, 
rx_noi£_øw
, 
rx_img_öô
, 
rx_sig
;

381 
	`sx1302_agc_maûbox_ªad
(3, &
rx_img_1
);

382 
	`sx1302_agc_maûbox_ªad
(2, &
rx_img_0
);

383 
	`sx1302_agc_maûbox_ªad
(1, &
rx_noi£_øw_1
);

384 
	`sx1302_agc_maûbox_ªad
(0, &
rx_noi£_øw_0
);

385 
	`DEBUG_PRINTF
("rx_img_1:%u,Ñx_img_0:%u,Ñx_noi£_øw_1:%u,Ñx_noi£_øw_0:%u\n", 
rx_img_1
, 
rx_img_0
, 
rx_noi£_øw_1
, 
rx_noi£_øw_0
);

386 
rx_sig
 = ()
rx_sig_1
 * 256 + ()
rx_sig_0
;

387 
rx_noi£_øw
 = ()
rx_noi£_øw_1
 * 256 + ()
rx_noi£_øw_0
;

388 
rx_img_öô
 = ()
rx_img_öô_1
 * 256 + ()
rx_img_öô_0
;

389 
rx_img
 = ()
rx_img_1
 * 256 + ()
rx_img_0
;

390 
	`DEBUG_PRINTF
("rx_img:%u,Ñx_noi£_øw:%u\n", (
uöt16_t
)
rx_img
, (uöt16_t)
rx_noi£_øw
);

391 
	`sx1302_agc_maûbox_wrôe
(3, 0x08);

393 
ªs
->
amp
 = (
öt8_t
)amp;

394 
ªs
->
phi
 = (
öt8_t
)phi;

395 
ªs
->
¢r
 = (
uöt16_t
)(20 * 
	`log10
(
rx_sig
/
rx_noi£_øw
));

396 
ªs
->
ªj_öô
 = (
uöt16_t
)(20 * 
	`log10
(
rx_sig
/
rx_img_öô
));

397 
ªs
->
ªj
 = (
uöt16_t
)(20 * 
	`log10
(
rx_sig
/
rx_img
));

398 
	`DEBUG_PRINTF
("¢r:%u,Ñej:%u,Ñej_öô:%u\n", 
ªs
->
¢r
,Ñes->
ªj
,Ñes->
ªj_öô
);

401 
	`DEBUG_MSG
(" CAL: waiting for RX calibrationÅo complete...\n");

402 
	`sx1302_agc_waô_°©us
((
rf_chaö
 == 0) ? 0x11 : 0x22);

403 
	`DEBUG_MSG
("CAL: RX Calibration Done\n");

405 
	`¥ötf
("%s, RESULT:Ñf_chaö:%uámp:%dÖhi:%d\n", 
__FUNCTION__
, 
rf_chaö
, 
ªs
->
amp
,Ñes->
phi
);

407  
LGW_HAL_SUCCESS
;

408 
	}
}

412 
	$sx125x_ˇl_tx_dc_off£t
(
uöt8_t
 
rf_chaö
, 
uöt32_t
 
‰eq_hz
, uöt8_à
dac_gaö
, uöt8_à
mix_gaö
, uöt8_à
ødio_ty≥
, 
lgw_sx125x_ˇl_tx_ªsu…_s
 * 
ªs
) {

414 
uöt32_t
 
rx_‰eq_hz
, 
tx_‰eq_hz
;

415 
uöt32_t
 
rx_‰eq_öt
, 
rx_‰eq_‰ac
;

416 
uöt32_t
 
tx_‰eq_öt
, 
tx_‰eq_‰ac
;

417 
uöt8_t
 
rx_∂l_locked
, 
tx_∂l_locked
;

418 
uöt16_t
 
ªg
;

419 
uöt8_t
 
tx_thªshﬁd
 = 64;

420 
i
;

422 
	`¥ötf
("\n%s:Ñf_chaö:%u, fªq_hz:%u, dac_gaö:%u, mix_gaö:%u,Ñadio_ty≥:%d\n", 
__FUNCTION__
, 
rf_chaö
, 
‰eq_hz
, 
dac_gaö
, 
mix_gaö
, 
ødio_ty≥
);

425 
rx_‰eq_hz
 = 
‰eq_hz
 - 
CAL_TX_TONE_FREQ_HZ
;

426 
tx_‰eq_hz
 = 
‰eq_hz
;

427 
ødio_ty≥
) {

428 
LGW_RADIO_TYPE_SX1255
:

429 
rx_‰eq_öt
 = 
rx_‰eq_hz
 / (
SX125x_32MHz_FRAC
 << 7);

430 
rx_‰eq_‰ac
 = ((
rx_‰eq_hz
 % (
SX125x_32MHz_FRAC
 << 7)) << 9) / SX125x_32MHz_FRAC;

431 
tx_‰eq_öt
 = 
tx_‰eq_hz
 / (
SX125x_32MHz_FRAC
 << 7);

432 
tx_‰eq_‰ac
 = ((
tx_‰eq_hz
 % (
SX125x_32MHz_FRAC
 << 7)) << 9) / SX125x_32MHz_FRAC;

434 
LGW_RADIO_TYPE_SX1257
:

435 
rx_‰eq_öt
 = 
rx_‰eq_hz
 / (
SX125x_32MHz_FRAC
 << 8);

436 
rx_‰eq_‰ac
 = ((
rx_‰eq_hz
 % (
SX125x_32MHz_FRAC
 << 8)) << 8) / SX125x_32MHz_FRAC;

437 
tx_‰eq_öt
 = 
tx_‰eq_hz
 / (
SX125x_32MHz_FRAC
 << 8);

438 
tx_‰eq_‰ac
 = ((
tx_‰eq_hz
 % (
SX125x_32MHz_FRAC
 << 8)) << 8) / SX125x_32MHz_FRAC;

441 
	`DEBUG_PRINTF
("ERROR: UNEXPECTED VALUE %d FOR RADIO TYPE\n", 
ødio_ty≥
);

442  
LGW_HAL_ERROR
;

444 
	`lgw_sx125x_ªg_w
(
SX125x_REG_FRF_RX_MSB
, 0xFF & 
rx_‰eq_öt
, 
rf_chaö
);

445 
	`lgw_sx125x_ªg_w
(
SX125x_REG_FRF_RX_MID
, 0xFF & (
rx_‰eq_‰ac
 >> 8), 
rf_chaö
);

446 
	`lgw_sx125x_ªg_w
(
SX125x_REG_FRF_RX_LSB
, 0xFF & 
rx_‰eq_‰ac
, 
rf_chaö
);

447 
	`lgw_sx125x_ªg_w
(
SX125x_REG_FRF_TX_MSB
, 0xFF & 
tx_‰eq_öt
, 
rf_chaö
);

448 
	`lgw_sx125x_ªg_w
(
SX125x_REG_FRF_TX_MID
, 0xFF & (
tx_‰eq_‰ac
 >> 8), 
rf_chaö
);

449 
	`lgw_sx125x_ªg_w
(
SX125x_REG_FRF_TX_LSB
, 0xFF & 
tx_‰eq_‰ac
, 
rf_chaö
);

455 
	`lgw_sx125x_ªg_w
(
SX125x_REG_RX_BW__BB_BW
, 0, 
rf_chaö
);

456 
	`lgw_sx125x_ªg_w
(
SX125x_REG_RX_BW__ADC_TRIM
, 6, 
rf_chaö
);

458 
	`lgw_sx125x_ªg_w
(
SX125x_REG_RX_PLL_BW__PLL_BW
, 0, 
rf_chaö
);

459 
	`lgw_sx125x_ªg_w
(
SX125x_REG_TX_BW__PLL_BW
, 0, 
rf_chaö
);

461 
	`lgw_sx125x_ªg_w
(
SX125x_REG_TX_DAC_BW
, 5, 
rf_chaö
);

462 
	`lgw_sx125x_ªg_w
(
SX125x_REG_CLK_SELECT__DAC_CLK_SELECT
, 1, 
rf_chaö
);

463 
	`lgw_sx125x_ªg_w
(
SX125x_REG_TX_GAIN__DAC_GAIN
, 
dac_gaö
, 
rf_chaö
);

464 
	`lgw_sx125x_ªg_w
(
SX125x_REG_TX_GAIN__MIX_GAIN
, 
mix_gaö
, 
rf_chaö
);

465 
	`lgw_sx125x_ªg_w
(
SX125x_REG_CLK_SELECT__RF_LOOPBACK_EN
, 1, 
rf_chaö
);

466 
	`lgw_sx125x_ªg_w
(
SX125x_REG_MODE
, 15, 
rf_chaö
);

467 
	`waô_ms
(1);

468 
	`lgw_sx125x_ªg_r
(
SX125x_REG_MODE_STATUS__RX_PLL_LOCKED
, &
rx_∂l_locked
, 
rf_chaö
);

469 
	`lgw_sx125x_ªg_r
(
SX125x_REG_MODE_STATUS__TX_PLL_LOCKED
, &
tx_∂l_locked
, 
rf_chaö
);

470 i‡((
rx_∂l_locked
 =0Ë|| (
tx_∂l_locked
 == 0)) {

471 
	`DEBUG_MSG
("ERROR: PLL failedÅoÜock\n");

472  
LGW_HAL_ERROR
;

478 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RADIO_FE_SIG_ANA_CFG_RADIO_SEL
, (
rf_chaö
 == 0) ? 1 : 0);

480 
ªg
 = 
	`REG_SELECT
(
rf_chaö
, 
SX1302_REG_TX_TOP_A_TX_RFFE_IF_CTRL_TX_MODE
,

481 
SX1302_REG_TX_TOP_B_TX_RFFE_IF_CTRL_TX_MODE
);

482 
	`lgw_sx1302_ªg_w
(
ªg
, 0);

484 
ªg
 = 
	`REG_SELECT
(
rf_chaö
, 
SX1302_REG_TX_TOP_A_TX_TRIG_TX_TRIG_IMMEDIATE
,

485 
SX1302_REG_TX_TOP_B_TX_TRIG_TX_TRIG_IMMEDIATE
);

486 
	`lgw_sx1302_ªg_w
(
ªg
, 1);

487 
	`lgw_sx1302_ªg_w
(
ªg
, 0);

489 
ªg
 = 
	`REG_SELECT
(
rf_chaö
, 
SX1302_REG_RADIO_FE_CTRL0_RADIO_A_DC_NOTCH_EN
,

490 
SX1302_REG_RADIO_FE_CTRL0_RADIO_B_DC_NOTCH_EN
);

491 
	`lgw_sx1302_ªg_w
(
ªg
, 1);

493 #i‡
TX_CALIB_DONE_BY_HAL


495 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RADIO_FE_SIG_ANA_CFG_FORCE_HAL_CTRL
, 1);

496 
	`agc_ˇl_tx_dc_off£t
(
rf_chaö
, 
CAL_TX_TONE_FREQ_HZ
 * 64e-6, 
rf_rx_image_amp
[rf_chaö], 
rf_rx_image_phi
[rf_chaö], 
tx_thªshﬁd
, 0, &(
ªs
->
off£t_i
), &‘es->
off£t_q
), &‘es->
ªj
));

497 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RADIO_FE_SIG_ANA_CFG_FORCE_HAL_CTRL
, 0);

502 
	`sx1302_agc_maûbox_wrôe
(2, 
rf_chaö
 + 2);

503 
	`sx1302_agc_maûbox_wrôe
(1, 
CAL_TX_TONE_FREQ_HZ
 * 64e-6);

504 
	`sx1302_agc_maûbox_wrôe
(0, 0);

506 
	`sx1302_agc_maûbox_wrôe
(3, 0x00);

507 
	`sx1302_agc_maûbox_wrôe
(3, 0x01);

508 
	`sx1302_agc_waô_°©us
(0x01);

510 
	`sx1302_agc_maûbox_wrôe
(2, 
rf_rx_image_amp
[
rf_chaö
]);

511 
	`sx1302_agc_maûbox_wrôe
(1, 
rf_rx_image_phi
[
rf_chaö
]);

513 
	`sx1302_agc_maûbox_wrôe
(3, 0x02);

514 
	`sx1302_agc_waô_°©us
(0x02);

516 
	`sx1302_agc_maûbox_wrôe
(2, 0);

517 
	`sx1302_agc_maûbox_wrôe
(1, 0);

519 
	`sx1302_agc_maûbox_wrôe
(3, 0x03);

520 
	`sx1302_agc_waô_°©us
(0x03);

522 
	`sx1302_agc_maûbox_wrôe
(2, 0);

523 
	`sx1302_agc_maûbox_wrôe
(1, 
tx_thªshﬁd
);

525 
	`sx1302_agc_maûbox_wrôe
(3, 0x04);

528 
	`sx1302_agc_waô_°©us
(0x06);

529 
uöt8_t
 
thªshﬁd
, 
ˇl_dec_gaö
, 
tx_sig_0
, 
tx_sig_1
;

530 
	`sx1302_agc_maûbox_ªad
(3, &
thªshﬁd
);

531 
	`sx1302_agc_maûbox_ªad
(2, &
ˇl_dec_gaö
);

532 
	`sx1302_agc_maûbox_ªad
(1, &
tx_sig_1
);

533 
	`sx1302_agc_maûbox_ªad
(0, &
tx_sig_0
);

534 
	`DEBUG_PRINTF
("thªshﬁd:%u, cÆ_dec_gaö:%u,Åx_sig:%u\n", 
thªshﬁd
 * 256, 
ˇl_dec_gaö
, 
tx_sig_0
 * 256 + 
tx_sig_1
);

535 
	`sx1302_agc_maûbox_wrôe
(3, 0x06);

537 
	`sx1302_agc_waô_°©us
(0x07);

538 
uöt8_t
 
tx_dc_0
, 
tx_dc_1
, 
off£t_i
, 
off£t_q
;

539 
tx_sig
, 
tx_dc
;

540 
	`sx1302_agc_maûbox_ªad
(3, &
tx_dc_1
);

541 
	`sx1302_agc_maûbox_ªad
(2, &
tx_dc_0
);

542 
	`sx1302_agc_maûbox_ªad
(1, &
off£t_i
);

543 
	`sx1302_agc_maûbox_ªad
(0, &
off£t_q
);

544 
tx_sig
 = ()
tx_sig_1
 * 256 + ()
tx_sig_0
;

545 
tx_dc
 = ()
tx_dc_1
 * 256 + ()
tx_dc_0
;

546 
ªs
->
ªj
 = (
uöt16_t
)(20 * 
	`log10
(
tx_sig
/
tx_dc
));

547 
ªs
->
off£t_i
 = (
öt8_t
)offset_i;

548 
ªs
->
off£t_q
 = (
öt8_t
)offset_q;

549 
	`DEBUG_PRINTF
("tx_dc:%u, off£t_i:%d, off£t_q:%d\n", 
tx_dc_0
 * 256 + 
tx_dc_1
, (
öt8_t
)
off£t_i
, (öt8_t)
off£t_q
);

550 
	`sx1302_agc_maûbox_wrôe
(3, 0x07);

554 
uöt8_t
 
ödex
[12];

556 
	`sx1302_agc_waô_°©us
(0x08);

557 
	`sx1302_agc_maûbox_ªad
(3, &
ödex
[0]);

558 
	`sx1302_agc_maûbox_ªad
(2, &
ödex
[1]);

559 
	`sx1302_agc_maûbox_ªad
(1, &
ödex
[2]);

560 
	`sx1302_agc_maûbox_ªad
(0, &
ödex
[3]);

561 
	`sx1302_agc_maûbox_wrôe
(3, 0x08);

563 
	`sx1302_agc_waô_°©us
(0x09);

564 
	`sx1302_agc_maûbox_ªad
(3, &
ödex
[4]);

565 
	`sx1302_agc_maûbox_ªad
(2, &
ödex
[5]);

566 
	`sx1302_agc_maûbox_ªad
(1, &
ödex
[6]);

567 
	`sx1302_agc_maûbox_ªad
(0, &
ödex
[7]);

568 
	`sx1302_agc_maûbox_wrôe
(3, 0x09);

570 
	`sx1302_agc_waô_°©us
(0x0a);

571 
	`sx1302_agc_maûbox_ªad
(3, &
ödex
[8]);

572 
	`sx1302_agc_maûbox_ªad
(2, &
ödex
[9]);

573 
	`sx1302_agc_maûbox_ªad
(1, &
ödex
[10]);

574 
	`sx1302_agc_maûbox_ªad
(0, &
ödex
[11]);

575 
	`sx1302_agc_maûbox_wrôe
(3, 0x0a);

577 #i‡
DEBUG_CAL
 == 1

578 
öt16_t
 
lut_ˇlib
[9] = {64, 43, 28, 19, 13, 8, 6, 4, 2};

579 
öt16_t
 
off£t_i_tmp
 = 0;

580 
öt16_t
 
off£t_q_tmp
 = 0;

582 
	`¥ötf
("IQ sequence:");

583 
i
 = 0; i < 9; i++) {

584 i‡(
ödex
[
i
] == 0) {

585 
off£t_i_tmp
 = offset_i_tmp + 0;

586 
off£t_q_tmp
 = offset_q_tmp + 0;

588 }if(
ödex
[
i
] == 1) {

589 
off£t_i_tmp
 = off£t_i_tm∞+ 
lut_ˇlib
[
i
];

590 
off£t_q_tmp
 = off£t_q_tm∞+ 
lut_ˇlib
[
i
];

591 }if(
ödex
[
i
] == 2) {

592 
off£t_i_tmp
 = off£t_i_tm∞+ 
lut_ˇlib
[
i
];

593 
off£t_q_tmp
 = off£t_q_tm∞- 
lut_ˇlib
[
i
];

594 }if(
ödex
[
i
] == 3) {

595 
off£t_i_tmp
 = off£t_i_tm∞- 
lut_ˇlib
[
i
];

596 
off£t_q_tmp
 = off£t_q_tm∞+ 
lut_ˇlib
[
i
];

597 }if(
ödex
[
i
] == 4) {

598 
off£t_i_tmp
 = off£t_i_tm∞- 
lut_ˇlib
[
i
];

599 
off£t_q_tmp
 = off£t_q_tm∞- 
lut_ˇlib
[
i
];

601 
	`¥ötf
("i:%d q:%d\n", 
off£t_i_tmp
, 
off£t_q_tmp
);

603 
	`¥ötf
("\n");

610 
uöt8_t
 
msb
[40];

611 
uöt8_t
 
lsb
[40];

613 
i
 = 0; i < 20; i++) {

614 
	`sx1302_agc_waô_°©us
(0x0¯+ 
i
);

615 
	`sx1302_agc_maûbox_ªad
(3, &
msb
[2*
i
]);

616 
	`sx1302_agc_maûbox_ªad
(2, &
lsb
[2*
i
]);

617 
	`sx1302_agc_maûbox_ªad
(1, &
msb
[2*
i
+1]);

618 
	`sx1302_agc_maûbox_ªad
(0, &
lsb
[2*
i
+1]);

619 
	`sx1302_agc_maûbox_wrôe
(3, 0x0¯+ 
i
);

621 
	`sx1302_agc_waô_°©us
(0x0c + 20);

623 #i‡
DEBUG_CAL
 == 1

624 
	`¥ötf
("TX_SIG valuesÑeturned by signalánalyzer:\n");

625 
i
 = 0; i < 40; i++) {

626 i‡(
i
%5 == 0) {

627 
	`¥ötf
("\n");

629 
	`¥ötf
("%u ", 
msb
[
i
] * 256 + 
lsb
[i]);

631 
	`¥ötf
("\n");

634 
	`sx1302_agc_maûbox_wrôe
(3, 0x0c + 20);

637 
	`¥ötf
("%s: RESULT: off£t_i:%d off£t_q:%dÑej:%u\n", 
__FUNCTION__
, 
ªs
->
off£t_i
,Ñes->
off£t_q
,Ñes->
ªj
);

640 
	`DEBUG_MSG
("waiting for TX calibrationÅo complete...\n");

641 
	`sx1302_agc_waô_°©us
((
rf_chaö
 == 0) ? 0x33 : 0x44);

645 
	`DEBUG_MSG
("TX Calibration Done\n");

647  
LGW_HAL_SUCCESS
;

648 
	}
}

652 
	$ˇl_rx_ªsu…_öô
(
lgw_sx125x_ˇl_rx_ªsu…_s
 *
ªs_rx_mö
, lgw_sx125x_ˇl_rx_ªsu…_†*
ªs_rx_max
) {

653 
ªs_rx_mö
->
amp
 = 31;

654 
ªs_rx_mö
->
phi
 = 31;

655 
ªs_rx_mö
->
ªj
 = 255;

656 
ªs_rx_mö
->
ªj_öô
 = 255;

657 
ªs_rx_mö
->
¢r
 = 255;

659 
ªs_rx_max
->
amp
 = -32;

660 
ªs_rx_max
->
phi
 = -32;

661 
ªs_rx_max
->
ªj
 = 0;

662 
ªs_rx_max
->
ªj_öô
 = 0;

663 
ªs_rx_max
->
¢r
 = 0;

664 
	}
}

668 
	$ˇl_rx_ªsu…_s‹t
(
lgw_sx125x_ˇl_rx_ªsu…_s
 *
ªs_rx
, lgw_sx125x_ˇl_rx_ªsu…_†*
ªs_rx_mö
, lgw_sx125x_ˇl_rx_ªsu…_†*
ªs_rx_max
) {

669 i‡(
ªs_rx
->
amp
 < 
ªs_rx_mö
->amp)

670 
ªs_rx_mö
->
amp
 = 
ªs_rx
->amp;

671 i‡(
ªs_rx
->
phi
 < 
ªs_rx_mö
->phi)

672 
ªs_rx_mö
->
phi
 = 
ªs_rx
->phi;

673 i‡(
ªs_rx
->
ªj
 < 
ªs_rx_mö
->rej)

674 
ªs_rx_mö
->
ªj
 = 
ªs_rx
->rej;

675 i‡(
ªs_rx
->
ªj_öô
 < 
ªs_rx_mö
->rej_init)

676 
ªs_rx_mö
->
ªj_öô
 = 
ªs_rx
->rej_init;

677 i‡(
ªs_rx
->
¢r
 < 
ªs_rx_mö
->snr)

678 
ªs_rx_mö
->
¢r
 = 
ªs_rx
->snr;

680 i‡(
ªs_rx
->
amp
 > 
ªs_rx_max
->amp)

681 
ªs_rx_max
->
amp
 = 
ªs_rx
->amp;

682 i‡(
ªs_rx
->
phi
 > 
ªs_rx_max
->phi)

683 
ªs_rx_max
->
phi
 = 
ªs_rx
->phi;

684 i‡(
ªs_rx
->
ªj
 > 
ªs_rx_max
->rej)

685 
ªs_rx_max
->
ªj
 = 
ªs_rx
->rej;

686 i‡(
ªs_rx
->
ªj_öô
 > 
ªs_rx_max
->rej_init)

687 
ªs_rx_max
->
ªj_öô
 = 
ªs_rx
->rej_init;

688 i‡(
ªs_rx
->
¢r
 > 
ªs_rx_max
->snr)

689 
ªs_rx_max
->
¢r
 = 
ªs_rx
->snr;

690 
	}
}

694 
boﬁ
 
	$ˇl_rx_ªsu…_as£π
(
lgw_sx125x_ˇl_rx_ªsu…_s
 *
ªs_rx_mö
, lgw_sx125x_ˇl_rx_ªsu…_†*
ªs_rx_max
) {

695 i‡–((
ªs_rx_max
->
amp
 - 
ªs_rx_mö
->amp) > 4)

696 || ((
ªs_rx_max
->
phi
 - 
ªs_rx_mö
->phi) > 4)

697 || (
ªs_rx_mö
->
ªj
 < 50)

698 || (
ªs_rx_mö
->
¢r
 < 50) )

699  
Ál£
;

701  
åue
;

702 
	}
}

706 
	$ˇl_tx_ªsu…_öô
(
lgw_sx125x_ˇl_tx_ªsu…_s
 *
ªs_tx_mö
, lgw_sx125x_ˇl_tx_ªsu…_†*
ªs_tx_max
) {

707 
ªs_tx_mö
->
off£t_i
 = 127;

708 
ªs_tx_mö
->
off£t_q
 = 127;

709 
ªs_tx_mö
->
ªj
 = 255;

710 
ªs_tx_mö
->
sig
 = 255;

712 
ªs_tx_max
->
off£t_i
 = -128;

713 
ªs_tx_max
->
off£t_q
 = -128;

714 
ªs_tx_max
->
ªj
 = 0;

715 
ªs_tx_max
->
sig
 = 0;

716 
	}
}

720 
	$ˇl_tx_ªsu…_s‹t
(
lgw_sx125x_ˇl_tx_ªsu…_s
 *
ªs_tx
, lgw_sx125x_ˇl_tx_ªsu…_†*
ªs_tx_mö
, lgw_sx125x_ˇl_tx_ªsu…_†*
ªs_tx_max
) {

721 i‡(
ªs_tx
->
off£t_i
 < 
ªs_tx_mö
->offset_i)

722 
ªs_tx_mö
->
off£t_i
 = 
ªs_tx
->offset_i;

723 i‡(
ªs_tx
->
off£t_q
 < 
ªs_tx_mö
->offset_q)

724 
ªs_tx_mö
->
off£t_q
 = 
ªs_tx
->offset_q;

725 i‡(
ªs_tx
->
ªj
 < 
ªs_tx_mö
->rej)

726 
ªs_tx_mö
->
ªj
 = 
ªs_tx
->rej;

727 i‡(
ªs_tx
->
sig
 < 
ªs_tx_mö
->sig)

728 
ªs_tx_mö
->
sig
 = 
ªs_tx
->sig;

730 i‡(
ªs_tx
->
off£t_i
 > 
ªs_tx_max
->offset_i)

731 
ªs_tx_max
->
off£t_i
 = 
ªs_tx
->offset_i;

732 i‡(
ªs_tx
->
off£t_q
 > 
ªs_tx_max
->offset_q)

733 
ªs_tx_max
->
off£t_q
 = 
ªs_tx
->offset_q;

734 i‡(
ªs_tx
->
ªj
 > 
ªs_tx_max
->rej)

735 
ªs_tx_max
->
ªj
 = 
ªs_tx
->rej;

736 i‡(
ªs_tx
->
sig
 > 
ªs_tx_max
->sig)

737 
ªs_tx_max
->
sig
 = 
ªs_tx
->sig;

738 
	}
}

740 
boﬁ
 
	$ˇl_tx_ªsu…_as£π
(
lgw_sx125x_ˇl_tx_ªsu…_s
 *
ªs_tx_mö
, lgw_sx125x_ˇl_tx_ªsu…_†*
ªs_tx_max
) {

741 i‡–((
ªs_tx_max
->
off£t_i
 - 
ªs_tx_mö
->offset_i) > 4)

742 || ((
ªs_tx_max
->
off£t_q
 - 
ªs_tx_mö
->offset_q) > 4)

743 || (
ªs_tx_mö
->
ªj
 < 10) )

744  
Ál£
;

746  
åue
;

747 
	}
}

751 #i‡
TX_CALIB_DONE_BY_HAL


753 
öt8_t
 
	$˛ù_8b
(
öt8_t
 
vÆ1
, i¡8_à
vÆ2
) {

754 
öt16_t
 
a
, 
b
;

756 
a
 = (
öt16_t
)
vÆ1
;

757 
b
 = (
öt16_t
)
vÆ2
;

759 i‡–(
a
 + 
b
) > 127 ) {

761 } i‡–(
a
+
b
) < -128 ) {

764  (
öt8_t
)(
a
+
b
);

766 
	}
}

769 
	$agc_ˇl_tx_dc_off£t
(
uöt8_t
 
rf_chaö
, sig√d 
‰eq
, 
amp_hÆ
, 
phi_hÆ
, 
Àvñ_ªqúed
, 
¥ecisi⁄
, 
öt8_t
 * 
off£t_i_ªs
, i¡8_à* 
off£t_q_ªs
, 
uöt16_t
 * 
ªj
) {

770 sig√d 
off£t_i_£t
[9];

771 sig√d 
off£t_q_£t
[9];

772 sig√d 
off£t_i
;

773 sig√d 
off£t_q
;

774 c⁄° sig√d 
•™
[] = {64, 43, 28, 19, 13, 8, 6, 4, 2};

775 
dec_gaö
;

776 
i
, 
j
;

777 
idx
;

778 
uöt16_t
 
ªg
;

779 
öt32_t
 
abs_c‹r_max_i16
;

780 
öt32_t
 
abs_c‹r_mö_i16
;

781 
öt32_t
 
abs_c‹r_i16
;

782 
öt32_t
 
tx_sig_i16
;

783 
öt32_t
 
tx_dc_i16
;

784 
DEC_GAIN_MAX
 = 11;

785 
DEC_GAIN_MIN
 = 7;

786 
öt32_t
 
vÆ
;

787 
öt32_t
 
abs_lsb
, 
abs_msb
;

789 
ªg
 = 
	`REG_SELECT
(
rf_chaö
, 
SX1302_REG_RADIO_FE_IQ_COMP_AMP_COEFF_RADIO_A_AMP_COEFF
,

790 
SX1302_REG_RADIO_FE_IQ_COMP_AMP_COEFF_RADIO_B_AMP_COEFF
);

791 
	`lgw_sx1302_ªg_w
(
ªg
, 
amp_hÆ
);

793 
ªg
 = 
	`REG_SELECT
(
rf_chaö
, 
SX1302_REG_RADIO_FE_IQ_COMP_PHI_COEFF_RADIO_A_PHI_COEFF
,

794 
SX1302_REG_RADIO_FE_IQ_COMP_PHI_COEFF_RADIO_B_PHI_COEFF
);

795 
	`lgw_sx1302_ªg_w
(
ªg
, 
phi_hÆ
);

797 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RADIO_FE_SIG_ANA_FREQ_FREQ
, 
‰eq
);

799 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RADIO_FE_SIG_ANA_CFG_DURATION
, 
¥ecisi⁄
);

800 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RADIO_FE_SIG_ANA_CFG_EN
, 1);

803 
off£t_i_£t
[0] = 0;

804 
off£t_q_£t
[0] = 0;

805 
off£t_i_£t
[1] = -
•™
[0];

806 
off£t_q_£t
[1] = -
•™
[0];

807 
off£t_i_£t
[2] = -
•™
[0];

808 
off£t_q_£t
[2] = 
•™
[0];

809 
off£t_i_£t
[3] = 
•™
[0];

810 
off£t_q_£t
[3] = -
•™
[0];

811 
off£t_i_£t
[4] = 
•™
[0];

812 
off£t_q_£t
[4] = 
•™
[0];

813 
i
 = 
DEC_GAIN_MAX
; i >
DEC_GAIN_MIN
; i--) {

814 
dec_gaö
 = 
i
;

816 
ªg
 = 
	`REG_SELECT
(
rf_chaö
, 
SX1302_REG_RADIO_FE_CTRL0_RADIO_A_HOST_FILTER_GAIN
,

817 
SX1302_REG_RADIO_FE_CTRL0_RADIO_B_HOST_FILTER_GAIN
);

818 
	`lgw_sx1302_ªg_w
(
ªg
, 
dec_gaö
);

821 
ªg
 = 
	`REG_SELECT
(
rf_chaö
, 
SX1302_REG_TX_TOP_A_TX_RFFE_IF_I_OFFSET_I_OFFSET
,

822 
SX1302_REG_TX_TOP_B_TX_RFFE_IF_I_OFFSET_I_OFFSET
);

823 
	`lgw_sx1302_ªg_w
(
ªg
, (
öt8_t
)
off£t_i_£t
[0]);

825 
ªg
 = 
	`REG_SELECT
(
rf_chaö
, 
SX1302_REG_TX_TOP_A_TX_RFFE_IF_Q_OFFSET_Q_OFFSET
,

826 
SX1302_REG_TX_TOP_B_TX_RFFE_IF_Q_OFFSET_Q_OFFSET
);

827 
	`lgw_sx1302_ªg_w
(
ªg
, (
öt8_t
)
off£t_q_£t
[0]);

830 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RADIO_FE_SIG_ANA_CFG_START
, 0);

831 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RADIO_FE_SIG_ANA_CFG_START
, 1);

834 
	`lgw_sx1302_ªg_r
(
SX1302_REG_RADIO_FE_SIG_ANA_CFG_VALID
, &
vÆ
);

835 
	`waô_ms
(1);

836 } 
vÆ
 == 0);

838 
	`lgw_sx1302_ªg_r
(
SX1302_REG_RADIO_FE_SIG_ANA_ABS_LSB_CORR_ABS_OUT
, &
abs_lsb
);

839 
	`lgw_sx1302_ªg_r
(
SX1302_REG_RADIO_FE_SIG_ANA_ABS_MSB_CORR_ABS_OUT
, &
abs_msb
);

842 
abs_c‹r_max_i16
 = 
abs_msb
 * 256 + 
abs_lsb
;

844 
idx
 = 0;

845 
j
 = 1; j < 5; j++) {

846 
ªg
 = 
	`REG_SELECT
(
rf_chaö
, 
SX1302_REG_TX_TOP_A_TX_RFFE_IF_I_OFFSET_I_OFFSET
,

847 
SX1302_REG_TX_TOP_B_TX_RFFE_IF_I_OFFSET_I_OFFSET
);

848 
	`lgw_sx1302_ªg_w
(
ªg
, (
öt8_t
)
off£t_i_£t
[
j
]);

850 
ªg
 = 
	`REG_SELECT
(
rf_chaö
, 
SX1302_REG_TX_TOP_A_TX_RFFE_IF_Q_OFFSET_Q_OFFSET
,

851 
SX1302_REG_TX_TOP_B_TX_RFFE_IF_Q_OFFSET_Q_OFFSET
);

852 
	`lgw_sx1302_ªg_w
(
ªg
, (
öt8_t
)
off£t_q_£t
[
j
]);

854 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RADIO_FE_SIG_ANA_CFG_START
, 0);

855 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RADIO_FE_SIG_ANA_CFG_START
, 1);

858 
	`lgw_sx1302_ªg_r
(
SX1302_REG_RADIO_FE_SIG_ANA_CFG_VALID
, &
vÆ
);

859 
	`waô_ms
(1);

860 } 
vÆ
 == 0);

862 
	`lgw_sx1302_ªg_r
(
SX1302_REG_RADIO_FE_SIG_ANA_ABS_LSB_CORR_ABS_OUT
, &
abs_lsb
);

863 
	`lgw_sx1302_ªg_r
(
SX1302_REG_RADIO_FE_SIG_ANA_ABS_MSB_CORR_ABS_OUT
, &
abs_msb
);

865 
abs_c‹r_i16
 = 
abs_msb
 * 256 + 
abs_lsb
;

867 i‡(
abs_c‹r_i16
 > 
abs_c‹r_max_i16
) {

868 
abs_c‹r_max_i16
 = 
abs_c‹r_i16
;

869 
idx
 = 
j
;

873 i‡(
abs_c‹r_max_i16
 > (
Àvñ_ªqúed
 * 256)) {

878 
	`¥ötf
("dec_gaö:%d\n", 
dec_gaö
);

881 
tx_sig_i16
 = 
abs_c‹r_max_i16
;

882 
	`¥ötf
("tx_sig:%d\n", 
tx_sig_i16
);

885 
off£t_i
 = 0;

886 
off£t_q
 = 0;

887 
i
 = 0; i< (
•™
); i++) {

889 
off£t_i_£t
[0] = 
off£t_i
;

890 
off£t_q_£t
[0] = 
off£t_q
;

891 
off£t_i_£t
[1] = 
	`˛ù_8b
(
off£t_i
, 
•™
[
i
]);

892 
off£t_q_£t
[1] = 
	`˛ù_8b
(
off£t_q
, 
•™
[
i
]);

893 
off£t_i_£t
[2] = 
	`˛ù_8b
(
off£t_i
, 
•™
[
i
]);

894 
off£t_q_£t
[2] = 
	`˛ù_8b
(
off£t_q
, -
•™
[
i
]);

895 
off£t_i_£t
[3] = 
	`˛ù_8b
(
off£t_i
, -
•™
[
i
]);

896 
off£t_q_£t
[3] = 
	`˛ù_8b
(
off£t_q
, 
•™
[
i
]);

897 
off£t_i_£t
[4] = 
	`˛ù_8b
(
off£t_i
, -
•™
[
i
]);

898 
off£t_q_£t
[4] = 
	`˛ù_8b
(
off£t_q
, -
•™
[
i
]);

901 
ªg
 = 
	`REG_SELECT
(
rf_chaö
, 
SX1302_REG_TX_TOP_A_TX_RFFE_IF_I_OFFSET_I_OFFSET
,

902 
SX1302_REG_TX_TOP_B_TX_RFFE_IF_I_OFFSET_I_OFFSET
);

903 
	`lgw_sx1302_ªg_w
(
ªg
, (
öt8_t
)
off£t_i_£t
[0]);

905 
ªg
 = 
	`REG_SELECT
(
rf_chaö
, 
SX1302_REG_TX_TOP_A_TX_RFFE_IF_Q_OFFSET_Q_OFFSET
,

906 
SX1302_REG_TX_TOP_B_TX_RFFE_IF_Q_OFFSET_Q_OFFSET
);

907 
	`lgw_sx1302_ªg_w
(
ªg
, (
öt8_t
)
off£t_q_£t
[0]);

909 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RADIO_FE_SIG_ANA_CFG_START
, 0);

910 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RADIO_FE_SIG_ANA_CFG_START
, 1);

913 
	`lgw_sx1302_ªg_r
(
SX1302_REG_RADIO_FE_SIG_ANA_CFG_VALID
, &
vÆ
);

914 
	`waô_ms
(1);

915 } 
vÆ
 == 0);

917 
	`lgw_sx1302_ªg_r
(
SX1302_REG_RADIO_FE_SIG_ANA_ABS_LSB_CORR_ABS_OUT
, &
abs_lsb
);

918 
	`lgw_sx1302_ªg_r
(
SX1302_REG_RADIO_FE_SIG_ANA_ABS_MSB_CORR_ABS_OUT
, &
abs_msb
);

920 
abs_c‹r_mö_i16
 = 
abs_msb
 * 256 + 
abs_lsb
;

921 
	`¥ötf
("abs_c‹r_mö_i16:%d ", 
abs_c‹r_mö_i16
);

923 
idx
 = 0;

926 
j
 = 1; j < 5; j++) {

927 
ªg
 = 
	`REG_SELECT
(
rf_chaö
, 
SX1302_REG_TX_TOP_A_TX_RFFE_IF_I_OFFSET_I_OFFSET
,

928 
SX1302_REG_TX_TOP_B_TX_RFFE_IF_I_OFFSET_I_OFFSET
);

929 
	`lgw_sx1302_ªg_w
(
ªg
, (
öt8_t
)
off£t_i_£t
[
j
]);

931 
ªg
 = 
	`REG_SELECT
(
rf_chaö
, 
SX1302_REG_TX_TOP_A_TX_RFFE_IF_Q_OFFSET_Q_OFFSET
,

932 
SX1302_REG_TX_TOP_B_TX_RFFE_IF_Q_OFFSET_Q_OFFSET
);

933 
	`lgw_sx1302_ªg_w
(
ªg
, (
öt8_t
)
off£t_q_£t
[
j
]);

935 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RADIO_FE_SIG_ANA_CFG_START
, 0);

936 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RADIO_FE_SIG_ANA_CFG_START
, 1);

939 
	`lgw_sx1302_ªg_r
(
SX1302_REG_RADIO_FE_SIG_ANA_CFG_VALID
, &
vÆ
);

940 
	`waô_ms
(1);

941 } 
vÆ
 == 0);

943 
	`lgw_sx1302_ªg_r
(
SX1302_REG_RADIO_FE_SIG_ANA_ABS_LSB_CORR_ABS_OUT
, &
abs_lsb
);

944 
	`lgw_sx1302_ªg_r
(
SX1302_REG_RADIO_FE_SIG_ANA_ABS_MSB_CORR_ABS_OUT
, &
abs_msb
);

946 
abs_c‹r_i16
 = 
abs_msb
 * 256 + 
abs_lsb
;

947 
	`¥ötf
("abs_c‹r_i16:%d ", 
abs_c‹r_i16
);

949 i‡(
abs_c‹r_i16
 < 
abs_c‹r_mö_i16
) {

950 
abs_c‹r_mö_i16
 = 
abs_c‹r_i16
;

951 
idx
 = 
j
;

955 
	`¥ötf
("\n");

956 
off£t_i
 = 
off£t_i_£t
[
idx
];

957 
off£t_q
 = 
off£t_q_£t
[
idx
];

960 
off£t_i_£t
[0] = 
	`˛ù_8b
(
off£t_i
, -1);

961 
off£t_q_£t
[0] = 
	`˛ù_8b
(
off£t_q
, -1);

962 
off£t_i_£t
[1] = 
	`˛ù_8b
(
off£t_i
, -1);

963 
off£t_q_£t
[1] = 
off£t_q
;

964 
off£t_i_£t
[2] = 
	`˛ù_8b
(
off£t_i
, -1);

965 
off£t_q_£t
[2] = 
	`˛ù_8b
(
off£t_q
, 1);

966 
off£t_i_£t
[3] = 
off£t_i
;

967 
off£t_q_£t
[3] = 
	`˛ù_8b
(
off£t_q
, -1);

968 
off£t_i_£t
[4] = 
off£t_i
;

969 
off£t_q_£t
[4] = 
off£t_q
;

970 
off£t_i_£t
[5] = 
off£t_i
;

971 
off£t_q_£t
[5] = 
	`˛ù_8b
(
off£t_q
, 1);

972 
off£t_i_£t
[6] = 
	`˛ù_8b
(
off£t_i
, 1);

973 
off£t_q_£t
[6] = 
	`˛ù_8b
(
off£t_q
, -1);

974 
off£t_i_£t
[7] = 
	`˛ù_8b
(
off£t_i
, 1);

975 
off£t_q_£t
[7] = 
off£t_q
;

976 
off£t_i_£t
[8] = 
	`˛ù_8b
(
off£t_i
, 1);

977 
off£t_q_£t
[8] = 
	`˛ù_8b
(
off£t_q
, 1);

980 
idx
 = 0;

981 
ªg
 = 
	`REG_SELECT
(
rf_chaö
, 
SX1302_REG_TX_TOP_A_TX_RFFE_IF_I_OFFSET_I_OFFSET
,

982 
SX1302_REG_TX_TOP_B_TX_RFFE_IF_I_OFFSET_I_OFFSET
);

983 
	`lgw_sx1302_ªg_w
(
ªg
, (
öt8_t
)
off£t_i_£t
[0]);

985 
ªg
 = 
	`REG_SELECT
(
rf_chaö
, 
SX1302_REG_TX_TOP_A_TX_RFFE_IF_Q_OFFSET_Q_OFFSET
,

986 
SX1302_REG_TX_TOP_B_TX_RFFE_IF_Q_OFFSET_Q_OFFSET
);

987 
	`lgw_sx1302_ªg_w
(
ªg
, (
öt8_t
)
off£t_q_£t
[0]);

989 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RADIO_FE_SIG_ANA_CFG_START
, 0);

990 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RADIO_FE_SIG_ANA_CFG_START
, 1);

993 
	`lgw_sx1302_ªg_r
(
SX1302_REG_RADIO_FE_SIG_ANA_CFG_VALID
, &
vÆ
);

994 
	`waô_ms
(1);

995 } 
vÆ
 == 0);

997 
	`lgw_sx1302_ªg_r
(
SX1302_REG_RADIO_FE_SIG_ANA_ABS_LSB_CORR_ABS_OUT
, &
abs_lsb
);

998 
	`lgw_sx1302_ªg_r
(
SX1302_REG_RADIO_FE_SIG_ANA_ABS_MSB_CORR_ABS_OUT
, &
abs_msb
);

1000 
abs_c‹r_mö_i16
 = 
abs_msb
 * 256 + 
abs_lsb
;

1003 
j
 = 1; j < 9; j++) {

1004 
ªg
 = 
	`REG_SELECT
(
rf_chaö
, 
SX1302_REG_TX_TOP_A_TX_RFFE_IF_I_OFFSET_I_OFFSET
, 
SX1302_REG_TX_TOP_B_TX_RFFE_IF_I_OFFSET_I_OFFSET
);

1005 
	`lgw_sx1302_ªg_w
(
ªg
, (
öt8_t
)
off£t_i_£t
[
j
]);

1007 
ªg
 = 
	`REG_SELECT
(
rf_chaö
, 
SX1302_REG_TX_TOP_A_TX_RFFE_IF_Q_OFFSET_Q_OFFSET
, 
SX1302_REG_TX_TOP_B_TX_RFFE_IF_Q_OFFSET_Q_OFFSET
);

1008 
	`lgw_sx1302_ªg_w
(
ªg
, (
öt8_t
)
off£t_q_£t
[
j
]);

1010 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RADIO_FE_SIG_ANA_CFG_START
, 0);

1011 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RADIO_FE_SIG_ANA_CFG_START
, 1);

1014 
	`lgw_sx1302_ªg_r
(
SX1302_REG_RADIO_FE_SIG_ANA_CFG_VALID
, &
vÆ
);

1015 
	`waô_ms
(1);

1016 } 
vÆ
 == 0);

1018 
	`lgw_sx1302_ªg_r
(
SX1302_REG_RADIO_FE_SIG_ANA_ABS_LSB_CORR_ABS_OUT
, &
abs_lsb
);

1019 
	`lgw_sx1302_ªg_r
(
SX1302_REG_RADIO_FE_SIG_ANA_ABS_MSB_CORR_ABS_OUT
, &
abs_msb
);

1021 
abs_c‹r_i16
 = 
abs_msb
 * 256 + 
abs_lsb
;

1022 i‡(
abs_c‹r_i16
 < 
abs_c‹r_mö_i16
) {

1023 
abs_c‹r_mö_i16
 = 
abs_c‹r_i16
;

1024 
idx
 = 
j
;

1027 
off£t_i
 = 
off£t_i_£t
[
idx
];

1028 
off£t_q
 = 
off£t_q_£t
[
idx
];

1030 
tx_dc_i16
 = 
abs_c‹r_mö_i16
;

1031 
	`¥ötf
("tx_dc:%d\n", 
tx_dc_i16
);

1034 *
ªj
 = 20 * 
	`log10
(
tx_sig_i16
/(
tx_dc_i16
 + 1));

1035 *
off£t_i_ªs
 = (
öt8_t
)
off£t_i
;

1036 *
off£t_q_ªs
 = (
öt8_t
)
off£t_q
;

1037 
	`¥ötf
("off£t_i:%d off£t_q:%dÑej:%u\n", 
off£t_i
, 
off£t_q
, *
ªj
);

1038 
	}
}

	@hal/sx1302hal/loragw_cal.h

16 #i‚de‡
_LORAGW_CAL_H


17 
	#_LORAGW_CAL_H


	)

22 
	~<°döt.h
>

24 
	~"c⁄fig.h
"

35 
	slgw_sx125x_ˇl_rx_ªsu…_s
 {

36 
öt8_t
 
	mamp
;

37 
öt8_t
 
	mphi
;

38 
uöt16_t
 
	mªj
;

39 
uöt16_t
 
	mªj_öô
;

40 
uöt16_t
 
	m¢r
;

43 
	slgw_sx125x_ˇl_tx_ªsu…_s
 {

44 
uöt8_t
 
	mdac_gaö
;

45 
uöt8_t
 
	mmix_gaö
;

46 
öt8_t
 
	moff£t_i
;

47 
öt8_t
 
	moff£t_q
;

48 
uöt16_t
 
	mªj
;

49 
uöt16_t
 
	msig
;

55 
sx1302_ˇl_°¨t
(
uöt8_t
 
vîsi⁄
, 
lgw_c⁄f_rxrf_s
 * 
rf_chaö_cfg
, 
lgw_tx_gaö_lut_s
 * 
txgaö_lut
);

	@hal/sx1302hal/loragw_hal_sx1302.c

20 #i‡
__STDC_VERSION__
 >= 199901L

21 
	#_XOPEN_SOURCE
 600

	)

23 
	#_XOPEN_SOURCE
 500

	)

26 
	~<°döt.h
>

27 
	~<°dboﬁ.h
>

28 
	~<°dio.h
>

29 
	~<°rög.h
>

30 
	~<m©h.h
>

31 
	~<time.h
>

32 
	~<uni°d.h
>

33 
	~<f˙é.h
>

34 
	~<öây≥s.h
>

36 
	~"l‹agw_hÆ.h
"

37 
	~"l‹agw_hÆ_sx1302.h
"

38 
	~"l‹agw_ªg_sx1302.h
"

39 
	~"l‹agw_aux.h
"

40 
	~"l‹agw_•i.h
"

41 
	~"l‹agw_i2c.h
"

42 
	~"l‹agw_sx1250.h
"

43 
	~"l‹agw_sx125x.h
"

44 
	~"l‹agw_sx1302.h
"

45 
	~"l‹agw_°ts751.h
"

46 
	~"l‹agw_debug.h
"

51 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

52 #i‡
DEBUG_HAL
 == 1

53 
	#DEBUG_MSG
(
°r
Ë
	`Ârötf
(
°dîr
, så)

	)

54 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...Ë
	`Ârötf
(
°dîr
,"%s:%d: "fmt, 
__FUNCTION__
, 
__LINE__
,árgs)

	)

55 
	#DEBUG_ARRAY
(
a
,
b
,
c
Ëa=0;a<b;++aË
	`Ârötf
(
°dîr
,"%x.",c[a]);Ârötf(°dîr,"íd\n")

	)

56 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){
	`Ârötf
(
°dîr
,"%s:%d: ERROR: NULL POINTER AS ARGUMENT\n", 
__FUNCTION__
, 
__LINE__
); 
LGW_HAL_ERROR
;}

	)

58 
	#DEBUG_MSG
(
°r
)

	)

59 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...)

	)

60 
	#DEBUG_ARRAY
(
a
,
b
,
c
Ëa=0;a!=0;){}

	)

61 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){ 
LGW_HAL_ERROR
;}

	)

64 
	#TRACE
(Ë
	`Ârötf
(
°dîr
, "@ %†%d\n", 
__FUNCTION__
, 
__LINE__
);

	)

66 
	#CONTEXT_STARTED
 
lgw_c⁄ãxt
.
is_°¨ãd


	)

67 
	#CONTEXT_SPI
 
lgw_c⁄ãxt
.
bﬂrd_cfg
.
•idev_∑th


	)

68 
	#CONTEXT_LWAN_PUBLIC
 
lgw_c⁄ãxt
.
bﬂrd_cfg
.
l‹aw™_public


	)

69 
	#CONTEXT_BOARD
 
lgw_c⁄ãxt
.
bﬂrd_cfg


	)

70 
	#CONTEXT_RF_CHAIN
 
lgw_c⁄ãxt
.
rf_chaö_cfg


	)

71 
	#CONTEXT_IF_CHAIN
 
lgw_c⁄ãxt
.
if_chaö_cfg


	)

72 
	#CONTEXT_LORA_SERVICE
 
lgw_c⁄ãxt
.
l‹a_£rvi˚_cfg


	)

73 
	#CONTEXT_FSK
 
lgw_c⁄ãxt
.
fsk_cfg


	)

74 
	#CONTEXT_TX_GAIN_LUT
 
lgw_c⁄ãxt
.
tx_gaö_lut


	)

75 
	#CONTEXT_TIMESTAMP
 
lgw_c⁄ãxt
.
time°amp_cfg


	)

76 
	#CONTEXT_DEBUG
 
lgw_c⁄ãxt
.
debug_cfg


	)

81 
	#FW_VERSION_AGC
 1

	)

82 
	#FW_VERSION_ARB
 1

	)

87 
	#HAL_DEBUG_FILE_LOG
 0

	)

92 
	~"¨b_fw.v¨
"

93 
	~"agc_fw_sx1250.v¨
"

94 
	~"agc_fw_sx1257.v¨
"

103 
lgw_c⁄ãxt_t
 
	glgw_c⁄ãxt
 = {

104 .
is_°¨ãd
 = 
Ál£
,

105 .
	gbﬂrd_cfg
.
	g•idev_∑th
 = "/dev/spidev1.0",

106 .
	gbﬂrd_cfg
.
	gl‹aw™_public
 = 
åue
,

107 .
	gbﬂrd_cfg
.
	g˛k§c
 = 0,

108 .
	gbﬂrd_cfg
.
	gfuŒ_du∂ex
 = 
Ál£
,

109 .
	grf_chaö_cfg
 = {{0}},

110 .
	gif_chaö_cfg
 = {{0}},

111 .
	gl‹a_£rvi˚_cfg
 = {

112 .
íabÀ
 = 0,

113 .
	grf_chaö
 = 0,

114 .
	g‰eq_hz
 = 0,

115 .
	gb™dwidth
 = 
BW_250KHZ
,

116 .
	gd©¨©e
 = 
DR_LORA_SF7
,

117 .
	gim∂icô_hdr
 = 
Ál£
,

118 .
	gim∂icô_∑ylﬂd_Àngth
 = 0,

119 .
	gim∂icô_¸c_í
 = 0,

120 .
	gim∂icô_codî©e
 = 0

122 .
	gfsk_cfg
 = {

123 .
íabÀ
 = 0,

124 .
	grf_chaö
 = 0,

125 .
	g‰eq_hz
 = 0,

126 .
	gb™dwidth
 = 
BW_125KHZ
,

127 .
	gd©¨©e
 = 50000,

128 .
	gsync_w‹d_size
 = 3,

129 .
	gsync_w‹d
 = 0xC194C1

131 .
	gtx_gaö_lut
 = {

133 .
size
 = 1,

134 .
	glut
[0] = {

135 .
rf_powî
 = 14,

136 .
	gdig_gaö
 = 0,

137 .
	g∑_gaö
 = 2,

138 .
	gdac_gaö
 = 3,

139 .
	gmix_gaö
 = 10,

140 .
	goff£t_i
 = 0,

141 .
	goff£t_q
 = 0,

142 .
	gpwr_idx
 = 0

145 .
	gsize
 = 1,

146 .
	glut
[0] = {

147 .
rf_powî
 = 14,

148 .
	gdig_gaö
 = 0,

149 .
	g∑_gaö
 = 2,

150 .
	gdac_gaö
 = 3,

151 .
	gmix_gaö
 = 10,

152 .
	goff£t_i
 = 0,

153 .
	goff£t_q
 = 0,

154 .
	gpwr_idx
 = 0

158 .
	gtime°amp_cfg
 = {

159 .
íabÀ_¥ecisi⁄_ts
 = 
Ál£
,

160 .
	gmax_ts_mërics
 = 0xFF,

161 .
	gnb_symbﬁs
 = 1

163 .
	gdebug_cfg
 = {

164 .
nb_ªf_∑ylﬂd
 = 0,

165 .
	glog_fûe_«me
 = "loragw_hal.log"

170 
FILE
 * 
	glog_fûe
 = 
NULL
;

173 
	gts_fd
 = -1;

174 
uöt8_t
 
	gts_addr
 = 0xFF;

178 
	$dbg_öô_gpio
() {

180 
	`lgw_sx1302_ªg_w
(
SX1302_REG_GPIO_GPIO_SEL_6_SELECTION
, 0);

182 
	`lgw_sx1302_ªg_w
(
SX1302_REG_GPIO_GPIO_DIR_L_DIRECTION
, 0xFF);

183 
	}
}

187 
	$dbg_toggÀ_gpio
() {

189 
	`lgw_sx1302_ªg_w
(
SX1302_REG_GPIO_GPIO_OUT_L_OUT_VALUE
, 64);

191 
	`lgw_sx1302_ªg_w
(
SX1302_REG_GPIO_GPIO_OUT_L_OUT_VALUE
, 0);

192 
	}
}

197 
	$lgw_bﬂrd_sx1302_£tc⁄f
(
lgw_c⁄f_bﬂrd_s
 * 
c⁄f
) {

198 
	`CHECK_NULL
(
c⁄f
);

201 i‡(
CONTEXT_STARTED
 =
åue
) {

202 
	`DEBUG_MSG
("ERROR: CONCENTRATOR IS RUNNING, STOP IT BEFORE TOUCHING CONFIGURATION\n");

203  
LGW_HAL_ERROR
;

207 
CONTEXT_LWAN_PUBLIC
 = 
c⁄f
->
l‹aw™_public
;

208 
CONTEXT_BOARD
.
˛k§c
 = 
c⁄f
->clksrc;

209 
CONTEXT_BOARD
.
fuŒ_du∂ex
 = 
c⁄f
->full_duplex;

210 
	`°∫˝y
(
CONTEXT_SPI
, 
c⁄f
->
•idev_∑th
,  CONTEXT_SPI);

211 
CONTEXT_SPI
[ CONTEXT_SPI - 1] = '\0';

213 
	`DEBUG_PRINTF
("NŸe: bﬂrd c⁄figuøti⁄: spidev_∑th: %s,Ü‹aw™_public:%d, clk§c:%d, fuŒ_du∂ex:%d\n", 
CONTEXT_SPI
, 
CONTEXT_LWAN_PUBLIC
, 
CONTEXT_BOARD
.
˛k§c
, CONTEXT_BOARD.
fuŒ_du∂ex
);

215  
LGW_HAL_SUCCESS
;

216 
	}
}

220 
	$lgw_rxrf_sx1302_£tc⁄f
(
uöt8_t
 
rf_chaö
, 
lgw_c⁄f_rxrf_s
 * 
c⁄f
) {

221 
	`CHECK_NULL
(
c⁄f
);

224 i‡(
CONTEXT_STARTED
 =
åue
) {

225 
	`DEBUG_MSG
("ERROR: CONCENTRATOR IS RUNNING, STOP IT BEFORE TOUCHING CONFIGURATION\n");

226  
LGW_HAL_ERROR
;

229 i‡(
c⁄f
->
íabÀ
 =
Ál£
) {

231 
	`DEBUG_PRINTF
("NŸe:Ñf_chaö %d dißbÀd\n", 
rf_chaö
);

232  
LGW_HAL_SUCCESS
;

236 i‡(
rf_chaö
 >
LGW_RF_CHAIN_NB
) {

237 
	`DEBUG_MSG
("ERROR: NOT A VALID RF_CHAIN NUMBER\n");

238  
LGW_HAL_ERROR
;

242 i‡((
c⁄f
->
ty≥
 !
LGW_RADIO_TYPE_SX1255
Ë&& (c⁄f->ty≥ !
LGW_RADIO_TYPE_SX1257
Ë&& (c⁄f->ty≥ !
LGW_RADIO_TYPE_SX1250
)) {

243 
	`DEBUG_PRINTF
("ERROR: NOT A VALID RADIO TYPE (%d)\n", 
c⁄f
->
ty≥
);

244  
LGW_HAL_ERROR
;

248 i‡((
c⁄f
->
‰eq_hz
 < 
LGW_RF_RX_FREQ_MIN
Ë|| (c⁄f->‰eq_hz > 
LGW_RF_RX_FREQ_MAX
)) {

249 
	`DEBUG_PRINTF
("ERROR: NOT A VALID RADIO CENTER FREQUENCY, PLEASE CHECK IF IT HAS BEEN GIVEN IN HZ (%u)\n", 
c⁄f
->
‰eq_hz
);

250  
LGW_HAL_ERROR
;

254 
CONTEXT_RF_CHAIN
[
rf_chaö
].
íabÀ
 = 
c⁄f
->enable;

255 
CONTEXT_RF_CHAIN
[
rf_chaö
].
‰eq_hz
 = 
c⁄f
->freq_hz;

256 
CONTEXT_RF_CHAIN
[
rf_chaö
].
rssi_off£t
 = 
c⁄f
->rssi_offset;

257 
CONTEXT_RF_CHAIN
[
rf_chaö
].
rssi_tcomp
.
c€ff_a
 = 
c⁄f
->rssi_tcomp.coeff_a;

258 
CONTEXT_RF_CHAIN
[
rf_chaö
].
rssi_tcomp
.
c€ff_b
 = 
c⁄f
->rssi_tcomp.coeff_b;

259 
CONTEXT_RF_CHAIN
[
rf_chaö
].
rssi_tcomp
.
c€ff_c
 = 
c⁄f
->rssi_tcomp.coeff_c;

260 
CONTEXT_RF_CHAIN
[
rf_chaö
].
rssi_tcomp
.
c€ff_d
 = 
c⁄f
->rssi_tcomp.coeff_d;

261 
CONTEXT_RF_CHAIN
[
rf_chaö
].
rssi_tcomp
.
c€ff_e
 = 
c⁄f
->rssi_tcomp.coeff_e;

262 
CONTEXT_RF_CHAIN
[
rf_chaö
].
ty≥
 = 
c⁄f
->type;

263 
CONTEXT_RF_CHAIN
[
rf_chaö
].
tx_íabÀ
 = 
c⁄f
->tx_enable;

264 
CONTEXT_RF_CHAIN
[
rf_chaö
].
sögÀ_öput_mode
 = 
c⁄f
->single_input_mode;

266 
	`DEBUG_PRINTF
("NŸe:Ñf_chaö %d c⁄figuøti⁄;Én:%d fªq:%dÑssi_off£t:%‡ødio_ty≥:%dÅx_íabÀ:%d sögÀ_öput_mode:%d\n", 
rf_chaö
, 
CONTEXT_RF_CHAIN
[rf_chaö].
íabÀ
, CONTEXT_RF_CHAIN[rf_chaö].
‰eq_hz
, CONTEXT_RF_CHAIN[rf_chaö].
rssi_off£t
, CONTEXT_RF_CHAIN[rf_chaö].
ty≥
, CONTEXT_RF_CHAIN[rf_chaö].
tx_íabÀ
, CONTEXT_RF_CHAIN[rf_chaö].
sögÀ_öput_mode
);

268  
LGW_HAL_SUCCESS
;

269 
	}
}

273 
	$lgw_rxif_sx1302_£tc⁄f
(
uöt8_t
 
if_chaö
, 
lgw_c⁄f_rxif_s
 * 
c⁄f
) {

274 
öt32_t
 
bw_hz
;

275 
uöt32_t
 
rf_rx_b™dwidth
;

277 
	`CHECK_NULL
(
c⁄f
);

280 i‡(
CONTEXT_STARTED
 =
åue
) {

281 
	`DEBUG_MSG
("ERROR: CONCENTRATOR IS RUNNING, STOP IT BEFORE TOUCHING CONFIGURATION\n");

282  
LGW_HAL_ERROR
;

286 i‡(
if_chaö
 >
LGW_IF_CHAIN_NB
) {

287 
	`DEBUG_PRINTF
("ERROR: %d NOT A VALID IF_CHAIN NUMBER\n", 
if_chaö
);

288  
LGW_HAL_ERROR
;

292 i‡(
c⁄f
->
íabÀ
 =
Ál£
) {

293 
CONTEXT_IF_CHAIN
[
if_chaö
].
íabÀ
 = 
Ál£
;

294 
CONTEXT_IF_CHAIN
[
if_chaö
].
‰eq_hz
 = 0;

295 
	`DEBUG_PRINTF
("NŸe: if_chaö %d dißbÀd\n", 
if_chaö
);

296  
LGW_HAL_SUCCESS
;

300 i‡(
	`sx1302_gë_ifmod_c⁄fig
(
if_chaö
Ë=
IF_UNDEFINED
) {

301 
	`DEBUG_PRINTF
("ERROR: IF CHAIN %d NOT CONFIGURABLE\n", 
if_chaö
);

303 i‡(
c⁄f
->
rf_chaö
 >
LGW_RF_CHAIN_NB
) {

304 
	`DEBUG_MSG
("ERROR: INVALID RF_CHAIN TO ASSOCIATE WITH A LORA_STD IF CHAIN\n");

305  
LGW_HAL_ERROR
;

308 
c⁄f
->
b™dwidth
) {

309 
BW_250KHZ
:

310 
rf_rx_b™dwidth
 = 
LGW_RF_RX_BANDWIDTH_250KHZ
;

312 
BW_500KHZ
:

313 
rf_rx_b™dwidth
 = 
LGW_RF_RX_BANDWIDTH_500KHZ
;

317 
rf_rx_b™dwidth
 = 
LGW_RF_RX_BANDWIDTH_125KHZ
;

320 
bw_hz
 = 
	`lgw_bw_gëvÆ
(
c⁄f
->
b™dwidth
);

321 i‡((
c⁄f
->
‰eq_hz
 + ((
bw_hz
==-1)?
LGW_REF_BW
:bw_hz)/2Ë> ((
öt32_t
)
rf_rx_b™dwidth
/2)) {

322 
	`DEBUG_PRINTF
("ERROR: IF FREQUENCY %d TOO HIGH\n", 
c⁄f
->
‰eq_hz
);

323  
LGW_HAL_ERROR
;

324 } i‡((
c⁄f
->
‰eq_hz
 - ((
bw_hz
==-1)?
LGW_REF_BW
:bw_hz)/2Ë< -((
öt32_t
)
rf_rx_b™dwidth
/2)) {

325 
	`DEBUG_PRINTF
("ERROR: IF FREQUENCY %d TOO LOW\n", 
c⁄f
->
‰eq_hz
);

326  
LGW_HAL_ERROR
;

331 
	`sx1302_gë_ifmod_c⁄fig
(
if_chaö
)) {

332 
IF_LORA_STD
:

334 i‡(
c⁄f
->
b™dwidth
 =
BW_UNDEFINED
) {

335 
c⁄f
->
b™dwidth
 = 
BW_250KHZ
;

337 i‡(
c⁄f
->
d©¨©e
 =
DR_UNDEFINED
) {

338 
c⁄f
->
d©¨©e
 = 
DR_LORA_SF7
;

341 i‡(!
	`IS_LORA_BW
(
c⁄f
->
b™dwidth
)) {

342 
	`DEBUG_MSG
("ERROR: BANDWIDTH NOT SUPPORTED BY LORA_STD IF CHAIN\n");

343  
LGW_HAL_ERROR
;

345 i‡(!
	`IS_LORA_DR
(
c⁄f
->
d©¨©e
)) {

346 
	`DEBUG_MSG
("ERROR: DATARATE NOT SUPPORTED BY LORA_STD IF CHAIN\n");

347  
LGW_HAL_ERROR
;

350 
CONTEXT_IF_CHAIN
[
if_chaö
].
íabÀ
 = 
c⁄f
->enable;

351 
CONTEXT_IF_CHAIN
[
if_chaö
].
rf_chaö
 = 
c⁄f
->rf_chain;

352 
CONTEXT_IF_CHAIN
[
if_chaö
].
‰eq_hz
 = 
c⁄f
->freq_hz;

353 
CONTEXT_LORA_SERVICE
.
b™dwidth
 = 
c⁄f
->bandwidth;

354 
CONTEXT_LORA_SERVICE
.
d©¨©e
 = 
c⁄f
->datarate;

355 
CONTEXT_LORA_SERVICE
.
im∂icô_hdr
 = 
c⁄f
->implicit_hdr;

356 
CONTEXT_LORA_SERVICE
.
im∂icô_∑ylﬂd_Àngth
 = 
c⁄f
->implicit_payload_length;

357 
CONTEXT_LORA_SERVICE
.
im∂icô_¸c_í
 = 
c⁄f
->implicit_crc_en;

358 
CONTEXT_LORA_SERVICE
.
im∂icô_codî©e
 = 
c⁄f
->implicit_coderate;

360 
	`DEBUG_PRINTF
("NŸe: LoR®'°d' if_chaö %d c⁄figuøti⁄;Én:%d fªq:%d bw:%d dr:%d\n", 
if_chaö
, 
CONTEXT_IF_CHAIN
[if_chaö].
íabÀ
, CONTEXT_IF_CHAIN[if_chaö].
‰eq_hz
, 
CONTEXT_LORA_SERVICE
.
b™dwidth
, CONTEXT_LORA_SERVICE.
d©¨©e
);

363 
IF_LORA_MULTI
:

365 i‡(
c⁄f
->
b™dwidth
 =
BW_UNDEFINED
) {

366 
c⁄f
->
b™dwidth
 = 
BW_125KHZ
;

368 i‡(
c⁄f
->
d©¨©e
 =
DR_UNDEFINED
) {

369 
c⁄f
->
d©¨©e
 = 
DR_LORA_SF7
;

372 i‡(
c⁄f
->
b™dwidth
 !
BW_125KHZ
) {

373 
	`DEBUG_MSG
("ERROR: BANDWIDTH NOT SUPPORTED BY LORA_MULTI IF CHAIN\n");

374  
LGW_HAL_ERROR
;

376 i‡(!
	`IS_LORA_DR
(
c⁄f
->
d©¨©e
)) {

377 
	`DEBUG_MSG
("ERROR: DATARATE(S) NOT SUPPORTED BY LORA_MULTI IF CHAIN\n");

378  
LGW_HAL_ERROR
;

381 
CONTEXT_IF_CHAIN
[
if_chaö
].
íabÀ
 = 
c⁄f
->enable;

382 
CONTEXT_IF_CHAIN
[
if_chaö
].
rf_chaö
 = 
c⁄f
->rf_chain;

383 
CONTEXT_IF_CHAIN
[
if_chaö
].
‰eq_hz
 = 
c⁄f
->freq_hz;

385 
	`DEBUG_PRINTF
("NŸe: LoR®'mu…i' if_chaö %d c⁄figuøti⁄;Én:%d fªq:%d\n", 
if_chaö
, 
CONTEXT_IF_CHAIN
[if_chaö].
íabÀ
, CONTEXT_IF_CHAIN[if_chaö].
‰eq_hz
);

388 
IF_FSK_STD
:

390 i‡(
c⁄f
->
b™dwidth
 =
BW_UNDEFINED
) {

391 
c⁄f
->
b™dwidth
 = 
BW_250KHZ
;

393 i‡(
c⁄f
->
d©¨©e
 =
DR_UNDEFINED
) {

394 
c⁄f
->
d©¨©e
 = 64000;

397 if(!
	`IS_FSK_BW
(
c⁄f
->
b™dwidth
)) {

398 
	`DEBUG_MSG
("ERROR: BANDWIDTH NOT SUPPORTED BY FSK IF CHAIN\n");

399  
LGW_HAL_ERROR
;

401 if(!
	`IS_FSK_DR
(
c⁄f
->
d©¨©e
)) {

402 
	`DEBUG_MSG
("ERROR: DATARATE NOT SUPPORTED BY FSK IF CHAIN\n");

403  
LGW_HAL_ERROR
;

406 
CONTEXT_IF_CHAIN
[
if_chaö
].
íabÀ
 = 
c⁄f
->enable;

407 
CONTEXT_IF_CHAIN
[
if_chaö
].
rf_chaö
 = 
c⁄f
->rf_chain;

408 
CONTEXT_IF_CHAIN
[
if_chaö
].
‰eq_hz
 = 
c⁄f
->freq_hz;

409 
CONTEXT_FSK
.
b™dwidth
 = 
c⁄f
->bandwidth;

410 
CONTEXT_FSK
.
d©¨©e
 = 
c⁄f
->datarate;

411 i‡(
c⁄f
->
sync_w‹d
 > 0) {

412 
CONTEXT_FSK
.
sync_w‹d_size
 = 
c⁄f
->sync_word_size;

413 
CONTEXT_FSK
.
sync_w‹d
 = 
c⁄f
->sync_word;

415 
	`DEBUG_PRINTF
("NŸe: FSK if_chaö %d c⁄figuøti⁄;Én:%d fªq:%d bw:%d dr:%d (%dÑó»drËsync:0x%0*" 
PRIu64
 "\n", 
if_chaö
, 
CONTEXT_IF_CHAIN
[if_chaö].
íabÀ
, CONTEXT_IF_CHAIN[if_chaö].
‰eq_hz
, 
CONTEXT_FSK
.
b™dwidth
, CONTEXT_FSK.
d©¨©e
, 
LGW_XTAL_FREQU
/(LGW_XTAL_FREQU/CONTEXT_FSK.d©¨©e), 2*CONTEXT_FSK.
sync_w‹d_size
, CONTEXT_FSK.
sync_w‹d
);

419 
	`DEBUG_PRINTF
("ERROR: IF CHAIN %d TYPE NOT SUPPORTED\n", 
if_chaö
);

420  
LGW_HAL_ERROR
;

423  
LGW_HAL_SUCCESS
;

424 
	}
}

428 
	$lgw_txgaö_sx1302_£tc⁄f
(
uöt8_t
 
rf_chaö
, 
lgw_tx_gaö_lut_s
 * 
c⁄f
) {

429 
i
;

431 
	`CHECK_NULL
(
c⁄f
);

434 i‡((
c⁄f
->
size
 < 1Ë|| (c⁄f->sizê> 
TX_GAIN_LUT_SIZE_MAX
)) {

435 
	`DEBUG_PRINTF
("ERROR: TX gaö LUT mu° havê©Üó° o√É¡ryánd maximum %dÉ¡rõs\n", 
TX_GAIN_LUT_SIZE_MAX
);

436  
LGW_HAL_ERROR
;

439 
CONTEXT_TX_GAIN_LUT
[
rf_chaö
].
size
 = 
c⁄f
->size;

441 
i
 = 0; i < 
CONTEXT_TX_GAIN_LUT
[
rf_chaö
].
size
; i++) {

443 i‡(
c⁄f
->
lut
[
i
].
dig_gaö
 > 3) {

444 
	`DEBUG_MSG
("ERROR: TX gain LUT: SX1302 digital gain must be between 0ánd 3\n");

445  
LGW_HAL_ERROR
;

447 i‡(
c⁄f
->
lut
[
i
].
dac_gaö
 > 3) {

448 
	`DEBUG_MSG
("ERROR: TX gain LUT: SX1257 DAC gains mustÇotÉxceed 3\n");

449  
LGW_HAL_ERROR
;

451 i‡((
c⁄f
->
lut
[
i
].
mix_gaö
 < 5) || (conf->lut[i].mix_gain > 15)) {

452 
	`DEBUG_MSG
("ERROR: TX gain LUT: SX1257 mixer gain must be betwen [5..15]\n");

453  
LGW_HAL_ERROR
;

455 i‡(
c⁄f
->
lut
[
i
].
∑_gaö
 > 3) {

456 
	`DEBUG_MSG
("ERROR: TX gain LUT: External PA gain mustÇotÉxceed 3\n");

457  
LGW_HAL_ERROR
;

459 i‡(
c⁄f
->
lut
[
i
].
pwr_idx
 > 22) {

460 
	`DEBUG_MSG
("ERROR: TX gain LUT: SX1250Öower iundex mustÇotÉxceed 22\n");

461  
LGW_HAL_ERROR
;

465 
CONTEXT_TX_GAIN_LUT
[
rf_chaö
].
lut
[
i
].
rf_powî
 = 
c⁄f
->lut[i].rf_power;

466 
CONTEXT_TX_GAIN_LUT
[
rf_chaö
].
lut
[
i
].
dig_gaö
 = 
c⁄f
->lut[i].dig_gain;

467 
CONTEXT_TX_GAIN_LUT
[
rf_chaö
].
lut
[
i
].
∑_gaö
 = 
c⁄f
->lut[i].pa_gain;

469 
CONTEXT_TX_GAIN_LUT
[
rf_chaö
].
lut
[
i
].
dac_gaö
 = 
c⁄f
->lut[i].dac_gain;

470 
CONTEXT_TX_GAIN_LUT
[
rf_chaö
].
lut
[
i
].
mix_gaö
 = 
c⁄f
->lut[i].mix_gain;

471 
CONTEXT_TX_GAIN_LUT
[
rf_chaö
].
lut
[
i
].
off£t_i
 = 0;

472 
CONTEXT_TX_GAIN_LUT
[
rf_chaö
].
lut
[
i
].
off£t_q
 = 0;

475 
CONTEXT_TX_GAIN_LUT
[
rf_chaö
].
lut
[
i
].
pwr_idx
 = 
c⁄f
->lut[i].pwr_idx;

478  
LGW_HAL_SUCCESS
;

479 
	}
}

483 
	$lgw_time°amp_sx1302_£tc⁄f
(
lgw_c⁄f_time°amp_s
 * 
c⁄f
) {

484 
	`CHECK_NULL
(
c⁄f
);

486 
CONTEXT_TIMESTAMP
.
íabÀ_¥ecisi⁄_ts
 = 
c⁄f
->enable_precision_ts;

487 
CONTEXT_TIMESTAMP
.
max_ts_mërics
 = 
c⁄f
->max_ts_metrics;

488 
CONTEXT_TIMESTAMP
.
nb_symbﬁs
 = 
c⁄f
->nb_symbols;

490  
LGW_HAL_SUCCESS
;

491 
	}
}

495 
	$lgw_debug_sx1302_£tc⁄f
(
lgw_c⁄f_debug_s
 * 
c⁄f
) {

496 
i
;

498 
	`CHECK_NULL
(
c⁄f
);

500 
CONTEXT_DEBUG
.
nb_ªf_∑ylﬂd
 = 
c⁄f
->nb_ref_payload;

501 
i
 = 0; i < 
CONTEXT_DEBUG
.
nb_ªf_∑ylﬂd
; i++) {

503 
CONTEXT_DEBUG
.
ªf_∑ylﬂd
[
i
].
id
 = 
c⁄f
->ref_payload[i].id;

506 
CONTEXT_DEBUG
.
ªf_∑ylﬂd
[
i
].
¥ev_˙t
 = 0;

507 
CONTEXT_DEBUG
.
ªf_∑ylﬂd
[
i
].
∑ylﬂd
[0] = (
uöt8_t
)(CONTEXT_DEBUG.ªf_∑ylﬂd[i].
id
 >> 24);

508 
CONTEXT_DEBUG
.
ªf_∑ylﬂd
[
i
].
∑ylﬂd
[1] = (
uöt8_t
)(CONTEXT_DEBUG.ªf_∑ylﬂd[i].
id
 >> 16);

509 
CONTEXT_DEBUG
.
ªf_∑ylﬂd
[
i
].
∑ylﬂd
[2] = (
uöt8_t
)(CONTEXT_DEBUG.ªf_∑ylﬂd[i].
id
 >> 8);

510 
CONTEXT_DEBUG
.
ªf_∑ylﬂd
[
i
].
∑ylﬂd
[3] = (
uöt8_t
)(CONTEXT_DEBUG.ªf_∑ylﬂd[i].
id
 >> 0);

513 i‡(
c⁄f
->
log_fûe_«me
 !
NULL
) {

514 
	`°∫˝y
(
CONTEXT_DEBUG
.
log_fûe_«me
, 
c⁄f
->log_file_name,  CONTEXT_DEBUG.log_file_name);

515 
CONTEXT_DEBUG
.
log_fûe_«me
[ CONTEXT_DEBUG.log_file_name - 1] = '\0';

518  
LGW_HAL_SUCCESS
;

519 
	}
}

523 
	$lgw_sx1302_°¨t
() {

524 
i
, 
îr
;

525 
ªg_°©
;

527 i‡(
CONTEXT_STARTED
 =
åue
) {

528 
	`DEBUG_MSG
("Note: LoRa concentratorálready started,Ñestarting itÇow\n");

531 
ªg_°©
 = 
	`lgw_sx1302_c⁄√˘
(
CONTEXT_SPI
);

532 i‡(
ªg_°©
 =
LGW_REG_ERROR
) {

533 
	`DEBUG_MSG
("ERROR: FAIL TO CONNECT BOARD\n");

534  
LGW_HAL_ERROR
;

538 
îr
 = 
	`sx1302_ødio_ˇlibøã
(&
CONTEXT_RF_CHAIN
[0], 
CONTEXT_BOARD
.
˛k§c
, &
CONTEXT_TX_GAIN_LUT
[0]);

539 i‡(
îr
 !
LGW_REG_SUCCESS
) {

540 
	`¥ötf
("ERROR:Ñadio calibration failed\n");

541  
LGW_HAL_ERROR
;

545 
i
 = 0; i < 
LGW_RF_CHAIN_NB
; i++) {

546 i‡(
CONTEXT_RF_CHAIN
[
i
].
íabÀ
 =
åue
) {

547 
	`sx1302_ødio_ª£t
(
i
, 
CONTEXT_RF_CHAIN
[i].
ty≥
);

548 
CONTEXT_RF_CHAIN
[
i
].
ty≥
) {

549 
LGW_RADIO_TYPE_SX1250
:

550 
	`sx1250_£tup
(
i
, 
CONTEXT_RF_CHAIN
[i].
‰eq_hz
, CONTEXT_RF_CHAIN[i].
sögÀ_öput_mode
);

552 
LGW_RADIO_TYPE_SX1255
:

553 
LGW_RADIO_TYPE_SX1257
:

554 
	`sx125x_£tup
(
i
, 
CONTEXT_BOARD
.
˛k§c
, 
åue
, 
CONTEXT_RF_CHAIN
[i].
ty≥
, CONTEXT_RF_CHAIN[i].
‰eq_hz
);

557 
	`DEBUG_PRINTF
("ERROR: RADIO TYPE NOT SUPPORTED (RF_CHAIN %d)\n", 
i
);

558  
LGW_HAL_ERROR
;

560 
	`sx1302_ødio_£t_mode
(
i
, 
CONTEXT_RF_CHAIN
[i].
ty≥
);

565 
	`sx1302_ødio_˛ock_£À˘
(
CONTEXT_BOARD
.
˛k§c
);

568 
	`sx1302_ødio_ho°_˘æ
(
Ál£
);

571 
	`sx1302_öô
(&
CONTEXT_TIMESTAMP
);

574 
	`sx1302_∑_ a_lut_c⁄figuª
();

577 
	`sx1302_ødio_„_c⁄figuª
();

580 
	`sx1302_ch™√lizî_c⁄figuª
(
CONTEXT_IF_CHAIN
, 
Ál£
);

583 
	`sx1302_l‹a_c‹ªœt‹_c⁄figuª
();

584 
	`sx1302_l‹a_modem_c⁄figuª
(
CONTEXT_RF_CHAIN
[0].
‰eq_hz
);

587 i‡(
CONTEXT_IF_CHAIN
[8].
íabÀ
 =
åue
) {

588 
	`sx1302_l‹a_£rvi˚_c‹ªœt‹_c⁄figuª
(&(
CONTEXT_LORA_SERVICE
));

589 
	`sx1302_l‹a_£rvi˚_modem_c⁄figuª
(&(
CONTEXT_LORA_SERVICE
), 
CONTEXT_RF_CHAIN
[0].
‰eq_hz
);

593 i‡(
CONTEXT_IF_CHAIN
[9].
íabÀ
 =
åue
) {

594 
	`sx1302_fsk_c⁄figuª
(&(
CONTEXT_FSK
));

598 
	`sx1302_l‹a_syncw‹d
(
CONTEXT_LWAN_PUBLIC
, 
CONTEXT_LORA_SERVICE
.
d©¨©e
);

601 
	`sx1302_modem_íabÀ
();

604 
CONTEXT_RF_CHAIN
[
CONTEXT_BOARD
.
˛k§c
].
ty≥
) {

605 
LGW_RADIO_TYPE_SX1250
:

606 
	`DEBUG_MSG
("Loading AGC fw for sx1250\n");

607 i‡(
	`sx1302_agc_lﬂd_fúmw¨e
(
agc_fúmw¨e_sx1250
Ë!
LGW_HAL_SUCCESS
) {

608  
LGW_HAL_ERROR
;

611 
LGW_RADIO_TYPE_SX1257
:

612 
	`DEBUG_MSG
("Loading AGC fw for sx125x\n");

613 i‡(
	`sx1302_agc_lﬂd_fúmw¨e
(
agc_fúmw¨e_sx125x
Ë!
LGW_HAL_SUCCESS
) {

614  
LGW_HAL_ERROR
;

620 i‡(
	`sx1302_agc_°¨t
(
FW_VERSION_AGC
, 
CONTEXT_RF_CHAIN
[
CONTEXT_BOARD
.
˛k§c
].
ty≥
, 
SX1302_AGC_RADIO_GAIN_AUTO
, SX1302_AGC_RADIO_GAIN_AUTO, (CONTEXT_BOARD.
fuŒ_du∂ex
 =
åue
Ë? 1 : 0Ë!
LGW_HAL_SUCCESS
) {

621  
LGW_HAL_ERROR
;

623 
	`DEBUG_MSG
("Loading ARB fw\n");

624 i‡(
	`sx1302_¨b_lﬂd_fúmw¨e
(
¨b_fúmw¨e
Ë!
LGW_HAL_SUCCESS
) {

625  
LGW_HAL_ERROR
;

627 i‡(
	`sx1302_¨b_°¨t
(
FW_VERSION_ARB
Ë!
LGW_HAL_SUCCESS
) {

628  
LGW_HAL_ERROR
;

632 
	`sx1302_tx_c⁄figuª
(
CONTEXT_RF_CHAIN
[
CONTEXT_BOARD
.
˛k§c
].
ty≥
);

635 
	`sx1302_gps_íabÀ
(
åue
);

638 #i‡
HAL_DEBUG_FILE_LOG


639 
time°amp_°r
[40];

640 
tm
 *
timíow
;

643 
time_t
 
now
 = 
	`time
(
NULL
);

644 
timíow
 = 
	`gmtime
(&
now
);

645 
	`°r·ime
(
time°amp_°r
, —ime°amp_°r), ".%Y-%m-%d_%H%M%S", 
timíow
);

646 
	`°∫ˇt
(
CONTEXT_DEBUG
.
log_fûe_«me
, 
time°amp_°r
,  CONTEXT_DEBUG.log_file_name);

649 
log_fûe
 = 
	`f›í
(
CONTEXT_DEBUG
.
log_fûe_«me
, "w+");

650 i‡(
log_fûe
 =
NULL
) {

651 
	`¥ötf
("ERROR: impossibÀÅÿ¸óãÜog fûê%s\n", 
CONTEXT_DEBUG
.
log_fûe_«me
);

652  
LGW_HAL_ERROR
;

654 
	`¥ötf
("INFO: %†fûê›íed f‹ debugÜog\n", 
CONTEXT_DEBUG
.
log_fûe_«me
);

657 
	`u∆ök
("loragw_hal.log");

658 
i
 = 
	`symlök
(
CONTEXT_DEBUG
.
log_fûe_«me
, "loragw_hal.log");

659 i‡(
i
 < 0) {

660 
	`¥ötf
("ERROR: impossibÀÅÿ¸óã symlökÅÿlog fûê%s\n", 
CONTEXT_DEBUG
.
log_fûe_«me
);

666 
	`dbg_öô_øndom
();

670 
	`dbg_öô_gpio
();

674 
ts_addr
 = 
I2C_PORT_TEMP_SENSOR_0
;

675 
	`i2c_löuxdev_›í
(
I2C_DEVICE
, 
ts_addr
, &
ts_fd
);

676 
îr
 = 
	`°ts751_c⁄figuª
(
ts_fd
, 
ts_addr
);

677 i‡(
îr
 !
LGW_I2C_SUCCESS
) {

678 
	`i2c_löuxdev_˛o£
(
ts_fd
);

679 
ts_fd
 = -1;

681 
ts_addr
 = 
I2C_PORT_TEMP_SENSOR_1
;

682 
	`i2c_löuxdev_›í
(
I2C_DEVICE
, 
ts_addr
, &
ts_fd
);

683 
îr
 = 
	`°ts751_c⁄figuª
(
ts_fd
, 
ts_addr
);

684 i‡(
îr
 !
LGW_I2C_SUCCESS
) {

685 
	`¥ötf
("ERROR: failedÅo configureÅheÅemperature sensor\n");

686  
LGW_HAL_ERROR
;

691 
CONTEXT_STARTED
 = 
åue
;

693  
LGW_HAL_SUCCESS
;

694 
	}
}

698 
	$lgw_sx1302_°›
() {

699 
i
, 
îr
;

701 
	`DEBUG_MSG
("INFO:áborting TX\n");

702 
i
 = 0; i < 
LGW_RF_CHAIN_NB
; i++) {

703 
	`lgw_ab‹t_sx1302_tx
(
i
);

707 i‡(
log_fûe
 !
NULL
) {

708 
	`f˛o£
(
log_fûe
);

709 
log_fûe
 = 
NULL
;

712 
	`DEBUG_MSG
("INFO: Disconnecting\n");

713 
	`lgw_sx1302_disc⁄√˘
();

715 
	`DEBUG_MSG
("INFO: Closing I2C\n");

716 
îr
 = 
	`i2c_löuxdev_˛o£
(
ts_fd
);

717 i‡(
îr
 != 0) {

718 
	`¥ötf
("ERROR: faûedÅÿ˛o£ I2C devi˚ (îr=%i)\n", 
îr
);

721 
CONTEXT_STARTED
 = 
Ál£
;

722  
LGW_HAL_SUCCESS
;

723 
	}
}

727 
	$lgw_sx1302_ª˚ive
(
uöt8_t
 
max_pkt
, 
lgw_pkt_rx_s
 *
pkt_d©a
) {

728 
ªs
;

729 
uöt8_t
 
nb_pkt_„tched
 = 0;

730 
uöt16_t
 
nb_pkt_found
 = 0;

731 
uöt16_t
 
nb_pkt_À·
 = 0;

732 
cuºít_ãm≥øtuª
, 
rssi_ãm≥øtuª_off£t
;

736 
ªs
 = 
	`sx1302_upd©e
();

737 i‡(
ªs
 !
LGW_REG_SUCCESS
) {

738  
LGW_HAL_ERROR
;

742 
ªs
 = 
	`sx1302_„tch
(&
nb_pkt_„tched
);

743 i‡(
ªs
 !
LGW_REG_SUCCESS
) {

744 
	`¥ötf
("ERROR: failedÅo fetchÖackets from SX1302\n");

745  
LGW_HAL_ERROR
;

747 i‡(
nb_pkt_„tched
 == 0) {

750 i‡(
nb_pkt_„tched
 > 
max_pkt
) {

751 
nb_pkt_À·
 = 
nb_pkt_„tched
 - 
max_pkt
;

752 
	`¥ötf
("WARNING:ÇŸÉnough s∑˚áŒoˇãd, fëched %dÖackë(s), %d wû»bêÀ· i¿RX buf„r\n", 
nb_pkt_„tched
, 
nb_pkt_À·
);

756 
ªs
 = 
	`°ts751_gë_ãm≥øtuª
(
ts_fd
, 
ts_addr
, &
cuºít_ãm≥øtuª
);

757 i‡(
ªs
 !
LGW_I2C_SUCCESS
) {

758 
	`¥ötf
("ERROR: failedÅo get currentÅemperature\n");

759  
LGW_HAL_ERROR
;

763 
nb_pkt_found
 = 0;Çb_pkt_found < ((
nb_pkt_„tched
 <
max_pkt
) ?Çb_pkt_fetched : max_pkt);Çb_pkt_found++) {

765 
ªs
 = 
	`sx1302_∑r£
(&
lgw_c⁄ãxt
, &
pkt_d©a
[
nb_pkt_found
]);

766 i‡(
ªs
 !
LGW_REG_SUCCESS
) {

767 
	`¥ötf
("ERROR: faûedÅÿ∑r£ fëchedÖackë %d,áb‹tög...\n", 
nb_pkt_found
);

768  
LGW_HAL_ERROR
;

772 
pkt_d©a
[
nb_pkt_found
].
rssic
 +
CONTEXT_RF_CHAIN
[pkt_d©a[nb_pkt_found].
rf_chaö
].
rssi_off£t
;

773 
pkt_d©a
[
nb_pkt_found
].
rssis
 +
CONTEXT_RF_CHAIN
[pkt_d©a[nb_pkt_found].
rf_chaö
].
rssi_off£t
;

775 
rssi_ãm≥øtuª_off£t
 = 
	`sx1302_rssi_gë_ãm≥øtuª_off£t
(&
CONTEXT_RF_CHAIN
[
pkt_d©a
[
nb_pkt_found
].
rf_chaö
].
rssi_tcomp
, 
cuºít_ãm≥øtuª
);

776 
pkt_d©a
[
nb_pkt_found
].
rssic
 +
rssi_ãm≥øtuª_off£t
;

777 
pkt_d©a
[
nb_pkt_found
].
rssis
 +
rssi_ãm≥øtuª_off£t
;

778 
	`DEBUG_PRINTF
("INFO: RSSIÅem≥øtuª off£à≠∂õd: %.3‡dB (cuºíàãm≥øtuª %.1‡C)\n", 
rssi_ãm≥øtuª_off£t
, 
cuºít_ãm≥øtuª
);

781 
	`DEBUG_PRINTF
("INFO:ÇbÖkàfound:%uÜe·:%u\n", 
nb_pkt_found
, 
nb_pkt_À·
);

783  
nb_pkt_found
;

784 
	}
}

788 
	$lgw_sx1302_£nd
(
lgw_pkt_tx_s
 * 
pkt_d©a
) {

790 i‡(
CONTEXT_STARTED
 =
Ál£
) {

791 
	`DEBUG_MSG
("ERROR: CONCENTRATOR IS NOT RUNNING, START IT BEFORE SENDING\n");

792  
LGW_HAL_ERROR
;

795 
	`CHECK_NULL
(
pkt_d©a
);

798 i‡(
pkt_d©a
->
rf_chaö
 >
LGW_RF_CHAIN_NB
) {

799 
	`DEBUG_MSG
("ERROR: INVALID RF_CHAIN TO SEND PACKETS\n");

800  
LGW_HAL_ERROR
;

804 i‡(
CONTEXT_RF_CHAIN
[
pkt_d©a
->
rf_chaö
].
tx_íabÀ
 =
Ál£
) {

805 
	`DEBUG_MSG
("ERROR: SELECTED RF_CHAIN IS DISABLED FOR TX ON SELECTED BOARD\n");

806  
LGW_HAL_ERROR
;

808 i‡(
CONTEXT_RF_CHAIN
[
pkt_d©a
->
rf_chaö
].
íabÀ
 =
Ál£
) {

809 
	`DEBUG_MSG
("ERROR: SELECTED RF_CHAIN IS DISABLED\n");

810  
LGW_HAL_ERROR
;

812 i‡(!
	`IS_TX_MODE
(
pkt_d©a
->
tx_mode
)) {

813 
	`DEBUG_MSG
("ERROR: TX_MODE NOT SUPPORTED\n");

814  
LGW_HAL_ERROR
;

816 i‡(
pkt_d©a
->
moduœti⁄
 =
MOD_LORA
) {

817 i‡(!
	`IS_LORA_BW
(
pkt_d©a
->
b™dwidth
)) {

818 
	`DEBUG_MSG
("ERROR: BANDWIDTH NOT SUPPORTED BY LORA TX\n");

819  
LGW_HAL_ERROR
;

821 i‡(!
	`IS_LORA_DR
(
pkt_d©a
->
d©¨©e
)) {

822 
	`DEBUG_MSG
("ERROR: DATARATE NOT SUPPORTED BY LORA TX\n");

823  
LGW_HAL_ERROR
;

825 i‡(!
	`IS_LORA_CR
(
pkt_d©a
->
codî©e
)) {

826 
	`DEBUG_MSG
("ERROR: CODERATE NOT SUPPORTED BY LORA TX\n");

827  
LGW_HAL_ERROR
;

829 i‡(
pkt_d©a
->
size
 > 255) {

830 
	`DEBUG_MSG
("ERROR: PAYLOAD LENGTH TOO BIG FOR LORA TX\n");

831  
LGW_HAL_ERROR
;

833 } i‡(
pkt_d©a
->
moduœti⁄
 =
MOD_FSK
) {

834 if((
pkt_d©a
->
f_dev
 < 1) || (pkt_data->f_dev > 200)) {

835 
	`DEBUG_MSG
("ERROR: TX FREQUENCY DEVIATION OUT OF ACCEPTABLE RANGE\n");

836  
LGW_HAL_ERROR
;

838 if(!
	`IS_FSK_DR
(
pkt_d©a
->
d©¨©e
)) {

839 
	`DEBUG_MSG
("ERROR: DATARATE NOT SUPPORTED BY FSK IF CHAIN\n");

840  
LGW_HAL_ERROR
;

842 i‡(
pkt_d©a
->
size
 > 255) {

843 
	`DEBUG_MSG
("ERROR: PAYLOAD LENGTH TOO BIG FOR FSK TX\n");

844  
LGW_HAL_ERROR
;

846 } i‡(
pkt_d©a
->
moduœti⁄
 =
MOD_CW
) {

849 
	`DEBUG_MSG
("ERROR: INVALID TX MODULATION\n");

850  
LGW_HAL_ERROR
;

853  
	`sx1302_£nd
(
CONTEXT_RF_CHAIN
[
pkt_d©a
->
rf_chaö
].
ty≥
, &
CONTEXT_TX_GAIN_LUT
[pkt_d©a->rf_chaö], 
CONTEXT_LWAN_PUBLIC
, &
CONTEXT_FSK
,Ökt_data);

854 
	}
}

858 
	$lgw_sx1302_°©us
(
uöt8_t
 
rf_chaö
, uöt8_à
£À˘
, uöt8_à*
code
) {

860 
	`CHECK_NULL
(
code
);

861 i‡(
rf_chaö
 >
LGW_RF_CHAIN_NB
) {

862 
	`DEBUG_MSG
("ERROR: NOT A VALID RF_CHAIN NUMBER\n");

863  
LGW_HAL_ERROR
;

867 i‡(
£À˘
 =
TX_STATUS
) {

868 i‡(
CONTEXT_STARTED
 =
Ál£
) {

869 *
code
 = 
TX_OFF
;

871 *
code
 = 
	`sx1302_tx_°©us
(
rf_chaö
);

873 } i‡(
£À˘
 =
RX_STATUS
) {

874 i‡(
CONTEXT_STARTED
 =
Ál£
) {

875 *
code
 = 
RX_OFF
;

877 *
code
 = 
	`sx1302_rx_°©us
(
rf_chaö
);

880 
	`DEBUG_MSG
("ERROR: SELECTION INVALID, NO STATUS TO RETURN\n");

881  
LGW_HAL_ERROR
;

885  
LGW_HAL_SUCCESS
;

886 
	}
}

890 
	$lgw_ab‹t_sx1302_tx
(
uöt8_t
 
rf_chaö
) {

892 i‡(
rf_chaö
 >
LGW_RF_CHAIN_NB
) {

893 
	`DEBUG_MSG
("ERROR: NOT A VALID RF_CHAIN NUMBER\n");

894  
LGW_HAL_ERROR
;

898  
	`sx1302_tx_ab‹t
(
rf_chaö
);

899 
	}
}

903 
	$lgw_gë_sx1302_åig˙t
(
uöt32_t
* 
åig_˙t_us
) {

904 
	`CHECK_NULL
(
åig_˙t_us
);

906 *
åig_˙t_us
 = 
	`sx1302_time°amp_cou¡î
(
åue
);

908  
LGW_HAL_SUCCESS
;

909 
	}
}

913 
	$lgw_gë_sx1302_ö°˙t
(
uöt32_t
* 
ö°_˙t_us
) {

914 
	`CHECK_NULL
(
ö°_˙t_us
);

916 *
ö°_˙t_us
 = 
	`sx1302_time°amp_cou¡î
(
Ál£
);

918  
LGW_HAL_SUCCESS
;

919 
	}
}

923 
	$lgw_gë_sx1302_eui
(
uöt64_t
* 
eui
) {

924 
	`CHECK_NULL
(
eui
);

926 i‡(
	`sx1302_gë_eui
(
eui
Ë!
LGW_REG_SUCCESS
) {

927  
LGW_HAL_ERROR
;

929  
LGW_HAL_SUCCESS
;

930 
	}
}

934 
	$lgw_gë_sx1302_ãm≥øtuª
(* 
ãm≥øtuª
) {

935 
	`CHECK_NULL
(
ãm≥øtuª
);

937 i‡(
	`°ts751_gë_ãm≥øtuª
(
ts_fd
, 
ts_addr
, 
ãm≥øtuª
Ë!
LGW_I2C_SUCCESS
) {

938  
LGW_HAL_ERROR
;

941  
LGW_HAL_SUCCESS
;

942 
	}
}

	@hal/sx1302hal/loragw_hal_sx1302.h

16 #i‚de‡
_LORAGW_SX1302_HAL_H


17 
	#_LORAGW_SX1302_HAL_H


	)

23 
	~"l‹agw_hÆ.h
"

30 
lgw_bﬂrd_sx1302_£tc⁄f
(
lgw_c⁄f_bﬂrd_s
 *
c⁄f
);

31 
lgw_rxrf_sx1302_£tc⁄f
(
uöt8_t
 
rf_chaö
, 
lgw_c⁄f_rxrf_s
 *
c⁄f
);

32 
lgw_rxif_sx1302_£tc⁄f
(
uöt8_t
 
if_chaö
, 
lgw_c⁄f_rxif_s
 *
c⁄f
);

33 
lgw_txgaö_sx1302_£tc⁄f
(
uöt8_t
 
rf_chaö
, 
lgw_tx_gaö_lut_s
 *
c⁄f
);

34 
lgw_debug_sx1302_£tc⁄f
(
lgw_c⁄f_debug_s
 *
c⁄f
);

41 
lgw_time°amp_sx1302_£tc⁄f
(
lgw_c⁄f_time°amp_s
 *
c⁄f
);

47 
lgw_sx1302_°¨t
();

53 
lgw_sx1302_°›
();

61 
lgw_sx1302_ª˚ive
(
uöt8_t
 
max_pkt
, 
lgw_pkt_rx_s
 * 
pkt_d©a
);

87 
lgw_sx1302_£nd
(
lgw_pkt_tx_s
 * 
pkt_d©a
);

95 
lgw_sx1302_°©us
(
uöt8_t
 
rf_chaö
, uöt8_à
£À˘
, uöt8_à* 
code
);

101 
lgw_ab‹t_sx1302_tx
(
uöt8_t
 
rf_chaö
);

108 
lgw_gë_sx1302_åig˙t
(
uöt32_t
 * 
åig_˙t_us
);

115 
lgw_gë_sx1302_ö°˙t
(
uöt32_t
 * 
ö°_˙t_us
);

122 
lgw_gë_sx1302_eui
(
uöt64_t
 * 
eui
);

129 
lgw_gë_sx1302_ãm≥øtuª
(* 
ãm≥øtuª
);

	@hal/sx1302hal/loragw_reg_sx1302.c

22 
	~<°döt.h
>

23 
	~<°dboﬁ.h
>

24 
	~<°dio.h
>

26 
	~"l‹agw_•i.h
"

27 
	~"l‹agw_ªg.h
"

28 
	~"l‹agw_ªg_sx1302.h
"

33 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

34 #i‡
DEBUG_REG
 == 1

35 
	#DEBUG_MSG
(
°r
Ë
	`Ârötf
(
°dîr
, så)

	)

36 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...Ë
	`Ârötf
(
°dîr
,"%s:%d: "fmt, 
__FUNCTION__
, 
__LINE__
,árgs)

	)

37 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){
	`Ârötf
(
°dîr
,"%s:%d: ERROR: NULL POINTER AS ARGUMENT\n", 
__FUNCTION__
, 
__LINE__
); 
LGW_REG_ERROR
;}

	)

39 
	#DEBUG_MSG
(
°r
)

	)

40 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...)

	)

41 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){ 
LGW_REG_ERROR
;}

	)

47 
	#SX1302_REG_EXT_MEM_PAGED_BASE_ADDR
 0x0

	)

48 
	#SX1302_REG_RX_BUFFER_BASE_ADDR
 0x4000

	)

49 
	#SX1302_REG_TX_TOP_A_BASE_ADDR
 0x5200

	)

50 
	#SX1302_REG_TX_TOP_B_BASE_ADDR
 0x5400

	)

51 
	#SX1302_REG_COMMON_BASE_ADDR
 0x5600

	)

52 
	#SX1302_REG_GPIO_BASE_ADDR
 0x5640

	)

53 
	#SX1302_REG_MBIST_BASE_ADDR
 0x56c0

	)

54 
	#SX1302_REG_RADIO_FE_BASE_ADDR
 0x5700

	)

55 
	#SX1302_REG_AGC_MCU_BASE_ADDR
 0x5780

	)

56 
	#SX1302_REG_CLK_CTRL_BASE_ADDR
 0x57c0

	)

57 
	#SX1302_REG_RX_TOP_BASE_ADDR
 0x5800

	)

58 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
 0x5b00

	)

59 
	#SX1302_REG_CAPTURE_RAM_BASE_ADDR
 0x6000

	)

60 
	#SX1302_REG_ARB_MCU_BASE_ADDR
 0x6080

	)

61 
	#SX1302_REG_TIMESTAMP_BASE_ADDR
 0x6100

	)

62 
	#SX1302_REG_OTP_BASE_ADDR
 0x6180

	)

64 c⁄° 
lgw_ªg_s
 
	gsx1302_ªgs
[
LGW_SX1302_TOTALREGS
+1] = {

65 {0,
SX1302_REG_COMMON_BASE_ADDR
+0,0,0,2,0,1,0},

66 {0,
SX1302_REG_COMMON_BASE_ADDR
+1,4,0,1,0,1,0},

67 {0,
SX1302_REG_COMMON_BASE_ADDR
+1,3,0,1,0,1,1},

68 {0,
SX1302_REG_COMMON_BASE_ADDR
+1,2,0,1,0,1,0},

69 {0,
SX1302_REG_COMMON_BASE_ADDR
+1,1,0,1,0,1,1},

70 {0,
SX1302_REG_COMMON_BASE_ADDR
+1,0,0,1,0,1,1},

71 {0,
SX1302_REG_COMMON_BASE_ADDR
+2,3,0,1,0,1,0},

72 {0,
SX1302_REG_COMMON_BASE_ADDR
+2,2,0,1,0,1,1},

73 {0,
SX1302_REG_COMMON_BASE_ADDR
+2,1,0,1,0,1,0},

74 {0,
SX1302_REG_COMMON_BASE_ADDR
+2,0,0,1,0,1,1},

75 {0,
SX1302_REG_COMMON_BASE_ADDR
+3,0,0,8,0,1,2},

76 {0,
SX1302_REG_COMMON_BASE_ADDR
+4,0,0,8,0,1,128},

77 {0,
SX1302_REG_COMMON_BASE_ADDR
+5,3,0,1,0,1,0},

78 {0,
SX1302_REG_COMMON_BASE_ADDR
+5,2,0,1,0,1,0},

79 {0,
SX1302_REG_COMMON_BASE_ADDR
+5,1,0,1,0,1,0},

80 {0,
SX1302_REG_COMMON_BASE_ADDR
+5,0,0,1,0,1,0},

81 {0,
SX1302_REG_COMMON_BASE_ADDR
+6,0,0,8,1,1,16},

82 {0,
SX1302_REG_COMMON_BASE_ADDR
+7,0,0,1,1,1,0},

83 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+0,4,0,1,0,1,1},

84 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+0,3,0,1,0,1,0},

85 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+0,2,0,1,0,1,1},

86 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+0,1,0,1,0,1,0},

87 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+0,0,0,1,1,1,0},

88 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+1,0,0,8,1,1,0},

89 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+2,2,0,2,0,1,0},

90 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+2,0,0,2,0,1,0},

91 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+3,3,0,1,0,1,0},

92 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+3,2,0,1,0,1,0},

93 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+3,1,0,1,0,1,0},

94 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+3,0,0,1,0,1,0},

95 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+4,3,0,1,0,1,0},

96 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+4,2,0,1,0,1,0},

97 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+4,1,0,1,0,1,0},

98 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+4,0,0,1,0,1,0},

99 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+5,4,0,4,0,1,0},

100 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+5,0,0,4,0,1,0},

101 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+6,4,0,4,0,1,0},

102 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+6,0,0,4,0,1,0},

103 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+7,5,0,1,0,1,0},

104 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+7,4,0,1,0,1,0},

105 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+7,3,0,1,0,1,0},

106 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+7,2,0,1,0,1,0},

107 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+7,1,0,1,0,1,0},

108 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+7,0,0,1,0,1,1},

109 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+8,0,0,8,0,1,0},

110 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+9,0,0,8,0,1,0},

111 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+10,0,0,8,0,1,0},

112 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+11,0,0,8,0,1,0},

113 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+12,0,0,8,0,1,0},

114 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+13,0,0,8,1,1,0},

115 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+14,0,0,8,1,1,0},

116 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+15,0,0,8,1,1,0},

117 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+16,0,0,8,1,1,0},

118 {0,
SX1302_REG_AGC_MCU_BASE_ADDR
+17,0,0,1,1,1,0},

119 {0,
SX1302_REG_CLK_CTRL_BASE_ADDR
+0,2,0,1,0,1,0},

120 {0,
SX1302_REG_CLK_CTRL_BASE_ADDR
+0,1,0,1,0,1,0},

121 {0,
SX1302_REG_CLK_CTRL_BASE_ADDR
+0,0,0,1,0,1,0},

122 {0,
SX1302_REG_CLK_CTRL_BASE_ADDR
+1,3,0,1,1,1,0},

123 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+0,3,0,1,0,0,0},

124 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+0,2,0,1,0,1,0},

125 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+0,1,0,1,0,1,0},

126 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+0,0,0,1,0,1,0},

127 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+1,0,0,8,0,1,0},

128 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+2,0,0,8,0,1,0},

129 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+3,0,0,8,0,1,0},

130 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+4,0,0,8,0,1,0},

131 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+5,0,0,8,0,1,187},

132 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+6,0,0,8,0,1,128},

133 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+7,0,0,1,0,1,0},

134 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+8,0,0,3,0,1,1},

135 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+9,0,0,1,0,1,0},

136 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+10,1,0,1,0,1,0},

137 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+10,0,0,1,0,1,0},

138 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+11,1,0,1,0,0,0},

139 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+11,0,0,1,0,0,0},

140 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+12,0,0,8,0,1,0},

141 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+13,0,0,8,0,1,0},

142 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+14,0,0,8,0,1,0},

143 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+15,0,0,8,0,1,0},

144 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+16,0,0,8,0,1,0},

145 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+17,0,0,8,1,1,0},

146 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+18,3,0,1,1,1,0},

147 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+32,5,0,3,0,1,0},

148 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+32,4,0,1,0,1,1},

149 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+32,3,0,1,0,1,1},

150 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+32,2,0,1,0,1,0},

151 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+32,0,0,2,0,1,0},

152 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+33,1,0,1,0,1,0},

153 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+33,0,0,1,0,1,0},

154 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+34,0,0,2,0,1,0},

155 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+35,0,0,8,0,1,0},

156 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+36,0,0,8,0,1,0},

157 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+37,0,0,8,0,1,108},

158 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+38,0,0,8,0,1,144},

159 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+39,0,0,8,0,1,0},

160 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+40,0,0,4,0,1,0},

161 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+41,0,0,8,0,1,0},

162 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+42,0,0,8,0,1,64},

163 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+43,3,0,1,1,1,0},

164 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+64,0,0,8,0,1,15},

165 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+65,5,0,1,0,1,0},

166 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+65,4,0,1,0,1,0},

167 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+65,2,0,2,0,1,0},

168 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+65,1,0,1,0,1,1},

169 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+65,0,0,1,0,1,0},

170 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+66,0,0,8,0,1,0},

171 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+67,0,0,8,0,1,20},

172 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+68,0,0,8,0,1,26},

173 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+69,0,0,8,0,1,11},

174 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+70,5,0,3,0,1,3},

175 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+70,4,0,1,0,1,0},

176 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+70,3,0,1,0,1,1},

177 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+70,1,0,2,0,1,0},

178 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+70,0,0,1,0,1,0},

179 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+71,0,0,8,0,1,151},

180 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+72,0,0,8,0,1,35},

181 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+73,0,0,8,0,1,82},

182 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+74,0,0,8,0,1,37},

183 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+75,0,0,8,0,1,86},

184 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+76,0,0,8,0,1,83},

185 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+77,0,0,8,0,1,101},

186 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+78,0,0,8,0,1,100},

187 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+79,3,0,1,1,1,0},

188 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+96,4,0,4,0,1,5},

189 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+96,0,0,4,0,1,7},

190 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+97,6,0,2,0,1,2},

191 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+97,4,0,2,0,1,0},

192 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+97,3,0,1,0,1,0},

193 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+97,0,0,3,0,1,2},

194 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+98,7,0,1,0,1,0},

195 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+98,6,0,1,0,1,0},

196 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+98,4,0,2,0,1,2},

197 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+98,1,0,1,0,1,0},

198 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+98,0,0,1,0,1,1},

199 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+99,0,0,8,0,1,12},

200 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+100,7,0,1,0,1,0},

201 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+100,0,0,6,0,1,0},

202 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+101,7,0,1,0,1,0},

203 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+101,6,0,1,0,1,0},

204 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+101,0,0,6,0,1,0},

205 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+102,0,0,8,0,1,8},

206 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+103,0,0,8,0,1,0},

207 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+104,6,0,1,0,1,1},

208 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+104,5,0,1,0,1,0},

209 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+104,4,0,1,0,1,0},

210 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+105,4,0,3,0,1,0},

211 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+105,3,0,1,0,1,0},

212 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+105,2,0,1,0,1,1},

213 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+105,1,0,1,0,1,1},

214 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+105,0,0,1,0,1,0},

215 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+106,0,0,6,0,1,20},

216 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+107,0,0,8,0,1,0},

217 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+108,5,0,2,0,1,0},

218 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+108,0,0,5,0,1,10},

219 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+109,7,0,1,0,1,1},

220 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+109,6,0,1,0,1,0},

221 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+109,5,0,1,0,1,1},

222 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+109,0,1,5,0,1,2},

223 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+110,7,0,1,0,1,0},

224 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+110,5,0,2,0,1,3},

225 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+110,0,1,5,0,1,4},

226 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+111,0,0,4,1,1,0},

227 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+112,2,0,1,0,0,0},

228 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+112,1,0,1,0,0,0},

229 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+112,0,0,1,0,0,0},

230 {0,
SX1302_REG_TX_TOP_A_BASE_ADDR
+113,3,0,1,1,1,0},

231 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+0,3,0,1,0,0,0},

232 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+0,2,0,1,0,1,0},

233 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+0,1,0,1,0,1,0},

234 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+0,0,0,1,0,1,0},

235 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+1,0,0,8,0,1,0},

236 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+2,0,0,8,0,1,0},

237 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+3,0,0,8,0,1,0},

238 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+4,0,0,8,0,1,0},

239 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+5,0,0,8,0,1,187},

240 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+6,0,0,8,0,1,128},

241 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+7,0,0,1,0,1,0},

242 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+8,0,0,3,0,1,1},

243 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+9,0,0,1,0,1,0},

244 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+10,1,0,1,0,1,0},

245 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+10,0,0,1,0,1,0},

246 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+11,1,0,1,0,0,0},

247 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+11,0,0,1,0,0,0},

248 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+12,0,0,8,0,1,0},

249 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+13,0,0,8,0,1,0},

250 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+14,0,0,8,0,1,0},

251 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+15,0,0,8,0,1,0},

252 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+16,0,0,8,0,1,0},

253 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+17,0,0,8,1,1,0},

254 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+18,3,0,1,1,1,0},

255 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+32,5,0,3,0,1,0},

256 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+32,4,0,1,0,1,1},

257 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+32,3,0,1,0,1,1},

258 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+32,2,0,1,0,1,0},

259 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+32,0,0,2,0,1,0},

260 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+33,1,0,1,0,1,0},

261 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+33,0,0,1,0,1,0},

262 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+34,0,0,2,0,1,0},

263 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+35,0,0,8,0,1,0},

264 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+36,0,0,8,0,1,0},

265 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+37,0,0,8,0,1,108},

266 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+38,0,0,8,0,1,144},

267 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+39,0,0,8,0,1,0},

268 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+40,0,0,4,0,1,0},

269 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+41,0,0,8,0,1,0},

270 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+42,0,0,8,0,1,64},

271 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+43,3,0,1,1,1,0},

272 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+64,0,0,8,0,1,15},

273 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+65,5,0,1,0,1,0},

274 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+65,4,0,1,0,1,0},

275 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+65,2,0,2,0,1,0},

276 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+65,1,0,1,0,1,1},

277 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+65,0,0,1,0,1,0},

278 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+66,0,0,8,0,1,0},

279 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+67,0,0,8,0,1,20},

280 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+68,0,0,8,0,1,26},

281 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+69,0,0,8,0,1,11},

282 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+70,5,0,3,0,1,3},

283 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+70,4,0,1,0,1,0},

284 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+70,3,0,1,0,1,1},

285 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+70,1,0,2,0,1,0},

286 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+70,0,0,1,0,1,0},

287 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+71,0,0,8,0,1,151},

288 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+72,0,0,8,0,1,35},

289 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+73,0,0,8,0,1,82},

290 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+74,0,0,8,0,1,37},

291 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+75,0,0,8,0,1,86},

292 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+76,0,0,8,0,1,83},

293 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+77,0,0,8,0,1,101},

294 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+78,0,0,8,0,1,100},

295 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+79,3,0,1,1,1,0},

296 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+96,4,0,4,0,1,5},

297 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+96,0,0,4,0,1,7},

298 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+97,6,0,2,0,1,2},

299 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+97,4,0,2,0,1,0},

300 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+97,3,0,1,0,1,0},

301 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+97,0,0,3,0,1,2},

302 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+98,7,0,1,0,1,0},

303 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+98,6,0,1,0,1,0},

304 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+98,4,0,2,0,1,2},

305 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+98,1,0,1,0,1,0},

306 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+98,0,0,1,0,1,1},

307 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+99,0,0,8,0,1,12},

308 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+100,7,0,1,0,1,0},

309 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+100,0,0,6,0,1,0},

310 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+101,7,0,1,0,1,0},

311 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+101,6,0,1,0,1,0},

312 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+101,0,0,6,0,1,0},

313 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+102,0,0,8,0,1,8},

314 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+103,0,0,8,0,1,0},

315 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+104,6,0,1,0,1,1},

316 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+104,5,0,1,0,1,0},

317 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+104,4,0,1,0,1,0},

318 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+105,4,0,3,0,1,0},

319 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+105,3,0,1,0,1,0},

320 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+105,2,0,1,0,1,1},

321 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+105,1,0,1,0,1,1},

322 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+105,0,0,1,0,1,0},

323 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+106,0,0,6,0,1,20},

324 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+107,0,0,8,0,1,0},

325 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+108,5,0,2,0,1,0},

326 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+108,0,0,5,0,1,10},

327 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+109,7,0,1,0,1,1},

328 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+109,6,0,1,0,1,0},

329 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+109,5,0,1,0,1,1},

330 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+109,0,1,5,0,1,2},

331 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+110,7,0,1,0,1,0},

332 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+110,5,0,2,0,1,3},

333 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+110,0,1,5,0,1,4},

334 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+111,0,0,4,1,1,0},

335 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+112,2,0,1,0,0,0},

336 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+112,1,0,1,0,0,0},

337 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+112,0,0,1,0,0,0},

338 {0,
SX1302_REG_TX_TOP_B_BASE_ADDR
+113,3,0,1,1,1,0},

339 {0,
SX1302_REG_GPIO_BASE_ADDR
+0,0,0,4,0,1,0},

340 {0,
SX1302_REG_GPIO_BASE_ADDR
+1,0,0,8,0,1,0},

341 {0,
SX1302_REG_GPIO_BASE_ADDR
+2,0,0,4,0,1,0},

342 {0,
SX1302_REG_GPIO_BASE_ADDR
+3,0,0,8,0,1,0},

343 {0,
SX1302_REG_GPIO_BASE_ADDR
+4,0,0,4,1,1,0},

344 {0,
SX1302_REG_GPIO_BASE_ADDR
+5,0,0,8,1,1,0},

345 {0,
SX1302_REG_GPIO_BASE_ADDR
+6,0,0,4,0,1,0},

346 {0,
SX1302_REG_GPIO_BASE_ADDR
+7,0,0,8,0,1,0},

347 {0,
SX1302_REG_GPIO_BASE_ADDR
+8,0,0,4,0,1,0},

348 {0,
SX1302_REG_GPIO_BASE_ADDR
+9,0,0,4,0,1,0},

349 {0,
SX1302_REG_GPIO_BASE_ADDR
+10,0,0,4,0,1,0},

350 {0,
SX1302_REG_GPIO_BASE_ADDR
+11,0,0,4,0,1,0},

351 {0,
SX1302_REG_GPIO_BASE_ADDR
+12,0,0,4,0,1,0},

352 {0,
SX1302_REG_GPIO_BASE_ADDR
+13,0,0,4,0,1,0},

353 {0,
SX1302_REG_GPIO_BASE_ADDR
+14,0,0,4,0,1,0},

354 {0,
SX1302_REG_GPIO_BASE_ADDR
+15,0,0,4,0,1,0},

355 {0,
SX1302_REG_GPIO_BASE_ADDR
+16,1,0,4,0,1,0},

356 {0,
SX1302_REG_GPIO_BASE_ADDR
+16,0,0,1,0,1,0},

357 {0,
SX1302_REG_GPIO_BASE_ADDR
+17,5,0,1,0,0,0},

358 {0,
SX1302_REG_GPIO_BASE_ADDR
+17,4,0,1,0,0,0},

359 {0,
SX1302_REG_GPIO_BASE_ADDR
+17,3,0,1,0,0,0},

360 {0,
SX1302_REG_GPIO_BASE_ADDR
+17,2,0,1,0,0,0},

361 {0,
SX1302_REG_GPIO_BASE_ADDR
+17,1,0,1,0,0,0},

362 {0,
SX1302_REG_GPIO_BASE_ADDR
+17,0,0,1,0,0,0},

363 {0,
SX1302_REG_GPIO_BASE_ADDR
+18,5,0,1,0,1,0},

364 {0,
SX1302_REG_GPIO_BASE_ADDR
+18,4,0,1,0,1,0},

365 {0,
SX1302_REG_GPIO_BASE_ADDR
+18,3,0,1,0,1,0},

366 {0,
SX1302_REG_GPIO_BASE_ADDR
+18,2,0,1,0,1,0},

367 {0,
SX1302_REG_GPIO_BASE_ADDR
+18,1,0,1,0,1,0},

368 {0,
SX1302_REG_GPIO_BASE_ADDR
+18,0,0,1,0,1,0},

369 {0,
SX1302_REG_GPIO_BASE_ADDR
+19,0,0,1,1,1,0},

370 {0,
SX1302_REG_TIMESTAMP_BASE_ADDR
+0,1,0,1,0,1,0},

371 {0,
SX1302_REG_TIMESTAMP_BASE_ADDR
+0,0,0,1,0,1,0},

372 {0,
SX1302_REG_TIMESTAMP_BASE_ADDR
+1,0,0,8,1,1,0},

373 {0,
SX1302_REG_TIMESTAMP_BASE_ADDR
+2,0,0,8,1,1,0},

374 {0,
SX1302_REG_TIMESTAMP_BASE_ADDR
+3,0,0,8,1,1,0},

375 {0,
SX1302_REG_TIMESTAMP_BASE_ADDR
+4,0,0,8,1,1,0},

376 {0,
SX1302_REG_TIMESTAMP_BASE_ADDR
+5,0,0,8,1,1,0},

377 {0,
SX1302_REG_TIMESTAMP_BASE_ADDR
+6,0,0,8,1,1,0},

378 {0,
SX1302_REG_TIMESTAMP_BASE_ADDR
+7,0,0,8,1,1,0},

379 {0,
SX1302_REG_TIMESTAMP_BASE_ADDR
+8,0,0,8,1,1,0},

380 {0,
SX1302_REG_TIMESTAMP_BASE_ADDR
+9,0,0,8,0,1,0},

381 {0,
SX1302_REG_TIMESTAMP_BASE_ADDR
+10,0,0,8,0,1,0},

382 {0,
SX1302_REG_TIMESTAMP_BASE_ADDR
+11,0,0,8,0,1,0},

383 {0,
SX1302_REG_TIMESTAMP_BASE_ADDR
+12,0,0,8,0,1,0},

384 {0,
SX1302_REG_TIMESTAMP_BASE_ADDR
+13,0,0,8,0,1,0},

385 {0,
SX1302_REG_TIMESTAMP_BASE_ADDR
+14,0,0,8,0,1,0},

386 {0,
SX1302_REG_TIMESTAMP_BASE_ADDR
+15,0,0,8,0,1,0},

387 {0,
SX1302_REG_TIMESTAMP_BASE_ADDR
+16,0,0,8,0,1,0},

388 {0,
SX1302_REG_TIMESTAMP_BASE_ADDR
+17,0,0,1,1,1,0},

389 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+0,0,0,5,0,1,0},

390 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+1,0,0,8,0,1,128},

391 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+2,0,0,5,0,1,1},

392 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+3,0,0,8,0,1,128},

393 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+4,0,0,5,0,1,30},

394 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+5,0,0,8,0,1,128},

395 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+6,0,0,5,0,1,0},

396 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+7,0,0,8,0,1,128},

397 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+8,0,0,5,0,1,0},

398 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+9,0,0,8,0,1,50},

399 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+10,0,0,5,0,1,0},

400 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+11,0,0,8,0,1,60},

401 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+12,0,0,5,0,1,0},

402 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+13,0,0,8,0,1,70},

403 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+14,0,0,5,0,1,0},

404 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+15,0,0,8,0,1,80},

405 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+16,0,0,8,0,1,0},

406 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+17,3,0,5,0,1,7},

407 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+17,0,0,3,0,1,0},

408 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+18,0,0,8,0,1,0},

409 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+19,0,0,8,0,1,0},

410 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+20,0,0,8,0,1,0},

411 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+21,4,0,4,0,1,15},

412 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+21,0,0,4,0,1,0},

413 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+22,0,0,4,0,1,0},

414 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+23,0,0,2,0,1,0},

415 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+24,0,0,8,1,1,0},

416 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+25,4,0,1,0,1,0},

417 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+25,0,0,4,0,1,0},

418 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+26,0,0,1,0,1,1},

419 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+27,0,0,1,1,1,0},

420 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+32,0,0,8,0,1,255},

421 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+33,0,0,8,0,1,0},

422 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+34,0,0,8,0,1,255},

423 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+35,0,0,8,0,1,255},

424 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+36,0,0,8,0,1,255},

425 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+37,6,0,2,0,1,2},

426 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+37,5,0,1,0,1,1},

427 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+37,4,0,1,0,1,1},

428 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+37,2,0,2,0,1,2},

429 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+37,1,0,1,0,1,1},

430 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+37,0,0,1,0,1,1},

431 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+38,7,0,1,0,1,0},

432 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+38,0,0,7,0,1,55},

433 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+39,0,0,8,0,1,11},

434 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+40,0,0,7,0,1,32},

435 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+41,0,0,7,0,1,48},

436 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+42,3,0,3,0,1,5},

437 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+42,1,0,2,0,1,1},

438 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+42,0,0,1,0,1,1},

439 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+43,2,0,3,0,1,5},

440 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+43,0,0,2,0,1,2},

441 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+44,6,0,2,0,1,2},

442 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+44,5,0,1,0,1,1},

443 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+44,4,0,1,0,1,1},

444 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+44,2,0,2,0,1,2},

445 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+44,1,0,1,0,1,1},

446 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+44,0,0,1,0,1,1},

447 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+45,7,0,1,0,1,0},

448 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+45,0,0,7,0,1,55},

449 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+46,0,0,8,0,1,11},

450 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+47,0,0,7,0,1,32},

451 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+48,0,0,7,0,1,48},

452 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+49,3,0,3,0,1,4},

453 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+49,1,0,2,0,1,1},

454 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+49,0,0,1,0,1,1},

455 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+50,2,0,3,0,1,5},

456 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+50,0,0,2,0,1,2},

457 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+51,6,0,2,0,1,2},

458 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+51,5,0,1,0,1,1},

459 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+51,4,0,1,0,1,1},

460 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+51,2,0,2,0,1,2},

461 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+51,1,0,1,0,1,1},

462 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+51,0,0,1,0,1,1},

463 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+52,7,0,1,0,1,0},

464 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+52,0,0,7,0,1,55},

465 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+53,0,0,8,0,1,11},

466 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+54,0,0,7,0,1,32},

467 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+55,0,0,7,0,1,48},

468 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+56,3,0,3,0,1,3},

469 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+56,1,0,2,0,1,1},

470 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+56,0,0,1,0,1,1},

471 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+57,2,0,3,0,1,5},

472 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+57,0,0,2,0,1,2},

473 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+58,6,0,2,0,1,2},

474 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+58,5,0,1,0,1,1},

475 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+58,4,0,1,0,1,1},

476 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+58,2,0,2,0,1,2},

477 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+58,1,0,1,0,1,1},

478 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+58,0,0,1,0,1,1},

479 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+59,7,0,1,0,1,0},

480 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+59,0,0,7,0,1,56},

481 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+60,0,0,8,0,1,11},

482 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+61,0,0,7,0,1,32},

483 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+62,0,0,7,0,1,48},

484 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+63,3,0,3,0,1,3},

485 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+63,1,0,2,0,1,1},

486 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+63,0,0,1,0,1,1},

487 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+64,2,0,3,0,1,5},

488 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+64,0,0,2,0,1,2},

489 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+65,6,0,2,0,1,2},

490 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+65,5,0,1,0,1,1},

491 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+65,4,0,1,0,1,1},

492 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+65,2,0,2,0,1,2},

493 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+65,1,0,1,0,1,1},

494 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+65,0,0,1,0,1,1},

495 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+66,7,0,1,0,1,0},

496 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+66,0,0,7,0,1,58},

497 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+67,0,0,8,0,1,11},

498 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+68,0,0,7,0,1,32},

499 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+69,0,0,7,0,1,48},

500 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+70,3,0,3,0,1,3},

501 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+70,1,0,2,0,1,1},

502 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+70,0,0,1,0,1,1},

503 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+71,2,0,3,0,1,5},

504 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+71,0,0,2,0,1,2},

505 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+72,6,0,2,0,1,2},

506 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+72,5,0,1,0,1,1},

507 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+72,4,0,1,0,1,1},

508 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+72,2,0,2,0,1,2},

509 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+72,1,0,1,0,1,1},

510 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+72,0,0,1,0,1,1},

511 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+73,7,0,1,0,1,0},

512 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+73,0,0,7,0,1,60},

513 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+74,0,0,8,0,1,11},

514 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+75,0,0,7,0,1,32},

515 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+76,0,0,7,0,1,48},

516 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+77,3,0,3,0,1,3},

517 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+77,1,0,2,0,1,1},

518 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+77,0,0,1,0,1,1},

519 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+78,2,0,3,0,1,5},

520 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+78,0,0,2,0,1,2},

521 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+79,6,0,2,0,1,2},

522 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+79,5,0,1,0,1,1},

523 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+79,4,0,1,0,1,1},

524 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+79,2,0,2,0,1,2},

525 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+79,1,0,1,0,1,1},

526 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+79,0,0,1,0,1,1},

527 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+80,7,0,1,0,1,0},

528 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+80,0,0,7,0,1,60},

529 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+81,0,0,8,0,1,11},

530 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+82,0,0,7,0,1,32},

531 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+83,0,0,7,0,1,48},

532 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+84,3,0,3,0,1,3},

533 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+84,1,0,2,0,1,1},

534 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+84,0,0,1,0,1,1},

535 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+85,2,0,3,0,1,5},

536 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+85,0,0,2,0,1,2},

537 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+86,6,0,2,0,1,2},

538 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+86,5,0,1,0,1,1},

539 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+86,4,0,1,0,1,1},

540 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+86,2,0,2,0,1,2},

541 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+86,1,0,1,0,1,1},

542 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+86,0,0,1,0,1,1},

543 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+87,7,0,1,0,1,0},

544 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+87,0,0,7,0,1,60},

545 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+88,0,0,8,0,1,11},

546 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+89,0,0,7,0,1,32},

547 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+90,0,0,7,0,1,48},

548 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+91,3,0,3,0,1,3},

549 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+91,1,0,2,0,1,1},

550 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+91,0,0,1,0,1,1},

551 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+92,2,0,3,0,1,5},

552 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+92,0,0,2,0,1,2},

553 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+93,0,0,1,1,1,0},

554 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+96,4,0,3,0,1,0},

555 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+96,3,0,1,0,1,1},

556 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+96,2,0,1,0,1,0},

557 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+96,1,0,1,0,1,0},

558 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+96,0,0,1,0,1,0},

559 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+97,3,0,3,0,1,1},

560 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+97,0,0,3,0,1,5},

561 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+98,0,0,3,0,1,0},

562 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+99,0,0,8,0,1,0},

563 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+100,0,1,8,0,1,2},

564 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+101,0,1,8,0,1,3},

565 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+102,0,1,8,0,1,2},

566 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+103,0,1,8,0,1,3},

567 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+104,0,1,8,0,1,5},

568 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+105,0,1,8,0,1,8},

569 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+106,0,1,8,0,1,6},

570 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+107,0,1,8,0,1,4},

571 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+108,0,1,8,0,1,2},

572 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+109,0,1,8,0,1,-2},

573 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+110,0,1,8,0,1,-4},

574 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+111,0,1,8,0,1,-3},

575 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+112,0,1,8,0,1,3},

576 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+113,0,1,8,0,1,11},

577 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+114,0,1,8,0,1,19},

578 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+115,0,1,8,0,1,10},

579 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+116,7,0,1,0,1,0},

580 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+116,0,0,7,0,1,0},

581 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+117,4,0,1,0,1,0},

582 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+117,3,0,1,0,1,0},

583 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+117,2,0,1,0,1,1},

584 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+117,0,0,2,0,1,3},

585 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+118,6,0,1,0,1,0},

586 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+118,5,0,1,0,1,1},

587 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+118,3,0,2,0,1,1},

588 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+118,0,0,3,0,1,2},

589 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+119,7,0,1,0,1,0},

590 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+119,6,0,1,0,1,0},

591 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+119,4,0,2,0,1,3},

592 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+119,0,0,3,0,1,1},

593 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+120,6,0,2,0,1,0},

594 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+120,5,0,1,0,1,0},

595 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+120,4,0,1,0,1,0},

596 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+120,3,0,1,0,1,1},

597 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+120,2,0,1,0,1,0},

598 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+120,0,0,2,0,1,3},

599 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+121,0,0,8,0,1,60},

600 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+122,0,0,8,0,1,6},

601 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+123,0,0,8,0,1,25},

602 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+124,0,0,8,0,1,42},

603 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+125,4,0,4,0,1,8},

604 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+125,0,0,1,0,1,0},

605 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+126,6,0,2,0,1,2},

606 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+126,4,0,2,0,1,0},

607 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+126,3,0,1,0,1,0},

608 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+126,0,0,3,0,1,2},

609 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+127,4,0,1,0,0,0},

610 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+127,2,0,2,0,1,1},

611 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+127,1,0,1,0,1,0},

612 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+127,0,0,1,0,1,1},

613 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+128,0,0,8,0,1,12},

614 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+129,7,0,1,0,1,0},

615 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+129,0,0,6,0,1,0},

616 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+130,6,0,1,0,1,0},

617 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+130,0,0,6,0,1,0},

618 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+131,0,0,8,0,1,8},

619 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+132,0,0,8,0,1,0},

620 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+133,3,0,1,0,1,1},

621 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+133,2,0,1,0,1,0},

622 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+133,1,0,1,0,1,0},

623 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+133,0,0,1,0,1,0},

624 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+134,7,0,1,0,1,0},

625 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+134,6,0,1,0,1,0},

626 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+134,5,0,1,0,1,0},

627 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+134,4,0,1,0,1,0},

628 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+134,3,0,1,0,1,0},

629 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+134,2,0,1,0,1,0},

630 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+134,1,0,1,0,1,1},

631 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+134,0,0,1,0,1,1},

632 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+135,4,0,2,0,1,3},

633 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+135,2,0,1,0,1,1},

634 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+135,1,0,1,0,1,0},

635 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+135,0,0,1,0,1,0},

636 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+136,0,0,8,0,1,0},

637 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+137,4,0,1,0,1,1},

638 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+137,0,0,4,0,1,11},

639 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+138,0,1,5,0,1,2},

640 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+139,0,1,5,0,1,4},

641 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+140,0,1,5,0,1,2},

642 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+141,0,1,5,0,1,4},

643 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+142,0,1,5,0,1,2},

644 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+143,0,1,5,0,1,4},

645 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+144,5,0,1,0,1,0},

646 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+144,4,0,1,0,1,1},

647 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+144,3,0,1,0,1,0},

648 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+144,2,0,1,0,1,1},

649 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+144,0,0,2,0,1,3},

650 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+145,7,0,1,0,1,1},

651 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+145,6,0,1,0,1,0},

652 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+145,4,0,2,0,1,0},

653 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+145,2,0,2,0,1,0},

654 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+145,0,0,2,0,1,3},

655 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+146,6,0,2,0,1,1},

656 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+146,3,0,3,0,1,2},

657 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+146,0,0,3,0,1,6},

658 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+147,6,0,2,0,1,3},

659 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+147,3,0,3,0,1,1},

660 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+147,0,0,3,0,1,4},

661 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+148,7,0,1,0,1,0},

662 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+148,4,0,3,0,1,5},

663 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+149,6,0,2,0,1,0},

664 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+149,4,0,2,0,1,0},

665 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+149,2,0,2,0,1,0},

666 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+149,0,0,2,0,1,0},

667 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+150,6,0,2,0,1,0},

668 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+150,4,0,2,0,1,0},

669 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+150,2,0,2,0,1,0},

670 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+150,0,0,2,0,1,0},

671 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+151,4,0,3,0,1,7},

672 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+151,0,0,3,0,1,4},

673 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+152,4,0,3,0,1,0},

674 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+152,0,0,3,0,1,0},

675 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+153,7,0,1,0,1,1},

676 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+153,6,0,1,0,1,0},

677 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+153,4,0,2,0,1,0},

678 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+153,2,0,2,0,1,0},

679 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+153,0,0,2,0,1,3},

680 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+154,6,0,2,0,1,1},

681 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+154,3,0,3,0,1,2},

682 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+154,0,0,3,0,1,6},

683 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+155,6,0,2,0,1,3},

684 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+155,3,0,3,0,1,1},

685 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+155,0,0,3,0,1,4},

686 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+156,7,0,1,0,1,0},

687 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+156,4,0,3,0,1,5},

688 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+157,6,0,2,0,1,0},

689 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+157,4,0,2,0,1,0},

690 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+157,2,0,2,0,1,0},

691 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+157,0,0,2,0,1,0},

692 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+158,6,0,2,0,1,0},

693 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+158,4,0,2,0,1,0},

694 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+158,2,0,2,0,1,0},

695 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+158,0,0,2,0,1,0},

696 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+159,4,0,3,0,1,7},

697 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+159,0,0,3,0,1,4},

698 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+160,0,0,4,0,1,9},

699 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+161,0,0,8,0,1,112},

700 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+162,0,0,3,0,1,3},

701 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+163,5,0,1,0,1,0},

702 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+163,4,0,1,0,1,0},

703 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+163,3,0,1,0,1,1},

704 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+163,2,0,1,0,1,0},

705 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+163,1,0,1,0,1,0},

706 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+163,0,0,1,0,1,1},

707 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+164,0,0,8,0,1,33},

708 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+165,6,0,2,0,1,3},

709 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+165,4,0,2,0,1,3},

710 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+165,2,0,2,0,1,3},

711 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+165,0,0,2,0,1,3},

712 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+166,6,0,2,0,1,3},

713 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+166,4,0,2,0,1,3},

714 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+166,2,0,2,0,1,3},

715 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+166,0,0,2,0,1,3},

716 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+167,6,0,2,0,1,3},

717 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+167,4,0,2,0,1,3},

718 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+167,2,0,2,0,1,3},

719 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+167,0,0,2,0,1,3},

720 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+168,6,0,2,0,1,3},

721 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+168,4,0,2,0,1,3},

722 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+168,2,0,2,0,1,3},

723 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+168,0,0,2,0,1,3},

724 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+169,7,0,1,0,1,0},

725 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+169,4,0,3,0,1,4},

726 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+170,4,0,3,0,1,5},

727 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+170,0,0,4,0,1,3},

728 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+171,5,0,2,0,1,1},

729 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+171,4,0,1,0,1,0},

730 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+171,0,0,4,0,1,8},

731 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+172,0,0,7,0,1,32},

732 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+173,0,0,7,0,1,48},

733 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+174,4,0,3,0,1,5},

734 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+174,0,0,3,0,1,3},

735 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+175,6,0,1,0,1,0},

736 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+175,4,0,2,0,1,2},

737 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+175,2,0,1,0,1,1},

738 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+175,0,0,2,0,1,1},

739 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+176,7,0,1,0,1,0},

740 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+176,0,0,7,0,1,64},

741 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+177,6,0,2,0,1,2},

742 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+177,4,0,2,0,1,2},

743 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+177,3,0,1,0,1,1},

744 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+177,2,0,1,0,1,1},

745 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+177,1,0,1,0,1,1},

746 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+177,0,0,1,0,1,1},

747 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+178,0,0,8,0,1,11},

748 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+179,4,0,1,0,1,0},

749 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+179,3,0,1,0,1,0},

750 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+179,0,0,3,0,1,7},

751 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+180,0,0,8,1,1,0},

752 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+181,0,0,8,1,1,0},

753 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+182,4,0,4,1,1,0},

754 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+182,0,0,4,1,1,0},

755 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+183,6,0,2,0,1,2},

756 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+183,4,0,2,0,1,3},

757 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+183,3,0,1,0,1,1},

758 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+183,0,0,3,0,1,0},

759 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+184,0,0,8,0,1,127},

760 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+185,6,0,2,0,1,0},

761 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+185,4,0,2,0,1,0},

762 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+185,2,0,2,0,1,0},

763 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+185,0,0,2,0,1,0},

764 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+186,6,0,2,0,1,1},

765 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+186,4,0,2,0,1,1},

766 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+186,2,0,2,0,1,0},

767 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+186,0,0,2,0,1,0},

768 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+187,0,0,8,0,1,85},

769 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+188,0,0,8,0,1,85},

770 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+189,0,0,8,0,1,85},

771 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+190,0,0,8,0,1,85},

772 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+191,0,0,1,1,1,0},

773 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+192,4,0,1,0,1,0},

774 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+192,3,0,1,0,1,0},

775 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+192,2,0,1,0,1,0},

776 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+192,1,0,1,0,1,0},

777 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+192,0,0,1,0,1,0},

778 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+193,0,0,8,0,1,255},

779 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+194,0,0,5,0,1,0},

780 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+195,0,0,8,0,1,21},

781 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+196,0,0,4,1,1,0},

782 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+197,0,0,8,1,1,0},

783 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+198,0,0,4,1,1,0},

784 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+199,0,0,8,1,1,0},

785 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+200,0,0,5,1,1,0},

786 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+201,0,0,8,1,1,0},

787 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+202,0,0,8,1,1,0},

788 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+203,0,0,8,1,1,0},

789 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+204,0,0,8,1,1,0},

790 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+205,0,0,8,1,1,0},

791 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+206,0,0,8,1,1,0},

792 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+207,0,0,8,1,1,0},

793 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+208,0,0,8,1,1,0},

794 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+209,0,0,8,1,1,0},

795 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+210,0,0,8,1,1,0},

796 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+211,0,0,2,1,1,0},

797 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+212,0,0,8,1,1,0},

798 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+213,0,0,8,1,1,0},

799 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+214,0,0,2,1,1,0},

800 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+215,0,0,8,1,1,0},

801 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+216,0,0,8,1,1,0},

802 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+217,0,0,2,0,1,1},

803 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+218,0,0,8,1,1,0},

804 {0,
SX1302_REG_RX_TOP_BASE_ADDR
+219,0,0,1,1,1,0},

805 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+0,5,0,1,0,1,1},

806 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+0,4,0,1,0,1,0},

807 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+0,3,0,1,0,1,0},

808 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+0,2,0,1,0,1,1},

809 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+0,1,0,1,0,1,0},

810 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+0,0,0,1,1,1,0},

811 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+1,0,0,8,1,1,0},

812 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+7,5,0,1,0,1,0},

813 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+7,4,0,1,0,1,0},

814 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+7,3,0,1,0,1,0},

815 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+7,2,0,1,0,1,0},

816 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+7,1,0,1,0,1,0},

817 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+7,0,0,1,0,1,1},

818 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+8,0,0,8,0,1,0},

819 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+9,0,0,8,0,1,0},

820 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+10,0,0,8,0,1,0},

821 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+11,0,0,8,0,1,0},

822 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+12,0,0,8,0,1,0},

823 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+13,0,0,8,1,1,0},

824 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+14,0,0,8,1,1,0},

825 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+15,0,0,8,1,1,0},

826 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+16,0,0,8,1,1,0},

827 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+17,0,0,8,1,1,0},

828 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+18,0,0,8,1,1,0},

829 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+19,0,0,8,1,1,0},

830 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+20,0,0,8,1,1,0},

831 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+21,0,0,8,1,1,0},

832 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+22,0,0,8,1,1,0},

833 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+23,0,0,8,1,1,0},

834 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+24,0,0,8,1,1,0},

835 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+25,0,0,8,1,1,0},

836 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+26,0,0,8,1,1,0},

837 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+27,0,0,8,1,1,0},

838 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+28,0,0,8,1,1,0},

839 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+29,4,0,4,0,1,0},

840 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+29,0,0,4,0,1,0},

841 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+30,4,0,4,0,1,0},

842 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+30,0,0,4,0,1,0},

843 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+31,4,0,4,0,1,0},

844 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+31,0,0,4,0,1,0},

845 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+32,4,0,4,0,1,0},

846 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+32,0,0,4,0,1,0},

847 {0,
SX1302_REG_ARB_MCU_BASE_ADDR
+33,0,0,1,1,1,0},

848 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+0,1,0,1,0,1,0},

849 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+0,0,0,1,0,1,0},

850 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+1,5,0,1,0,1,0},

851 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+1,4,0,1,0,1,0},

852 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+1,0,0,4,0,1,0},

853 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+2,0,0,8,0,1,0},

854 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+3,0,0,8,0,1,0},

855 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+4,0,0,8,1,1,0},

856 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+5,0,0,8,1,1,0},

857 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+6,0,0,4,1,1,0},

858 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+7,0,0,5,0,1,0},

859 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+8,0,0,5,0,1,0},

860 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+9,0,0,6,0,1,0},

861 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+10,0,0,6,0,1,0},

862 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+11,0,0,6,0,1,0},

863 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+12,0,0,6,0,1,0},

864 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+13,0,0,6,1,1,0},

865 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+14,5,0,1,0,1,0},

866 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+14,4,0,1,0,1,0},

867 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+14,0,0,4,0,1,0},

868 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+15,0,0,8,0,1,0},

869 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+16,0,0,8,0,1,0},

870 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+17,0,0,8,1,1,0},

871 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+18,0,0,8,1,1,0},

872 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+19,0,0,4,1,1,0},

873 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+20,0,0,5,0,1,0},

874 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+21,0,0,5,0,1,0},

875 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+22,0,0,6,0,1,0},

876 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+23,0,0,6,0,1,0},

877 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+24,0,0,6,0,1,0},

878 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+25,0,0,6,0,1,0},

879 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+26,0,0,6,1,1,0},

880 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+27,7,0,1,1,1,0},

881 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+27,6,0,1,1,1,0},

882 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+27,4,0,2,0,1,0},

883 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+27,3,0,1,0,1,0},

884 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+27,2,0,1,0,1,0},

885 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+27,1,0,1,0,1,0},

886 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+27,0,0,1,0,1,0},

887 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+28,0,0,8,0,1,0},

888 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+29,0,0,8,1,1,0},

889 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+30,0,0,8,1,1,0},

890 {0,
SX1302_REG_RADIO_FE_BASE_ADDR
+31,0,0,1,1,1,0},

891 {0,
SX1302_REG_OTP_BASE_ADDR
+0,0,0,8,0,1,0},

892 {0,
SX1302_REG_OTP_BASE_ADDR
+1,0,0,8,1,1,0},

893 {0,
SX1302_REG_OTP_BASE_ADDR
+2,4,0,4,1,1,0},

894 {0,
SX1302_REG_OTP_BASE_ADDR
+2,0,0,1,1,1,0},

895 {0,
SX1302_REG_OTP_BASE_ADDR
+3,0,0,2,0,1,0},

896 {0,
SX1302_REG_OTP_BASE_ADDR
+4,0,0,3,0,1,0},

897 {0,
SX1302_REG_OTP_BASE_ADDR
+5,4,0,4,0,1,0},

898 {0,
SX1302_REG_OTP_BASE_ADDR
+5,3,0,1,0,1,0},

899 {0,
SX1302_REG_OTP_BASE_ADDR
+5,2,0,1,0,1,0},

900 {0,
SX1302_REG_OTP_BASE_ADDR
+5,1,0,1,0,1,0},

901 {0,
SX1302_REG_OTP_BASE_ADDR
+5,0,0,1,0,1,0},

902 {0,
SX1302_REG_OTP_BASE_ADDR
+6,2,0,1,0,1,0},

903 {0,
SX1302_REG_OTP_BASE_ADDR
+6,1,0,1,0,1,0},

904 {0,
SX1302_REG_OTP_BASE_ADDR
+6,0,0,1,0,1,0},

905 {0,
SX1302_REG_OTP_BASE_ADDR
+7,0,0,1,1,1,0},

906 {0,
SX1302_REG_OTP_BASE_ADDR
+8,0,0,8,0,1,255},

907 {0,
SX1302_REG_OTP_BASE_ADDR
+9,0,0,8,0,1,255},

908 {0,
SX1302_REG_OTP_BASE_ADDR
+10,0,0,8,0,1,255},

909 {0,
SX1302_REG_OTP_BASE_ADDR
+11,0,0,1,0,1,1},

910 {0,
SX1302_REG_OTP_BASE_ADDR
+12,0,0,1,1,1,0},

911 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+0,0,0,5,0,1,0},

912 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+1,0,0,8,0,1,128},

913 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+2,0,0,1,0,1,0},

914 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+3,4,0,3,0,1,0},

915 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+3,3,0,1,0,1,1},

916 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+3,2,0,1,0,1,0},

917 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+3,1,0,1,0,1,0},

918 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+3,0,0,1,0,1,0},

919 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+4,3,0,3,0,1,1},

920 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+4,0,0,3,0,1,5},

921 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+5,0,0,3,0,1,0},

922 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+6,0,0,8,0,1,0},

923 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+7,0,1,8,0,1,2},

924 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+8,0,1,8,0,1,3},

925 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+9,0,1,8,0,1,2},

926 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+10,0,1,8,0,1,3},

927 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+11,0,1,8,0,1,5},

928 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+12,0,1,8,0,1,8},

929 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+13,0,1,8,0,1,6},

930 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+14,0,1,8,0,1,4},

931 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+15,0,1,8,0,1,2},

932 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+16,0,1,8,0,1,-2},

933 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+17,0,1,8,0,1,-4},

934 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+18,0,1,8,0,1,-3},

935 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+19,0,1,8,0,1,3},

936 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+20,0,1,8,0,1,11},

937 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+21,0,1,8,0,1,19},

938 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+22,0,1,8,0,1,10},

939 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+23,7,0,1,0,1,0},

940 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+23,0,0,7,0,1,0},

941 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+24,4,0,1,0,1,0},

942 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+24,3,0,1,0,1,0},

943 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+24,2,0,1,0,1,1},

944 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+24,0,0,2,0,1,3},

945 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+25,6,0,1,0,1,0},

946 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+25,5,0,1,0,1,1},

947 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+25,3,0,2,0,1,1},

948 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+25,0,0,3,0,1,2},

949 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+26,7,0,1,0,1,0},

950 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+26,6,0,1,0,1,0},

951 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+26,4,0,2,0,1,3},

952 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+26,0,0,3,0,1,1},

953 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+27,6,0,2,0,1,0},

954 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+27,5,0,1,0,1,0},

955 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+27,4,0,1,0,1,0},

956 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+27,3,0,1,0,1,1},

957 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+27,2,0,1,0,1,0},

958 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+27,0,0,2,0,1,3},

959 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+28,0,0,8,0,1,60},

960 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+29,0,0,8,0,1,6},

961 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+30,0,0,8,0,1,25},

962 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+31,0,0,8,0,1,42},

963 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+32,4,0,4,0,1,8},

964 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+32,0,0,1,0,1,0},

965 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+33,4,0,4,0,1,4},

966 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+33,0,0,4,0,1,7},

967 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+34,6,0,2,0,1,2},

968 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+34,4,0,2,0,1,0},

969 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+34,3,0,1,0,1,0},

970 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+34,0,0,3,0,1,2},

971 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+35,5,0,1,0,1,0},

972 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+35,4,0,1,0,1,0},

973 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+35,2,0,2,0,1,1},

974 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+35,1,0,1,0,1,0},

975 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+35,0,0,1,0,1,1},

976 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+36,0,0,8,0,1,12},

977 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+37,7,0,1,0,1,0},

978 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+37,0,0,6,0,1,0},

979 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+38,6,0,1,0,1,0},

980 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+38,0,0,6,0,1,0},

981 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+39,0,0,8,0,1,8},

982 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+40,0,0,8,0,1,0},

983 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+41,3,0,1,0,1,1},

984 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+41,2,0,1,0,1,0},

985 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+41,1,0,1,0,1,0},

986 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+41,0,0,1,0,1,0},

987 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+42,4,0,2,0,1,3},

988 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+42,2,0,1,0,1,1},

989 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+42,1,0,1,0,1,0},

990 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+42,0,0,1,0,1,0},

991 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+43,0,0,8,0,1,0},

992 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+44,5,0,2,0,1,2},

993 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+44,0,0,5,0,1,22},

994 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+45,5,0,1,0,1,1},

995 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+45,4,0,1,0,1,1},

996 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+45,0,0,4,0,1,11},

997 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+46,0,1,5,0,1,2},

998 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+47,0,1,5,0,1,4},

999 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+48,5,0,1,0,1,0},

1000 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+48,4,0,1,0,1,1},

1001 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+48,3,0,1,0,1,0},

1002 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+48,2,0,1,0,1,1},

1003 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+48,0,0,2,0,1,3},

1004 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+49,7,0,1,0,1,1},

1005 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+49,6,0,1,0,1,0},

1006 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+49,4,0,2,0,1,0},

1007 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+49,2,0,2,0,1,0},

1008 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+49,0,0,2,0,1,3},

1009 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+50,6,0,2,0,1,2},

1010 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+50,3,0,3,0,1,2},

1011 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+50,0,0,3,0,1,4},

1012 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+51,6,0,2,0,1,0},

1013 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+51,3,0,3,0,1,1},

1014 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+51,0,0,3,0,1,4},

1015 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+52,7,0,1,0,1,0},

1016 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+52,4,0,3,0,1,5},

1017 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+52,0,0,2,0,1,3},

1018 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+53,4,0,3,0,1,0},

1019 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+53,0,0,3,0,1,0},

1020 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+54,0,0,4,0,1,9},

1021 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+55,0,0,8,0,1,112},

1022 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+56,0,0,3,0,1,3},

1023 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+57,5,0,1,0,1,0},

1024 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+57,4,0,1,0,1,0},

1025 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+57,3,0,1,0,1,1},

1026 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+57,2,0,1,0,1,0},

1027 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+57,1,0,1,0,1,0},

1028 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+57,0,0,1,0,1,1},

1029 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+58,0,0,8,0,1,33},

1030 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+59,7,0,1,0,1,0},

1031 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+59,4,0,3,0,1,4},

1032 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+59,0,0,2,0,1,3},

1033 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+60,4,0,3,0,1,5},

1034 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+60,0,0,4,0,1,3},

1035 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+61,5,0,2,0,1,1},

1036 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+61,4,0,1,0,1,0},

1037 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+61,0,0,4,0,1,8},

1038 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+62,0,0,7,0,1,24},

1039 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+63,0,0,7,0,1,48},

1040 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+64,4,0,3,0,1,7},

1041 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+64,0,0,3,0,1,7},

1042 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+65,7,0,1,0,1,0},

1043 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+65,4,0,2,0,1,2},

1044 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+65,2,0,1,0,1,1},

1045 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+65,0,0,2,0,1,1},

1046 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+66,7,0,1,0,1,0},

1047 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+66,0,0,7,0,1,55},

1048 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+67,6,0,2,0,1,2},

1049 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+67,4,0,2,0,1,2},

1050 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+67,3,0,1,0,1,1},

1051 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+67,2,0,1,0,1,1},

1052 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+67,1,0,1,0,1,1},

1053 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+67,0,0,1,0,1,1},

1054 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+68,0,0,8,0,1,11},

1055 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+69,4,0,1,0,1,0},

1056 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+69,3,0,1,0,1,0},

1057 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+69,0,0,3,0,1,7},

1058 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+70,6,0,2,0,1,1},

1059 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+70,4,0,2,0,1,1},

1060 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+70,2,0,2,0,1,1},

1061 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+70,0,0,2,0,1,1},

1062 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+71,0,0,1,1,1,0},

1063 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+80,0,0,5,0,1,0},

1064 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+81,0,0,8,0,1,128},

1065 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+82,4,0,1,0,1,0},

1066 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+82,2,0,2,0,1,0},

1067 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+82,1,0,1,0,1,0},

1068 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+82,0,0,1,0,1,0},

1069 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+83,6,0,2,0,1,0},

1070 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+83,3,0,3,0,1,0},

1071 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+83,0,0,3,0,1,0},

1072 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+84,3,0,1,0,1,0},

1073 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+84,2,0,1,0,1,1},

1074 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+84,1,0,1,0,1,0},

1075 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+84,0,0,1,0,1,0},

1076 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+85,5,0,3,0,1,4},

1077 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+85,0,0,5,0,1,0},

1078 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+86,0,0,8,0,1,0},

1079 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+87,0,0,8,0,1,0},

1080 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+88,0,0,8,0,1,0},

1081 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+89,0,0,2,0,1,0},

1082 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+90,0,0,8,0,1,0},

1083 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+91,0,0,8,0,1,0},

1084 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+92,0,0,8,0,1,0},

1085 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+93,0,0,8,0,1,0},

1086 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+94,0,0,8,0,1,0},

1087 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+95,0,0,8,0,1,0},

1088 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+96,0,0,8,0,1,0},

1089 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+97,0,0,8,0,1,0},

1090 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+98,0,0,8,0,1,0},

1091 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+99,0,0,8,0,1,0},

1092 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+100,0,0,8,0,1,0},

1093 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+101,0,0,4,0,1,4},

1094 {0,
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR
+102,0,0,1,1,1,0},

1095 {0,
SX1302_REG_CAPTURE_RAM_BASE_ADDR
+0,4,0,1,0,1,0},

1096 {0,
SX1302_REG_CAPTURE_RAM_BASE_ADDR
+0,3,0,1,0,1,0},

1097 {0,
SX1302_REG_CAPTURE_RAM_BASE_ADDR
+0,2,0,1,0,1,0},

1098 {0,
SX1302_REG_CAPTURE_RAM_BASE_ADDR
+0,1,0,1,0,1,0},

1099 {0,
SX1302_REG_CAPTURE_RAM_BASE_ADDR
+0,0,0,1,0,1,0},

1100 {0,
SX1302_REG_CAPTURE_RAM_BASE_ADDR
+1,0,0,5,0,1,0},

1101 {0,
SX1302_REG_CAPTURE_RAM_BASE_ADDR
+2,0,0,5,0,1,0},

1102 {0,
SX1302_REG_CAPTURE_RAM_BASE_ADDR
+3,0,0,8,0,1,0},

1103 {0,
SX1302_REG_CAPTURE_RAM_BASE_ADDR
+4,0,0,8,0,1,0},

1104 {0,
SX1302_REG_CAPTURE_RAM_BASE_ADDR
+5,0,0,1,1,1,0},

1105 {0,
SX1302_REG_CAPTURE_RAM_BASE_ADDR
+6,0,0,8,1,1,0},

1106 {0,
SX1302_REG_CAPTURE_RAM_BASE_ADDR
+7,0,0,4,1,1,0},

1107 {0,
SX1302_REG_CAPTURE_RAM_BASE_ADDR
+8,0,0,2,0,1,2},

1108 {0,
SX1302_REG_CAPTURE_RAM_BASE_ADDR
+9,0,0,1,1,1,0},

1125 
	$lgw_sx1302_c⁄√˘
(c⁄° * 
•idev_∑th
) {

1126 
•i_°©
 = 
LGW_SPI_SUCCESS
;

1127 
uöt8_t
 
u
 = 0;

1130 i‡(
•idev_∑th
 =
NULL
) {

1131 
	`DEBUG_MSG
("ERROR: SPIDEV PATH IS NOT SET\n");

1132  
LGW_REG_ERROR
;

1134 i‡(
lgw_•i_èrgë
 !
NULL
) {

1135 
	`DEBUG_MSG
("WARNING: concentrator wasálready connected\n");

1136 
	`lgw_•i_˛o£
(
lgw_•i_èrgë
);

1140 
•i_°©
 = 
	`lgw_•i_›í
(
•idev_∑th
, &
lgw_•i_èrgë
);

1141 i‡(
•i_°©
 !
LGW_SPI_SUCCESS
) {

1142 
	`DEBUG_MSG
("ERROR CONNECTING CONCENTRATOR\n");

1143  
LGW_REG_ERROR
;

1147 
•i_°©
 = 
	`lgw_•i_r
(
lgw_•i_èrgë
, 
LGW_SPI_MUX_TARGET_SX1302
, 
sx1302_ªgs
[
SX1302_REG_COMMON_VERSION_VERSION
].
addr
, &
u
);

1148 i‡(
•i_°©
 !
LGW_SPI_SUCCESS
) {

1149 
	`DEBUG_MSG
("ERROR READING CHIP VERSION REGISTER\n");

1150  
LGW_REG_ERROR
;

1152 i‡(
u
 !
sx1302_ªgs
[
SX1302_REG_COMMON_VERSION_VERSION
].
dÊt
) {

1153 
	`DEBUG_PRINTF
("ERROR: NOT EXPECTED CHIP VERSION (v%u)\n", 
u
);

1154  
LGW_REG_ERROR
;

1156 
	`DEBUG_PRINTF
("NŸe: chù vîsi⁄ i†0x%02X (v%u.%u)\n", 
u
, (u >> 4) & 0x0F, u & 0x0F) ;

1158 
	`DEBUG_MSG
("Note: success connectingÅhe concentrator\n");

1159  
LGW_REG_SUCCESS
;

1160 
	}
}

1165 
	$lgw_sx1302_disc⁄√˘
() {

1166 i‡(
lgw_•i_èrgë
 !
NULL
) {

1167 
	`lgw_•i_˛o£
(
lgw_•i_èrgë
);

1168 
lgw_•i_èrgë
 = 
NULL
;

1169 
	`DEBUG_MSG
("Note: success disconnectingÅhe concentrator\n");

1170  
LGW_REG_SUCCESS
;

1172 
	`DEBUG_MSG
("WARNING: concentrator wasálready disconnected\n");

1173  
LGW_REG_ERROR
;

1175 
	}
}

1180 
	$lgw_sx1302_ªg_w
(
uöt16_t
 
ªgi°î_id
, 
öt32_t
 
ªg_vÆue
) {

1181 
•i_°©
 = 
LGW_SPI_SUCCESS
;

1182 
lgw_ªg_s
 
r
;

1185 i‡(
ªgi°î_id
 >
LGW_SX1302_TOTALREGS
) {

1186 
	`DEBUG_MSG
("ERROR: REGISTER NUMBER OUT OF DEFINED RANGE\n");

1187  
LGW_REG_ERROR
;

1191 i‡(
lgw_•i_èrgë
 =
NULL
) {

1192 
	`DEBUG_MSG
("ERROR: CONCENTRATOR UNCONNECTED\n");

1193  
LGW_REG_ERROR
;

1197 
r
 = 
sx1302_ªgs
[
ªgi°î_id
];

1200 i‡(
r
.
rd⁄
 == 1){

1201 
	`DEBUG_MSG
("ERROR: TRYING TO WRITE A READ-ONLY REGISTER\n");

1202  
LGW_REG_ERROR
;

1205 
•i_°©
 +
	`ªg_w_Æign32
(
lgw_•i_èrgë
, 
LGW_SPI_MUX_TARGET_SX1302
, 
r
, 
ªg_vÆue
);

1207 i‡(
•i_°©
 !
LGW_SPI_SUCCESS
) {

1208 
	`DEBUG_MSG
("ERROR: SPI ERROR DURING REGISTER WRITE\n");

1209  
LGW_REG_ERROR
;

1211  
LGW_REG_SUCCESS
;

1213 
	}
}

1218 
	$lgw_sx1302_ªg_r
(
uöt16_t
 
ªgi°î_id
, 
öt32_t
 *
ªg_vÆue
) {

1219 
•i_°©
 = 
LGW_SPI_SUCCESS
;

1220 
lgw_ªg_s
 
r
;

1223 
	`CHECK_NULL
(
ªg_vÆue
);

1224 i‡(
ªgi°î_id
 >
LGW_SX1302_TOTALREGS
) {

1225 
	`DEBUG_MSG
("ERROR: REGISTER NUMBER OUT OF DEFINED RANGE\n");

1226  
LGW_REG_ERROR
;

1230 i‡(
lgw_•i_èrgë
 =
NULL
) {

1231 
	`DEBUG_MSG
("ERROR: CONCENTRATOR UNCONNECTED\n");

1232  
LGW_REG_ERROR
;

1236 
r
 = 
sx1302_ªgs
[
ªgi°î_id
];

1238 
•i_°©
 +
	`ªg_r_Æign32
(
lgw_•i_èrgë
, 
LGW_SPI_MUX_TARGET_SX1302
, 
r
, 
ªg_vÆue
);

1240 i‡(
•i_°©
 !
LGW_SPI_SUCCESS
) {

1241 
	`DEBUG_MSG
("ERROR: SPI ERROR DURING REGISTER WRITE\n");

1242  
LGW_REG_ERROR
;

1244  
LGW_REG_SUCCESS
;

1246 
	}
}

1251 
	$lgw_sx1302_ªg_wb
(
uöt16_t
 
ªgi°î_id
, 
uöt8_t
 *
d©a
, uöt16_à
size
) {

1252 
•i_°©
 = 
LGW_SPI_SUCCESS
;

1253 
lgw_ªg_s
 
r
;

1256 
	`CHECK_NULL
(
d©a
);

1257 i‡(
size
 == 0) {

1258 
	`DEBUG_MSG
("ERROR: BURST OF NULL LENGTH\n");

1259  
LGW_REG_ERROR
;

1261 i‡(
ªgi°î_id
 >
LGW_SX1302_TOTALREGS
) {

1262 
	`DEBUG_MSG
("ERROR: REGISTER NUMBER OUT OF DEFINED RANGE\n");

1263  
LGW_REG_ERROR
;

1267 i‡(
lgw_•i_èrgë
 =
NULL
) {

1268 
	`DEBUG_MSG
("ERROR: CONCENTRATOR UNCONNECTED\n");

1269  
LGW_REG_ERROR
;

1273 
r
 = 
sx1302_ªgs
[
ªgi°î_id
];

1276 i‡(
r
.
rd⁄
 == 1){

1277 
	`DEBUG_MSG
("ERROR: TRYING TO BURST WRITE A READ-ONLY REGISTER\n");

1278  
LGW_REG_ERROR
;

1282 
•i_°©
 +
	`lgw_•i_wb
(
lgw_•i_èrgë
, 
LGW_SPI_MUX_TARGET_SX1302
, 
r
.
addr
, 
d©a
, 
size
);

1284 i‡(
•i_°©
 !
LGW_SPI_SUCCESS
) {

1285 
	`DEBUG_MSG
("ERROR: SPI ERROR DURING REGISTER BURST WRITE\n");

1286  
LGW_REG_ERROR
;

1288  
LGW_REG_SUCCESS
;

1290 
	}
}

1295 
	$lgw_sx1302_ªg_rb
(
uöt16_t
 
ªgi°î_id
, 
uöt8_t
 *
d©a
, uöt16_à
size
) {

1296 
•i_°©
 = 
LGW_SPI_SUCCESS
;

1297 
lgw_ªg_s
 
r
;

1300 
	`CHECK_NULL
(
d©a
);

1301 i‡(
size
 == 0) {

1302 
	`DEBUG_MSG
("ERROR: BURST OF NULL LENGTH\n");

1303  
LGW_REG_ERROR
;

1305 i‡(
ªgi°î_id
 >
LGW_SX1302_TOTALREGS
) {

1306 
	`DEBUG_MSG
("ERROR: REGISTER NUMBER OUT OF DEFINED RANGE\n");

1307  
LGW_REG_ERROR
;

1311 i‡(
lgw_•i_èrgë
 =
NULL
) {

1312 
	`DEBUG_MSG
("ERROR: CONCENTRATOR UNCONNECTED\n");

1313  
LGW_REG_ERROR
;

1317 
r
 = 
sx1302_ªgs
[
ªgi°î_id
];

1320 
•i_°©
 +
	`lgw_•i_rb
(
lgw_•i_èrgë
, 
LGW_SPI_MUX_TARGET_SX1302
, 
r
.
addr
, 
d©a
, 
size
);

1322 i‡(
•i_°©
 !
LGW_SPI_SUCCESS
) {

1323 
	`DEBUG_MSG
("ERROR: SPI ERROR DURING REGISTER BURST READ\n");

1324  
LGW_REG_ERROR
;

1326  
LGW_REG_SUCCESS
;

1328 
	}
}

	@hal/sx1302hal/loragw_reg_sx1302.h

19 #i‚de‡
_LORAGW_REG_SX1302_H


20 
	#_LORAGW_REG_SX1302_H


	)

25 
	~<°döt.h
>

26 
	~<°dboﬁ.h
>

28 
	~"c⁄fig.h
"

36 
	#SX1302_REG_COMMON_PAGE_PAGE
 0

	)

37 
	#SX1302_REG_COMMON_CTRL0_CLK32_RIF_CTRL
 1

	)

38 
	#SX1302_REG_COMMON_CTRL0_HOST_RADIO_CTRL
 2

	)

39 
	#SX1302_REG_COMMON_CTRL0_RADIO_MISC_EN
 3

	)

40 
	#SX1302_REG_COMMON_CTRL0_SX1261_MODE_RADIO_B
 4

	)

41 
	#SX1302_REG_COMMON_CTRL0_SX1261_MODE_RADIO_A
 5

	)

42 
	#SX1302_REG_COMMON_CTRL1_SWAP_IQ_RADIO_B
 6

	)

43 
	#SX1302_REG_COMMON_CTRL1_SAMPLING_EDGE_RADIO_B
 7

	)

44 
	#SX1302_REG_COMMON_CTRL1_SWAP_IQ_RADIO_A
 8

	)

45 
	#SX1302_REG_COMMON_CTRL1_SAMPLING_EDGE_RADIO_A
 9

	)

46 
	#SX1302_REG_COMMON_SPI_DIV_RATIO_SPI_HALF_PERIOD
 10

	)

47 
	#SX1302_REG_COMMON_RADIO_SELECT_RADIO_SELECT
 11

	)

48 
	#SX1302_REG_COMMON_GEN_GLOBAL_EN
 12

	)

49 
	#SX1302_REG_COMMON_GEN_FSK_MODEM_ENABLE
 13

	)

50 
	#SX1302_REG_COMMON_GEN_CONCENTRATOR_MODEM_ENABLE
 14

	)

51 
	#SX1302_REG_COMMON_GEN_MBWSSF_MODEM_ENABLE
 15

	)

52 
	#SX1302_REG_COMMON_VERSION_VERSION
 16

	)

53 
	#SX1302_REG_COMMON_DUMMY_DUMMY
 17

	)

54 
	#SX1302_REG_AGC_MCU_CTRL_CLK_EN
 18

	)

55 
	#SX1302_REG_AGC_MCU_CTRL_FORCE_HOST_FE_CTRL
 19

	)

56 
	#SX1302_REG_AGC_MCU_CTRL_MCU_CLEAR
 20

	)

57 
	#SX1302_REG_AGC_MCU_CTRL_HOST_PROG
 21

	)

58 
	#SX1302_REG_AGC_MCU_CTRL_PARITY_ERROR
 22

	)

59 
	#SX1302_REG_AGC_MCU_MCU_AGC_STATUS_MCU_AGC_STATUS
 23

	)

60 
	#SX1302_REG_AGC_MCU_PA_GAIN_PA_B_GAIN
 24

	)

61 
	#SX1302_REG_AGC_MCU_PA_GAIN_PA_A_GAIN
 25

	)

62 
	#SX1302_REG_AGC_MCU_RF_EN_A_RADIO_RST
 26

	)

63 
	#SX1302_REG_AGC_MCU_RF_EN_A_RADIO_EN
 27

	)

64 
	#SX1302_REG_AGC_MCU_RF_EN_A_PA_EN
 28

	)

65 
	#SX1302_REG_AGC_MCU_RF_EN_A_LNA_EN
 29

	)

66 
	#SX1302_REG_AGC_MCU_RF_EN_B_RADIO_RST
 30

	)

67 
	#SX1302_REG_AGC_MCU_RF_EN_B_RADIO_EN
 31

	)

68 
	#SX1302_REG_AGC_MCU_RF_EN_B_PA_EN
 32

	)

69 
	#SX1302_REG_AGC_MCU_RF_EN_B_LNA_EN
 33

	)

70 
	#SX1302_REG_AGC_MCU_LUT_TABLE_A_PA_LUT
 34

	)

71 
	#SX1302_REG_AGC_MCU_LUT_TABLE_A_LNA_LUT
 35

	)

72 
	#SX1302_REG_AGC_MCU_LUT_TABLE_B_PA_LUT
 36

	)

73 
	#SX1302_REG_AGC_MCU_LUT_TABLE_B_LNA_LUT
 37

	)

74 
	#SX1302_REG_AGC_MCU_UART_CFG_MSBF
 38

	)

75 
	#SX1302_REG_AGC_MCU_UART_CFG_PAR_EN
 39

	)

76 
	#SX1302_REG_AGC_MCU_UART_CFG_PAR_MODE
 40

	)

77 
	#SX1302_REG_AGC_MCU_UART_CFG_START_LEN
 41

	)

78 
	#SX1302_REG_AGC_MCU_UART_CFG_STOP_LEN
 42

	)

79 
	#SX1302_REG_AGC_MCU_UART_CFG_WORD_LEN
 43

	)

80 
	#SX1302_REG_AGC_MCU_UART_CFG2_BIT_RATE
 44

	)

81 
	#SX1302_REG_AGC_MCU_MCU_MAIL_BOX_WR_DATA_BYTE3_MCU_MAIL_BOX_WR_DATA
 45

	)

82 
	#SX1302_REG_AGC_MCU_MCU_MAIL_BOX_WR_DATA_BYTE2_MCU_MAIL_BOX_WR_DATA
 46

	)

83 
	#SX1302_REG_AGC_MCU_MCU_MAIL_BOX_WR_DATA_BYTE1_MCU_MAIL_BOX_WR_DATA
 47

	)

84 
	#SX1302_REG_AGC_MCU_MCU_MAIL_BOX_WR_DATA_BYTE0_MCU_MAIL_BOX_WR_DATA
 48

	)

85 
	#SX1302_REG_AGC_MCU_MCU_MAIL_BOX_RD_DATA_BYTE3_MCU_MAIL_BOX_RD_DATA
 49

	)

86 
	#SX1302_REG_AGC_MCU_MCU_MAIL_BOX_RD_DATA_BYTE2_MCU_MAIL_BOX_RD_DATA
 50

	)

87 
	#SX1302_REG_AGC_MCU_MCU_MAIL_BOX_RD_DATA_BYTE1_MCU_MAIL_BOX_RD_DATA
 51

	)

88 
	#SX1302_REG_AGC_MCU_MCU_MAIL_BOX_RD_DATA_BYTE0_MCU_MAIL_BOX_RD_DATA
 52

	)

89 
	#SX1302_REG_AGC_MCU_DUMMY_DUMMY3
 53

	)

90 
	#SX1302_REG_CLK_CTRL_CLK_SEL_CLKDIV_EN
 54

	)

91 
	#SX1302_REG_CLK_CTRL_CLK_SEL_CLK_RADIO_B_SEL
 55

	)

92 
	#SX1302_REG_CLK_CTRL_CLK_SEL_CLK_RADIO_A_SEL
 56

	)

93 
	#SX1302_REG_CLK_CTRL_DUMMY_DUMMY
 57

	)

94 
	#SX1302_REG_TX_TOP_A_TX_TRIG_TX_FSM_CLR
 58

	)

95 
	#SX1302_REG_TX_TOP_A_TX_TRIG_TX_TRIG_GPS
 59

	)

96 
	#SX1302_REG_TX_TOP_A_TX_TRIG_TX_TRIG_DELAYED
 60

	)

97 
	#SX1302_REG_TX_TOP_A_TX_TRIG_TX_TRIG_IMMEDIATE
 61

	)

98 
	#SX1302_REG_TX_TOP_A_TIMER_TRIG_BYTE3_TIMER_DELAYED_TRIG
 62

	)

99 
	#SX1302_REG_TX_TOP_A_TIMER_TRIG_BYTE2_TIMER_DELAYED_TRIG
 63

	)

100 
	#SX1302_REG_TX_TOP_A_TIMER_TRIG_BYTE1_TIMER_DELAYED_TRIG
 64

	)

101 
	#SX1302_REG_TX_TOP_A_TIMER_TRIG_BYTE0_TIMER_DELAYED_TRIG
 65

	)

102 
	#SX1302_REG_TX_TOP_A_TX_START_DELAY_MSB_TX_START_DELAY
 66

	)

103 
	#SX1302_REG_TX_TOP_A_TX_START_DELAY_LSB_TX_START_DELAY
 67

	)

104 
	#SX1302_REG_TX_TOP_A_TX_CTRL_WRITE_BUFFER
 68

	)

105 
	#SX1302_REG_TX_TOP_A_TX_RAMP_DURATION_TX_RAMP_DURATION
 69

	)

106 
	#SX1302_REG_TX_TOP_A_GEN_CFG_0_MODULATION_TYPE
 70

	)

107 
	#SX1302_REG_TX_TOP_A_TEST_0_TX_ACTIVE_CTRL
 71

	)

108 
	#SX1302_REG_TX_TOP_A_TEST_0_TX_ACTIVE_SEL
 72

	)

109 
	#SX1302_REG_TX_TOP_A_TX_FLAG_TX_TIMEOUT
 73

	)

110 
	#SX1302_REG_TX_TOP_A_TX_FLAG_PKT_DONE
 74

	)

111 
	#SX1302_REG_TX_TOP_A_AGC_TX_BW_AGC_TX_BW
 75

	)

112 
	#SX1302_REG_TX_TOP_A_AGC_TX_PWR_AGC_TX_PWR
 76

	)

113 
	#SX1302_REG_TX_TOP_A_TIMEOUT_CNT_BYTE_2_TIMEOUT_CNT
 77

	)

114 
	#SX1302_REG_TX_TOP_A_TIMEOUT_CNT_BYTE_1_TIMEOUT_CNT
 78

	)

115 
	#SX1302_REG_TX_TOP_A_TIMEOUT_CNT_BYTE_0_TIMEOUT_CNT
 79

	)

116 
	#SX1302_REG_TX_TOP_A_TX_FSM_STATUS_TX_STATUS
 80

	)

117 
	#SX1302_REG_TX_TOP_A_DUMMY_CONTROL_DUMMY
 81

	)

118 
	#SX1302_REG_TX_TOP_A_TX_RFFE_IF_CTRL_PLL_DIV_CTRL
 82

	)

119 
	#SX1302_REG_TX_TOP_A_TX_RFFE_IF_CTRL_TX_CLK_EDGE
 83

	)

120 
	#SX1302_REG_TX_TOP_A_TX_RFFE_IF_CTRL_TX_MODE
 84

	)

121 
	#SX1302_REG_TX_TOP_A_TX_RFFE_IF_CTRL_TX_IF_DST
 85

	)

122 
	#SX1302_REG_TX_TOP_A_TX_RFFE_IF_CTRL_TX_IF_SRC
 86

	)

123 
	#SX1302_REG_TX_TOP_A_TX_RFFE_IF_CTRL2_SX125X_IQ_INVERT
 87

	)

124 
	#SX1302_REG_TX_TOP_A_TX_RFFE_IF_CTRL2_PLL_DIV_CTRL_AGC
 88

	)

125 
	#SX1302_REG_TX_TOP_A_TX_RFFE_IF_IQ_GAIN_IQ_GAIN
 89

	)

126 
	#SX1302_REG_TX_TOP_A_TX_RFFE_IF_I_OFFSET_I_OFFSET
 90

	)

127 
	#SX1302_REG_TX_TOP_A_TX_RFFE_IF_Q_OFFSET_Q_OFFSET
 91

	)

128 
	#SX1302_REG_TX_TOP_A_TX_RFFE_IF_FREQ_RF_H_FREQ_RF
 92

	)

129 
	#SX1302_REG_TX_TOP_A_TX_RFFE_IF_FREQ_RF_M_FREQ_RF
 93

	)

130 
	#SX1302_REG_TX_TOP_A_TX_RFFE_IF_FREQ_RF_L_FREQ_RF
 94

	)

131 
	#SX1302_REG_TX_TOP_A_TX_RFFE_IF_FREQ_DEV_H_FREQ_DEV
 95

	)

132 
	#SX1302_REG_TX_TOP_A_TX_RFFE_IF_FREQ_DEV_L_FREQ_DEV
 96

	)

133 
	#SX1302_REG_TX_TOP_A_TX_RFFE_IF_TEST_MOD_FREQ
 97

	)

134 
	#SX1302_REG_TX_TOP_A_DUMMY_MODULATOR_DUMMY
 98

	)

135 
	#SX1302_REG_TX_TOP_A_FSK_PKT_LEN_PKT_LENGTH
 99

	)

136 
	#SX1302_REG_TX_TOP_A_FSK_CFG_0_TX_CONT
 100

	)

137 
	#SX1302_REG_TX_TOP_A_FSK_CFG_0_CRC_IBM
 101

	)

138 
	#SX1302_REG_TX_TOP_A_FSK_CFG_0_DCFREE_ENC
 102

	)

139 
	#SX1302_REG_TX_TOP_A_FSK_CFG_0_CRC_EN
 103

	)

140 
	#SX1302_REG_TX_TOP_A_FSK_CFG_0_PKT_MODE
 104

	)

141 
	#SX1302_REG_TX_TOP_A_FSK_PREAMBLE_SIZE_MSB_PREAMBLE_SIZE
 105

	)

142 
	#SX1302_REG_TX_TOP_A_FSK_PREAMBLE_SIZE_LSB_PREAMBLE_SIZE
 106

	)

143 
	#SX1302_REG_TX_TOP_A_FSK_BIT_RATE_MSB_BIT_RATE
 107

	)

144 
	#SX1302_REG_TX_TOP_A_FSK_BIT_RATE_LSB_BIT_RATE
 108

	)

145 
	#SX1302_REG_TX_TOP_A_FSK_MOD_FSK_REF_PATTERN_SIZE
 109

	)

146 
	#SX1302_REG_TX_TOP_A_FSK_MOD_FSK_PREAMBLE_SEQ
 110

	)

147 
	#SX1302_REG_TX_TOP_A_FSK_MOD_FSK_REF_PATTERN_EN
 111

	)

148 
	#SX1302_REG_TX_TOP_A_FSK_MOD_FSK_GAUSSIAN_SELECT_BT
 112

	)

149 
	#SX1302_REG_TX_TOP_A_FSK_MOD_FSK_GAUSSIAN_EN
 113

	)

150 
	#SX1302_REG_TX_TOP_A_FSK_REF_PATTERN_BYTE7_FSK_REF_PATTERN
 114

	)

151 
	#SX1302_REG_TX_TOP_A_FSK_REF_PATTERN_BYTE6_FSK_REF_PATTERN
 115

	)

152 
	#SX1302_REG_TX_TOP_A_FSK_REF_PATTERN_BYTE5_FSK_REF_PATTERN
 116

	)

153 
	#SX1302_REG_TX_TOP_A_FSK_REF_PATTERN_BYTE4_FSK_REF_PATTERN
 117

	)

154 
	#SX1302_REG_TX_TOP_A_FSK_REF_PATTERN_BYTE3_FSK_REF_PATTERN
 118

	)

155 
	#SX1302_REG_TX_TOP_A_FSK_REF_PATTERN_BYTE2_FSK_REF_PATTERN
 119

	)

156 
	#SX1302_REG_TX_TOP_A_FSK_REF_PATTERN_BYTE1_FSK_REF_PATTERN
 120

	)

157 
	#SX1302_REG_TX_TOP_A_FSK_REF_PATTERN_BYTE0_FSK_REF_PATTERN
 121

	)

158 
	#SX1302_REG_TX_TOP_A_DUMMY_GSFK_DUMMY
 122

	)

159 
	#SX1302_REG_TX_TOP_A_TXRX_CFG0_0_MODEM_BW
 123

	)

160 
	#SX1302_REG_TX_TOP_A_TXRX_CFG0_0_MODEM_SF
 124

	)

161 
	#SX1302_REG_TX_TOP_A_TXRX_CFG0_1_PPM_OFFSET_HDR_CTRL
 125

	)

162 
	#SX1302_REG_TX_TOP_A_TXRX_CFG0_1_PPM_OFFSET
 126

	)

163 
	#SX1302_REG_TX_TOP_A_TXRX_CFG0_1_POST_PREAMBLE_GAP_LONG
 127

	)

164 
	#SX1302_REG_TX_TOP_A_TXRX_CFG0_1_CODING_RATE
 128

	)

165 
	#SX1302_REG_TX_TOP_A_TXRX_CFG0_2_FINE_SYNCH_EN
 129

	)

166 
	#SX1302_REG_TX_TOP_A_TXRX_CFG0_2_MODEM_EN
 130

	)

167 
	#SX1302_REG_TX_TOP_A_TXRX_CFG0_2_CADRXTX
 131

	)

168 
	#SX1302_REG_TX_TOP_A_TXRX_CFG0_2_IMPLICIT_HEADER
 132

	)

169 
	#SX1302_REG_TX_TOP_A_TXRX_CFG0_2_CRC_EN
 133

	)

170 
	#SX1302_REG_TX_TOP_A_TXRX_CFG0_3_PAYLOAD_LENGTH
 134

	)

171 
	#SX1302_REG_TX_TOP_A_TXRX_CFG1_0_INT_STEP_ORIDE_EN
 135

	)

172 
	#SX1302_REG_TX_TOP_A_TXRX_CFG1_0_INT_STEP_ORIDE
 136

	)

173 
	#SX1302_REG_TX_TOP_A_TXRX_CFG1_1_MODEM_START
 137

	)

174 
	#SX1302_REG_TX_TOP_A_TXRX_CFG1_1_HEADER_DIFF_MODE
 138

	)

175 
	#SX1302_REG_TX_TOP_A_TXRX_CFG1_1_ZERO_PAD
 139

	)

176 
	#SX1302_REG_TX_TOP_A_TXRX_CFG1_2_PREAMBLE_SYMB_NB
 140

	)

177 
	#SX1302_REG_TX_TOP_A_TXRX_CFG1_3_PREAMBLE_SYMB_NB
 141

	)

178 
	#SX1302_REG_TX_TOP_A_TXRX_CFG1_4_AUTO_ACK_INT_DELAY
 142

	)

179 
	#SX1302_REG_TX_TOP_A_TXRX_CFG1_4_AUTO_ACK_RX
 143

	)

180 
	#SX1302_REG_TX_TOP_A_TXRX_CFG1_4_AUTO_ACK_TX
 144

	)

181 
	#SX1302_REG_TX_TOP_A_TX_CFG0_0_CHIRP_LOWPASS
 145

	)

182 
	#SX1302_REG_TX_TOP_A_TX_CFG0_0_PPM_OFFSET_SIG
 146

	)

183 
	#SX1302_REG_TX_TOP_A_TX_CFG0_0_CONTCHIRP
 147

	)

184 
	#SX1302_REG_TX_TOP_A_TX_CFG0_0_CHIRP_INVERT
 148

	)

185 
	#SX1302_REG_TX_TOP_A_TX_CFG0_0_CONTINUOUS
 149

	)

186 
	#SX1302_REG_TX_TOP_A_TX_CFG0_1_POWER_RANGING
 150

	)

187 
	#SX1302_REG_TX_TOP_A_TX_CFG1_0_FRAME_NB
 151

	)

188 
	#SX1302_REG_TX_TOP_A_TX_CFG1_1_HOP_CTRL
 152

	)

189 
	#SX1302_REG_TX_TOP_A_TX_CFG1_1_IFS
 153

	)

190 
	#SX1302_REG_TX_TOP_A_FRAME_SYNCH_0_AUTO_SCALE
 154

	)

191 
	#SX1302_REG_TX_TOP_A_FRAME_SYNCH_0_DROP_ON_SYNCH
 155

	)

192 
	#SX1302_REG_TX_TOP_A_FRAME_SYNCH_0_GAIN
 156

	)

193 
	#SX1302_REG_TX_TOP_A_FRAME_SYNCH_0_PEAK1_POS
 157

	)

194 
	#SX1302_REG_TX_TOP_A_FRAME_SYNCH_1_FINETIME_ON_LAST
 158

	)

195 
	#SX1302_REG_TX_TOP_A_FRAME_SYNCH_1_TIMEOUT_OPT
 159

	)

196 
	#SX1302_REG_TX_TOP_A_FRAME_SYNCH_1_PEAK2_POS
 160

	)

197 
	#SX1302_REG_TX_TOP_A_LORA_TX_STATE_STATUS
 161

	)

198 
	#SX1302_REG_TX_TOP_A_LORA_TX_FLAG_FRAME_DONE
 162

	)

199 
	#SX1302_REG_TX_TOP_A_LORA_TX_FLAG_CONT_DONE
 163

	)

200 
	#SX1302_REG_TX_TOP_A_LORA_TX_FLAG_PLD_DONE
 164

	)

201 
	#SX1302_REG_TX_TOP_A_DUMMY_LORA_DUMMY
 165

	)

202 
	#SX1302_REG_TX_TOP_B_TX_TRIG_TX_FSM_CLR
 166

	)

203 
	#SX1302_REG_TX_TOP_B_TX_TRIG_TX_TRIG_GPS
 167

	)

204 
	#SX1302_REG_TX_TOP_B_TX_TRIG_TX_TRIG_DELAYED
 168

	)

205 
	#SX1302_REG_TX_TOP_B_TX_TRIG_TX_TRIG_IMMEDIATE
 169

	)

206 
	#SX1302_REG_TX_TOP_B_TIMER_TRIG_BYTE3_TIMER_DELAYED_TRIG
 170

	)

207 
	#SX1302_REG_TX_TOP_B_TIMER_TRIG_BYTE2_TIMER_DELAYED_TRIG
 171

	)

208 
	#SX1302_REG_TX_TOP_B_TIMER_TRIG_BYTE1_TIMER_DELAYED_TRIG
 172

	)

209 
	#SX1302_REG_TX_TOP_B_TIMER_TRIG_BYTE0_TIMER_DELAYED_TRIG
 173

	)

210 
	#SX1302_REG_TX_TOP_B_TX_START_DELAY_MSB_TX_START_DELAY
 174

	)

211 
	#SX1302_REG_TX_TOP_B_TX_START_DELAY_LSB_TX_START_DELAY
 175

	)

212 
	#SX1302_REG_TX_TOP_B_TX_CTRL_WRITE_BUFFER
 176

	)

213 
	#SX1302_REG_TX_TOP_B_TX_RAMP_DURATION_TX_RAMP_DURATION
 177

	)

214 
	#SX1302_REG_TX_TOP_B_GEN_CFG_0_MODULATION_TYPE
 178

	)

215 
	#SX1302_REG_TX_TOP_B_TEST_0_TX_ACTIVE_CTRL
 179

	)

216 
	#SX1302_REG_TX_TOP_B_TEST_0_TX_ACTIVE_SEL
 180

	)

217 
	#SX1302_REG_TX_TOP_B_TX_FLAG_TX_TIMEOUT
 181

	)

218 
	#SX1302_REG_TX_TOP_B_TX_FLAG_PKT_DONE
 182

	)

219 
	#SX1302_REG_TX_TOP_B_AGC_TX_BW_AGC_TX_BW
 183

	)

220 
	#SX1302_REG_TX_TOP_B_AGC_TX_PWR_AGC_TX_PWR
 184

	)

221 
	#SX1302_REG_TX_TOP_B_TIMEOUT_CNT_BYTE_2_TIMEOUT_CNT
 185

	)

222 
	#SX1302_REG_TX_TOP_B_TIMEOUT_CNT_BYTE_1_TIMEOUT_CNT
 186

	)

223 
	#SX1302_REG_TX_TOP_B_TIMEOUT_CNT_BYTE_0_TIMEOUT_CNT
 187

	)

224 
	#SX1302_REG_TX_TOP_B_TX_FSM_STATUS_TX_STATUS
 188

	)

225 
	#SX1302_REG_TX_TOP_B_DUMMY_CONTROL_DUMMY
 189

	)

226 
	#SX1302_REG_TX_TOP_B_TX_RFFE_IF_CTRL_PLL_DIV_CTRL
 190

	)

227 
	#SX1302_REG_TX_TOP_B_TX_RFFE_IF_CTRL_TX_CLK_EDGE
 191

	)

228 
	#SX1302_REG_TX_TOP_B_TX_RFFE_IF_CTRL_TX_MODE
 192

	)

229 
	#SX1302_REG_TX_TOP_B_TX_RFFE_IF_CTRL_TX_IF_DST
 193

	)

230 
	#SX1302_REG_TX_TOP_B_TX_RFFE_IF_CTRL_TX_IF_SRC
 194

	)

231 
	#SX1302_REG_TX_TOP_B_TX_RFFE_IF_CTRL2_SX125X_IQ_INVERT
 195

	)

232 
	#SX1302_REG_TX_TOP_B_TX_RFFE_IF_CTRL2_PLL_DIV_CTRL_AGC
 196

	)

233 
	#SX1302_REG_TX_TOP_B_TX_RFFE_IF_IQ_GAIN_IQ_GAIN
 197

	)

234 
	#SX1302_REG_TX_TOP_B_TX_RFFE_IF_I_OFFSET_I_OFFSET
 198

	)

235 
	#SX1302_REG_TX_TOP_B_TX_RFFE_IF_Q_OFFSET_Q_OFFSET
 199

	)

236 
	#SX1302_REG_TX_TOP_B_TX_RFFE_IF_FREQ_RF_H_FREQ_RF
 200

	)

237 
	#SX1302_REG_TX_TOP_B_TX_RFFE_IF_FREQ_RF_M_FREQ_RF
 201

	)

238 
	#SX1302_REG_TX_TOP_B_TX_RFFE_IF_FREQ_RF_L_FREQ_RF
 202

	)

239 
	#SX1302_REG_TX_TOP_B_TX_RFFE_IF_FREQ_DEV_H_FREQ_DEV
 203

	)

240 
	#SX1302_REG_TX_TOP_B_TX_RFFE_IF_FREQ_DEV_L_FREQ_DEV
 204

	)

241 
	#SX1302_REG_TX_TOP_B_TX_RFFE_IF_TEST_MOD_FREQ
 205

	)

242 
	#SX1302_REG_TX_TOP_B_DUMMY_MODULATOR_DUMMY
 206

	)

243 
	#SX1302_REG_TX_TOP_B_FSK_PKT_LEN_PKT_LENGTH
 207

	)

244 
	#SX1302_REG_TX_TOP_B_FSK_CFG_0_TX_CONT
 208

	)

245 
	#SX1302_REG_TX_TOP_B_FSK_CFG_0_CRC_IBM
 209

	)

246 
	#SX1302_REG_TX_TOP_B_FSK_CFG_0_DCFREE_ENC
 210

	)

247 
	#SX1302_REG_TX_TOP_B_FSK_CFG_0_CRC_EN
 211

	)

248 
	#SX1302_REG_TX_TOP_B_FSK_CFG_0_PKT_MODE
 212

	)

249 
	#SX1302_REG_TX_TOP_B_FSK_PREAMBLE_SIZE_MSB_PREAMBLE_SIZE
 213

	)

250 
	#SX1302_REG_TX_TOP_B_FSK_PREAMBLE_SIZE_LSB_PREAMBLE_SIZE
 214

	)

251 
	#SX1302_REG_TX_TOP_B_FSK_BIT_RATE_MSB_BIT_RATE
 215

	)

252 
	#SX1302_REG_TX_TOP_B_FSK_BIT_RATE_LSB_BIT_RATE
 216

	)

253 
	#SX1302_REG_TX_TOP_B_FSK_MOD_FSK_REF_PATTERN_SIZE
 217

	)

254 
	#SX1302_REG_TX_TOP_B_FSK_MOD_FSK_PREAMBLE_SEQ
 218

	)

255 
	#SX1302_REG_TX_TOP_B_FSK_MOD_FSK_REF_PATTERN_EN
 219

	)

256 
	#SX1302_REG_TX_TOP_B_FSK_MOD_FSK_GAUSSIAN_SELECT_BT
 220

	)

257 
	#SX1302_REG_TX_TOP_B_FSK_MOD_FSK_GAUSSIAN_EN
 221

	)

258 
	#SX1302_REG_TX_TOP_B_FSK_REF_PATTERN_BYTE7_FSK_REF_PATTERN
 222

	)

259 
	#SX1302_REG_TX_TOP_B_FSK_REF_PATTERN_BYTE6_FSK_REF_PATTERN
 223

	)

260 
	#SX1302_REG_TX_TOP_B_FSK_REF_PATTERN_BYTE5_FSK_REF_PATTERN
 224

	)

261 
	#SX1302_REG_TX_TOP_B_FSK_REF_PATTERN_BYTE4_FSK_REF_PATTERN
 225

	)

262 
	#SX1302_REG_TX_TOP_B_FSK_REF_PATTERN_BYTE3_FSK_REF_PATTERN
 226

	)

263 
	#SX1302_REG_TX_TOP_B_FSK_REF_PATTERN_BYTE2_FSK_REF_PATTERN
 227

	)

264 
	#SX1302_REG_TX_TOP_B_FSK_REF_PATTERN_BYTE1_FSK_REF_PATTERN
 228

	)

265 
	#SX1302_REG_TX_TOP_B_FSK_REF_PATTERN_BYTE0_FSK_REF_PATTERN
 229

	)

266 
	#SX1302_REG_TX_TOP_B_DUMMY_GSFK_DUMMY
 230

	)

267 
	#SX1302_REG_TX_TOP_B_TXRX_CFG0_0_MODEM_BW
 231

	)

268 
	#SX1302_REG_TX_TOP_B_TXRX_CFG0_0_MODEM_SF
 232

	)

269 
	#SX1302_REG_TX_TOP_B_TXRX_CFG0_1_PPM_OFFSET_HDR_CTRL
 233

	)

270 
	#SX1302_REG_TX_TOP_B_TXRX_CFG0_1_PPM_OFFSET
 234

	)

271 
	#SX1302_REG_TX_TOP_B_TXRX_CFG0_1_POST_PREAMBLE_GAP_LONG
 235

	)

272 
	#SX1302_REG_TX_TOP_B_TXRX_CFG0_1_CODING_RATE
 236

	)

273 
	#SX1302_REG_TX_TOP_B_TXRX_CFG0_2_FINE_SYNCH_EN
 237

	)

274 
	#SX1302_REG_TX_TOP_B_TXRX_CFG0_2_MODEM_EN
 238

	)

275 
	#SX1302_REG_TX_TOP_B_TXRX_CFG0_2_CADRXTX
 239

	)

276 
	#SX1302_REG_TX_TOP_B_TXRX_CFG0_2_IMPLICIT_HEADER
 240

	)

277 
	#SX1302_REG_TX_TOP_B_TXRX_CFG0_2_CRC_EN
 241

	)

278 
	#SX1302_REG_TX_TOP_B_TXRX_CFG0_3_PAYLOAD_LENGTH
 242

	)

279 
	#SX1302_REG_TX_TOP_B_TXRX_CFG1_0_INT_STEP_ORIDE_EN
 243

	)

280 
	#SX1302_REG_TX_TOP_B_TXRX_CFG1_0_INT_STEP_ORIDE
 244

	)

281 
	#SX1302_REG_TX_TOP_B_TXRX_CFG1_1_MODEM_START
 245

	)

282 
	#SX1302_REG_TX_TOP_B_TXRX_CFG1_1_HEADER_DIFF_MODE
 246

	)

283 
	#SX1302_REG_TX_TOP_B_TXRX_CFG1_1_ZERO_PAD
 247

	)

284 
	#SX1302_REG_TX_TOP_B_TXRX_CFG1_2_PREAMBLE_SYMB_NB
 248

	)

285 
	#SX1302_REG_TX_TOP_B_TXRX_CFG1_3_PREAMBLE_SYMB_NB
 249

	)

286 
	#SX1302_REG_TX_TOP_B_TXRX_CFG1_4_AUTO_ACK_INT_DELAY
 250

	)

287 
	#SX1302_REG_TX_TOP_B_TXRX_CFG1_4_AUTO_ACK_RX
 251

	)

288 
	#SX1302_REG_TX_TOP_B_TXRX_CFG1_4_AUTO_ACK_TX
 252

	)

289 
	#SX1302_REG_TX_TOP_B_TX_CFG0_0_CHIRP_LOWPASS
 253

	)

290 
	#SX1302_REG_TX_TOP_B_TX_CFG0_0_PPM_OFFSET_SIG
 254

	)

291 
	#SX1302_REG_TX_TOP_B_TX_CFG0_0_CONTCHIRP
 255

	)

292 
	#SX1302_REG_TX_TOP_B_TX_CFG0_0_CHIRP_INVERT
 256

	)

293 
	#SX1302_REG_TX_TOP_B_TX_CFG0_0_CONTINUOUS
 257

	)

294 
	#SX1302_REG_TX_TOP_B_TX_CFG0_1_POWER_RANGING
 258

	)

295 
	#SX1302_REG_TX_TOP_B_TX_CFG1_0_FRAME_NB
 259

	)

296 
	#SX1302_REG_TX_TOP_B_TX_CFG1_1_HOP_CTRL
 260

	)

297 
	#SX1302_REG_TX_TOP_B_TX_CFG1_1_IFS
 261

	)

298 
	#SX1302_REG_TX_TOP_B_FRAME_SYNCH_0_AUTO_SCALE
 262

	)

299 
	#SX1302_REG_TX_TOP_B_FRAME_SYNCH_0_DROP_ON_SYNCH
 263

	)

300 
	#SX1302_REG_TX_TOP_B_FRAME_SYNCH_0_GAIN
 264

	)

301 
	#SX1302_REG_TX_TOP_B_FRAME_SYNCH_0_PEAK1_POS
 265

	)

302 
	#SX1302_REG_TX_TOP_B_FRAME_SYNCH_1_FINETIME_ON_LAST
 266

	)

303 
	#SX1302_REG_TX_TOP_B_FRAME_SYNCH_1_TIMEOUT_OPT
 267

	)

304 
	#SX1302_REG_TX_TOP_B_FRAME_SYNCH_1_PEAK2_POS
 268

	)

305 
	#SX1302_REG_TX_TOP_B_LORA_TX_STATE_STATUS
 269

	)

306 
	#SX1302_REG_TX_TOP_B_LORA_TX_FLAG_FRAME_DONE
 270

	)

307 
	#SX1302_REG_TX_TOP_B_LORA_TX_FLAG_CONT_DONE
 271

	)

308 
	#SX1302_REG_TX_TOP_B_LORA_TX_FLAG_PLD_DONE
 272

	)

309 
	#SX1302_REG_TX_TOP_B_DUMMY_LORA_DUMMY
 273

	)

310 
	#SX1302_REG_GPIO_GPIO_DIR_H_DIRECTION
 274

	)

311 
	#SX1302_REG_GPIO_GPIO_DIR_L_DIRECTION
 275

	)

312 
	#SX1302_REG_GPIO_GPIO_OUT_H_OUT_VALUE
 276

	)

313 
	#SX1302_REG_GPIO_GPIO_OUT_L_OUT_VALUE
 277

	)

314 
	#SX1302_REG_GPIO_GPIO_IN_H_IN_VALUE
 278

	)

315 
	#SX1302_REG_GPIO_GPIO_IN_L_IN_VALUE
 279

	)

316 
	#SX1302_REG_GPIO_GPIO_PD_H_PD_VALUE
 280

	)

317 
	#SX1302_REG_GPIO_GPIO_PD_L_PD_VALUE
 281

	)

318 
	#SX1302_REG_GPIO_GPIO_SEL_0_SELECTION
 282

	)

319 
	#SX1302_REG_GPIO_GPIO_SEL_1_SELECTION
 283

	)

320 
	#SX1302_REG_GPIO_GPIO_SEL_2_SELECTION
 284

	)

321 
	#SX1302_REG_GPIO_GPIO_SEL_3_SELECTION
 285

	)

322 
	#SX1302_REG_GPIO_GPIO_SEL_4_SELECTION
 286

	)

323 
	#SX1302_REG_GPIO_GPIO_SEL_5_SELECTION
 287

	)

324 
	#SX1302_REG_GPIO_GPIO_SEL_6_SELECTION
 288

	)

325 
	#SX1302_REG_GPIO_GPIO_SEL_7_SELECTION
 289

	)

326 
	#SX1302_REG_GPIO_GPIO_SEL_8_11_GPIO_11_9_SEL
 290

	)

327 
	#SX1302_REG_GPIO_GPIO_SEL_8_11_GPIO_8_SEL
 291

	)

328 
	#SX1302_REG_GPIO_HOST_IRQ_TX_TIMEOUT_B
 292

	)

329 
	#SX1302_REG_GPIO_HOST_IRQ_TX_TIMEOUT_A
 293

	)

330 
	#SX1302_REG_GPIO_HOST_IRQ_TX_DONE_B
 294

	)

331 
	#SX1302_REG_GPIO_HOST_IRQ_TX_DONE_A
 295

	)

332 
	#SX1302_REG_GPIO_HOST_IRQ_TIMESTAMP
 296

	)

333 
	#SX1302_REG_GPIO_HOST_IRQ_RX_BUFFER_WATERMARK
 297

	)

334 
	#SX1302_REG_GPIO_HOST_IRQ_EN_TX_TIMEOUT_B
 298

	)

335 
	#SX1302_REG_GPIO_HOST_IRQ_EN_TX_TIMEOUT_A
 299

	)

336 
	#SX1302_REG_GPIO_HOST_IRQ_EN_TX_DONE_B
 300

	)

337 
	#SX1302_REG_GPIO_HOST_IRQ_EN_TX_DONE_A
 301

	)

338 
	#SX1302_REG_GPIO_HOST_IRQ_EN_TIMESTAMP
 302

	)

339 
	#SX1302_REG_GPIO_HOST_IRQ_EN_RX_BUFFER_WATERMARK
 303

	)

340 
	#SX1302_REG_GPIO_DUMMY_DUMMY
 304

	)

341 
	#SX1302_REG_TIMESTAMP_GPS_CTRL_GPS_POL
 305

	)

342 
	#SX1302_REG_TIMESTAMP_GPS_CTRL_GPS_EN
 306

	)

343 
	#SX1302_REG_TIMESTAMP_TIMESTAMP_PPS_MSB2_TIMESTAMP_PPS
 307

	)

344 
	#SX1302_REG_TIMESTAMP_TIMESTAMP_PPS_MSB1_TIMESTAMP_PPS
 308

	)

345 
	#SX1302_REG_TIMESTAMP_TIMESTAMP_PPS_LSB2_TIMESTAMP_PPS
 309

	)

346 
	#SX1302_REG_TIMESTAMP_TIMESTAMP_PPS_LSB1_TIMESTAMP_PPS
 310

	)

347 
	#SX1302_REG_TIMESTAMP_TIMESTAMP_MSB2_TIMESTAMP
 311

	)

348 
	#SX1302_REG_TIMESTAMP_TIMESTAMP_MSB1_TIMESTAMP
 312

	)

349 
	#SX1302_REG_TIMESTAMP_TIMESTAMP_LSB2_TIMESTAMP
 313

	)

350 
	#SX1302_REG_TIMESTAMP_TIMESTAMP_LSB1_TIMESTAMP
 314

	)

351 
	#SX1302_REG_TIMESTAMP_TIMESTAMP_SET3_TIMESTAMP
 315

	)

352 
	#SX1302_REG_TIMESTAMP_TIMESTAMP_SET2_TIMESTAMP
 316

	)

353 
	#SX1302_REG_TIMESTAMP_TIMESTAMP_SET1_TIMESTAMP
 317

	)

354 
	#SX1302_REG_TIMESTAMP_TIMESTAMP_SET0_TIMESTAMP
 318

	)

355 
	#SX1302_REG_TIMESTAMP_TIMESTAMP_IRQ_3_TIMESTAMP
 319

	)

356 
	#SX1302_REG_TIMESTAMP_TIMESTAMP_IRQ_2_TIMESTAMP
 320

	)

357 
	#SX1302_REG_TIMESTAMP_TIMESTAMP_IRQ_1_TIMESTAMP
 321

	)

358 
	#SX1302_REG_TIMESTAMP_TIMESTAMP_IRQ_0_TIMESTAMP
 322

	)

359 
	#SX1302_REG_TIMESTAMP_DUMMY_DUMMY
 323

	)

360 
	#SX1302_REG_RX_TOP_FREQ_0_MSB_IF_FREQ_0
 324

	)

361 
	#SX1302_REG_RX_TOP_FREQ_0_LSB_IF_FREQ_0
 325

	)

362 
	#SX1302_REG_RX_TOP_FREQ_1_MSB_IF_FREQ_1
 326

	)

363 
	#SX1302_REG_RX_TOP_FREQ_1_LSB_IF_FREQ_1
 327

	)

364 
	#SX1302_REG_RX_TOP_FREQ_2_MSB_IF_FREQ_2
 328

	)

365 
	#SX1302_REG_RX_TOP_FREQ_2_LSB_IF_FREQ_2
 329

	)

366 
	#SX1302_REG_RX_TOP_FREQ_3_MSB_IF_FREQ_3
 330

	)

367 
	#SX1302_REG_RX_TOP_FREQ_3_LSB_IF_FREQ_3
 331

	)

368 
	#SX1302_REG_RX_TOP_FREQ_4_MSB_IF_FREQ_4
 332

	)

369 
	#SX1302_REG_RX_TOP_FREQ_4_LSB_IF_FREQ_4
 333

	)

370 
	#SX1302_REG_RX_TOP_FREQ_5_MSB_IF_FREQ_5
 334

	)

371 
	#SX1302_REG_RX_TOP_FREQ_5_LSB_IF_FREQ_5
 335

	)

372 
	#SX1302_REG_RX_TOP_FREQ_6_MSB_IF_FREQ_6
 336

	)

373 
	#SX1302_REG_RX_TOP_FREQ_6_LSB_IF_FREQ_6
 337

	)

374 
	#SX1302_REG_RX_TOP_FREQ_7_MSB_IF_FREQ_7
 338

	)

375 
	#SX1302_REG_RX_TOP_FREQ_7_LSB_IF_FREQ_7
 339

	)

376 
	#SX1302_REG_RX_TOP_RADIO_SELECT_RADIO_SELECT
 340

	)

377 
	#SX1302_REG_RX_TOP_RSSI_CONTROL_RSSI_FILTER_ALPHA
 341

	)

378 
	#SX1302_REG_RX_TOP_RSSI_CONTROL_SELECT_RSSI
 342

	)

379 
	#SX1302_REG_RX_TOP_RSSI_DEF_VALUE_CHAN_RSSI_DEF_VALUE
 343

	)

380 
	#SX1302_REG_RX_TOP_CHANN_DAGC_CFG1_CHAN_DAGC_THRESHOLD_HIGH
 344

	)

381 
	#SX1302_REG_RX_TOP_CHANN_DAGC_CFG2_CHAN_DAGC_THRESHOLD_LOW
 345

	)

382 
	#SX1302_REG_RX_TOP_CHANN_DAGC_CFG3_CHAN_DAGC_MAX_ATTEN
 346

	)

383 
	#SX1302_REG_RX_TOP_CHANN_DAGC_CFG3_CHAN_DAGC_MIN_ATTEN
 347

	)

384 
	#SX1302_REG_RX_TOP_CHANN_DAGC_CFG4_CHAN_DAGC_STEP
 348

	)

385 
	#SX1302_REG_RX_TOP_CHANN_DAGC_CFG5_CHAN_DAGC_MODE
 349

	)

386 
	#SX1302_REG_RX_TOP_RSSI_VALUE_CHAN_RSSI
 350

	)

387 
	#SX1302_REG_RX_TOP_GAIN_CONTROL_CHAN_GAIN_VALID
 351

	)

388 
	#SX1302_REG_RX_TOP_GAIN_CONTROL_CHAN_GAIN
 352

	)

389 
	#SX1302_REG_RX_TOP_CLK_CONTROL_CHAN_CLK_EN
 353

	)

390 
	#SX1302_REG_RX_TOP_DUMMY0_DUMMY0
 354

	)

391 
	#SX1302_REG_RX_TOP_CORR_CLOCK_ENABLE_CLK_EN
 355

	)

392 
	#SX1302_REG_RX_TOP_CORRELATOR_EN_CORR_EN
 356

	)

393 
	#SX1302_REG_RX_TOP_CORRELATOR_SF_EN_CORR_SF_EN
 357

	)

394 
	#SX1302_REG_RX_TOP_CORRELATOR_ENABLE_ONLY_FIRST_DET_EDGE_ENABLE_ONLY_FIRST_DET_EDGE
 358

	)

395 
	#SX1302_REG_RX_TOP_CORRELATOR_ENABLE_ACC_CLEAR_ENABLE_CORR_ACC_CLEAR
 359

	)

396 
	#SX1302_REG_RX_TOP_SF5_CFG1_ACC_WIN_LEN
 360

	)

397 
	#SX1302_REG_RX_TOP_SF5_CFG1_ACC_PEAK_SUM_EN
 361

	)

398 
	#SX1302_REG_RX_TOP_SF5_CFG1_ACC_PEAK_POS_SEL
 362

	)

399 
	#SX1302_REG_RX_TOP_SF5_CFG1_ACC_COEFF
 363

	)

400 
	#SX1302_REG_RX_TOP_SF5_CFG1_ACC_AUTO_RESCALE
 364

	)

401 
	#SX1302_REG_RX_TOP_SF5_CFG1_ACC_2_SAME_PEAKS
 365

	)

402 
	#SX1302_REG_RX_TOP_SF5_CFG2_ACC_MIN2
 366

	)

403 
	#SX1302_REG_RX_TOP_SF5_CFG2_ACC_PNR
 367

	)

404 
	#SX1302_REG_RX_TOP_SF5_CFG3_MIN_SINGLE_PEAK
 368

	)

405 
	#SX1302_REG_RX_TOP_SF5_CFG4_MSP_PNR
 369

	)

406 
	#SX1302_REG_RX_TOP_SF5_CFG5_MSP2_PNR
 370

	)

407 
	#SX1302_REG_RX_TOP_SF5_CFG6_MSP_PEAK_NB
 371

	)

408 
	#SX1302_REG_RX_TOP_SF5_CFG6_MSP_CNT_MODE
 372

	)

409 
	#SX1302_REG_RX_TOP_SF5_CFG6_MSP_POS_SEL
 373

	)

410 
	#SX1302_REG_RX_TOP_SF5_CFG7_MSP2_PEAK_NB
 374

	)

411 
	#SX1302_REG_RX_TOP_SF5_CFG7_NOISE_COEFF
 375

	)

412 
	#SX1302_REG_RX_TOP_SF6_CFG1_ACC_WIN_LEN
 376

	)

413 
	#SX1302_REG_RX_TOP_SF6_CFG1_ACC_PEAK_SUM_EN
 377

	)

414 
	#SX1302_REG_RX_TOP_SF6_CFG1_ACC_PEAK_POS_SEL
 378

	)

415 
	#SX1302_REG_RX_TOP_SF6_CFG1_ACC_COEFF
 379

	)

416 
	#SX1302_REG_RX_TOP_SF6_CFG1_ACC_AUTO_RESCALE
 380

	)

417 
	#SX1302_REG_RX_TOP_SF6_CFG1_ACC_2_SAME_PEAKS
 381

	)

418 
	#SX1302_REG_RX_TOP_SF6_CFG2_ACC_MIN2
 382

	)

419 
	#SX1302_REG_RX_TOP_SF6_CFG2_ACC_PNR
 383

	)

420 
	#SX1302_REG_RX_TOP_SF6_CFG3_MIN_SINGLE_PEAK
 384

	)

421 
	#SX1302_REG_RX_TOP_SF6_CFG4_MSP_PNR
 385

	)

422 
	#SX1302_REG_RX_TOP_SF6_CFG5_MSP2_PNR
 386

	)

423 
	#SX1302_REG_RX_TOP_SF6_CFG6_MSP_PEAK_NB
 387

	)

424 
	#SX1302_REG_RX_TOP_SF6_CFG6_MSP_CNT_MODE
 388

	)

425 
	#SX1302_REG_RX_TOP_SF6_CFG6_MSP_POS_SEL
 389

	)

426 
	#SX1302_REG_RX_TOP_SF6_CFG7_MSP2_PEAK_NB
 390

	)

427 
	#SX1302_REG_RX_TOP_SF6_CFG7_NOISE_COEFF
 391

	)

428 
	#SX1302_REG_RX_TOP_SF7_CFG1_ACC_WIN_LEN
 392

	)

429 
	#SX1302_REG_RX_TOP_SF7_CFG1_ACC_PEAK_SUM_EN
 393

	)

430 
	#SX1302_REG_RX_TOP_SF7_CFG1_ACC_PEAK_POS_SEL
 394

	)

431 
	#SX1302_REG_RX_TOP_SF7_CFG1_ACC_COEFF
 395

	)

432 
	#SX1302_REG_RX_TOP_SF7_CFG1_ACC_AUTO_RESCALE
 396

	)

433 
	#SX1302_REG_RX_TOP_SF7_CFG1_ACC_2_SAME_PEAKS
 397

	)

434 
	#SX1302_REG_RX_TOP_SF7_CFG2_ACC_MIN2
 398

	)

435 
	#SX1302_REG_RX_TOP_SF7_CFG2_ACC_PNR
 399

	)

436 
	#SX1302_REG_RX_TOP_SF7_CFG3_MIN_SINGLE_PEAK
 400

	)

437 
	#SX1302_REG_RX_TOP_SF7_CFG4_MSP_PNR
 401

	)

438 
	#SX1302_REG_RX_TOP_SF7_CFG5_MSP2_PNR
 402

	)

439 
	#SX1302_REG_RX_TOP_SF7_CFG6_MSP_PEAK_NB
 403

	)

440 
	#SX1302_REG_RX_TOP_SF7_CFG6_MSP_CNT_MODE
 404

	)

441 
	#SX1302_REG_RX_TOP_SF7_CFG6_MSP_POS_SEL
 405

	)

442 
	#SX1302_REG_RX_TOP_SF7_CFG7_MSP2_PEAK_NB
 406

	)

443 
	#SX1302_REG_RX_TOP_SF7_CFG7_NOISE_COEFF
 407

	)

444 
	#SX1302_REG_RX_TOP_SF8_CFG1_ACC_WIN_LEN
 408

	)

445 
	#SX1302_REG_RX_TOP_SF8_CFG1_ACC_PEAK_SUM_EN
 409

	)

446 
	#SX1302_REG_RX_TOP_SF8_CFG1_ACC_PEAK_POS_SEL
 410

	)

447 
	#SX1302_REG_RX_TOP_SF8_CFG1_ACC_COEFF
 411

	)

448 
	#SX1302_REG_RX_TOP_SF8_CFG1_ACC_AUTO_RESCALE
 412

	)

449 
	#SX1302_REG_RX_TOP_SF8_CFG1_ACC_2_SAME_PEAKS
 413

	)

450 
	#SX1302_REG_RX_TOP_SF8_CFG2_ACC_MIN2
 414

	)

451 
	#SX1302_REG_RX_TOP_SF8_CFG2_ACC_PNR
 415

	)

452 
	#SX1302_REG_RX_TOP_SF8_CFG3_MIN_SINGLE_PEAK
 416

	)

453 
	#SX1302_REG_RX_TOP_SF8_CFG4_MSP_PNR
 417

	)

454 
	#SX1302_REG_RX_TOP_SF8_CFG5_MSP2_PNR
 418

	)

455 
	#SX1302_REG_RX_TOP_SF8_CFG6_MSP_PEAK_NB
 419

	)

456 
	#SX1302_REG_RX_TOP_SF8_CFG6_MSP_CNT_MODE
 420

	)

457 
	#SX1302_REG_RX_TOP_SF8_CFG6_MSP_POS_SEL
 421

	)

458 
	#SX1302_REG_RX_TOP_SF8_CFG7_MSP2_PEAK_NB
 422

	)

459 
	#SX1302_REG_RX_TOP_SF8_CFG7_NOISE_COEFF
 423

	)

460 
	#SX1302_REG_RX_TOP_SF9_CFG1_ACC_WIN_LEN
 424

	)

461 
	#SX1302_REG_RX_TOP_SF9_CFG1_ACC_PEAK_SUM_EN
 425

	)

462 
	#SX1302_REG_RX_TOP_SF9_CFG1_ACC_PEAK_POS_SEL
 426

	)

463 
	#SX1302_REG_RX_TOP_SF9_CFG1_ACC_COEFF
 427

	)

464 
	#SX1302_REG_RX_TOP_SF9_CFG1_ACC_AUTO_RESCALE
 428

	)

465 
	#SX1302_REG_RX_TOP_SF9_CFG1_ACC_2_SAME_PEAKS
 429

	)

466 
	#SX1302_REG_RX_TOP_SF9_CFG2_ACC_MIN2
 430

	)

467 
	#SX1302_REG_RX_TOP_SF9_CFG2_ACC_PNR
 431

	)

468 
	#SX1302_REG_RX_TOP_SF9_CFG3_MIN_SINGLE_PEAK
 432

	)

469 
	#SX1302_REG_RX_TOP_SF9_CFG4_MSP_PNR
 433

	)

470 
	#SX1302_REG_RX_TOP_SF9_CFG5_MSP2_PNR
 434

	)

471 
	#SX1302_REG_RX_TOP_SF9_CFG6_MSP_PEAK_NB
 435

	)

472 
	#SX1302_REG_RX_TOP_SF9_CFG6_MSP_CNT_MODE
 436

	)

473 
	#SX1302_REG_RX_TOP_SF9_CFG6_MSP_POS_SEL
 437

	)

474 
	#SX1302_REG_RX_TOP_SF9_CFG7_MSP2_PEAK_NB
 438

	)

475 
	#SX1302_REG_RX_TOP_SF9_CFG7_NOISE_COEFF
 439

	)

476 
	#SX1302_REG_RX_TOP_SF10_CFG1_ACC_WIN_LEN
 440

	)

477 
	#SX1302_REG_RX_TOP_SF10_CFG1_ACC_PEAK_SUM_EN
 441

	)

478 
	#SX1302_REG_RX_TOP_SF10_CFG1_ACC_PEAK_POS_SEL
 442

	)

479 
	#SX1302_REG_RX_TOP_SF10_CFG1_ACC_COEFF
 443

	)

480 
	#SX1302_REG_RX_TOP_SF10_CFG1_ACC_AUTO_RESCALE
 444

	)

481 
	#SX1302_REG_RX_TOP_SF10_CFG1_ACC_2_SAME_PEAKS
 445

	)

482 
	#SX1302_REG_RX_TOP_SF10_CFG2_ACC_MIN2
 446

	)

483 
	#SX1302_REG_RX_TOP_SF10_CFG2_ACC_PNR
 447

	)

484 
	#SX1302_REG_RX_TOP_SF10_CFG3_MIN_SINGLE_PEAK
 448

	)

485 
	#SX1302_REG_RX_TOP_SF10_CFG4_MSP_PNR
 449

	)

486 
	#SX1302_REG_RX_TOP_SF10_CFG5_MSP2_PNR
 450

	)

487 
	#SX1302_REG_RX_TOP_SF10_CFG6_MSP_PEAK_NB
 451

	)

488 
	#SX1302_REG_RX_TOP_SF10_CFG6_MSP_CNT_MODE
 452

	)

489 
	#SX1302_REG_RX_TOP_SF10_CFG6_MSP_POS_SEL
 453

	)

490 
	#SX1302_REG_RX_TOP_SF10_CFG7_MSP2_PEAK_NB
 454

	)

491 
	#SX1302_REG_RX_TOP_SF10_CFG7_NOISE_COEFF
 455

	)

492 
	#SX1302_REG_RX_TOP_SF11_CFG1_ACC_WIN_LEN
 456

	)

493 
	#SX1302_REG_RX_TOP_SF11_CFG1_ACC_PEAK_SUM_EN
 457

	)

494 
	#SX1302_REG_RX_TOP_SF11_CFG1_ACC_PEAK_POS_SEL
 458

	)

495 
	#SX1302_REG_RX_TOP_SF11_CFG1_ACC_COEFF
 459

	)

496 
	#SX1302_REG_RX_TOP_SF11_CFG1_ACC_AUTO_RESCALE
 460

	)

497 
	#SX1302_REG_RX_TOP_SF11_CFG1_ACC_2_SAME_PEAKS
 461

	)

498 
	#SX1302_REG_RX_TOP_SF11_CFG2_ACC_MIN2
 462

	)

499 
	#SX1302_REG_RX_TOP_SF11_CFG2_ACC_PNR
 463

	)

500 
	#SX1302_REG_RX_TOP_SF11_CFG3_MIN_SINGLE_PEAK
 464

	)

501 
	#SX1302_REG_RX_TOP_SF11_CFG4_MSP_PNR
 465

	)

502 
	#SX1302_REG_RX_TOP_SF11_CFG5_MSP2_PNR
 466

	)

503 
	#SX1302_REG_RX_TOP_SF11_CFG6_MSP_PEAK_NB
 467

	)

504 
	#SX1302_REG_RX_TOP_SF11_CFG6_MSP_CNT_MODE
 468

	)

505 
	#SX1302_REG_RX_TOP_SF11_CFG6_MSP_POS_SEL
 469

	)

506 
	#SX1302_REG_RX_TOP_SF11_CFG7_MSP2_PEAK_NB
 470

	)

507 
	#SX1302_REG_RX_TOP_SF11_CFG7_NOISE_COEFF
 471

	)

508 
	#SX1302_REG_RX_TOP_SF12_CFG1_ACC_WIN_LEN
 472

	)

509 
	#SX1302_REG_RX_TOP_SF12_CFG1_ACC_PEAK_SUM_EN
 473

	)

510 
	#SX1302_REG_RX_TOP_SF12_CFG1_ACC_PEAK_POS_SEL
 474

	)

511 
	#SX1302_REG_RX_TOP_SF12_CFG1_ACC_COEFF
 475

	)

512 
	#SX1302_REG_RX_TOP_SF12_CFG1_ACC_AUTO_RESCALE
 476

	)

513 
	#SX1302_REG_RX_TOP_SF12_CFG1_ACC_2_SAME_PEAKS
 477

	)

514 
	#SX1302_REG_RX_TOP_SF12_CFG2_ACC_MIN2
 478

	)

515 
	#SX1302_REG_RX_TOP_SF12_CFG2_ACC_PNR
 479

	)

516 
	#SX1302_REG_RX_TOP_SF12_CFG3_MIN_SINGLE_PEAK
 480

	)

517 
	#SX1302_REG_RX_TOP_SF12_CFG4_MSP_PNR
 481

	)

518 
	#SX1302_REG_RX_TOP_SF12_CFG5_MSP2_PNR
 482

	)

519 
	#SX1302_REG_RX_TOP_SF12_CFG6_MSP_PEAK_NB
 483

	)

520 
	#SX1302_REG_RX_TOP_SF12_CFG6_MSP_CNT_MODE
 484

	)

521 
	#SX1302_REG_RX_TOP_SF12_CFG6_MSP_POS_SEL
 485

	)

522 
	#SX1302_REG_RX_TOP_SF12_CFG7_MSP2_PEAK_NB
 486

	)

523 
	#SX1302_REG_RX_TOP_SF12_CFG7_NOISE_COEFF
 487

	)

524 
	#SX1302_REG_RX_TOP_DUMMY1_DUMMY1
 488

	)

525 
	#SX1302_REG_RX_TOP_DC_NOTCH_CFG1_BW_START
 489

	)

526 
	#SX1302_REG_RX_TOP_DC_NOTCH_CFG1_AUTO_BW_RED
 490

	)

527 
	#SX1302_REG_RX_TOP_DC_NOTCH_CFG1_NO_FAST_START
 491

	)

528 
	#SX1302_REG_RX_TOP_DC_NOTCH_CFG1_BYPASS
 492

	)

529 
	#SX1302_REG_RX_TOP_DC_NOTCH_CFG1_ENABLE
 493

	)

530 
	#SX1302_REG_RX_TOP_DC_NOTCH_CFG2_BW_LOCKED
 494

	)

531 
	#SX1302_REG_RX_TOP_DC_NOTCH_CFG2_BW
 495

	)

532 
	#SX1302_REG_RX_TOP_DC_NOTCH_CFG3_BW_RED
 496

	)

533 
	#SX1302_REG_RX_TOP_DC_NOTCH_CFG4_IIR_DCC_TIME
 497

	)

534 
	#SX1302_REG_RX_TOP_RX_DFE_FIR1_0_FIR1_COEFF_0
 498

	)

535 
	#SX1302_REG_RX_TOP_RX_DFE_FIR1_1_FIR1_COEFF_1
 499

	)

536 
	#SX1302_REG_RX_TOP_RX_DFE_FIR1_2_FIR1_COEFF_2
 500

	)

537 
	#SX1302_REG_RX_TOP_RX_DFE_FIR1_3_FIR1_COEFF_3
 501

	)

538 
	#SX1302_REG_RX_TOP_RX_DFE_FIR1_4_FIR1_COEFF_4
 502

	)

539 
	#SX1302_REG_RX_TOP_RX_DFE_FIR1_5_FIR1_COEFF_5
 503

	)

540 
	#SX1302_REG_RX_TOP_RX_DFE_FIR1_6_FIR1_COEFF_6
 504

	)

541 
	#SX1302_REG_RX_TOP_RX_DFE_FIR1_7_FIR1_COEFF_7
 505

	)

542 
	#SX1302_REG_RX_TOP_RX_DFE_FIR2_0_FIR2_COEFF_0
 506

	)

543 
	#SX1302_REG_RX_TOP_RX_DFE_FIR2_1_FIR2_COEFF_1
 507

	)

544 
	#SX1302_REG_RX_TOP_RX_DFE_FIR2_2_FIR2_COEFF_2
 508

	)

545 
	#SX1302_REG_RX_TOP_RX_DFE_FIR2_3_FIR2_COEFF_3
 509

	)

546 
	#SX1302_REG_RX_TOP_RX_DFE_FIR2_4_FIR2_COEFF_4
 510

	)

547 
	#SX1302_REG_RX_TOP_RX_DFE_FIR2_5_FIR2_COEFF_5
 511

	)

548 
	#SX1302_REG_RX_TOP_RX_DFE_FIR2_6_FIR2_COEFF_6
 512

	)

549 
	#SX1302_REG_RX_TOP_RX_DFE_FIR2_7_FIR2_COEFF_7
 513

	)

550 
	#SX1302_REG_RX_TOP_RX_DFE_AGC0_RADIO_GAIN_RED_SEL
 514

	)

551 
	#SX1302_REG_RX_TOP_RX_DFE_AGC0_RADIO_GAIN_RED_DB
 515

	)

552 
	#SX1302_REG_RX_TOP_RX_DFE_AGC1_DC_COMP_EN
 516

	)

553 
	#SX1302_REG_RX_TOP_RX_DFE_AGC1_FORCE_DEFAULT_FIR
 517

	)

554 
	#SX1302_REG_RX_TOP_RX_DFE_AGC1_RSSI_EARLY_LATCH
 518

	)

555 
	#SX1302_REG_RX_TOP_RX_DFE_AGC1_FREEZE_ON_SYNC
 519

	)

556 
	#SX1302_REG_RX_TOP_RX_DFE_AGC2_DAGC_IN_COMP
 520

	)

557 
	#SX1302_REG_RX_TOP_RX_DFE_AGC2_DAGC_FIR_HYST
 521

	)

558 
	#SX1302_REG_RX_TOP_RX_DFE_AGC2_RSSI_MAX_SAMPLE
 522

	)

559 
	#SX1302_REG_RX_TOP_RX_DFE_AGC2_RSSI_MIN_SAMPLE
 523

	)

560 
	#SX1302_REG_RX_TOP_RX_DFE_GAIN0_DAGC_FIR_FAST
 524

	)

561 
	#SX1302_REG_RX_TOP_RX_DFE_GAIN0_FORCE_GAIN_FIR
 525

	)

562 
	#SX1302_REG_RX_TOP_RX_DFE_GAIN0_GAIN_FIR1
 526

	)

563 
	#SX1302_REG_RX_TOP_RX_DFE_GAIN0_GAIN_FIR2
 527

	)

564 
	#SX1302_REG_RX_TOP_DAGC_CFG_TARGET_LVL
 528

	)

565 
	#SX1302_REG_RX_TOP_DAGC_CFG_GAIN_INCR_STEP
 529

	)

566 
	#SX1302_REG_RX_TOP_DAGC_CFG_GAIN_DROP_COMP
 530

	)

567 
	#SX1302_REG_RX_TOP_DAGC_CFG_COMB_FILTER_EN
 531

	)

568 
	#SX1302_REG_RX_TOP_DAGC_CFG_NO_FREEZE_START
 532

	)

569 
	#SX1302_REG_RX_TOP_DAGC_CFG_FREEZE_ON_SYNC
 533

	)

570 
	#SX1302_REG_RX_TOP_DAGC_CNT0_SAMPLE
 534

	)

571 
	#SX1302_REG_RX_TOP_DAGC_CNT1_THR_M6
 535

	)

572 
	#SX1302_REG_RX_TOP_DAGC_CNT2_THR_M12
 536

	)

573 
	#SX1302_REG_RX_TOP_DAGC_CNT3_THR_M18
 537

	)

574 
	#SX1302_REG_RX_TOP_DAGC_CNT4_GAIN
 538

	)

575 
	#SX1302_REG_RX_TOP_DAGC_CNT4_FORCE_GAIN
 539

	)

576 
	#SX1302_REG_RX_TOP_TXRX_CFG1_PPM_OFFSET_HDR_CTRL
 540

	)

577 
	#SX1302_REG_RX_TOP_TXRX_CFG1_PPM_OFFSET
 541

	)

578 
	#SX1302_REG_RX_TOP_TXRX_CFG1_MODEM_EN
 542

	)

579 
	#SX1302_REG_RX_TOP_TXRX_CFG1_CODING_RATE
 543

	)

580 
	#SX1302_REG_RX_TOP_TXRX_CFG2_MODEM_START
 544

	)

581 
	#SX1302_REG_RX_TOP_TXRX_CFG2_CADRXTX
 545

	)

582 
	#SX1302_REG_RX_TOP_TXRX_CFG2_IMPLICIT_HEADER
 546

	)

583 
	#SX1302_REG_RX_TOP_TXRX_CFG2_CRC_EN
 547

	)

584 
	#SX1302_REG_RX_TOP_TXRX_CFG3_PAYLOAD_LENGTH
 548

	)

585 
	#SX1302_REG_RX_TOP_TXRX_CFG4_INT_STEP_ORIDE_EN
 549

	)

586 
	#SX1302_REG_RX_TOP_TXRX_CFG4_INT_STEP_ORIDE
 550

	)

587 
	#SX1302_REG_RX_TOP_TXRX_CFG5_HEADER_DIFF_MODE
 551

	)

588 
	#SX1302_REG_RX_TOP_TXRX_CFG5_ZERO_PAD
 552

	)

589 
	#SX1302_REG_RX_TOP_TXRX_CFG6_PREAMBLE_SYMB_NB
 553

	)

590 
	#SX1302_REG_RX_TOP_TXRX_CFG7_PREAMBLE_SYMB_NB
 554

	)

591 
	#SX1302_REG_RX_TOP_TXRX_CFG8_AUTO_ACK_INT_DELAY
 555

	)

592 
	#SX1302_REG_RX_TOP_TXRX_CFG8_AUTO_ACK_RX
 556

	)

593 
	#SX1302_REG_RX_TOP_TXRX_CFG8_AUTO_ACK_TX
 557

	)

594 
	#SX1302_REG_RX_TOP_TXRX_CFG8_POST_PREAMBLE_GAP_LONG
 558

	)

595 
	#SX1302_REG_RX_TOP_TXRX_CFG9_FINE_SYNCH_EN_SF12
 559

	)

596 
	#SX1302_REG_RX_TOP_TXRX_CFG9_FINE_SYNCH_EN_SF11
 560

	)

597 
	#SX1302_REG_RX_TOP_TXRX_CFG9_FINE_SYNCH_EN_SF10
 561

	)

598 
	#SX1302_REG_RX_TOP_TXRX_CFG9_FINE_SYNCH_EN_SF9
 562

	)

599 
	#SX1302_REG_RX_TOP_TXRX_CFG9_FINE_SYNCH_EN_SF8
 563

	)

600 
	#SX1302_REG_RX_TOP_TXRX_CFG9_FINE_SYNCH_EN_SF7
 564

	)

601 
	#SX1302_REG_RX_TOP_TXRX_CFG9_FINE_SYNCH_EN_SF6
 565

	)

602 
	#SX1302_REG_RX_TOP_TXRX_CFG9_FINE_SYNCH_EN_SF5
 566

	)

603 
	#SX1302_REG_RX_TOP_RX_CFG0_DFT_PEAK_EN
 567

	)

604 
	#SX1302_REG_RX_TOP_RX_CFG0_CHIRP_INVERT
 568

	)

605 
	#SX1302_REG_RX_TOP_RX_CFG0_SWAP_IQ
 569

	)

606 
	#SX1302_REG_RX_TOP_RX_CFG0_CONTINUOUS
 570

	)

607 
	#SX1302_REG_RX_TOP_RX_CFG1_DETECT_TIMEOUT
 571

	)

608 
	#SX1302_REG_RX_TOP_RX_CFG2_CLK_EN_RESYNC_DIN
 572

	)

609 
	#SX1302_REG_RX_TOP_RX_CFG2_LLR_SCALE
 573

	)

610 
	#SX1302_REG_RX_TOP_FRAME_SYNCH0_SF5_PEAK1_POS_SF5
 574

	)

611 
	#SX1302_REG_RX_TOP_FRAME_SYNCH1_SF5_PEAK2_POS_SF5
 575

	)

612 
	#SX1302_REG_RX_TOP_FRAME_SYNCH0_SF6_PEAK1_POS_SF6
 576

	)

613 
	#SX1302_REG_RX_TOP_FRAME_SYNCH1_SF6_PEAK2_POS_SF6
 577

	)

614 
	#SX1302_REG_RX_TOP_FRAME_SYNCH0_SF7TO12_PEAK1_POS_SF7TO12
 578

	)

615 
	#SX1302_REG_RX_TOP_FRAME_SYNCH1_SF7TO12_PEAK2_POS_SF7TO12
 579

	)

616 
	#SX1302_REG_RX_TOP_FRAME_SYNCH2_FINETIME_ON_LAST
 580

	)

617 
	#SX1302_REG_RX_TOP_FRAME_SYNCH2_AUTO_SCALE
 581

	)

618 
	#SX1302_REG_RX_TOP_FRAME_SYNCH2_DROP_ON_SYNCH
 582

	)

619 
	#SX1302_REG_RX_TOP_FRAME_SYNCH2_GAIN
 583

	)

620 
	#SX1302_REG_RX_TOP_FRAME_SYNCH2_TIMEOUT_OPT
 584

	)

621 
	#SX1302_REG_RX_TOP_FINE_TIMING_A_0_GAIN_P_HDR_RED
 585

	)

622 
	#SX1302_REG_RX_TOP_FINE_TIMING_A_0_ROUNDING
 586

	)

623 
	#SX1302_REG_RX_TOP_FINE_TIMING_A_0_POS_LIMIT
 587

	)

624 
	#SX1302_REG_RX_TOP_FINE_TIMING_A_0_SUM_SIZE
 588

	)

625 
	#SX1302_REG_RX_TOP_FINE_TIMING_A_0_MODE
 589

	)

626 
	#SX1302_REG_RX_TOP_FINE_TIMING_A_1_GAIN_P_AUTO
 590

	)

627 
	#SX1302_REG_RX_TOP_FINE_TIMING_A_1_GAIN_P_PAYLOAD
 591

	)

628 
	#SX1302_REG_RX_TOP_FINE_TIMING_A_1_GAIN_P_PREAMB
 592

	)

629 
	#SX1302_REG_RX_TOP_FINE_TIMING_A_2_GAIN_I_AUTO
 593

	)

630 
	#SX1302_REG_RX_TOP_FINE_TIMING_A_2_GAIN_I_PAYLOAD
 594

	)

631 
	#SX1302_REG_RX_TOP_FINE_TIMING_A_2_GAIN_I_PREAMB
 595

	)

632 
	#SX1302_REG_RX_TOP_FINE_TIMING_A_3_FINESYNCH_SUM
 596

	)

633 
	#SX1302_REG_RX_TOP_FINE_TIMING_A_3_FINESYNCH_GAIN
 597

	)

634 
	#SX1302_REG_RX_TOP_FINE_TIMING_A_4_GAIN_I_EN_SF8
 598

	)

635 
	#SX1302_REG_RX_TOP_FINE_TIMING_A_4_GAIN_I_EN_SF7
 599

	)

636 
	#SX1302_REG_RX_TOP_FINE_TIMING_A_4_GAIN_I_EN_SF6
 600

	)

637 
	#SX1302_REG_RX_TOP_FINE_TIMING_A_4_GAIN_I_EN_SF5
 601

	)

638 
	#SX1302_REG_RX_TOP_FINE_TIMING_A_5_GAIN_I_EN_SF12
 602

	)

639 
	#SX1302_REG_RX_TOP_FINE_TIMING_A_5_GAIN_I_EN_SF11
 603

	)

640 
	#SX1302_REG_RX_TOP_FINE_TIMING_A_5_GAIN_I_EN_SF10
 604

	)

641 
	#SX1302_REG_RX_TOP_FINE_TIMING_A_5_GAIN_I_EN_SF9
 605

	)

642 
	#SX1302_REG_RX_TOP_FINE_TIMING_A_6_GAIN_P_PREAMB_SF12
 606

	)

643 
	#SX1302_REG_RX_TOP_FINE_TIMING_A_6_GAIN_P_PREAMB_SF5_6
 607

	)

644 
	#SX1302_REG_RX_TOP_FINE_TIMING_7_GAIN_I_AUTO_MAX
 608

	)

645 
	#SX1302_REG_RX_TOP_FINE_TIMING_7_GAIN_P_AUTO_MAX
 609

	)

646 
	#SX1302_REG_RX_TOP_FINE_TIMING_B_0_GAIN_P_HDR_RED
 610

	)

647 
	#SX1302_REG_RX_TOP_FINE_TIMING_B_0_ROUNDING
 611

	)

648 
	#SX1302_REG_RX_TOP_FINE_TIMING_B_0_POS_LIMIT
 612

	)

649 
	#SX1302_REG_RX_TOP_FINE_TIMING_B_0_SUM_SIZE
 613

	)

650 
	#SX1302_REG_RX_TOP_FINE_TIMING_B_0_MODE
 614

	)

651 
	#SX1302_REG_RX_TOP_FINE_TIMING_B_1_GAIN_P_AUTO
 615

	)

652 
	#SX1302_REG_RX_TOP_FINE_TIMING_B_1_GAIN_P_PAYLOAD
 616

	)

653 
	#SX1302_REG_RX_TOP_FINE_TIMING_B_1_GAIN_P_PREAMB
 617

	)

654 
	#SX1302_REG_RX_TOP_FINE_TIMING_B_2_GAIN_I_AUTO
 618

	)

655 
	#SX1302_REG_RX_TOP_FINE_TIMING_B_2_GAIN_I_PAYLOAD
 619

	)

656 
	#SX1302_REG_RX_TOP_FINE_TIMING_B_2_GAIN_I_PREAMB
 620

	)

657 
	#SX1302_REG_RX_TOP_FINE_TIMING_B_3_FINESYNCH_SUM
 621

	)

658 
	#SX1302_REG_RX_TOP_FINE_TIMING_B_3_FINESYNCH_GAIN
 622

	)

659 
	#SX1302_REG_RX_TOP_FINE_TIMING_B_4_GAIN_I_EN_SF8
 623

	)

660 
	#SX1302_REG_RX_TOP_FINE_TIMING_B_4_GAIN_I_EN_SF7
 624

	)

661 
	#SX1302_REG_RX_TOP_FINE_TIMING_B_4_GAIN_I_EN_SF6
 625

	)

662 
	#SX1302_REG_RX_TOP_FINE_TIMING_B_4_GAIN_I_EN_SF5
 626

	)

663 
	#SX1302_REG_RX_TOP_FINE_TIMING_B_5_GAIN_I_EN_SF12
 627

	)

664 
	#SX1302_REG_RX_TOP_FINE_TIMING_B_5_GAIN_I_EN_SF11
 628

	)

665 
	#SX1302_REG_RX_TOP_FINE_TIMING_B_5_GAIN_I_EN_SF10
 629

	)

666 
	#SX1302_REG_RX_TOP_FINE_TIMING_B_5_GAIN_I_EN_SF9
 630

	)

667 
	#SX1302_REG_RX_TOP_FINE_TIMING_B_6_GAIN_P_PREAMB_SF12
 631

	)

668 
	#SX1302_REG_RX_TOP_FINE_TIMING_B_6_GAIN_P_PREAMB_SF5_6
 632

	)

669 
	#SX1302_REG_RX_TOP_FREQ_TO_TIME0_FREQ_TO_TIME_DRIFT_MANT
 633

	)

670 
	#SX1302_REG_RX_TOP_FREQ_TO_TIME1_FREQ_TO_TIME_DRIFT_MANT
 634

	)

671 
	#SX1302_REG_RX_TOP_FREQ_TO_TIME2_FREQ_TO_TIME_DRIFT_EXP
 635

	)

672 
	#SX1302_REG_RX_TOP_FREQ_TO_TIME3_FREQ_TO_TIME_INVERT_FREQ_DELTA
 636

	)

673 
	#SX1302_REG_RX_TOP_FREQ_TO_TIME3_FREQ_TO_TIME_INVERT_FINE_DELTA
 637

	)

674 
	#SX1302_REG_RX_TOP_FREQ_TO_TIME3_FREQ_TO_TIME_INVERT_FREQ_ERROR
 638

	)

675 
	#SX1302_REG_RX_TOP_FREQ_TO_TIME3_FREQ_TO_TIME_INVERT_TIME_SYMB
 639

	)

676 
	#SX1302_REG_RX_TOP_FREQ_TO_TIME3_FREQ_TO_TIME_INVERT_TIME_OFFSET
 640

	)

677 
	#SX1302_REG_RX_TOP_FREQ_TO_TIME3_FREQ_TO_TIME_INVERT_DETECT
 641

	)

678 
	#SX1302_REG_RX_TOP_FREQ_TO_TIME4_FREQ_TO_TIME_INVERT_RNG
 642

	)

679 
	#SX1302_REG_RX_TOP_FREQ_TRACK_A_0_FREQ_TRACK_EN_SF8
 643

	)

680 
	#SX1302_REG_RX_TOP_FREQ_TRACK_A_0_FREQ_TRACK_EN_SF7
 644

	)

681 
	#SX1302_REG_RX_TOP_FREQ_TRACK_A_0_FREQ_TRACK_EN_SF6
 645

	)

682 
	#SX1302_REG_RX_TOP_FREQ_TRACK_A_0_FREQ_TRACK_EN_SF5
 646

	)

683 
	#SX1302_REG_RX_TOP_FREQ_TRACK_A_1_FREQ_TRACK_EN_SF12
 647

	)

684 
	#SX1302_REG_RX_TOP_FREQ_TRACK_A_1_FREQ_TRACK_EN_SF11
 648

	)

685 
	#SX1302_REG_RX_TOP_FREQ_TRACK_A_1_FREQ_TRACK_EN_SF10
 649

	)

686 
	#SX1302_REG_RX_TOP_FREQ_TRACK_A_1_FREQ_TRACK_EN_SF9
 650

	)

687 
	#SX1302_REG_RX_TOP_FREQ_TRACK_B_0_FREQ_TRACK_EN_SF8
 651

	)

688 
	#SX1302_REG_RX_TOP_FREQ_TRACK_B_0_FREQ_TRACK_EN_SF7
 652

	)

689 
	#SX1302_REG_RX_TOP_FREQ_TRACK_B_0_FREQ_TRACK_EN_SF6
 653

	)

690 
	#SX1302_REG_RX_TOP_FREQ_TRACK_B_0_FREQ_TRACK_EN_SF5
 654

	)

691 
	#SX1302_REG_RX_TOP_FREQ_TRACK_B_1_FREQ_TRACK_EN_SF12
 655

	)

692 
	#SX1302_REG_RX_TOP_FREQ_TRACK_B_1_FREQ_TRACK_EN_SF11
 656

	)

693 
	#SX1302_REG_RX_TOP_FREQ_TRACK_B_1_FREQ_TRACK_EN_SF10
 657

	)

694 
	#SX1302_REG_RX_TOP_FREQ_TRACK_B_1_FREQ_TRACK_EN_SF9
 658

	)

695 
	#SX1302_REG_RX_TOP_FREQ_TRACK2_FREQ_TRACK_FINE
 659

	)

696 
	#SX1302_REG_RX_TOP_FREQ_TRACK2_FREQ_TRACK_HDR_SKIP
 660

	)

697 
	#SX1302_REG_RX_TOP_FREQ_TRACK3_FREQ_SYNCH_GAIN
 661

	)

698 
	#SX1302_REG_RX_TOP_FREQ_TRACK3_FREQ_TRACK_AUTO_THR
 662

	)

699 
	#SX1302_REG_RX_TOP_FREQ_TRACK4_SNR_MIN_WINDOW
 663

	)

700 
	#SX1302_REG_RX_TOP_FREQ_TRACK4_GAIN_AUTO_SNR_MIN
 664

	)

701 
	#SX1302_REG_RX_TOP_FREQ_TRACK4_FREQ_SYNCH_THR
 665

	)

702 
	#SX1302_REG_RX_TOP_DETECT_MSP0_MSP_PNR
 666

	)

703 
	#SX1302_REG_RX_TOP_DETECT_MSP1_MSP2_PNR
 667

	)

704 
	#SX1302_REG_RX_TOP_DETECT_MSP2_MSP2_PEAK_NB
 668

	)

705 
	#SX1302_REG_RX_TOP_DETECT_MSP2_MSP_PEAK_NB
 669

	)

706 
	#SX1302_REG_RX_TOP_DETECT_MSP3_ACC_MIN2
 670

	)

707 
	#SX1302_REG_RX_TOP_DETECT_MSP3_ACC_WIN_LEN
 671

	)

708 
	#SX1302_REG_RX_TOP_DETECT_MSP3_MSP_POS_SEL
 672

	)

709 
	#SX1302_REG_RX_TOP_DETECT_MSP3_MSP_CNT_MODE
 673

	)

710 
	#SX1302_REG_RX_TOP_DETECT_ACC1_USE_GAIN_SYMB
 674

	)

711 
	#SX1302_REG_RX_TOP_DETECT_ACC1_ACC_PNR
 675

	)

712 
	#SX1302_REG_RX_TOP_DETECT_ACC2_NOISE_COEFF
 676

	)

713 
	#SX1302_REG_RX_TOP_DETECT_ACC2_ACC_COEFF
 677

	)

714 
	#SX1302_REG_RX_TOP_DETECT_ACC2_ACC_2_SAME_PEAKS
 678

	)

715 
	#SX1302_REG_RX_TOP_DETECT_ACC2_ACC_AUTO_RESCALE
 679

	)

716 
	#SX1302_REG_RX_TOP_DETECT_ACC2_ACC_PEAK_POS_SEL
 680

	)

717 
	#SX1302_REG_RX_TOP_DETECT_ACC2_ACC_PEAK_SUM_EN
 681

	)

718 
	#SX1302_REG_RX_TOP_DETECT_ACC3_MIN_SINGLE_PEAK
 682

	)

719 
	#SX1302_REG_RX_TOP_TIMESTAMP_SEL_SNR_MIN
 683

	)

720 
	#SX1302_REG_RX_TOP_TIMESTAMP_ENABLE
 684

	)

721 
	#SX1302_REG_RX_TOP_TIMESTAMP_NB_SYMB
 685

	)

722 
	#SX1302_REG_RX_TOP_MODEM_BUSY_MSB_RX_MODEM_BUSY
 686

	)

723 
	#SX1302_REG_RX_TOP_MODEM_BUSY_LSB_RX_MODEM_BUSY
 687

	)

724 
	#SX1302_REG_RX_TOP_MODEM_STATE_RX_MODEM_STS_SPARE
 688

	)

725 
	#SX1302_REG_RX_TOP_MODEM_STATE_RX_MODEM_STATE
 689

	)

726 
	#SX1302_REG_RX_TOP_MODEM_SYNC_DELTA_MSB_PEAK_POS_FINE_GAIN_H
 690

	)

727 
	#SX1302_REG_RX_TOP_MODEM_SYNC_DELTA_MSB_PEAK_POS_FINE_GAIN_L
 691

	)

728 
	#SX1302_REG_RX_TOP_MODEM_SYNC_DELTA_MSB_PEAK_POS_FINE_SIGN
 692

	)

729 
	#SX1302_REG_RX_TOP_MODEM_SYNC_DELTA_MSB_MODEM_SYNC_DELTA
 693

	)

730 
	#SX1302_REG_RX_TOP_MODEM_SYNC_DELTA_LSB_MODEM_SYNC_DELTA
 694

	)

731 
	#SX1302_REG_RX_TOP_MODEM_PPM_OFFSET1_PPM_OFFSET_SF8
 695

	)

732 
	#SX1302_REG_RX_TOP_MODEM_PPM_OFFSET1_PPM_OFFSET_SF7
 696

	)

733 
	#SX1302_REG_RX_TOP_MODEM_PPM_OFFSET1_PPM_OFFSET_SF6
 697

	)

734 
	#SX1302_REG_RX_TOP_MODEM_PPM_OFFSET1_PPM_OFFSET_SF5
 698

	)

735 
	#SX1302_REG_RX_TOP_MODEM_PPM_OFFSET2_PPM_OFFSET_SF12
 699

	)

736 
	#SX1302_REG_RX_TOP_MODEM_PPM_OFFSET2_PPM_OFFSET_SF11
 700

	)

737 
	#SX1302_REG_RX_TOP_MODEM_PPM_OFFSET2_PPM_OFFSET_SF10
 701

	)

738 
	#SX1302_REG_RX_TOP_MODEM_PPM_OFFSET2_PPM_OFFSET_SF9
 702

	)

739 
	#SX1302_REG_RX_TOP_MODEM_CLOCK_GATE_OVERRIDE_3_CLK_OVERRIDE
 703

	)

740 
	#SX1302_REG_RX_TOP_MODEM_CLOCK_GATE_OVERRIDE_2_CLK_OVERRIDE
 704

	)

741 
	#SX1302_REG_RX_TOP_MODEM_CLOCK_GATE_OVERRIDE_1_CLK_OVERRIDE
 705

	)

742 
	#SX1302_REG_RX_TOP_MODEM_CLOCK_GATE_OVERRIDE_0_CLK_OVERRIDE
 706

	)

743 
	#SX1302_REG_RX_TOP_DUMMY2_DUMMY2
 707

	)

744 
	#SX1302_REG_RX_TOP_RX_BUFFER_DEBUG_MODE
 708

	)

745 
	#SX1302_REG_RX_TOP_RX_BUFFER_DIRECT_RAM_IF
 709

	)

746 
	#SX1302_REG_RX_TOP_RX_BUFFER_LEGACY_TIMESTAMP
 710

	)

747 
	#SX1302_REG_RX_TOP_RX_BUFFER_STORE_HEADER_ERR_META
 711

	)

748 
	#SX1302_REG_RX_TOP_RX_BUFFER_STORE_SYNC_FAIL_META
 712

	)

749 
	#SX1302_REG_RX_TOP_RX_BUFFER_TIMESTAMP_CFG_MAX_TS_METRICS
 713

	)

750 
	#SX1302_REG_RX_TOP_RX_BUFFER_IRQ_CTRL_MSB_RX_BUFFER_IRQ_THRESHOLD
 714

	)

751 
	#SX1302_REG_RX_TOP_RX_BUFFER_IRQ_CTRL_LSB_RX_BUFFER_IRQ_THRESHOLD
 715

	)

752 
	#SX1302_REG_RX_TOP_RX_BUFFER_LAST_ADDR_READ_MSB_LAST_ADDR_READ
 716

	)

753 
	#SX1302_REG_RX_TOP_RX_BUFFER_LAST_ADDR_READ_LSB_LAST_ADDR_READ
 717

	)

754 
	#SX1302_REG_RX_TOP_RX_BUFFER_LAST_ADDR_WRITE_MSB_LAST_ADDR_WRITE
 718

	)

755 
	#SX1302_REG_RX_TOP_RX_BUFFER_LAST_ADDR_WRITE_LSB_LAST_ADDR_WRITE
 719

	)

756 
	#SX1302_REG_RX_TOP_RX_BUFFER_NB_BYTES_MSB_RX_BUFFER_NB_BYTES
 720

	)

757 
	#SX1302_REG_RX_TOP_RX_BUFFER_NB_BYTES_LSB_RX_BUFFER_NB_BYTES
 721

	)

758 
	#SX1302_REG_RX_TOP_MULTI_SF_SYNC_ERR_PKT_CNT_MULTI_SF_SYNC_ERR_PKTS
 722

	)

759 
	#SX1302_REG_RX_TOP_MULTI_SF_PLD_ERR_PKT_CNT_MULTI_SF_PLD_ERR_PKTS
 723

	)

760 
	#SX1302_REG_RX_TOP_MULTI_SF_GOOD_PKT_CNT_MULTI_SF_GOOD_PKTS
 724

	)

761 
	#SX1302_REG_RX_TOP_SERV_MODEM_SYNC_ERR_PKT_CNT_SERV_MODEM_SYNC_ERR_PKTS
 725

	)

762 
	#SX1302_REG_RX_TOP_SERV_MODEM_PLD_ERR_PKT_CNT_SERV_MODEM_PLD_ERR_PKTS
 726

	)

763 
	#SX1302_REG_RX_TOP_SERV_MODEM_GOOD_PKT_CNT_SERV_MODEM_GOOD_PKTS
 727

	)

764 
	#SX1302_REG_RX_TOP_GFSK_MODEM_SYNC_ERR_PKT_CNT_GFSK_MODEM_SYNC_ERR_PKTS
 728

	)

765 
	#SX1302_REG_RX_TOP_GFSK_MODEM_PLD_ERR_PKT_CNT_GFSK_MODEM_PLD_ERR_PKTS
 729

	)

766 
	#SX1302_REG_RX_TOP_GFSK_MODEM_GOOD_PKT_CNT_GFSK_MODEM_GOOD_PKTS
 730

	)

767 
	#SX1302_REG_RX_TOP_BAD_MODEM_ID_WRITE_0_BAD_MODEM_ID_WRITE
 731

	)

768 
	#SX1302_REG_RX_TOP_BAD_MODEM_ID_WRITE_1_BAD_MODEM_ID_WRITE
 732

	)

769 
	#SX1302_REG_RX_TOP_BAD_MODEM_ID_WRITE_2_BAD_MODEM_ID_WRITE
 733

	)

770 
	#SX1302_REG_RX_TOP_BAD_MODEM_ID_READ_0_BAD_MODEM_ID_READ
 734

	)

771 
	#SX1302_REG_RX_TOP_BAD_MODEM_ID_READ_1_BAD_MODEM_ID_READ
 735

	)

772 
	#SX1302_REG_RX_TOP_BAD_MODEM_ID_READ_2_BAD_MODEM_ID_READ
 736

	)

773 
	#SX1302_REG_RX_TOP_CLOCK_GATE_OVERRIDE_0_CLK_OVERRIDE
 737

	)

774 
	#SX1302_REG_RX_TOP_SAMPLE_4_MSPS_LATCHED_125K_SAMPLE_4_MSPS_LATCHED_125K
 738

	)

775 
	#SX1302_REG_RX_TOP_DUMMY3_DUMMY3
 739

	)

776 
	#SX1302_REG_ARB_MCU_CTRL_CLK_EN
 740

	)

777 
	#SX1302_REG_ARB_MCU_CTRL_RADIO_RST
 741

	)

778 
	#SX1302_REG_ARB_MCU_CTRL_FORCE_HOST_FE_CTRL
 742

	)

779 
	#SX1302_REG_ARB_MCU_CTRL_MCU_CLEAR
 743

	)

780 
	#SX1302_REG_ARB_MCU_CTRL_HOST_PROG
 744

	)

781 
	#SX1302_REG_ARB_MCU_CTRL_PARITY_ERROR
 745

	)

782 
	#SX1302_REG_ARB_MCU_MCU_ARB_STATUS_MCU_ARB_STATUS
 746

	)

783 
	#SX1302_REG_ARB_MCU_UART_CFG_MSBF
 747

	)

784 
	#SX1302_REG_ARB_MCU_UART_CFG_PAR_EN
 748

	)

785 
	#SX1302_REG_ARB_MCU_UART_CFG_PAR_MODE
 749

	)

786 
	#SX1302_REG_ARB_MCU_UART_CFG_START_LEN
 750

	)

787 
	#SX1302_REG_ARB_MCU_UART_CFG_STOP_LEN
 751

	)

788 
	#SX1302_REG_ARB_MCU_UART_CFG_WORD_LEN
 752

	)

789 
	#SX1302_REG_ARB_MCU_UART_CFG2_BIT_RATE
 753

	)

790 
	#SX1302_REG_ARB_MCU_ARB_DEBUG_CFG_0_ARB_DEBUG_CFG_0
 754

	)

791 
	#SX1302_REG_ARB_MCU_ARB_DEBUG_CFG_1_ARB_DEBUG_CFG_1
 755

	)

792 
	#SX1302_REG_ARB_MCU_ARB_DEBUG_CFG_2_ARB_DEBUG_CFG_2
 756

	)

793 
	#SX1302_REG_ARB_MCU_ARB_DEBUG_CFG_3_ARB_DEBUG_CFG_3
 757

	)

794 
	#SX1302_REG_ARB_MCU_ARB_DEBUG_STS_0_ARB_DEBUG_STS_0
 758

	)

795 
	#SX1302_REG_ARB_MCU_ARB_DEBUG_STS_1_ARB_DEBUG_STS_1
 759

	)

796 
	#SX1302_REG_ARB_MCU_ARB_DEBUG_STS_2_ARB_DEBUG_STS_2
 760

	)

797 
	#SX1302_REG_ARB_MCU_ARB_DEBUG_STS_3_ARB_DEBUG_STS_3
 761

	)

798 
	#SX1302_REG_ARB_MCU_ARB_DEBUG_STS_4_ARB_DEBUG_STS_4
 762

	)

799 
	#SX1302_REG_ARB_MCU_ARB_DEBUG_STS_5_ARB_DEBUG_STS_5
 763

	)

800 
	#SX1302_REG_ARB_MCU_ARB_DEBUG_STS_6_ARB_DEBUG_STS_6
 764

	)

801 
	#SX1302_REG_ARB_MCU_ARB_DEBUG_STS_7_ARB_DEBUG_STS_7
 765

	)

802 
	#SX1302_REG_ARB_MCU_ARB_DEBUG_STS_8_ARB_DEBUG_STS_8
 766

	)

803 
	#SX1302_REG_ARB_MCU_ARB_DEBUG_STS_9_ARB_DEBUG_STS_9
 767

	)

804 
	#SX1302_REG_ARB_MCU_ARB_DEBUG_STS_10_ARB_DEBUG_STS_10
 768

	)

805 
	#SX1302_REG_ARB_MCU_ARB_DEBUG_STS_11_ARB_DEBUG_STS_11
 769

	)

806 
	#SX1302_REG_ARB_MCU_ARB_DEBUG_STS_12_ARB_DEBUG_STS_12
 770

	)

807 
	#SX1302_REG_ARB_MCU_ARB_DEBUG_STS_13_ARB_DEBUG_STS_13
 771

	)

808 
	#SX1302_REG_ARB_MCU_ARB_DEBUG_STS_14_ARB_DEBUG_STS_14
 772

	)

809 
	#SX1302_REG_ARB_MCU_ARB_DEBUG_STS_15_ARB_DEBUG_STS_15
 773

	)

810 
	#SX1302_REG_ARB_MCU_CHANNEL_SYNC_OFFSET_01_CHANNEL_1_OFFSET
 774

	)

811 
	#SX1302_REG_ARB_MCU_CHANNEL_SYNC_OFFSET_01_CHANNEL_0_OFFSET
 775

	)

812 
	#SX1302_REG_ARB_MCU_CHANNEL_SYNC_OFFSET_23_CHANNEL_3_OFFSET
 776

	)

813 
	#SX1302_REG_ARB_MCU_CHANNEL_SYNC_OFFSET_23_CHANNEL_2_OFFSET
 777

	)

814 
	#SX1302_REG_ARB_MCU_CHANNEL_SYNC_OFFSET_45_CHANNEL_5_OFFSET
 778

	)

815 
	#SX1302_REG_ARB_MCU_CHANNEL_SYNC_OFFSET_45_CHANNEL_4_OFFSET
 779

	)

816 
	#SX1302_REG_ARB_MCU_CHANNEL_SYNC_OFFSET_67_CHANNEL_7_OFFSET
 780

	)

817 
	#SX1302_REG_ARB_MCU_CHANNEL_SYNC_OFFSET_67_CHANNEL_6_OFFSET
 781

	)

818 
	#SX1302_REG_ARB_MCU_DUMMY_DUMMY3
 782

	)

819 
	#SX1302_REG_RADIO_FE_GLBL_CTRL_DECIM_B_CLR
 783

	)

820 
	#SX1302_REG_RADIO_FE_GLBL_CTRL_DECIM_A_CLR
 784

	)

821 
	#SX1302_REG_RADIO_FE_CTRL0_RADIO_A_DC_NOTCH_EN
 785

	)

822 
	#SX1302_REG_RADIO_FE_CTRL0_RADIO_A_FORCE_HOST_FILTER_GAIN
 786

	)

823 
	#SX1302_REG_RADIO_FE_CTRL0_RADIO_A_HOST_FILTER_GAIN
 787

	)

824 
	#SX1302_REG_RADIO_FE_RSSI_DB_DEF_RADIO_A_RSSI_DB_DEFAULT_VALUE
 788

	)

825 
	#SX1302_REG_RADIO_FE_RSSI_DEC_DEF_RADIO_A_RSSI_DEC_DEFAULT_VALUE
 789

	)

826 
	#SX1302_REG_RADIO_FE_RSSI_DEC_RD_RADIO_A_RSSI_DEC_OUT
 790

	)

827 
	#SX1302_REG_RADIO_FE_RSSI_BB_RD_RADIO_A_RSSI_BB_OUT
 791

	)

828 
	#SX1302_REG_RADIO_FE_DEC_FILTER_RD_RADIO_A_DEC_FILTER_GAIN
 792

	)

829 
	#SX1302_REG_RADIO_FE_RSSI_BB_FILTER_ALPHA_RADIO_A_RSSI_BB_FILTER_ALPHA
 793

	)

830 
	#SX1302_REG_RADIO_FE_RSSI_DEC_FILTER_ALPHA_RADIO_A_RSSI_DEC_FILTER_ALPHA
 794

	)

831 
	#SX1302_REG_RADIO_FE_IQ_COMP_AMP_COEFF_RADIO_A_AMP_COEFF
 795

	)

832 
	#SX1302_REG_RADIO_FE_IQ_COMP_PHI_COEFF_RADIO_A_PHI_COEFF
 796

	)

833 
	#SX1302_REG_RADIO_FE_RADIO_DIO_TEST_MODE_RADIO_A_DIO_TEST_MODE
 797

	)

834 
	#SX1302_REG_RADIO_FE_RADIO_DIO_TEST_DIR_RADIO_A_DIO_TEST_DIR
 798

	)

835 
	#SX1302_REG_RADIO_FE_RADIO_DIO_DIR_RADIO_A_DIO_DIR
 799

	)

836 
	#SX1302_REG_RADIO_FE_CTRL0_RADIO_B_DC_NOTCH_EN
 800

	)

837 
	#SX1302_REG_RADIO_FE_CTRL0_RADIO_B_FORCE_HOST_FILTER_GAIN
 801

	)

838 
	#SX1302_REG_RADIO_FE_CTRL0_RADIO_B_HOST_FILTER_GAIN
 802

	)

839 
	#SX1302_REG_RADIO_FE_RSSI_DB_DEF_RADIO_B_RSSI_DB_DEFAULT_VALUE
 803

	)

840 
	#SX1302_REG_RADIO_FE_RSSI_DEC_DEF_RADIO_B_RSSI_DEC_DEFAULT_VALUE
 804

	)

841 
	#SX1302_REG_RADIO_FE_RSSI_DEC_RD_RADIO_B_RSSI_DEC_OUT
 805

	)

842 
	#SX1302_REG_RADIO_FE_RSSI_BB_RD_RADIO_B_RSSI_BB_OUT
 806

	)

843 
	#SX1302_REG_RADIO_FE_DEC_FILTER_RD_RADIO_B_DEC_FILTER_GAIN
 807

	)

844 
	#SX1302_REG_RADIO_FE_RSSI_BB_FILTER_ALPHA_RADIO_B_RSSI_BB_FILTER_ALPHA
 808

	)

845 
	#SX1302_REG_RADIO_FE_RSSI_DEC_FILTER_ALPHA_RADIO_B_RSSI_DEC_FILTER_ALPHA
 809

	)

846 
	#SX1302_REG_RADIO_FE_IQ_COMP_AMP_COEFF_RADIO_B_AMP_COEFF
 810

	)

847 
	#SX1302_REG_RADIO_FE_IQ_COMP_PHI_COEFF_RADIO_B_PHI_COEFF
 811

	)

848 
	#SX1302_REG_RADIO_FE_RADIO_DIO_TEST_MODE_RADIO_B_DIO_TEST_MODE
 812

	)

849 
	#SX1302_REG_RADIO_FE_RADIO_DIO_TEST_DIR_RADIO_B_DIO_TEST_DIR
 813

	)

850 
	#SX1302_REG_RADIO_FE_RADIO_DIO_DIR_RADIO_B_DIO_DIR
 814

	)

851 
	#SX1302_REG_RADIO_FE_SIG_ANA_CFG_VALID
 815

	)

852 
	#SX1302_REG_RADIO_FE_SIG_ANA_CFG_BUSY
 816

	)

853 
	#SX1302_REG_RADIO_FE_SIG_ANA_CFG_DURATION
 817

	)

854 
	#SX1302_REG_RADIO_FE_SIG_ANA_CFG_FORCE_HAL_CTRL
 818

	)

855 
	#SX1302_REG_RADIO_FE_SIG_ANA_CFG_START
 819

	)

856 
	#SX1302_REG_RADIO_FE_SIG_ANA_CFG_RADIO_SEL
 820

	)

857 
	#SX1302_REG_RADIO_FE_SIG_ANA_CFG_EN
 821

	)

858 
	#SX1302_REG_RADIO_FE_SIG_ANA_FREQ_FREQ
 822

	)

859 
	#SX1302_REG_RADIO_FE_SIG_ANA_ABS_MSB_CORR_ABS_OUT
 823

	)

860 
	#SX1302_REG_RADIO_FE_SIG_ANA_ABS_LSB_CORR_ABS_OUT
 824

	)

861 
	#SX1302_REG_RADIO_FE_DUMMY_DUMMY
 825

	)

862 
	#SX1302_REG_OTP_BYTE_ADDR_ADDR
 826

	)

863 
	#SX1302_REG_OTP_RD_DATA_RD_DATA
 827

	)

864 
	#SX1302_REG_OTP_STATUS_CHECKSUM_STATUS
 828

	)

865 
	#SX1302_REG_OTP_STATUS_FSM_READY
 829

	)

866 
	#SX1302_REG_OTP_CFG_ACCESS_MODE
 830

	)

867 
	#SX1302_REG_OTP_BIT_POS_POS
 831

	)

868 
	#SX1302_REG_OTP_PIN_CTRL_0_TM
 832

	)

869 
	#SX1302_REG_OTP_PIN_CTRL_0_STROBE
 833

	)

870 
	#SX1302_REG_OTP_PIN_CTRL_0_PGENB
 834

	)

871 
	#SX1302_REG_OTP_PIN_CTRL_0_LOAD
 835

	)

872 
	#SX1302_REG_OTP_PIN_CTRL_0_CSB
 836

	)

873 
	#SX1302_REG_OTP_PIN_CTRL_1_FSCK
 837

	)

874 
	#SX1302_REG_OTP_PIN_CTRL_1_FSI
 838

	)

875 
	#SX1302_REG_OTP_PIN_CTRL_1_FRST
 839

	)

876 
	#SX1302_REG_OTP_PIN_STATUS_FSO
 840

	)

877 
	#SX1302_REG_OTP_MODEM_EN_0_MODEM_EN
 841

	)

878 
	#SX1302_REG_OTP_MODEM_EN_1_MODEM_EN
 842

	)

879 
	#SX1302_REG_OTP_MODEM_SF_EN_SF_EN
 843

	)

880 
	#SX1302_REG_OTP_TIMESTAMP_EN_TIMESTAMP_EN
 844

	)

881 
	#SX1302_REG_OTP_DUMMY_DUMMY
 845

	)

882 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_LORA_SERVICE_FREQ_MSB_IF_FREQ_0
 846

	)

883 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_LORA_SERVICE_FREQ_LSB_IF_FREQ_0
 847

	)

884 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_LORA_SERVICE_RADIO_SEL_RADIO_SELECT
 848

	)

885 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DC_NOTCH_CFG1_BW_START
 849

	)

886 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DC_NOTCH_CFG1_AUTO_BW_RED
 850

	)

887 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DC_NOTCH_CFG1_NO_FAST_START
 851

	)

888 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DC_NOTCH_CFG1_BYPASS
 852

	)

889 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DC_NOTCH_CFG1_ENABLE
 853

	)

890 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DC_NOTCH_CFG2_BW_LOCKED
 854

	)

891 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DC_NOTCH_CFG2_BW
 855

	)

892 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DC_NOTCH_CFG3_BW_RED
 856

	)

893 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DC_NOTCH_CFG4_IIR_DCC_TIME
 857

	)

894 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_FIR1_0_FIR1_COEFF_0
 858

	)

895 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_FIR1_1_FIR1_COEFF_1
 859

	)

896 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_FIR1_2_FIR1_COEFF_2
 860

	)

897 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_FIR1_3_FIR1_COEFF_3
 861

	)

898 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_FIR1_4_FIR1_COEFF_4
 862

	)

899 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_FIR1_5_FIR1_COEFF_5
 863

	)

900 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_FIR1_6_FIR1_COEFF_6
 864

	)

901 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_FIR1_7_FIR1_COEFF_7
 865

	)

902 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_FIR2_0_FIR2_COEFF_0
 866

	)

903 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_FIR2_1_FIR2_COEFF_1
 867

	)

904 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_FIR2_2_FIR2_COEFF_2
 868

	)

905 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_FIR2_3_FIR2_COEFF_3
 869

	)

906 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_FIR2_4_FIR2_COEFF_4
 870

	)

907 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_FIR2_5_FIR2_COEFF_5
 871

	)

908 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_FIR2_6_FIR2_COEFF_6
 872

	)

909 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_FIR2_7_FIR2_COEFF_7
 873

	)

910 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_AGC0_RADIO_GAIN_RED_SEL
 874

	)

911 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_AGC0_RADIO_GAIN_RED_DB
 875

	)

912 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_AGC1_DC_COMP_EN
 876

	)

913 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_AGC1_FORCE_DEFAULT_FIR
 877

	)

914 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_AGC1_RSSI_EARLY_LATCH
 878

	)

915 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_AGC1_FREEZE_ON_SYNC
 879

	)

916 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_AGC2_DAGC_IN_COMP
 880

	)

917 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_AGC2_DAGC_FIR_HYST
 881

	)

918 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_AGC2_RSSI_MAX_SAMPLE
 882

	)

919 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_AGC2_RSSI_MIN_SAMPLE
 883

	)

920 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_GAIN0_DAGC_FIR_FAST
 884

	)

921 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_GAIN0_FORCE_GAIN_FIR
 885

	)

922 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_GAIN0_GAIN_FIR1
 886

	)

923 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_GAIN0_GAIN_FIR2
 887

	)

924 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DAGC_CFG_TARGET_LVL
 888

	)

925 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DAGC_CFG_GAIN_INCR_STEP
 889

	)

926 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DAGC_CFG_GAIN_DROP_COMP
 890

	)

927 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DAGC_CFG_COMB_FILTER_EN
 891

	)

928 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DAGC_CFG_NO_FREEZE_START
 892

	)

929 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DAGC_CFG_FREEZE_ON_SYNC
 893

	)

930 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DAGC_CNT0_SAMPLE
 894

	)

931 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DAGC_CNT1_THR_M6
 895

	)

932 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DAGC_CNT2_THR_M12
 896

	)

933 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DAGC_CNT3_THR_M18
 897

	)

934 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DAGC_CNT4_GAIN
 898

	)

935 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DAGC_CNT4_FORCE_GAIN
 899

	)

936 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG0_MODEM_BW
 900

	)

937 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG0_MODEM_SF
 901

	)

938 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG1_PPM_OFFSET_HDR_CTRL
 902

	)

939 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG1_PPM_OFFSET
 903

	)

940 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG1_MODEM_EN
 904

	)

941 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG1_CODING_RATE
 905

	)

942 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG2_FINE_SYNCH_EN
 906

	)

943 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG2_MODEM_START
 907

	)

944 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG2_CADRXTX
 908

	)

945 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG2_IMPLICIT_HEADER
 909

	)

946 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG2_CRC_EN
 910

	)

947 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG3_PAYLOAD_LENGTH
 911

	)

948 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG4_INT_STEP_ORIDE_EN
 912

	)

949 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG4_INT_STEP_ORIDE
 913

	)

950 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG5_HEADER_DIFF_MODE
 914

	)

951 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG5_ZERO_PAD
 915

	)

952 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG6_PREAMBLE_SYMB_NB
 916

	)

953 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG7_PREAMBLE_SYMB_NB
 917

	)

954 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG8_AUTO_ACK_INT_DELAY
 918

	)

955 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG8_AUTO_ACK_RX
 919

	)

956 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG8_AUTO_ACK_TX
 920

	)

957 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG8_POST_PREAMBLE_GAP_LONG
 921

	)

958 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_CFG0_DFT_PEAK_EN
 922

	)

959 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_CFG0_CHIRP_INVERT
 923

	)

960 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_CFG0_SWAP_IQ
 924

	)

961 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_CFG0_CONTINUOUS
 925

	)

962 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_CFG1_DETECT_TIMEOUT
 926

	)

963 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_CFG2_AUTO_ACK_RANGE
 927

	)

964 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_CFG2_AUTO_ACK_DELAY
 928

	)

965 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_CFG3_RESTART_ON_HDR_ERR
 929

	)

966 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_CFG3_CLK_EN_RESYNC_DIN
 930

	)

967 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_CFG3_LLR_SCALE
 931

	)

968 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FRAME_SYNCH0_PEAK1_POS
 932

	)

969 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FRAME_SYNCH1_PEAK2_POS
 933

	)

970 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FRAME_SYNCH2_FINETIME_ON_LAST
 934

	)

971 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FRAME_SYNCH2_AUTO_SCALE
 935

	)

972 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FRAME_SYNCH2_DROP_ON_SYNCH
 936

	)

973 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FRAME_SYNCH2_GAIN
 937

	)

974 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FRAME_SYNCH2_TIMEOUT_OPT
 938

	)

975 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING0_GAIN_P_HDR_RED
 939

	)

976 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING0_ROUNDING
 940

	)

977 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING0_POS_LIMIT
 941

	)

978 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING0_SUM_SIZE
 942

	)

979 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING0_MODE
 943

	)

980 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING1_GAIN_P_AUTO
 944

	)

981 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING1_GAIN_P_PAYLOAD
 945

	)

982 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING1_GAIN_P_PREAMB
 946

	)

983 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING2_GAIN_I_EN
 947

	)

984 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING2_GAIN_I_PAYLOAD
 948

	)

985 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING2_GAIN_I_PREAMB
 949

	)

986 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING3_FINESYNCH_SUM
 950

	)

987 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING3_FINESYNCH_GAIN
 951

	)

988 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING3_GAIN_I_AUTO
 952

	)

989 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING4_GAIN_I_AUTO_MAX
 953

	)

990 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING4_GAIN_P_AUTO_MAX
 954

	)

991 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FREQ_TO_TIME0_FREQ_TO_TIME_DRIFT_MANT
 955

	)

992 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FREQ_TO_TIME1_FREQ_TO_TIME_DRIFT_MANT
 956

	)

993 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FREQ_TO_TIME2_FREQ_TO_TIME_DRIFT_EXP
 957

	)

994 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FREQ_TO_TIME3_FREQ_TO_TIME_INVERT_FREQ_DELTA
 958

	)

995 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FREQ_TO_TIME3_FREQ_TO_TIME_INVERT_FINE_DELTA
 959

	)

996 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FREQ_TO_TIME3_FREQ_TO_TIME_INVERT_FREQ_ERROR
 960

	)

997 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FREQ_TO_TIME3_FREQ_TO_TIME_INVERT_TIME_SYMB
 961

	)

998 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FREQ_TO_TIME3_FREQ_TO_TIME_INVERT_TIME_OFFSET
 962

	)

999 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FREQ_TO_TIME3_FREQ_TO_TIME_INVERT_DETECT
 963

	)

1000 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FREQ_TO_TIME4_FREQ_TO_TIME_INVERT_RNG
 964

	)

1001 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FREQ_TRACK0_FREQ_TRACK_FINE
 965

	)

1002 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FREQ_TRACK0_FREQ_TRACK_HDR_SKIP
 966

	)

1003 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FREQ_TRACK0_FREQ_TRACK_EN
 967

	)

1004 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FREQ_TRACK1_FREQ_SYNCH_GAIN
 968

	)

1005 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FREQ_TRACK1_FREQ_TRACK_AUTO_THR
 969

	)

1006 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FREQ_TRACK2_SNR_MIN_WINDOW
 970

	)

1007 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FREQ_TRACK2_GAIN_AUTO_SNR_MIN
 971

	)

1008 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FREQ_TRACK2_FREQ_SYNCH_THR
 972

	)

1009 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_MSP0_MSP_PNR
 973

	)

1010 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_MSP1_MSP2_PNR
 974

	)

1011 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_MSP2_MSP2_PEAK_NB
 975

	)

1012 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_MSP2_MSP_PEAK_NB
 976

	)

1013 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_MSP3_ACC_MIN2
 977

	)

1014 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_MSP3_ACC_WIN_LEN
 978

	)

1015 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_MSP3_MSP_POS_SEL
 979

	)

1016 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_MSP3_MSP_CNT_MODE
 980

	)

1017 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_ACC1_USE_GAIN_SYMB
 981

	)

1018 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_ACC1_ACC_PNR
 982

	)

1019 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_ACC2_NOISE_COEFF
 983

	)

1020 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_ACC2_ACC_COEFF
 984

	)

1021 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_ACC2_ACC_2_SAME_PEAKS
 985

	)

1022 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_ACC2_ACC_AUTO_RESCALE
 986

	)

1023 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_ACC2_ACC_PEAK_POS_SEL
 987

	)

1024 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_ACC2_ACC_PEAK_SUM_EN
 988

	)

1025 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_ACC3_MIN_SINGLE_PEAK
 989

	)

1026 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TIMESTAMP_SEL_SNR_MIN
 990

	)

1027 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TIMESTAMP_ENABLE
 991

	)

1028 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TIMESTAMP_NB_SYMB
 992

	)

1029 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_CLOCK_GATE_OVERRIDE_FSK_TRANSPOSE_CLK_OVERRIDE
 993

	)

1030 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_CLOCK_GATE_OVERRIDE_FSK_MODEM_CLK_OVERRIDE
 994

	)

1031 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_CLOCK_GATE_OVERRIDE_TRANSPOSE_CLK_OVERRIDE
 995

	)

1032 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_CLOCK_GATE_OVERRIDE_MODEM_CLK_OVERRIDE
 996

	)

1033 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DUMMY0_DUMMY0
 997

	)

1034 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_FREQ_MSB_IF_FREQ_0
 998

	)

1035 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_FREQ_LSB_IF_FREQ_0
 999

	)

1036 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_CFG_0_CRC_IBM
 1000

	)

1037 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_CFG_0_DCFREE_ENC
 1001

	)

1038 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_CFG_0_CRC_EN
 1002

	)

1039 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_CFG_0_PKT_MODE
 1003

	)

1040 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_CFG_1_ADRS_COMP
 1004

	)

1041 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_CFG_1_PSIZE
 1005

	)

1042 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_CFG_1_CH_BW_EXPO
 1006

	)

1043 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_CFG_3_MODEM_INVERT_IQ
 1007

	)

1044 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_CFG_3_AUTO_AFC
 1008

	)

1045 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_CFG_3_RADIO_SELECT
 1009

	)

1046 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_CFG_3_RX_INVERT
 1010

	)

1047 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_CFG_4_RSSI_LENGTH
 1011

	)

1048 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_CFG_4_ERROR_OSR_TOL
 1012

	)

1049 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_NODE_ADRS_NODE_ADRS
 1013

	)

1050 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_BROADCAST_BROADCAST
 1014

	)

1051 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_PKT_LENGTH_PKT_LENGTH
 1015

	)

1052 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_TIMEOUT_MSB_TIMEOUT
 1016

	)

1053 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_TIMEOUT_LSB_TIMEOUT
 1017

	)

1054 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BIT_RATE_MSB_BIT_RATE
 1018

	)

1055 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BIT_RATE_LSB_BIT_RATE
 1019

	)

1056 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_REF_PATTERN_BYTE7_FSK_REF_PATTERN
 1020

	)

1057 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_REF_PATTERN_BYTE6_FSK_REF_PATTERN
 1021

	)

1058 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_REF_PATTERN_BYTE5_FSK_REF_PATTERN
 1022

	)

1059 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_REF_PATTERN_BYTE4_FSK_REF_PATTERN
 1023

	)

1060 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_REF_PATTERN_BYTE3_FSK_REF_PATTERN
 1024

	)

1061 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_REF_PATTERN_BYTE2_FSK_REF_PATTERN
 1025

	)

1062 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_REF_PATTERN_BYTE1_FSK_REF_PATTERN
 1026

	)

1063 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_REF_PATTERN_BYTE0_FSK_REF_PATTERN
 1027

	)

1064 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_RSSI_FILTER_ALPHA_FSK_RSSI_FILTER_ALPHA
 1028

	)

1065 
	#SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DUMMY1_DUMMY1
 1029

	)

1066 
	#SX1302_REG_CAPTURE_RAM_CAPTURE_CFG_ENABLE
 1030

	)

1067 
	#SX1302_REG_CAPTURE_RAM_CAPTURE_CFG_CAPTUREWRAP
 1031

	)

1068 
	#SX1302_REG_CAPTURE_RAM_CAPTURE_CFG_CAPTUREFORCETRIGGER
 1032

	)

1069 
	#SX1302_REG_CAPTURE_RAM_CAPTURE_CFG_CAPTURESTART
 1033

	)

1070 
	#SX1302_REG_CAPTURE_RAM_CAPTURE_CFG_RAMCONFIG
 1034

	)

1071 
	#SX1302_REG_CAPTURE_RAM_CAPTURE_SOURCE_A_SOURCEMUX
 1035

	)

1072 
	#SX1302_REG_CAPTURE_RAM_CAPTURE_SOURCE_B_SOURCEMUX
 1036

	)

1073 
	#SX1302_REG_CAPTURE_RAM_CAPTURE_PERIOD_0_CAPTUREPERIOD
 1037

	)

1074 
	#SX1302_REG_CAPTURE_RAM_CAPTURE_PERIOD_1_CAPTUREPERIOD
 1038

	)

1075 
	#SX1302_REG_CAPTURE_RAM_STATUS_CAPCOMPLETE
 1039

	)

1076 
	#SX1302_REG_CAPTURE_RAM_LAST_RAM_ADDR_0_LASTRAMADDR
 1040

	)

1077 
	#SX1302_REG_CAPTURE_RAM_LAST_RAM_ADDR_1_LASTRAMADDR
 1041

	)

1078 
	#SX1302_REG_CAPTURE_RAM_CLOCK_GATE_OVERRIDE_CLK_OVERRIDE
 1042

	)

1079 
	#SX1302_REG_CAPTURE_RAM_DUMMY0_DUMMY0
 1043

	)

1081 
	#LGW_SX1302_TOTALREGS
 1044

	)

1086 
	#SX1302_REG_TX_TOP_TX_TRIG_TX_FSM_CLR
(
rf_chaö
) ((rf_chain == 0) ? \

1087 
SX1302_REG_TX_TOP_A_TX_TRIG_TX_FSM_CLR
 : \

1088 
SX1302_REG_TX_TOP_B_TX_TRIG_TX_FSM_CLR
)

	)

1089 
	#SX1302_REG_TX_TOP_TX_TRIG_TX_TRIG_GPS
(
rf_chaö
) ((rf_chain == 0) ? \

1090 
SX1302_REG_TX_TOP_A_TX_TRIG_TX_TRIG_GPS
 : \

1091 
SX1302_REG_TX_TOP_B_TX_TRIG_TX_TRIG_GPS
)

	)

1092 
	#SX1302_REG_TX_TOP_TX_TRIG_TX_TRIG_DELAYED
(
rf_chaö
) ((rf_chain == 0) ? \

1093 
SX1302_REG_TX_TOP_A_TX_TRIG_TX_TRIG_DELAYED
 : \

1094 
SX1302_REG_TX_TOP_B_TX_TRIG_TX_TRIG_DELAYED
)

	)

1095 
	#SX1302_REG_TX_TOP_TX_TRIG_TX_TRIG_IMMEDIATE
(
rf_chaö
) ((rf_chain == 0) ? \

1096 
SX1302_REG_TX_TOP_A_TX_TRIG_TX_TRIG_IMMEDIATE
 : \

1097 
SX1302_REG_TX_TOP_B_TX_TRIG_TX_TRIG_IMMEDIATE
)

	)

1098 
	#SX1302_REG_TX_TOP_TIMER_TRIG_BYTE3_TIMER_DELAYED_TRIG
(
rf_chaö
) ((rf_chain == 0) ? \

1099 
SX1302_REG_TX_TOP_A_TIMER_TRIG_BYTE3_TIMER_DELAYED_TRIG
 : \

1100 
SX1302_REG_TX_TOP_B_TIMER_TRIG_BYTE3_TIMER_DELAYED_TRIG
)

	)

1101 
	#SX1302_REG_TX_TOP_TIMER_TRIG_BYTE2_TIMER_DELAYED_TRIG
(
rf_chaö
) ((rf_chain == 0) ? \

1102 
SX1302_REG_TX_TOP_A_TIMER_TRIG_BYTE2_TIMER_DELAYED_TRIG
 : \

1103 
SX1302_REG_TX_TOP_B_TIMER_TRIG_BYTE2_TIMER_DELAYED_TRIG
)

	)

1104 
	#SX1302_REG_TX_TOP_TIMER_TRIG_BYTE1_TIMER_DELAYED_TRIG
(
rf_chaö
) ((rf_chain == 0) ? \

1105 
SX1302_REG_TX_TOP_A_TIMER_TRIG_BYTE1_TIMER_DELAYED_TRIG
 : \

1106 
SX1302_REG_TX_TOP_B_TIMER_TRIG_BYTE1_TIMER_DELAYED_TRIG
)

	)

1107 
	#SX1302_REG_TX_TOP_TIMER_TRIG_BYTE0_TIMER_DELAYED_TRIG
(
rf_chaö
) ((rf_chain == 0) ? \

1108 
SX1302_REG_TX_TOP_A_TIMER_TRIG_BYTE0_TIMER_DELAYED_TRIG
 : \

1109 
SX1302_REG_TX_TOP_B_TIMER_TRIG_BYTE0_TIMER_DELAYED_TRIG
)

	)

1110 
	#SX1302_REG_TX_TOP_TX_START_DELAY_MSB_TX_START_DELAY
(
rf_chaö
) ((rf_chain == 0) ? \

1111 
SX1302_REG_TX_TOP_A_TX_START_DELAY_MSB_TX_START_DELAY
 : \

1112 
SX1302_REG_TX_TOP_B_TX_START_DELAY_MSB_TX_START_DELAY
)

	)

1113 
	#SX1302_REG_TX_TOP_TX_START_DELAY_LSB_TX_START_DELAY
(
rf_chaö
) ((rf_chain == 0) ? \

1114 
SX1302_REG_TX_TOP_A_TX_START_DELAY_LSB_TX_START_DELAY
 : \

1115 
SX1302_REG_TX_TOP_B_TX_START_DELAY_LSB_TX_START_DELAY
)

	)

1116 
	#SX1302_REG_TX_TOP_TX_CTRL_WRITE_BUFFER
(
rf_chaö
) ((rf_chain == 0) ? \

1117 
SX1302_REG_TX_TOP_A_TX_CTRL_WRITE_BUFFER
 : \

1118 
SX1302_REG_TX_TOP_B_TX_CTRL_WRITE_BUFFER
)

	)

1119 
	#SX1302_REG_TX_TOP_TX_RAMP_DURATION_TX_RAMP_DURATION
(
rf_chaö
) ((rf_chain == 0) ? \

1120 
SX1302_REG_TX_TOP_A_TX_RAMP_DURATION_TX_RAMP_DURATION
 : \

1121 
SX1302_REG_TX_TOP_B_TX_RAMP_DURATION_TX_RAMP_DURATION
)

	)

1122 
	#SX1302_REG_TX_TOP_GEN_CFG_0_MODULATION_TYPE
(
rf_chaö
) ((rf_chain == 0) ? \

1123 
SX1302_REG_TX_TOP_A_GEN_CFG_0_MODULATION_TYPE
 : \

1124 
SX1302_REG_TX_TOP_B_GEN_CFG_0_MODULATION_TYPE
)

	)

1125 
	#SX1302_REG_TX_TOP_TEST_0_TX_ACTIVE_CTRL
(
rf_chaö
) ((rf_chain == 0) ? \

1126 
SX1302_REG_TX_TOP_A_TEST_0_TX_ACTIVE_CTRL
 : \

1127 
SX1302_REG_TX_TOP_B_TEST_0_TX_ACTIVE_CTRL
)

	)

1128 
	#SX1302_REG_TX_TOP_TEST_0_TX_ACTIVE_SEL
(
rf_chaö
) ((rf_chain == 0) ? \

1129 
SX1302_REG_TX_TOP_A_TEST_0_TX_ACTIVE_SEL
 : \

1130 
SX1302_REG_TX_TOP_B_TEST_0_TX_ACTIVE_SEL
)

	)

1131 
	#SX1302_REG_TX_TOP_TX_FLAG_TX_TIMEOUT
(
rf_chaö
) ((rf_chain == 0) ? \

1132 
SX1302_REG_TX_TOP_A_TX_FLAG_TX_TIMEOUT
 : \

1133 
SX1302_REG_TX_TOP_B_TX_FLAG_TX_TIMEOUT
)

	)

1134 
	#SX1302_REG_TX_TOP_TX_FLAG_PKT_DONE
(
rf_chaö
) ((rf_chain == 0) ? \

1135 
SX1302_REG_TX_TOP_A_TX_FLAG_PKT_DONE
 : \

1136 
SX1302_REG_TX_TOP_B_TX_FLAG_PKT_DONE
)

	)

1137 
	#SX1302_REG_TX_TOP_AGC_TX_BW_AGC_TX_BW
(
rf_chaö
) ((rf_chain == 0) ? \

1138 
SX1302_REG_TX_TOP_A_AGC_TX_BW_AGC_TX_BW
 : \

1139 
SX1302_REG_TX_TOP_B_AGC_TX_BW_AGC_TX_BW
)

	)

1140 
	#SX1302_REG_TX_TOP_AGC_TX_PWR_AGC_TX_PWR
(
rf_chaö
) ((rf_chain == 0) ? \

1141 
SX1302_REG_TX_TOP_A_AGC_TX_PWR_AGC_TX_PWR
 : \

1142 
SX1302_REG_TX_TOP_B_AGC_TX_PWR_AGC_TX_PWR
)

	)

1143 
	#SX1302_REG_TX_TOP_TIMEOUT_CNT_BYTE_2_TIMEOUT_CNT
(
rf_chaö
) ((rf_chain == 0) ? \

1144 
SX1302_REG_TX_TOP_A_TIMEOUT_CNT_BYTE_2_TIMEOUT_CNT
 : \

1145 
SX1302_REG_TX_TOP_B_TIMEOUT_CNT_BYTE_2_TIMEOUT_CNT
)

	)

1146 
	#SX1302_REG_TX_TOP_TIMEOUT_CNT_BYTE_1_TIMEOUT_CNT
(
rf_chaö
) ((rf_chain == 0) ? \

1147 
SX1302_REG_TX_TOP_A_TIMEOUT_CNT_BYTE_1_TIMEOUT_CNT
 : \

1148 
SX1302_REG_TX_TOP_B_TIMEOUT_CNT_BYTE_1_TIMEOUT_CNT
)

	)

1149 
	#SX1302_REG_TX_TOP_TIMEOUT_CNT_BYTE_0_TIMEOUT_CNT
(
rf_chaö
) ((rf_chain == 0) ? \

1150 
SX1302_REG_TX_TOP_A_TIMEOUT_CNT_BYTE_0_TIMEOUT_CNT
 : \

1151 
SX1302_REG_TX_TOP_B_TIMEOUT_CNT_BYTE_0_TIMEOUT_CNT
)

	)

1152 
	#SX1302_REG_TX_TOP_TX_FSM_STATUS_TX_STATUS
(
rf_chaö
) ((rf_chain == 0) ? \

1153 
SX1302_REG_TX_TOP_A_TX_FSM_STATUS_TX_STATUS
 : \

1154 
SX1302_REG_TX_TOP_B_TX_FSM_STATUS_TX_STATUS
)

	)

1155 
	#SX1302_REG_TX_TOP_DUMMY_CONTROL_DUMMY
(
rf_chaö
) ((rf_chain == 0) ? \

1156 
SX1302_REG_TX_TOP_A_DUMMY_CONTROL_DUMMY
 : \

1157 
SX1302_REG_TX_TOP_B_DUMMY_CONTROL_DUMMY
)

	)

1158 
	#SX1302_REG_TX_TOP_TX_RFFE_IF_CTRL_PLL_DIV_CTRL
(
rf_chaö
) ((rf_chain == 0) ? \

1159 
SX1302_REG_TX_TOP_A_TX_RFFE_IF_CTRL_PLL_DIV_CTRL
 : \

1160 
SX1302_REG_TX_TOP_B_TX_RFFE_IF_CTRL_PLL_DIV_CTRL
)

	)

1161 
	#SX1302_REG_TX_TOP_TX_RFFE_IF_CTRL_TX_CLK_EDGE
(
rf_chaö
) ((rf_chain == 0) ? \

1162 
SX1302_REG_TX_TOP_A_TX_RFFE_IF_CTRL_TX_CLK_EDGE
 : \

1163 
SX1302_REG_TX_TOP_B_TX_RFFE_IF_CTRL_TX_CLK_EDGE
)

	)

1164 
	#SX1302_REG_TX_TOP_TX_RFFE_IF_CTRL_TX_MODE
(
rf_chaö
) ((rf_chain == 0) ? \

1165 
SX1302_REG_TX_TOP_A_TX_RFFE_IF_CTRL_TX_MODE
 : \

1166 
SX1302_REG_TX_TOP_B_TX_RFFE_IF_CTRL_TX_MODE
)

	)

1167 
	#SX1302_REG_TX_TOP_TX_RFFE_IF_CTRL_TX_IF_DST
(
rf_chaö
) ((rf_chain == 0) ? \

1168 
SX1302_REG_TX_TOP_A_TX_RFFE_IF_CTRL_TX_IF_DST
 : \

1169 
SX1302_REG_TX_TOP_B_TX_RFFE_IF_CTRL_TX_IF_DST
)

	)

1170 
	#SX1302_REG_TX_TOP_TX_RFFE_IF_CTRL_TX_IF_SRC
(
rf_chaö
) ((rf_chain == 0) ? \

1171 
SX1302_REG_TX_TOP_A_TX_RFFE_IF_CTRL_TX_IF_SRC
 : \

1172 
SX1302_REG_TX_TOP_B_TX_RFFE_IF_CTRL_TX_IF_SRC
)

	)

1173 
	#SX1302_REG_TX_TOP_TX_RFFE_IF_CTRL2_SX125X_IQ_INVERT
(
rf_chaö
) ((rf_chain == 0) ? \

1174 
SX1302_REG_TX_TOP_A_TX_RFFE_IF_CTRL2_SX125X_IQ_INVERT
 : \

1175 
SX1302_REG_TX_TOP_B_TX_RFFE_IF_CTRL2_SX125X_IQ_INVERT
)

	)

1176 
	#SX1302_REG_TX_TOP_TX_RFFE_IF_CTRL2_PLL_DIV_CTRL_AGC
(
rf_chaö
) ((rf_chain == 0) ? \

1177 
SX1302_REG_TX_TOP_A_TX_RFFE_IF_CTRL2_PLL_DIV_CTRL_AGC
 : \

1178 
SX1302_REG_TX_TOP_B_TX_RFFE_IF_CTRL2_PLL_DIV_CTRL_AGC
)

	)

1179 
	#SX1302_REG_TX_TOP_TX_RFFE_IF_IQ_GAIN_IQ_GAIN
(
rf_chaö
) ((rf_chain == 0) ? \

1180 
SX1302_REG_TX_TOP_A_TX_RFFE_IF_IQ_GAIN_IQ_GAIN
 : \

1181 
SX1302_REG_TX_TOP_B_TX_RFFE_IF_IQ_GAIN_IQ_GAIN
)

	)

1182 
	#SX1302_REG_TX_TOP_TX_RFFE_IF_I_OFFSET_I_OFFSET
(
rf_chaö
) ((rf_chain == 0) ? \

1183 
SX1302_REG_TX_TOP_A_TX_RFFE_IF_I_OFFSET_I_OFFSET
 : \

1184 
SX1302_REG_TX_TOP_B_TX_RFFE_IF_I_OFFSET_I_OFFSET
)

	)

1185 
	#SX1302_REG_TX_TOP_TX_RFFE_IF_Q_OFFSET_Q_OFFSET
(
rf_chaö
) ((rf_chain == 0) ? \

1186 
SX1302_REG_TX_TOP_A_TX_RFFE_IF_Q_OFFSET_Q_OFFSET
 : \

1187 
SX1302_REG_TX_TOP_B_TX_RFFE_IF_Q_OFFSET_Q_OFFSET
)

	)

1188 
	#SX1302_REG_TX_TOP_TX_RFFE_IF_FREQ_RF_H_FREQ_RF
(
rf_chaö
) ((rf_chain == 0) ? \

1189 
SX1302_REG_TX_TOP_A_TX_RFFE_IF_FREQ_RF_H_FREQ_RF
 : \

1190 
SX1302_REG_TX_TOP_B_TX_RFFE_IF_FREQ_RF_H_FREQ_RF
)

	)

1191 
	#SX1302_REG_TX_TOP_TX_RFFE_IF_FREQ_RF_M_FREQ_RF
(
rf_chaö
) ((rf_chain == 0) ? \

1192 
SX1302_REG_TX_TOP_A_TX_RFFE_IF_FREQ_RF_M_FREQ_RF
 : \

1193 
SX1302_REG_TX_TOP_B_TX_RFFE_IF_FREQ_RF_M_FREQ_RF
)

	)

1194 
	#SX1302_REG_TX_TOP_TX_RFFE_IF_FREQ_RF_L_FREQ_RF
(
rf_chaö
) ((rf_chain == 0) ? \

1195 
SX1302_REG_TX_TOP_A_TX_RFFE_IF_FREQ_RF_L_FREQ_RF
 : \

1196 
SX1302_REG_TX_TOP_B_TX_RFFE_IF_FREQ_RF_L_FREQ_RF
)

	)

1197 
	#SX1302_REG_TX_TOP_TX_RFFE_IF_FREQ_DEV_H_FREQ_DEV
(
rf_chaö
) ((rf_chain == 0) ? \

1198 
SX1302_REG_TX_TOP_A_TX_RFFE_IF_FREQ_DEV_H_FREQ_DEV
 : \

1199 
SX1302_REG_TX_TOP_B_TX_RFFE_IF_FREQ_DEV_H_FREQ_DEV
)

	)

1200 
	#SX1302_REG_TX_TOP_TX_RFFE_IF_FREQ_DEV_L_FREQ_DEV
(
rf_chaö
) ((rf_chain == 0) ? \

1201 
SX1302_REG_TX_TOP_A_TX_RFFE_IF_FREQ_DEV_L_FREQ_DEV
 : \

1202 
SX1302_REG_TX_TOP_B_TX_RFFE_IF_FREQ_DEV_L_FREQ_DEV
)

	)

1203 
	#SX1302_REG_TX_TOP_TX_RFFE_IF_TEST_MOD_FREQ
(
rf_chaö
) ((rf_chain == 0) ? \

1204 
SX1302_REG_TX_TOP_A_TX_RFFE_IF_TEST_MOD_FREQ
 : \

1205 
SX1302_REG_TX_TOP_B_TX_RFFE_IF_TEST_MOD_FREQ
)

	)

1206 
	#SX1302_REG_TX_TOP_DUMMY_MODULATOR_DUMMY
(
rf_chaö
) ((rf_chain == 0) ? \

1207 
SX1302_REG_TX_TOP_A_DUMMY_MODULATOR_DUMMY
 : \

1208 
SX1302_REG_TX_TOP_B_DUMMY_MODULATOR_DUMMY
)

	)

1209 
	#SX1302_REG_TX_TOP_FSK_PKT_LEN_PKT_LENGTH
(
rf_chaö
) ((rf_chain == 0) ? \

1210 
SX1302_REG_TX_TOP_A_FSK_PKT_LEN_PKT_LENGTH
 : \

1211 
SX1302_REG_TX_TOP_B_FSK_PKT_LEN_PKT_LENGTH
)

	)

1212 
	#SX1302_REG_TX_TOP_FSK_CFG_0_TX_CONT
(
rf_chaö
) ((rf_chain == 0) ? \

1213 
SX1302_REG_TX_TOP_A_FSK_CFG_0_TX_CONT
 : \

1214 
SX1302_REG_TX_TOP_B_FSK_CFG_0_TX_CONT
)

	)

1215 
	#SX1302_REG_TX_TOP_FSK_CFG_0_CRC_IBM
(
rf_chaö
) ((rf_chain == 0) ? \

1216 
SX1302_REG_TX_TOP_A_FSK_CFG_0_CRC_IBM
 : \

1217 
SX1302_REG_TX_TOP_B_FSK_CFG_0_CRC_IBM
)

	)

1218 
	#SX1302_REG_TX_TOP_FSK_CFG_0_DCFREE_ENC
(
rf_chaö
) ((rf_chain == 0) ? \

1219 
SX1302_REG_TX_TOP_A_FSK_CFG_0_DCFREE_ENC
 : \

1220 
SX1302_REG_TX_TOP_B_FSK_CFG_0_DCFREE_ENC
)

	)

1221 
	#SX1302_REG_TX_TOP_FSK_CFG_0_CRC_EN
(
rf_chaö
) ((rf_chain == 0) ? \

1222 
SX1302_REG_TX_TOP_A_FSK_CFG_0_CRC_EN
 : \

1223 
SX1302_REG_TX_TOP_B_FSK_CFG_0_CRC_EN
)

	)

1224 
	#SX1302_REG_TX_TOP_FSK_CFG_0_PKT_MODE
(
rf_chaö
) ((rf_chain == 0) ? \

1225 
SX1302_REG_TX_TOP_A_FSK_CFG_0_PKT_MODE
 : \

1226 
SX1302_REG_TX_TOP_B_FSK_CFG_0_PKT_MODE
)

	)

1227 
	#SX1302_REG_TX_TOP_FSK_PREAMBLE_SIZE_MSB_PREAMBLE_SIZE
(
rf_chaö
) ((rf_chain == 0) ? \

1228 
SX1302_REG_TX_TOP_A_FSK_PREAMBLE_SIZE_MSB_PREAMBLE_SIZE
 : \

1229 
SX1302_REG_TX_TOP_B_FSK_PREAMBLE_SIZE_MSB_PREAMBLE_SIZE
)

	)

1230 
	#SX1302_REG_TX_TOP_FSK_PREAMBLE_SIZE_LSB_PREAMBLE_SIZE
(
rf_chaö
) ((rf_chain == 0) ? \

1231 
SX1302_REG_TX_TOP_A_FSK_PREAMBLE_SIZE_LSB_PREAMBLE_SIZE
 : \

1232 
SX1302_REG_TX_TOP_B_FSK_PREAMBLE_SIZE_LSB_PREAMBLE_SIZE
)

	)

1233 
	#SX1302_REG_TX_TOP_FSK_BIT_RATE_MSB_BIT_RATE
(
rf_chaö
) ((rf_chain == 0) ? \

1234 
SX1302_REG_TX_TOP_A_FSK_BIT_RATE_MSB_BIT_RATE
 : \

1235 
SX1302_REG_TX_TOP_B_FSK_BIT_RATE_MSB_BIT_RATE
)

	)

1236 
	#SX1302_REG_TX_TOP_FSK_BIT_RATE_LSB_BIT_RATE
(
rf_chaö
) ((rf_chain == 0) ? \

1237 
SX1302_REG_TX_TOP_A_FSK_BIT_RATE_LSB_BIT_RATE
 : \

1238 
SX1302_REG_TX_TOP_B_FSK_BIT_RATE_LSB_BIT_RATE
)

	)

1239 
	#SX1302_REG_TX_TOP_FSK_MOD_FSK_REF_PATTERN_SIZE
(
rf_chaö
) ((rf_chain == 0) ? \

1240 
SX1302_REG_TX_TOP_A_FSK_MOD_FSK_REF_PATTERN_SIZE
 : \

1241 
SX1302_REG_TX_TOP_B_FSK_MOD_FSK_REF_PATTERN_SIZE
)

	)

1242 
	#SX1302_REG_TX_TOP_FSK_MOD_FSK_PREAMBLE_SEQ
(
rf_chaö
) ((rf_chain == 0) ? \

1243 
SX1302_REG_TX_TOP_A_FSK_MOD_FSK_PREAMBLE_SEQ
 : \

1244 
SX1302_REG_TX_TOP_B_FSK_MOD_FSK_PREAMBLE_SEQ
)

	)

1245 
	#SX1302_REG_TX_TOP_FSK_MOD_FSK_REF_PATTERN_EN
(
rf_chaö
) ((rf_chain == 0) ? \

1246 
SX1302_REG_TX_TOP_A_FSK_MOD_FSK_REF_PATTERN_EN
 : \

1247 
SX1302_REG_TX_TOP_B_FSK_MOD_FSK_REF_PATTERN_EN
)

	)

1248 
	#SX1302_REG_TX_TOP_FSK_MOD_FSK_GAUSSIAN_SELECT_BT
(
rf_chaö
) ((rf_chain == 0) ? \

1249 
SX1302_REG_TX_TOP_A_FSK_MOD_FSK_GAUSSIAN_SELECT_BT
 : \

1250 
SX1302_REG_TX_TOP_B_FSK_MOD_FSK_GAUSSIAN_SELECT_BT
)

	)

1251 
	#SX1302_REG_TX_TOP_FSK_MOD_FSK_GAUSSIAN_EN
(
rf_chaö
) ((rf_chain == 0) ? \

1252 
SX1302_REG_TX_TOP_A_FSK_MOD_FSK_GAUSSIAN_EN
 : \

1253 
SX1302_REG_TX_TOP_B_FSK_MOD_FSK_GAUSSIAN_EN
)

	)

1254 
	#SX1302_REG_TX_TOP_FSK_REF_PATTERN_BYTE7_FSK_REF_PATTERN
(
rf_chaö
) ((rf_chain == 0) ? \

1255 
SX1302_REG_TX_TOP_A_FSK_REF_PATTERN_BYTE7_FSK_REF_PATTERN
 : \

1256 
SX1302_REG_TX_TOP_B_FSK_REF_PATTERN_BYTE7_FSK_REF_PATTERN
)

	)

1257 
	#SX1302_REG_TX_TOP_FSK_REF_PATTERN_BYTE6_FSK_REF_PATTERN
(
rf_chaö
) ((rf_chain == 0) ? \

1258 
SX1302_REG_TX_TOP_A_FSK_REF_PATTERN_BYTE6_FSK_REF_PATTERN
 : \

1259 
SX1302_REG_TX_TOP_B_FSK_REF_PATTERN_BYTE6_FSK_REF_PATTERN
)

	)

1260 
	#SX1302_REG_TX_TOP_FSK_REF_PATTERN_BYTE5_FSK_REF_PATTERN
(
rf_chaö
) ((rf_chain == 0) ? \

1261 
SX1302_REG_TX_TOP_A_FSK_REF_PATTERN_BYTE5_FSK_REF_PATTERN
 : \

1262 
SX1302_REG_TX_TOP_B_FSK_REF_PATTERN_BYTE5_FSK_REF_PATTERN
)

	)

1263 
	#SX1302_REG_TX_TOP_FSK_REF_PATTERN_BYTE4_FSK_REF_PATTERN
(
rf_chaö
) ((rf_chain == 0) ? \

1264 
SX1302_REG_TX_TOP_A_FSK_REF_PATTERN_BYTE4_FSK_REF_PATTERN
 : \

1265 
SX1302_REG_TX_TOP_B_FSK_REF_PATTERN_BYTE4_FSK_REF_PATTERN
)

	)

1266 
	#SX1302_REG_TX_TOP_FSK_REF_PATTERN_BYTE3_FSK_REF_PATTERN
(
rf_chaö
) ((rf_chain == 0) ? \

1267 
SX1302_REG_TX_TOP_A_FSK_REF_PATTERN_BYTE3_FSK_REF_PATTERN
 : \

1268 
SX1302_REG_TX_TOP_B_FSK_REF_PATTERN_BYTE3_FSK_REF_PATTERN
)

	)

1269 
	#SX1302_REG_TX_TOP_FSK_REF_PATTERN_BYTE2_FSK_REF_PATTERN
(
rf_chaö
) ((rf_chain == 0) ? \

1270 
SX1302_REG_TX_TOP_A_FSK_REF_PATTERN_BYTE2_FSK_REF_PATTERN
 : \

1271 
SX1302_REG_TX_TOP_B_FSK_REF_PATTERN_BYTE2_FSK_REF_PATTERN
)

	)

1272 
	#SX1302_REG_TX_TOP_FSK_REF_PATTERN_BYTE1_FSK_REF_PATTERN
(
rf_chaö
) ((rf_chain == 0) ? \

1273 
SX1302_REG_TX_TOP_A_FSK_REF_PATTERN_BYTE1_FSK_REF_PATTERN
 : \

1274 
SX1302_REG_TX_TOP_B_FSK_REF_PATTERN_BYTE1_FSK_REF_PATTERN
)

	)

1275 
	#SX1302_REG_TX_TOP_FSK_REF_PATTERN_BYTE0_FSK_REF_PATTERN
(
rf_chaö
) ((rf_chain == 0) ? \

1276 
SX1302_REG_TX_TOP_A_FSK_REF_PATTERN_BYTE0_FSK_REF_PATTERN
 : \

1277 
SX1302_REG_TX_TOP_B_FSK_REF_PATTERN_BYTE0_FSK_REF_PATTERN
)

	)

1278 
	#SX1302_REG_TX_TOP_DUMMY_GSFK_DUMMY
(
rf_chaö
) ((rf_chain == 0) ? \

1279 
SX1302_REG_TX_TOP_A_DUMMY_GSFK_DUMMY
 : \

1280 
SX1302_REG_TX_TOP_B_DUMMY_GSFK_DUMMY
)

	)

1281 
	#SX1302_REG_TX_TOP_TXRX_CFG0_0_MODEM_BW
(
rf_chaö
) ((rf_chain == 0) ? \

1282 
SX1302_REG_TX_TOP_A_TXRX_CFG0_0_MODEM_BW
 : \

1283 
SX1302_REG_TX_TOP_B_TXRX_CFG0_0_MODEM_BW
)

	)

1284 
	#SX1302_REG_TX_TOP_TXRX_CFG0_0_MODEM_SF
(
rf_chaö
) ((rf_chain == 0) ? \

1285 
SX1302_REG_TX_TOP_A_TXRX_CFG0_0_MODEM_SF
 : \

1286 
SX1302_REG_TX_TOP_B_TXRX_CFG0_0_MODEM_SF
)

	)

1287 
	#SX1302_REG_TX_TOP_TXRX_CFG0_1_PPM_OFFSET_HDR_CTRL
(
rf_chaö
) ((rf_chain == 0) ? \

1288 
SX1302_REG_TX_TOP_A_TXRX_CFG0_1_PPM_OFFSET_HDR_CTRL
 : \

1289 
SX1302_REG_TX_TOP_B_TXRX_CFG0_1_PPM_OFFSET_HDR_CTRL
)

	)

1290 
	#SX1302_REG_TX_TOP_TXRX_CFG0_1_PPM_OFFSET
(
rf_chaö
) ((rf_chain == 0) ? \

1291 
SX1302_REG_TX_TOP_A_TXRX_CFG0_1_PPM_OFFSET
 : \

1292 
SX1302_REG_TX_TOP_B_TXRX_CFG0_1_PPM_OFFSET
)

	)

1293 
	#SX1302_REG_TX_TOP_TXRX_CFG0_1_POST_PREAMBLE_GAP_LONG
(
rf_chaö
) ((rf_chain == 0) ? \

1294 
SX1302_REG_TX_TOP_A_TXRX_CFG0_1_POST_PREAMBLE_GAP_LONG
 : \

1295 
SX1302_REG_TX_TOP_B_TXRX_CFG0_1_POST_PREAMBLE_GAP_LONG
)

	)

1296 
	#SX1302_REG_TX_TOP_TXRX_CFG0_1_CODING_RATE
(
rf_chaö
) ((rf_chain == 0) ? \

1297 
SX1302_REG_TX_TOP_A_TXRX_CFG0_1_CODING_RATE
 : \

1298 
SX1302_REG_TX_TOP_B_TXRX_CFG0_1_CODING_RATE
)

	)

1299 
	#SX1302_REG_TX_TOP_TXRX_CFG0_2_FINE_SYNCH_EN
(
rf_chaö
) ((rf_chain == 0) ? \

1300 
SX1302_REG_TX_TOP_A_TXRX_CFG0_2_FINE_SYNCH_EN
 : \

1301 
SX1302_REG_TX_TOP_B_TXRX_CFG0_2_FINE_SYNCH_EN
)

	)

1302 
	#SX1302_REG_TX_TOP_TXRX_CFG0_2_MODEM_EN
(
rf_chaö
) ((rf_chain == 0) ? \

1303 
SX1302_REG_TX_TOP_A_TXRX_CFG0_2_MODEM_EN
 : \

1304 
SX1302_REG_TX_TOP_B_TXRX_CFG0_2_MODEM_EN
)

	)

1305 
	#SX1302_REG_TX_TOP_TXRX_CFG0_2_CADRXTX
(
rf_chaö
) ((rf_chain == 0) ? \

1306 
SX1302_REG_TX_TOP_A_TXRX_CFG0_2_CADRXTX
 : \

1307 
SX1302_REG_TX_TOP_B_TXRX_CFG0_2_CADRXTX
)

	)

1308 
	#SX1302_REG_TX_TOP_TXRX_CFG0_2_IMPLICIT_HEADER
(
rf_chaö
) ((rf_chain == 0) ? \

1309 
SX1302_REG_TX_TOP_A_TXRX_CFG0_2_IMPLICIT_HEADER
 : \

1310 
SX1302_REG_TX_TOP_B_TXRX_CFG0_2_IMPLICIT_HEADER
)

	)

1311 
	#SX1302_REG_TX_TOP_TXRX_CFG0_2_CRC_EN
(
rf_chaö
) ((rf_chain == 0) ? \

1312 
SX1302_REG_TX_TOP_A_TXRX_CFG0_2_CRC_EN
 : \

1313 
SX1302_REG_TX_TOP_B_TXRX_CFG0_2_CRC_EN
)

	)

1314 
	#SX1302_REG_TX_TOP_TXRX_CFG0_3_PAYLOAD_LENGTH
(
rf_chaö
) ((rf_chain == 0) ? \

1315 
SX1302_REG_TX_TOP_A_TXRX_CFG0_3_PAYLOAD_LENGTH
 : \

1316 
SX1302_REG_TX_TOP_B_TXRX_CFG0_3_PAYLOAD_LENGTH
)

	)

1317 
	#SX1302_REG_TX_TOP_TXRX_CFG1_0_INT_STEP_ORIDE_EN
(
rf_chaö
) ((rf_chain == 0) ? \

1318 
SX1302_REG_TX_TOP_A_TXRX_CFG1_0_INT_STEP_ORIDE_EN
 : \

1319 
SX1302_REG_TX_TOP_B_TXRX_CFG1_0_INT_STEP_ORIDE_EN
)

	)

1320 
	#SX1302_REG_TX_TOP_TXRX_CFG1_0_INT_STEP_ORIDE
(
rf_chaö
) ((rf_chain == 0) ? \

1321 
SX1302_REG_TX_TOP_A_TXRX_CFG1_0_INT_STEP_ORIDE
 : \

1322 
SX1302_REG_TX_TOP_B_TXRX_CFG1_0_INT_STEP_ORIDE
)

	)

1323 
	#SX1302_REG_TX_TOP_TXRX_CFG1_1_MODEM_START
(
rf_chaö
) ((rf_chain == 0) ? \

1324 
SX1302_REG_TX_TOP_A_TXRX_CFG1_1_MODEM_START
 : \

1325 
SX1302_REG_TX_TOP_B_TXRX_CFG1_1_MODEM_START
)

	)

1326 
	#SX1302_REG_TX_TOP_TXRX_CFG1_1_HEADER_DIFF_MODE
(
rf_chaö
) ((rf_chain == 0) ? \

1327 
SX1302_REG_TX_TOP_A_TXRX_CFG1_1_HEADER_DIFF_MODE
 : \

1328 
SX1302_REG_TX_TOP_B_TXRX_CFG1_1_HEADER_DIFF_MODE
)

	)

1329 
	#SX1302_REG_TX_TOP_TXRX_CFG1_1_ZERO_PAD
(
rf_chaö
) ((rf_chain == 0) ? \

1330 
SX1302_REG_TX_TOP_A_TXRX_CFG1_1_ZERO_PAD
 : \

1331 
SX1302_REG_TX_TOP_B_TXRX_CFG1_1_ZERO_PAD
)

	)

1332 
	#SX1302_REG_TX_TOP_TXRX_CFG1_2_PREAMBLE_SYMB_NB
(
rf_chaö
) ((rf_chain == 0) ? \

1333 
SX1302_REG_TX_TOP_A_TXRX_CFG1_2_PREAMBLE_SYMB_NB
 : \

1334 
SX1302_REG_TX_TOP_B_TXRX_CFG1_2_PREAMBLE_SYMB_NB
)

	)

1335 
	#SX1302_REG_TX_TOP_TXRX_CFG1_3_PREAMBLE_SYMB_NB
(
rf_chaö
) ((rf_chain == 0) ? \

1336 
SX1302_REG_TX_TOP_A_TXRX_CFG1_3_PREAMBLE_SYMB_NB
 : \

1337 
SX1302_REG_TX_TOP_B_TXRX_CFG1_3_PREAMBLE_SYMB_NB
)

	)

1338 
	#SX1302_REG_TX_TOP_TXRX_CFG1_4_AUTO_ACK_INT_DELAY
(
rf_chaö
) ((rf_chain == 0) ? \

1339 
SX1302_REG_TX_TOP_A_TXRX_CFG1_4_AUTO_ACK_INT_DELAY
 : \

1340 
SX1302_REG_TX_TOP_B_TXRX_CFG1_4_AUTO_ACK_INT_DELAY
)

	)

1341 
	#SX1302_REG_TX_TOP_TXRX_CFG1_4_AUTO_ACK_RX
(
rf_chaö
) ((rf_chain == 0) ? \

1342 
SX1302_REG_TX_TOP_A_TXRX_CFG1_4_AUTO_ACK_RX
 : \

1343 
SX1302_REG_TX_TOP_B_TXRX_CFG1_4_AUTO_ACK_RX
)

	)

1344 
	#SX1302_REG_TX_TOP_TXRX_CFG1_4_AUTO_ACK_TX
(
rf_chaö
) ((rf_chain == 0) ? \

1345 
SX1302_REG_TX_TOP_A_TXRX_CFG1_4_AUTO_ACK_TX
 : \

1346 
SX1302_REG_TX_TOP_B_TXRX_CFG1_4_AUTO_ACK_TX
)

	)

1347 
	#SX1302_REG_TX_TOP_TX_CFG0_0_CHIRP_LOWPASS
(
rf_chaö
) ((rf_chain == 0) ? \

1348 
SX1302_REG_TX_TOP_A_TX_CFG0_0_CHIRP_LOWPASS
 : \

1349 
SX1302_REG_TX_TOP_B_TX_CFG0_0_CHIRP_LOWPASS
)

	)

1350 
	#SX1302_REG_TX_TOP_TX_CFG0_0_PPM_OFFSET_SIG
(
rf_chaö
) ((rf_chain == 0) ? \

1351 
SX1302_REG_TX_TOP_A_TX_CFG0_0_PPM_OFFSET_SIG
 : \

1352 
SX1302_REG_TX_TOP_B_TX_CFG0_0_PPM_OFFSET_SIG
)

	)

1353 
	#SX1302_REG_TX_TOP_TX_CFG0_0_CONTCHIRP
(
rf_chaö
) ((rf_chain == 0) ? \

1354 
SX1302_REG_TX_TOP_A_TX_CFG0_0_CONTCHIRP
 : \

1355 
SX1302_REG_TX_TOP_B_TX_CFG0_0_CONTCHIRP
)

	)

1356 
	#SX1302_REG_TX_TOP_TX_CFG0_0_CHIRP_INVERT
(
rf_chaö
) ((rf_chain == 0) ? \

1357 
SX1302_REG_TX_TOP_A_TX_CFG0_0_CHIRP_INVERT
 : \

1358 
SX1302_REG_TX_TOP_B_TX_CFG0_0_CHIRP_INVERT
)

	)

1359 
	#SX1302_REG_TX_TOP_TX_CFG0_0_CONTINUOUS
(
rf_chaö
) ((rf_chain == 0) ? \

1360 
SX1302_REG_TX_TOP_A_TX_CFG0_0_CONTINUOUS
 : \

1361 
SX1302_REG_TX_TOP_B_TX_CFG0_0_CONTINUOUS
)

	)

1362 
	#SX1302_REG_TX_TOP_TX_CFG0_1_POWER_RANGING
(
rf_chaö
) ((rf_chain == 0) ? \

1363 
SX1302_REG_TX_TOP_A_TX_CFG0_1_POWER_RANGING
 : \

1364 
SX1302_REG_TX_TOP_B_TX_CFG0_1_POWER_RANGING
)

	)

1365 
	#SX1302_REG_TX_TOP_TX_CFG1_0_FRAME_NB
(
rf_chaö
) ((rf_chain == 0) ? \

1366 
SX1302_REG_TX_TOP_A_TX_CFG1_0_FRAME_NB
 : \

1367 
SX1302_REG_TX_TOP_B_TX_CFG1_0_FRAME_NB
)

	)

1368 
	#SX1302_REG_TX_TOP_TX_CFG1_1_HOP_CTRL
(
rf_chaö
) ((rf_chain == 0) ? \

1369 
SX1302_REG_TX_TOP_A_TX_CFG1_1_HOP_CTRL
 : \

1370 
SX1302_REG_TX_TOP_B_TX_CFG1_1_HOP_CTRL
)

	)

1371 
	#SX1302_REG_TX_TOP_TX_CFG1_1_IFS
(
rf_chaö
) ((rf_chain == 0) ? \

1372 
SX1302_REG_TX_TOP_A_TX_CFG1_1_IFS
 : \

1373 
SX1302_REG_TX_TOP_B_TX_CFG1_1_IFS
)

	)

1374 
	#SX1302_REG_TX_TOP_FRAME_SYNCH_0_AUTO_SCALE
(
rf_chaö
) ((rf_chain == 0) ? \

1375 
SX1302_REG_TX_TOP_A_FRAME_SYNCH_0_AUTO_SCALE
 : \

1376 
SX1302_REG_TX_TOP_B_FRAME_SYNCH_0_AUTO_SCALE
)

	)

1377 
	#SX1302_REG_TX_TOP_FRAME_SYNCH_0_DROP_ON_SYNCH
(
rf_chaö
) ((rf_chain == 0) ? \

1378 
SX1302_REG_TX_TOP_A_FRAME_SYNCH_0_DROP_ON_SYNCH
 : \

1379 
SX1302_REG_TX_TOP_B_FRAME_SYNCH_0_DROP_ON_SYNCH
)

	)

1380 
	#SX1302_REG_TX_TOP_FRAME_SYNCH_0_GAIN
(
rf_chaö
) ((rf_chain == 0) ? \

1381 
SX1302_REG_TX_TOP_A_FRAME_SYNCH_0_GAIN
 : \

1382 
SX1302_REG_TX_TOP_B_FRAME_SYNCH_0_GAIN
)

	)

1383 
	#SX1302_REG_TX_TOP_FRAME_SYNCH_0_PEAK1_POS
(
rf_chaö
) ((rf_chain == 0) ? \

1384 
SX1302_REG_TX_TOP_A_FRAME_SYNCH_0_PEAK1_POS
 : \

1385 
SX1302_REG_TX_TOP_B_FRAME_SYNCH_0_PEAK1_POS
)

	)

1386 
	#SX1302_REG_TX_TOP_FRAME_SYNCH_1_FINETIME_ON_LAST
(
rf_chaö
) ((rf_chain == 0) ? \

1387 
SX1302_REG_TX_TOP_A_FRAME_SYNCH_1_FINETIME_ON_LAST
 : \

1388 
SX1302_REG_TX_TOP_B_FRAME_SYNCH_1_FINETIME_ON_LAST
)

	)

1389 
	#SX1302_REG_TX_TOP_FRAME_SYNCH_1_TIMEOUT_OPT
(
rf_chaö
) ((rf_chain == 0) ? \

1390 
SX1302_REG_TX_TOP_A_FRAME_SYNCH_1_TIMEOUT_OPT
 : \

1391 
SX1302_REG_TX_TOP_B_FRAME_SYNCH_1_TIMEOUT_OPT
)

	)

1392 
	#SX1302_REG_TX_TOP_FRAME_SYNCH_1_PEAK2_POS
(
rf_chaö
) ((rf_chain == 0) ? \

1393 
SX1302_REG_TX_TOP_A_FRAME_SYNCH_1_PEAK2_POS
 : \

1394 
SX1302_REG_TX_TOP_B_FRAME_SYNCH_1_PEAK2_POS
)

	)

1395 
	#SX1302_REG_TX_TOP_LORA_TX_STATE_STATUS
(
rf_chaö
) ((rf_chain == 0) ? \

1396 
SX1302_REG_TX_TOP_A_LORA_TX_STATE_STATUS
 : \

1397 
SX1302_REG_TX_TOP_B_LORA_TX_STATE_STATUS
)

	)

1398 
	#SX1302_REG_TX_TOP_LORA_TX_FLAG_FRAME_DONE
(
rf_chaö
) ((rf_chain == 0) ? \

1399 
SX1302_REG_TX_TOP_A_LORA_TX_FLAG_FRAME_DONE
 : \

1400 
SX1302_REG_TX_TOP_B_LORA_TX_FLAG_FRAME_DONE
)

	)

1401 
	#SX1302_REG_TX_TOP_LORA_TX_FLAG_CONT_DONE
(
rf_chaö
) ((rf_chain == 0) ? \

1402 
SX1302_REG_TX_TOP_A_LORA_TX_FLAG_CONT_DONE
 : \

1403 
SX1302_REG_TX_TOP_B_LORA_TX_FLAG_CONT_DONE
)

	)

1404 
	#SX1302_REG_TX_TOP_LORA_TX_FLAG_PLD_DONE
(
rf_chaö
) ((rf_chain == 0) ? \

1405 
SX1302_REG_TX_TOP_A_LORA_TX_FLAG_PLD_DONE
 : \

1406 
SX1302_REG_TX_TOP_B_LORA_TX_FLAG_PLD_DONE
)

	)

1407 
	#SX1302_REG_TX_TOP_DUMMY_LORA_DUMMY
(
rf_chaö
) ((rf_chain == 0) ? \

1408 
SX1302_REG_TX_TOP_A_DUMMY_LORA_DUMMY
 : \

1409 
SX1302_REG_TX_TOP_B_DUMMY_LORA_DUMMY
)

	)

1420 
lgw_sx1302_ªg_r
(
uöt16_t
 
ªgi°î_id
, 
öt32_t
* 
ªg_vÆue
);

1421 
lgw_sx1302_ªg_w
(
uöt16_t
 
ªgi°î_id
, 
öt32_t
 
ªg_vÆue
);

1422 
lgw_sx1302_ªg_rb
(
uöt16_t
 
ªgi°î_id
, 
uöt8_t
* 
d©a
, uöt16_à
size
);

1423 
lgw_sx1302_ªg_wb
(
uöt16_t
 
ªgi°î_id
, 
uöt8_t
* 
d©a
, uöt16_à
size
);

1430 
lgw_sx1302_c⁄√˘
(c⁄° * 
•idev_∑th
);

1436 
lgw_sx1302_disc⁄√˘
();

	@hal/sx1302hal/loragw_stts751.c

19 
	~<°döt.h
>

20 
	~<°dboﬁ.h
>

21 
	~<°dio.h
>

23 
	~"l‹agw_i2c.h
"

24 
	~"l‹agw_°ts751.h
"

29 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

30 #i‡
DEBUG_I2C
 == 1

31 
	#DEBUG_MSG
(
°r
Ë
	`Ârötf
(
°dîr
, så)

	)

32 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...Ë
	`Ârötf
(
°dîr
,"%s:%d: "fmt, 
__FUNCTION__
, 
__LINE__
,árgs)

	)

33 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){
	`Ârötf
(
°dîr
,"%s:%d: ERROR: NULL POINTER AS ARGUMENT\n", 
__FUNCTION__
, 
__LINE__
); 
LGW_REG_ERROR
;}

	)

35 
	#DEBUG_MSG
(
°r
)

	)

36 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...)

	)

37 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){ 
LGW_REG_ERROR
;}

	)

43 
	#STTS751_REG_TEMP_H
 0x00

	)

44 
	#STTS751_REG_STATUS
 0x01

	)

45 
	#STTS751_STATUS_TRIPT
 
	`BIT
(0)

	)

46 
	#STTS751_STATUS_TRIPL
 
	`BIT
(5)

	)

47 
	#STTS751_STATUS_TRIPH
 
	`BIT
(6)

	)

48 
	#STTS751_REG_TEMP_L
 0x02

	)

49 
	#STTS751_REG_CONF
 0x03

	)

50 
	#STTS751_CONF_RES_MASK
 0x0C

	)

51 
	#STTS751_CONF_RES_SHIFT
 2

	)

52 
	#STTS751_CONF_EVENT_DIS
 
	`BIT
(7)

	)

53 
	#STTS751_CONF_STOP
 
	`BIT
(6)

	)

54 
	#STTS751_REG_RATE
 0x04

	)

55 
	#STTS751_REG_HLIM_H
 0x05

	)

56 
	#STTS751_REG_HLIM_L
 0x06

	)

57 
	#STTS751_REG_LLIM_H
 0x07

	)

58 
	#STTS751_REG_LLIM_L
 0x08

	)

59 
	#STTS751_REG_TLIM
 0x20

	)

60 
	#STTS751_REG_HYST
 0x21

	)

61 
	#STTS751_REG_SMBUS_TO
 0x22

	)

63 
	#STTS751_REG_PROD_ID
 0xFD

	)

64 
	#STTS751_REG_MAN_ID
 0xFE

	)

65 
	#STTS751_REG_REV_ID
 0xFF

	)

67 
	#STTS751_0_PROD_ID
 0x00

	)

68 
	#STTS751_1_PROD_ID
 0x01

	)

69 
	#ST_MAN_ID
 0x53

	)

83 
	$°ts751_c⁄figuª
(
i2c_fd
, 
uöt8_t
 
i2c_addr
) {

84 
îr
;

85 
uöt8_t
 
vÆ
;

88 i‡(
i2c_fd
 <= 0) {

89 
	`¥ötf
("ERROR: invalid I2C file descriptor\n");

90  
LGW_I2C_ERROR
;

93 
	`DEBUG_PRINTF
("INFO: c⁄figurög STTS751Åem≥øtuª sís‹ o¿0x%02X...\n", 
i2c_addr
);

96 
îr
 = 
	`i2c_löuxdev_ªad
(
i2c_fd
, 
i2c_addr
, 
STTS751_REG_PROD_ID
, &
vÆ
);

97 i‡(
îr
 != 0) {

98 
	`DEBUG_PRINTF
("ERROR: faûedÅÿªad I2C devi˚ 0x%02X (îr=%i)\n", 
i2c_addr
, 
îr
);

99  
LGW_I2C_ERROR
;

101 
vÆ
) {

102 
STTS751_0_PROD_ID
:

103 
	`DEBUG_MSG
("INFO: Product ID: STTS751-0\n");

105 
STTS751_1_PROD_ID
:

106 
	`DEBUG_MSG
("INFO: Product ID: STTS751-1\n");

109 
	`¥ötf
("ERROR: Product ID: UNKNOWN\n");

110  
LGW_I2C_ERROR
;

114 
îr
 = 
	`i2c_löuxdev_ªad
(
i2c_fd
, 
i2c_addr
, 
STTS751_REG_MAN_ID
, &
vÆ
);

115 i‡(
îr
 != 0) {

116 
	`DEBUG_PRINTF
("ERROR: faûedÅÿªad I2C devi˚ 0x%02X (îr=%i)\n", 
i2c_addr
, 
îr
);

117  
LGW_I2C_ERROR
;

119 i‡(
vÆ
 !
ST_MAN_ID
) {

120 
	`¥ötf
("ERROR: Manufacturer ID: UNKNOWN\n");

121  
LGW_I2C_ERROR
;

123 
	`DEBUG_PRINTF
("INFO: M™uÁ˘uª∏ID: 0x%02X\n", 
vÆ
);

127 
îr
 = 
	`i2c_löuxdev_ªad
(
i2c_fd
, 
i2c_addr
, 
STTS751_REG_REV_ID
, &
vÆ
);

128 i‡(
îr
 != 0) {

129 
	`DEBUG_PRINTF
("ERROR: faûedÅÿªad I2C devi˚ 0x%02X (îr=%i)\n", 
i2c_addr
, 
îr
);

130  
LGW_I2C_ERROR
;

132 
	`DEBUG_PRINTF
("INFO: Revisi⁄Çumbî: 0x%02X\n", 
vÆ
);

135 
îr
 = 
	`i2c_löuxdev_wrôe
(
i2c_fd
, 
i2c_addr
, 
STTS751_REG_CONF
, 0x8C);

136 i‡(
îr
 != 0) {

137 
	`DEBUG_PRINTF
("ERROR: faûedÅÿwrôêI2C devi˚ 0x%02X (îr=%i)\n", 
i2c_addr
, 
îr
);

138  
LGW_I2C_ERROR
;

142 
îr
 = 
	`i2c_löuxdev_wrôe
(
i2c_fd
, 
i2c_addr
, 
STTS751_REG_RATE
, 0x04);

143 i‡(
îr
 != 0) {

144 
	`DEBUG_PRINTF
("ERROR: faûedÅÿwrôêI2C devi˚ 0x%02X (îr=%i)\n", 
i2c_addr
, 
îr
);

145  
LGW_I2C_ERROR
;

148  
LGW_I2C_SUCCESS
;

149 
	}
}

153 
	$°ts751_gë_ãm≥øtuª
(
i2c_fd
, 
uöt8_t
 
i2c_addr
, * 
ãm≥øtuª
) {

154 
îr
;

155 
uöt8_t
 
high_byã
, 
low_byã
;

156 
öt8_t
 
h
;

159 i‡(
i2c_fd
 <= 0) {

160 
	`¥ötf
("ERROR: invalid I2C file descriptor\n");

161  
LGW_I2C_ERROR
;

165 
îr
 = 
	`i2c_löuxdev_ªad
(
i2c_fd
, 
i2c_addr
, 
STTS751_REG_TEMP_L
, &
low_byã
);

166 i‡(
îr
 != 0) {

167 
	`¥ötf
("ERROR: faûedÅÿªad I2C devi˚ 0x%02X (îr=%i)\n", 
i2c_addr
, 
îr
);

168  
LGW_I2C_ERROR
;

172 
îr
 = 
	`i2c_löuxdev_ªad
(
i2c_fd
, 
i2c_addr
, 
STTS751_REG_TEMP_H
, &
high_byã
);

173 i‡(
îr
 != 0) {

174 
	`¥ötf
("ERROR: faûedÅÿªad I2C devi˚ 0x%02X (îr=%i)\n", 
i2c_addr
, 
îr
);

175  
LGW_I2C_ERROR
;

178 
h
 = (
öt8_t
)
high_byã
;

179 *
ãm≥øtuª
 = ((
h
 << 8Ë| 
low_byã
) / 256.0;

181 
	`DEBUG_PRINTF
("Tem≥øtuª: %‡C (h:0x%02XÜ:0x%02X)\n", *
ãm≥øtuª
, 
high_byã
, 
low_byã
);

183  
LGW_I2C_SUCCESS
;

184 
	}
}

	@hal/sx1302hal/loragw_stts751.h

16 #i‚de‡
_LORAGW_STTS751_H


17 
	#_LORAGW_STTS751_H


	)

22 
	~<°döt.h
>

23 
	~<°dboﬁ.h
>

25 
	~"c⁄fig.h
"

36 
	#I2C_PORT_TEMP_SENSOR_0
 0x39

	)

37 
	#I2C_PORT_TEMP_SENSOR_1
 0x3B

	)

47 
°ts751_c⁄figuª
(
i2c_fd
, 
uöt8_t
 
i2c_addr
);

54 
°ts751_gë_ãm≥øtuª
(
i2c_fd
, 
uöt8_t
 
i2c_addr
, * 
ãm≥øtuª
);

	@hal/sx1302hal/loragw_sx1250.c

19 
	~<°döt.h
>

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<uni°d.h
>

23 
	~<f˙é.h
>

24 
	~<°rög.h
>

26 
	~<sys/io˘l.h
>

27 
	~<löux/•i/•idev.h
>

29 
	~"l‹agw_•i.h
"

30 
	~"l‹agw_ªg.h
"

31 
	~"l‹agw_aux.h
"

32 
	~"l‹agw_sx1250.h
"

37 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

38 #i‡
DEBUG_RAD
 == 1

39 
	#DEBUG_MSG
(
°r
Ë
	`Ârötf
(
°dîr
, så)

	)

40 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...Ë
	`Ârötf
(
°dîr
,"%s:%d: "fmt, 
__FUNCTION__
, 
__LINE__
,árgs)

	)

41 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){
	`Ârötf
(
°dîr
,"%s:%d: ERROR: NULL POINTER AS ARGUMENT\n", 
__FUNCTION__
, 
__LINE__
); 
LGW_SPI_ERROR
;}

	)

43 
	#DEBUG_MSG
(
°r
)

	)

44 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...)

	)

45 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){ 
LGW_SPI_ERROR
;}

	)

48 
	#SX1250_FREQ_TO_REG
(
f
Ë(
uöt32_t
)((
uöt64_t
)‡* (1 << 25Ë/ 32000000U)

	)

53 
	#WAIT_BUSY_SX1250_MS
 1

	)

58 *
lgw_•i_èrgë
;

63 
	$sx1250_wrôe_comm™d
(
uöt8_t
 
rf_chaö
, 
sx1250_›_code_t
 
›_code
, uöt8_à*
d©a
, 
uöt16_t
 
size
) {

64 
•i_devi˚
;

65 
cmd_size
 = 2;

66 
uöt8_t
 
out_buf
[
cmd_size
 + 
size
];

67 
uöt8_t
 
comm™d_size
;

68 
•i_ioc_å™s„r
 
k
;

69 
a
, 
i
;

72 
	`waô_ms
(
WAIT_BUSY_SX1250_MS
);

75 
	`CHECK_NULL
(
lgw_•i_èrgë
);

77 
•i_devi˚
 = *(*)
lgw_•i_èrgë
;

80 
out_buf
[0] = (
rf_chaö
 =0Ë? 
LGW_SPI_MUX_TARGET_RADIOA
 : 
LGW_SPI_MUX_TARGET_RADIOB
;

81 
out_buf
[1] = (
uöt8_t
)
›_code
;

82 
i
 = 0; i < ()
size
; i++) {

83 
out_buf
[
cmd_size
 + 
i
] = 
d©a
[i];

85 
comm™d_size
 = 
cmd_size
 + 
size
;

88 
	`mem£t
(&
k
, 0, (k));

89 
k
.
tx_buf
 = (Ë
out_buf
;

90 
k
.
Àn
 = 
comm™d_size
;

91 
k
.
•ìd_hz
 = 
SPI_SPEED
;

92 
k
.
cs_ch™ge
 = 0;

93 
k
.
bôs_≥r_w‹d
 = 8;

94 
a
 = 
	`io˘l
(
•i_devi˚
, 
	`SPI_IOC_MESSAGE
(1), &
k
);

97 i‡(
a
 !()
k
.
Àn
) {

98 
	`DEBUG_MSG
("ERROR: SPI WRITE FAILURE\n");

99  
LGW_SPI_ERROR
;

101 
	`DEBUG_MSG
("Note: SPI write success\n");

102  
LGW_SPI_SUCCESS
;

104 
	}
}

108 
	$sx1250_ªad_comm™d
(
uöt8_t
 
rf_chaö
, 
sx1250_›_code_t
 
›_code
, uöt8_à*
d©a
, 
uöt16_t
 
size
) {

109 
•i_devi˚
;

110 
cmd_size
 = 2;

111 
uöt8_t
 
out_buf
[
cmd_size
 + 
size
];

112 
uöt8_t
 
comm™d_size
;

113 
uöt8_t
 
ö_buf
[
	`ARRAY_SIZE
(
out_buf
)];

114 
•i_ioc_å™s„r
 
k
;

115 
a
, 
i
;

118 
	`waô_ms
(
WAIT_BUSY_SX1250_MS
);

121 
	`CHECK_NULL
(
lgw_•i_èrgë
);

122 
	`CHECK_NULL
(
d©a
);

124 
•i_devi˚
 = *(*)
lgw_•i_èrgë
;

127 
out_buf
[0] = (
rf_chaö
 =0Ë? 
LGW_SPI_MUX_TARGET_RADIOA
 : 
LGW_SPI_MUX_TARGET_RADIOB
;

128 
out_buf
[1] = (
uöt8_t
)
›_code
;

129 
i
 = 0; i < ()
size
; i++) {

130 
out_buf
[
cmd_size
 + 
i
] = 
d©a
[i];

132 
comm™d_size
 = 
cmd_size
 + 
size
;

135 
	`mem£t
(&
k
, 0, (k));

136 
k
.
tx_buf
 = (Ë
out_buf
;

137 
k
.
rx_buf
 = (Ë
ö_buf
;

138 
k
.
Àn
 = 
comm™d_size
;

139 
k
.
cs_ch™ge
 = 0;

140 
a
 = 
	`io˘l
(
•i_devi˚
, 
	`SPI_IOC_MESSAGE
(1), &
k
);

143 i‡(
a
 !()
k
.
Àn
) {

144 
	`DEBUG_MSG
("ERROR: SPI READ FAILURE\n");

145  
LGW_SPI_ERROR
;

147 
	`DEBUG_MSG
("Note: SPIÑead success\n");

149 
	`mem˝y
(
d©a
, 
ö_buf
 + 
cmd_size
, 
size
);

150  
LGW_SPI_SUCCESS
;

152 
	}
}

156 
	$sx1250_ˇlibøã
(
uöt8_t
 
rf_chaö
, 
uöt32_t
 
‰eq_hz
) {

157 
uöt8_t
 
buff
[16];

159 
buff
[0] = 0x00;

160 
	`sx1250_ªad_comm™d
(
rf_chaö
, 
GET_STATUS
, 
buff
, 1);

163 i‡((
‰eq_hz
 > 430E6) && (freq_hz < 440E6)) {

164 
buff
[0] = 0x6B;

165 
buff
[1] = 0x6F;

166 } i‡((
‰eq_hz
 > 470E6) && (freq_hz < 510E6)) {

167 
buff
[0] = 0x75;

168 
buff
[1] = 0x81;

169 } i‡((
‰eq_hz
 > 779E6) && (freq_hz < 787E6)) {

170 
buff
[0] = 0xC1;

171 
buff
[1] = 0xC5;

172 } i‡((
‰eq_hz
 > 863E6) && (freq_hz < 870E6)) {

173 
buff
[0] = 0xD7;

174 
buff
[1] = 0xDB;

175 } i‡((
‰eq_hz
 > 902E6) && (freq_hz < 928E6)) {

176 
buff
[0] = 0xE1;

177 
buff
[1] = 0xE9;

179 
	`¥ötf
("ERROR: faûedÅÿˇlibøã sx1250Ñadio, fªquícyÑ™gênŸ suµ‹ãd (%u)\n", 
‰eq_hz
);

182 
	`sx1250_wrôe_comm™d
(
rf_chaö
, 
CALIBRATE_IMAGE
, 
buff
, 2);

185 
	`waô_ms
(10);

187 
buff
[0] = 0x00;

188 
buff
[1] = 0x00;

189 
buff
[2] = 0x00;

190 
	`sx1250_ªad_comm™d
(
rf_chaö
, 
GET_DEVICE_ERRORS
, 
buff
, 3);

191 i‡(
	`TAKE_N_BITS_FROM
(
buff
[2], 4, 1) != 0) {

192 
	`¥ötf
("ERROR: sx1250 Image Calibration Error\n");

197 
	}
}

201 
	$sx1250_£tup
(
uöt8_t
 
rf_chaö
, 
uöt32_t
 
‰eq_hz
, 
boﬁ
 
sögÀ_öput_mode
) {

202 
öt32_t
 
‰eq_ªg
;

203 
uöt8_t
 
buff
[16];

206 
buff
[0] = (
uöt8_t
)
STDBY_RC
;

207 
	`sx1250_wrôe_comm™d
(
rf_chaö
, 
SET_STANDBY
, 
buff
, 1);

208 
	`waô_ms
(10);

211 
buff
[0] = 0x00;

212 
	`sx1250_ªad_comm™d
(
rf_chaö
, 
GET_STATUS
, 
buff
, 1);

213 i‡((
uöt8_t
)(
	`TAKE_N_BITS_FROM
(
buff
[0], 4, 3)) != 0x02) {

214 
	`¥ötf
("ERROR: FaûedÅÿ£àSX1250_%u i¿STANDBY_RC mode\n", 
rf_chaö
);

219 
buff
[0] = 0x7F;

220 
	`sx1250_wrôe_comm™d
(
rf_chaö
, 
CALIBRATE
, 
buff
, 1);

221 
	`waô_ms
(10);

224 
buff
[0] = (
uöt8_t
)
STDBY_XOSC
;

225 
	`sx1250_wrôe_comm™d
(
rf_chaö
, 
SET_STANDBY
, 
buff
, 1);

226 
	`waô_ms
(10);

229 
buff
[0] = 0x00;

230 
	`sx1250_ªad_comm™d
(
rf_chaö
, 
GET_STATUS
, 
buff
, 1);

231 i‡((
uöt8_t
)(
	`TAKE_N_BITS_FROM
(
buff
[0], 4, 3)) != 0x03) {

232 
	`¥ötf
("ERROR: FaûedÅÿ£àSX1250_%u i¿STANDBY_XOSC mode\n", 
rf_chaö
);

237 
buff
[0] = 0x06;

238 
buff
[1] = 0xA1;

239 
buff
[2] = 0x01;

240 
	`sx1250_wrôe_comm™d
(
rf_chaö
, 
WRITE_REGISTER
, 
buff
, 3);

241 
buff
[0] = 0x06;

242 
buff
[1] = 0xA2;

243 
buff
[2] = 0x00;

244 
	`sx1250_wrôe_comm™d
(
rf_chaö
, 
WRITE_REGISTER
, 
buff
, 3);

245 
buff
[0] = 0x06;

246 
buff
[1] = 0xA3;

247 
buff
[2] = 0x00;

248 
	`sx1250_wrôe_comm™d
(
rf_chaö
, 
WRITE_REGISTER
, 
buff
, 3);

251 
buff
[0] = 0x05;

252 
buff
[1] = 0x82;

253 
buff
[2] = 0x00;

254 
	`sx1250_wrôe_comm™d
(
rf_chaö
, 
WRITE_REGISTER
, 
buff
, 3);

255 
buff
[0] = 0x05;

256 
buff
[1] = 0x83;

257 
buff
[2] = 0x00;

258 
	`sx1250_wrôe_comm™d
(
rf_chaö
, 
WRITE_REGISTER
, 
buff
, 3);

259 
buff
[0] = 0x05;

260 
buff
[1] = 0x84;

261 
buff
[2] = 0x00;

262 
	`sx1250_wrôe_comm™d
(
rf_chaö
, 
WRITE_REGISTER
, 
buff
, 3);

263 
buff
[0] = 0x05;

264 
buff
[1] = 0x85;

265 
buff
[2] = 0x00;

266 
	`sx1250_wrôe_comm™d
(
rf_chaö
, 
WRITE_REGISTER
, 
buff
, 3);

267 
buff
[0] = 0x05;

268 
buff
[1] = 0x80;

269 
buff
[2] = 0x00;

270 
	`sx1250_wrôe_comm™d
(
rf_chaö
, 
WRITE_REGISTER
, 
buff
, 3);

273 
buff
[0] = 0x08;

274 
buff
[1] = 0xB6;

275 
buff
[2] = 0x2A;

276 
	`sx1250_wrôe_comm™d
(
rf_chaö
, 
WRITE_REGISTER
, 
buff
, 3);

279 
‰eq_ªg
 = 
	`SX1250_FREQ_TO_REG
(
‰eq_hz
);

280 
buff
[0] = (
uöt8_t
)(
‰eq_ªg
 >> 24);

281 
buff
[1] = (
uöt8_t
)(
‰eq_ªg
 >> 16);

282 
buff
[2] = (
uöt8_t
)(
‰eq_ªg
 >> 8);

283 
buff
[3] = (
uöt8_t
)(
‰eq_ªg
 >> 0);

284 
	`sx1250_wrôe_comm™d
(
rf_chaö
, 
SET_RF_FREQUENCY
, 
buff
, 4);

287 
buff
[0] = 0x08;

288 
buff
[1] = 0x8F;

289 
buff
[2] = 0x00;

290 
buff
[3] = 0x00;

291 
buff
[4] = 0x00;

292 
	`sx1250_wrôe_comm™d
(
rf_chaö
, 
WRITE_REGISTER
, 
buff
, 5);

295 
buff
[0] = 0xFF;

296 
buff
[1] = 0xFF;

297 
buff
[2] = 0xFF;

298 
	`sx1250_wrôe_comm™d
(
rf_chaö
, 
SET_RX
, 
buff
, 3);

301 i‡(
sögÀ_öput_mode
 =
åue
) {

302 
	`¥ötf
("INFO: C⁄figurög SX1250_%u i¿sögÀ i≈uàmode\n", 
rf_chaö
);

303 
buff
[0] = 0x08;

304 
buff
[1] = 0xE2;

305 
buff
[2] = 0x0D;

306 
	`sx1250_wrôe_comm™d
(
rf_chaö
, 
WRITE_REGISTER
, 
buff
, 3);

309 
buff
[0] = 0x05;

310 
buff
[1] = 0x87;

311 
buff
[2] = 0x0B;

312 
	`sx1250_wrôe_comm™d
(
rf_chaö
, 
WRITE_REGISTER
, 
buff
, 3);

315 
	}
}

	@hal/sx1302hal/loragw_sx1250.h

16 #i‚de‡
_LORAGW_SX1250_H


17 
	#_LORAGW_SX1250_H


	)

22 
	~<°döt.h
>

24 
	~"c⁄fig.h
"

29 
	#SX1250_FREQ_TO_REG
(
f
Ë(
uöt32_t
)((
uöt64_t
)‡* (1 << 25Ë/ 32000000U)

	)

38 
	mCALIBRATE
 = 0x89,

39 
	mCALIBRATE_IMAGE
 = 0x98,

40 
	mCLR_IRQ_STATUS
 = 0x02,

41 
	mSTOP_TIMER_ON_PREAMBLE
 = 0x9F,

42 
	mSET_RFSWITCHMODE
 = 0x9D,

43 
	mGET_IRQ_STATUS
 = 0x12,

44 
	mGET_RX_BUFFER_STATUS
 = 0x13,

45 
	mGET_PACKET_STATUS
 = 0x14,

46 
	mREAD_BUFFER
 = 0x1E,

47 
	mREAD_REGISTER
 = 0x1D,

48 
	mSET_DIO_IRQ_PARAMS
 = 0x08,

49 
	mSET_MODULATION_PARAMS
 = 0x8B,

50 
	mSET_PA_CONFIG
 = 0x95,

51 
	mSET_PACKET_PARAMS
 = 0x8C,

52 
	mSET_PACKET_TYPE
 = 0x8A,

53 
	mSET_RF_FREQUENCY
 = 0x86,

54 
	mSET_BUFFER_BASE_ADDRESS
 = 0x8F,

55 
	mSET_SLEEP
 = 0x84,

56 
	mSET_STANDBY
 = 0x80,

57 
	mSET_RX
 = 0x82,

58 
	mSET_TX
 = 0x83,

59 
	mSET_TX_PARAMS
 = 0x8E,

60 
	mWRITE_BUFFER
 = 0x0E,

61 
	mWRITE_REGISTER
 = 0x0D,

62 
	mSET_TXCONTINUOUSWAVE
 = 0xD1,

63 
	mSET_TXCONTINUOUSPREAMBLE
= 0xD2,

64 
	mGET_STATUS
 = 0xC0,

65 
	mSET_REGULATORMODE
 = 0x96,

66 
	mSET_FS
 = 0xC1,

67 
	mGET_DEVICE_ERRORS
 = 0x17

68 } 
	tsx1250_›_code_t
;

71 
	mSTDBY_RC
 = 0x00,

72 
	mSTDBY_XOSC
 = 0x01

73 } 
	tsx1250_°™dby_modes_t
;

76 
	mPACKET_TYPE_GFSK
 = 0x00,

77 
	mPACKET_TYPE_LORA
 = 0x01

78 } 
	tsx1250_∑ckë_ty≥_t
;

81 
	mSET_RAMP_10U
 = 0x00,

82 
	mSET_RAMP_20U
 = 0x01,

83 
	mSET_RAMP_40U
 = 0x02,

84 
	mSET_RAMP_80U
 = 0x03,

85 
	mSET_RAMP_200U
 = 0x04,

86 
	mSET_RAMP_800U
 = 0x05,

87 
	mSET_RAMP_1700U
 = 0x06,

88 
	mSET_RAMP_3400U
 = 0x07

89 } 
	tsx1250_ømp_time_t
;

94 
sx1250_wrôe_comm™d
(
uöt8_t
 
rf_chaö
, 
sx1250_›_code_t
 
›_code
, uöt8_à*
d©a
, 
uöt16_t
 
size
);

95 
sx1250_ªad_comm™d
(
uöt8_t
 
rf_chaö
, 
sx1250_›_code_t
 
›_code
, uöt8_à*
d©a
, 
uöt16_t
 
size
);

97 
sx1250_ˇlibøã
(
uöt8_t
 
rf_chaö
, 
uöt32_t
 
‰eq_hz
);

98 
sx1250_£tup
(
uöt8_t
 
rf_chaö
, 
uöt32_t
 
‰eq_hz
, 
boﬁ
 
sögÀ_öput_mode
);

	@hal/sx1302hal/loragw_sx125x.c

18 
	~<°döt.h
>

19 
	~<°dboﬁ.h
>

20 
	~<°dio.h
>

21 
	~<°rög.h
>

22 
	~<sys/io˘l.h
>

23 
	~<löux/•i/•idev.h
>

25 
	~"l‹agw_sx125x.h
"

26 
	~"l‹agw_•i.h
"

27 
	~"l‹agw_aux.h
"

28 
	~"l‹agw_ªg.h
"

29 
	~"l‹agw_hÆ.h
"

34 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

35 #i‡
DEBUG_RAD
 == 1

36 
	#DEBUG_MSG
(
°r
Ë
	`Ârötf
(
°dîr
, så)

	)

37 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...Ë
	`Ârötf
(
°dîr
,"%s:%d: "fmt, 
__FUNCTION__
, 
__LINE__
,árgs)

	)

38 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){
	`Ârötf
(
°dîr
,"%s:%d: ERROR: NULL POINTER AS ARGUMENT\n", 
__FUNCTION__
, 
__LINE__
); 
LGW_REG_ERROR
;}

	)

40 
	#DEBUG_MSG
(
°r
)

	)

41 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...)

	)

42 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){ 
LGW_REG_ERROR
;}

	)

51 
	#PLL_LOCK_MAX_ATTEMPTS
 5

	)

53 
	#READ_ACCESS
 0x00

	)

54 
	#WRITE_ACCESS
 0x80

	)

56 c⁄° 
ødio_ªg_s
 
	gsx125x_ªgs
[
RADIO_TOTALREGS
] = {

113 *
lgw_•i_èrgë
;

119 
	$sx125x_ªg_r
(*
•i_èrgë
, 
uöt8_t
 
•i_mux_èrgë
, uöt8_à
addªss
, uöt8_à*
d©a
) {

120 
•i_devi˚
;

121 
uöt8_t
 
out_buf
[3];

122 
uöt8_t
 
comm™d_size
;

123 
uöt8_t
 
ö_buf
[
	`ARRAY_SIZE
(
out_buf
)];

124 
•i_ioc_å™s„r
 
k
;

125 
a
;

128 
	`CHECK_NULL
(
•i_èrgë
);

129 
	`CHECK_NULL
(
d©a
);

131 
•i_devi˚
 = *(*)
•i_èrgë
;

134 
out_buf
[0] = 
•i_mux_èrgë
;

135 
out_buf
[1] = 
READ_ACCESS
 | (
addªss
 & 0x7F);

136 
out_buf
[2] = 0x00;

137 
comm™d_size
 = 3;

140 
	`mem£t
(&
k
, 0, (k));

141 
k
.
tx_buf
 = (Ë
out_buf
;

142 
k
.
rx_buf
 = (Ë
ö_buf
;

143 
k
.
Àn
 = 
comm™d_size
;

144 
k
.
cs_ch™ge
 = 0;

145 
a
 = 
	`io˘l
(
•i_devi˚
, 
	`SPI_IOC_MESSAGE
(1), &
k
);

148 i‡(
a
 !()
k
.
Àn
) {

149 
	`DEBUG_MSG
("ERROR: SPI READ FAILURE\n");

150  
LGW_SPI_ERROR
;

153 *
d©a
 = 
ö_buf
[
comm™d_size
 - 1];

154  
LGW_SPI_SUCCESS
;

156 
	}
}

160 
	$sx125x_ªg_w
(*
•i_èrgë
, 
uöt8_t
 
•i_mux_èrgë
, uöt8_à
addªss
, uöt8_à
d©a
) {

161 
•i_devi˚
;

162 
uöt8_t
 
out_buf
[3];

163 
uöt8_t
 
comm™d_size
;

164 
•i_ioc_å™s„r
 
k
;

165 
a
;

168 
	`CHECK_NULL
(
•i_èrgë
);

170 
•i_devi˚
 = *(*)
•i_èrgë
;

173 
out_buf
[0] = 
•i_mux_èrgë
;

174 
out_buf
[1] = 
WRITE_ACCESS
 | (
addªss
 & 0x7F);

175 
out_buf
[2] = 
d©a
;

176 
comm™d_size
 = 3;

179 
	`mem£t
(&
k
, 0, (k));

180 
k
.
tx_buf
 = (Ë
out_buf
;

181 
k
.
Àn
 = 
comm™d_size
;

182 
k
.
•ìd_hz
 = 
SPI_SPEED
;

183 
k
.
cs_ch™ge
 = 0;

184 
k
.
bôs_≥r_w‹d
 = 8;

185 
a
 = 
	`io˘l
(
•i_devi˚
, 
	`SPI_IOC_MESSAGE
(1), &
k
);

188 i‡(
a
 !()
k
.
Àn
) {

189 
	`DEBUG_MSG
("ERROR: SPI WRITE FAILURE\n");

190  
LGW_SPI_ERROR
;

193  
LGW_SPI_SUCCESS
;

195 
	}
}

199 
	$lgw_sx125x_ªg_w
(
ødio_ªg_t
 
idx
, 
uöt8_t
 
d©a
, uöt8_à
rf_chaö
) {

201 
•i_°©
;

202 
ødio_ªg_s
 
ªg
;

203 
uöt8_t
 
mask
;

204 
uöt8_t
 
r
;

205 
uöt8_t
 
w
;

206 
uöt8_t
 
vÆ_check
;

209 i‡(
rf_chaö
 >
LGW_RF_CHAIN_NB
) {

210 
	`DEBUG_MSG
("ERROR: INVALID RF_CHAIN\n");

211  
LGW_REG_ERROR
;

213 i‡(
idx
 >
RADIO_TOTALREGS
) {

214 
	`DEBUG_MSG
("ERROR: REGISTER NUMBER OUT OF DEFINED RANGE\n");

215  
LGW_REG_ERROR
;

218 
ªg
 = 
sx125x_ªgs
[
idx
];

220 i‡((
ªg
.
Àng
 =8Ë&& (ªg.
offs
 == 0)){

222 
•i_°©
 = 
	`sx125x_ªg_w
(
lgw_•i_èrgë
, ((
rf_chaö
 =0Ë? 
LGW_SPI_MUX_TARGET_RADIOA
 : 
LGW_SPI_MUX_TARGET_RADIOB
), 
ªg
.
addr
, 
d©a
);

225 
•i_°©
 = 
	`sx125x_ªg_r
(
lgw_•i_èrgë
, ((
rf_chaö
 =0Ë? 
LGW_SPI_MUX_TARGET_RADIOA
 : 
LGW_SPI_MUX_TARGET_RADIOB
), 
ªg
.
addr
, &
r
);

226 
mask
 = ((1 << 
ªg
.
Àng
Ë- 1Ë<<Ñeg.
offs
;

227 
w
 = (
r
 & ~
mask
Ë| ((
d©a
 << 
ªg
.
offs
) & mask);

228 
•i_°©
 |
	`sx125x_ªg_w
(
lgw_•i_èrgë
, ((
rf_chaö
 =0Ë? 
LGW_SPI_MUX_TARGET_RADIOA
 : 
LGW_SPI_MUX_TARGET_RADIOB
), 
ªg
.
addr
, 
w
);

232 
	`lgw_sx125x_ªg_r
(
idx
, &
vÆ_check
, 
rf_chaö
);

233 i‡(
vÆ_check
 !
d©a
) {

234 
	`¥ötf
("ERROR: sx125xÑegi°î %d wrôêÁûed (w:%uÑ:%u)!!\n", 
idx
, 
d©a
, 
vÆ_check
);

235 
•i_°©
 = 
LGW_SPI_ERROR
;

238 i‡(
•i_°©
 !
LGW_SPI_SUCCESS
) {

239 
	`DEBUG_MSG
("ERROR: SPI ERROR DURING RADIO REGISTER WRITE\n");

240  
LGW_REG_ERROR
;

242  
LGW_REG_SUCCESS
;

244 
	}
}

248 
	$lgw_sx125x_ªg_r
(
ødio_ªg_t
 
idx
, 
uöt8_t
 *
d©a
, uöt8_à
rf_chaö
) {

250 
•i_°©
;

251 
ødio_ªg_s
 
ªg
;

252 
uöt8_t
 
mask
;

253 
uöt8_t
 
r
;

256 i‡(
rf_chaö
 >
LGW_RF_CHAIN_NB
) {

257 
	`DEBUG_MSG
("ERROR: INVALID RF_CHAIN\n");

258  
LGW_REG_ERROR
;

260 i‡(
idx
 >
RADIO_TOTALREGS
) {

261 
	`DEBUG_MSG
("ERROR: REGISTER NUMBER OUT OF DEFINED RANGE\n");

262  
LGW_REG_ERROR
;

265 
ªg
 = 
sx125x_ªgs
[
idx
];

267 
•i_°©
 = 
	`sx125x_ªg_r
(
lgw_•i_èrgë
, ((
rf_chaö
 =0Ë? 
LGW_SPI_MUX_TARGET_RADIOA
 : 
LGW_SPI_MUX_TARGET_RADIOB
), 
ªg
.
addr
, &
r
);

268 
mask
 = ((1 << 
ªg
.
Àng
Ë- 1Ë<<Ñeg.
offs
;

269 *
d©a
 = (
r
 & 
mask
Ë>> 
ªg
.
offs
;

271 i‡(
•i_°©
 !
LGW_SPI_SUCCESS
) {

272 
	`DEBUG_MSG
("ERROR: SPI ERROR DURING RADIO REGISTER READ\n");

273  
LGW_REG_ERROR
;

275  
LGW_REG_SUCCESS
;

277 
	}
}

285 
	$sx125x_£tup
(
uöt8_t
 
rf_chaö
, uöt8_à
rf_˛kout
, 
boﬁ
 
rf_íabÀ
, uöt8_à
rf_ødio_ty≥
, 
uöt32_t
 
‰eq_hz
) {

286 
uöt32_t
 
∑π_öt
 = 0;

287 
uöt32_t
 
∑π_‰ac
 = 0;

288 
˝t_©ãm±s
 = 0;

289 
uöt8_t
 
vÆ
;

291 i‡(
rf_chaö
 >
LGW_RF_CHAIN_NB
) {

292 
	`DEBUG_MSG
("ERROR: INVALID RF_CHAIN\n");

297 
	`lgw_sx125x_ªg_r
(
SX125x_REG_VERSION
, &
vÆ
, 
rf_chaö
);

298 
	`DEBUG_PRINTF
("NŸe: SX125x #%d vîsi⁄Ñegi°îÑëu∫ed 0x%02x\n", 
rf_chaö
, 
vÆ
);

301 i‡(
rf_˛kout
 =
rf_chaö
) {

302 
	`lgw_sx125x_ªg_w
(
SX125x_REG_CLK_SELECT
, 
SX125x_TX_DAC_CLK_SEL
 + 2, 
rf_chaö
);

303 
	`DEBUG_PRINTF
("NŸe: SX125x #%d clock ouçuàíabÀd\n", 
rf_chaö
);

305 
	`lgw_sx125x_ªg_w
(
SX125x_REG_CLK_SELECT
, 
SX125x_TX_DAC_CLK_SEL
, 
rf_chaö
);

306 
	`DEBUG_PRINTF
("NŸe: SX125x #%d clock ouçuàdißbÀd\n", 
rf_chaö
);

309 
rf_ødio_ty≥
) {

310 
LGW_RADIO_TYPE_SX1255
:

311 
	`lgw_sx125x_ªg_w
(
SX125x_REG_SX1255_XOSC_TEST__GM_STARTUP
, 
SX125x_XOSC_GM_STARTUP
, 
rf_chaö
);

312 
	`lgw_sx125x_ªg_w
(
SX125x_REG_SX1255_XOSC_TEST__DISABLE
, 
SX125x_XOSC_DISABLE
, 
rf_chaö
);

314 
LGW_RADIO_TYPE_SX1257
:

315 
	`lgw_sx125x_ªg_w
(
SX125x_REG_SX1257_XOSC_TEST__GM_STARTUP
, 
SX125x_XOSC_GM_STARTUP
, 
rf_chaö
);

316 
	`lgw_sx125x_ªg_w
(
SX125x_REG_SX1257_XOSC_TEST__DISABLE
, 
SX125x_XOSC_DISABLE
, 
rf_chaö
);

319 
	`DEBUG_PRINTF
("ERROR: UNEXPECTED VALUE %d FOR RADIO TYPE\n", 
rf_ødio_ty≥
);

323 i‡(
rf_íabÀ
 =
åue
) {

325 
	`lgw_sx125x_ªg_w
(
SX125x_REG_TX_GAIN__MIX_GAIN
, 
SX125x_TX_MIX_GAIN
, 
rf_chaö
);

326 
	`lgw_sx125x_ªg_w
(
SX125x_REG_TX_GAIN__DAC_GAIN
, 
SX125x_TX_DAC_GAIN
, 
rf_chaö
);

328 
	`lgw_sx125x_ªg_w
(
SX125x_REG_TX_BW__ANA_BW
, 
SX125x_TX_ANA_BW
, 
rf_chaö
);

329 
	`lgw_sx125x_ªg_w
(
SX125x_REG_TX_BW__PLL_BW
, 
SX125x_TX_PLL_BW
, 
rf_chaö
);

331 
	`lgw_sx125x_ªg_w
(
SX125x_REG_TX_DAC_BW
, 
SX125x_TX_DAC_BW
, 
rf_chaö
);

334 
	`lgw_sx125x_ªg_w
(
SX125x_REG_RX_ANA_GAIN__LNA_ZIN
, 
SX125x_LNA_ZIN
, 
rf_chaö
);

335 
	`lgw_sx125x_ªg_w
(
SX125x_REG_RX_ANA_GAIN__BB_GAIN
, 
SX125x_RX_BB_GAIN
, 
rf_chaö
);

336 
	`lgw_sx125x_ªg_w
(
SX125x_REG_RX_ANA_GAIN__LNA_GAIN
, 
SX125x_RX_LNA_GAIN
, 
rf_chaö
);

338 
	`lgw_sx125x_ªg_w
(
SX125x_REG_RX_BW__BB_BW
, 
SX125x_RX_BB_BW
, 
rf_chaö
);

339 
	`lgw_sx125x_ªg_w
(
SX125x_REG_RX_BW__ADC_TRIM
, 
SX125x_RX_ADC_TRIM
, 
rf_chaö
);

340 
	`lgw_sx125x_ªg_w
(
SX125x_REG_RX_BW__ADC_BW
, 
SX125x_RX_ADC_BW
, 
rf_chaö
);

342 
	`lgw_sx125x_ªg_w
(
SX125x_REG_RX_PLL_BW__ADC_TEMP_EN
, 
SX125x_ADC_TEMP
, 
rf_chaö
);

343 
	`lgw_sx125x_ªg_w
(
SX125x_REG_RX_PLL_BW__PLL_BW
, 
SX125x_RX_PLL_BW
, 
rf_chaö
);

346 
rf_ødio_ty≥
) {

347 
LGW_RADIO_TYPE_SX1255
:

348 
∑π_öt
 = 
‰eq_hz
 / (
SX125x_32MHz_FRAC
 << 7);

349 
∑π_‰ac
 = ((
‰eq_hz
 % (
SX125x_32MHz_FRAC
 << 7)) << 9) / SX125x_32MHz_FRAC;

351 
LGW_RADIO_TYPE_SX1257
:

352 
∑π_öt
 = 
‰eq_hz
 / (
SX125x_32MHz_FRAC
 << 8);

353 
∑π_‰ac
 = ((
‰eq_hz
 % (
SX125x_32MHz_FRAC
 << 8)) << 8) / SX125x_32MHz_FRAC;

356 
	`DEBUG_PRINTF
("ERROR: UNEXPECTED VALUE %d FOR RADIO TYPE\n", 
rf_ødio_ty≥
);

360 
	`lgw_sx125x_ªg_w
(
SX125x_REG_FRF_RX_MSB
, 0xFF & 
∑π_öt
, 
rf_chaö
);

361 
	`lgw_sx125x_ªg_w
(
SX125x_REG_FRF_RX_MID
, 0xFF & (
∑π_‰ac
 >> 8), 
rf_chaö
);

362 
	`lgw_sx125x_ªg_w
(
SX125x_REG_FRF_RX_LSB
, 0xFF & 
∑π_‰ac
, 
rf_chaö
);

366 i‡(
˝t_©ãm±s
 >
PLL_LOCK_MAX_ATTEMPTS
) {

367 
	`DEBUG_MSG
("ERROR: FAIL TO LOCK PLL\n");

370 
	`lgw_sx125x_ªg_w
(
SX125x_REG_MODE
, 1, 
rf_chaö
);

371 
	`lgw_sx125x_ªg_w
(
SX125x_REG_MODE
, 3, 
rf_chaö
);

372 ++
˝t_©ãm±s
;

373 
	`DEBUG_PRINTF
("NŸe: SX125x #%d PLL sèπ (©ãm± %d)\n", 
rf_chaö
, 
˝t_©ãm±s
);

374 
	`waô_ms
(1);

375 
	`lgw_sx125x_ªg_r
(
SX125x_REG_MODE_STATUS
, &
vÆ
, 
rf_chaö
);

376 } (
vÆ
 & 0x02) == 0);

378 
	`DEBUG_PRINTF
("NŸe: SX125x #%d kïàö sèndby mode\n", 
rf_chaö
);

382 
	}
}

	@hal/sx1302hal/loragw_sx125x.h

15 #i‚de‡
_LORAGW_SX125X_H


16 
	#_LORAGW_SX125X_H


	)

21 
	~<°döt.h
>

22 
	~<°dboﬁ.h
>

27 
	sødio_ªg_s


29 
uöt8_t
 
	maddr
;

30 
uöt8_t
 
	moffs
;

31 
uöt8_t
 
	mÀng
;

37 
	#SX1257_FREQ_TO_REG
(
f
Ë(
uöt32_t
)((
uöt64_t
)‡* (1 << 19Ë/ 32000000U)

	)

38 
	#SX1255_FREQ_TO_REG
(
f
Ë(
uöt32_t
)((
uöt64_t
)‡* (1 << 20Ë/ 32000000U)

	)

43 
	#LGW_REG_SUCCESS
 0

	)

44 
	#LGW_REG_ERROR
 -1

	)

46 
	#SX125x_32MHz_FRAC
 15625

	)

48 
	#SX125x_TX_DAC_CLK_SEL
 0

	)

49 
	#SX125x_TX_DAC_GAIN
 2

	)

50 
	#SX125x_TX_MIX_GAIN
 14

	)

51 
	#SX125x_TX_PLL_BW
 1

	)

52 
	#SX125x_TX_ANA_BW
 0

	)

53 
	#SX125x_TX_DAC_BW
 5

	)

54 
	#SX125x_RX_LNA_GAIN
 1

	)

55 
	#SX125x_RX_BB_GAIN
 15

	)

56 
	#SX125x_LNA_ZIN
 0

	)

57 
	#SX125x_RX_ADC_BW
 7

	)

58 
	#SX125x_RX_ADC_TRIM
 6

	)

59 
	#SX125x_RX_BB_BW
 0

	)

60 
	#SX125x_RX_PLL_BW
 0

	)

61 
	#SX125x_ADC_TEMP
 0

	)

62 
	#SX125x_XOSC_GM_STARTUP
 13

	)

63 
	#SX125x_XOSC_DISABLE
 2

	)

66 
	mSX125x_REG_MODE
 = 0,

67 
	mSX125x_REG_MODE__PA_DRIVER_EN
 = 1,

68 
	mSX125x_REG_MODE__TX_EN
 = 2,

69 
	mSX125x_REG_MODE__RX_EN
 = 3,

70 
	mSX125x_REG_MODE__STANDBY_EN
 = 4,

71 
	mSX125x_REG_FRF_RX_MSB
 = 5,

72 
	mSX125x_REG_FRF_RX_MID
 = 6,

73 
	mSX125x_REG_FRF_RX_LSB
 = 7,

74 
	mSX125x_REG_FRF_TX_MSB
 = 8,

75 
	mSX125x_REG_FRF_TX_MID
 = 9,

76 
	mSX125x_REG_FRF_TX_LSB
 = 10,

77 
	mSX125x_REG_VERSION
 = 11,

78 
	mSX125x_REG_TX_GAIN
 = 12,

79 
	mSX125x_REG_TX_GAIN__DAC_GAIN
 = 13,

80 
	mSX125x_REG_TX_GAIN__MIX_GAIN
 = 14,

81 
	mSX125x_REG_TX_BW
 = 15,

82 
	mSX125x_REG_TX_BW__PLL_BW
 = 16,

83 
	mSX125x_REG_TX_BW__ANA_BW
 = 17,

84 
	mSX125x_REG_TX_DAC_BW
 = 18,

85 
	mSX125x_REG_RX_ANA_GAIN
 = 19,

86 
	mSX125x_REG_RX_ANA_GAIN__LNA_GAIN
 = 20,

87 
	mSX125x_REG_RX_ANA_GAIN__BB_GAIN
 = 21,

88 
	mSX125x_REG_RX_ANA_GAIN__LNA_ZIN
 = 22,

89 
	mSX125x_REG_RX_BW
 = 23,

90 
	mSX125x_REG_RX_BW__ADC_BW
 = 24,

91 
	mSX125x_REG_RX_BW__ADC_TRIM
 = 25,

92 
	mSX125x_REG_RX_BW__BB_BW
 = 26,

93 
	mSX125x_REG_RX_PLL_BW
 = 27,

94 
	mSX125x_REG_RX_PLL_BW__PLL_BW
 = 28,

95 
	mSX125x_REG_RX_PLL_BW__ADC_TEMP_EN
 = 29,

96 
	mSX125x_REG_DIO_MAPPING
 = 30,

97 
	mSX125x_REG_DIO_MAPPING__DIO_0_MAPPING
 = 31,

98 
	mSX125x_REG_DIO_MAPPING__DIO_1_MAPPING
 = 32,

99 
	mSX125x_REG_DIO_MAPPING__DIO_2_MAPPING
 = 33,

100 
	mSX125x_REG_DIO_MAPPING__DIO_3_MAPPING
 = 34,

101 
	mSX125x_REG_CLK_SELECT
 = 35,

102 
	mSX125x_REG_CLK_SELECT__DIG_LOOPBACK_EN
 = 36,

103 
	mSX125x_REG_CLK_SELECT__RF_LOOPBACK_EN
 = 37,

104 
	mSX125x_REG_CLK_SELECT__CLK_OUT
 = 38,

105 
	mSX125x_REG_CLK_SELECT__DAC_CLK_SELECT
 = 39,

106 
	mSX125x_REG_MODE_STATUS
 = 40,

107 
	mSX125x_REG_MODE_STATUS__LOW_BAT_EN
 = 41,

108 
	mSX125x_REG_MODE_STATUS__RX_PLL_LOCKED
 = 42,

109 
	mSX125x_REG_MODE_STATUS__TX_PLL_LOCKED
 = 43,

110 
	mSX125x_REG_LOW_BAT_THRESH
 = 44,

111 
	mSX125x_REG_SX1257_XOSC_TEST
 = 45,

112 
	mSX125x_REG_SX1257_XOSC_TEST__DISABLE
 = 46,

113 
	mSX125x_REG_SX1257_XOSC_TEST__GM_STARTUP
 = 47,

114 
	mSX125x_REG_SX1255_XOSC_TEST
 = 48,

115 
	mSX125x_REG_SX1255_XOSC_TEST__DISABLE
 = 49,

116 
	mSX125x_REG_SX1255_XOSC_TEST__GM_STARTUP
 = 50

118 
	tødio_ªg_t
;

120 
	#RADIO_TOTALREGS
 51

	)

142 
sx125x_£tup
(
uöt8_t
 
rf_chaö
, uöt8_à
rf_˛kout
, 
boﬁ
 
rf_íabÀ
, uöt8_à
rf_ødio_ty≥
, 
uöt32_t
 
‰eq_hz
);

144 
lgw_sx125x_ªg_w
(
ødio_ªg_t
 
idx
, 
uöt8_t
 
d©a
, uöt8_à
rf_chaö
);

145 
lgw_sx125x_ªg_r
(
ødio_ªg_t
 
idx
, 
uöt8_t
 *
d©a
, uöt8_à
rf_chaö
);

	@hal/sx1302hal/loragw_sx1302.c

19 
	~<°döt.h
>

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<uni°d.h
>

23 
	~<f˙é.h
>

24 
	~<°rög.h
>

25 
	~<m©h.h
>

26 
	~<öây≥s.h
>

27 
	~<time.h
>

29 
	~<sys/io˘l.h
>

30 
	~<löux/•i/•idev.h
>

32 
	~"l‹agw_aux.h
"

33 
	~"l‹agw_ªg.h
"

34 
	~"l‹agw_sx1302.h
"

35 
	~"l‹agw_ªg_sx1302.h
"

36 
	~"l‹agw_sx1302_time°amp.h
"

37 
	~"l‹agw_sx1302_rx.h
"

38 
	~"l‹agw_sx1250.h
"

39 
	~"l‹agw_agc_∑øms.h
"

40 
	~"l‹agw_ˇl.h
"

41 
	~"l‹agw_debug.h
"

46 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

47 #i‡
DEBUG_SX1302
 == 1

48 
	#DEBUG_MSG
(
°r
Ë
	`Ârötf
(
°dîr
, så)

	)

49 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...Ë
	`Ârötf
(
°dîr
, fmt,árgs)

	)

50 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){
	`Ârötf
(
°dîr
,"%s:%d: ERROR: NULL POINTER AS ARGUMENT\n", 
__FUNCTION__
, 
__LINE__
); 
LGW_REG_ERROR
;}

	)

52 
	#DEBUG_MSG
(
°r
)

	)

53 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...)

	)

54 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){ 
LGW_REG_ERROR
;}

	)

57 
	#IF_HZ_TO_REG
(
f
Ë((‡<< 5Ë/ 15625)

	)

59 
	#SX1302_FREQ_TO_REG
(
f
Ë(
uöt32_t
)((
uöt64_t
)‡* (1 << 18Ë/ 32000000U)

	)

67 
	#AGC_RADIO_A_INIT_DONE
 0x80

	)

68 
	#AGC_RADIO_B_INIT_DONE
 0x20

	)

70 
	#MCU_AGC
 0x01

	)

71 
	#MCU_ARB
 0x02

	)

73 
	#AGC_MEM_ADDR
 0x0000

	)

74 
	#ARB_MEM_ADDR
 0x2000

	)

76 
	#MCU_FW_SIZE
 8192

	)

78 
	#FW_VERSION_CAL
 1

	)

80 
	#RSSI_FSK_POLY_0
 86

	)

81 
	#RSSI_FSK_POLY_1
 1

	)

82 
	#RSSI_FSK_POLY_2
 0

	)

84 
	#FREQ_OFFSET_LSB_125KHZ
 0.11920929‡

	)

85 
	#FREQ_OFFSET_LSB_250KHZ
 0.238418579‡

	)

86 
	#FREQ_OFFSET_LSB_500KHZ
 0.476837158‡

	)

89 
	#LGW_IFMODEM_CONFIG
 {\

90 
IF_LORA_MULTI
, \

91 
IF_LORA_MULTI
, \

92 
IF_LORA_MULTI
, \

93 
IF_LORA_MULTI
, \

94 
IF_LORA_MULTI
, \

95 
IF_LORA_MULTI
, \

96 
IF_LORA_MULTI
, \

97 
IF_LORA_MULTI
, \

98 
IF_LORA_STD
, \

99 
IF_FSK_STD
 }

	)

102 c⁄° 
uöt8_t
 
	gifmod_c⁄fig
[
LGW_IF_CHAIN_NB
] = 
LGW_IFMODEM_CONFIG
;

104 
	#MIN_LORA_PREAMBLE
 6

	)

105 
	#STD_LORA_PREAMBLE
 8

	)

106 
	#MIN_FSK_PREAMBLE
 3

	)

107 
	#STD_FSK_PREAMBLE
 5

	)

113 
	~"ˇl_fw.v¨
"

116 
rx_buf„r_t
 
	grx_buf„r
;

119 
time°amp_cou¡î_t
 
	gcou¡î_us
;

129 
öt32_t
 
lgw_sf_gëvÆ
(
x
);

136 
öt32_t
 
lgw_bw_gëvÆ
(
x
);

143 
l‹a_¸c16
(c⁄° 
d©a
, *
¸c
);

149 
FILE
 * 
log_fûe
;

154 
	$ˇlcuœã_‰eq_to_time_dri·
(
uöt32_t
 
‰eq_hz
, 
uöt8_t
 
bw
, 
uöt16_t
 * 
m™t
, uöt8_à* 
exp
) {

155 
uöt64_t
 
m™tisß_u64
;

156 
uöt8_t
 
exp⁄ít
 = 0;

157 
öt32_t
 
bw_hz
;

160 
	`CHECK_NULL
(
m™t
);

161 
	`CHECK_NULL
(
exp
);

163 
bw_hz
 = 
	`lgw_bw_gëvÆ
(
bw
);

164 i‡(
bw_hz
 < 0) {

165 
	`¥ötf
("ERROR: Unsupported bandwidth for frequencyÅoÅime drift calculation\n");

166  
LGW_REG_ERROR
;

169 
m™tisß_u64
 = (
uöt64_t
)
bw_hz
 * (2 << (20-1)Ë/ 
‰eq_hz
;

170 
m™tisß_u64
 < 2048) {

171 
exp⁄ít
 += 1;

172 
m™tisß_u64
 <<= 1;

175 *
m™t
 = (
uöt16_t
)
m™tisß_u64
;

176 *
exp
 = 
exp⁄ít
;

178  
LGW_REG_SUCCESS
;

179 
	}
}

183 
	$l‹a_¸c16
(c⁄° 
d©a
, *
¸c
) {

184 
√xt
 = 0;

185 
√xt
 = (((
d©a
>>0)&1Ë^ ((*
¸c
>>12)&1) ^ ((*crc>> 8)&1) ) ;

186 
√xt
 +((((
d©a
>>1)&1Ë^ ((*
¸c
>>13)&1) ^ ((*crc>> 9)&1) )<<1 ) ;

187 
√xt
 +((((
d©a
>>2)&1Ë^ ((*
¸c
>>14)&1) ^ ((*crc>>10)&1) )<<2 ) ;

188 
√xt
 +((((
d©a
>>3)&1Ë^ ((*
¸c
>>15)&1) ^ ((*crc>>11)&1) )<<3 ) ;

189 
√xt
 +((((
d©a
>>4)&1Ë^ ((*
¸c
>>12)&1) )<<4 ) ;

190 
√xt
 +((((
d©a
>>5)&1Ë^ ((*
¸c
>>13)&1) ^ ((*crc>>12)&1) ^ ((*crc>> 8)&1))<<5 ) ;

191 
√xt
 +((((
d©a
>>6)&1Ë^ ((*
¸c
>>14)&1) ^ ((*crc>>13)&1) ^ ((*crc>> 9)&1))<<6 ) ;

192 
√xt
 +((((
d©a
>>7)&1Ë^ ((*
¸c
>>15)&1) ^ ((*crc>>14)&1) ^ ((*crc>>10)&1))<<7 ) ;

193 
√xt
 +((((*
¸c
>>0)&1) ^ ((*crc>>15)&1) ^ ((*crc>>11)&1) )<<8 ) ;

194 
√xt
 +((((*
¸c
>>1)&1) ^ ((*crc>>12)&1) )<<9 ) ;

195 
√xt
 +((((*
¸c
>>2)&1) ^ ((*crc>>13)&1) )<<10) ;

196 
√xt
 +((((*
¸c
>>3)&1) ^ ((*crc>>14)&1) )<<11) ;

197 
√xt
 +((((*
¸c
>>4)&1) ^ ((*crc>>15)&1) ^ ((*crc>>12)&1) ^ ((*crc>> 8)&1))<<12) ;

198 
√xt
 +((((*
¸c
>>5)&1) ^ ((*crc>>13)&1) ^ ((*crc>> 9)&1) )<<13) ;

199 
√xt
 +((((*
¸c
>>6)&1) ^ ((*crc>>14)&1) ^ ((*crc>>10)&1) )<<14) ;

200 
√xt
 +((((*
¸c
>>7)&1) ^ ((*crc>>15)&1) ^ ((*crc>>11)&1) )<<15) ;

201 (*
¸c
Ë
√xt
;

202 
	}
}

207 
	$sx1302_öô
(
lgw_c⁄f_time°amp_s
 *
c⁄f_ts
) {

208 
	`time°amp_cou¡î_√w
(&
cou¡î_us
);

210 i‡(
c⁄f_ts
 !
NULL
) {

211 
	`time°amp_cou¡î_mode
(
c⁄f_ts
->
íabÀ_¥ecisi⁄_ts
, c⁄f_ts->
max_ts_mërics
, c⁄f_ts->
nb_symbﬁs
);

215 
	`rx_buf„r_√w
(&
rx_buf„r
);

216 
	}
}

220 
	$sx1302_gë_eui
(
uöt64_t
 * 
eui
) {

221 
i
, 
îr
;

222 
öt32_t
 
vÆ
;

224 *
eui
 = 0;

225 
i
 = 0; i < 8; i++) {

226 
îr
 = 
	`lgw_sx1302_ªg_w
(
SX1302_REG_OTP_BYTE_ADDR_ADDR
, 
i
);

227 i‡(
îr
 !
LGW_REG_SUCCESS
) {

228  
LGW_REG_ERROR
;

230 
îr
 = 
	`lgw_sx1302_ªg_r
(
SX1302_REG_OTP_RD_DATA_RD_DATA
, &
vÆ
);

231 i‡(
îr
 !
LGW_REG_SUCCESS
) {

232  
LGW_REG_ERROR
;

235 *
eui
 |(
uöt64_t
)((
uöt8_t
)
vÆ
Ë<< (56 - (
i
 * 8));

238  
LGW_REG_SUCCESS
;

239 
	}
}

243 
	$sx1302_upd©e
() {

244 
öt32_t
 
vÆ
;

247 
	`lgw_sx1302_ªg_r
(
SX1302_REG_AGC_MCU_CTRL_PARITY_ERROR
, &
vÆ
);

248 i‡(
vÆ
 != 0) {

249 
	`¥ötf
("ERROR: ParityÉrror check failed on AGC firmware\n");

250  
LGW_REG_ERROR
;

252 
	`lgw_sx1302_ªg_r
(
SX1302_REG_ARB_MCU_CTRL_PARITY_ERROR
, &
vÆ
);

253 i‡(
vÆ
 != 0) {

254 
	`¥ötf
("ERROR: ParityÉrror check failed on ARB firmware\n");

255  
LGW_REG_ERROR
;

259 
	`time°amp_cou¡î_gë
(&
cou¡î_us
, 
Ál£
);

260 
	`time°amp_cou¡î_gë
(&
cou¡î_us
, 
åue
);

262  
LGW_REG_SUCCESS
;

263 
	}
}

267 
	$sx1302_ødio_˛ock_£À˘
(
uöt8_t
 
rf_chaö
) {

269 i‡(
rf_chaö
 >
LGW_RF_CHAIN_NB
)

271 
	`DEBUG_MSG
("ERROR: invalid RF chain\n");

272  
LGW_REG_ERROR
;

276 
rf_chaö
) {

278 
	`DEBUG_MSG
("Select Radio A clock\n");

279 
	`lgw_sx1302_ªg_w
(
SX1302_REG_CLK_CTRL_CLK_SEL_CLK_RADIO_A_SEL
, 0x01);

280 
	`lgw_sx1302_ªg_w
(
SX1302_REG_CLK_CTRL_CLK_SEL_CLK_RADIO_B_SEL
, 0x00);

283 
	`DEBUG_MSG
("Select Radio B clock\n");

284 
	`lgw_sx1302_ªg_w
(
SX1302_REG_CLK_CTRL_CLK_SEL_CLK_RADIO_A_SEL
, 0x00);

285 
	`lgw_sx1302_ªg_w
(
SX1302_REG_CLK_CTRL_CLK_SEL_CLK_RADIO_B_SEL
, 0x01);

288  
LGW_REG_ERROR
;

292 
	`lgw_sx1302_ªg_w
(
SX1302_REG_CLK_CTRL_CLK_SEL_CLKDIV_EN
, 0x01);

295 
	`lgw_sx1302_ªg_w
(
SX1302_REG_COMMON_CTRL0_CLK32_RIF_CTRL
, 0x01);

297  
LGW_REG_SUCCESS
;

298 
	}
}

302 
	$sx1302_ødio_ª£t
(
uöt8_t
 
rf_chaö
, 
lgw_ødio_ty≥_t
 
ty≥
) {

303 
uöt16_t
 
ªg_ødio_í
;

304 
uöt16_t
 
ªg_ødio_r°
;

307 i‡(
rf_chaö
 >
LGW_RF_CHAIN_NB
)

309 
	`DEBUG_MSG
("ERROR: invalid RF chain\n");

310  
LGW_REG_ERROR
;

312 i‡((
ty≥
 !
LGW_RADIO_TYPE_SX1255
Ë&& (ty≥ !
LGW_RADIO_TYPE_SX1257
Ë&& (ty≥ !
LGW_RADIO_TYPE_SX1250
)) {

313 
	`DEBUG_MSG
("ERROR: invalidÑadioÅype\n");

314  
LGW_REG_ERROR
;

318 
	`lgw_sx1302_ªg_w
(
SX1302_REG_COMMON_CTRL0_CLK32_RIF_CTRL
, 0x00);

321 
ªg_ødio_í
 = 
	`REG_SELECT
(
rf_chaö
, 
SX1302_REG_AGC_MCU_RF_EN_A_RADIO_EN
, 
SX1302_REG_AGC_MCU_RF_EN_B_RADIO_EN
);

322 
	`lgw_sx1302_ªg_w
(
ªg_ødio_í
, 0x01);

325 
ªg_ødio_r°
 = 
	`REG_SELECT
(
rf_chaö
, 
SX1302_REG_AGC_MCU_RF_EN_A_RADIO_RST
, 
SX1302_REG_AGC_MCU_RF_EN_B_RADIO_RST
);

326 
	`lgw_sx1302_ªg_w
(
ªg_ødio_r°
, 0x01);

327 
	`waô_ms
(500);

328 
	`lgw_sx1302_ªg_w
(
ªg_ødio_r°
, 0x00);

329 
	`waô_ms
(10);

330 
ty≥
) {

331 
LGW_RADIO_TYPE_SX1255
:

332 
LGW_RADIO_TYPE_SX1257
:

334 
	`DEBUG_PRINTF
("INFO:Ñe£àsx125x (RADIO_%sËd⁄e\n", 
	`REG_SELECT
(
rf_chaö
, "A", "B"));

336 
LGW_RADIO_TYPE_SX1250
:

337 
	`lgw_sx1302_ªg_w
(
ªg_ødio_r°
, 0x01);

338 
	`waô_ms
(10);

339 
	`DEBUG_PRINTF
("INFO:Ñe£àsx1250 (RADIO_%sËd⁄e\n", 
	`REG_SELECT
(
rf_chaö
, "A", "B"));

342  
LGW_REG_ERROR
;

345  
LGW_REG_SUCCESS
;

346 
	}
}

350 
	$sx1302_ødio_£t_mode
(
uöt8_t
 
rf_chaö
, 
lgw_ødio_ty≥_t
 
ty≥
) {

351 
uöt16_t
 
ªg
;

354 i‡(
rf_chaö
 >
LGW_RF_CHAIN_NB
) {

355 
	`DEBUG_MSG
("ERROR: invalid RF chain\n");

356  
LGW_REG_ERROR
;

358 i‡((
ty≥
 !
LGW_RADIO_TYPE_SX1255
Ë&& (ty≥ !
LGW_RADIO_TYPE_SX1257
Ë&& (ty≥ !
LGW_RADIO_TYPE_SX1250
)) {

359 
	`DEBUG_MSG
("ERROR: invalidÑadioÅype\n");

360  
LGW_REG_ERROR
;

364 
ªg
 = 
	`REG_SELECT
(
rf_chaö
, 
SX1302_REG_COMMON_CTRL0_SX1261_MODE_RADIO_A
,

365 
SX1302_REG_COMMON_CTRL0_SX1261_MODE_RADIO_B
);

366 
ty≥
) {

367 
LGW_RADIO_TYPE_SX1250
:

368 
	`DEBUG_PRINTF
("SëtögÑf_chaö_%u i¿sx1250 mode\n", 
rf_chaö
);

369 
	`lgw_sx1302_ªg_w
(
ªg
, 0x01);

372 
	`DEBUG_PRINTF
("SëtögÑf_chaö_%u i¿sx125x mode\n", 
rf_chaö
);

373 
	`lgw_sx1302_ªg_w
(
ªg
, 0x00);

377  
LGW_REG_SUCCESS
;

378 
	}
}

382 
	$sx1302_ødio_ho°_˘æ
(
boﬁ
 
ho°_˘æ
) {

383 
	`lgw_sx1302_ªg_w
(
SX1302_REG_COMMON_CTRL0_HOST_RADIO_CTRL
, (
ho°_˘æ
 =
Ál£
) ? 0x00 : 0x01);

385  
LGW_REG_SUCCESS
;

386 
	}
}

390 
	$sx1302_ødio_ˇlibøã
(
lgw_c⁄f_rxrf_s
 * 
c⁄ãxt_rf_chaö
, 
uöt8_t
 
˛k§c
, 
lgw_tx_gaö_lut_s
 * 
txgaö_lut
) {

391 
i
;

394 
i
 = 0; i < 
LGW_RF_CHAIN_NB
; i++) {

395 i‡(
c⁄ãxt_rf_chaö
[
i
].
íabÀ
 =
åue
) {

396 
	`sx1302_ødio_ª£t
(
i
, 
c⁄ãxt_rf_chaö
[i].
ty≥
);

397 
	`sx1302_ødio_£t_mode
(
i
, 
c⁄ãxt_rf_chaö
[i].
ty≥
);

401 
	`sx1302_ødio_˛ock_£À˘
(
˛k§c
);

404 
	`lgw_sx1302_ªg_w
(
SX1302_REG_AGC_MCU_CTRL_FORCE_HOST_FE_CTRL
, 1);

405 
	`lgw_sx1302_ªg_w
(
SX1302_REG_AGC_MCU_RF_EN_A_PA_EN
, 0);

406 
	`lgw_sx1302_ªg_w
(
SX1302_REG_AGC_MCU_RF_EN_A_LNA_EN
, 0);

408 i‡((
c⁄ãxt_rf_chaö
[
˛k§c
].
ty≥
 =
LGW_RADIO_TYPE_SX1257
) ||

409 (
c⁄ãxt_rf_chaö
[
˛k§c
].
ty≥
 =
LGW_RADIO_TYPE_SX1255
)) {

410 
	`DEBUG_MSG
("Loading CAL fw for sx125x\n");

411 i‡(
	`sx1302_agc_lﬂd_fúmw¨e
(
ˇl_fúmw¨e_sx125x
Ë!
LGW_HAL_SUCCESS
) {

412 
	`¥ötf
("ERROR: FailedÅoÜoad calibration fw\n");

413  
LGW_REG_ERROR
;

415 i‡(
	`sx1302_ˇl_°¨t
(
FW_VERSION_CAL
, 
c⁄ãxt_rf_chaö
, 
txgaö_lut
Ë!
LGW_HAL_SUCCESS
) {

416 
	`¥ötf
("ERROR:Ñadio calibration failed\n");

417 
	`sx1302_ødio_ª£t
(0, 
c⁄ãxt_rf_chaö
[0].
ty≥
);

418 
	`sx1302_ødio_ª£t
(1, 
c⁄ãxt_rf_chaö
[1].
ty≥
);

419  
LGW_REG_ERROR
;

422 
	`DEBUG_MSG
("Calibrating sx1250Ñadios\n");

423 
i
 = 0; i < 
LGW_RF_CHAIN_NB
; i++) {

424 i‡(
c⁄ãxt_rf_chaö
[
i
].
íabÀ
 =
åue
) {

425 i‡(
	`sx1250_ˇlibøã
(
i
, 
c⁄ãxt_rf_chaö
[i].
‰eq_hz
)) {

426 
	`¥ötf
("ERROR:Ñadio calibration failed\n");

427  
LGW_REG_ERROR
;

433 
	`lgw_sx1302_ªg_w
(
SX1302_REG_AGC_MCU_CTRL_FORCE_HOST_FE_CTRL
, 0);

435  
LGW_REG_SUCCESS
;

436 
	}
}

440 
	$sx1302_∑_ a_lut_c⁄figuª
() {

441 
	`lgw_sx1302_ªg_w
(
SX1302_REG_AGC_MCU_LUT_TABLE_A_PA_LUT
, 0x04);

442 
	`lgw_sx1302_ªg_w
(
SX1302_REG_AGC_MCU_LUT_TABLE_B_PA_LUT
, 0x04);

443 
	`lgw_sx1302_ªg_w
(
SX1302_REG_AGC_MCU_LUT_TABLE_A_LNA_LUT
, 0x02);

444 
	`lgw_sx1302_ªg_w
(
SX1302_REG_AGC_MCU_LUT_TABLE_B_LNA_LUT
, 0x02);

446  
LGW_REG_SUCCESS
;

447 
	}
}

451 
	$sx1302_ødio_„_c⁄figuª
() {

452 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RADIO_FE_RSSI_BB_FILTER_ALPHA_RADIO_A_RSSI_BB_FILTER_ALPHA
, 0x03);

453 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RADIO_FE_RSSI_DEC_FILTER_ALPHA_RADIO_A_RSSI_DEC_FILTER_ALPHA
, 0x07);

454 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RADIO_FE_RSSI_BB_FILTER_ALPHA_RADIO_B_RSSI_BB_FILTER_ALPHA
, 0x03);

455 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RADIO_FE_RSSI_DEC_FILTER_ALPHA_RADIO_B_RSSI_DEC_FILTER_ALPHA
, 0x07);

457 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RADIO_FE_RSSI_DB_DEF_RADIO_A_RSSI_DB_DEFAULT_VALUE
, 23);

458 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RADIO_FE_RSSI_DEC_DEF_RADIO_A_RSSI_DEC_DEFAULT_VALUE
, 66);

459 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RADIO_FE_RSSI_DB_DEF_RADIO_B_RSSI_DB_DEFAULT_VALUE
, 23);

460 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RADIO_FE_RSSI_DEC_DEF_RADIO_B_RSSI_DEC_DEFAULT_VALUE
, 66);

462 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RADIO_FE_CTRL0_RADIO_A_DC_NOTCH_EN
, 1);

463 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RADIO_FE_CTRL0_RADIO_A_HOST_FILTER_GAIN
, 0x0b);

464 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RADIO_FE_CTRL0_RADIO_B_DC_NOTCH_EN
, 1);

465 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RADIO_FE_CTRL0_RADIO_B_HOST_FILTER_GAIN
, 0x0b);

467  
LGW_REG_SUCCESS
;

468 
	}
}

472 
uöt8_t
 
	$sx1302_gë_ifmod_c⁄fig
(
uöt8_t
 
if_chaö
) {

473  
ifmod_c⁄fig
[
if_chaö
];

474 
	}
}

478 
	$sx1302_ch™√lizî_c⁄figuª
(
lgw_c⁄f_rxif_s
 * 
if_cfg
, 
boﬁ
 
fix_gaö
) {

479 
öt32_t
 
if_‰eq
;

480 
uöt8_t
 
ch™√ls_mask
 = 0x00;

481 
i
;

484 i‡(
if_cfg
 =
NULL
) {

485 
	`¥ötf
("ERROR: FailedÅo configure LoRa channelizer\n");

486  
LGW_REG_ERROR
;

490 
i
 = 0; i < 
LGW_MULTI_NB
; i++) {

491 
ch™√ls_mask
 |(
if_cfg
[
i
].
rf_chaö
 << i);

493 
	`DEBUG_PRINTF
("LoR®mu…i-SFÑadiÿ£À˘: 0x%02X\n", 
ch™√ls_mask
);

494 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_RADIO_SELECT_RADIO_SELECT
, 
ch™√ls_mask
);

497 
	`DEBUG_PRINTF
("LoR®£rvi˚Ñadiÿ£À˘: 0x%02X\n", 
if_cfg
[8].
rf_chaö
);

498 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_LORA_SERVICE_RADIO_SEL_RADIO_SELECT
, 
if_cfg
[8].
rf_chaö
);

501 
	`DEBUG_PRINTF
("FSKÑadiÿ£À˘ %u\n", 
if_cfg
[9].
rf_chaö
);

502 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_CFG_3_RADIO_SELECT
, 
if_cfg
[9].
rf_chaö
);

505 
if_‰eq
 = 
	`IF_HZ_TO_REG
(
if_cfg
[0].
‰eq_hz
);

506 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_FREQ_0_MSB_IF_FREQ_0
, (
if_‰eq
 >> 8) & 0x0000001F);

507 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_FREQ_0_LSB_IF_FREQ_0
, (
if_‰eq
 >> 0) & 0x000000FF);

509 
if_‰eq
 = 
	`IF_HZ_TO_REG
(
if_cfg
[1].
‰eq_hz
);

510 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_FREQ_1_MSB_IF_FREQ_1
, (
if_‰eq
 >> 8) & 0x0000001F);

511 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_FREQ_1_LSB_IF_FREQ_1
, (
if_‰eq
 >> 0) & 0x000000FF);

513 
if_‰eq
 = 
	`IF_HZ_TO_REG
(
if_cfg
[2].
‰eq_hz
);

514 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_FREQ_2_MSB_IF_FREQ_2
, (
if_‰eq
 >> 8) & 0x0000001F);

515 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_FREQ_2_LSB_IF_FREQ_2
, (
if_‰eq
 >> 0) & 0x000000FF);

517 
if_‰eq
 = 
	`IF_HZ_TO_REG
(
if_cfg
[3].
‰eq_hz
);

518 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_FREQ_3_MSB_IF_FREQ_3
, (
if_‰eq
 >> 8) & 0x0000001F);

519 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_FREQ_3_LSB_IF_FREQ_3
, (
if_‰eq
 >> 0) & 0x000000FF);

521 
if_‰eq
 = 
	`IF_HZ_TO_REG
(
if_cfg
[4].
‰eq_hz
);

522 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_FREQ_4_MSB_IF_FREQ_4
, (
if_‰eq
 >> 8) & 0x0000001F);

523 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_FREQ_4_LSB_IF_FREQ_4
, (
if_‰eq
 >> 0) & 0x000000FF);

525 
if_‰eq
 = 
	`IF_HZ_TO_REG
(
if_cfg
[5].
‰eq_hz
);

526 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_FREQ_5_MSB_IF_FREQ_5
, (
if_‰eq
 >> 8) & 0x0000001F);

527 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_FREQ_5_LSB_IF_FREQ_5
, (
if_‰eq
 >> 0) & 0x000000FF);

529 
if_‰eq
 = 
	`IF_HZ_TO_REG
(
if_cfg
[6].
‰eq_hz
);

530 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_FREQ_6_MSB_IF_FREQ_6
, (
if_‰eq
 >> 8) & 0x0000001F);

531 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_FREQ_6_LSB_IF_FREQ_6
, (
if_‰eq
 >> 0) & 0x000000FF);

533 
if_‰eq
 = 
	`IF_HZ_TO_REG
(
if_cfg
[7].
‰eq_hz
);

534 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_FREQ_7_MSB_IF_FREQ_7
, (
if_‰eq
 >> 8) & 0x0000001F);

535 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_FREQ_7_LSB_IF_FREQ_7
, (
if_‰eq
 >> 0) & 0x000000FF);

538 
if_‰eq
 = 
	`IF_HZ_TO_REG
(
if_cfg
[8].
‰eq_hz
);

539 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_LORA_SERVICE_FREQ_MSB_IF_FREQ_0
, (
if_‰eq
 >> 8) & 0x0000001F);

540 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_LORA_SERVICE_FREQ_LSB_IF_FREQ_0
, (
if_‰eq
 >> 0) & 0x000000FF);

543 
if_‰eq
 = 
	`IF_HZ_TO_REG
(
if_cfg
[9].
‰eq_hz
);

544 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_FREQ_MSB_IF_FREQ_0
, (
if_‰eq
 >> 8) & 0x0000001F);

545 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_FREQ_LSB_IF_FREQ_0
, (
if_‰eq
 >> 0) & 0x000000FF);

548 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_RSSI_CONTROL_RSSI_FILTER_ALPHA
, 0x05);

551 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_RSSI_DEF_VALUE_CHAN_RSSI_DEF_VALUE
, 85);

554 i‡(
fix_gaö
 =
åue
) {

555 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_CHANN_DAGC_CFG5_CHAN_DAGC_MODE
, 0x00);

556 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_GAIN_CONTROL_CHAN_GAIN
, 5);

559 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_CHANN_DAGC_CFG5_CHAN_DAGC_MODE
, 0x01);

561 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_CHANN_DAGC_CFG1_CHAN_DAGC_THRESHOLD_HIGH
, 255 );

562 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_CHANN_DAGC_CFG2_CHAN_DAGC_THRESHOLD_LOW
, 0 );

563 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_CHANN_DAGC_CFG3_CHAN_DAGC_MAX_ATTEN
, 15 );

564 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_CHANN_DAGC_CFG3_CHAN_DAGC_MIN_ATTEN
, 0 );

567  
LGW_REG_SUCCESS
;

568 
	}
}

572 
	$sx1302_fsk_c⁄figuª
(
lgw_c⁄f_rxif_s
 * 
cfg
) {

573 
uöt64_t
 
fsk_sync_w‹d_ªg
;

574 
uöt32_t
 
fsk_br_ªg
;

576 
	`DEBUG_PRINTF
("FSK: syncw‹d:0x%" 
PRIx64
 ", syncw‹d_size:%u\n", 
cfg
->
sync_w‹d
, cfg->
sync_w‹d_size
);

578 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_CFG_1_PSIZE
, 
cfg
->
sync_w‹d_size
 - 1);

579 
fsk_sync_w‹d_ªg
 = 
cfg
->
sync_w‹d
 << (8 * (8 - cfg->
sync_w‹d_size
));

580 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_REF_PATTERN_BYTE0_FSK_REF_PATTERN
, (
uöt8_t
)(
fsk_sync_w‹d_ªg
 >> 0));

581 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_REF_PATTERN_BYTE1_FSK_REF_PATTERN
, (
uöt8_t
)(
fsk_sync_w‹d_ªg
 >> 8));

582 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_REF_PATTERN_BYTE2_FSK_REF_PATTERN
, (
uöt8_t
)(
fsk_sync_w‹d_ªg
 >> 16));

583 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_REF_PATTERN_BYTE3_FSK_REF_PATTERN
, (
uöt8_t
)(
fsk_sync_w‹d_ªg
 >> 24));

584 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_REF_PATTERN_BYTE4_FSK_REF_PATTERN
, (
uöt8_t
)(
fsk_sync_w‹d_ªg
 >> 32));

585 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_REF_PATTERN_BYTE5_FSK_REF_PATTERN
, (
uöt8_t
)(
fsk_sync_w‹d_ªg
 >> 40));

586 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_REF_PATTERN_BYTE6_FSK_REF_PATTERN
, (
uöt8_t
)(
fsk_sync_w‹d_ªg
 >> 48));

587 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_REF_PATTERN_BYTE7_FSK_REF_PATTERN
, (
uöt8_t
)(
fsk_sync_w‹d_ªg
 >> 56));

589 
fsk_br_ªg
 = 32000000 / 
cfg
->
d©¨©e
;

590 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BIT_RATE_MSB_BIT_RATE
, (
uöt8_t
)(
fsk_br_ªg
 >> 8));

591 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BIT_RATE_LSB_BIT_RATE
, (
uöt8_t
)(
fsk_br_ªg
 >> 0));

592 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_CFG_1_CH_BW_EXPO
, 0x03);

594 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_CFG_3_RX_INVERT
, 0);

595 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_CFG_3_MODEM_INVERT_IQ
, 0);

597 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_CFG_4_RSSI_LENGTH
, 4);

598 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_CFG_0_PKT_MODE
, 1);

599 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_CFG_0_CRC_EN
, 1);

600 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_CFG_0_DCFREE_ENC
, 2);

601 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_CFG_0_CRC_IBM
, 0);

602 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_CFG_4_ERROR_OSR_TOL
, 10);

603 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_PKT_LENGTH_PKT_LENGTH
, 255);

604 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_NODE_ADRS_NODE_ADRS
, 0);

605 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_BROADCAST_BROADCAST
, 0);

606 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_CFG_3_AUTO_AFC
, 1);

607 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_TIMEOUT_MSB_TIMEOUT
, 0);

608 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_TIMEOUT_LSB_TIMEOUT
, 128);

610  
LGW_REG_SUCCESS
;

611 
	}
}

615 
	$sx1302_l‹a_c‹ªœt‹_c⁄figuª
() {

616 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_SF5_CFG2_ACC_PNR
, 52);

617 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_SF5_CFG4_MSP_PNR
, 24);

618 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_SF5_CFG6_MSP_PEAK_NB
, 7);

619 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_SF5_CFG7_MSP2_PEAK_NB
, 5);

621 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_SF6_CFG2_ACC_PNR
, 52);

622 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_SF6_CFG4_MSP_PNR
, 24);

623 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_SF6_CFG6_MSP_PEAK_NB
, 7);

624 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_SF6_CFG7_MSP2_PEAK_NB
, 5);

626 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_SF7_CFG2_ACC_PNR
, 52);

627 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_SF7_CFG4_MSP_PNR
, 24);

628 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_SF7_CFG6_MSP_PEAK_NB
, 7);

629 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_SF7_CFG7_MSP2_PEAK_NB
, 5);

631 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_SF8_CFG2_ACC_PNR
, 52);

632 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_SF8_CFG4_MSP_PNR
, 24);

633 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_SF8_CFG6_MSP_PEAK_NB
, 7);

634 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_SF8_CFG7_MSP2_PEAK_NB
, 5);

636 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_SF9_CFG2_ACC_PNR
, 52);

637 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_SF9_CFG4_MSP_PNR
, 24);

638 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_SF9_CFG6_MSP_PEAK_NB
, 7);

639 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_SF9_CFG7_MSP2_PEAK_NB
, 5);

641 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_SF10_CFG2_ACC_PNR
, 52);

642 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_SF10_CFG4_MSP_PNR
, 24);

643 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_SF10_CFG6_MSP_PEAK_NB
, 7);

644 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_SF10_CFG7_MSP2_PEAK_NB
, 5);

646 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_SF11_CFG2_ACC_PNR
, 52);

647 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_SF11_CFG4_MSP_PNR
, 24);

648 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_SF11_CFG6_MSP_PEAK_NB
, 7);

649 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_SF11_CFG7_MSP2_PEAK_NB
, 5);

651 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_SF12_CFG2_ACC_PNR
, 52);

652 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_SF12_CFG4_MSP_PNR
, 24);

653 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_SF12_CFG6_MSP_PEAK_NB
, 7);

654 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_SF12_CFG7_MSP2_PEAK_NB
, 5);

656 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_CORR_CLOCK_ENABLE_CLK_EN
, 0xFF);

658 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_CORRELATOR_ENABLE_ONLY_FIRST_DET_EDGE_ENABLE_ONLY_FIRST_DET_EDGE
, 0xFF);

659 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_CORRELATOR_ENABLE_ACC_CLEAR_ENABLE_CORR_ACC_CLEAR
, 0xFF);

660 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_CORRELATOR_SF_EN_CORR_SF_EN
, 0xFF);

661 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_CORRELATOR_EN_CORR_EN
, 0xFF);

665 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_RX_BUFFER_STORE_SYNC_FAIL_META
, 0x01);

666 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_RX_BUFFER_STORE_HEADER_ERR_META
, 0x01);

669  
LGW_REG_SUCCESS
;

670 
	}
}

674 
	$sx1302_l‹a_£rvi˚_c‹ªœt‹_c⁄figuª
(
lgw_c⁄f_rxif_s
 * 
cfg
) {

677 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_MSP2_MSP_PEAK_NB
, 7);

678 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_MSP2_MSP2_PEAK_NB
, 5);

679 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_ACC1_USE_GAIN_SYMB
, 1);

681 
cfg
->
d©¨©e
) {

683 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG2_FINE_SYNCH_EN
, 1);

684 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_ACC1_ACC_PNR
, 52);

687 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG2_FINE_SYNCH_EN
, 1);

688 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_ACC1_ACC_PNR
, 52);

691 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG2_FINE_SYNCH_EN
, 0);

692 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_ACC1_ACC_PNR
, 52);

695 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG2_FINE_SYNCH_EN
, 0);

696 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_ACC1_ACC_PNR
, 52);

699 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG2_FINE_SYNCH_EN
, 0);

700 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_ACC1_ACC_PNR
, 52);

703 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG2_FINE_SYNCH_EN
, 0);

704 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_ACC1_ACC_PNR
, 52);

707 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG2_FINE_SYNCH_EN
, 0);

708 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_ACC1_ACC_PNR
, 52);

711 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG2_FINE_SYNCH_EN
, 0);

712 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_ACC1_ACC_PNR
, 52);

715 
	`¥ötf
("ERROR: FailedÅo configure LoRa service modem correlators\n");

716  
LGW_REG_ERROR
;

719  
LGW_REG_SUCCESS
;

720 
	}
}

724 
	$sx1302_l‹a_modem_c⁄figuª
(
uöt32_t
 
ødio_‰eq_hz
) {

725 
uöt16_t
 
m™tisß
 = 0;

726 
uöt8_t
 
exp⁄ít
 = 0;

730 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_DC_NOTCH_CFG1_ENABLE
, 0x00);

731 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_RX_DFE_AGC1_FORCE_DEFAULT_FIR
, 0x01);

732 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_DAGC_CFG_GAIN_DROP_COMP
, 0x01);

733 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_DAGC_CFG_TARGET_LVL
, 0x01);

736 
	`DEBUG_MSG
("Configuring 8 full-SF modems\n");

737 
	`lgw_sx1302_ªg_w
(
SX1302_REG_OTP_MODEM_EN_0_MODEM_EN
, 0xFF);

740 
	`DEBUG_MSG
("Configuring 8Üimited-SF modems\n");

741 
	`lgw_sx1302_ªg_w
(
SX1302_REG_OTP_MODEM_EN_1_MODEM_EN
, 0xFF);

744 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_MODEM_SYNC_DELTA_MSB_MODEM_SYNC_DELTA
, 0);

745 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_MODEM_SYNC_DELTA_LSB_MODEM_SYNC_DELTA
, 126);

748 
	`lgw_sx1302_ªg_w
(
SX1302_REG_ARB_MCU_CHANNEL_SYNC_OFFSET_01_CHANNEL_0_OFFSET
, 1);

749 
	`lgw_sx1302_ªg_w
(
SX1302_REG_ARB_MCU_CHANNEL_SYNC_OFFSET_01_CHANNEL_1_OFFSET
, 5);

750 
	`lgw_sx1302_ªg_w
(
SX1302_REG_ARB_MCU_CHANNEL_SYNC_OFFSET_23_CHANNEL_2_OFFSET
, 9);

751 
	`lgw_sx1302_ªg_w
(
SX1302_REG_ARB_MCU_CHANNEL_SYNC_OFFSET_23_CHANNEL_3_OFFSET
, 13);

752 
	`lgw_sx1302_ªg_w
(
SX1302_REG_ARB_MCU_CHANNEL_SYNC_OFFSET_45_CHANNEL_4_OFFSET
, 1);

753 
	`lgw_sx1302_ªg_w
(
SX1302_REG_ARB_MCU_CHANNEL_SYNC_OFFSET_45_CHANNEL_5_OFFSET
, 5);

754 
	`lgw_sx1302_ªg_w
(
SX1302_REG_ARB_MCU_CHANNEL_SYNC_OFFSET_67_CHANNEL_6_OFFSET
, 9);

755 
	`lgw_sx1302_ªg_w
(
SX1302_REG_ARB_MCU_CHANNEL_SYNC_OFFSET_67_CHANNEL_7_OFFSET
, 13);

758 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_MODEM_PPM_OFFSET1_PPM_OFFSET_SF5
, 0x00);

759 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_MODEM_PPM_OFFSET1_PPM_OFFSET_SF6
, 0x00);

760 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_MODEM_PPM_OFFSET1_PPM_OFFSET_SF7
, 0x00);

761 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_MODEM_PPM_OFFSET1_PPM_OFFSET_SF8
, 0x00);

762 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_MODEM_PPM_OFFSET2_PPM_OFFSET_SF9
, 0x00);

763 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_MODEM_PPM_OFFSET2_PPM_OFFSET_SF10
, 0x00);

764 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_MODEM_PPM_OFFSET2_PPM_OFFSET_SF11
, 0x01);

765 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_MODEM_PPM_OFFSET2_PPM_OFFSET_SF12
, 0x01);

768 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_FINE_TIMING_A_1_GAIN_P_AUTO
, 3);

769 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_FINE_TIMING_A_1_GAIN_P_PAYLOAD
, 3);

772 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_FINE_TIMING_A_5_GAIN_I_EN_SF11
, 1);

773 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_FINE_TIMING_A_5_GAIN_I_EN_SF12
, 1);

774 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_FINE_TIMING_B_5_GAIN_I_EN_SF11
, 1);

775 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_FINE_TIMING_B_5_GAIN_I_EN_SF12
, 1);

778 i‡(
	`ˇlcuœã_‰eq_to_time_dri·
(
ødio_‰eq_hz
, 
BW_125KHZ
, &
m™tisß
, &
exp⁄ít
) != 0) {

779 
	`¥ötf
("ERROR: failedÅo calculate frequencyÅoÅime drift for LoRa modem\n");

780  
LGW_REG_ERROR
;

782 
	`DEBUG_PRINTF
("Fªq2TimeDri· Mu…iSF: M™tisß = %d (0x%02X, 0x%02X), Exp⁄íà%d (0x%02X)\n", 
m™tisß
, (m™tisß >> 8Ë& 0x00FF, (m™tisßË& 0x00FF, 
exp⁄ít
,Éxponent);

783 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_FREQ_TO_TIME0_FREQ_TO_TIME_DRIFT_MANT
, (
m™tisß
 >> 8) & 0x00FF);

784 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_FREQ_TO_TIME1_FREQ_TO_TIME_DRIFT_MANT
, (
m™tisß
) & 0x00FF);

785 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_FREQ_TO_TIME2_FREQ_TO_TIME_DRIFT_EXP
, 
exp⁄ít
);

788 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_FREQ_TO_TIME3_FREQ_TO_TIME_INVERT_TIME_SYMB
, 1);

791  
LGW_REG_SUCCESS
;

792 
	}
}

796 
	$sx1302_l‹a_£rvi˚_modem_c⁄figuª
(
lgw_c⁄f_rxif_s
 * 
cfg
, 
uöt32_t
 
ødio_‰eq_hz
) {

797 
uöt16_t
 
m™tisß
 = 0;

798 
uöt8_t
 
exp⁄ít
 = 0;

800 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DC_NOTCH_CFG1_ENABLE
, 0x00);

801 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_AGC1_FORCE_DEFAULT_FIR
, 0x01);

802 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DAGC_CFG_GAIN_DROP_COMP
, 0x01);

803 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DAGC_CFG_TARGET_LVL
, 0x01);

805 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING1_GAIN_P_AUTO
, 0x03);

806 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING2_GAIN_I_PAYLOAD
, 0x03);

808 
cfg
->
d©¨©e
) {

809 
DR_LORA_SF5
:

810 
DR_LORA_SF6
:

811 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING1_GAIN_P_PREAMB
, 0x04);

812 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING2_GAIN_I_EN
, 0x00);

814 
DR_LORA_SF7
:

815 
DR_LORA_SF8
:

816 
DR_LORA_SF9
:

817 
DR_LORA_SF10
:

818 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING1_GAIN_P_PREAMB
, 0x06);

819 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING2_GAIN_I_EN
, 0x00);

821 
DR_LORA_SF11
:

822 
DR_LORA_SF12
:

823 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING1_GAIN_P_PREAMB
, 0x07);

824 
cfg
->
b™dwidth
) {

825 
BW_125KHZ
:

826 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING2_GAIN_I_EN
, 0x01);

828 
BW_250KHZ
:

829 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING2_GAIN_I_EN
, 0x02);

831 
BW_500KHZ
:

832 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING2_GAIN_I_EN
, 0x03);

835 
	`¥ötf
("ERROR: unsuµ‹ãd b™dwidth %u f‹ LoR®Sîvi˚ modem\n", 
cfg
->
b™dwidth
);

840 
	`¥ötf
("ERROR: unsuµ‹ãd d©¨©ê%u f‹ LoR®Sîvi˚ modem\n", 
cfg
->
d©¨©e
);

844 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG2_IMPLICIT_HEADER
, (
cfg
->
im∂icô_hdr
 =
åue
) ? 1 : 0);

845 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG2_CRC_EN
, (
cfg
->
im∂icô_¸c_í
 =
åue
) ? 1 : 0);

846 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG1_CODING_RATE
, 
cfg
->
im∂icô_codî©e
);

847 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG3_PAYLOAD_LENGTH
, 
cfg
->
im∂icô_∑ylﬂd_Àngth
);

849 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG0_MODEM_SF
, 
cfg
->
d©¨©e
);

850 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG0_MODEM_BW
, 
cfg
->
b™dwidth
);

851 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG1_PPM_OFFSET
, 
	`SET_PPM_ON
(
cfg
->
b™dwidth
, cfg->
d©¨©e
));

857 i‡(
	`ˇlcuœã_‰eq_to_time_dri·
(
ødio_‰eq_hz
, 
cfg
->
b™dwidth
, &
m™tisß
, &
exp⁄ít
) != 0) {

858 
	`¥ötf
("ERROR: failedÅo calculate frequencyÅoÅime drift for LoRa service modem\n");

859  
LGW_REG_ERROR
;

861 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FREQ_TO_TIME0_FREQ_TO_TIME_DRIFT_MANT
, (
m™tisß
 >> 8) & 0x00FF);

862 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FREQ_TO_TIME1_FREQ_TO_TIME_DRIFT_MANT
, (
m™tisß
) & 0x00FF);

863 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FREQ_TO_TIME2_FREQ_TO_TIME_DRIFT_EXP
, 
exp⁄ít
);

864 
	`DEBUG_PRINTF
("Fªq2TimeDri· SögÀSF: M™tisß = %d (0x%02X, 0x%02X), Exp⁄íà%d (0x%02X)\n", 
m™tisß
, (m™tisß >> 8Ë& 0x00FF, (m™tisßË& 0x00FF, 
exp⁄ít
,Éxponent);

867 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FREQ_TO_TIME3_FREQ_TO_TIME_INVERT_TIME_SYMB
, 1);

869 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_AGC2_DAGC_IN_COMP
, 1);

871 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG1_MODEM_EN
, 1);

872 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG2_CADRXTX
, 1);

874 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG2_MODEM_START
, 1);

876  
LGW_REG_SUCCESS
;

877 
	}
}

881 
	$sx1302_modem_íabÀ
() {

883 
	`lgw_sx1302_ªg_w
(
SX1302_REG_COMMON_GEN_CONCENTRATOR_MODEM_ENABLE
, 0x01);

886 
	`lgw_sx1302_ªg_w
(
SX1302_REG_COMMON_GEN_MBWSSF_MODEM_ENABLE
, 0x01);

889 
	`lgw_sx1302_ªg_w
(
SX1302_REG_COMMON_GEN_FSK_MODEM_ENABLE
, 0x01);

892 
	`lgw_sx1302_ªg_w
(
SX1302_REG_COMMON_GEN_GLOBAL_EN
, 0x01);

894  
LGW_REG_SUCCESS
;

895 
	}
}

899 
	$sx1302_l‹a_syncw‹d
(
boﬁ
 
public
, 
uöt8_t
 
l‹a_£rvi˚_sf
) {

901 
	`DEBUG_MSG
("INFO: configuring LoRa (Multi-SF) SF5->SF6 with syncword PRIVATE (0x12)\n");

902 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_FRAME_SYNCH0_SF5_PEAK1_POS_SF5
, 2);

903 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_FRAME_SYNCH1_SF5_PEAK2_POS_SF5
, 4);

904 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_FRAME_SYNCH0_SF6_PEAK1_POS_SF6
, 2);

905 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_FRAME_SYNCH1_SF6_PEAK2_POS_SF6
, 4);

906 i‡(
public
 =
åue
) {

907 
	`DEBUG_MSG
("INFO: configuring LoRa (Multi-SF) SF7->SF12 with syncword PUBLIC (0x34)\n");

908 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_FRAME_SYNCH0_SF7TO12_PEAK1_POS_SF7TO12
, 6);

909 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_FRAME_SYNCH1_SF7TO12_PEAK2_POS_SF7TO12
, 8);

911 
	`DEBUG_MSG
("INFO: configuring LoRa (Multi-SF) SF7->SF12 with syncword PRIVATE (0x12)\n");

912 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_FRAME_SYNCH0_SF7TO12_PEAK1_POS_SF7TO12
, 2);

913 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_FRAME_SYNCH1_SF7TO12_PEAK2_POS_SF7TO12
, 4);

917 i‡((
public
 =
Ál£
Ë|| (
l‹a_£rvi˚_sf
 =
DR_LORA_SF5
Ë|| (l‹a_£rvi˚_s‡=
DR_LORA_SF6
)) {

918 
	`DEBUG_PRINTF
("INFO: c⁄figurög LoR®(Sîvi˚ËSF%u wôh syncw‹d PRIVATE (0x12)\n", 
l‹a_£rvi˚_sf
);

919 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FRAME_SYNCH0_PEAK1_POS
, 2);

920 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FRAME_SYNCH1_PEAK2_POS
, 4);

922 
	`DEBUG_PRINTF
("INFO: c⁄figurög LoR®(Sîvi˚ËSF%u wôh syncw‹d PUBLIC (0x34)\n", 
l‹a_£rvi˚_sf
);

923 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FRAME_SYNCH0_PEAK1_POS
, 6);

924 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FRAME_SYNCH1_PEAK2_POS
, 8);

927  
LGW_REG_SUCCESS
;

928 
	}
}

932 
uöt32_t
 
	$sx1302_time°amp_cou¡î
(
boﬁ
 
µs
) {

933  
	`time°amp_cou¡î_gë
(&
cou¡î_us
, 
µs
);

934 
	}
}

938 
	$sx1302_gps_íabÀ
(
boﬁ
 
íabÀ
) {

939 i‡(
íabÀ
 =
åue
) {

940 
	`lgw_sx1302_ªg_w
(
SX1302_REG_TIMESTAMP_GPS_CTRL_GPS_EN
, 1);

941 
	`lgw_sx1302_ªg_w
(
SX1302_REG_TIMESTAMP_GPS_CTRL_GPS_POL
, 1);

943 
	`lgw_sx1302_ªg_w
(
SX1302_REG_TIMESTAMP_GPS_CTRL_GPS_EN
, 0);

946  
LGW_HAL_SUCCESS
;

947 
	}
}

951 
	$sx1302_agc_lﬂd_fúmw¨e
(c⁄° 
uöt8_t
 *
fúmw¨e
) {

952 
öt32_t
 
vÆ
;

953 
uöt8_t
 
fw_check
[
MCU_FW_SIZE
];

954 
öt32_t
 
gpio_£l
 = 
MCU_AGC
;

957 
	`lgw_sx1302_ªg_w
(
SX1302_REG_GPIO_GPIO_SEL_0_SELECTION
, 
gpio_£l
);

958 
	`lgw_sx1302_ªg_w
(
SX1302_REG_GPIO_GPIO_SEL_1_SELECTION
, 
gpio_£l
);

959 
	`lgw_sx1302_ªg_w
(
SX1302_REG_GPIO_GPIO_SEL_2_SELECTION
, 
gpio_£l
);

960 
	`lgw_sx1302_ªg_w
(
SX1302_REG_GPIO_GPIO_SEL_3_SELECTION
, 
gpio_£l
);

961 
	`lgw_sx1302_ªg_w
(
SX1302_REG_GPIO_GPIO_SEL_4_SELECTION
, 
gpio_£l
);

962 
	`lgw_sx1302_ªg_w
(
SX1302_REG_GPIO_GPIO_SEL_5_SELECTION
, 
gpio_£l
);

963 
	`lgw_sx1302_ªg_w
(
SX1302_REG_GPIO_GPIO_SEL_6_SELECTION
, 
gpio_£l
);

964 
	`lgw_sx1302_ªg_w
(
SX1302_REG_GPIO_GPIO_SEL_7_SELECTION
, 
gpio_£l
);

965 
	`lgw_sx1302_ªg_w
(
SX1302_REG_GPIO_GPIO_DIR_L_DIRECTION
, 0xFF);

968 
	`lgw_sx1302_ªg_w
(
SX1302_REG_AGC_MCU_CTRL_MCU_CLEAR
, 0x01);

969 
	`lgw_sx1302_ªg_w
(
SX1302_REG_AGC_MCU_CTRL_HOST_PROG
, 0x01);

970 
	`lgw_sx1302_ªg_w
(
SX1302_REG_COMMON_PAGE_PAGE
, 0x00);

973 
	`lgw_mem_wb
(
AGC_MEM_ADDR
, 
fúmw¨e
, 
MCU_FW_SIZE
);

976 
	`lgw_mem_rb
(
AGC_MEM_ADDR
, 
fw_check
, 
MCU_FW_SIZE
, 
Ál£
);

977 i‡(
	`memcmp
(
fúmw¨e
, 
fw_check
,  fw_check) != 0) {

978 
	`¥ötf
 ("ERROR: FailedÅoÜoad fw\n");

983 
	`lgw_sx1302_ªg_w
(
SX1302_REG_AGC_MCU_CTRL_HOST_PROG
, 0x00);

984 
	`lgw_sx1302_ªg_w
(
SX1302_REG_AGC_MCU_CTRL_MCU_CLEAR
, 0x00);

986 
	`lgw_sx1302_ªg_r
(
SX1302_REG_AGC_MCU_CTRL_PARITY_ERROR
, &
vÆ
);

987 
	`DEBUG_PRINTF
("AGC fwÜﬂded (∑rôyÉº‹:0x%02X)\n", 
vÆ
);

989  
LGW_HAL_SUCCESS
;

990 
	}
}

994 
	$sx1302_agc_°©us
(
uöt8_t
* 
°©us
) {

995 
öt32_t
 
vÆ
;

997 i‡(
	`lgw_sx1302_ªg_r
(
SX1302_REG_AGC_MCU_MCU_AGC_STATUS_MCU_AGC_STATUS
, &
vÆ
Ë!
LGW_REG_SUCCESS
) {

998 
	`¥ötf
("ERROR: FailedÅo get AGC status\n");

999  
LGW_HAL_ERROR
;

1002 *
°©us
 = (
uöt8_t
)
vÆ
;

1004  
LGW_HAL_SUCCESS
;

1005 
	}
}

1009 
	$sx1302_agc_waô_°©us
(
uöt8_t
 
°©us
) {

1010 
uöt8_t
 
vÆ
;

1013 i‡(
	`sx1302_agc_°©us
(&
vÆ
Ë!
LGW_HAL_SUCCESS
) {

1014  
LGW_HAL_ERROR
;

1016 } 
vÆ
 !
°©us
);

1018  
LGW_HAL_SUCCESS
;

1019 
	}
}

1023 
	$sx1302_agc_maûbox_ªad
(
uöt8_t
 
maûbox
, uöt8_t* 
vÆue
) {

1024 
uöt16_t
 
ªg
;

1025 
öt32_t
 
vÆ
;

1028 i‡(
maûbox
 > 3) {

1029 
	`¥ötf
("ERROR: invalid AGC mailbox ID\n");

1030  
LGW_HAL_ERROR
;

1033 
ªg
 = 
SX1302_REG_AGC_MCU_MCU_MAIL_BOX_RD_DATA_BYTE0_MCU_MAIL_BOX_RD_DATA
 - 
maûbox
;

1034 i‡(
	`lgw_sx1302_ªg_r
(
ªg
, &
vÆ
Ë!
LGW_REG_SUCCESS
) {

1035 
	`¥ötf
("ERROR: failedÅoÑead AGC mailbox\n");

1036  
LGW_HAL_ERROR
;

1039 *
vÆue
 = (
uöt8_t
)
vÆ
;

1041  
LGW_HAL_SUCCESS
;

1042 
	}
}

1046 
	$sx1302_agc_maûbox_wrôe
(
uöt8_t
 
maûbox
, uöt8_à
vÆue
) {

1047 
uöt16_t
 
ªg
;

1050 i‡(
maûbox
 > 3) {

1051 
	`¥ötf
("ERROR: invalid AGC mailbox ID\n");

1052  
LGW_HAL_ERROR
;

1055 
ªg
 = 
SX1302_REG_AGC_MCU_MCU_MAIL_BOX_WR_DATA_BYTE0_MCU_MAIL_BOX_WR_DATA
 - 
maûbox
;

1056 i‡(
	`lgw_sx1302_ªg_w
(
ªg
, (
öt32_t
)
vÆue
Ë!
LGW_REG_SUCCESS
) {

1057 
	`¥ötf
("ERROR: failedÅo write AGC mailbox\n");

1058  
LGW_HAL_ERROR
;

1061  
LGW_HAL_SUCCESS
;

1062 
	}
}

1066 
	$sx1302_agc_°¨t
(
uöt8_t
 
vîsi⁄
, 
lgw_ødio_ty≥_t
 
ødio_ty≥
, uöt8_à
™a_gaö
, uöt8_à
dec_gaö
, uöt8_à
fdd_mode
) {

1067 
uöt8_t
 
vÆ
;

1068 
agc_gaö_∑øms_s
 
agc_∑øms
;

1071 i‡((
ødio_ty≥
 !
LGW_RADIO_TYPE_SX1255
Ë&& (ødio_ty≥ !
LGW_RADIO_TYPE_SX1257
Ë&& (ødio_ty≥ !
LGW_RADIO_TYPE_SX1250
)) {

1072 
	`DEBUG_MSG
("ERROR: invalidÑadioÅype\n");

1073  
LGW_REG_ERROR
;

1077 
	`sx1302_agc_waô_°©us
(0x01);

1079 
	`sx1302_agc_maûbox_ªad
(0, &
vÆ
);

1080 i‡(
vÆ
 !
vîsi⁄
) {

1081 
	`¥ötf
("ERROR: wr⁄g AGC fw vîsi⁄ (%d)\n", 
vÆ
);

1082  
LGW_HAL_ERROR
;

1084 
	`DEBUG_PRINTF
("AGC FW VERSION: %d\n", 
vÆ
);

1087 
	`sx1302_agc_maûbox_wrôe
(0, 
™a_gaö
);

1088 
	`sx1302_agc_maûbox_wrôe
(1, 
dec_gaö
);

1089 i‡(
ødio_ty≥
 !
LGW_RADIO_TYPE_SX1250
) {

1090 
	`¥ötf
("AGC: sëtög fdd_modêtÿ%u\n", 
fdd_mode
);

1091 
	`sx1302_agc_maûbox_wrôe
(2, 
fdd_mode
);

1095 
	`sx1302_agc_maûbox_wrôe
(3, 
AGC_RADIO_A_INIT_DONE
);

1098 
	`sx1302_agc_waô_°©us
(0x02);

1101 
	`sx1302_agc_maûbox_ªad
(0, &
vÆ
);

1102 i‡(
vÆ
 !
™a_gaö
) {

1103 
	`¥ötf
("ERROR: Analog gain of Radio A hasÇot been setÖroperly\n");

1104  
LGW_HAL_ERROR
;

1108 
	`sx1302_agc_maûbox_ªad
(1, &
vÆ
);

1109 i‡(
vÆ
 !
dec_gaö
) {

1110 
	`¥ötf
("ERROR: Decimator gain of Radio A hasÇot been setÖroperly\n");

1111  
LGW_HAL_ERROR
;

1115 
	`sx1302_agc_maûbox_ªad
(2, &
vÆ
);

1116 i‡(
vÆ
 !
fdd_mode
) {

1117 
	`¥ötf
("ERROR: FDD mode of Radio A hasÇot been setÖroperly\n");

1118  
LGW_HAL_ERROR
;

1121 
	`DEBUG_MSG
("AGC: Radio A config done\n");

1124 
	`sx1302_agc_maûbox_wrôe
(0, 
™a_gaö
);

1125 
	`sx1302_agc_maûbox_wrôe
(1, 
dec_gaö
);

1126 i‡(
ødio_ty≥
 !
LGW_RADIO_TYPE_SX1250
) {

1127 
	`sx1302_agc_maûbox_wrôe
(2, 
fdd_mode
);

1131 
	`sx1302_agc_maûbox_wrôe
(3, 
AGC_RADIO_B_INIT_DONE
);

1134 
	`sx1302_agc_waô_°©us
(0x03);

1137 
	`sx1302_agc_maûbox_ªad
(0, &
vÆ
);

1138 i‡(
vÆ
 !
™a_gaö
) {

1139 
	`¥ötf
("ERROR: Analog gain of Radio B hasÇot been setÖroperly\n");

1140  
LGW_HAL_ERROR
;

1144 
	`sx1302_agc_maûbox_ªad
(1, &
vÆ
);

1145 i‡(
vÆ
 !
dec_gaö
) {

1146 
	`¥ötf
("ERROR: Decimator gain of Radio B hasÇot been setÖroperly\n");

1147  
LGW_HAL_ERROR
;

1151 
	`sx1302_agc_maûbox_ªad
(2, &
vÆ
);

1152 i‡(
vÆ
 !
fdd_mode
) {

1153 
	`¥ötf
("ERROR: FDD mode of Radio B hasÇot been setÖroperly\n");

1154  
LGW_HAL_ERROR
;

1157 
	`DEBUG_MSG
("AGC: Radio B config done\n");

1160 
agc_∑øms
 = (
ødio_ty≥
 =
LGW_RADIO_TYPE_SX1250
Ë? 
agc_∑øms_sx1250
 : 
agc_∑øms_sx125x
;

1163 
	`sx1302_agc_maûbox_wrôe
(0, 
agc_∑øms
.
™a_mö
);

1164 
	`sx1302_agc_maûbox_wrôe
(1, 
agc_∑øms
.
™a_max
);

1167 
	`sx1302_agc_maûbox_wrôe
(3, 0x03);

1170 
	`sx1302_agc_waô_°©us
(0x04);

1173 
	`sx1302_agc_maûbox_ªad
(0, &
vÆ
);

1174 i‡(
vÆ
 !
agc_∑øms
.
™a_mö
) {

1175 
	`¥ötf
("ERROR: wr⁄gá«_mö (w:%uÑ:%u)\n", 
agc_∑øms
.
™a_mö
, 
vÆ
);

1176  
LGW_HAL_ERROR
;

1178 
	`sx1302_agc_maûbox_ªad
(1, &
vÆ
);

1179 i‡(
vÆ
 !
agc_∑øms
.
™a_max
) {

1180 
	`¥ötf
("ERROR:á«_max (w:%uÑ:%u)\n", 
agc_∑øms
.
™a_max
, 
vÆ
);

1181  
LGW_HAL_ERROR
;

1184 
	`DEBUG_MSG
("AGC: config ofánalog gain min/max done\n");

1187 
	`sx1302_agc_maûbox_wrôe
(0, 
agc_∑øms
.
™a_thªsh_l
);

1188 
	`sx1302_agc_maûbox_wrôe
(1, 
agc_∑øms
.
™a_thªsh_h
);

1191 
	`sx1302_agc_maûbox_wrôe
(3, 0x04);

1194 
	`sx1302_agc_waô_°©us
(0x05);

1197 
	`sx1302_agc_maûbox_ªad
(0, &
vÆ
);

1198 i‡(
vÆ
 !
agc_∑øms
.
™a_thªsh_l
) {

1199 
	`¥ötf
("ERROR: wr⁄gá«_thªsh_»(w:%uÑ:%u)\n", 
agc_∑øms
.
™a_thªsh_l
, 
vÆ
);

1200  
LGW_HAL_ERROR
;

1202 
	`sx1302_agc_maûbox_ªad
(1, &
vÆ
);

1203 i‡(
vÆ
 !
agc_∑øms
.
™a_thªsh_h
) {

1204 
	`¥ötf
("ERROR: wr⁄gá«_thªsh_h (w:%uÑ:%u)\n", 
agc_∑øms
.
™a_thªsh_h
, 
vÆ
);

1205  
LGW_HAL_ERROR
;

1208 
	`DEBUG_MSG
("AGC: config ofánalogÅhreshold done\n");

1211 
	`sx1302_agc_maûbox_wrôe
(0, 
agc_∑øms
.
dec_©ä_mö
);

1212 
	`sx1302_agc_maûbox_wrôe
(1, 
agc_∑øms
.
dec_©ä_max
);

1215 
	`sx1302_agc_maûbox_wrôe
(3, 0x05);

1218 
	`sx1302_agc_waô_°©us
(0x06);

1221 
	`sx1302_agc_maûbox_ªad
(0, &
vÆ
);

1222 i‡(
vÆ
 !
agc_∑øms
.
dec_©ä_mö
) {

1223 
	`¥ötf
("ERROR: wr⁄g dec_©ä_mö (w:%uÑ:%u)\n", 
agc_∑øms
.
dec_©ä_mö
, 
vÆ
);

1224  
LGW_HAL_ERROR
;

1226 
	`sx1302_agc_maûbox_ªad
(1, &
vÆ
);

1227 i‡(
vÆ
 !
agc_∑øms
.
dec_©ä_max
) {

1228 
	`¥ötf
("ERROR: wr⁄g dec_©ä_max (w:%uÑ:%u)\n", 
agc_∑øms
.
dec_©ä_max
, 
vÆ
);

1229  
LGW_HAL_ERROR
;

1232 
	`DEBUG_MSG
("AGC: config of decimatorátten min/max done\n");

1235 
	`sx1302_agc_maûbox_wrôe
(0, 
agc_∑øms
.
dec_thªsh_l
);

1236 
	`sx1302_agc_maûbox_wrôe
(1, 
agc_∑øms
.
dec_thªsh_h1
);

1237 
	`sx1302_agc_maûbox_wrôe
(2, 
agc_∑øms
.
dec_thªsh_h2
);

1240 
	`sx1302_agc_maûbox_wrôe
(3, 0x06);

1243 
	`sx1302_agc_waô_°©us
(0x07);

1246 
	`sx1302_agc_maûbox_ªad
(0, &
vÆ
);

1247 i‡(
vÆ
 !
agc_∑øms
.
dec_thªsh_l
) {

1248 
	`¥ötf
("ERROR: wr⁄g dec_thªsh_»(w:%uÑ:%u)\n", 
agc_∑øms
.
dec_thªsh_l
, 
vÆ
);

1249  
LGW_HAL_ERROR
;

1251 
	`sx1302_agc_maûbox_ªad
(1, &
vÆ
);

1252 i‡(
vÆ
 !
agc_∑øms
.
dec_thªsh_h1
) {

1253 
	`¥ötf
("ERROR: wr⁄g dec_thªsh_h1 (w:%uÑ:%u)\n", 
agc_∑øms
.
dec_thªsh_h1
, 
vÆ
);

1254  
LGW_HAL_ERROR
;

1256 
	`sx1302_agc_maûbox_ªad
(2, &
vÆ
);

1257 i‡(
vÆ
 !
agc_∑øms
.
dec_thªsh_h2
) {

1258 
	`¥ötf
("ERROR: wr⁄g dec_thªsh_h2 (w:%uÑ:%u)\n", 
agc_∑øms
.
dec_thªsh_h2
, 
vÆ
);

1259  
LGW_HAL_ERROR
;

1262 
	`DEBUG_MSG
("AGC: config of decimatorÅhreshold done\n");

1265 
	`sx1302_agc_maûbox_wrôe
(0, 
agc_∑øms
.
ch™_©ä_mö
);

1266 
	`sx1302_agc_maûbox_wrôe
(1, 
agc_∑øms
.
ch™_©ä_max
);

1269 
	`sx1302_agc_maûbox_wrôe
(3, 0x07);

1272 
	`sx1302_agc_waô_°©us
(0x08);

1275 
	`sx1302_agc_maûbox_ªad
(0, &
vÆ
);

1276 i‡(
vÆ
 !
agc_∑øms
.
ch™_©ä_mö
) {

1277 
	`¥ötf
("ERROR: wr⁄g ch™_©ä_mö (w:%uÑ:%u)\n", 
agc_∑øms
.
ch™_©ä_mö
, 
vÆ
);

1278  
LGW_HAL_ERROR
;

1280 
	`sx1302_agc_maûbox_ªad
(1, &
vÆ
);

1281 i‡(
vÆ
 !
agc_∑øms
.
ch™_©ä_max
) {

1282 
	`¥ötf
("ERROR: wr⁄g ch™_©ä_max (w:%uÑ:%u)\n", 
agc_∑øms
.
ch™_©ä_max
, 
vÆ
);

1283  
LGW_HAL_ERROR
;

1286 
	`DEBUG_MSG
("AGC: config of channelátten min/max done\n");

1289 
	`sx1302_agc_maûbox_wrôe
(0, 
agc_∑øms
.
ch™_thªsh_l
);

1290 
	`sx1302_agc_maûbox_wrôe
(1, 
agc_∑øms
.
ch™_thªsh_h
);

1293 
	`sx1302_agc_maûbox_wrôe
(3, 0x08);

1296 
	`sx1302_agc_waô_°©us
(0x09);

1299 
	`sx1302_agc_maûbox_ªad
(0, &
vÆ
);

1300 i‡(
vÆ
 !
agc_∑øms
.
ch™_thªsh_l
) {

1301 
	`¥ötf
("ERROR: wr⁄g ch™_thªsh_»(w:%uÑ:%u)\n", 
agc_∑øms
.
ch™_thªsh_l
, 
vÆ
);

1302  
LGW_HAL_ERROR
;

1304 
	`sx1302_agc_maûbox_ªad
(1, &
vÆ
);

1305 i‡(
vÆ
 !
agc_∑øms
.
ch™_thªsh_h
) {

1306 
	`¥ötf
("ERROR: wr⁄g ch™_thªsh_h (w:%uÑ:%u)\n", 
agc_∑øms
.
ch™_thªsh_h
, 
vÆ
);

1307  
LGW_HAL_ERROR
;

1310 
	`DEBUG_MSG
("AGC: config of channeláttenÅhreshold done\n");

1312 i‡(
ødio_ty≥
 =
LGW_RADIO_TYPE_SX1250
) {

1314 
	`sx1302_agc_maûbox_wrôe
(0, 
agc_∑øms
.
devi˚Sñ
);

1315 
	`sx1302_agc_maûbox_wrôe
(1, 
agc_∑øms
.
hpMax
);

1316 
	`sx1302_agc_maûbox_wrôe
(2, 
agc_∑øms
.
∑DutyCy˛e
);

1319 
	`sx1302_agc_maûbox_wrôe
(3, 0x09);

1322 
	`sx1302_agc_waô_°©us
(0x0A);

1325 
	`sx1302_agc_maûbox_ªad
(0, &
vÆ
);

1326 i‡(
vÆ
 !
agc_∑øms
.
devi˚Sñ
) {

1327 
	`¥ötf
("ERROR: wr⁄g devi˚Sñ (w:%uÑ:%u)\n", 
agc_∑øms
.
devi˚Sñ
, 
vÆ
);

1328  
LGW_HAL_ERROR
;

1330 
	`sx1302_agc_maûbox_ªad
(1, &
vÆ
);

1331 i‡(
vÆ
 !
agc_∑øms
.
hpMax
) {

1332 
	`¥ötf
("ERROR: wr⁄g hpMax (w:%uÑ:%u)\n", 
agc_∑øms
.
hpMax
, 
vÆ
);

1333  
LGW_HAL_ERROR
;

1335 
	`sx1302_agc_maûbox_ªad
(2, &
vÆ
);

1336 i‡(
vÆ
 !
agc_∑øms
.
∑DutyCy˛e
) {

1337 
	`¥ötf
("ERROR: wr⁄gÖaDutyCy˛ê(w:%uÑ:%u)\n", 
agc_∑øms
.
∑DutyCy˛e
, 
vÆ
);

1338  
LGW_HAL_ERROR
;

1341 
	`DEBUG_MSG
("AGC: config of sx1250 PA optimal settings done\n");

1344 
	`sx1302_agc_maûbox_wrôe
(3, 0x0A);

1347 
	`sx1302_agc_maûbox_wrôe
(3, 0x09);

1350 
	`DEBUG_MSG
("AGC: started\n");

1352  
LGW_HAL_SUCCESS
;

1353 
	}
}

1357 
	$sx1302_¨b_lﬂd_fúmw¨e
(c⁄° 
uöt8_t
 *
fúmw¨e
) {

1358 
uöt8_t
 
fw_check
[
MCU_FW_SIZE
];

1359 
öt32_t
 
gpio_£l
 = 
MCU_ARB
;

1360 
öt32_t
 
vÆ
;

1362 
	`lgw_sx1302_ªg_w
(
SX1302_REG_GPIO_GPIO_SEL_0_SELECTION
, 
gpio_£l
);

1363 
	`lgw_sx1302_ªg_w
(
SX1302_REG_GPIO_GPIO_SEL_1_SELECTION
, 
gpio_£l
);

1364 
	`lgw_sx1302_ªg_w
(
SX1302_REG_GPIO_GPIO_SEL_2_SELECTION
, 
gpio_£l
);

1365 
	`lgw_sx1302_ªg_w
(
SX1302_REG_GPIO_GPIO_SEL_3_SELECTION
, 
gpio_£l
);

1366 
	`lgw_sx1302_ªg_w
(
SX1302_REG_GPIO_GPIO_SEL_4_SELECTION
, 
gpio_£l
);

1367 
	`lgw_sx1302_ªg_w
(
SX1302_REG_GPIO_GPIO_SEL_5_SELECTION
, 
gpio_£l
);

1368 
	`lgw_sx1302_ªg_w
(
SX1302_REG_GPIO_GPIO_SEL_6_SELECTION
, 
gpio_£l
);

1369 
	`lgw_sx1302_ªg_w
(
SX1302_REG_GPIO_GPIO_SEL_7_SELECTION
, 
gpio_£l
);

1370 
	`lgw_sx1302_ªg_w
(
SX1302_REG_GPIO_GPIO_DIR_L_DIRECTION
, 0xFF);

1373 
	`lgw_sx1302_ªg_w
(
SX1302_REG_ARB_MCU_CTRL_MCU_CLEAR
, 0x01);

1374 
	`lgw_sx1302_ªg_w
(
SX1302_REG_ARB_MCU_CTRL_HOST_PROG
, 0x01);

1375 
	`lgw_sx1302_ªg_w
(
SX1302_REG_COMMON_PAGE_PAGE
, 0x00);

1378 
	`lgw_mem_wb
(
ARB_MEM_ADDR
, &
fúmw¨e
[0], 
MCU_FW_SIZE
);

1381 
	`lgw_mem_rb
(
ARB_MEM_ADDR
, 
fw_check
, 
MCU_FW_SIZE
, 
Ál£
);

1382 i‡(
	`memcmp
(
fúmw¨e
, 
fw_check
,  fw_check) != 0) {

1383 
	`¥ötf
 ("ERROR: FailedÅoÜoad fw\n");

1388 
	`lgw_sx1302_ªg_w
(
SX1302_REG_ARB_MCU_CTRL_HOST_PROG
, 0x00);

1389 
	`lgw_sx1302_ªg_w
(
SX1302_REG_ARB_MCU_CTRL_MCU_CLEAR
, 0x00);

1391 
	`lgw_sx1302_ªg_r
(
SX1302_REG_ARB_MCU_CTRL_PARITY_ERROR
, &
vÆ
);

1392 
	`DEBUG_PRINTF
("ARB fwÜﬂded (∑rôyÉº‹:0x%02X)\n", 
vÆ
);

1395 
	}
}

1399 
	$sx1302_¨b_°©us
(
uöt8_t
* 
°©us
) {

1400 
öt32_t
 
vÆ
;

1402 i‡(
	`lgw_sx1302_ªg_r
(
SX1302_REG_ARB_MCU_MCU_ARB_STATUS_MCU_ARB_STATUS
, &
vÆ
Ë!
LGW_REG_SUCCESS
) {

1403 
	`¥ötf
("ERROR: FailedÅo get AGC status\n");

1404  
LGW_HAL_ERROR
;

1407 *
°©us
 = (
uöt8_t
)
vÆ
;

1409  
LGW_HAL_SUCCESS
;

1410 
	}
}

1414 
	$sx1302_¨b_waô_°©us
(
uöt8_t
 
°©us
) {

1415 
uöt8_t
 
vÆ
;

1418 i‡(
	`sx1302_¨b_°©us
(&
vÆ
Ë!
LGW_HAL_SUCCESS
) {

1419  
LGW_HAL_ERROR
;

1421 } 
vÆ
 !
°©us
);

1423  
LGW_HAL_SUCCESS
;

1424 
	}
}

1428 
	$sx1302_¨b_debug_ªad
(
uöt8_t
 
ªg_id
, uöt8_t* 
vÆue
) {

1429 
uöt16_t
 
ªg
;

1430 
öt32_t
 
vÆ
;

1433 i‡(
ªg_id
 > 15) {

1434 
	`¥ötf
("ERROR: invalid ARB debugÑegister ID\n");

1435  
LGW_HAL_ERROR
;

1438 
ªg
 = 
SX1302_REG_ARB_MCU_ARB_DEBUG_STS_0_ARB_DEBUG_STS_0
 + 
ªg_id
;

1439 i‡(
	`lgw_sx1302_ªg_r
(
ªg
, &
vÆ
Ë!
LGW_REG_SUCCESS
) {

1440 
	`¥ötf
("ERROR: failedÅoÑead ARB debugÑegister\n");

1441  
LGW_HAL_ERROR
;

1444 *
vÆue
 = (
uöt8_t
)
vÆ
;

1446  
LGW_HAL_SUCCESS
;

1447 
	}
}

1451 
	$sx1302_¨b_debug_wrôe
(
uöt8_t
 
ªg_id
, uöt8_à
vÆue
) {

1452 
uöt16_t
 
ªg
;

1455 i‡(
ªg_id
 > 3) {

1456 
	`¥ötf
("ERROR: invalid ARB debugÑegister ID\n");

1457  
LGW_HAL_ERROR
;

1460 
ªg
 = 
SX1302_REG_ARB_MCU_ARB_DEBUG_CFG_0_ARB_DEBUG_CFG_0
 + 
ªg_id
;

1461 i‡(
	`lgw_sx1302_ªg_w
(
ªg
, (
öt32_t
)
vÆue
Ë!
LGW_REG_SUCCESS
) {

1462 
	`¥ötf
("ERROR: failedÅo write ARB debugÑegister ID\n");

1463  
LGW_HAL_ERROR
;

1466  
LGW_HAL_SUCCESS
;

1467 
	}
}

1471 
	$sx1302_¨b_£t_debug_°©s
(
boﬁ
 
íabÀ
, 
uöt8_t
 
sf
) {

1472 i‡(
íabÀ
 =
åue
) {

1473 
	`DEBUG_PRINTF
("ARB: Debug sèt†íabÀd f‹ SF%u\n", 
sf
);

1474 
	`lgw_sx1302_ªg_w
(
SX1302_REG_ARB_MCU_ARB_DEBUG_CFG_0_ARB_DEBUG_CFG_0
, 
sf
);

1476 
	`DEBUG_MSG
("ARB: Debug stats disabled\n");

1478 
	}
}

1482 
uöt8_t
 
	$sx1302_¨b_gë_debug_°©s_dëe˘
(
uöt8_t
 
ch™√l
) {

1483 
öt32_t
 
dbg_vÆ
;

1485 i‡(
ch™√l
 >= 8) {

1486 
	`¥ötf
("ERROR: wrong configuration, channelÇum must be < 8");

1489 
	`lgw_sx1302_ªg_r
(
SX1302_REG_ARB_MCU_ARB_DEBUG_STS_0_ARB_DEBUG_STS_0
 + 
ch™√l
, &
dbg_vÆ
);

1491  (
uöt8_t
)
dbg_vÆ
;

1492 
	}
}

1496 
uöt8_t
 
	$sx1302_¨b_gë_debug_°©s_Æloc
(
uöt8_t
 
ch™√l
) {

1497 
öt32_t
 
dbg_vÆ
;

1499 i‡(
ch™√l
 >= 8) {

1500 
	`¥ötf
("ERROR: wrong configuration, channelÇum must be < 8");

1503 
	`lgw_sx1302_ªg_r
(
SX1302_REG_ARB_MCU_ARB_DEBUG_STS_8_ARB_DEBUG_STS_8
 + 
ch™√l
, &
dbg_vÆ
);

1505  (
uöt8_t
)
dbg_vÆ
;

1506 
	}
}

1510 
	$sx1302_¨b_¥öt_debug_°©s
() {

1511 
i
;

1512 
uöt8_t
 
nb_dëe˘
;

1513 
uöt8_t
 
nb_Æloc
;

1514 
nb_dëe˘_tŸÆ
 = 0;

1515 
nb_Æloc_tŸÆ
 = 0;

1518 
nb_dëe˘_tŸÆ
 = 0;

1519 
	`DEBUG_MSG
("ARB:Çb_detect: [");

1520 
i
 = 0; i < 8; i++) {

1521 
nb_dëe˘
 = 
	`sx1302_¨b_gë_debug_°©s_dëe˘
(
i
);

1522 
	`DEBUG_PRINTF
("%u ", 
nb_dëe˘
);

1523 
nb_dëe˘_tŸÆ
 +
nb_dëe˘
;

1525 
	`DEBUG_MSG
("]\n");

1528 
nb_Æloc_tŸÆ
 = 0;

1529 
	`DEBUG_MSG
("ARB:Çb_alloc: [");

1530 
i
 = 0; i < 8; i++) {

1531 
nb_Æloc
 = 
	`sx1302_¨b_gë_debug_°©s_Æloc
(
i
);

1532 
	`DEBUG_PRINTF
("%u ", 
nb_Æloc
);

1533 
nb_Æloc_tŸÆ
 +
nb_Æloc
;

1535 
	`DEBUG_MSG
("]\n");

1536 
	}
}

1540 
	$sx1302_¨b_°¨t
(
uöt8_t
 
vîsi⁄
) {

1541 
uöt8_t
 
vÆ
;

1544 
	`sx1302_¨b_waô_°©us
(0x01);

1547 
	`sx1302_¨b_debug_ªad
(0, &
vÆ
);

1548 i‡(
vÆ
 !
vîsi⁄
) {

1549 
	`¥ötf
("ERROR: wr⁄g ARB fw vîsi⁄ (%d)\n", 
vÆ
);

1550  
LGW_HAL_ERROR
;

1552 
	`DEBUG_PRINTF
("ARB FW VERSION: %d\n", 
vÆ
);

1555 
	`sx1302_¨b_£t_debug_°©s
(
åue
, 
DR_LORA_SF7
);

1558 
	`sx1302_¨b_debug_wrôe
(3, 0);

1561 
	`sx1302_¨b_debug_wrôe
(2, 3);

1564 
	`sx1302_¨b_debug_wrôe
(1, 1);

1567 
	`sx1302_¨b_waô_°©us
(0x00);

1569 
	`DEBUG_MSG
("ARB: started\n");

1571  
LGW_REG_SUCCESS
;

1572 
	}
}

1576 
	$sx1302_„tch
(
uöt8_t
 * 
nb_pkt
) {

1577 
îr
;

1580 i‡(
rx_buf„r
.
buf„r_pkt_nb
 == 0) {

1582 
îr
 = 
	`rx_buf„r_√w
(&
rx_buf„r
);

1583 i‡(
îr
 !
LGW_REG_SUCCESS
) {

1584 
	`¥ötf
("ERROR: FailedÅo initialize RX buffer\n");

1585  
LGW_REG_ERROR
;

1589 
îr
 = 
	`rx_buf„r_„tch
(&
rx_buf„r
);

1590 i‡(
îr
 !
LGW_REG_SUCCESS
) {

1591 
	`¥ötf
("ERROR: FailedÅo fetch RX buffer\n");

1592  
LGW_REG_ERROR
;

1595 
	`¥ötf
("NŸe:Ñemaöög %uÖackë†ö RX buf„r, dÿnŸ fëch sx1302 yë...\n", 
rx_buf„r
.
buf„r_pkt_nb
);

1599 *
nb_pkt
 = 
rx_buf„r
.
buf„r_pkt_nb
;

1601  
LGW_REG_SUCCESS
;

1602 
	}
}

1606 
	$sx1302_∑r£
(
lgw_c⁄ãxt_t
 * 
c⁄ãxt
, 
lgw_pkt_rx_s
 * 
p
) {

1607 
i
, 
îr
;

1608 
ifmod
;

1609 
uöt16_t
 
∑ylﬂd_¸c16_ˇlc
;

1610 
uöt8_t
 
¸
;

1611 
uöt32_t
 
time°amp_c‹ª˘i⁄
;

1612 
rx_∑ckë_t
 
pkt
;

1615 
	`CHECK_NULL
(
c⁄ãxt
);

1616 
	`CHECK_NULL
(
p
);

1619 
	`sx1302_¨b_¥öt_debug_°©s
();

1622 
îr
 = 
	`rx_buf„r_p›
(&
rx_buf„r
, &
pkt
);

1623 i‡(
îr
 !
LGW_REG_SUCCESS
) {

1624  
LGW_REG_ERROR
;

1628 
	`mem˝y
((*)
p
->
∑ylﬂd
, (*)(&(
pkt
.∑ylﬂd)),Ökt.
rxbyãnb_modem
);

1629 
p
->
size
 = 
pkt
.
rxbyãnb_modem
;

1632 
p
->
modem_id
 = 
pkt
.modem_id;

1633 
p
->
if_chaö
 = 
pkt
.
rx_ch™√l_ö
;

1634 i‡(
p
->
if_chaö
 >
LGW_IF_CHAIN_NB
) {

1635 
	`DEBUG_PRINTF
("WARNING: %u NOT A VALID IF_CHAIN NUMBER, ABORTING\n", 
p
->
if_chaö
);

1636  
LGW_REG_ERROR
;

1638 
ifmod
 = 
ifmod_c⁄fig
[
p
->
if_chaö
];

1639 
	`DEBUG_PRINTF
("[%d 0x%02X]\n", 
p
->
if_chaö
, 
ifmod
);

1641 
p
->
rf_chaö
 = (
uöt8_t
)
c⁄ãxt
->
if_chaö_cfg
[p->
if_chaö
].rf_chain;

1644 
p
->
‰eq_hz
 = (
uöt32_t
)((
öt32_t
)
c⁄ãxt
->
rf_chaö_cfg
[p->
rf_chaö
].‰eq_hz + c⁄ãxt->
if_chaö_cfg
[p->
if_chaö
].freq_hz);

1647 
p
->
rssic
 = ()(
pkt
.
rssi_ch™_avg
);

1648 
p
->
rssis
 = ()(
pkt
.
rssi_sig«l_avg
);

1651 i‡((
ifmod
 =
IF_LORA_MULTI
Ë|| (ifmod =
IF_LORA_STD
)) {

1652 
	`DEBUG_PRINTF
("NŸe: LoR®∑ckë (modem %u ch™ %u)\n", 
p
->
modem_id
,Ö->
if_chaö
);

1653 
p
->
moduœti⁄
 = 
MOD_LORA
;

1656 i‡(
pkt
.
¸c_í
 || (
c⁄ãxt
->
l‹a_£rvi˚_cfg
.
im∂icô_¸c_í
 =
åue
)) {

1658 i‡(
pkt
.
∑ylﬂd_¸c_îr‹
) {

1659 
p
->
°©us
 = 
STAT_CRC_BAD
;

1661 
p
->
°©us
 = 
STAT_CRC_OK
;

1664 i‡(
p
->
size
 > 0) {

1665 
∑ylﬂd_¸c16_ˇlc
 = 
	`sx1302_l‹a_∑ylﬂd_¸c
(
p
->
∑ylﬂd
,Ö->
size
);

1666 i‡(
∑ylﬂd_¸c16_ˇlc
 !
pkt
.
rx_¸c16_vÆue
) {

1667 
	`¥ötf
("ERROR: Paylﬂd CRC16 check faûed (gŸ:0x%04X cÆc:0x%04X)\n", 
pkt
.
rx_¸c16_vÆue
, 
∑ylﬂd_¸c16_ˇlc
);

1668 i‡(
log_fûe
 !
NULL
) {

1669 
	`Ârötf
(
log_fûe
, "ERROR: Paylﬂd CRC16 check faûed (gŸ:0x%04X cÆc:0x%04X)\n", 
pkt
.
rx_¸c16_vÆue
, 
∑ylﬂd_¸c16_ˇlc
);

1670 
	`dbg_log_buf„r_to_fûe
(
log_fûe
, 
rx_buf„r
.
buf„r
,Ñx_buf„r.
buf„r_size
);

1672  
LGW_REG_ERROR
;

1674 
	`DEBUG_PRINTF
("Paylﬂd CRC check OK (0x%04X)\n", 
pkt
.
rx_¸c16_vÆue
);

1680 
p
->
°©us
 = 
STAT_NO_CRC
;

1685 i‡(
p
->
°©us
 =
STAT_CRC_OK
 ||Ö->°©u†=
STAT_NO_CRC
) {

1691 
ªs
;

1692 
i
 = 0; i < 
c⁄ãxt
->
debug_cfg
.
nb_ªf_∑ylﬂd
; i++) {

1693 
ªs
 = 
	`dbg_check_∑ylﬂd
(&(
c⁄ãxt
->
debug_cfg
), 
log_fûe
, 
p
->
∑ylﬂd
,Ö->
size
, 
i
, 
pkt
.
rx_øã_sf
);

1694 i‡(
ªs
 == -1) {

1695 
	`¥ötf
("ERROR: 0x%08XÖaylﬂdÉº‹\n", 
c⁄ãxt
->
debug_cfg
.
ªf_∑ylﬂd
[
i
].
id
);

1696 i‡(
log_fûe
 !
NULL
) {

1697 
	`Ârötf
(
log_fûe
, "ERROR: 0x%08XÖaylﬂdÉº‹\n", 
c⁄ãxt
->
debug_cfg
.
ªf_∑ylﬂd
[
i
].
id
);

1698 
	`dbg_log_buf„r_to_fûe
(
log_fûe
, 
rx_buf„r
.
buf„r
,Ñx_buf„r.
buf„r_size
);

1699 
	`dbg_log_∑ylﬂd_diff_to_fûe
(
log_fûe
, 
p
->
∑ylﬂd
, 
c⁄ãxt
->
debug_cfg
.
ªf_∑ylﬂd
[
i
].∑ylﬂd,Ö->
size
);

1701  
LGW_REG_ERROR
;

1702 } i‡(
ªs
 == 1) {

1703 
	`DEBUG_PRINTF
("0x%08XÖaylﬂd m©ches\n", 
c⁄ãxt
->
debug_cfg
.
ªf_∑ylﬂd
[
i
].
id
);

1712 
p
->
¢r
 = ()(
pkt
.
¢r_avîage
) / 4;

1715 i‡(
ifmod
 =
IF_LORA_MULTI
) {

1716 
p
->
b™dwidth
 = 
BW_125KHZ
;

1718 
p
->
b™dwidth
 = 
c⁄ãxt
->
l‹a_£rvi˚_cfg
.bandwidth;

1722 
pkt
.
rx_øã_sf
) {

1723 5: 
p
->
d©¨©e
 = 
DR_LORA_SF5
; ;

1724 6: 
p
->
d©¨©e
 = 
DR_LORA_SF6
; ;

1725 7: 
p
->
d©¨©e
 = 
DR_LORA_SF7
; ;

1726 8: 
p
->
d©¨©e
 = 
DR_LORA_SF8
; ;

1727 9: 
p
->
d©¨©e
 = 
DR_LORA_SF9
; ;

1728 10: 
p
->
d©¨©e
 = 
DR_LORA_SF10
; ;

1729 11: 
p
->
d©¨©e
 = 
DR_LORA_SF11
; ;

1730 12: 
p
->
d©¨©e
 = 
DR_LORA_SF12
; ;

1731 : 
p
->
d©¨©e
 = 
DR_UNDEFINED
;

1735 i‡((
ifmod
 =
IF_LORA_MULTI
Ë|| (
c⁄ãxt
->
l‹a_£rvi˚_cfg
.
im∂icô_hdr
 =
Ál£
)) {

1736 
¸
 = 
pkt
.
codög_øã
;

1738 
¸
 = 
c⁄ãxt
->
l‹a_£rvi˚_cfg
.
im∂icô_codî©e
;

1740 
¸
) {

1741 1: 
p
->
codî©e
 = 
CR_LORA_4_5
; ;

1742 2: 
p
->
codî©e
 = 
CR_LORA_4_6
; ;

1743 3: 
p
->
codî©e
 = 
CR_LORA_4_7
; ;

1744 4: 
p
->
codî©e
 = 
CR_LORA_4_8
; ;

1745 : 
p
->
codî©e
 = 
CR_UNDEFINED
;

1749 
p
->
b™dwidth
) {

1750 
BW_125KHZ
:

1751 
p
->
‰eq_off£t
 = (
öt32_t
)(()(
pkt
.
‰equícy_off£t_îr‹
Ë* 
FREQ_OFFSET_LSB_125KHZ
 );

1753 
BW_250KHZ
:

1754 
p
->
‰eq_off£t
 = (
öt32_t
)(()(
pkt
.
‰equícy_off£t_îr‹
Ë* 
FREQ_OFFSET_LSB_250KHZ
 );

1756 
BW_500KHZ
:

1757 
p
->
‰eq_off£t
 = (
öt32_t
)(()(
pkt
.
‰equícy_off£t_îr‹
Ë* 
FREQ_OFFSET_LSB_500KHZ
 );

1760 
p
->
‰eq_off£t
 = 0;

1761 
	`¥ötf
("Invalid frequency offset\n");

1766 
time°amp_c‹ª˘i⁄
 = 
	`time°amp_cou¡î_c‹ª˘i⁄
(
ifmod
, 
p
->
b™dwidth
,Ö->
d©¨©e
,Ö->
codî©e
, 
pkt
.
¸c_í
,Ökt.
rxbyãnb_modem
);

1767 } i‡(
ifmod
 =
IF_FSK_STD
) {

1768 
	`DEBUG_PRINTF
("NŸe: FSKÖackë (modem %u ch™ %u)\n", 
pkt
.
modem_id
, 
p
->
if_chaö
);

1769 
p
->
moduœti⁄
 = 
MOD_FSK
;

1772 i‡(
pkt
.
¸c_í
) {

1774 i‡(
pkt
.
∑ylﬂd_¸c_îr‹
) {

1775 
	`¥ötf
("FSK: CRC ERR\n");

1776 
p
->
°©us
 = 
STAT_CRC_BAD
;

1778 
	`¥ötf
("FSK: CRC OK\n");

1779 
p
->
°©us
 = 
STAT_CRC_OK
;

1783 
p
->
°©us
 = 
STAT_NO_CRC
;

1787 
p
->
b™dwidth
 = 
c⁄ãxt
->
fsk_cfg
.bandwidth;

1788 
p
->
d©¨©e
 = 
c⁄ãxt
->
fsk_cfg
.datarate;

1791 
time°amp_c‹ª˘i⁄
 = ((
uöt32_t
)680000 / 
c⁄ãxt
->
fsk_cfg
.
d©¨©e
) - 20;

1794 
p
->
rssic
 = 
RSSI_FSK_POLY_0
 + 
RSSI_FSK_POLY_1
 *Ö->rssi¯+ 
RSSI_FSK_POLY_2
 * 
	`pow
(p->rssic, 2);

1797 
p
->
codî©e
 = 
CR_UNDEFINED
;

1798 
p
->
¢r
 = -128.0;

1799 
p
->
rssis
 = -128.0;

1801 
	`DEBUG_MSG
("ERROR: UNEXPECTED PACKET ORIGIN\n");

1802 
p
->
°©us
 = 
STAT_UNDEFINED
;

1803 
p
->
moduœti⁄
 = 
MOD_UNDEFINED
;

1804 
p
->
rssic
 = -128.0;

1805 
p
->
rssis
 = -128.0;

1806 
p
->
¢r
 = -128.0;

1807 
p
->
¢r_mö
 = -128.0;

1808 
p
->
¢r_max
 = -128.0;

1809 
p
->
b™dwidth
 = 
BW_UNDEFINED
;

1810 
p
->
d©¨©e
 = 
DR_UNDEFINED
;

1811 
p
->
codî©e
 = 
CR_UNDEFINED
;

1812 
time°amp_c‹ª˘i⁄
 = 0;

1816 
	`time°amp_cou¡î_gë
(&
cou¡î_us
, 
Ál£
);

1819 
p
->
cou¡_us
 = 
pkt
.
time°amp_˙t
 / 32;

1822 
p
->
cou¡_us
 = 
	`time°amp_pkt_ex∑nd
(&
cou¡î_us
,Ö->count_us);

1825 
p
->
cou¡_us
 =Ö->cou¡_u†- 
time°amp_c‹ª˘i⁄
;

1828 
p
->
¸c
 = 
pkt
.
rx_¸c16_vÆue
;

1830  
LGW_REG_SUCCESS
;

1831 
	}
}

1835 
uöt16_t
 
	$sx1302_l‹a_∑ylﬂd_¸c
(c⁄° 
uöt8_t
 * 
d©a
, uöt8_à
size
) {

1836 
i
;

1837 
¸c
 = 0;

1839 
i
 = 0; i < 
size
; i++) {

1840 
	`l‹a_¸c16
(
d©a
[
i
], &
¸c
);

1844  (
uöt16_t
)
¸c
;

1845 
	}
}

1849 
	$sx1302_tx_£t_°¨t_dñay
(
uöt8_t
 
rf_chaö
, 
lgw_ødio_ty≥_t
 
ødio_ty≥
, uöt8_à
moduœti⁄
, uöt8_à
b™dwidth
, 
uöt16_t
 * 
dñay
) {

1850 
uöt16_t
 
tx_°¨t_dñay
 = 
TX_START_DELAY_DEFAULT
 * 32;

1851 
uöt16_t
 
ødio_bw_dñay
 = 0;

1852 
uöt16_t
 
fûãr_dñay
 = 0;

1853 
uöt16_t
 
modem_dñay
 = 0;

1854 
öt32_t
 
bw_hz
 = 
	`lgw_bw_gëvÆ
(
b™dwidth
);

1855 
öt32_t
 
vÆ
;

1856 
uöt8_t
 
chúp_low_∑ss
 = 0;

1858 
	`CHECK_NULL
(
dñay
);

1861 
ødio_ty≥
) {

1862 
LGW_RADIO_TYPE_SX1250
:

1863 i‡(
b™dwidth
 =
BW_125KHZ
) {

1864 
ødio_bw_dñay
 = 19;

1865 } i‡(
b™dwidth
 =
BW_250KHZ
) {

1866 
ødio_bw_dñay
 = 24;

1867 } i‡(
b™dwidth
 =
BW_500KHZ
) {

1868 
ødio_bw_dñay
 = 21;

1870 
	`DEBUG_MSG
("ERROR: bandwidthÇot supported\n");

1871  
LGW_REG_ERROR
;

1874 
LGW_RADIO_TYPE_SX1255
:

1875 
LGW_RADIO_TYPE_SX1257
:

1876 
ødio_bw_dñay
 = 3*32 + 4;

1877 i‡(
b™dwidth
 =
BW_125KHZ
) {

1878 
ødio_bw_dñay
 += 0;

1879 } i‡(
b™dwidth
 =
BW_250KHZ
) {

1880 
ødio_bw_dñay
 += 6;

1881 } i‡(
b™dwidth
 =
BW_500KHZ
) {

1882 
ødio_bw_dñay
 += 0;

1884 
	`DEBUG_MSG
("ERROR: bandwidthÇot supported\n");

1885  
LGW_REG_ERROR
;

1889 
	`DEBUG_MSG
("ERROR:ÑadioÅypeÇot supported\n");

1890  
LGW_REG_ERROR
;

1894 i‡(
moduœti⁄
 =
MOD_LORA
) {

1895 
	`lgw_sx1302_ªg_r
(
	`SX1302_REG_TX_TOP_TX_CFG0_0_CHIRP_LOWPASS
(0), &
vÆ
);

1896 
chúp_low_∑ss
 = (
uöt8_t
)
vÆ
;

1897 
fûãr_dñay
 = ((1 << 
chúp_low_∑ss
Ë- 1Ë* 1e6 / 
bw_hz
;

1898 
modem_dñay
 = 8 * (32e6 / (32 * 
bw_hz
));

1901 
fûãr_dñay
 = 0;

1902 
modem_dñay
 = 0;

1906 
tx_°¨t_dñay
 -(
ødio_bw_dñay
 + 
fûãr_dñay
 + 
modem_dñay
);

1908 
	`DEBUG_PRINTF
("INFO:Åx_°¨t_dñay=%u (%u,Ñadio_bw_dñay=%u, fûãr_dñay=%u, modem_dñay=%u)\n", (
uöt16_t
)
tx_°¨t_dñay
, 
TX_START_DELAY_DEFAULT
*32, 
ødio_bw_dñay
, 
fûãr_dñay
, 
modem_dñay
);

1911 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_TX_START_DELAY_MSB_TX_START_DELAY
(
rf_chaö
), (
uöt8_t
)(
tx_°¨t_dñay
 >> 8));

1912 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_TX_START_DELAY_LSB_TX_START_DELAY
(
rf_chaö
), (
uöt8_t
)(
tx_°¨t_dñay
 >> 0));

1915 *
dñay
 = 
tx_°¨t_dñay
;

1917  
LGW_REG_SUCCESS
;

1918 
	}
}

1922 
	$sx1302_rssi_gë_ãm≥øtuª_off£t
(
lgw_rssi_tcomp_s
 * 
c⁄ãxt
, 
ãm≥øtuª
) {

1924 
	`CHECK_NULL
(
c⁄ãxt
);

1926 
	`DEBUG_MSG
 ("INFO: RSSIÅemperature compensation:\n");

1927 
	`DEBUG_PRINTF
(" c€ff_a: %.3f\n", 
c⁄ãxt
->
c€ff_a
);

1928 
	`DEBUG_PRINTF
(" c€ff_b: %.3f\n", 
c⁄ãxt
->
c€ff_b
);

1929 
	`DEBUG_PRINTF
(" c€ff_c: %.3f\n", 
c⁄ãxt
->
c€ff_c
);

1930 
	`DEBUG_PRINTF
(" c€ff_d: %.3f\n", 
c⁄ãxt
->
c€ff_d
);

1931 
	`DEBUG_PRINTF
(" c€ff_e: %.3f\n", 
c⁄ãxt
->
c€ff_e
);

1934  ((
c⁄ãxt
->
c€ff_a
 * 
	`pow
(
ãm≥øtuª
, 4)) +

1935 (
c⁄ãxt
->
c€ff_b
 * 
	`pow
(
ãm≥øtuª
, 3)) +

1936 (
c⁄ãxt
->
c€ff_c
 * 
	`pow
(
ãm≥øtuª
, 2)) +

1937 (
c⁄ãxt
->
c€ff_d
 * 
ãm≥øtuª
Ë+ c⁄ãxt->
c€ff_e
Ë/ 
	`pow
(2, 16);

1938 
	}
}

1942 
uöt8_t
 
	$sx1302_tx_°©us
(
uöt8_t
 
rf_chaö
) {

1943 
îr
;

1944 
öt32_t
 
ªad_vÆue
;

1946 
îr
 = 
	`lgw_sx1302_ªg_r
(
	`SX1302_REG_TX_TOP_TX_FSM_STATUS_TX_STATUS
(
rf_chaö
), &
ªad_vÆue
);

1947 i‡(
îr
 !
LGW_REG_SUCCESS
) {

1948 
	`¥ötf
("ERROR: FailedÅoÑead TX STATUS\n");

1949  
TX_STATUS_UNKNOWN
;

1952 i‡(
ªad_vÆue
 == 0x80) {

1953  
TX_FREE
;

1954 } i‡((
ªad_vÆue
 == 0x30) || (read_value == 0x50) || (read_value == 0x60) || (read_value == 0x70)) {

1955  
TX_EMITTING
;

1956 } i‡((
ªad_vÆue
 == 0x91) || (read_value == 0x92)) {

1957  
TX_SCHEDULED
;

1959 
	`¥ötf
("ERROR: UNKNOWN TX STATUS 0x%02X\n", 
ªad_vÆue
);

1960  
TX_STATUS_UNKNOWN
;

1962 
	}
}

1966 
uöt8_t
 
	$sx1302_rx_°©us
(
uöt8_t
 
rf_chaö
) {

1967 i‡(
rf_chaö
) {};

1969  
RX_STATUS_UNKNOWN
;

1970 
	}
}

1974 
	$sx1302_tx_ab‹t
(
uöt8_t
 
rf_chaö
) {

1975 
îr
;

1976 
uöt8_t
 
tx_°©us
;

1978 
îr
 = 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_TX_TRIG_TX_TRIG_IMMEDIATE
(
rf_chaö
), 0x00);

1979 
îr
 |
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_TX_TRIG_TX_TRIG_DELAYED
(
rf_chaö
), 0x00);

1980 
îr
 |
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_TX_TRIG_TX_TRIG_GPS
(
rf_chaö
), 0x00);

1981 i‡(
îr
 !
LGW_REG_SUCCESS
) {

1982 
	`¥ötf
("ERROR: FailedÅo stop TXÅrigger\n");

1983  
îr
;

1987 
	`waô_ms
(1);

1988 } (
tx_°©us
 = 
	`sx1302_tx_°©us
(
rf_chaö
)Ë!
TX_FREE
 &&Åx_°©u†!
TX_STATUS_UNKNOWN
);

1990  
LGW_REG_SUCCESS
;

1991 
	}
}

1995 
	$sx1302_tx_c⁄figuª
(
lgw_ødio_ty≥_t
 
ødio_ty≥
) {

1997 
ødio_ty≥
) {

1998 
LGW_RADIO_TYPE_SX1250
:

2000 
	`lgw_sx1302_ªg_w
(
SX1302_REG_TX_TOP_A_TX_RFFE_IF_CTRL2_PLL_DIV_CTRL_AGC
, 1);

2001 
	`lgw_sx1302_ªg_w
(
SX1302_REG_TX_TOP_B_TX_RFFE_IF_CTRL2_PLL_DIV_CTRL_AGC
, 1);

2004 
	`lgw_sx1302_ªg_w
(
SX1302_REG_TX_TOP_A_TX_RFFE_IF_CTRL_TX_IF_DST
, 0x01);

2005 
	`lgw_sx1302_ªg_w
(
SX1302_REG_TX_TOP_B_TX_RFFE_IF_CTRL_TX_IF_DST
, 0x01);

2007 
LGW_RADIO_TYPE_SX1257
:

2009 
	`lgw_sx1302_ªg_w
(
SX1302_REG_TX_TOP_A_TX_RFFE_IF_CTRL_TX_IF_DST
, 0x00);

2010 
	`lgw_sx1302_ªg_w
(
SX1302_REG_TX_TOP_B_TX_RFFE_IF_CTRL_TX_IF_DST
, 0x00);

2013 
	`DEBUG_MSG
("ERROR:ÑadioÅypeÇot supported\n");

2014  
LGW_REG_ERROR
;

2018 
	`lgw_sx1302_ªg_w
(
SX1302_REG_TX_TOP_A_TX_RFFE_IF_CTRL_TX_MODE
, 0x01);

2019 
	`lgw_sx1302_ªg_w
(
SX1302_REG_TX_TOP_B_TX_RFFE_IF_CTRL_TX_MODE
, 0x01);

2022 
	`lgw_sx1302_ªg_w
(
SX1302_REG_TX_TOP_A_TX_RFFE_IF_CTRL_TX_CLK_EDGE
, 0x00);

2023 
	`lgw_sx1302_ªg_w
(
SX1302_REG_TX_TOP_B_TX_RFFE_IF_CTRL_TX_CLK_EDGE
, 0x00);

2025  
LGW_REG_SUCCESS
;

2026 
	}
}

2030 
	$sx1302_£nd
(
lgw_ødio_ty≥_t
 
ødio_ty≥
, 
lgw_tx_gaö_lut_s
 * 
tx_lut
, 
boﬁ
 
lw™_public
, 
lgw_c⁄f_rxif_s
 * 
c⁄ãxt_fsk
, 
lgw_pkt_tx_s
 * 
pkt_d©a
) {

2031 
uöt32_t
 
‰eq_ªg
, 
fdev_ªg
;

2032 
uöt32_t
 
‰eq_dev
;

2033 
uöt32_t
 
fsk_br_ªg
;

2034 
uöt64_t
 
fsk_sync_w‹d_ªg
;

2035 
uöt16_t
 
mem_addr
;

2036 
uöt32_t
 
cou¡_us
;

2037 
uöt8_t
 
powî
;

2038 
uöt8_t
 
pow_ödex
;

2039 
uöt8_t
 
mod_bw
;

2040 
uöt8_t
 
∑_í
;

2041 
uöt16_t
 
tx_°¨t_dñay
;

2044 
	`CHECK_NULL
(
tx_lut
);

2045 
	`CHECK_NULL
(
pkt_d©a
);

2048 
pkt_d©a
->
moduœti⁄
) {

2049 
MOD_CW
:

2050 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_GEN_CFG_0_MODULATION_TYPE
(
pkt_d©a
->
rf_chaö
), 0x00);

2051 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_TX_RFFE_IF_CTRL_TX_IF_SRC
(
pkt_d©a
->
rf_chaö
), 0x00);

2053 
MOD_LORA
:

2054 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_GEN_CFG_0_MODULATION_TYPE
(
pkt_d©a
->
rf_chaö
), 0x00);

2055 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_TX_RFFE_IF_CTRL_TX_IF_SRC
(
pkt_d©a
->
rf_chaö
), 0x01);

2057 
MOD_FSK
:

2058 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_GEN_CFG_0_MODULATION_TYPE
(
pkt_d©a
->
rf_chaö
), 0x01);

2059 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_TX_RFFE_IF_CTRL_TX_IF_SRC
(
pkt_d©a
->
rf_chaö
), 0x02);

2062 
	`DEBUG_MSG
("ERROR: modulationÅypeÇot supported\n");

2063  
LGW_REG_ERROR
;

2067 
pow_ödex
 = 
tx_lut
->
size
-1;Öow_index > 0;Öow_index--) {

2068 i‡(
tx_lut
->
lut
[
pow_ödex
].
rf_powî
 <
pkt_d©a
->rf_power) {

2072 
	`DEBUG_PRINTF
("INFO: sñe˘ög TX Gaö LUT index %u\n", 
pow_ödex
);

2075 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_TX_RFFE_IF_I_OFFSET_I_OFFSET
(
pkt_d©a
->
rf_chaö
), 
tx_lut
->
lut
[
pow_ödex
].
off£t_i
);

2076 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_TX_RFFE_IF_Q_OFFSET_Q_OFFSET
(
pkt_d©a
->
rf_chaö
), 
tx_lut
->
lut
[
pow_ödex
].
off£t_q
);

2078 
	`DEBUG_PRINTF
("INFO: Aµlyög IQ off£à(i:%d, q:%d)\n", 
tx_lut
->
lut
[
pow_ödex
].
off£t_i
,Åx_lut->lut[pow_ödex].
off£t_q
);

2081 
ødio_ty≥
) {

2082 
LGW_RADIO_TYPE_SX1250
:

2083 
∑_í
 = (
tx_lut
->
lut
[
pow_ödex
].
∑_gaö
 > 0) ? 1 : 0;

2084 
powî
 = (
∑_í
 << 6Ë| 
tx_lut
->
lut
[
pow_ödex
].
pwr_idx
;

2086 
LGW_RADIO_TYPE_SX1257
:

2087 
powî
 = (
tx_lut
->
lut
[
pow_ödex
].
∑_gaö
 << 6Ë| (tx_lut->lut[pow_ödex].
dac_gaö
 << 4Ë|Åx_lut->lut[pow_ödex].
mix_gaö
;

2090 
	`DEBUG_MSG
("ERROR:ÑadioÅypeÇot supported\n");

2091  
LGW_HAL_ERROR
;

2093 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_AGC_TX_PWR_AGC_TX_PWR
(
pkt_d©a
->
rf_chaö
), 
powî
);

2096 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_TX_RFFE_IF_IQ_GAIN_IQ_GAIN
(
pkt_d©a
->
rf_chaö
), 
tx_lut
->
lut
[
pow_ödex
].
dig_gaö
);

2099 
‰eq_ªg
 = 
	`SX1302_FREQ_TO_REG
(
pkt_d©a
->
‰eq_hz
);

2100 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_TX_RFFE_IF_FREQ_RF_H_FREQ_RF
(
pkt_d©a
->
rf_chaö
), (
‰eq_ªg
 >> 16) & 0xFF);

2101 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_TX_RFFE_IF_FREQ_RF_M_FREQ_RF
(
pkt_d©a
->
rf_chaö
), (
‰eq_ªg
 >> 8) & 0xFF);

2102 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_TX_RFFE_IF_FREQ_RF_L_FREQ_RF
(
pkt_d©a
->
rf_chaö
), (
‰eq_ªg
 >> 0) & 0xFF);

2105 
pkt_d©a
->
moduœti⁄
) {

2106 
MOD_LORA
:

2107 
mod_bw
 = 
pkt_d©a
->
b™dwidth
;

2109 
MOD_CW
:

2110 
MOD_FSK
:

2111 
mod_bw
 = (0x01 << 7Ë| 
pkt_d©a
->
b™dwidth
;

2114 
	`¥ötf
("ERROR: ModulationÇot supported\n");

2115  
LGW_REG_ERROR
;

2117 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_AGC_TX_BW_AGC_TX_BW
(
pkt_d©a
->
rf_chaö
), 
mod_bw
);

2120 
pkt_d©a
->
moduœti⁄
) {

2121 
MOD_CW
:

2123 
‰eq_dev
 = 
	`˚û
(
	`Ábs
(()
pkt_d©a
->
‰eq_off£t
/10))*10e3;

2124 
	`¥ötf
("CW: f_dev %d Hz\n", ()(
‰eq_dev
));

2125 
fdev_ªg
 = 
	`SX1302_FREQ_TO_REG
(
‰eq_dev
);

2126 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_TX_RFFE_IF_FREQ_DEV_H_FREQ_DEV
(
pkt_d©a
->
rf_chaö
), (
fdev_ªg
 >> 8) & 0xFF);

2127 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_TX_RFFE_IF_FREQ_DEV_L_FREQ_DEV
(
pkt_d©a
->
rf_chaö
), (
fdev_ªg
 >> 0) & 0xFF);

2130 
fdev_ªg
 = 
	`SX1250_FREQ_TO_REG
(
‰eq_dev
);

2131 
	`lgw_sx1302_ªg_w
(
SX1302_REG_AGC_MCU_MCU_MAIL_BOX_WR_DATA_BYTE2_MCU_MAIL_BOX_WR_DATA
, (
fdev_ªg
 >> 16) & 0xFF);

2132 
	`lgw_sx1302_ªg_w
(
SX1302_REG_AGC_MCU_MCU_MAIL_BOX_WR_DATA_BYTE1_MCU_MAIL_BOX_WR_DATA
, (
fdev_ªg
 >> 8) & 0xFF);

2133 
	`lgw_sx1302_ªg_w
(
SX1302_REG_AGC_MCU_MCU_MAIL_BOX_WR_DATA_BYTE0_MCU_MAIL_BOX_WR_DATA
, (
fdev_ªg
 >> 0) & 0xFF);

2136 
	`¥ötf
("CW: IFÅe° mod fªq %d\n", ()((()
pkt_d©a
->
‰eq_off£t
*1e3*64/()
‰eq_dev
)));

2137 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_TX_RFFE_IF_TEST_MOD_FREQ
(
pkt_d©a
->
rf_chaö
), ()(((Ìkt_d©a->
‰eq_off£t
*1e3*64/()
‰eq_dev
)));

2139 
MOD_LORA
:

2141 
‰eq_dev
 = 
	`lgw_bw_gëvÆ
(
pkt_d©a
->
b™dwidth
) / 2;

2142 
fdev_ªg
 = 
	`SX1302_FREQ_TO_REG
(
‰eq_dev
);

2143 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_TX_RFFE_IF_FREQ_DEV_H_FREQ_DEV
(
pkt_d©a
->
rf_chaö
), (
fdev_ªg
 >> 8) & 0xFF);

2144 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_TX_RFFE_IF_FREQ_DEV_L_FREQ_DEV
(
pkt_d©a
->
rf_chaö
), (
fdev_ªg
 >> 0) & 0xFF);

2145 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_TXRX_CFG0_0_MODEM_BW
(
pkt_d©a
->
rf_chaö
),Ökt_d©a->
b™dwidth
);

2148 i‡(
pkt_d©a
->
¥ómbÀ
 == 0) {

2149 
pkt_d©a
->
¥ómbÀ
 = 
STD_LORA_PREAMBLE
;

2150 } i‡(
pkt_d©a
->
¥ómbÀ
 < 
MIN_LORA_PREAMBLE
) {

2151 
pkt_d©a
->
¥ómbÀ
 = 
MIN_LORA_PREAMBLE
;

2152 
	`DEBUG_MSG
("Note:ÖreambleÜengthádjustedÅoÑespect minimum LoRaÖreamble size\n");

2154 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_TXRX_CFG1_3_PREAMBLE_SYMB_NB
(
pkt_d©a
->
rf_chaö
), (pkt_d©a->
¥ómbÀ
 >> 8) & 0xFF);

2155 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_TXRX_CFG1_2_PREAMBLE_SYMB_NB
(
pkt_d©a
->
rf_chaö
), (pkt_d©a->
¥ómbÀ
 >> 0) & 0xFF);

2158 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_TXRX_CFG0_0_MODEM_SF
(
pkt_d©a
->
rf_chaö
),Ökt_d©a->
d©¨©e
);

2159 i‡(
pkt_d©a
->
d©¨©e
 < 10) {

2160 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_TX_CFG0_0_CHIRP_LOWPASS
(
pkt_d©a
->
rf_chaö
), 6);

2162 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_TX_CFG0_0_CHIRP_LOWPASS
(
pkt_d©a
->
rf_chaö
), 7);

2166 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_TXRX_CFG0_1_CODING_RATE
(
pkt_d©a
->
rf_chaö
),Ökt_d©a->
codî©e
);

2169 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_TXRX_CFG0_2_MODEM_EN
(
pkt_d©a
->
rf_chaö
), 1);

2170 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_TXRX_CFG0_2_CADRXTX
(
pkt_d©a
->
rf_chaö
), 2);

2171 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_TXRX_CFG1_1_MODEM_START
(
pkt_d©a
->
rf_chaö
), 1);

2172 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_TX_CFG0_0_CONTINUOUS
(
pkt_d©a
->
rf_chaö
), 0);

2175 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_TX_CFG0_0_CHIRP_INVERT
(
pkt_d©a
->
rf_chaö
), (pkt_d©a->
övît_pﬁ
) ? 1 : 0);

2176 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_TXRX_CFG0_2_IMPLICIT_HEADER
(
pkt_d©a
->
rf_chaö
), (pkt_d©a->
no_hódî
) ? 1 : 0);

2177 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_TXRX_CFG0_2_CRC_EN
(
pkt_d©a
->
rf_chaö
), (pkt_d©a->
no_¸c
) ? 0 : 1);

2180 i‡((
lw™_public
 =
Ál£
Ë|| (
pkt_d©a
->
d©¨©e
 =
DR_LORA_SF5
Ë|| (pkt_d©a->d©¨©ê=
DR_LORA_SF6
)) {

2181 
	`DEBUG_MSG
("Setting LoRa syncword 0x12\n");

2182 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_FRAME_SYNCH_0_PEAK1_POS
(
pkt_d©a
->
rf_chaö
), 2);

2183 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_FRAME_SYNCH_1_PEAK2_POS
(
pkt_d©a
->
rf_chaö
), 4);

2185 
	`DEBUG_MSG
("Setting LoRa syncword 0x34\n");

2186 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_FRAME_SYNCH_0_PEAK1_POS
(
pkt_d©a
->
rf_chaö
), 6);

2187 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_FRAME_SYNCH_1_PEAK2_POS
(
pkt_d©a
->
rf_chaö
), 8);

2191 i‡((
pkt_d©a
->
d©¨©e
 =
DR_LORA_SF5
Ë|| (pkt_d©a->d©¨©ê=
DR_LORA_SF6
)) {

2192 
	`DEBUG_MSG
("Enable Fine Sync\n");

2193 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_TXRX_CFG0_2_FINE_SYNCH_EN
(
pkt_d©a
->
rf_chaö
), 1);

2195 
	`DEBUG_MSG
("Disable Fine Sync\n");

2196 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_TXRX_CFG0_2_FINE_SYNCH_EN
(
pkt_d©a
->
rf_chaö
), 0);

2200 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_TXRX_CFG0_3_PAYLOAD_LENGTH
(
pkt_d©a
->
rf_chaö
),Ökt_d©a->
size
);

2203 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_TXRX_CFG0_1_PPM_OFFSET_HDR_CTRL
(
pkt_d©a
->
rf_chaö
), 0);

2204 i‡(
	`SET_PPM_ON
(
pkt_d©a
->
b™dwidth
,Ökt_d©a->
d©¨©e
)) {

2205 
	`DEBUG_MSG
("Low datarate optimization ENABLED\n");

2206 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_TXRX_CFG0_1_PPM_OFFSET
(
pkt_d©a
->
rf_chaö
), 1);

2208 
	`DEBUG_MSG
("Low datarate optimization DISABLED\n");

2209 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_TXRX_CFG0_1_PPM_OFFSET
(
pkt_d©a
->
rf_chaö
), 0);

2212 
MOD_FSK
:

2213 
	`CHECK_NULL
(
c⁄ãxt_fsk
);

2216 
‰eq_dev
 = 
pkt_d©a
->
f_dev
 * 1e3;

2217 
fdev_ªg
 = 
	`SX1302_FREQ_TO_REG
(
‰eq_dev
);

2218 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_TX_RFFE_IF_FREQ_DEV_H_FREQ_DEV
(
pkt_d©a
->
rf_chaö
), (
fdev_ªg
 >> 8) & 0xFF);

2219 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_TX_RFFE_IF_FREQ_DEV_L_FREQ_DEV
(
pkt_d©a
->
rf_chaö
), (
fdev_ªg
 >> 0) & 0xFF);

2222 
fdev_ªg
 = 
	`SX1250_FREQ_TO_REG
(
‰eq_dev
);

2223 
	`lgw_sx1302_ªg_w
(
SX1302_REG_AGC_MCU_MCU_MAIL_BOX_WR_DATA_BYTE2_MCU_MAIL_BOX_WR_DATA
, (
fdev_ªg
 >> 16) & 0xFF);

2224 
	`lgw_sx1302_ªg_w
(
SX1302_REG_AGC_MCU_MCU_MAIL_BOX_WR_DATA_BYTE1_MCU_MAIL_BOX_WR_DATA
, (
fdev_ªg
 >> 8) & 0xFF);

2225 
	`lgw_sx1302_ªg_w
(
SX1302_REG_AGC_MCU_MCU_MAIL_BOX_WR_DATA_BYTE0_MCU_MAIL_BOX_WR_DATA
, (
fdev_ªg
 >> 0) & 0xFF);

2228 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_FSK_CFG_0_PKT_MODE
(
pkt_d©a
->
rf_chaö
), 1);

2229 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_FSK_CFG_0_CRC_EN
(
pkt_d©a
->
rf_chaö
), (pkt_d©a->
no_¸c
) ? 0 : 1);

2230 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_FSK_CFG_0_CRC_IBM
(
pkt_d©a
->
rf_chaö
), 0);

2231 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_FSK_CFG_0_DCFREE_ENC
(
pkt_d©a
->
rf_chaö
), 2);

2232 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_FSK_MOD_FSK_GAUSSIAN_EN
(
pkt_d©a
->
rf_chaö
), 1);

2233 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_FSK_MOD_FSK_GAUSSIAN_SELECT_BT
(
pkt_d©a
->
rf_chaö
), 2);

2234 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_FSK_MOD_FSK_REF_PATTERN_EN
(
pkt_d©a
->
rf_chaö
), 1);

2235 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_FSK_MOD_FSK_REF_PATTERN_SIZE
(
pkt_d©a
->
rf_chaö
), 
c⁄ãxt_fsk
->
sync_w‹d_size
 - 1);

2238 
fsk_sync_w‹d_ªg
 = 
c⁄ãxt_fsk
->
sync_w‹d
 << (8 * (8 - c⁄ãxt_fsk->
sync_w‹d_size
));

2239 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_FSK_REF_PATTERN_BYTE0_FSK_REF_PATTERN
(
pkt_d©a
->
rf_chaö
), (
uöt8_t
)(
fsk_sync_w‹d_ªg
 >> 0));

2240 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_FSK_REF_PATTERN_BYTE1_FSK_REF_PATTERN
(
pkt_d©a
->
rf_chaö
), (
uöt8_t
)(
fsk_sync_w‹d_ªg
 >> 8));

2241 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_FSK_REF_PATTERN_BYTE2_FSK_REF_PATTERN
(
pkt_d©a
->
rf_chaö
), (
uöt8_t
)(
fsk_sync_w‹d_ªg
 >> 16));

2242 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_FSK_REF_PATTERN_BYTE3_FSK_REF_PATTERN
(
pkt_d©a
->
rf_chaö
), (
uöt8_t
)(
fsk_sync_w‹d_ªg
 >> 24));

2243 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_FSK_REF_PATTERN_BYTE4_FSK_REF_PATTERN
(
pkt_d©a
->
rf_chaö
), (
uöt8_t
)(
fsk_sync_w‹d_ªg
 >> 32));

2244 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_FSK_REF_PATTERN_BYTE5_FSK_REF_PATTERN
(
pkt_d©a
->
rf_chaö
), (
uöt8_t
)(
fsk_sync_w‹d_ªg
 >> 40));

2245 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_FSK_REF_PATTERN_BYTE6_FSK_REF_PATTERN
(
pkt_d©a
->
rf_chaö
), (
uöt8_t
)(
fsk_sync_w‹d_ªg
 >> 48));

2246 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_FSK_REF_PATTERN_BYTE7_FSK_REF_PATTERN
(
pkt_d©a
->
rf_chaö
), (
uöt8_t
)(
fsk_sync_w‹d_ªg
 >> 56));

2247 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_FSK_MOD_FSK_PREAMBLE_SEQ
(
pkt_d©a
->
rf_chaö
), 0);

2250 
fsk_br_ªg
 = 32000000 / 
pkt_d©a
->
d©¨©e
;

2251 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_FSK_BIT_RATE_MSB_BIT_RATE
(
pkt_d©a
->
rf_chaö
), 
fsk_br_ªg
 >> 8);

2252 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_FSK_BIT_RATE_LSB_BIT_RATE
(
pkt_d©a
->
rf_chaö
), 
fsk_br_ªg
 >> 0);

2255 i‡(
pkt_d©a
->
¥ómbÀ
 == 0) {

2256 
pkt_d©a
->
¥ómbÀ
 = 
STD_FSK_PREAMBLE
;

2257 } i‡(
pkt_d©a
->
¥ómbÀ
 < 
MIN_FSK_PREAMBLE
) {

2258 
pkt_d©a
->
¥ómbÀ
 = 
MIN_FSK_PREAMBLE
;

2259 
	`DEBUG_MSG
("Note:ÖreambleÜengthádjustedÅoÑespect minimum FSKÖreamble size\n");

2261 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_FSK_PREAMBLE_SIZE_MSB_PREAMBLE_SIZE
(
pkt_d©a
->
rf_chaö
), (pkt_d©a->
¥ómbÀ
 >> 8) & 0xFF);

2262 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_FSK_PREAMBLE_SIZE_LSB_PREAMBLE_SIZE
(
pkt_d©a
->
rf_chaö
), (pkt_d©a->
¥ómbÀ
 >> 0) & 0xFF);

2265 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_FSK_PKT_LEN_PKT_LENGTH
(
pkt_d©a
->
rf_chaö
),Ökt_d©a->
size
);

2268 
	`¥ötf
("ERROR: ModulationÇot supported\n");

2269  
LGW_REG_ERROR
;

2273 
	`sx1302_tx_£t_°¨t_dñay
(
pkt_d©a
->
rf_chaö
, 
ødio_ty≥
,Ökt_d©a->
moduœti⁄
,Ökt_d©a->
b™dwidth
, &
tx_°¨t_dñay
);

2276 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_TX_CTRL_WRITE_BUFFER
(
pkt_d©a
->
rf_chaö
), 0x01);

2277 
mem_addr
 = 
	`REG_SELECT
(
pkt_d©a
->
rf_chaö
, 0x5300, 0x5500);

2278 i‡(
pkt_d©a
->
moduœti⁄
 =
MOD_FSK
) {

2279 
	`lgw_mem_wb
(
mem_addr
, (
uöt8_t
 *)(&(
pkt_d©a
->
size
)), 1);

2280 
	`lgw_mem_wb
(
mem_addr
+1, &(
pkt_d©a
->
∑ylﬂd
[0]),Ökt_d©a->
size
);

2282 
	`lgw_mem_wb
(
mem_addr
, &(
pkt_d©a
->
∑ylﬂd
[0]),Ökt_d©a->
size
);

2284 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_TX_CTRL_WRITE_BUFFER
(
pkt_d©a
->
rf_chaö
), 0x00);

2287 
	`DEBUG_PRINTF
("Sèπ Tx: Fªq:%u %s%u size:%uÖªamb:%u\n", 
pkt_d©a
->
‰eq_hz
, (pkt_d©a->
moduœti⁄
 =
MOD_LORA
Ë? "SF" : "DR:",Ökt_d©a->
d©¨©e
,Ökt_d©a->
size
,Ökt_d©a->
¥ómbÀ
);

2288 
pkt_d©a
->
tx_mode
) {

2289 
IMMEDIATE
:

2290 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_TX_TRIG_TX_TRIG_IMMEDIATE
(
pkt_d©a
->
rf_chaö
), 0x00);

2291 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_TX_TRIG_TX_TRIG_IMMEDIATE
(
pkt_d©a
->
rf_chaö
), 0x01);

2293 
TIMESTAMPED
:

2294 
cou¡_us
 = 
pkt_d©a
->cou¡_u†* 32 - 
tx_°¨t_dñay
;

2295 
	`DEBUG_PRINTF
("-->ÖrogømmögÅrig dñayáà%u (%u)\n", 
pkt_d©a
->
cou¡_us
 - (
tx_°¨t_dñay
 / 32), count_us);

2297 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_TIMER_TRIG_BYTE0_TIMER_DELAYED_TRIG
(
pkt_d©a
->
rf_chaö
), (
uöt8_t
)((
cou¡_us
 >> 0) & 0x000000FF));

2298 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_TIMER_TRIG_BYTE1_TIMER_DELAYED_TRIG
(
pkt_d©a
->
rf_chaö
), (
uöt8_t
)((
cou¡_us
 >> 8) & 0x000000FF));

2299 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_TIMER_TRIG_BYTE2_TIMER_DELAYED_TRIG
(
pkt_d©a
->
rf_chaö
), (
uöt8_t
)((
cou¡_us
 >> 16) & 0x000000FF));

2300 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_TIMER_TRIG_BYTE3_TIMER_DELAYED_TRIG
(
pkt_d©a
->
rf_chaö
), (
uöt8_t
)((
cou¡_us
 >> 24) & 0x000000FF));

2302 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_TX_TRIG_TX_TRIG_DELAYED
(
pkt_d©a
->
rf_chaö
), 0x00);

2303 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_TX_TRIG_TX_TRIG_DELAYED
(
pkt_d©a
->
rf_chaö
), 0x01);

2305 
ON_GPS
:

2306 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_TX_TRIG_TX_TRIG_GPS
(
pkt_d©a
->
rf_chaö
), 0x00);

2307 
	`lgw_sx1302_ªg_w
(
	`SX1302_REG_TX_TOP_TX_TRIG_TX_TRIG_GPS
(
pkt_d©a
->
rf_chaö
), 0x01);

2310 
	`¥ötf
("ERROR: TX modeÇot supported\n");

2311  
LGW_REG_ERROR
;

2314  
LGW_REG_SUCCESS
;

2315 
	}
}

	@hal/sx1302hal/loragw_sx1302.h

15 #i‚de‡
_LORAGW_SX1302_H


16 
	#_LORAGW_SX1302_H


	)

21 
	~<°döt.h
>

23 
	~"c⁄fig.h
"

25 
	~"l‹agw_hÆ_sx1302.h
"

31 
	#SX1302_AGC_RADIO_GAIN_AUTO
 0xFF

	)

35 
	#IF_UNDEFINED
 0

	)

36 
	#IF_LORA_STD
 0x10

	)

37 
	#IF_LORA_MULTI
 0x11

	)

38 
	#IF_FSK_STD
 0x20

	)

43 
	#REG_SELECT
(
rf_chaö
, 
a
, 
b
Ë(‘f_chaö =0Ë?á : b)

	)

45 
	#SET_PPM_ON
(
bw
,
dr
Ë(((bw =
BW_125KHZ
Ë&& ((d∏=
DR_LORA_SF11
Ë|| (d∏=
DR_LORA_SF12
))Ë|| ((bw =
BW_250KHZ
Ë&& (d∏=DR_LORA_SF12)))

	)

55 
boﬁ
 
	mif_íabÀ
;

56 
boﬁ
 
	mif_rf_chaö
;

57 
öt32_t
 
	mif_‰eq
;

58 } 
	tsx1302_if_cfg_t
;

65 
uöt8_t
 
	ml‹a_rx_bw
;

66 
uöt8_t
 
	ml‹a_rx_sf
;

67 
boﬁ
 
	ml‹a_rx_im∂icô_hdr
;

68 
uöt8_t
 
	ml‹a_rx_im∂icô_Àngth
;

69 
boﬁ
 
	ml‹a_rx_im∂icô_¸c_í
;

70 
uöt8_t
 
	ml‹a_rx_im∂icô_codî©e
;

71 } 
	tsx1302_l‹a_£rvi˚_cfg_t
;

78 
uöt8_t
 
	mfsk_rx_bw
;

79 
uöt32_t
 
	mfsk_rx_dr
;

80 
uöt8_t
 
	mfsk_sync_w‹d_size
;

81 
uöt64_t
 
	mfsk_sync_w‹d
;

82 } 
	tsx1302_fsk_cfg_t
;

92 
sx1302_öô
(
lgw_c⁄f_time°amp_s
 *
c⁄f
);

99 
sx1302_gë_eui
(
uöt64_t
 * 
eui
);

107 
sx1302_upd©e
();

114 
sx1302_ødio_˛ock_£À˘
(
uöt8_t
 
rf_chaö
);

122 
sx1302_ødio_ª£t
(
uöt8_t
 
rf_chaö
, 
lgw_ødio_ty≥_t
 
ty≥
);

130 
sx1302_ødio_£t_mode
(
uöt8_t
 
rf_chaö
, 
lgw_ødio_ty≥_t
 
ty≥
);

137 
sx1302_ødio_ho°_˘æ
(
boﬁ
 
ho°_˘æ
);

146 
sx1302_ødio_ˇlibøã
(
lgw_c⁄f_rxrf_s
 * 
c⁄ãxt_rf_chaö
, 
uöt8_t
 
˛k§c
, 
lgw_tx_gaö_lut_s
 * 
txgaö_lut
);

153 
sx1302_∑_ a_lut_c⁄figuª
();

160 
sx1302_ødio_„_c⁄figuª
();

167 
uöt8_t
 
sx1302_gë_ifmod_c⁄fig
(uöt8_à
if_chaö
);

175 
sx1302_ch™√lizî_c⁄figuª
(
lgw_c⁄f_rxif_s
 * 
if_cfg
, 
boﬁ
 
fix_gaö
);

182 
sx1302_l‹a_c‹ªœt‹_c⁄figuª
();

189 
sx1302_l‹a_£rvi˚_c‹ªœt‹_c⁄figuª
(
lgw_c⁄f_rxif_s
 * 
cfg
);

197 
sx1302_l‹a_syncw‹d
(
boﬁ
 
public
, 
uöt8_t
 
l‹a_£rvi˚_sf
);

204 
sx1302_l‹a_modem_c⁄figuª
(
uöt32_t
 
ødio_‰eq_hz
);

212 
sx1302_l‹a_£rvi˚_modem_c⁄figuª
(
lgw_c⁄f_rxif_s
 * 
cfg
, 
uöt32_t
 
ødio_‰eq_hz
);

219 
sx1302_fsk_c⁄figuª
(
lgw_c⁄f_rxif_s
 * 
cfg
);

226 
sx1302_modem_íabÀ
();

233 
sx1302_gps_íabÀ
(
boﬁ
 
íabÀ
);

240 
uöt32_t
 
sx1302_time°amp_cou¡î
(
boﬁ
 
µs
);

247 
sx1302_agc_lﬂd_fúmw¨e
(c⁄° 
uöt8_t
 *
fúmw¨e
);

254 
sx1302_agc_°©us
(
uöt8_t
* 
°©us
);

261 
sx1302_agc_waô_°©us
(
uöt8_t
 
°©us
);

268 
sx1302_agc_maûbox_ªad
(
uöt8_t
 
maûbox
, uöt8_t* 
vÆue
);

275 
sx1302_agc_maûbox_wrôe
(
uöt8_t
 
maûbox
, uöt8_à
vÆue
);

282 
sx1302_agc_°¨t
(
uöt8_t
 
vîsi⁄
, 
lgw_ødio_ty≥_t
 
ødio_ty≥
, uöt8_à
™a_gaö
, uöt8_à
dec_gaö
, uöt8_à
fdd_mode
);

289 
sx1302_¨b_lﬂd_fúmw¨e
(c⁄° 
uöt8_t
 *
fúmw¨e
);

296 
sx1302_¨b_°©us
(
uöt8_t
* 
°©us
);

303 
sx1302_¨b_waô_°©us
(
uöt8_t
 
°©us
);

310 
sx1302_¨b_debug_ªad
(
uöt8_t
 
ªg_id
, uöt8_t* 
vÆue
);

317 
sx1302_¨b_debug_wrôe
(
uöt8_t
 
ªg_id
, uöt8_à
vÆue
);

324 
sx1302_¨b_°¨t
(
uöt8_t
 
vîsi⁄
);

331 
uöt8_t
 
sx1302_¨b_gë_debug_°©s_dëe˘
(uöt8_à
ch™√l
);

338 
uöt8_t
 
sx1302_¨b_gë_debug_°©s_Æloc
(uöt8_à
ch™√l
);

345 
sx1302_¨b_¥öt_debug_°©s
();

352 
uöt16_t
 
sx1302_l‹a_∑ylﬂd_¸c
(c⁄° 
uöt8_t
 * 
d©a
, uöt8_à
size
);

360 
sx1302_„tch
(
uöt8_t
 * 
nb_pkt
);

368 
sx1302_∑r£
(
lgw_c⁄ãxt_t
 * 
c⁄ãxt
, 
lgw_pkt_rx_s
 * 
p
);

379 
sx1302_tx_£t_°¨t_dñay
(
uöt8_t
 
rf_chaö
, 
lgw_ødio_ty≥_t
 
ødio_ty≥
, uöt8_à
moduœti⁄
, uöt8_à
b™dwidth
, 
uöt16_t
 * 
dñay
);

387 
sx1302_rssi_gë_ãm≥øtuª_off£t
(
lgw_rssi_tcomp_s
 * 
c⁄ãxt
, 
ãm≥øtuª
);

394 
uöt8_t
 
sx1302_tx_°©us
(uöt8_à
rf_chaö
);

402 
uöt8_t
 
sx1302_rx_°©us
(uöt8_à
rf_chaö
);

409 
sx1302_tx_ab‹t
(
uöt8_t
 
rf_chaö
);

416 
sx1302_tx_c⁄figuª
(
lgw_ødio_ty≥_t
 
ødio_ty≥
);

423 
sx1302_£nd
(
lgw_ødio_ty≥_t
 
ødio_ty≥
, 
lgw_tx_gaö_lut_s
 * 
tx_lut
, 
boﬁ
 
lw™_public
, 
lgw_c⁄f_rxif_s
 * 
c⁄ãxt_fsk
, 
lgw_pkt_tx_s
 * 
pkt_d©a
);

	@hal/sx1302hal/loragw_sx1302_rx.c

19 
	~<°döt.h
>

20 
	~<°dio.h
>

21 
	~<°rög.h
>

22 
	~<as£π.h
>

24 
	~"l‹agw_aux.h
"

25 
	~"l‹agw_ªg.h
"

26 
	~"l‹agw_ªg_sx1302.h
"

27 
	~"l‹agw_sx1302_rx.h
"

28 
	~"l‹agw_sx1302_time°amp.h
"

33 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

34 #i‡
DEBUG_SX1302
 == 1

35 
	#DEBUG_MSG
(
°r
Ë
	`Ârötf
(
°dîr
, så)

	)

36 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...Ë
	`Ârötf
(
°dîr
, fmt,árgs)

	)

37 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){
	`Ârötf
(
°dîr
,"%s:%d: ERROR: NULL POINTER AS ARGUMENT\n", 
__FUNCTION__
, 
__LINE__
); 
LGW_REG_ERROR
;}

	)

39 
	#DEBUG_MSG
(
°r
)

	)

40 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...)

	)

41 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){ 
LGW_REG_ERROR
;}

	)

44 
	#SX1302_PKT_PAYLOAD_LENGTH
(
buf„r
, 
°¨t_ödex
Ë
	`TAKE_N_BITS_FROM
(buf„r[°¨t_ödex + 2], 0, 8)

	)

45 
	#SX1302_PKT_CHANNEL
(
buf„r
, 
°¨t_ödex
Ë
	`TAKE_N_BITS_FROM
(buf„r[°¨t_ödex + 3], 0, 8)

	)

46 
	#SX1302_PKT_CRC_EN
(
buf„r
, 
°¨t_ödex
Ë
	`TAKE_N_BITS_FROM
(buf„r[°¨t_ödex + 4], 0, 1)

	)

47 
	#SX1302_PKT_CODING_RATE
(
buf„r
, 
°¨t_ödex
Ë
	`TAKE_N_BITS_FROM
(buf„r[°¨t_ödex + 4], 1, 3)

	)

48 
	#SX1302_PKT_DATARATE
(
buf„r
, 
°¨t_ödex
Ë
	`TAKE_N_BITS_FROM
(buf„r[°¨t_ödex + 4], 4, 4)

	)

49 
	#SX1302_PKT_MODEM_ID
(
buf„r
, 
°¨t_ödex
Ë
	`TAKE_N_BITS_FROM
(buf„r[°¨t_ödex + 5], 0, 8)

	)

50 
	#SX1302_PKT_FREQ_OFFSET_7_0
(
buf„r
, 
°¨t_ödex
Ë
	`TAKE_N_BITS_FROM
(buf„r[°¨t_ödex + 6], 0, 8)

	)

51 
	#SX1302_PKT_FREQ_OFFSET_15_8
(
buf„r
, 
°¨t_ödex
Ë
	`TAKE_N_BITS_FROM
(buf„r[°¨t_ödex + 7], 0, 8)

	)

52 
	#SX1302_PKT_FREQ_OFFSET_19_16
(
buf„r
, 
°¨t_ödex
Ë
	`TAKE_N_BITS_FROM
(buf„r[°¨t_ödex + 8], 0, 4)

	)

53 
	#SX1302_PKT_CRC_ERROR
(
buf„r
, 
°¨t_ödex
Ë
	`TAKE_N_BITS_FROM
(buf„r[°¨t_ödex + 9], 0, 1)

	)

54 
	#SX1302_PKT_SYNC_ERROR
(
buf„r
, 
°¨t_ödex
Ë
	`TAKE_N_BITS_FROM
(buf„r[°¨t_ödex + 9], 2, 1)

	)

55 
	#SX1302_PKT_HEADER_ERROR
(
buf„r
, 
°¨t_ödex
Ë
	`TAKE_N_BITS_FROM
(buf„r[°¨t_ödex + 9], 3, 1)

	)

56 
	#SX1302_PKT_TIMING_SET
(
buf„r
, 
°¨t_ödex
Ë
	`TAKE_N_BITS_FROM
(buf„r[°¨t_ödex + 9], 4, 1)

	)

57 
	#SX1302_PKT_SNR_AVG
(
buf„r
, 
°¨t_ödex
Ë
	`TAKE_N_BITS_FROM
(buf„r[°¨t_ödex + 10], 0, 8)

	)

58 
	#SX1302_PKT_RSSI_CHAN
(
buf„r
, 
°¨t_ödex
Ë
	`TAKE_N_BITS_FROM
(buf„r[°¨t_ödex + 11], 0, 8)

	)

59 
	#SX1302_PKT_RSSI_SIG
(
buf„r
, 
°¨t_ödex
Ë
	`TAKE_N_BITS_FROM
(buf„r[°¨t_ödex + 12], 0, 8)

	)

60 
	#SX1302_PKT_RSSI_CHAN_MAX_NEG_DELTA
(
buf„r
, 
°¨t_ödex
Ë
	`TAKE_N_BITS_FROM
(buf„r[°¨t_ödex + 13], 0, 4)

	)

61 
	#SX1302_PKT_RSSI_CHAN_MAX_POS_DELTA
(
buf„r
, 
°¨t_ödex
Ë
	`TAKE_N_BITS_FROM
(buf„r[°¨t_ödex + 13], 4, 4)

	)

62 
	#SX1302_PKT_RSSI_SIG_MAX_NEG_DELTA
(
buf„r
, 
°¨t_ödex
Ë
	`TAKE_N_BITS_FROM
(buf„r[°¨t_ödex + 14], 0, 4)

	)

63 
	#SX1302_PKT_RSSI_SIG_MAX_POS_DELTA
(
buf„r
, 
°¨t_ödex
Ë
	`TAKE_N_BITS_FROM
(buf„r[°¨t_ödex + 14], 4, 4)

	)

64 
	#SX1302_PKT_TIMESTAMP_7_0
(
buf„r
, 
°¨t_ödex
Ë
	`TAKE_N_BITS_FROM
(buf„r[°¨t_ödex + 15], 0, 8)

	)

65 
	#SX1302_PKT_TIMESTAMP_15_8
(
buf„r
, 
°¨t_ödex
Ë
	`TAKE_N_BITS_FROM
(buf„r[°¨t_ödex + 16], 0, 8)

	)

66 
	#SX1302_PKT_TIMESTAMP_23_16
(
buf„r
, 
°¨t_ödex
Ë
	`TAKE_N_BITS_FROM
(buf„r[°¨t_ödex + 17], 0, 8)

	)

67 
	#SX1302_PKT_TIMESTAMP_31_24
(
buf„r
, 
°¨t_ödex
Ë
	`TAKE_N_BITS_FROM
(buf„r[°¨t_ödex + 18], 0, 8)

	)

68 
	#SX1302_PKT_CRC_PAYLOAD_7_0
(
buf„r
, 
°¨t_ödex
Ë
	`TAKE_N_BITS_FROM
(buf„r[°¨t_ödex + 19], 0, 8)

	)

69 
	#SX1302_PKT_CRC_PAYLOAD_15_8
(
buf„r
, 
°¨t_ödex
Ë
	`TAKE_N_BITS_FROM
(buf„r[°¨t_ödex + 20], 0, 8)

	)

70 
	#SX1302_PKT_NUM_TS_METRICS
(
buf„r
, 
°¨t_ödex
Ë
	`TAKE_N_BITS_FROM
(buf„r[°¨t_ödex + 21], 0, 8)

	)

79 
	#SX1302_PKT_SYNCWORD_BYTE_0
 0xA5

	)

80 
	#SX1302_PKT_SYNCWORD_BYTE_1
 0xC0

	)

81 
	#SX1302_PKT_HEAD_METADATA
 9

	)

82 
	#SX1302_PKT_TAIL_METADATA
 14

	)

85 
	#SX1302_LORA_MODEM_ID_MAX
 15

	)

86 
	#SX1302_LORA_STD_MODEM_ID
 16

	)

87 
	#SX1302_FSK_MODEM_ID
 17

	)

104 
	$rx_buf„r_√w
(
rx_buf„r_t
 * 
£lf
) {

106 
	`CHECK_NULL
(
£lf
);

109 
	`mem£t
(
£lf
->
buf„r
, 0,  self->buffer);

110 
£lf
->
buf„r_size
 = 0;

111 
£lf
->
buf„r_ödex
 = 0;

112 
£lf
->
buf„r_pkt_nb
 = 0;

114  
LGW_REG_SUCCESS
;

115 
	}
}

119 
	$rx_buf„r_dñ
(
rx_buf„r_t
 * 
£lf
) {

121 
	`CHECK_NULL
(
£lf
);

124 
£lf
->
buf„r_size
 = 0;

125 
£lf
->
buf„r_ödex
 = 0;

126 
£lf
->
buf„r_pkt_nb
 = 0;

128  
LGW_REG_SUCCESS
;

129 
	}
}

133 
	$rx_buf„r_„tch
(
rx_buf„r_t
 * 
£lf
) {

134 
i
, 
ªs
;

135 
uöt8_t
 
buff
[2];

136 
öt32_t
 
msb
;

139 
	`CHECK_NULL
(
£lf
);

142 
	`lgw_sx1302_ªg_rb
(
SX1302_REG_RX_TOP_RX_BUFFER_NB_BYTES_MSB_RX_BUFFER_NB_BYTES
, 
buff
,  buff);

147 
	`lgw_sx1302_ªg_r
(
SX1302_REG_RX_TOP_RX_BUFFER_NB_BYTES_MSB_RX_BUFFER_NB_BYTES
, &
msb
);

148 i‡(
buff
[0] !(
uöt8_t
)
msb
) {

149 
	`lgw_sx1302_ªg_rb
(
SX1302_REG_RX_TOP_RX_BUFFER_NB_BYTES_MSB_RX_BUFFER_NB_BYTES
, 
buff
,  buff);

152 
£lf
->
buf„r_size
 = (
buff
[0] << 8) | (buff[1] << 0);

155 i‡(
£lf
->
buf„r_size
 > 0) {

156 
	`DEBUG_MSG
 ("-----------------\n");

157 
	`DEBUG_PRINTF
("%s:Çb_byã†tÿbê„tched: %u (%u %u)\n", 
__FUNCTION__
, 
£lf
->
buf„r_size
, 
buff
[1], buff[0]);

159 
	`mem£t
(
£lf
->
buf„r
, 0,  self->buffer);

160 
ªs
 = 
	`lgw_mem_rb
(0x4000, 
£lf
->
buf„r
, sñf->
buf„r_size
, 
åue
);

161 i‡(
ªs
 !
LGW_REG_SUCCESS
) {

162 
	`¥ötf
("ERROR: FailedÅoÑead RX buffer, SPIÉrror\n");

163  
LGW_REG_ERROR
;

167 
	`DEBUG_MSG
("RX_BUFFER: ");

168 
i
 = 0; i < 
£lf
->
buf„r_size
; i++) {

169 
	`DEBUG_PRINTF
("%02X ", 
£lf
->
buf„r
[
i
]);

171 
	`DEBUG_MSG
("\n");

176 
uöt8_t
 
∑ylﬂd_Àn
;

177 
uöt16_t
 
√xt_pkt_idx
;

178 
idx
 = 0;

179 
idx
 < 
£lf
->
buf„r_size
) {

180 i‡((
£lf
->
buf„r
[
idx
] !
SX1302_PKT_SYNCWORD_BYTE_0
Ë|| (£lf->buf„r[idx + 1] !
SX1302_PKT_SYNCWORD_BYTE_1
)) {

181 
	`¥ötf
("ERROR: syncwordÇot found inÑx_buffer\n");

182  
LGW_REG_ERROR
;

185 
£lf
->
buf„r_pkt_nb
 += 1;

188 
∑ylﬂd_Àn
 = 
	`SX1302_PKT_PAYLOAD_LENGTH
(
£lf
->
buf„r
, 
idx
);

189 
√xt_pkt_idx
 = 
SX1302_PKT_HEAD_METADATA
 +

190 
∑ylﬂd_Àn
 +

191 
SX1302_PKT_TAIL_METADATA
 +

192 (2 * 
	`SX1302_PKT_NUM_TS_METRICS
(
£lf
->
buf„r
, 
idx
 + 
∑ylﬂd_Àn
));

195 
idx
 +()
√xt_pkt_idx
;

199 
£lf
->
buf„r_ödex
 = 0;

201  
LGW_REG_SUCCESS
;

202 
	}
}

206 
	$rx_buf„r_p›
(
rx_buf„r_t
 * 
£lf
, 
rx_∑ckë_t
 * 
pkt
) {

207 
i
;

208 
uöt8_t
 
checksum_rcv
, 
checksum_ˇlc
 = 0;

209 
uöt16_t
 
checksum_idx
;

210 
uöt16_t
 
pkt_num_byãs
;

213 
	`CHECK_NULL
(
£lf
);

214 
	`CHECK_NULL
(
pkt
);

217 i‡(
£lf
->
buf„r_ödex
 >£lf->
buf„r_size
) {

218 
	`DEBUG_MSG
("INFO: No more dataÅo beÖarsed\n");

219  
LGW_REG_ERROR
;

223 i‡((
£lf
->
buf„r
[£lf->
buf„r_ödex
] !
SX1302_PKT_SYNCWORD_BYTE_0
Ë|| (£lf->buf„r[£lf->buf„r_ödex + 1] !
SX1302_PKT_SYNCWORD_BYTE_1
)) {

224 
	`¥ötf
("INFO: searching syncword...\n");

225 
£lf
->
buf„r_ödex
 += 1;

226  
LGW_REG_ERROR
;

229 
	`DEBUG_PRINTF
("INFO:Ökàsyncw‹d foundáàödex %u\n", 
£lf
->
buf„r_ödex
);

232 
pkt
->
rxbyãnb_modem
 = 
	`SX1302_PKT_PAYLOAD_LENGTH
(
£lf
->
buf„r
, sñf->
buf„r_ödex
);

235 
pkt
->
num_ts_mërics_°‹ed
 = 
	`SX1302_PKT_NUM_TS_METRICS
(
£lf
->
buf„r
, sñf->
buf„r_ödex
 +Ökt->
rxbyãnb_modem
);

238 
pkt_num_byãs
 = 
SX1302_PKT_HEAD_METADATA
 + 
pkt
->
rxbyãnb_modem
 + 
SX1302_PKT_TAIL_METADATA
 + (2 *Ökt->
num_ts_mërics_°‹ed
);

241 if((
£lf
->
buf„r_ödex
 + 
pkt_num_byãs
Ë> sñf->
buf„r_size
) {

242 
	`¥ötf
("WARNING:áb‹tögÅrunˇãd mesßgê(size=%u)\n", 
£lf
->
buf„r_size
);

243  
LGW_REG_ERROR
;

247 
checksum_idx
 = 
pkt_num_byãs
 - 1;

248 
checksum_rcv
 = 
£lf
->
buf„r
[£lf->
buf„r_ödex
 + 
pkt_num_byãs
 - 1];

251 
i
 = 0; i < ()
checksum_idx
; i++) {

252 
checksum_ˇlc
 +
£lf
->
buf„r
[£lf->
buf„r_ödex
 + 
i
];

256 i‡(
checksum_rcv
 !
checksum_ˇlc
) {

257 
	`¥ötf
("WARNING: checksum faûed (gŸ:0x%02X cÆc:0x%02X)\n", 
checksum_rcv
, 
checksum_ˇlc
);

258  
LGW_REG_ERROR
;

260 
	`DEBUG_PRINTF
("Packë checksum OK (0x%02X)\n", 
checksum_rcv
);

264 
pkt
->
modem_id
 = 
	`SX1302_PKT_MODEM_ID
(
£lf
->
buf„r
, sñf->
buf„r_ödex
);

265 
pkt
->
rx_ch™√l_ö
 = 
	`SX1302_PKT_CHANNEL
(
£lf
->
buf„r
, sñf->
buf„r_ödex
);

266 
pkt
->
¸c_í
 = 
	`SX1302_PKT_CRC_EN
(
£lf
->
buf„r
, sñf->
buf„r_ödex
);

267 
pkt
->
∑ylﬂd_¸c_îr‹
 = 
	`SX1302_PKT_CRC_ERROR
(
£lf
->
buf„r
, sñf->
buf„r_ödex
 +Ökt->
rxbyãnb_modem
);

268 
pkt
->
sync_îr‹
 = 
	`SX1302_PKT_SYNC_ERROR
(
£lf
->
buf„r
, sñf->
buf„r_ödex
 +Ökt->
rxbyãnb_modem
);

269 
pkt
->
hódî_îr‹
 = 
	`SX1302_PKT_HEADER_ERROR
(
£lf
->
buf„r
, sñf->
buf„r_ödex
 +Ökt->
rxbyãnb_modem
);

270 
pkt
->
timög_£t
 = 
	`SX1302_PKT_TIMING_SET
(
£lf
->
buf„r
, sñf->
buf„r_ödex
 +Ökt->
rxbyãnb_modem
);

271 
pkt
->
codög_øã
 = 
	`SX1302_PKT_CODING_RATE
(
£lf
->
buf„r
, sñf->
buf„r_ödex
);

272 
pkt
->
rx_øã_sf
 = 
	`SX1302_PKT_DATARATE
(
£lf
->
buf„r
, sñf->
buf„r_ödex
);

273 
pkt
->
rssi_ch™_avg
 = 
	`SX1302_PKT_RSSI_CHAN
(
£lf
->
buf„r
, sñf->
buf„r_ödex
 +Ökt->
rxbyãnb_modem
);

274 
pkt
->
rssi_sig«l_avg
 = 
	`SX1302_PKT_RSSI_SIG
(
£lf
->
buf„r
, sñf->
buf„r_ödex
 +Ökt->
rxbyãnb_modem
);

275 
pkt
->
rx_¸c16_vÆue
 = (
uöt16_t
)((
	`SX1302_PKT_CRC_PAYLOAD_7_0
(
£lf
->
buf„r
, sñf->
buf„r_ödex
 +Ökt->
rxbyãnb_modem
) << 0) & 0x00FF);

276 
pkt
->
rx_¸c16_vÆue
 |(
uöt16_t
)((
	`SX1302_PKT_CRC_PAYLOAD_15_8
(
£lf
->
buf„r
, sñf->
buf„r_ödex
 +Ökt->
rxbyãnb_modem
) << 8) & 0xFF00);

277 
pkt
->
¢r_avîage
 = (
öt8_t
)
	`SX1302_PKT_SNR_AVG
(
£lf
->
buf„r
, sñf->
buf„r_ödex
 +Ökt->
rxbyãnb_modem
);

279 
pkt
->
‰equícy_off£t_îr‹
 = (
öt32_t
)((
	`SX1302_PKT_FREQ_OFFSET_19_16
(
£lf
->
buf„r
, sñf->
buf„r_ödex
Ë<< 16Ë| (
	`SX1302_PKT_FREQ_OFFSET_15_8
(£lf->buf„r, sñf->buf„r_ödexË<< 8Ë| (
	`SX1302_PKT_FREQ_OFFSET_7_0
(self->buffer, self->buffer_index) << 0));

280 i‡(
pkt
->
‰equícy_off£t_îr‹
 >= (1<<19)) {

281 
pkt
->
‰equícy_off£t_îr‹
 = (pkt->frequency_offset_error - (1<<20));

285 
pkt
->
time°amp_˙t
 = (
uöt32_t
)((
	`SX1302_PKT_TIMESTAMP_7_0
(
£lf
->
buf„r
, sñf->
buf„r_ödex
 +Ökt->
rxbyãnb_modem
) << 0) & 0x000000FF);

286 
pkt
->
time°amp_˙t
 |(
uöt32_t
)((
	`SX1302_PKT_TIMESTAMP_15_8
(
£lf
->
buf„r
, sñf->
buf„r_ödex
 +Ökt->
rxbyãnb_modem
) << 8) & 0x0000FF00);

287 
pkt
->
time°amp_˙t
 |(
uöt32_t
)((
	`SX1302_PKT_TIMESTAMP_23_16
(
£lf
->
buf„r
, sñf->
buf„r_ödex
 +Ökt->
rxbyãnb_modem
) << 16) & 0x00FF0000);

288 
pkt
->
time°amp_˙t
 |(
uöt32_t
)((
	`SX1302_PKT_TIMESTAMP_31_24
(
£lf
->
buf„r
, sñf->
buf„r_ödex
 +Ökt->
rxbyãnb_modem
) << 24) & 0xFF000000);

290 
	`DEBUG_MSG
 ("-----------------\n");

291 
	`DEBUG_PRINTF
(" modem: %u\n", 
pkt
->
modem_id
);

292 
	`DEBUG_PRINTF
(" ch™: %u\n", 
pkt
->
rx_ch™√l_ö
);

293 
	`DEBUG_PRINTF
(" size: %u\n", 
pkt
->
rxbyãnb_modem
);

294 
	`DEBUG_PRINTF
(" crc_í: %u\n", 
pkt
->
¸c_í
);

295 
	`DEBUG_PRINTF
(" crc_îr: %u\n", 
pkt
->
∑ylﬂd_¸c_îr‹
);

296 
	`DEBUG_PRINTF
(" sync_îr: %u\n", 
pkt
->
sync_îr‹
);

297 
	`DEBUG_PRINTF
(" hdr_îr: %u\n", 
pkt
->
hódî_îr‹
);

298 
	`DEBUG_PRINTF
("Åimög_£t: %u\n", 
pkt
->
timög_£t
);

299 
	`DEBUG_PRINTF
(" codr: %u\n", 
pkt
->
codög_øã
);

300 
	`DEBUG_PRINTF
(" d©r: %u\n", 
pkt
->
rx_øã_sf
);

301 
	`DEBUG_PRINTF
("Çum_ts: %u\n", 
pkt
->
num_ts_mërics_°‹ed
);

302 
	`DEBUG_MSG
 ("-----------------\n");

305 i‡(
pkt
->
modem_id
 > 
SX1302_FSK_MODEM_ID
) {

306 
	`¥ötf
("ERROR: modem_id i†ouào‡øngê- %u\n", 
pkt
->
modem_id
);

307  
LGW_REG_ERROR
;

309 i‡(
pkt
->
modem_id
 <
SX1302_LORA_STD_MODEM_ID
) {

310 i‡(
pkt
->
rx_ch™√l_ö
 > 9) {

311 
	`¥ötf
("ERROR: ch™√»i†ouào‡øngê- %u\n", 
pkt
->
rx_ch™√l_ö
);

312  
LGW_REG_ERROR
;

314 i‡((
pkt
->
rx_øã_sf
 < 5) || (pkt->rx_rate_sf > 12)) {

315 
	`¥ötf
("ERROR: SF i†ouào‡øngê- %u\n", 
pkt
->
rx_øã_sf
);

316  
LGW_REG_ERROR
;

324 
	`mem˝y
((*)
pkt
->
∑ylﬂd
, (*)(&(
£lf
->
buf„r
[£lf->
buf„r_ödex
 + 
SX1302_PKT_HEAD_METADATA
])),Ökt->
rxbyãnb_modem
);

327 
£lf
->
buf„r_ödex
 +(
SX1302_PKT_HEAD_METADATA
 + 
pkt
->
rxbyãnb_modem
 + 
SX1302_PKT_TAIL_METADATA
 + (2 *Ökt->
num_ts_mërics_°‹ed
));

330 
£lf
->
buf„r_pkt_nb
 -= 1;

332  
LGW_REG_SUCCESS
;

333 
	}
}

338 
uöt16_t
 
	$rx_buf„r_ªad_±r_addr
() {

339 
öt32_t
 
vÆ
;

340 
uöt16_t
 
addr
;

342 
	`lgw_sx1302_ªg_r
(
SX1302_REG_RX_TOP_RX_BUFFER_LAST_ADDR_READ_MSB_LAST_ADDR_READ
, &
vÆ
);

343 
addr
 = (
uöt16_t
)(
vÆ
 << 8);

344 
	`lgw_sx1302_ªg_r
(
SX1302_REG_RX_TOP_RX_BUFFER_LAST_ADDR_READ_LSB_LAST_ADDR_READ
, &
vÆ
);

345 
addr
 |(
uöt16_t
)
vÆ
;

347  
addr
;

348 
	}
}

352 
uöt16_t
 
	$rx_buf„r_wrôe_±r_addr
() {

353 
öt32_t
 
vÆ
;

354 
uöt16_t
 
addr
;

356 
	`lgw_sx1302_ªg_r
(
SX1302_REG_RX_TOP_RX_BUFFER_LAST_ADDR_WRITE_MSB_LAST_ADDR_WRITE
, &
vÆ
);

357 
addr
 = (
uöt16_t
)(
vÆ
 << 8);

358 
	`lgw_sx1302_ªg_r
(
SX1302_REG_RX_TOP_RX_BUFFER_LAST_ADDR_WRITE_LSB_LAST_ADDR_WRITE
, &
vÆ
);

359 
addr
 |(
uöt16_t
)
vÆ
;

361  
addr
;

362 
	}
}

366 
	$rx_buf„r_dump
(
FILE
 * 
fûe
, 
uöt16_t
 
°¨t_addr
, uöt16_à
íd_addr
) {

367 
i
;

368 
uöt8_t
 
rx_buf„r_debug
[4096];

370 
	`¥ötf
("Dumpög %u byãs, from 0x%XÅÿ0x%X\n", 
íd_addr
 - 
°¨t_addr
 + 1, start_addr,Énd_addr);

372 
	`mem£t
(
rx_buf„r_debug
, 0, Ñx_buffer_debug);

374 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_RX_BUFFER_DIRECT_RAM_IF
, 1);

375 
	`lgw_mem_rb
(0x4000 + 
°¨t_addr
, 
rx_buf„r_debug
, 
íd_addr
 - sèπ_add∏+ 1, 
Ál£
);

376 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_RX_BUFFER_DIRECT_RAM_IF
, 0);

378 
i
 = 0; i < (
íd_addr
 - 
°¨t_addr
 + 1); i++) {

379 i‡(
fûe
 =
NULL
) {

380 
	`¥ötf
("%02X ", 
rx_buf„r_debug
[
i
]);

382 
	`Ârötf
(
fûe
, "%02X ", 
rx_buf„r_debug
[
i
]);

385 i‡(
fûe
 =
NULL
) {

386 
	`¥ötf
("\n");

388 
	`Ârötf
(
fûe
, "\n");

392 
	`as£π
(0);

393 
	}
}

	@hal/sx1302hal/loragw_sx1302_rx.h

16 #i‚de‡
_LORAGW_SX1302_RX_H


17 
	#_LORAGW_SX1302_RX_H


	)

22 
	~<°döt.h
>

24 
	~"c⁄fig.h
"

39 
	srx_∑ckë_s
 {

40 
uöt8_t
 
	mrxbyãnb_modem
;

41 
uöt8_t
 
	mrx_ch™√l_ö
;

42 
boﬁ
 
	m¸c_í
;

43 
uöt8_t
 
	mcodög_øã
;

44 
uöt8_t
 
	mrx_øã_sf
;

45 
uöt8_t
 
	mmodem_id
;

46 
öt32_t
 
	m‰equícy_off£t_îr‹
;

47 
uöt8_t
 
	m∑ylﬂd
[255];

48 
boﬁ
 
	m∑ylﬂd_¸c_îr‹
;

49 
boﬁ
 
	msync_îr‹
;

50 
boﬁ
 
	mhódî_îr‹
;

51 
boﬁ
 
	mtimög_£t
;

52 
öt8_t
 
	m¢r_avîage
;

53 
uöt8_t
 
	mrssi_ch™_avg
;

54 
uöt8_t
 
	mrssi_sig«l_avg
;

55 
uöt8_t
 
	mrssi_ch™_max_√g_dñè
;

56 
uöt8_t
 
	mrssi_ch™_max_pos_dñè
;

57 
uöt8_t
 
	mrssi_sig_max_√g_dñè
;

58 
uöt8_t
 
	mrssi_sig_max_pos_dñè
;

59 
uöt32_t
 
	mtime°amp_˙t
;

60 
uöt16_t
 
	mrx_¸c16_vÆue
;

61 
uöt8_t
 
	mnum_ts_mërics_°‹ed
;

62 
uöt8_t
 
	mtime°amp_avg
[255];

63 
uöt8_t
 
	mtime°amp_°ddev
[255];

64 
uöt8_t
 
	m∑ckë_checksum
;

65 } 
	trx_∑ckë_t
;

71 
	srx_buf„r_s
 {

72 
uöt8_t
 
	mbuf„r
[4096];

73 
uöt16_t
 
	mbuf„r_size
;

74 
	mbuf„r_ödex
;

75 
uöt8_t
 
	mbuf„r_pkt_nb
;

76 } 
	trx_buf„r_t
;

86 
rx_buf„r_√w
(
rx_buf„r_t
 * 
£lf
);

93 
rx_buf„r_dñ
(
rx_buf„r_t
 * 
£lf
);

100 
rx_buf„r_„tch
(
rx_buf„r_t
 * 
£lf
);

108 
rx_buf„r_p›
(
rx_buf„r_t
 * 
£lf
, 
rx_∑ckë_t
 * 
pkt
);

118 
uöt16_t
 
rx_buf„r_ªad_±r_addr
();

125 
uöt16_t
 
rx_buf„r_wrôe_±r_addr
();

132 
rx_buf„r_dump
(
FILE
 * 
fûe
, 
uöt16_t
 
°¨t_addr
, uöt16_à
íd_addr
);

	@hal/sx1302hal/loragw_sx1302_timestamp.c

24 
	~<°döt.h
>

25 
	~<°dio.h
>

26 
	~<mem‹y.h
>

28 
	~"l‹agw_sx1302_time°amp.h
"

29 
	~"l‹agw_ªg.h
"

30 
	~"l‹agw_ªg_sx1302.h
"

31 
	~"l‹agw_hÆ.h
"

32 
	~"l‹agw_sx1302.h
"

37 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

38 #i‡
DEBUG_SX1302
 == 1

39 
	#DEBUG_MSG
(
°r
Ë
	`Ârötf
(
°dîr
, så)

	)

40 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...Ë
	`Ârötf
(
°dîr
, fmt,árgs)

	)

41 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){
	`Ârötf
(
°dîr
,"%s:%d: ERROR: NULL POINTER AS ARGUMENT\n", 
__FUNCTION__
, 
__LINE__
); 
LGW_REG_ERROR
;}

	)

43 
	#DEBUG_MSG
(
°r
)

	)

44 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...)

	)

45 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){ 
LGW_REG_ERROR
;}

	)

69 
	$time°amp_cou¡î_√w
(
time°amp_cou¡î_t
 * 
£lf
) {

70 
	`mem£t
(
£lf
, 0, (*self));

71 
	}
}

75 
	$time°amp_cou¡î_dñëe
(
time°amp_cou¡î_t
 * 
£lf
) {

76 
	`mem£t
(
£lf
, 0, (*self));

77 
	}
}

81 
	$time°amp_cou¡î_upd©e
(
time°amp_cou¡î_t
 * 
£lf
, 
boﬁ
 
µs
, 
uöt32_t
 
˙t
) {

82 
time°amp_öfo_s
* 
töfo
 = (
µs
 =
åue
Ë? &
£lf
->µ†: &£lf->
ö°
;

85 i‡(
˙t
 < 
töfo
->
cou¡î_us_27bôs_ªf
) {

86 
töfo
->
cou¡î_us_27bôs_wøp
 += 1;

87 
töfo
->
cou¡î_us_27bôs_wøp
 %= 32;

91 
töfo
->
cou¡î_us_27bôs_ªf
 = 
˙t
;

92 
	}
}

96 
uöt32_t
 
	$time°amp_cou¡î_gë
(
time°amp_cou¡î_t
 * 
£lf
, 
boﬁ
 
µs
) {

97 
x
;

98 
uöt8_t
 
buff
[4];

99 
uöt32_t
 
cou¡î_us_øw_27bôs_now
;

100 
öt32_t
 
msb
;

103 
x
 = 
	`lgw_sx1302_ªg_rb
((
µs
 =
åue
Ë? 
SX1302_REG_TIMESTAMP_TIMESTAMP_PPS_MSB2_TIMESTAMP_PPS
 :

104 
SX1302_REG_TIMESTAMP_TIMESTAMP_MSB2_TIMESTAMP
,

105 &
buff
[0], 4);

106 i‡(
x
 !
LGW_REG_SUCCESS
) {

107 
	`¥ötf
("ERROR: FailedÅo getÅimestamp counter value\n");

115 
x
 = 
	`lgw_sx1302_ªg_r
((
µs
 =
åue
Ë? 
SX1302_REG_TIMESTAMP_TIMESTAMP_PPS_MSB2_TIMESTAMP_PPS
 :

116 
SX1302_REG_TIMESTAMP_TIMESTAMP_MSB2_TIMESTAMP
,

117 &
msb
);

118 i‡(
x
 !
LGW_REG_SUCCESS
) {

119 
	`¥ötf
("ERROR: FailedÅo getÅimestamp counter MSB value\n");

122 i‡(
buff
[0] !(
uöt8_t
)
msb
) {

123 
x
 = 
	`lgw_sx1302_ªg_rb
((
µs
 =
åue
Ë? 
SX1302_REG_TIMESTAMP_TIMESTAMP_PPS_MSB2_TIMESTAMP_PPS
 :

124 
SX1302_REG_TIMESTAMP_TIMESTAMP_MSB2_TIMESTAMP
,

125 &
buff
[0], 4);

126 i‡(
x
 !
LGW_REG_SUCCESS
) {

127 
	`¥ötf
("ERROR: FailedÅo getÅimestamp counter value\n");

132 
cou¡î_us_øw_27bôs_now
 = (
buff
[0]<<24) | (buff[1]<<16) | (buff[2]<<8) | buff[3];

135 
cou¡î_us_øw_27bôs_now
 /= 32;

138 
	`time°amp_cou¡î_upd©e
(
£lf
, 
µs
, 
cou¡î_us_øw_27bôs_now
);

141  
	`time°amp_cou¡î_ex∑nd
(
£lf
, 
µs
, 
cou¡î_us_øw_27bôs_now
);

142 
	}
}

146 
uöt32_t
 
	$time°amp_cou¡î_ex∑nd
(
time°amp_cou¡î_t
 * 
£lf
, 
boﬁ
 
µs
, 
uöt32_t
 
˙t_us
) {

147 
time°amp_öfo_s
* 
töfo
 = (
µs
 =
åue
Ë? &
£lf
->µ†: &£lf->
ö°
;

148 
uöt32_t
 
cou¡î_us_32bôs
;

150 
cou¡î_us_32bôs
 = (
töfo
->
cou¡î_us_27bôs_wøp
 << 27Ë| 
˙t_us
;

158 
	`¥ötf
("%u,%u,%u\n", 
˙t_us
, 
cou¡î_us_32bôs
, 
töfo
->
cou¡î_us_27bôs_wøp
);

161  
cou¡î_us_32bôs
;

162 
	}
}

167 
uöt32_t
 
	$time°amp_pkt_ex∑nd
(
time°amp_cou¡î_t
 * 
£lf
, 
uöt32_t
 
pkt_˙t_us
) {

168 
time°amp_öfo_s
* 
töfo
 = &
£lf
->
ö°
;

169 
uöt32_t
 
cou¡î_us_32bôs
;

170 
uöt8_t
 
wøp_°©us
;

184 
wøp_°©us
 = 
töfo
->
cou¡î_us_27bôs_wøp
 - (—öfo->
cou¡î_us_27bôs_ªf
 >
pkt_˙t_us
) ? 0 : 1);

185 
wøp_°©us
 &= 0x1F;

188 
cou¡î_us_32bôs
 = (
wøp_°©us
 << 27Ë| 
pkt_˙t_us
;

190  
cou¡î_us_32bôs
;

191 
	}
}

195 
	$time°amp_cou¡î_mode
(
boﬁ
 
íabÀ_¥ecisi⁄_ts
, 
uöt8_t
 
max_ts_mërics
, uöt8_à
nb_symbﬁs
) {

196 i‡(
íabÀ_¥ecisi⁄_ts
 =
Ál£
) {

197 
	`DEBUG_MSG
("INFO: usingÜegacyÅimestamp\n");

199 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_RX_BUFFER_LEGACY_TIMESTAMP
, 0x01);

201 
	`DEBUG_PRINTF
("INFO: usögÖªcisi⁄Åime°am∞(max_ts_mërics:%uÇb_symbﬁs:%u)\n", 
max_ts_mërics
, 
nb_symbﬁs
);

203 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_RX_BUFFER_LEGACY_TIMESTAMP
, 0x00);

204 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_RX_BUFFER_TIMESTAMP_CFG_MAX_TS_METRICS
, 
max_ts_mërics
);

207 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_TIMESTAMP_ENABLE
, 0x01);

208 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_TIMESTAMP_NB_SYMB
, 
nb_symbﬁs
);

211 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TIMESTAMP_ENABLE
, 0x01);

212 
	`lgw_sx1302_ªg_w
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TIMESTAMP_NB_SYMB
, 
nb_symbﬁs
);

215  
LGW_REG_SUCCESS
;

216 
	}
}

220 
uöt32_t
 
	$time°amp_cou¡î_c‹ª˘i⁄
(
ifmod
, 
uöt8_t
 
b™dwidth
, uöt8_à
d©¨©e
, uöt8_à
codî©e
, 
uöt32_t
 
¸c_í
, 
uöt16_t
 
∑ylﬂd_Àngth
) {

221 
öt32_t
 
vÆ
;

222 
uöt32_t
 
sf
 = (uöt32_t)
d©¨©e
, 
¸
 = (uöt32_t)
codî©e
, 
bw_pow
;

223 
uöt32_t
 
˛k_≥riod
;

224 
uöt32_t
 
nb_nibbÀ
, 
nb_nibbÀ_ö_hdr
, 
nb_nibbÀ_ö_œ°_block
;

225 
uöt32_t
 
d·_≥ak_í
, 
nb_ôî
;

226 
uöt32_t
 
dem≠_dñay
, 
decode_dñay
, 
f·_dñay_°©e3
, 
f·_dñay
, 
dñay_x
;

227 
uöt32_t
 
time°amp_c‹ª˘i⁄
;

228 
uöt32_t
 
µm
 = 
	`SET_PPM_ON
(
b™dwidth
, 
d©¨©e
) ? 1 : 0;

230 
b™dwidth
)

232 
BW_125KHZ
:

233 
bw_pow
 = 1;

235 
BW_250KHZ
:

236 
bw_pow
 = 2;

238 
BW_500KHZ
:

239 
bw_pow
 = 4;

242 
	`DEBUG_PRINTF
("ERROR: UNEXPECTED VALUE %d IN SWITCH STATEMENT\n", 
b™dwidth
);

245 
˛k_≥riod
 = 250000 / 
bw_pow
;

246 
dñay_x
 = 16000000 / 
bw_pow
 + 2031250;

248 
nb_nibbÀ
 = (
∑ylﬂd_Àngth
 + 2 * 
¸c_í
) * 2 + 5;

250 i‡((
sf
 == 5) || (sf == 6)) {

251 
nb_nibbÀ_ö_hdr
 = 
sf
;

253 
nb_nibbÀ_ö_hdr
 = 
sf
 - 2;

256 
nb_nibbÀ_ö_œ°_block
 = 
nb_nibbÀ
 - 
nb_nibbÀ_ö_hdr
 - (
sf
 - 2 * 
µm
) * ((nb_nibble -Çb_nibble_in_hdr) / (sf - 2 *Öpm));

257 i‡(
nb_nibbÀ_ö_œ°_block
 == 0) {

258 
nb_nibbÀ_ö_œ°_block
 = 
sf
 - 2 * 
µm
;

261 
nb_ôî
 = ((
sf
 + 1) >> 1);

264 i‡(
ifmod
 =
IF_LORA_STD
) {

265 
	`lgw_sx1302_ªg_r
(
SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_CFG0_DFT_PEAK_EN
, &
vÆ
);

267 
	`lgw_sx1302_ªg_r
(
SX1302_REG_RX_TOP_RX_CFG0_DFT_PEAK_EN
, &
vÆ
);

269 i‡(
vÆ
 != 0) {

271 
d·_≥ak_í
 = 1;

273 
d·_≥ak_í
 = 0;

277 i‡((
sf
 >5Ë&& (s‡<12Ë&& (
bw_pow
 > 0)) {

278 i‡((2 * (
∑ylﬂd_Àngth
 + 2 * 
¸c_í
Ë- (
sf
 - 7)) <= 0) {

279 i‡(
sf
 > 6) {

280 
nb_nibbÀ_ö_œ°_block
 = 
sf
 - 2;

282 
nb_nibbÀ_ö_œ°_block
 = 
sf
;

284 
d·_≥ak_í
 = 0;

285 
¸
 = 4;

286 
dem≠_dñay
 = 
˛k_≥riod
 + (1 << 
sf
) * clk_period * 3 / 4 + 3 * clk_period + (sf - 2) * clk_period;

288 
dem≠_dñay
 = 
˛k_≥riod
 + (1 << 
sf
Ë* clk_≥riod * (1 - 
µm
 / 4) + 3 * clk_period + (sf - 2 *Öpm) * clk_period;

291 
f·_dñay_°©e3
 = 
˛k_≥riod
 * (((1 << 
sf
Ë- 6Ë+ 2 * ((1 << sfË* (
nb_ôî
 - 1) + 6)) + 4 * clk_period;

293 i‡(
d·_≥ak_í
) {

294 
f·_dñay
 = (5 - 2 * 
µm
Ë* ((1 << 
sf
Ë* 
˛k_≥riod
 + 7 * clk_period) + 2 * clk_period;

296 
f·_dñay
 = (1 << 
sf
Ë* 2 * 
˛k_≥riod
 + 3 * clk_period;

299 
decode_dñay
 = 5 * 
˛k_≥riod
 + (9 * clk_≥riod + clk_≥riod * 
¸
Ë* 
nb_nibbÀ_ö_œ°_block
 + 3 * clk_period;

300 
time°amp_c‹ª˘i⁄
 = (
uöt32_t
)(
dñay_x
 + 
f·_dñay_°©e3
 + 
f·_dñay
 + 
dem≠_dñay
 + 
decode_dñay
 + 0.5e6) / 1e6;

305 
time°amp_c‹ª˘i⁄
 = 0;

306 
	`DEBUG_MSG
("WARNING: invalidÖacket,ÇoÅimestamp correction\n");

309  
time°amp_c‹ª˘i⁄
;

310 
	}
}

	@hal/sx1302hal/loragw_sx1302_timestamp.h

21 #i‚de‡
_LORAGW_SX1302_TIMESTAMP_H


22 
	#_LORAGW_SX1302_TIMESTAMP_H


	)

27 
	~<°döt.h
>

28 
	~<°dboﬁ.h
>

31 
	~"c⁄fig.h
"

46 
	stime°amp_öfo_s
 {

47 
uöt32_t
 
	mcou¡î_us_27bôs_ªf
;

48 
uöt8_t
 
	mcou¡î_us_27bôs_wøp
;

50 
	stime°amp_cou¡î_s
 {

51 
time°amp_öfo_s
 
	mö°
;

52 
time°amp_öfo_s
 
	mµs
;

53 } 
	ttime°amp_cou¡î_t
;

63 
time°amp_cou¡î_√w
(
time°amp_cou¡î_t
 * 
£lf
);

70 
time°amp_cou¡î_dñëe
(
time°amp_cou¡î_t
 * 
£lf
);

79 
time°amp_cou¡î_upd©e
(
time°amp_cou¡î_t
 * 
£lf
, 
boﬁ
 
µs
, 
uöt32_t
 
˙t
);

88 
uöt32_t
 
time°amp_cou¡î_ex∑nd
(
time°amp_cou¡î_t
 * 
£lf
, 
boﬁ
 
µs
, uöt32_à
˙t_us
);

96 
uöt32_t
 
time°amp_pkt_ex∑nd
(
time°amp_cou¡î_t
 * 
£lf
, uöt32_à
˙t_us
);

104 
uöt32_t
 
time°amp_cou¡î_gë
(
time°amp_cou¡î_t
 * 
£lf
, 
boﬁ
 
µs
);

116 
uöt32_t
 
time°amp_cou¡î_c‹ª˘i⁄
(
ifmod
, 
uöt8_t
 
b™dwidth
, uöt8_à
d©¨©e
, uöt8_à
codî©e
, uöt32_à
¸c_í
, 
uöt16_t
 
∑ylﬂd_Àngth
);

128 
time°amp_cou¡î_mode
(
boﬁ
 
íabÀ_¥ecisi⁄_ts
, 
uöt8_t
 
max_ts_mërics
, uöt8_à
nb_symbﬁs
);

	@hal/test/test_loragw_cal.c

20 #i‡
__STDC_VERSION__
 >= 199901L

21 
	#_XOPEN_SOURCE
 600

	)

23 
	#_XOPEN_SOURCE
 500

	)

26 
	~<°döt.h
>

27 
	~<°dio.h
>

28 
	~<°dlib.h
>

29 
	~<°rög.h
>

30 
	~<uni°d.h
>

31 
	~<m©h.h
>

32 
	~<sig«l.h
>

33 
	~<gë›t.h
>

34 
	~<sys/time.h
>

36 
	~"l‹agw_hÆ.h
"

37 
	~"l‹agw_ªg.h
"

38 
	~"l‹agw_sx1302.h
"

39 
	~"l‹agw_sx125x.h
"

40 
	~"l‹agw_aux.h
"

41 
	~"l‹agw_ˇl.h
"

46 
	#RAND_RANGE
(
mö
, 
max
Ë(
	`ønd
(Ë% (max + 1 - möË+ mö)

	)

48 
	#DEBUG_MSG
(
°r
Ë
	`Ârötf
(
°dîr
, så)

	)

49 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...Ë
	`Ârötf
(
°dîr
,"%s:%d: "fmt, 
__FUNCTION__
, 
__LINE__
,árgs)

	)

54 
	#LINUXDEV_PATH_DEFAULT
 "/dev/•idev1.0"

	)

56 
	#DEFAULT_CLK_SRC
 0

	)

57 
	#DEFAULT_FREQ_HZ
 868500000U

	)

59 
	#DEFAULT_DAC_GAIN
 3

	)

60 
	#DEFAULT_MIX_GAIN
 15

	)

62 
	#CAL_TX_TONE_FREQ_HZ
 250000

	)

63 
	#CAL_DEC_GAIN
 8

	)

64 
	#CAL_SIG_ANA_DURATION
 0

	)

66 
	#TEST_FREQ_SCAN
 0

	)

67 
	#TEST_OFFSET_IQ
 1

	)

68 
	#TEST_AMP_PHI
 2

	)

72 
	sˇl_tx_log
 {

73 
öt32_t
 
	mmón
;

74 
öt32_t
 
	mi_off£t
;

75 
öt32_t
 
	mq_off£t
;

81 
FILE
 * 
	gÂ
;

83 
uöt32_t
 
	grf_rx_‰eq
[
LGW_RF_CHAIN_NB
] = {865500000, 865500000};

84 
lgw_ødio_ty≥_t
 
	grf_ødio_ty≥
[
LGW_RF_CHAIN_NB
] = {
LGW_RADIO_TYPE_SX1257
, LGW_RADIO_TYPE_SX1257};

85 
lgw_tx_gaö_lut_s
 
	gtxlut
;

88 
	gexô_sig
 = 0;

89 
	gquô_sig
 = 0;

91 
	~"../§c/ˇl_fw.v¨
"

97 
	$ußge
() {

99 
	`¥ötf
("Available options:\n");

100 
	`¥ötf
(" -hÖrintÅhis help\n");

101 
	`¥ötf
(" -d <path> use Linux SPI device driver\n");

102 
	`¥ötf
(" => deÁu…Ö©h: " 
LINUXDEV_PATH_DEFAULT
 "\n");

103 
	`¥ötf
(" -k <uint> Concentrator clock source (Radio A or Radio B) [0..1]\n");

104 
	`¥ötf
(" -c <uint> RF chainÅo be used for TX (Radio A or Radio B) [0..1]\n");

105 
	`¥ötf
(" -r <uint> RadioÅype (1255, 1257, 1250)\n");

106 
	`¥ötf
(" -j SetÑadio in single input mode (SX1250 only)\n");

107 
	`¥ötf
(" -f <float> Radio TX frequency in MHz\n");

108 
	`¥ötf
( "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" );

109 
	`¥ötf
(" --pa <uint> PA gain [0..3]\n");

110 
	`¥ötf
(" --dig <uint> sx1302 digital gain [0..3]\n");

111 
	`¥ötf
(" --dac <uint> sx1257 DAC gain [0..3]\n");

112 
	`¥ötf
(" --mix <uint> sx1257 MIX gain [0..15]\n");

113 
	}
}

116 
	$sig_h™dÀr
(
sigio
)

118 i‡(
sigio
 =
SIGQUIT
) {

119 
quô_sig
 = 1;

121 if((
sigio
 =
SIGINT
Ë|| (sigiÿ=
SIGTERM
)) {

122 
exô_sig
 = 1;

124 
	}
}

126 
	$£tup_tx_dc_off£t
(
uöt8_t
 
rf_chaö
, 
uöt32_t
 
‰eq_hz
, uöt8_à
dac_gaö
, uöt8_à
mix_gaö
, uöt8_à
ødio_ty≥
) {

127 
uöt32_t
 
rx_‰eq_hz
, 
tx_‰eq_hz
;

128 
uöt32_t
 
rx_‰eq_öt
, 
rx_‰eq_‰ac
;

129 
uöt32_t
 
tx_‰eq_öt
, 
tx_‰eq_‰ac
;

130 
uöt8_t
 
rx_∂l_locked
, 
tx_∂l_locked
;

133 
rx_‰eq_hz
 = 
‰eq_hz
 - 
CAL_TX_TONE_FREQ_HZ
;

134 
tx_‰eq_hz
 = 
‰eq_hz
;

135 
ødio_ty≥
) {

136 
LGW_RADIO_TYPE_SX1255
:

137 
rx_‰eq_öt
 = 
rx_‰eq_hz
 / (
SX125x_32MHz_FRAC
 << 7);

138 
rx_‰eq_‰ac
 = ((
rx_‰eq_hz
 % (
SX125x_32MHz_FRAC
 << 7)) << 9) / SX125x_32MHz_FRAC;

139 
tx_‰eq_öt
 = 
tx_‰eq_hz
 / (
SX125x_32MHz_FRAC
 << 7);

140 
tx_‰eq_‰ac
 = ((
tx_‰eq_hz
 % (
SX125x_32MHz_FRAC
 << 7)) << 9) / SX125x_32MHz_FRAC;

142 
LGW_RADIO_TYPE_SX1257
:

143 
rx_‰eq_öt
 = 
rx_‰eq_hz
 / (
SX125x_32MHz_FRAC
 << 8);

144 
rx_‰eq_‰ac
 = ((
rx_‰eq_hz
 % (
SX125x_32MHz_FRAC
 << 8)) << 8) / SX125x_32MHz_FRAC;

145 
tx_‰eq_öt
 = 
tx_‰eq_hz
 / (
SX125x_32MHz_FRAC
 << 8);

146 
tx_‰eq_‰ac
 = ((
tx_‰eq_hz
 % (
SX125x_32MHz_FRAC
 << 8)) << 8) / SX125x_32MHz_FRAC;

149 
	`DEBUG_PRINTF
("ERROR: UNEXPECTED VALUE %d FOR RADIO TYPE\n", 
ødio_ty≥
);

150  
LGW_HAL_ERROR
;

152 
	`lgw_sx125x_ªg_w
(
SX125x_REG_FRF_RX_MSB
, 0xFF & 
rx_‰eq_öt
, 
rf_chaö
);

153 
	`lgw_sx125x_ªg_w
(
SX125x_REG_FRF_RX_MID
, 0xFF & (
rx_‰eq_‰ac
 >> 8), 
rf_chaö
);

154 
	`lgw_sx125x_ªg_w
(
SX125x_REG_FRF_RX_LSB
, 0xFF & 
rx_‰eq_‰ac
, 
rf_chaö
);

155 
	`lgw_sx125x_ªg_w
(
SX125x_REG_FRF_TX_MSB
, 0xFF & 
tx_‰eq_öt
, 
rf_chaö
);

156 
	`lgw_sx125x_ªg_w
(
SX125x_REG_FRF_TX_MID
, 0xFF & (
tx_‰eq_‰ac
 >> 8), 
rf_chaö
);

157 
	`lgw_sx125x_ªg_w
(
SX125x_REG_FRF_TX_LSB
, 0xFF & 
tx_‰eq_‰ac
, 
rf_chaö
);

163 
	`lgw_sx125x_ªg_w
(
SX125x_REG_RX_BW__BB_BW
, 0, 
rf_chaö
);

164 
	`lgw_sx125x_ªg_w
(
SX125x_REG_RX_BW__ADC_TRIM
, 6, 
rf_chaö
);

166 
	`lgw_sx125x_ªg_w
(
SX125x_REG_RX_PLL_BW__PLL_BW
, 0, 
rf_chaö
);

167 
	`lgw_sx125x_ªg_w
(
SX125x_REG_TX_BW__PLL_BW
, 0, 
rf_chaö
);

169 
	`lgw_sx125x_ªg_w
(
SX125x_REG_TX_DAC_BW
, 5, 
rf_chaö
);

170 
	`lgw_sx125x_ªg_w
(
SX125x_REG_CLK_SELECT__DAC_CLK_SELECT
, 1, 
rf_chaö
);

171 
	`lgw_sx125x_ªg_w
(
SX125x_REG_TX_GAIN__DAC_GAIN
, 
dac_gaö
, 
rf_chaö
);

172 
	`lgw_sx125x_ªg_w
(
SX125x_REG_TX_GAIN__MIX_GAIN
, 
mix_gaö
, 
rf_chaö
);

173 
	`lgw_sx125x_ªg_w
(
SX125x_REG_CLK_SELECT__RF_LOOPBACK_EN
, 1, 
rf_chaö
);

174 
	`lgw_sx125x_ªg_w
(
SX125x_REG_MODE
, 15, 
rf_chaö
);

175 
	`waô_ms
(1);

176 
	`lgw_sx125x_ªg_r
(
SX125x_REG_MODE_STATUS__RX_PLL_LOCKED
, &
rx_∂l_locked
, 
rf_chaö
);

177 
	`lgw_sx125x_ªg_r
(
SX125x_REG_MODE_STATUS__TX_PLL_LOCKED
, &
tx_∂l_locked
, 
rf_chaö
);

178 i‡((
rx_∂l_locked
 =0Ë|| (
tx_∂l_locked
 == 0)) {

179 
	`DEBUG_MSG
("ERROR: PLL failedÅoÜock\n");

180  
LGW_HAL_ERROR
;

184 
	}
}

186 
	$ˇl_tx_dc_off£t
(
uöt8_t
 
ã°_id
, uöt8_à
rf_chaö
, 
uöt32_t
 
‰eq_hz
, uöt8_à
dac_gaö
, uöt8_à
mix_gaö
, uöt8_à
ødio_ty≥
, 
öt32_t
 
f_off£t
, i¡32_à
i_off£t
, i¡32_à
q_off£t
, 
boﬁ
 
fuŒ_log
, boﬁ 
u£_agc
, uöt8_à
amp
, uöt8_à
phi
) {

187 
i
;

188 
uöt16_t
 
ªg
;

189 
öt32_t
 
vÆ_mö
, 
vÆ_max
;

190 
öt32_t
 
acc
;

191 
öt32_t
 
vÆ_món
;

192 
vÆ_°d
;

193 
acc2
 = 0 ;

194 
lo›_Àn
 = 3;

195 
ªs_sig
[
lo›_Àn
];

196 
timevÆ
 
°¨t
, 
°›
;

201 i‡(
	`£tup_tx_dc_off£t
(
rf_chaö
, 
‰eq_hz
, 
dac_gaö
, 
mix_gaö
, 
ødio_ty≥
Ë!
LGW_HAL_SUCCESS
) {

202  
LGW_HAL_ERROR
;

208 
	`lgw_ªg_w
(
SX1302_REG_RADIO_FE_SIG_ANA_CFG_RADIO_SEL
, (
rf_chaö
 == 0) ? 1 : 0);

210 
ªg
 = 
	`REG_SELECT
(
rf_chaö
, 
SX1302_REG_TX_TOP_A_TX_RFFE_IF_CTRL_TX_MODE
,

211 
SX1302_REG_TX_TOP_B_TX_RFFE_IF_CTRL_TX_MODE
);

212 
	`lgw_ªg_w
(
ªg
, 0);

214 
ªg
 = 
	`REG_SELECT
(
rf_chaö
, 
SX1302_REG_TX_TOP_A_TX_TRIG_TX_TRIG_IMMEDIATE
,

215 
SX1302_REG_TX_TOP_B_TX_TRIG_TX_TRIG_IMMEDIATE
);

216 
	`lgw_ªg_w
(
ªg
, 1);

217 
	`lgw_ªg_w
(
ªg
, 0);

219 
ªg
 = 
	`REG_SELECT
(
rf_chaö
, 
SX1302_REG_RADIO_FE_CTRL0_RADIO_A_DC_NOTCH_EN
,

220 
SX1302_REG_RADIO_FE_CTRL0_RADIO_B_DC_NOTCH_EN
);

221 
	`lgw_ªg_w
(
ªg
, 1);

224 i‡(
u£_agc
 =
åue
) {

225 
uöt8_t
 
vÆ_sig
, 
vÆ_sig2
;

228 
	`sx1302_agc_maûbox_wrôe
(2, 
rf_chaö
 + 4);

229 
	`sx1302_agc_maûbox_wrôe
(1, 
f_off£t
 );

230 
	`sx1302_agc_maûbox_wrôe
(0, 
CAL_SIG_ANA_DURATION
);

233 
	`sx1302_agc_maûbox_wrôe
(3, 0x00);

234 
	`sx1302_agc_maûbox_wrôe
(3, 0x01);

235 
	`sx1302_agc_waô_°©us
(0x01);

237 
	`sx1302_agc_maûbox_wrôe
(2, 
amp
);

238 
	`sx1302_agc_maûbox_wrôe
(1, 
phi
);

240 
	`sx1302_agc_maûbox_wrôe
(3, 0x02);

241 
	`sx1302_agc_waô_°©us
(0x02);

243 
	`sx1302_agc_maûbox_wrôe
(2, 
i_off£t
);

244 
	`sx1302_agc_maûbox_wrôe
(1, 
q_off£t
);

246 
	`sx1302_agc_maûbox_wrôe
(3, 0x03);

247 
	`sx1302_agc_waô_°©us
(0x03);

249 
	`sx1302_agc_maûbox_wrôe
(2, 
CAL_DEC_GAIN
);

250 
	`sx1302_agc_maûbox_wrôe
(2, 0);

252 
	`sx1302_agc_maûbox_wrôe
(3, 0x04);

254 
ªg
 = 
	`REG_SELECT
(
rf_chaö
, 
SX1302_REG_TX_TOP_A_TX_TRIG_TX_TRIG_IMMEDIATE
,

255 
SX1302_REG_TX_TOP_B_TX_TRIG_TX_TRIG_IMMEDIATE
);

256 
	`lgw_ªg_w
(
ªg
, 0);

258 
	`gëtimeofday
 (&
°¨t
, 
NULL
);

259 
i
 = 0; i < 
lo›_Àn
; i++) {

260 
	`sx1302_agc_waô_°©us
(0x06);

261 
	`sx1302_agc_maûbox_wrôe
(3, 0x06);

263 
	`sx1302_agc_waô_°©us
(0x07);

264 
	`sx1302_agc_maûbox_ªad
(0, &
vÆ_sig
);

265 
	`sx1302_agc_maûbox_ªad
(1, &
vÆ_sig2
);

266 
ªs_sig
[
i
] = 
vÆ_sig2
 * 256 + 
vÆ_sig
;

268 i‡(
i
 =(
lo›_Àn
 - 1)) {

269 
	`sx1302_agc_maûbox_wrôe
(3, 0x07);

271 
	`sx1302_agc_maûbox_wrôe
(3, 0x00);

274 
	`gëtimeofday
 (&
°›
, 
NULL
);

277 
öt32_t
 
vÆ
;

278 
öt32_t
 
abs_lsb
, 
abs_msb
;

279 
abs_iq
;

281 
ªg
 = 
	`REG_SELECT
(
rf_chaö
, 
SX1302_REG_TX_TOP_A_TX_RFFE_IF_Q_OFFSET_Q_OFFSET
,

282 
SX1302_REG_TX_TOP_B_TX_RFFE_IF_Q_OFFSET_Q_OFFSET
);

283 
	`lgw_ªg_w
(
ªg
, (
öt8_t
)
q_off£t
);

285 
ªg
 = 
	`REG_SELECT
(
rf_chaö
, 
SX1302_REG_TX_TOP_A_TX_RFFE_IF_I_OFFSET_I_OFFSET
,

286 
SX1302_REG_TX_TOP_B_TX_RFFE_IF_I_OFFSET_I_OFFSET
);

287 
	`lgw_ªg_w
(
ªg
, (
öt8_t
)
i_off£t
);

289 
ªg
 = 
	`REG_SELECT
(
rf_chaö
, 
SX1302_REG_RADIO_FE_CTRL0_RADIO_A_DC_NOTCH_EN
,

290 
SX1302_REG_RADIO_FE_CTRL0_RADIO_B_DC_NOTCH_EN
);

291 
	`lgw_ªg_w
(
ªg
, 1);

293 
ªg
 = 
	`REG_SELECT
(
rf_chaö
, 
SX1302_REG_RADIO_FE_CTRL0_RADIO_A_FORCE_HOST_FILTER_GAIN
,

294 
SX1302_REG_RADIO_FE_CTRL0_RADIO_B_FORCE_HOST_FILTER_GAIN
);

295 
	`lgw_ªg_w
(
ªg
, 0x01);

297 
ªg
 = 
	`REG_SELECT
(
rf_chaö
, 
SX1302_REG_RADIO_FE_CTRL0_RADIO_A_HOST_FILTER_GAIN
,

298 
SX1302_REG_RADIO_FE_CTRL0_RADIO_B_HOST_FILTER_GAIN
);

299 
	`lgw_ªg_w
(
ªg
, 
CAL_DEC_GAIN
);

301 
	`lgw_ªg_w
(
SX1302_REG_RADIO_FE_SIG_ANA_CFG_FORCE_HAL_CTRL
, 1);

303 
	`lgw_ªg_w
(
SX1302_REG_RADIO_FE_SIG_ANA_FREQ_FREQ
, 
f_off£t
);

305 
	`lgw_ªg_w
(
SX1302_REG_RADIO_FE_SIG_ANA_CFG_DURATION
, 
CAL_SIG_ANA_DURATION
);

306 
	`lgw_ªg_w
(
SX1302_REG_RADIO_FE_SIG_ANA_CFG_EN
, 1);

308 
	`gëtimeofday
 (&
°¨t
, 
NULL
);

309 
i
 = 0; i < 
lo›_Àn
; i++) {

310 
	`lgw_ªg_w
(
SX1302_REG_RADIO_FE_SIG_ANA_CFG_START
, 0);

311 
	`lgw_ªg_w
(
SX1302_REG_RADIO_FE_SIG_ANA_CFG_START
, 1);

314 
	`lgw_ªg_r
(
SX1302_REG_RADIO_FE_SIG_ANA_CFG_VALID
, &
vÆ
);

315 
	`waô_ms
(1);

316 } 
vÆ
 == 0);

318 
	`lgw_ªg_r
(
SX1302_REG_RADIO_FE_SIG_ANA_ABS_LSB_CORR_ABS_OUT
, &
abs_lsb
);

319 
	`lgw_ªg_r
(
SX1302_REG_RADIO_FE_SIG_ANA_ABS_MSB_CORR_ABS_OUT
, &
abs_msb
);

320 
abs_iq
 = (
abs_msb
 << 8Ë| 
abs_lsb
;

322 
ªs_sig
[
i
] = 
abs_iq
;

324 
	`gëtimeofday
 (&
°›
, 
NULL
);

327 
	`lgw_ªg_w
(
SX1302_REG_RADIO_FE_SIG_ANA_CFG_FORCE_HAL_CTRL
, 0);

330 i‡(
fuŒ_log
 =
åue
) {

331 
	`¥ötf
("i_off£t:%d q_off£t:%d f_off£t:%d dac_gaö:%d mix_gaö:%d dec_gaö:%dámp:%uÖhi:%u => ", 
i_off£t
, 
q_off£t
, 
f_off£t
, 
dac_gaö
, 
mix_gaö
, 
CAL_DEC_GAIN
, 
amp
, 
phi
);

333 
ã°_id
) {

334 
TEST_FREQ_SCAN
:

335 
	`Ârötf
(
Â
, "%u ", 
f_off£t
);

337 
TEST_OFFSET_IQ
:

338 
	`Ârötf
(
Â
, "%d %d ", 
i_off£t
, 
q_off£t
);

340 
TEST_AMP_PHI
:

341 
	`Ârötf
(
Â
, "%d %d ", 
amp
, 
phi
);

344 
	`¥ötf
("ERROR: wr⁄gÅe° ID (%u)\n", 
ã°_id
);

350 
vÆ_mö
 = 
ªs_sig
[0];

351 
vÆ_max
 = 
ªs_sig
[0];

352 
acc
 = 0;

353 
i
 = 0; i < 
lo›_Àn
; i++) {

354 i‡(
ªs_sig
[
i
] > 
vÆ_max
) {

355 
vÆ_max
 = 
ªs_sig
[
i
];

357 i‡(
ªs_sig
[
i
] < 
vÆ_mö
) {

358 
vÆ_mö
 = 
ªs_sig
[
i
];

360 
acc
 +
ªs_sig
[
i
];

362 
vÆ_món
 = 
acc
 / 
lo›_Àn
;

364 
i
 = 0; i < 
lo›_Àn
; i++) {

365 
acc2
 +
	`pow
((
ªs_sig
[
i
]-
vÆ_món
),2);

367 
vÆ_°d
 = 
	`sqπ
(
acc2
/
lo›_Àn
);

369 i‡(
fuŒ_log
 =
åue
) {

370 
	`¥ötf
(" mö:%u max:%u món:%u std:%f\n", 
vÆ_mö
, 
vÆ_max
, 
vÆ_món
, 
vÆ_°d
);

372 
ã°_id
) {

373 
TEST_OFFSET_IQ
:

374 
TEST_AMP_PHI
:

375 
	`Ârötf
(
Â
, "%u %u %u %f\n", 
vÆ_mö
, 
vÆ_max
, 
vÆ_món
, 
vÆ_°d
);

377 
TEST_FREQ_SCAN
:

378 
	`Ârötf
(
Â
, "%u\n", 
vÆ_món
);

385  
LGW_HAL_SUCCESS
;

386 
	}
}

391 
	$ã°_‰eq_sˇn
(
uöt8_t
 
rf_chaö
, 
boﬁ
 
fuŒ_log
, boﬁ 
u£_agc
) {

392 
f
;

394 
	`¥ötf
("-------------------------------------\n");

395 
f
 = 0; f < 256; f++)

397 
	`ˇl_tx_dc_off£t
(
TEST_FREQ_SCAN
, 
rf_chaö
, 
rf_rx_‰eq
[rf_chaö], 
txlut
.
lut
[0].
dac_gaö
,Åxlut.lut[0].
mix_gaö
, 
rf_ødio_ty≥
[rf_chaö], 
f
, 0, 0, 
fuŒ_log
, 
u£_agc
, 0, 0);

399 i‡((
quô_sig
 =1Ë|| (
exô_sig
 == 1)) {

405 
	}
}

407 
	$ã°_iq_off£t
(
uöt8_t
 
rf_chaö
, uöt8_à
f_off£t
, 
boﬁ
 
fuŒ_log
, boﬁ 
u£_agc
) {

408 
i
, 
q
;

410 
	`¥ötf
("-------------------------------------\n");

411 
i
 = -128; i < 127; i+=8)

413 
q
 = -128; q < 127; q+=8)

415 
	`ˇl_tx_dc_off£t
(
TEST_OFFSET_IQ
, 
rf_chaö
, 
rf_rx_‰eq
[rf_chaö], 
txlut
.
lut
[0].
dac_gaö
,Åxlut.lut[0].
mix_gaö
, 
rf_ødio_ty≥
[rf_chaö], 
f_off£t
, 
i
, 
q
, 
fuŒ_log
, 
u£_agc
, 0, 0);

416 i‡((
quô_sig
 =1Ë|| (
exô_sig
 == 1)) {

423 
	}
}

425 
	$ã°_amp_phi
(
uöt8_t
 
rf_chaö
, uöt8_à
f_off£t
, 
boﬁ
 
fuŒ_log
, boﬁ 
u£_agc
) {

426 
amp
, 
phi
;

428 
	`¥ötf
("-------------------------------------\n");

429 
amp
 = 0;ámp < 64;ámp++)

431 
phi
 = 0;Öhi < 64;Öhi++)

433 
	`ˇl_tx_dc_off£t
(
TEST_AMP_PHI
, 
rf_chaö
, 
rf_rx_‰eq
[rf_chaö], 
txlut
.
lut
[0].
dac_gaö
,Åxlut.lut[0].
mix_gaö
, 
rf_ødio_ty≥
[rf_chaö], 
f_off£t
, 0, 0, 
fuŒ_log
, 
u£_agc
, 
amp
, 
phi
);

434 i‡((
quô_sig
 =1Ë|| (
exô_sig
 == 1)) {

441 
	}
}

443 
	$ã°_ˇ±uª_øm
(
uöt8_t
 
rf_chaö
) {

444 
uöt16_t
 
ªg
;

446 
	`£tup_tx_dc_off£t
(
rf_chaö
, 
rf_rx_‰eq
[rf_chaö], 
txlut
.
lut
[0].
dac_gaö
,Åxlut.lut[0].
mix_gaö
, 
rf_ødio_ty≥
[rf_chain]);

448 
ªg
 = 
	`REG_SELECT
(
rf_chaö
, 
SX1302_REG_RADIO_FE_CTRL0_RADIO_A_DC_NOTCH_EN
,

449 
SX1302_REG_RADIO_FE_CTRL0_RADIO_B_DC_NOTCH_EN
);

450 
	`lgw_ªg_w
(
ªg
, 1);

452 
	`¥ötf
("Waiting...\n");

453 (
quô_sig
 !1Ë&& (
exô_sig
 != 1)) {

454 
	`waô_ms
(1000);

458 
	}
}

460 
	$maö
(
¨gc
, **
¨gv
)

462 
i
, 
x
;

463 
uöt32_t
 
·
 = 
DEFAULT_FREQ_HZ
;

464 
¨g_d
 = 0.0;

465 
¨g_u
;

466 
uöt8_t
 
˛ocksour˚
 = 0;

467 
uöt8_t
 
rf_chaö
 = 0;

468 
lgw_ødio_ty≥_t
 
ødio_ty≥
 = 
LGW_RADIO_TYPE_NONE
;

469 
boﬁ
 
sögÀ_öput_mode
 = 
Ál£
;

471 
lgw_c⁄f_bﬂrd_s
 
bﬂrdc⁄f
;

472 
lgw_c⁄f_rxrf_s
 
rfc⁄f
;

474 
siga˘i⁄
 
siga˘
;

477 c⁄° 
•idev_∑th_deÁu…
[] = 
LINUXDEV_PATH_DEFAULT
;

478 c⁄° * 
•idev_∑th
 = 
•idev_∑th_deÁu…
;

481 
txlut
.
size
 = 1;

482 
	`mem£t
(
txlut
.
lut
, 0, Åxlut.lut);

483 
txlut
.
lut
[0].
dac_gaö
 = 
DEFAULT_DAC_GAIN
;

484 
txlut
.
lut
[0].
mix_gaö
 = 
DEFAULT_MIX_GAIN
;

487 
›ti⁄_ödex
 = 0;

488 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

495 (
i
 = 
	`gë›t_l⁄g
 (
¨gc
, 
¨gv
, "hjf:k:r:c:d:", 
l⁄g_›ti⁄s
, &
›ti⁄_ödex
)) != -1) {

496 
i
) {

498 
	`ußge
();

503 i‡(
›èrg
 !
NULL
) {

504 
•idev_∑th
 = 
›èrg
;

509 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

510 i‡((
i
 !1Ë|| ((
¨g_u
 != 1255) && (arg_u != 1257) && (arg_u != 1250))) {

511 
	`¥ötf
("ERROR:árgumentÖarsing of -rárgument. Use -hÅoÖrint help\n");

512  
EXIT_FAILURE
;

514 
¨g_u
) {

516 
ødio_ty≥
 = 
LGW_RADIO_TYPE_SX1255
;

519 
ødio_ty≥
 = 
LGW_RADIO_TYPE_SX1257
;

522 
ødio_ty≥
 = 
LGW_RADIO_TYPE_SX1250
;

529 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

530 i‡((
i
 !1Ë|| (
¨g_u
 > 1)) {

531 
	`¥ötf
("ERROR:árgumentÖarsing of -kárgument. Use -hÅoÖrint help\n");

532  
EXIT_FAILURE
;

534 
˛ocksour˚
 = (
uöt8_t
)
¨g_u
;

539 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

540 i‡((
i
 !1Ë|| (
¨g_u
 > 1)) {

541 
	`¥ötf
("ERROR:árgumentÖarsing of -cárgument. Use -hÅoÖrint help\n");

542  
EXIT_FAILURE
;

544 
rf_chaö
 = (
uöt8_t
)
¨g_u
;

549 
sögÀ_öput_mode
 = 
åue
;

553 
i
 = 
	`ssˇnf
(
›èrg
, "%lf", &
¨g_d
);

554 i‡(
i
 != 1) {

555 
	`¥ötf
("ERROR:árgumentÖarsing of -fárgument. Use -hÅoÖrint help\n");

556  
EXIT_FAILURE
;

558 
·
 = (
uöt32_t
)((
¨g_d
*1e6) + 0.5);

563 i‡(
	`°rcmp
(
l⁄g_›ti⁄s
[
›ti⁄_ödex
].
«me
, "dac") == 0) {

564 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

565 i‡((
i
 !1Ë|| (
¨g_u
 > 3)) {

566 
	`¥ötf
("ERROR:árgumentÖarsing of --dacárgument. Use -hÅoÖrint help\n");

567  
EXIT_FAILURE
;

569 
txlut
.
size
 = 1;

570 
txlut
.
lut
[0].
dac_gaö
 = (
uöt8_t
)
¨g_u
;

572 } i‡(
	`°rcmp
(
l⁄g_›ti⁄s
[
›ti⁄_ödex
].
«me
, "mix") == 0) {

573 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

574 i‡((
i
 !1Ë|| (
¨g_u
 > 15)) {

575 
	`¥ötf
("ERROR:árgumentÖarsing of --mixárgument. Use -hÅoÖrint help\n");

576  
EXIT_FAILURE
;

578 
txlut
.
size
 = 1;

579 
txlut
.
lut
[0].
mix_gaö
 = (
uöt8_t
)
¨g_u
;

582 
	`¥ötf
("ERROR:árgumentÖarsing options. Use -hÅoÖrint help\n");

583  
EXIT_FAILURE
;

588 
	`¥ötf
("ERROR:árgumentÖarsing\n");

589 
	`ußge
();

595 
	`sigem±y£t
–&
siga˘
.
ß_mask
 );

596 
siga˘
.
ß_Êags
 = 0;

597 
siga˘
.
ß_h™dÀr
 = 
sig_h™dÀr
;

598 
	`siga˘i⁄
–
SIGQUIT
, &
siga˘
, 
NULL
 );

599 
	`siga˘i⁄
–
SIGINT
, &
siga˘
, 
NULL
 );

600 
	`siga˘i⁄
–
SIGTERM
, &
siga˘
, 
NULL
 );

603 i‡(
	`sy°em
("./reset_lgw.sh start") != 0) {

604 
	`¥ötf
("ERROR: failedÅoÑeset SX1302, check yourÑeset_lgw.sh script\n");

605 
	`exô
(
EXIT_FAILURE
);

609 
	`mem£t
(&
bﬂrdc⁄f
, 0,  boardconf);

610 
bﬂrdc⁄f
.
l‹aw™_public
 = 
åue
;

611 
bﬂrdc⁄f
.
˛k§c
 = 
˛ocksour˚
;

612 
bﬂrdc⁄f
.
fuŒ_du∂ex
 = 
Ál£
;

613 
	`°∫˝y
(
bﬂrdc⁄f
.
•idev_∑th
, spidev_path,  boardconf.spidev_path);

614 
bﬂrdc⁄f
.
•idev_∑th
[ boardconf.spidev_path - 1] = '\0';

615 i‡(
	`lgw_bﬂrd_£tc⁄f
(&
bﬂrdc⁄f
Ë!
LGW_HAL_SUCCESS
) {

616 
	`¥ötf
("ERROR: failedÅo configure board\n");

617  
EXIT_FAILURE
;

620 
	`mem£t
(&
rfc⁄f
, 0, Ñfconf);

621 
rfc⁄f
.
íabÀ
 = ((
rf_chaö
 =0Ë? 
åue
 : 
Ál£
);

622 
rfc⁄f
.
‰eq_hz
 = 
·
;

623 
rfc⁄f
.
ty≥
 = 
ødio_ty≥
;

624 
rfc⁄f
.
tx_íabÀ
 = 
åue
;

625 
rfc⁄f
.
sögÀ_öput_mode
 = single_input_mode;

626 i‡(
	`lgw_rxrf_£tc⁄f
(0, &
rfc⁄f
Ë!
LGW_HAL_SUCCESS
) {

627 
	`¥ötf
("ERROR: failedÅo configureÑxrf 0\n");

628  
EXIT_FAILURE
;

631 
	`mem£t
(&
rfc⁄f
, 0, Ñfconf);

632 
rfc⁄f
.
íabÀ
 = ((
rf_chaö
 =1Ë? 
åue
 : 
Ál£
);

633 
rfc⁄f
.
‰eq_hz
 = 
·
;

634 
rfc⁄f
.
ty≥
 = 
ødio_ty≥
;

635 
rfc⁄f
.
tx_íabÀ
 = 
åue
;

636 
rfc⁄f
.
sögÀ_öput_mode
 = single_input_mode;

637 i‡(
	`lgw_rxrf_£tc⁄f
(1, &
rfc⁄f
Ë!
LGW_HAL_SUCCESS
) {

638 
	`¥ötf
("ERROR: failedÅo configureÑxrf 1\n");

639  
EXIT_FAILURE
;

642 i‡(
txlut
.
size
 > 0) {

643 i‡(
	`lgw_txgaö_£tc⁄f
(
rf_chaö
, &
txlut
Ë!
LGW_HAL_SUCCESS
) {

644 
	`¥ötf
("ERROR: failedÅo configureÅxgainÜut\n");

645  
EXIT_FAILURE
;

650 
Â
 = 
	`f›í
("log.txt", "w+");

653 
x
 = 
	`lgw_c⁄√˘
(
•idev_∑th
);

654 i‡(
x
 != 0) {

655 
	`¥ötf
("ERROR: failedÅo connectÅhe gateway\n");

656  
EXIT_FAILURE
;

659 
	`sx1302_ødio_ª£t
(
rf_chaö
, 
LGW_RADIO_TYPE_SX1257
);

660 
	`sx1302_ødio_˛ock_£À˘
(
˛ocksour˚
);

661 
	`sx1302_ødio_£t_mode
(
rf_chaö
, 
LGW_RADIO_TYPE_SX1257
);

663 
	`¥ötf
("Loading CAL fw for sx125x\n");

664 i‡(
	`sx1302_agc_lﬂd_fúmw¨e
(
ˇl_fúmw¨e_sx125x
Ë!
LGW_HAL_SUCCESS
) {

665  
LGW_HAL_ERROR
;

668 
	`¥ötf
("waiting for captureÑam\n");

669 
	`waô_ms
(1000);

672 
	`¥ötf
("ã°ög:Ñf_chaö:%u, dac_gaö: %u, mix_gaö:%u, dec_gaö:%u, sig_™a_duøti⁄:%u\n", 
rf_chaö
, 
txlut
.
lut
[0].
dac_gaö
,Åxlut.lut[0].
mix_gaö
, 
CAL_DEC_GAIN
, 
CAL_SIG_ANA_DURATION
);

674 
	`ã°_‰eq_sˇn
(
rf_chaö
, 
Ál£
, false);

683 
	`sx1302_ødio_ª£t
(0, 
LGW_RADIO_TYPE_SX1257
);

684 
	`sx1302_ødio_ª£t
(1, 
LGW_RADIO_TYPE_SX1257
);

687 
x
 = 
	`lgw_disc⁄√˘
();

688 i‡(
x
 != 0) {

689 
	`¥ötf
("ERROR: failedÅo disconnectÅhe gateway\n");

690  
EXIT_FAILURE
;

694 
	`f˛o£
(
Â
);

697 i‡(
	`sy°em
("./reset_lgw.sh stop") != 0) {

698 
	`¥ötf
("ERROR: failedÅoÑeset SX1302, check yourÑeset_lgw.sh script\n");

699 
	`exô
(
EXIT_FAILURE
);

702 
	`¥ötf
("=========== Test End ===========\n");

705 
	}
}

	@hal/test/test_loragw_capture_ram.c

20 #i‡
__STDC_VERSION__
 >= 199901L

21 
	#_XOPEN_SOURCE
 600

	)

23 
	#_XOPEN_SOURCE
 500

	)

28 
	~<°dio.h
>

29 
	~<°dlib.h
>

30 
	~<sig«l.h
>

31 
	~<gë›t.h
>

33 
	~"l‹agw_hÆ.h
"

34 
	~"l‹agw_ªg.h
"

35 
	~"l‹agw_aux.h
"

36 
	~"l‹agw_sx1250.h
"

37 
	~"l‹agw_sx125x.h
"

38 
	~"l‹agw_sx1302.h
"

43 
	#DEBUG_MSG
(
°r
Ë
	`Ârötf
(
°dîr
, så)

	)

45 
	#LINUXDEV_PATH_DEFAULT
 "/dev/•idev1.0"

	)

47 
	#FULL_INIT
 0

	)

48 
	#CAPTURE_RAM_SIZE
 0x4000

	)

54 
	gexô_sig
 = 0;

55 
	gquô_sig
 = 0;

57 
uöt32_t
 
	gßm∂ög_‰equícy
[] = {4e6, 4e6, 4e6, 4e6, 4e6, 4e6, 4e6, 0, 0, 1e6, 125e3, 125e3, 125e3, 125e3, 125e3, 125e3, 125e3, 125e3, 8e6, 125e3, 125e3, 125e3, 0, 32e6, 32e6, 0, 32e6, 32e6, 0, 32e6, 32e6, 32e6};

59 #i‡
FULL_INIT


60 
	~"§c/ãxt_agc_sx1250_27_Nov_1.v¨
"

61 
	~"§c/ãxt_agc_sx1257_19_Nov_1.v¨
"

62 
	~"§c/ãxt_¨b_sx1302_13_Nov_3.v¨
"

64 
	#FW_VERSION_CAL
 0

	)

65 
	#FW_VERSION_AGC
 1

	)

66 
	#FW_VERSION_ARB
 1

	)

68 
boﬁ
 
	grf_íabÀ
[
LGW_RF_CHAIN_NB
];

69 
uöt32_t
 
	grf_rx_‰eq
[
LGW_RF_CHAIN_NB
];

70 
lgw_ødio_ty≥_t
 
	grf_ødio_ty≥
[
LGW_RF_CHAIN_NB
];

71 
uöt8_t
 
	grf_˛kout
 = 0;

78 
	$ußge
()

80 
	`¥ötf
("Available options:\n");

81 
	`¥ötf
(" -hÖrintÅhis help\n");

82 
	`¥ötf
(" -d <path> use Linux SPI device driver\n");

83 
	`¥ötf
(" => deÁu…Ö©h: " 
LINUXDEV_PATH_DEFAULT
 "\n");

84 
	`¥ötf
(" -s <uint> Capture source [0..31]\n");

85 
	}
}

88 
	$sig_h™dÀr
(
sigio
)

90 i‡(
sigio
 =
SIGQUIT
) {

91 
quô_sig
 = 1;

93 if((
sigio
 =
SIGINT
Ë|| (sigiÿ=
SIGTERM
)) {

94 
exô_sig
 = 1;

96 
	}
}

99 
	$maö
(
¨gc
, **
¨gv
)

101 
i
;

102 
öt32_t
 
vÆ
 = 0;

103 
ªg_°©
;

104 
¨g_u
;

105 
uöt8_t
 
ˇ±uª_sour˚
 = 0;

106 
uöt16_t
 
≥riod_vÆue
 = 0;

107 
öt16_t
 
ªÆ
 = 0, 
imag
 = 0;

108 #i‡
FULL_INIT


109 
uöt32_t
 
vÆ1
, 
vÆ2
;

111 
uöt8_t
 
ˇ±uª_øm_buf„r
[
CAPTURE_RAM_SIZE
];

113 
siga˘i⁄
 
siga˘
;

116 c⁄° 
•idev_∑th_deÁu…
[] = 
LINUXDEV_PATH_DEFAULT
;

117 c⁄° * 
•idev_∑th
 = 
•idev_∑th_deÁu…
;

120 
›ti⁄_ödex
 = 0;

121 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

126 (
i
 = 
	`gë›t_l⁄g
 (
¨gc
, 
¨gv
, "h:s:d:", 
l⁄g_›ti⁄s
, &
›ti⁄_ödex
)) != -1) {

127 
i
) {

129 
	`ußge
();

134 i‡(
›èrg
 !
NULL
) {

135 
•idev_∑th
 = 
›èrg
;

140 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

141 i‡((
i
 !1Ë|| (
¨g_u
 > 31)) {

142 
	`¥ötf
("ERROR:árgumentÖarsing of -sárgument. Use -hÅoÖrint help\n");

143  
EXIT_FAILURE
;

145 
ˇ±uª_sour˚
 = 
¨g_u
;

150 
	`¥ötf
("ERROR:árgumentÖarsing\n");

151 
	`ußge
();

157 
	`sigem±y£t
–&
siga˘
.
ß_mask
 );

158 
siga˘
.
ß_Êags
 = 0;

159 
siga˘
.
ß_h™dÀr
 = 
sig_h™dÀr
;

160 
	`siga˘i⁄
–
SIGQUIT
, &
siga˘
, 
NULL
 );

161 
	`siga˘i⁄
–
SIGINT
, &
siga˘
, 
NULL
 );

162 
	`siga˘i⁄
–
SIGTERM
, &
siga˘
, 
NULL
 );

164 #i‡
FULL_INIT


166 i‡(
	`sy°em
("./reset_lgw.sh start") != 0) {

167 
	`¥ötf
("ERROR: failedÅoÑeset SX1302, check yourÑeset_lgw.sh script\n");

168 
	`exô
(
EXIT_FAILURE
);

173 
i
 = 0; i < 
CAPTURE_RAM_SIZE
; i++) {

174 
ˇ±uª_øm_buf„r
[
i
] = i%256;

177 
ªg_°©
 = 
	`lgw_c⁄√˘
(
•idev_∑th
);

178 i‡(
ªg_°©
 =
LGW_REG_ERROR
) {

179 
	`DEBUG_MSG
("ERROR: FAIL TO CONNECT BOARD\n");

180  
LGW_HAL_ERROR
;

184 #i‡
FULL_INIT


185 
rf_ødio_ty≥
[0] = 
LGW_RADIO_TYPE_SX1250
;

186 
rf_ødio_ty≥
[1] = 
LGW_RADIO_TYPE_SX1257
;

187 
rf_íabÀ
[0] = 
Ál£
;

188 
rf_íabÀ
[1] = 
åue
;

189 
rf_˛kout
 = 1;

190 
rf_rx_‰eq
[1] = 863700000;

193 
i
=0; i < 2; i++)

195 i‡(
rf_íabÀ
[
i
] =
åue
) {

196 
	`sx1302_ødio_ª£t
(
i
, 
rf_ødio_ty≥
[i]);

197 
ødio_ty≥
) {

198 
LGW_RADIO_TYPE_SX1250
:

199 
	`sx1250_£tup
(
i
, 
rf_rx_‰eq
[i], 
Ál£
);

201 
LGW_RADIO_TYPE_SX1255
:

202 
LGW_RADIO_TYPE_SX1257
:

203 
	`sx125x_£tup
(
i
, 
rf_˛kout
, 
åue
, 
rf_ødio_ty≥
[i], 
rf_rx_‰eq
[i]);

206 
	`DEBUG_MSG
("ERROR: RADIO TYPE NOT SUPPORTED\n");

207  
LGW_HAL_ERROR
;

209 
	`sx1302_ødio_£t_mode
(
i
, 
ødio_ty≥
);

214 
	`sx1302_ødio_˛ock_£À˘
(
rf_˛kout
);

217 
	`lgw_gë_ö°˙t
(&
vÆ1
);

218 
	`lgw_gë_ö°˙t
(&
vÆ2
);

219 i‡(
vÆ1
 =
vÆ2
) {

220 
	`¥ötf
("ERROR: SX1302Åime°am∞cou¡î i†nŸÑu¬ög (vÆ:%u)\n", (
uöt32_t
)
vÆ1
);

225 
	`sx1302_ødio_„_c⁄figuª
();

228 
	`lgw_ªg_w
(
SX1302_REG_COMMON_CTRL0_HOST_RADIO_CTRL
, 0x00);

231 
rf_ødio_ty≥
[
rf_˛kout
]) {

232 
LGW_RADIO_TYPE_SX1250
:

233 
	`¥ötf
("Loading AGC fw for sx1250\n");

234 i‡(
	`sx1302_agc_lﬂd_fúmw¨e
(
agc_fúmw¨e_sx1250
Ë!
LGW_HAL_SUCCESS
) {

235  
LGW_HAL_ERROR
;

237 i‡(
	`sx1302_agc_°¨t
(
FW_VERSION_AGC
, 
SX1302_RADIO_TYPE_SX1250
, 
SX1302_AGC_RADIO_GAIN_AUTO
, SX1302_AGC_RADIO_GAIN_AUTO, 0Ë!
LGW_HAL_SUCCESS
) {

238  
LGW_HAL_ERROR
;

241 
LGW_RADIO_TYPE_SX1257
:

242 
	`¥ötf
("Loading AGC fw for sx125x\n");

243 i‡(
	`sx1302_agc_lﬂd_fúmw¨e
(
agc_fúmw¨e_sx125x
Ë!
LGW_HAL_SUCCESS
) {

244  
LGW_HAL_ERROR
;

246 i‡(
	`sx1302_agc_°¨t
(
FW_VERSION_AGC
, 
SX1302_RADIO_TYPE_SX125X
, 
SX1302_AGC_RADIO_GAIN_AUTO
, SX1302_AGC_RADIO_GAIN_AUTO, 0Ë!
LGW_HAL_SUCCESS
) {

248  
LGW_HAL_ERROR
;

254 
	`¥ötf
("Loading ARB fw\n");

255 i‡(
	`sx1302_¨b_lﬂd_fúmw¨e
(
¨b_fúmw¨e
Ë!
LGW_HAL_SUCCESS
) {

256  
LGW_HAL_ERROR
;

258 i‡(
	`sx1302_¨b_°¨t
(
FW_VERSION_ARB
Ë!
LGW_HAL_SUCCESS
) {

259  
LGW_HAL_ERROR
;

266 
	`lgw_ªg_w
(
SX1302_REG_CAPTURE_RAM_CAPTURE_CFG_ENABLE
, 1);

267 
	`lgw_ªg_w
(
SX1302_REG_CAPTURE_RAM_CAPTURE_CFG_CAPTUREWRAP
, 0);

268 
	`lgw_ªg_w
(
SX1302_REG_CAPTURE_RAM_CAPTURE_CFG_RAMCONFIG
, 0);

269 
	`Ârötf
(
°dout
, "C≠tuª sour˚: %d\n", 
ˇ±uª_sour˚
);

270 
	`lgw_ªg_w
(
SX1302_REG_CAPTURE_RAM_CAPTURE_SOURCE_A_SOURCEMUX
, 
ˇ±uª_sour˚
);

272 
	`¥ötf
("Sam∂ög fªquícy: %d\n", 
ßm∂ög_‰equícy
[
ˇ±uª_sour˚
]);

273 i‡(
ßm∂ög_‰equícy
[
ˇ±uª_sour˚
] != 0)

275 
≥riod_vÆue
 = (32e6/
ßm∂ög_‰equícy
[
ˇ±uª_sour˚
]) - 1;

279 
	`Ârötf
(
°dîr
 ,"ERROR: Sampling frequency isÇull\n");

284 
	`lgw_ªg_w
(
SX1302_REG_CAPTURE_RAM_CAPTURE_PERIOD_0_CAPTUREPERIOD
, 
≥riod_vÆue
 & 0xFF);

285 
	`lgw_ªg_w
(
SX1302_REG_CAPTURE_RAM_CAPTURE_PERIOD_1_CAPTUREPERIOD
, (
≥riod_vÆue
>>8) & 0xFF);

294 
	`lgw_ªg_w
(
SX1302_REG_CAPTURE_RAM_CAPTURE_CFG_CAPTURESTART
, 1);

299 
	`lgw_ªg_r
(
SX1302_REG_CAPTURE_RAM_STATUS_CAPCOMPLETE
, &
vÆ
);

301 
	`waô_ms
(10);

302 i‡((
quô_sig
 =1Ë|| (
exô_sig
 == 1)) {

305 } 
vÆ
 != 1);

306 
	`lgw_ªg_w
(
SX1302_REG_CAPTURE_RAM_CAPTURE_CFG_CAPTURESTART
, 0);

314 
	`lgw_ªg_w
(
SX1302_REG_COMMON_PAGE_PAGE
, 1);

315 
	`lgw_mem_rb
(0, 
ˇ±uª_øm_buf„r
, 
CAPTURE_RAM_SIZE
, 
Ál£
);

316 
	`lgw_ªg_w
(
SX1302_REG_COMMON_PAGE_PAGE
, 0);

318 
	`¥ötf
("Data:\n");

319 
i
 = 0; i < 
CAPTURE_RAM_SIZE
; i += 4)

321 i‡(((
ˇ±uª_sour˚
 >= 2) && (capture_source <= 3)) || (capture_source == 9))

323 
ªÆ
 = (
öt16_t
)((((
uöt16_t
)(
ˇ±uª_øm_buf„r
[
i
+3]) << 8) & 0xFF00) + ((uint16_t)capture_ram_buffer[i+2] & 0x00FF));

324 
imag
 = (
öt16_t
)((((
uöt16_t
)(
ˇ±uª_øm_buf„r
[
i
+1]) << 8) & 0xFF00) + ((uint16_t)capture_ram_buffer[i+0] & 0x00FF));

325 
ªÆ
 >>= 4;

326 
imag
 >>= 4;

328 i‡((
ˇ±uª_sour˚
 >= 4) && (capture_source <= 6))

330 
ªÆ
 = (
öt16_t
)((((
uöt16_t
)(
ˇ±uª_øm_buf„r
[
i
+3]) << 8) & 0xFF00) + ((uint16_t)capture_ram_buffer[i+2] & 0x00FF));

331 
imag
 = (
öt16_t
)((((
uöt16_t
)(
ˇ±uª_øm_buf„r
[
i
+1]) << 8) & 0xFF00) + ((uint16_t)capture_ram_buffer[i+0] & 0x00FF));

333 i‡((
ˇ±uª_sour˚
 >= 10) && (capture_source <= 17))

335 
ªÆ
 = (
öt8_t
)(
ˇ±uª_øm_buf„r
[
i
+3]);

336 
imag
 = (
öt8_t
)(
ˇ±uª_øm_buf„r
[
i
+1]);

340 
ªÆ
 = 0;

341 
imag
 = 0;

344 i‡(((
ˇ±uª_sour˚
 >= 2) && (capture_source <= 6)) || ((capture_source >= 9) && (capture_source <= 17)))

346 
	`Ârötf
(
°dout
, "%d", 
ªÆ
);

347 i‡(
imag
 >= 0)

349 
	`Ârötf
(
°dout
, "+");

351 
	`Ârötf
(
°dout
, "%di\n", 
imag
);

355 
	`¥ötf
("%02X ", 
ˇ±uª_øm_buf„r
[
i
]);

358 
	`¥ötf
("End of Data\n");

360 #i‡
FULL_INIT


362 i‡(
	`sy°em
("./reset_lgw.sh stop") != 0) {

363 
	`¥ötf
("ERROR: failedÅoÑeset SX1302, check yourÑeset_lgw.sh script\n");

364 
	`exô
(
EXIT_FAILURE
);

369 
	}
}

	@hal/test/test_loragw_counter.c

20 #i‡
__STDC_VERSION__
 >= 199901L

21 
	#_XOPEN_SOURCE
 600

	)

23 
	#_XOPEN_SOURCE
 500

	)

26 
	~<°döt.h
>

27 
	~<°dio.h
>

28 
	~<°dlib.h
>

29 
	~<°rög.h
>

30 
	~<uni°d.h
>

31 
	~<sig«l.h
>

32 
	~<m©h.h
>

34 
	~"l‹agw_hÆ.h
"

35 
	~"l‹agw_ªg.h
"

36 
	~"l‹agw_aux.h
"

41 
	#LINUXDEV_PATH_DEFAULT
 "/dev/•idev1.0"

	)

43 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

44 
	#RAND_RANGE
(
mö
, 
max
Ë(
	`ønd
(Ë% (max + 1 - möË+ mö)

	)

49 
	#DEFAULT_FREQ_HZ
 868500000U

	)

54 
	gexô_sig
 = 0;

55 
	gquô_sig
 = 0;

60 
	$sig_h™dÀr
(
sigio
) {

61 i‡(
sigio
 =
SIGQUIT
) {

62 
quô_sig
 = 1;;

63 } i‡((
sigio
 =
SIGINT
Ë|| (sigiÿ=
SIGTERM
)) {

64 
exô_sig
 = 1;

66 
	}
}

68 
	$ußge
() {

70 
	`¥ötf
( "Available options:\n");

71 
	`¥ötf
( " -hÖrintÅhis help\n");

72 
	`¥ötf
( " -k <uint> Concentrator clock source (Radio A or Radio B) [0..1]\n");

73 
	`¥ötf
( " -r <uint> RadioÅype (1255, 1257, 1250)\n");

74 
	`¥ötf
( " -p Test PPSÅrig counter when set\n" );

75 
	}
}

80 
	$maö
(
¨gc
, **
¨gv
)

83 c⁄° 
•idev_∑th_deÁu…
[] = 
LINUXDEV_PATH_DEFAULT
;

84 c⁄° * 
•idev_∑th
 = 
•idev_∑th_deÁu…
;

86 
siga˘i⁄
 
siga˘
;

88 
i
, 
x
;

89 
uöt32_t
 
Á
 = 
DEFAULT_FREQ_HZ
;

90 
uöt32_t
 
fb
 = 
DEFAULT_FREQ_HZ
;

91 
¨g_u
;

92 
uöt8_t
 
˛ocksour˚
 = 0;

93 
lgw_ødio_ty≥_t
 
ødio_ty≥
 = 
LGW_RADIO_TYPE_NONE
;

95 
lgw_c⁄f_bﬂrd_s
 
bﬂrdc⁄f
;

96 
lgw_c⁄f_rxrf_s
 
rfc⁄f
;

97 
lgw_c⁄f_rxif_s
 
ifc⁄f
;

99 
uöt32_t
 
cou¡î
;

100 
boﬁ
 
åig_˙t
 = 
Ál£
;

102 c⁄° 
öt32_t
 
ch™√l_if
[9] = {

114 c⁄° 
uöt8_t
 
ch™√l_rfchaö
[9] = { 1, 1, 1, 0, 0, 0, 0, 0, 1 };

117 (
i
 = 
	`gë›t
 (
¨gc
, 
¨gv
, "hk:r:p")) != -1) {

118 
i
) {

120 
	`ußge
();

124 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

125 i‡((
i
 !1Ë|| ((
¨g_u
 != 1255) && (arg_u != 1257) && (arg_u != 1250))) {

126 
	`¥ötf
("ERROR:árgumentÖarsing of -rárgument. Use -hÅoÖrint help\n");

127  
EXIT_FAILURE
;

129 
¨g_u
) {

131 
ødio_ty≥
 = 
LGW_RADIO_TYPE_SX1255
;

134 
ødio_ty≥
 = 
LGW_RADIO_TYPE_SX1257
;

137 
ødio_ty≥
 = 
LGW_RADIO_TYPE_SX1250
;

143 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

144 i‡((
i
 !1Ë|| (
¨g_u
 > 1)) {

145 
	`¥ötf
("ERROR:árgumentÖarsing of -kárgument. Use -hÅoÖrint help\n");

146  
EXIT_FAILURE
;

148 
˛ocksour˚
 = (
uöt8_t
)
¨g_u
;

152 
åig_˙t
 = 
åue
;

155 
	`¥ötf
("ERROR:árgumentÖarsing\n");

156 
	`ußge
();

162 
	`sigem±y£t
(&
siga˘
.
ß_mask
);

163 
siga˘
.
ß_Êags
 = 0;

164 
siga˘
.
ß_h™dÀr
 = 
sig_h™dÀr
;

165 
	`siga˘i⁄
(
SIGQUIT
, &
siga˘
, 
NULL
);

166 
	`siga˘i⁄
(
SIGINT
, &
siga˘
, 
NULL
);

167 
	`siga˘i⁄
(
SIGTERM
, &
siga˘
, 
NULL
);

169 
	`¥ötf
("===== sx1302 counterÅest =====\n");

172 i‡(
	`sy°em
("./reset_lgw.sh start") != 0) {

173 
	`¥ötf
("ERROR: failedÅoÑeset SX1302, check yourÑeset_lgw.sh script\n");

174 
	`exô
(
EXIT_FAILURE
);

178 
	`mem£t
–&
bﬂrdc⁄f
, 0,  boardconf);

179 
bﬂrdc⁄f
.
l‹aw™_public
 = 
åue
;

180 
bﬂrdc⁄f
.
˛k§c
 = 
˛ocksour˚
;

181 
bﬂrdc⁄f
.
fuŒ_du∂ex
 = 
Ál£
;

182 
	`°∫˝y
(
bﬂrdc⁄f
.
•idev_∑th
, spidev_path,  boardconf.spidev_path);

183 
bﬂrdc⁄f
.
•idev_∑th
[ boardconf.spidev_path - 1] = '\0';

184 i‡(
	`lgw_bﬂrd_£tc⁄f
(&
bﬂrdc⁄f
Ë!
LGW_HAL_SUCCESS
) {

185 
	`¥ötf
("ERROR: failedÅo configure board\n");

186  
EXIT_FAILURE
;

190 
	`mem£t
–&
rfc⁄f
, 0, Ñfconf);

191 
rfc⁄f
.
íabÀ
 = 
åue
;

192 
rfc⁄f
.
‰eq_hz
 = 
Á
;

193 
rfc⁄f
.
ty≥
 = 
ødio_ty≥
;

194 
rfc⁄f
.
tx_íabÀ
 = 
Ál£
;

195 
rfc⁄f
.
sögÀ_öput_mode
 = 
Ál£
;

196 i‡(
	`lgw_rxrf_£tc⁄f
(0, &
rfc⁄f
Ë!
LGW_HAL_SUCCESS
) {

197 
	`¥ötf
("ERROR: failedÅo configureÑxrf 0\n");

198  
EXIT_FAILURE
;

201 
	`mem£t
–&
rfc⁄f
, 0, Ñfconf);

202 
rfc⁄f
.
íabÀ
 = 
åue
;

203 
rfc⁄f
.
‰eq_hz
 = 
fb
;

204 
rfc⁄f
.
ty≥
 = 
ødio_ty≥
;

205 
rfc⁄f
.
tx_íabÀ
 = 
Ál£
;

206 
rfc⁄f
.
sögÀ_öput_mode
 = 
Ál£
;

207 i‡(
	`lgw_rxrf_£tc⁄f
(1, &
rfc⁄f
Ë!
LGW_HAL_SUCCESS
) {

208 
	`¥ötf
("ERROR: failedÅo configureÑxrf 1\n");

209  
EXIT_FAILURE
;

213 
	`mem£t
(&
ifc⁄f
, 0, (ifconf));

214 
i
 = 0; i < 9; i++) {

215 
ifc⁄f
.
íabÀ
 = 
åue
;

216 
ifc⁄f
.
rf_chaö
 = 
ch™√l_rfchaö
[
i
];

217 
ifc⁄f
.
‰eq_hz
 = 
ch™√l_if
[
i
];

218 
ifc⁄f
.
d©¨©e
 = 
DR_LORA_SF7
;

219 i‡(
	`lgw_rxif_£tc⁄f
(
i
, &
ifc⁄f
Ë!
LGW_HAL_SUCCESS
) {

220 
	`¥ötf
("ERROR: faûedÅÿc⁄figuªÑxi‡%d\n", 
i
);

221  
EXIT_FAILURE
;

226 
x
 = 
	`lgw_°¨t
();

227 i‡(
x
 != 0) {

228 
	`¥ötf
("ERROR: failedÅo startÅhe gateway\n");

229  
EXIT_FAILURE
;

233  (
quô_sig
 !1Ë&& (
exô_sig
 != 1) ) {

234 i‡(
åig_˙t
 =
Ál£
) {

235 
	`lgw_gë_ö°˙t
(&
cou¡î
);

237 
	`lgw_gë_åig˙t
(&
cou¡î
);

239 
	`waô_ms
(10);

240 
	`¥ötf
("%u\n", 
cou¡î
);

244 
x
 = 
	`lgw_°›
();

245 i‡(
x
 != 0) {

246 
	`¥ötf
("ERROR: failedÅo stopÅhe gateway\n");

247  
EXIT_FAILURE
;

251 i‡(
	`sy°em
("./reset_lgw.sh stop") != 0) {

252 
	`¥ötf
("ERROR: failedÅoÑeset SX1302, check yourÑeset_lgw.sh script\n");

253 
	`exô
(
EXIT_FAILURE
);

256 
	`¥ötf
("=========== Test End ===========\n");

259 
	}
}

	@hal/test/test_loragw_gps.c

20 #i‡
__STDC_VERSION__
 >= 199901L

21 
	#_XOPEN_SOURCE
 600

	)

23 
	#_XOPEN_SOURCE
 500

	)

26 
	~<°döt.h
>

27 
	~<°dboﬁ.h
>

28 
	~<°dio.h
>

29 
	~<°rög.h
>

30 
	~<sig«l.h
>

31 
	~<°dlib.h
>

32 
	~<uni°d.h
>

34 
	~"l‹agw_hÆ.h
"

35 
	~"l‹agw_gps.h
"

36 
	~"l‹agw_aux.h
"

41 
	#MATCH
(
a
,
b
Ë–((
öt32_t
)◊-b)<=1Ë&& ((öt32_t)◊-b)>=-1ËË

	)

46 
	#LINUXDEV_PATH_DEFAULT
 "/dev/•idev1.0"

	)

51 
	gexô_sig
 = 0;

52 
	gquô_sig
 = 0;

54 
åef
 
	gµm_ªf
;

59 
sig_h™dÀr
(
sigio
);

60 
gps_¥o˚ss_sync
();

61 
gps_¥o˚ss_co‹ds
();

66 
	$ußge
() {

68 
	`¥ötf
( "Available options:\n");

69 
	`¥ötf
( " -hÖrintÅhis help\n");

70 
	`¥ötf
( " -k <uint> Concentrator clock source (Radio A or Radio B) [0..1]\n");

71 
	`¥ötf
( " -r <uint> RadioÅype (1255, 1257, 1250)\n");

72 
	}
}

74 
	$sig_h™dÀr
(
sigio
) {

75 i‡(
sigio
 =
SIGQUIT
) {

76 
quô_sig
 = 1;;

77 } i‡((
sigio
 =
SIGINT
Ë|| (sigiÿ=
SIGTERM
)) {

78 
exô_sig
 = 1;

80 
	}
}

82 
	$gps_¥o˚ss_sync
() {

84 
uöt32_t
 
µm_t°amp
;

85 
time•ec
 
µm_gps
;

86 
time•ec
 
µm_utc
;

89 
uöt32_t
 
x
, 
z
;

90 
time•ec
 
y
;

93 
i
 = 
	`lgw_gps_gë
(&
µm_utc
, &
µm_gps
, 
NULL
, NULL);

94 i‡(
i
 !
LGW_GPS_SUCCESS
) {

95 
	`¥ötf
(" No validÑeference GPSÅimeávailable, synchronization impossible.\n");

100 
i
 = 
	`lgw_gë_åig˙t
(&
µm_t°amp
);

101 i‡(
i
 !
LGW_HAL_SUCCESS
) {

102 
	`¥ötf
(" FailedÅoÑeadÅimestamp, synchronization impossible.\n");

107 
i
 = 
	`lgw_gps_sync
(&
µm_ªf
, 
µm_t°amp
, 
µm_utc
, 
µm_gps
);

108 i‡(
i
 !
LGW_GPS_SUCCESS
) {

109 
	`¥ötf
(" SynchronizationÉrror.\n");

114 
	`¥ötf
(" * Synchronization successful *\n");

115 
	`¥ötf
(" UTCÑe„ªn˚Åime: %Œd.%09ld\n", ()
µm_ªf
.
utc
.
tv_£c
,Öpm_ªf.utc.
tv_n£c
);

116 
	`¥ötf
(" GPSÑe„ªn˚Åime: %Œd.%09ld\n", ()
µm_ªf
.
gps
.
tv_£c
,Öpm_ªf.gps.
tv_n£c
);

117 
	`¥ötf
(" I¡î«»cou¡îÑe„ªn˚ vÆue: %u\n", 
µm_ªf
.
cou¡_us
);

118 
	`¥ötf
(" ClockÉº‹: %.9f\n", 
µm_ªf
.
xèl_îr
);

120 
x
 = 
µm_t°amp
 + 500000;

123 
	`¥ötf
("\n");

124 
	`¥ötf
(" * Test ofÅimestamp counter <-> GPS value conversion *\n");

125 
	`¥ötf
(" Te° vÆue: %u\n", 
x
);

126 
	`lgw_˙t2gps
(
µm_ªf
, 
x
, &
y
);

127 
	`¥ötf
(" C⁄vîsi⁄ÅÿGPS: %Œd.%09ld\n", ()
y
.
tv_£c
, y.
tv_n£c
);

128 
	`lgw_gps2˙t
(
µm_ªf
, 
y
, &
z
);

129 
	`¥ötf
(" C⁄vîãd back: %u ==> %d¬µs\n", 
z
, (
öt32_t
)(z-
x
));

131 i‡(
	`MATCH
(
x
,
z
)) {

132 
	`¥ötf
(" ** PASS **: (SX1302 -> GPS -> SX1302) conversion MATCH\n");

134 
	`¥ötf
(" ** FAILED **: (SX1302 -> GPS -> SX1302) conversion MISMATCH\n");

138 
	`¥ötf
("\n");

139 
	`¥ötf
(" * Test ofÅimestamp counter <-> UTC value conversion *\n");

140 
	`¥ötf
(" Te° vÆue: %u\n", 
x
);

141 
	`lgw_˙t2utc
(
µm_ªf
, 
x
, &
y
);

142 
	`¥ötf
(" C⁄vîsi⁄ÅÿUTC: %Œd.%09ld\n", ()
y
.
tv_£c
, y.
tv_n£c
);

143 
	`lgw_utc2˙t
(
µm_ªf
, 
y
, &
z
);

144 
	`¥ötf
(" C⁄vîãd back: %u ==> %d¬µs\n", 
z
, (
öt32_t
)(z-
x
));

146 i‡(
	`MATCH
(
x
,
z
)) {

147 
	`¥ötf
(" ** PASS **: (SX1302 -> UTC -> SX1302) conversion MATCH\n");

149 
	`¥ötf
(" ** FAILED **: (SX1302 -> UTC -> SX1302) conversion MISMATCH\n");

151 
	}
}

153 
	$gps_¥o˚ss_co‹ds
() {

155 
co‹d_s
 
co‹d
;

156 
co‹d_s
 
gp£º
;

157 
i
 = 
	`lgw_gps_gë
(
NULL
, NULL, &
co‹d
, &
gp£º
);

160 i‡(
i
 =
LGW_GPS_SUCCESS
) {

161 
	`¥ötf
("\n");

162 
	`¥ötf
("# GPS co‹dö©es:Ü©ôudê%.5f,Ü⁄gôudê%.5f,á…ôudê%òm\n", 
co‹d
.
œt
, co‹d.
l⁄
, co‹d.
Æt
);

163 
	`¥ötf
("# GPSÉº:Ü©ôudê%.5f,Ü⁄gôudê%.5f,á…ôudê%òm\n", 
gp£º
.
œt
, gp£º.
l⁄
, gp£º.
Æt
);

165 
	}
}

170 
	$maö
(
¨gc
, **
¨gv
)

173 c⁄° 
•idev_∑th_deÁu…
[] = 
LINUXDEV_PATH_DEFAULT
;

174 c⁄° * 
•idev_∑th
 = 
•idev_∑th_deÁu…
;

176 
siga˘i⁄
 
siga˘
;

178 
i
;

179 
¨g_u
;

182 
uöt8_t
 
˛ocksour˚
 = 0;

183 
lgw_ødio_ty≥_t
 
ødio_ty≥
 = 
LGW_RADIO_TYPE_NONE
;

184 
lgw_c⁄f_bﬂrd_s
 
bﬂrdc⁄f
;

185 
lgw_c⁄f_rxrf_s
 
rfc⁄f
;

188 
£rül_buff
[128];

189 
size_t
 
wr_idx
 = 0;

190 
gps_ây_dev
;

193 
gps_msg
 
œã°_msg
;

196 (
i
 = 
	`gë›t
 (
¨gc
, 
¨gv
, "hk:r:")) != -1) {

197 
i
) {

199 
	`ußge
();

203 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

204 i‡((
i
 !1Ë|| ((
¨g_u
 != 1255) && (arg_u != 1257) && (arg_u != 1250))) {

205 
	`¥ötf
("ERROR:árgumentÖarsing of -rárgument. Use -hÅoÖrint help\n");

206  
EXIT_FAILURE
;

208 
¨g_u
) {

210 
ødio_ty≥
 = 
LGW_RADIO_TYPE_SX1255
;

213 
ødio_ty≥
 = 
LGW_RADIO_TYPE_SX1257
;

216 
ødio_ty≥
 = 
LGW_RADIO_TYPE_SX1250
;

222 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

223 i‡((
i
 !1Ë|| (
¨g_u
 > 1)) {

224 
	`¥ötf
("ERROR:árgumentÖarsing of -kárgument. Use -hÅoÖrint help\n");

225  
EXIT_FAILURE
;

227 
˛ocksour˚
 = (
uöt8_t
)
¨g_u
;

231 
	`¥ötf
("ERROR:árgumentÖarsing\n");

232 
	`ußge
();

233 
	`exô
(
EXIT_FAILURE
);

238 i‡(
ødio_ty≥
 =
LGW_RADIO_TYPE_NONE
) {

239 
	`¥ötf
("ERROR:ÑadioÅype must be specified\n");

240 
	`ußge
();

241 
	`exô
(
EXIT_FAILURE
);

245 
	`sigem±y£t
(&
siga˘
.
ß_mask
);

246 
siga˘
.
ß_Êags
 = 0;

247 
siga˘
.
ß_h™dÀr
 = 
sig_h™dÀr
;

248 
	`siga˘i⁄
(
SIGQUIT
, &
siga˘
, 
NULL
);

249 
	`siga˘i⁄
(
SIGINT
, &
siga˘
, 
NULL
);

250 
	`siga˘i⁄
(
SIGTERM
, &
siga˘
, 
NULL
);

253 
	`¥ötf
("Beginning ofÅest forÜoragw_gps.c\n");

254 
	`¥ötf
("*** Libøry vîsi⁄ inf‹m©i⁄ ***\n%s\n***\n", 
	`lgw_vîsi⁄_öfo
());

257 i‡(
	`sy°em
("./reset_lgw.sh start") != 0) {

258 
	`¥ötf
("ERROR: failedÅoÑeset SX1302, check yourÑeset_lgw.sh script\n");

259 
	`exô
(
EXIT_FAILURE
);

263 
i
 = 
	`lgw_gps_íabÀ
("/dev/âyS0", "ubx7", 0, &
gps_ây_dev
);

264 i‡(
i
 !
LGW_GPS_SUCCESS
) {

265 
	`¥ötf
("ERROR: FailedÅoÉnable GPS\n");

266 
	`exô
(
EXIT_FAILURE
);

271 
	`mem£t
(&
bﬂrdc⁄f
, 0, (boardconf));

272 
bﬂrdc⁄f
.
l‹aw™_public
 = 
åue
;

273 
bﬂrdc⁄f
.
˛k§c
 = 
˛ocksour˚
;

274 
bﬂrdc⁄f
.
fuŒ_du∂ex
 = 
Ál£
;

275 
	`°∫˝y
(
bﬂrdc⁄f
.
•idev_∑th
, spidev_path,  boardconf.spidev_path);

276 
bﬂrdc⁄f
.
•idev_∑th
[ boardconf.spidev_path - 1] = '\0';

277 i‡(
	`lgw_bﬂrd_£tc⁄f
(&
bﬂrdc⁄f
Ë!
LGW_HAL_SUCCESS
) {

278 
	`¥ötf
("ERROR: failedÅo configure board\n");

279  
EXIT_FAILURE
;

283 
	`mem£t
–&
rfc⁄f
, 0, Ñfconf);

284 
rfc⁄f
.
íabÀ
 = 
åue
;

285 
rfc⁄f
.
‰eq_hz
 = 868000000;

286 
rfc⁄f
.
rssi_off£t
 = 0.0;

287 
rfc⁄f
.
ty≥
 = 
ødio_ty≥
;

288 
rfc⁄f
.
tx_íabÀ
 = 
Ál£
;

289 
rfc⁄f
.
sögÀ_öput_mode
 = 
Ál£
;

290 i‡(
	`lgw_rxrf_£tc⁄f
(0, &
rfc⁄f
Ë!
LGW_HAL_SUCCESS
) {

291 
	`¥ötf
("ERROR: failedÅo configureÑxrf 0\n");

292  
EXIT_FAILURE
;

295 
	`mem£t
–&
rfc⁄f
, 0, Ñfconf);

296 
rfc⁄f
.
íabÀ
 = 
åue
;

297 
rfc⁄f
.
‰eq_hz
 = 868000000;

298 
rfc⁄f
.
rssi_off£t
 = 0.0;

299 
rfc⁄f
.
ty≥
 = 
ødio_ty≥
;

300 
rfc⁄f
.
tx_íabÀ
 = 
Ál£
;

301 
rfc⁄f
.
sögÀ_öput_mode
 = 
Ál£
;

302 i‡(
	`lgw_rxrf_£tc⁄f
(1, &
rfc⁄f
Ë!
LGW_HAL_SUCCESS
) {

303 
	`¥ötf
("ERROR: failedÅo configureÑxrf 1\n");

304  
EXIT_FAILURE
;

308 i‡(
	`lgw_°¨t
(Ë!
LGW_HAL_SUCCESS
) {

309 
	`¥ötf
("ERROR: IMPOSSIBLE TO START THE GATEWAY\n");

310 
	`exô
(
EXIT_FAILURE
);

314 
	`mem£t
(
£rül_buff
, 0,  serial_buff);

315 
	`mem£t
(&
µm_ªf
, 0, Öpm_ref);

318 (
quô_sig
 !1Ë&& (
exô_sig
 != 1)) {

319 
size_t
 
rd_idx
 = 0;

320 
size_t
 
‰ame_íd_idx
 = 0;

323 
ssize_t
 
nb_ch¨
 = 
	`ªad
(
gps_ây_dev
, 
£rül_buff
 + 
wr_idx
, 
LGW_GPS_MIN_MSG_SIZE
);

324 i‡(
nb_ch¨
 <= 0) {

325 
	`¥ötf
("WARNING: [gps]Ñód(Ëªtu∫ed vÆuê%zd\n", 
nb_ch¨
);

328 
wr_idx
 +(
size_t
)
nb_ch¨
;

334 
rd_idx
 < 
wr_idx
) {

335 
size_t
 
‰ame_size
 = 0;

338 i‡(
£rül_buff
[
rd_idx
] =()
LGW_GPS_UBX_SYNC_CHAR
) {

343 
œã°_msg
 = 
	`lgw_∑r£_ubx
(&
£rül_buff
[
rd_idx
], (
wr_idx
 -Ñd_idx), &
‰ame_size
);

345 i‡(
‰ame_size
 > 0) {

346 i‡(
œã°_msg
 =
INCOMPLETE
) {

348 
‰ame_size
 = 0;

349 } i‡(
œã°_msg
 =
INVALID
) {

351 
	`¥ötf
("WARNING: [gps] couldÇot getá valid message from GPS (noÅime)\n");

352 
‰ame_size
 = 0;

353 } i‡(
œã°_msg
 =
UBX_NAV_TIMEGPS
) {

354 
	`¥ötf
("\n~~ UBX NAV-TIMEGPS sentence,Åriggering synchronizationáttempt ~~\n");

355 
	`gps_¥o˚ss_sync
();

358 } if(
£rül_buff
[
rd_idx
] =()
LGW_GPS_NMEA_SYNC_CHAR
) {

363 * 
nmó_íd_±r
 = 
	`memchr
(&
£rül_buff
[
rd_idx
],()0x0a, (
wr_idx
 -Ñd_idx));

365 i‡(
nmó_íd_±r
) {

367 
‰ame_size
 = 
nmó_íd_±r
 - &
£rül_buff
[
rd_idx
] + 1;

368 
œã°_msg
 = 
	`lgw_∑r£_nmó
(&
£rül_buff
[
rd_idx
], 
‰ame_size
);

370 if(
œã°_msg
 =
INVALID
 ||Ü©e°_msg =
UNKNOWN
) {

372 
‰ame_size
 = 0;

373 } i‡(
œã°_msg
 =
NMEA_RMC
) {

374 
	`gps_¥o˚ss_co‹ds
();

379 i‡(
‰ame_size
 > 0) {

382 
rd_idx
 +
‰ame_size
;

383 
‰ame_íd_idx
 = 
rd_idx
;

385 
rd_idx
++;

389 i‡(
‰ame_íd_idx
) {

391 
	`mem˝y
(
£rül_buff
,&£rül_buff[
‰ame_íd_idx
],
wr_idx
 - frame_end_idx);

392 
wr_idx
 -
‰ame_íd_idx
;

396 i‡(((
£rül_buff
Ë- 
wr_idx
Ë< 
LGW_GPS_MIN_MSG_SIZE
) {

397 
	`mem˝y
(
£rül_buff
,&£rül_buff[
LGW_GPS_MIN_MSG_SIZE
],
wr_idx
 - LGW_GPS_MIN_MSG_SIZE);

398 
wr_idx
 -
LGW_GPS_MIN_MSG_SIZE
;

403 i‡(
exô_sig
 == 1) {

404 
	`lgw_gps_dißbÀ
(
gps_ây_dev
);

405 
	`lgw_°›
();

409 i‡(
	`sy°em
("./reset_lgw.sh stop") != 0) {

410 
	`¥ötf
("ERROR: failedÅoÑeset SX1302, check yourÑeset_lgw.sh script\n");

411 
	`exô
(
EXIT_FAILURE
);

414 
	`¥ötf
("\nEnd ofÅest forÜoragw_gps.c\n");

415 
	`exô
(
EXIT_SUCCESS
);

416 
	}
}

	@hal/test/test_loragw_hal_rx.c

20 #i‡
__STDC_VERSION__
 >= 199901L

21 
	#_XOPEN_SOURCE
 600

	)

23 
	#_XOPEN_SOURCE
 500

	)

26 
	~<°döt.h
>

27 
	~<°dio.h
>

28 
	~<°dlib.h
>

29 
	~<°rög.h
>

30 
	~<uni°d.h
>

31 
	~<sig«l.h
>

32 
	~<m©h.h
>

34 
	~"l‹agw_hÆ.h
"

35 
	~"l‹agw_ªg.h
"

36 
	~"l‹agw_aux.h
"

41 
	#LINUXDEV_PATH_DEFAULT
 "/dev/•idev1.0"

	)

43 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

44 
	#RAND_RANGE
(
mö
, 
max
Ë(
	`ønd
(Ë% (max + 1 - möË+ mö)

	)

49 
	#DEFAULT_FREQ_HZ
 868500000U

	)

54 
	gexô_sig
 = 0;

55 
	gquô_sig
 = 0;

60 
	$sig_h™dÀr
(
sigio
) {

61 i‡(
sigio
 =
SIGQUIT
) {

62 
quô_sig
 = 1;

63 } i‡((
sigio
 =
SIGINT
Ë|| (sigiÿ=
SIGTERM
)) {

64 
exô_sig
 = 1;

66 
	}
}

68 
	$ußge
() {

70 
	`¥ötf
("Available options:\n");

71 
	`¥ötf
(" -hÖrintÅhis help\n");

72 
	`¥ötf
(" -k <uint> Concentrator clock source (Radio A or Radio B) [0..1]\n");

73 
	`¥ötf
(" -r <uint> RadioÅype (1255, 1257, 1250)\n");

74 
	`¥ötf
(" -a <float> Radio A RX frequency in MHz\n");

75 
	`¥ötf
(" -b <float> Radio B RX frequency in MHz\n");

76 
	`¥ötf
(" -o <float> RSSI OffsetÅo beápplied in dB\n");

77 
	`¥ötf
(" -n <uint> Number ofÖacketÑeceived with CRC OK forÉach HAL start/stopÜoop\n");

78 
	`¥ötf
(" -z <uint> Size ofÅhe RXÖacketárrayÅo beÖassedÅoÜgw_receive()\n");

79 
	`¥ötf
(" -m <uint> Channel frequencyÖlan mode [0:LoRaWAN-like, 1:Same frequency foráll channels (-400000Hz on RF0)]\n");

80 
	`¥ötf
(" -j SetÑadio in single input mode (SX1250 only)\n");

81 
	}
}

86 
	$maö
(
¨gc
, **
¨gv
)

89 c⁄° 
•idev_∑th_deÁu…
[] = 
LINUXDEV_PATH_DEFAULT
;

90 c⁄° * 
•idev_∑th
 = 
•idev_∑th_deÁu…
;

92 
siga˘i⁄
 
siga˘
;

94 
i
, 
j
, 
x
;

95 
uöt32_t
 
Á
 = 
DEFAULT_FREQ_HZ
;

96 
uöt32_t
 
fb
 = 
DEFAULT_FREQ_HZ
;

97 
¨g_d
 = 0.0;

98 
¨g_u
;

99 
uöt8_t
 
˛ocksour˚
 = 0;

100 
lgw_ødio_ty≥_t
 
ødio_ty≥
 = 
LGW_RADIO_TYPE_NONE
;

101 
uöt8_t
 
max_rx_pkt
 = 16;

102 
boﬁ
 
sögÀ_öput_mode
 = 
Ál£
;

103 
rssi_off£t
 = 0.0;

105 
lgw_c⁄f_bﬂrd_s
 
bﬂrdc⁄f
;

106 
lgw_c⁄f_rxrf_s
 
rfc⁄f
;

107 
lgw_c⁄f_rxif_s
 
ifc⁄f
;

109 
nb_pkt_¸c_ok
 = 0, 
nb_lo›
 = 0, 
˙t_lo›
;

110 
nb_pkt
;

112 
uöt8_t
 
ch™√l_mode
 = 0;

114 c⁄° 
öt32_t
 
ch™√l_if_mode0
[9] = {

126 c⁄° 
öt32_t
 
ch™√l_if_mode1
[9] = {

138 c⁄° 
uöt8_t
 
ch™√l_rfchaö_mode0
[9] = { 1, 1, 1, 0, 0, 0, 0, 0, 1 };

140 c⁄° 
uöt8_t
 
ch™√l_rfchaö_mode1
[9] = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };

143 (
i
 = 
	`gë›t
 (
¨gc
, 
¨gv
, "hja:b:k:r:n:z:m:o:")) != -1) {

144 
i
) {

146 
	`ußge
();

150 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

151 i‡((
i
 !1Ë|| ((
¨g_u
 != 1255) && (arg_u != 1257) && (arg_u != 1250))) {

152 
	`¥ötf
("ERROR:árgumentÖarsing of -rárgument. Use -hÅoÖrint help\n");

153  
EXIT_FAILURE
;

155 
¨g_u
) {

157 
ødio_ty≥
 = 
LGW_RADIO_TYPE_SX1255
;

160 
ødio_ty≥
 = 
LGW_RADIO_TYPE_SX1257
;

163 
ødio_ty≥
 = 
LGW_RADIO_TYPE_SX1250
;

169 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

170 i‡((
i
 !1Ë|| (
¨g_u
 > 1)) {

171 
	`¥ötf
("ERROR:árgumentÖarsing of -kárgument. Use -hÅoÖrint help\n");

172  
EXIT_FAILURE
;

174 
˛ocksour˚
 = (
uöt8_t
)
¨g_u
;

178 
sögÀ_öput_mode
 = 
åue
;

181 
i
 = 
	`ssˇnf
(
›èrg
, "%lf", &
¨g_d
);

182 i‡(
i
 != 1) {

183 
	`¥ötf
("ERROR:árgumentÖarsing of -fárgument. Use -hÅoÖrint help\n");

184  
EXIT_FAILURE
;

186 
Á
 = (
uöt32_t
)((
¨g_d
*1e6) + 0.5);

190 
i
 = 
	`ssˇnf
(
›èrg
, "%lf", &
¨g_d
);

191 i‡(
i
 != 1) {

192 
	`¥ötf
("ERROR:árgumentÖarsing of -fárgument. Use -hÅoÖrint help\n");

193  
EXIT_FAILURE
;

195 
fb
 = (
uöt32_t
)((
¨g_d
*1e6) + 0.5);

199 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

200 i‡(
i
 != 1) {

201 
	`¥ötf
("ERROR:árgumentÖarsing of -nárgument. Use -hÅoÖrint help\n");

202  
EXIT_FAILURE
;

204 
nb_lo›
 = 
¨g_u
;

208 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

209 i‡(
i
 != 1) {

210 
	`¥ötf
("ERROR:árgumentÖarsing of -zárgument. Use -hÅoÖrint help\n");

211  
EXIT_FAILURE
;

213 
max_rx_pkt
 = 
¨g_u
;

217 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

218 i‡((
i
 !1Ë|| (
¨g_u
 > 1)) {

219 
	`¥ötf
("ERROR:árgumentÖarsing of -márgument. Use -hÅoÖrint help\n");

220  
EXIT_FAILURE
;

222 
ch™√l_mode
 = 
¨g_u
;

226 
i
 = 
	`ssˇnf
(
›èrg
, "%lf", &
¨g_d
);

227 i‡(
i
 != 1) {

228 
	`¥ötf
("ERROR:árgumentÖarsing of -fárgument. Use -hÅoÖrint help\n");

229  
EXIT_FAILURE
;

231 
rssi_off£t
 = ()
¨g_d
;

235 
	`¥ötf
("ERROR:árgumentÖarsing\n");

236 
	`ußge
();

242 
	`sigem±y£t
(&
siga˘
.
ß_mask
);

243 
siga˘
.
ß_Êags
 = 0;

244 
siga˘
.
ß_h™dÀr
 = 
sig_h™dÀr
;

245 
	`siga˘i⁄
(
SIGQUIT
, &
siga˘
, 
NULL
);

246 
	`siga˘i⁄
(
SIGINT
, &
siga˘
, 
NULL
);

247 
	`siga˘i⁄
(
SIGTERM
, &
siga˘
, 
NULL
);

249 
	`¥ötf
("===== sx1302 HAL RXÅest =====\n");

252 
	`mem£t
–&
bﬂrdc⁄f
, 0,  boardconf);

253 
bﬂrdc⁄f
.
l‹aw™_public
 = 
åue
;

254 
bﬂrdc⁄f
.
˛k§c
 = 
˛ocksour˚
;

255 
bﬂrdc⁄f
.
fuŒ_du∂ex
 = 
Ál£
;

256 
	`°∫˝y
(
bﬂrdc⁄f
.
•idev_∑th
, spidev_path,  boardconf.spidev_path);

257 
bﬂrdc⁄f
.
•idev_∑th
[ boardconf.spidev_path - 1] = '\0';

258 i‡(
	`lgw_bﬂrd_£tc⁄f
(&
bﬂrdc⁄f
Ë!
LGW_HAL_SUCCESS
) {

259 
	`¥ötf
("ERROR: failedÅo configure board\n");

260  
EXIT_FAILURE
;

264 
	`mem£t
–&
rfc⁄f
, 0, Ñfconf);

265 
rfc⁄f
.
íabÀ
 = 
åue
;

266 
rfc⁄f
.
‰eq_hz
 = 
Á
;

267 
rfc⁄f
.
ty≥
 = 
ødio_ty≥
;

268 
rfc⁄f
.
rssi_off£t
 =Ñssi_offset;

269 
rfc⁄f
.
tx_íabÀ
 = 
Ál£
;

270 
rfc⁄f
.
sögÀ_öput_mode
 = single_input_mode;

271 i‡(
	`lgw_rxrf_£tc⁄f
(0, &
rfc⁄f
Ë!
LGW_HAL_SUCCESS
) {

272 
	`¥ötf
("ERROR: failedÅo configureÑxrf 0\n");

273  
EXIT_FAILURE
;

276 
	`mem£t
–&
rfc⁄f
, 0, Ñfconf);

277 
rfc⁄f
.
íabÀ
 = 
åue
;

278 
rfc⁄f
.
‰eq_hz
 = 
fb
;

279 
rfc⁄f
.
ty≥
 = 
ødio_ty≥
;

280 
rfc⁄f
.
rssi_off£t
 =Ñssi_offset;

281 
rfc⁄f
.
tx_íabÀ
 = 
Ál£
;

282 
rfc⁄f
.
sögÀ_öput_mode
 = single_input_mode;

283 i‡(
	`lgw_rxrf_£tc⁄f
(1, &
rfc⁄f
Ë!
LGW_HAL_SUCCESS
) {

284 
	`¥ötf
("ERROR: failedÅo configureÑxrf 1\n");

285  
EXIT_FAILURE
;

289 
	`mem£t
(&
ifc⁄f
, 0, (ifconf));

290 
i
 = 0; i < 8; i++) {

291 
ifc⁄f
.
íabÀ
 = 
åue
;

292 i‡(
ch™√l_mode
 == 0) {

293 
ifc⁄f
.
rf_chaö
 = 
ch™√l_rfchaö_mode0
[
i
];

294 
ifc⁄f
.
‰eq_hz
 = 
ch™√l_if_mode0
[
i
];

295 } i‡(
ch™√l_mode
 == 1) {

296 
ifc⁄f
.
rf_chaö
 = 
ch™√l_rfchaö_mode1
[
i
];

297 
ifc⁄f
.
‰eq_hz
 = 
ch™√l_if_mode1
[
i
];

299 
	`¥ötf
("ERROR: channel modeÇot supported\n");

300  
EXIT_FAILURE
;

302 
ifc⁄f
.
d©¨©e
 = 
DR_LORA_SF7
;

303 i‡(
	`lgw_rxif_£tc⁄f
(
i
, &
ifc⁄f
Ë!
LGW_HAL_SUCCESS
) {

304 
	`¥ötf
("ERROR: faûedÅÿc⁄figuªÑxi‡%d\n", 
i
);

305  
EXIT_FAILURE
;

310 
	`mem£t
(&
ifc⁄f
, 0, (ifconf));

311 
ifc⁄f
.
rf_chaö
 = 
ch™√l_rfchaö_mode0
[
i
];

312 
ifc⁄f
.
‰eq_hz
 = 
ch™√l_if_mode0
[
i
];

313 
ifc⁄f
.
d©¨©e
 = 
DR_LORA_SF7
;

314 
ifc⁄f
.
b™dwidth
 = 
BW_250KHZ
;

315 i‡(
	`lgw_rxif_£tc⁄f
(8, &
ifc⁄f
Ë!
LGW_HAL_SUCCESS
) {

316 
	`¥ötf
("ERROR: failedÅo configureÑxif for LoRa service channel\n");

317  
EXIT_FAILURE
;

321 
lgw_pkt_rx_s
 
rxpkt
[
max_rx_pkt
];

322 
	`¥ötf
("INFO:Ñxpkàbuf„∏sizêi†£àtÿ%u\n", 
max_rx_pkt
);

323 
	`¥ötf
("INFO: Sñe˘ ch™√»modê%u\n", 
ch™√l_mode
);

326 
˙t_lo›
 = 0;

327  (
quô_sig
 !1Ë&& (
exô_sig
 != 1) )

329 
˙t_lo›
 += 1;

332 i‡(
	`sy°em
("/usr/bin/reset_lgw.sh start") != 0) {

333 
	`¥ötf
("ERROR: failedÅoÑeset SX1302, check yourÑeset_lgw.sh script\n");

334 
	`exô
(
EXIT_FAILURE
);

338 
x
 = 
	`lgw_°¨t
();

339 i‡(
x
 != 0) {

340 
	`¥ötf
("ERROR: failedÅo startÅhe gateway\n");

341  
EXIT_FAILURE
;

345 
	`¥ötf
("Waiting forÖackets...\n");

346 
nb_pkt_¸c_ok
 = 0;

347 ((
nb_pkt_¸c_ok
 < 
nb_lo›
Ë||Çb_lo› =0Ë&& (
quô_sig
 !1Ë&& (
exô_sig
 != 1)) {

349 
nb_pkt
 = 
	`lgw_ª˚ive
(
	`ARRAY_SIZE
(
rxpkt
),Ñxpkt);

351 i‡(
nb_pkt
 == 0) {

352 
	`waô_ms
(10);

354 
i
 = 0; i < 
nb_pkt
; i++) {

355 i‡(
rxpkt
[
i
].
°©us
 =
STAT_CRC_OK
) {

356 
nb_pkt_¸c_ok
 += 1;

358 
	`¥ötf
("\n----- %†∑ckë -----\n", (
rxpkt
[
i
].
moduœti⁄
 =
MOD_LORA
) ? "LoRa" : "FSK");

359 
	`¥ötf
(" cou¡_us: %u\n", 
rxpkt
[
i
].
cou¡_us
);

360 
	`¥ötf
(" size: %u\n", 
rxpkt
[
i
].
size
);

361 
	`¥ötf
(" ch™: %u\n", 
rxpkt
[
i
].
if_chaö
);

362 
	`¥ötf
(" sètus: 0x%02X\n", 
rxpkt
[
i
].
°©us
);

363 
	`¥ötf
(" d©r: %u\n", 
rxpkt
[
i
].
d©¨©e
);

364 
	`¥ötf
(" codr: %u\n", 
rxpkt
[
i
].
codî©e
);

365 
	`¥ötf
("Ñf_chaö %u\n", 
rxpkt
[
i
].
rf_chaö
);

366 
	`¥ötf
(" fªq_hz %u\n", 
rxpkt
[
i
].
‰eq_hz
);

367 
	`¥ötf
(" sƒ_avg: %.1f\n", 
rxpkt
[
i
].
¢r
);

368 
	`¥ötf
("Ñssi_ch™:%.1f\n", 
rxpkt
[
i
].
rssic
);

369 
	`¥ötf
("Ñssi_sig :%.1f\n", 
rxpkt
[
i
].
rssis
);

370 
	`¥ötf
(" crc: 0x%04X\n", 
rxpkt
[
i
].
¸c
);

371 
j
 = 0; j < 
rxpkt
[
i
].
size
; j++) {

372 
	`¥ötf
("%02X ", 
rxpkt
[
i
].
∑ylﬂd
[
j
]);

374 
	`¥ötf
("\n");

376 
	`¥ötf
("Re˚ived %dÖackë†—ŸÆ:%lu)\n", 
nb_pkt
, 
nb_pkt_¸c_ok
);

380 
	`¥ötf
–"\nNb vÆidÖackë†ª˚ived: %lu CRC OK (%lu)\n", 
nb_pkt_¸c_ok
, 
˙t_lo›
 );

383 
x
 = 
	`lgw_°›
();

384 i‡(
x
 != 0) {

385 
	`¥ötf
("ERROR: failedÅo stopÅhe gateway\n");

386  
EXIT_FAILURE
;

390 i‡(
	`sy°em
("/usr/bin/reset_lgw.sh stop") != 0) {

391 
	`¥ötf
("ERROR: failedÅoÑeset SX1302, check yourÑeset_lgw.sh script\n");

392 
	`exô
(
EXIT_FAILURE
);

396 
	`¥ötf
("=========== Test End ===========\n");

399 
	}
}

	@hal/test/test_loragw_hal_tx.c

20 #i‡
__STDC_VERSION__
 >= 199901L

21 
	#_XOPEN_SOURCE
 600

	)

23 
	#_XOPEN_SOURCE
 500

	)

26 
	~<°döt.h
>

27 
	~<°dio.h
>

28 
	~<°dlib.h
>

29 
	~<°rög.h
>

30 
	~<uni°d.h
>

31 
	~<m©h.h
>

32 
	~<sig«l.h
>

33 
	~<gë›t.h
>

35 
	~"l‹agw_hÆ.h
"

36 
	~"l‹agw_ªg.h
"

37 
	~"l‹agw_aux.h
"

42 
	#RAND_RANGE
(
mö
, 
max
Ë(
	`ønd
(Ë% (max + 1 - möË+ mö)

	)

47 
	#LINUXDEV_PATH_DEFAULT
 "/dev/•idev1.0"

	)

49 
	#DEFAULT_CLK_SRC
 0

	)

50 
	#DEFAULT_FREQ_HZ
 868500000U

	)

56 
	gexô_sig
 = 0;

57 
	gquô_sig
 = 0;

63 
	$ußge
() {

65 
	`¥ötf
("Available options:\n");

66 
	`¥ötf
(" -hÖrintÅhis help\n");

67 
	`¥ötf
(" -k <uint> Concentrator clock source (Radio A or Radio B) [0..1]\n");

68 
	`¥ötf
(" -c <uint> RF chainÅo be used for TX (Radio A or Radio B) [0..1]\n");

69 
	`¥ötf
(" -r <uint> RadioÅype (1255, 1257, 1250)\n");

70 
	`¥ötf
(" -f <float> Radio TX frequency in MHz\n");

71 
	`¥ötf
(" -m <str> modulationÅype ['CW', 'LORA', 'FSK']\n");

72 
	`¥ötf
(" -o <int> CW frequency offset from Radio TX frequency in kHz [-65..65]\n");

73 
	`¥ötf
(" -s <uint> LoRa datarate 0:random, [5..12]\n");

74 
	`¥ötf
(" -b <uint> LoRa bandwidth in khz 0:random, [125, 250, 500]\n");

75 
	`¥ötf
(" -l <uint> FSK/LoRaÖreambleÜength, [6..65535]\n");

76 
	`¥ötf
(" -d <uint> FSK frequency deviation in kHz [1:250]\n");

77 
	`¥ötf
(" -q <float> FSK bitrate in kbps [0.5:250]\n");

78 
	`¥ötf
(" -n <uint> Number ofÖacketsÅo be sent\n");

79 
	`¥ötf
(" -z <uint> size ofÖacketsÅo be sent 0:random, [9..255]\n");

80 
	`¥ötf
(" -t <uint> TX modeÅimestamped with delay in ms. If delay is 0, TX mode GPSÅrigger\n");

81 
	`¥ötf
(" -p <int> RFÖower in dBm\n");

82 
	`¥ötf
(" -i Send LoRaÖacket using inverted modulationÖolarity\n");

83 
	`¥ötf
(" -j SetÑadio in single input mode (SX1250 only)\n");

84 
	`¥ötf
( "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" );

85 
	`¥ötf
(" --pa <uint> PA gain SX125x:[0..3], SX1250:[0,1]\n");

86 
	`¥ötf
(" --dig <uint> sx1302 digital gain for sx125x [0..3]\n");

87 
	`¥ötf
(" --dac <uint> sx125x DAC gain [0..3]\n");

88 
	`¥ötf
(" --mix <uint> sx125x MIX gain [5..15]\n");

89 
	`¥ötf
(" --pwid <uint> sx1250Öower index [0..22]\n");

90 
	`¥ötf
( "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" );

91 
	`¥ötf
(" --nhdr Send LoRaÖacket with implicit header\n");

92 
	`¥ötf
( "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" );

93 
	`¥ötf
(" --loop Number ofÜoops for HAL start/stop (HAL unitaryÅest)\n");

94 
	}
}

97 
	$sig_h™dÀr
(
sigio
)

99 i‡(
sigio
 =
SIGQUIT
) {

100 
quô_sig
 = 1;

102 if((
sigio
 =
SIGINT
Ë|| (sigiÿ=
SIGTERM
)) {

103 
exô_sig
 = 1;

105 
	}
}

110 
	$maö
(
¨gc
, **
¨gv
)

112 
i
, 
x
;

113 
uöt32_t
 
·
 = 
DEFAULT_FREQ_HZ
;

114 
öt8_t
 
rf_powî
 = 0;

115 
uöt8_t
 
sf
 = 0;

116 
uöt16_t
 
bw_khz
 = 0;

117 
uöt32_t
 
nb_pkt
 = 1;

118 
nb_lo›
 = 1, 
˙t_lo›
;

119 
uöt8_t
 
size
 = 0;

120 
mod
[64] = "LORA";

121 
br_kbps
 = 50;

122 
uöt8_t
 
fdev_khz
 = 25;

123 
öt8_t
 
‰eq_off£t
 = 0;

124 
¨g_d
 = 0.0;

125 
¨g_u
;

126 
¨g_i
;

127 
¨g_s
[64];

128 
xf
 = 0.0;

129 
uöt8_t
 
˛ocksour˚
 = 0;

130 
uöt8_t
 
rf_chaö
 = 0;

131 
lgw_ødio_ty≥_t
 
ødio_ty≥
 = 
LGW_RADIO_TYPE_NONE
;

132 
uöt16_t
 
¥ómbÀ
 = 8;

133 
boﬁ
 
övît_pﬁ
 = 
Ál£
;

134 
boﬁ
 
no_hódî
 = 
Ál£
;

135 
boﬁ
 
sögÀ_öput_mode
 = 
Ál£
;

137 
lgw_c⁄f_bﬂrd_s
 
bﬂrdc⁄f
;

138 
lgw_c⁄f_rxrf_s
 
rfc⁄f
;

139 
lgw_pkt_tx_s
 
pkt
;

140 
lgw_tx_gaö_lut_s
 
txlut
;

141 
uöt8_t
 
tx_°©us
;

142 
uöt32_t
 
cou¡_us
;

143 
uöt32_t
 
åig_dñay_us
 = 1000000;

144 
boﬁ
 
åig_dñay
 = 
Ál£
;

147 c⁄° 
•idev_∑th_deÁu…
[] = 
LINUXDEV_PATH_DEFAULT
;

148 c⁄° * 
•idev_∑th
 = 
•idev_∑th_deÁu…
;

150 
siga˘i⁄
 
siga˘
;

153 
txlut
.
size
 = 0;

154 
	`mem£t
(
txlut
.
lut
, 0, Åxlut.lut);

157 
›ti⁄_ödex
 = 0;

158 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

159 {"∑", 
ªquúed_¨gumít
, 0, 0},

160 {"dac", 
ªquúed_¨gumít
, 0, 0},

161 {"dig", 
ªquúed_¨gumít
, 0, 0},

162 {"mix", 
ªquúed_¨gumít
, 0, 0},

163 {"pwid", 
ªquúed_¨gumít
, 0, 0},

164 {"lo›", 
ªquúed_¨gumít
, 0, 0},

165 {"nhdr", 
no_¨gumít
, 0, 0},

170 (
i
 = 
	`gë›t_l⁄g
 (
¨gc
, 
¨gv
, "hjif:s:b:n:z:p:k:r:c:l:t:m:o:q:d:", 
l⁄g_›ti⁄s
, &
›ti⁄_ödex
)) != -1) {

171 
i
) {

173 
	`ußge
();

177 
övît_pﬁ
 = 
åue
;

180 
sögÀ_öput_mode
 = 
åue
;

183 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

184 i‡((
i
 !1Ë|| ((
¨g_u
 != 1255) && (arg_u != 1257) && (arg_u != 1250))) {

185 
	`¥ötf
("ERROR:árgumentÖarsing of -rárgument. Use -hÅoÖrint help\n");

186  
EXIT_FAILURE
;

188 
¨g_u
) {

190 
ødio_ty≥
 = 
LGW_RADIO_TYPE_SX1255
;

193 
ødio_ty≥
 = 
LGW_RADIO_TYPE_SX1257
;

196 
ødio_ty≥
 = 
LGW_RADIO_TYPE_SX1250
;

202 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

203 i‡((
i
 !1Ë|| (
¨g_u
 > 65535)) {

204 
	`¥ötf
("ERROR:árgumentÖarsing of -lárgument. Use -hÅoÖrint help\n");

205  
EXIT_FAILURE
;

207 
¥ómbÀ
 = (
uöt16_t
)
¨g_u
;

211 
i
 = 
	`ssˇnf
(
›èrg
, "%s", 
¨g_s
);

212 i‡((
i
 !1Ë|| ((
	`°rcmp
(
¨g_s
, "CW") != 0) && (strcmp(arg_s, "LORA") != 0) && (strcmp(arg_s, "FSK")))) {

213 
	`¥ötf
("ERROR: invalid modulationÅype\n");

214  
EXIT_FAILURE
;

216 
	`•rötf
(
mod
, "%s", 
¨g_s
);

220 
i
 = 
	`ssˇnf
(
›èrg
, "%d", &
¨g_i
);

221 i‡((
¨g_i
 < -65) || (arg_i > 65)) {

222 
	`¥ötf
("ERROR: invalid frequency offset\n");

223  
EXIT_FAILURE
;

225 
‰eq_off£t
 = (
öt32_t
)
¨g_i
;

229 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

230 i‡((
i
 !1Ë|| (
¨g_u
 < 1) || (arg_u > 250)) {

231 
	`¥ötf
("ERROR: invalid FSK frequency deviation\n");

232  
EXIT_FAILURE
;

234 
fdev_khz
 = (
uöt8_t
)
¨g_u
;

238 
i
 = 
	`ssˇnf
(
›èrg
, "%f", &
xf
);

239 i‡((
i
 !1Ë|| (
xf
 < 0.5) || (xf > 250)) {

240 
	`¥ötf
("ERROR: invalid FSK bitrate\n");

241  
EXIT_FAILURE
;

243 
br_kbps
 = 
xf
;

247 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

248 i‡(
i
 != 1) {

249 
	`¥ötf
("ERROR:árgumentÖarsing of -tárgument. Use -hÅoÖrint help\n");

250  
EXIT_FAILURE
;

252 
åig_dñay
 = 
åue
;

253 
åig_dñay_us
 = (
uöt32_t
)(
¨g_u
 * 1E3);

257 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

258 i‡((
i
 !1Ë|| (
¨g_u
 > 1)) {

259 
	`¥ötf
("ERROR:árgumentÖarsing of -kárgument. Use -hÅoÖrint help\n");

260  
EXIT_FAILURE
;

262 
˛ocksour˚
 = (
uöt8_t
)
¨g_u
;

266 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

267 i‡((
i
 !1Ë|| (
¨g_u
 > 1)) {

268 
	`¥ötf
("ERROR:árgumentÖarsing of -cárgument. Use -hÅoÖrint help\n");

269  
EXIT_FAILURE
;

271 
rf_chaö
 = (
uöt8_t
)
¨g_u
;

275 
i
 = 
	`ssˇnf
(
›èrg
, "%lf", &
¨g_d
);

276 i‡(
i
 != 1) {

277 
	`¥ötf
("ERROR:árgumentÖarsing of -fárgument. Use -hÅoÖrint help\n");

278  
EXIT_FAILURE
;

280 
·
 = (
uöt32_t
)((
¨g_d
*1e6) + 0.5);

284 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

285 i‡((
i
 !1Ë|| (
¨g_u
 < 5) || (arg_u > 12)) {

286 
	`¥ötf
("ERROR:árgumentÖarsing of -sárgument. Use -hÅoÖrint help\n");

287  
EXIT_FAILURE
;

289 
sf
 = (
uöt8_t
)
¨g_u
;

293 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

294 i‡((
i
 !1Ë|| ((
¨g_u
 != 125) && (arg_u != 250) && (arg_u != 500))) {

295 
	`¥ötf
("ERROR:árgumentÖarsing of -bárgument. Use -hÅoÖrint help\n");

296  
EXIT_FAILURE
;

298 
bw_khz
 = (
uöt16_t
)
¨g_u
;

302 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

303 i‡(
i
 != 1) {

304 
	`¥ötf
("ERROR:árgumentÖarsing of -nárgument. Use -hÅoÖrint help\n");

305  
EXIT_FAILURE
;

307 
nb_pkt
 = (
uöt32_t
)
¨g_u
;

311 
i
 = 
	`ssˇnf
(
›èrg
, "%d", &
¨g_i
);

312 i‡(
i
 != 1) {

313 
	`¥ötf
("ERROR:árgumentÖarsing of -párgument. Use -hÅoÖrint help\n");

314  
EXIT_FAILURE
;

316 
rf_powî
 = (
öt8_t
)
¨g_i
;

317 
txlut
.
size
 = 1;

318 
txlut
.
lut
[0].
rf_powî
 =Ñf_power;

322 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

323 i‡((
i
 !1Ë|| (
¨g_u
 < 9) || (arg_u > 255)) {

324 
	`¥ötf
("ERROR:árgumentÖarsing of -zárgument. Use -hÅoÖrint help\n");

325  
EXIT_FAILURE
;

327 
size
 = (
uöt8_t
)
¨g_u
;

331 i‡(
	`°rcmp
(
l⁄g_›ti⁄s
[
›ti⁄_ödex
].
«me
, "pa") == 0) {

332 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

333 i‡((
i
 !1Ë|| (
¨g_u
 > 3)) {

334 
	`¥ötf
("ERROR:árgumentÖarsing of --paárgument. Use -hÅoÖrint help\n");

335  
EXIT_FAILURE
;

337 
txlut
.
size
 = 1;

338 
txlut
.
lut
[0].
∑_gaö
 = (
uöt8_t
)
¨g_u
;

340 } i‡(
	`°rcmp
(
l⁄g_›ti⁄s
[
›ti⁄_ödex
].
«me
, "dac") == 0) {

341 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

342 i‡((
i
 !1Ë|| (
¨g_u
 > 3)) {

343 
	`¥ötf
("ERROR:árgumentÖarsing of --dacárgument. Use -hÅoÖrint help\n");

344  
EXIT_FAILURE
;

346 
txlut
.
size
 = 1;

347 
txlut
.
lut
[0].
dac_gaö
 = (
uöt8_t
)
¨g_u
;

349 } i‡(
	`°rcmp
(
l⁄g_›ti⁄s
[
›ti⁄_ödex
].
«me
, "mix") == 0) {

350 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

351 i‡((
i
 !1Ë|| (
¨g_u
 > 15)) {

352 
	`¥ötf
("ERROR:árgumentÖarsing of --mixárgument. Use -hÅoÖrint help\n");

353  
EXIT_FAILURE
;

355 
txlut
.
size
 = 1;

356 
txlut
.
lut
[0].
mix_gaö
 = (
uöt8_t
)
¨g_u
;

358 } i‡(
	`°rcmp
(
l⁄g_›ti⁄s
[
›ti⁄_ödex
].
«me
, "dig") == 0) {

359 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

360 i‡((
i
 !1Ë|| (
¨g_u
 > 3)) {

361 
	`¥ötf
("ERROR:árgumentÖarsing of --digárgument. Use -hÅoÖrint help\n");

362  
EXIT_FAILURE
;

364 
txlut
.
size
 = 1;

365 
txlut
.
lut
[0].
dig_gaö
 = (
uöt8_t
)
¨g_u
;

367 } i‡(
	`°rcmp
(
l⁄g_›ti⁄s
[
›ti⁄_ödex
].
«me
, "pwid") == 0) {

368 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

369 i‡((
i
 !1Ë|| (
¨g_u
 > 22)) {

370 
	`¥ötf
("ERROR:árgumentÖarsing of --pwidárgument. Use -hÅoÖrint help\n");

371  
EXIT_FAILURE
;

373 
txlut
.
size
 = 1;

374 
txlut
.
lut
[0].
mix_gaö
 = 5;

375 
txlut
.
lut
[0].
pwr_idx
 = (
uöt8_t
)
¨g_u
;

377 } i‡(
	`°rcmp
(
l⁄g_›ti⁄s
[
›ti⁄_ödex
].
«me
, "loop") == 0) {

378 
	`¥ötf
("%p\n", 
›èrg
);

379 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

380 i‡(
i
 != 1) {

381 
	`¥ötf
("ERROR:árgumentÖarsing of --loopárgument. Use -hÅoÖrint help\n");

382  
EXIT_FAILURE
;

384 
nb_lo›
 = 
¨g_u
;

386 } i‡(
	`°rcmp
(
l⁄g_›ti⁄s
[
›ti⁄_ödex
].
«me
, "nhdr") == 0) {

387 
no_hódî
 = 
åue
;

389 
	`¥ötf
("ERROR:árgumentÖarsing options. Use -hÅoÖrint help\n");

390  
EXIT_FAILURE
;

394 
	`¥ötf
("ERROR:árgumentÖarsing\n");

395 
	`ußge
();

401 i‡(
	`°rcmp
(
mod
, "CW") == 0) {

402 
	`¥ötf
("Sídög %òCW o¿%u Hz (Fªq. off£à%d kHzË© %òdBm\n", 
nb_pkt
, 
·
, 
‰eq_off£t
, 
rf_powî
);

404 i‡(
	`°rcmp
(
mod
, "FSK") == 0) {

405 
	`¥ötf
("Sídög %òFSKÖackë†⁄ %u Hz (FDev %u kHz, Bôøã %.2f, %òbyã†∑ylﬂd, %òsymbﬁ†¥ómbÀË© %òdBm\n", 
nb_pkt
, 
·
, 
fdev_khz
, 
br_kbps
, 
size
, 
¥ómbÀ
, 
rf_powî
);

407 
	`¥ötf
("Sídög %òLoR®∑ckë†⁄ %u Hz (BW %òkHz, SF %i, CR %i, %òbyã†∑ylﬂd, %òsymbﬁ†¥ómbÀ, %†hódî, %†pﬁ¨ôyË© %òdBm\n", 
nb_pkt
, 
·
, 
bw_khz
, 
sf
, 1, 
size
, 
¥ómbÀ
, (
no_hódî
 =
Ál£
Ë? "ex∂icô" : "im∂icô", (
övît_pﬁ
 =Ál£Ë? "n⁄-övîãd" : "övîãd", 
rf_powî
);

411 
	`sigem±y£t
–&
siga˘
.
ß_mask
 );

412 
siga˘
.
ß_Êags
 = 0;

413 
siga˘
.
ß_h™dÀr
 = 
sig_h™dÀr
;

414 
	`siga˘i⁄
–
SIGQUIT
, &
siga˘
, 
NULL
 );

415 
	`siga˘i⁄
–
SIGINT
, &
siga˘
, 
NULL
 );

416 
	`siga˘i⁄
–
SIGTERM
, &
siga˘
, 
NULL
 );

419 
	`mem£t
–&
bﬂrdc⁄f
, 0,  boardconf);

420 
bﬂrdc⁄f
.
l‹aw™_public
 = 
åue
;

421 
bﬂrdc⁄f
.
˛k§c
 = 
˛ocksour˚
;

422 
bﬂrdc⁄f
.
fuŒ_du∂ex
 = 
Ál£
;

423 
	`°∫˝y
(
bﬂrdc⁄f
.
•idev_∑th
, spidev_path,  boardconf.spidev_path);

424 
bﬂrdc⁄f
.
•idev_∑th
[ boardconf.spidev_path - 1] = '\0';

425 i‡(
	`lgw_bﬂrd_£tc⁄f
(&
bﬂrdc⁄f
Ë!
LGW_HAL_SUCCESS
) {

426 
	`¥ötf
("ERROR: failedÅo configure board\n");

427  
EXIT_FAILURE
;

430 
	`mem£t
–&
rfc⁄f
, 0, Ñfconf);

431 
rfc⁄f
.
íabÀ
 = 
åue
;

432 
rfc⁄f
.
‰eq_hz
 = 
·
;

433 
rfc⁄f
.
ty≥
 = 
ødio_ty≥
;

434 
rfc⁄f
.
tx_íabÀ
 = 
åue
;

435 
rfc⁄f
.
sögÀ_öput_mode
 = single_input_mode;

436 i‡(
	`lgw_rxrf_£tc⁄f
(0, &
rfc⁄f
Ë!
LGW_HAL_SUCCESS
) {

437 
	`¥ötf
("ERROR: failedÅo configureÑxrf 0\n");

438  
EXIT_FAILURE
;

441 
	`mem£t
–&
rfc⁄f
, 0, Ñfconf);

442 
rfc⁄f
.
íabÀ
 = (((
rf_chaö
 =1Ë|| (
˛ocksour˚
 =1)Ë? 
åue
 : 
Ál£
);

443 
rfc⁄f
.
‰eq_hz
 = 
·
;

444 
rfc⁄f
.
ty≥
 = 
ødio_ty≥
;

445 
rfc⁄f
.
tx_íabÀ
 = 
Ál£
;

446 
rfc⁄f
.
sögÀ_öput_mode
 = single_input_mode;

447 i‡(
	`lgw_rxrf_£tc⁄f
(1, &
rfc⁄f
Ë!
LGW_HAL_SUCCESS
) {

448 
	`¥ötf
("ERROR: failedÅo configureÑxrf 1\n");

449  
EXIT_FAILURE
;

452 i‡(
txlut
.
size
 > 0) {

453 i‡(
	`lgw_txgaö_£tc⁄f
(
rf_chaö
, &
txlut
Ë!
LGW_HAL_SUCCESS
) {

454 
	`¥ötf
("ERROR: failedÅo configureÅxgainÜut\n");

455  
EXIT_FAILURE
;

459 
˙t_lo›
 = 0; c¡_lo› < 
nb_lo›
; cnt_loop++) {

461 i‡(
	`sy°em
("/usr/bin/reset_lgw.sh start") != 0) {

462 
	`¥ötf
("ERROR: failedÅoÑeset SX1302, check yourÑeset_lgw.sh script\n");

463 
	`exô
(
EXIT_FAILURE
);

467 
x
 = 
	`lgw_°¨t
();

468 i‡(
x
 != 0) {

469 
	`¥ötf
("ERROR: failedÅo startÅhe gateway\n");

470  
EXIT_FAILURE
;

474 
	`mem£t
(&
pkt
, 0, Ökt);

475 
pkt
.
rf_chaö
 =Ñf_chain;

476 
pkt
.
‰eq_hz
 = 
·
;

477 
pkt
.
rf_powî
 =Ñf_power;

478 i‡(
åig_dñay
 =
Ál£
) {

479 
pkt
.
tx_mode
 = 
IMMEDIATE
;

481 i‡(
åig_dñay_us
 == 0) {

482 
pkt
.
tx_mode
 = 
ON_GPS
;

484 
pkt
.
tx_mode
 = 
TIMESTAMPED
;

487 i‡–
	`°rcmp
–
mod
, "CW" ) == 0 ) {

488 
pkt
.
moduœti⁄
 = 
MOD_CW
;

489 
pkt
.
‰eq_off£t
 = freq_offset;

490 
pkt
.
f_dev
 = 
fdev_khz
;

492 if–
	`°rcmp
–
mod
, "FSK" ) == 0 ) {

493 
pkt
.
moduœti⁄
 = 
MOD_FSK
;

494 
pkt
.
no_¸c
 = 
Ál£
;

495 
pkt
.
d©¨©e
 = 
br_kbps
 * 1e3;

496 
pkt
.
f_dev
 = 
fdev_khz
;

498 
pkt
.
moduœti⁄
 = 
MOD_LORA
;

499 
pkt
.
codî©e
 = 
CR_LORA_4_5
;

500 
pkt
.
no_¸c
 = 
åue
;

502 
pkt
.
övît_pﬁ
 = invert_pol;

503 
pkt
.
¥ómbÀ
 =Öreamble;

504 
pkt
.
no_hódî
 =Ço_header;

505 
pkt
.
∑ylﬂd
[0] = 0x40;

506 
pkt
.
∑ylﬂd
[1] = 0xAB;

507 
pkt
.
∑ylﬂd
[2] = 0xAB;

508 
pkt
.
∑ylﬂd
[3] = 0xAB;

509 
pkt
.
∑ylﬂd
[4] = 0xAB;

510 
pkt
.
∑ylﬂd
[5] = 0x00;

511 
pkt
.
∑ylﬂd
[6] = 0;

512 
pkt
.
∑ylﬂd
[7] = 0;

513 
pkt
.
∑ylﬂd
[8] = 0x02;

514 
i
 = 9; i < 255; i++) {

515 
pkt
.
∑ylﬂd
[
i
] = i;

518 
i
 = 0; i < ()
nb_pkt
; i++) {

519 i‡(
åig_dñay
 =
åue
) {

520 i‡(
åig_dñay_us
 > 0) {

521 
	`lgw_gë_ö°˙t
(&
cou¡_us
);

522 
	`¥ötf
("cou¡_us:%u\n", 
cou¡_us
);

523 
pkt
.
cou¡_us
 = cou¡_u†+ 
åig_dñay_us
;

524 
	`¥ötf
("¥ogømmög TX f‹ %u\n", 
pkt
.
cou¡_us
);

526 
	`¥ötf
("programming TX forÇext PPS (GPS)\n");

530 if–
	`°rcmp
–
mod
, "LORA" ) == 0 ) {

531 
pkt
.
d©¨©e
 = (
sf
 =0Ë? (
uöt8_t
)
	`RAND_RANGE
(5, 12) : sf;

534 
bw_khz
) {

536 
pkt
.
b™dwidth
 = 
BW_125KHZ
;

539 
pkt
.
b™dwidth
 = 
BW_250KHZ
;

542 
pkt
.
b™dwidth
 = 
BW_500KHZ
;

545 
pkt
.
b™dwidth
 = (
uöt8_t
)
	`RAND_RANGE
(
BW_125KHZ
, 
BW_500KHZ
);

549 
pkt
.
size
 = (sizê=0Ë? (
uöt8_t
)
	`RAND_RANGE
(9, 255) : size;

551 
pkt
.
∑ylﬂd
[6] = (
uöt8_t
)(
i
 >> 0);

552 
pkt
.
∑ylﬂd
[7] = (
uöt8_t
)(
i
 >> 8);

553 
x
 = 
	`lgw_£nd
(&
pkt
);

554 i‡(
x
 != 0) {

555 
	`¥ötf
("ERROR: failedÅo sendÖacket\n");

556  
EXIT_FAILURE
;

560 
	`waô_ms
(5);

561 
	`lgw_°©us
(
pkt
.
rf_chaö
, 
TX_STATUS
, &
tx_°©us
);

562 } (
tx_°©us
 !
TX_FREE
Ë&& (
quô_sig
 !1Ë&& (
exô_sig
 != 1));

564 i‡((
quô_sig
 =1Ë|| (
exô_sig
 == 1)) {

567 
	`¥ötf
("TX done\n");

570 
	`¥ötf
–"\nNbÖackë†£¡: %u (%u)\n", 
i
, 
˙t_lo›
 + 1 );

573 
x
 = 
	`lgw_°›
();

574 i‡(
x
 != 0) {

575 
	`¥ötf
("ERROR: failedÅo stopÅhe gateway\n");

576  
EXIT_FAILURE
;

580 i‡(
	`sy°em
("/usr/bin/reset_lgw.sh stop") != 0) {

581 
	`¥ötf
("ERROR: failedÅoÑeset SX1302, check yourÑeset_lgw.sh script\n");

582 
	`exô
(
EXIT_FAILURE
);

586 
	`¥ötf
("=========== Test End ===========\n");

589 
	}
}

	@hal/test/test_loragw_i2c.c

20 #i‡
__STDC_VERSION__
 >= 199901L

21 
	#_XOPEN_SOURCE
 600

	)

23 
	#_XOPEN_SOURCE
 500

	)

26 
	~<°döt.h
>

27 
	~<°dio.h
>

28 
	~<°dlib.h
>

29 
	~<°rög.h
>

30 
	~<sig«l.h
>

31 
	~<uni°d.h
>

32 
	~<time.h
>

34 
	~"l‹agw_i2c.h
"

35 
	~"l‹agw_aux.h
"

36 
	~"l‹agw_hÆ.h
"

44 
	#I2C_PORT_STTS751
 0x39

	)

46 
	#STTS751_REG_TEMP_H
 0x00

	)

47 
	#STTS751_REG_TEMP_L
 0x02

	)

48 
	#STTS751_REG_CONF
 0x03

	)

49 
	#STTS751_REG_RATE
 0x04

	)

50 
	#STTS751_REG_PROD_ID
 0xFD

	)

51 
	#STTS751_REG_MAN_ID
 0xFE

	)

52 
	#STTS751_REG_REV_ID
 0xFF

	)

54 
	#STTS751_0_PROD_ID
 0x00

	)

55 
	#STTS751_1_PROD_ID
 0x01

	)

56 
	#ST_MAN_ID
 0x53

	)

62 
	gexô_sig
 = 0;

63 
	gquô_sig
 = 0;

65 
	gi2c_dev
 = -1;

70 
sig_h™dÀr
(
sigio
);

71 
ußge
();

76 
	$maö
(
¨gc
, ** 
¨gv
)

78 
i
, 
îr
;

79 
siga˘i⁄
 
siga˘
;

80 
uöt8_t
 
vÆ
;

81 
uöt8_t
 
high_byã
, 
low_byã
;

82 
öt8_t
 
h
;

83 
ãm≥øtuª
;

86 (
i
 = 
	`gë›t
(
¨gc
, 
¨gv
, "hd:")) != -1) {

87 
i
) {

89 
	`ußge
();

90  
EXIT_SUCCESS
;

94 i‡(
›èrg
 !
NULL
) {

100 
	`¥ötf
("ERROR:árgumentÖarsing options, use -h option for help\n");

101 
	`ußge
();

102  
EXIT_FAILURE
;

107 
	`sigem±y£t
–&
siga˘
.
ß_mask
 );

108 
siga˘
.
ß_Êags
 = 0;

109 
siga˘
.
ß_h™dÀr
 = 
sig_h™dÀr
;

110 
	`siga˘i⁄
–
SIGQUIT
, &
siga˘
, 
NULL
 );

111 
	`siga˘i⁄
–
SIGINT
, &
siga˘
, 
NULL
 );

112 
	`siga˘i⁄
–
SIGTERM
, &
siga˘
, 
NULL
 );

114 
	`¥ötf
( "+++ Start of I2CÅestÖrogram +++\n" );

117 
îr
 = 
	`i2c_löuxdev_›í
–
I2C_DEVICE
, 
I2C_PORT_STTS751
, &
i2c_dev
 );

118 i‡–(
îr
 !0Ë|| (
i2c_dev
 <= 0) )

120 
	`¥ötf
–"ERROR: faûedÅÿ›í I2C devi˚ %†”º=%i)\n", 
I2C_DEVICE
, 
îr
 );

121  
EXIT_FAILURE
;

125 
îr
 = 
	`i2c_löuxdev_ªad
–
i2c_dev
, 
I2C_PORT_STTS751
, 
STTS751_REG_PROD_ID
, &
vÆ
 );

126 i‡–
îr
 != 0 )

128 
	`¥ötf
–"ERROR: faûedÅÿªad I2C devi˚ %†”º=%i)\n", 
I2C_DEVICE
, 
îr
 );

129  
EXIT_FAILURE
;;

131  
vÆ
 )

133 
STTS751_0_PROD_ID
:

134 
	`¥ötf
("INFO: Product ID: STTS751-0\n");

136 
STTS751_1_PROD_ID
:

137 
	`¥ötf
("INFO: Product ID: STTS751-1\n");

140 
	`¥ötf
("ERROR: Product ID: UNKNOWN\n");

141  
EXIT_FAILURE
;;

145 
îr
 = 
	`i2c_löuxdev_ªad
–
i2c_dev
, 
I2C_PORT_STTS751
, 
STTS751_REG_MAN_ID
, &
vÆ
 );

146 i‡–
îr
 != 0 )

148 
	`¥ötf
–"ERROR: faûedÅÿªad I2C devi˚ %†”º=%i)\n", 
I2C_DEVICE
, 
îr
 );

149  
EXIT_FAILURE
;;

151 i‡–
vÆ
 !
ST_MAN_ID
 )

153 
	`¥ötf
( "ERROR: Manufacturer ID: UNKNOWN\n" );

154  
EXIT_FAILURE
;;

158 
	`¥ötf
("INFO: M™uÁ˘uª∏ID: 0x%02X\n", 
vÆ
);

162 
îr
 = 
	`i2c_löuxdev_ªad
–
i2c_dev
, 
I2C_PORT_STTS751
, 
STTS751_REG_REV_ID
, &
vÆ
 );

163 i‡–
îr
 != 0 )

165 
	`¥ötf
–"ERROR: faûedÅÿªad I2C devi˚ %†”º=%i)\n", 
I2C_DEVICE
, 
îr
 );

166  
EXIT_FAILURE
;;

168 
	`¥ötf
("INFO: Revisi⁄Çumbî: 0x%02X\n", 
vÆ
);

171 
îr
 = 
	`i2c_löuxdev_wrôe
–
i2c_dev
, 
I2C_PORT_STTS751
, 
STTS751_REG_CONF
, 0x8C );

172 i‡–
îr
 != 0 )

174 
	`¥ötf
–"ERROR: faûedÅÿwrôêI2C devi˚ 0x%02X (îr=%i)\n", 
I2C_PORT_STTS751
, 
îr
 );

175  
EXIT_FAILURE
;

179 
îr
 = 
	`i2c_löuxdev_wrôe
–
i2c_dev
, 
I2C_PORT_STTS751
, 
STTS751_REG_RATE
, 0x04 );

180 i‡–
îr
 != 0 )

182 
	`¥ötf
–"ERROR: faûedÅÿwrôêI2C devi˚ 0x%02X (îr=%i)\n", 
I2C_PORT_STTS751
, 
îr
 );

183  
EXIT_FAILURE
;

186 (
quô_sig
 !1Ë&& (
exô_sig
 != 1)) {

188 
îr
 = 
	`i2c_löuxdev_ªad
–
i2c_dev
, 
I2C_PORT_STTS751
, 
STTS751_REG_TEMP_L
, &
low_byã
 );

189 i‡–
îr
 != 0 )

191 
	`¥ötf
–"ERROR: faûedÅÿªad I2C devi˚ 0x%02X (îr=%i)\n", 
I2C_PORT_STTS751
, 
îr
 );

192  
EXIT_FAILURE
;

196 
îr
 = 
	`i2c_löuxdev_ªad
–
i2c_dev
, 
I2C_PORT_STTS751
, 
STTS751_REG_TEMP_H
, &
high_byã
 );

197 i‡–
îr
 != 0 )

199 
	`¥ötf
–"ERROR: faûedÅÿªad I2C devi˚ 0x%02X (îr=%i)\n", 
I2C_PORT_STTS751
, 
îr
 );

200  
EXIT_FAILURE
;

203 
h
 = (
öt8_t
)
high_byã
;

204 
ãm≥øtuª
 = ((
h
 << 8Ë| 
low_byã
) / 256.0;

206 
	`¥ötf
–"Tem≥øtuª: %‡C (h:0x%02XÜ:0x%02X)\n", 
ãm≥øtuª
, 
high_byã
, 
low_byã
 );

207 
	`waô_ms
( 100 );

211 
	`¥ötf
( "+++ End of I2CÅestÖrogram +++\n" );

213 
îr
 = 
	`i2c_löuxdev_˛o£
–
i2c_dev
 );

214 i‡–
îr
 != 0 )

216 
	`¥ötf
–"ERROR: faûedÅÿ˛o£ I2C devi˚ (îr=%i)\n", 
îr
 );

217  
EXIT_FAILURE
;

221 
	}
}

226 
	$sig_h™dÀr
(
sigio
) {

227 i‡(
sigio
 =
SIGQUIT
) {

228 
quô_sig
 = 1;

229 } if((
sigio
 =
SIGINT
Ë|| (sigiÿ=
SIGTERM
)) {

230 
exô_sig
 = 1;

232 
	}
}

236 
	$ußge
() {

237 
	`¥ötf
("~~~ Library version string~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");

238 
	`¥ötf
(" %s\n", 
	`lgw_vîsi⁄_öfo
());

239 
	`¥ötf
("~~~ Available options ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");

240 
	`¥ötf
(" -hÖrintÅhis help\n");

241 
	`¥ötf
(" -d <path> use Linux I2C device driver\n");

242 
	`¥ötf
(" => deÁu…Ö©h: " 
I2C_DEVICE
 "\n");

243 
	}
}

	@hal/test/test_loragw_reg.c

19 #i‡
__STDC_VERSION__
 >= 199901L

20 
	#_XOPEN_SOURCE
 600

	)

22 
	#_XOPEN_SOURCE
 500

	)

25 
	~<°döt.h
>

26 
	~<°dio.h
>

27 
	~<°dlib.h
>

28 
	~<°rög.h
>

29 
	~<uni°d.h
>

30 
	~<m©h.h
>

32 
	~"l‹agw_ªg.h
"

33 
	~"l‹agw_aux.h
"

34 
	~"l‹agw_hÆ.h
"

39 
	#LINUXDEV_PATH_DEFAULT
 "/dev/•idev1.0"

	)

44 c⁄° 
lgw_ªg_s
 
l‹egs
[
LGW_TOTALREGS
+1];

49 
ußge
();

54 
	$maö
(
¨gc
, ** 
¨gv
)

56 
x
, 
i
;

57 
öt32_t
 
vÆ
;

58 
boﬁ
 
îr‹_found
 = 
Ál£
;

59 
uöt8_t
 
ønd_vÆues
[
LGW_TOTALREGS
];

60 
boﬁ
 
ªg_ign‹ed
[
LGW_TOTALREGS
];

61 
uöt8_t
 
ªg_vÆ
;

62 
uöt8_t
 
ªg_max
;

65 c⁄° 
•idev_∑th_deÁu…
[] = 
LINUXDEV_PATH_DEFAULT
;

66 c⁄° * 
•idev_∑th
 = 
•idev_∑th_deÁu…
;

69 (
i
 = 
	`gë›t
(
¨gc
, 
¨gv
, "hd:")) != -1) {

70 
i
) {

72 
	`ußge
();

73  
EXIT_SUCCESS
;

77 i‡(
›èrg
 !
NULL
) {

78 
•idev_∑th
 = 
›èrg
;

83 
	`¥ötf
("ERROR:árgumentÖarsing options, use -h option for help\n");

84 
	`ußge
();

85  
EXIT_FAILURE
;

90 i‡(
	`sy°em
("./reset_lgw.sh start") != 0) {

91 
	`¥ötf
("ERROR: failedÅoÑeset SX1302, check yourÑeset_lgw.sh script\n");

92 
	`exô
(
EXIT_FAILURE
);

95 
x
 = 
	`lgw_c⁄√˘
(
•idev_∑th
);

96 i‡(
x
 !
LGW_REG_SUCCESS
) {

97 
	`¥ötf
("ERROR: failedÅo connect\n");

102 
	`mem£t
(
ªg_ign‹ed
, 0, Ñeg_ignored);

103 
ªg_ign‹ed
[
SX1302_REG_COMMON_CTRL0_CLK32_RIF_CTRL
] = 
åue
;

106 
	`¥ötf
("## TEST#1:ÑeadállÑegistersánd check default value forÇon-read-onlyÑegisters\n");

107 
îr‹_found
 = 
Ál£
;

108 
i
 = 0; i < 
LGW_TOTALREGS
; i++) {

109 i‡(
l‹egs
[
i
].
rd⁄
 == 0) {

110 
x
 = 
	`lgw_ªg_r
(
i
, &
vÆ
);

111 i‡(
x
 !
LGW_REG_SUCCESS
) {

112 
	`¥ötf
("ERROR: faûedÅÿªadÑegi°îáàödex %d\n", 
i
);

115 i‡(
vÆ
 !
l‹egs
[
i
].
dÊt
) {

116 
	`¥ötf
("ERROR: deÁu… vÆuêf‹Ñegi°îáàödex %d i†%d, should bê%d\n", 
i
, 
vÆ
, 
l‹egs
[i].
dÊt
);

117 
îr‹_found
 = 
åue
;

121 
	`¥ötf
("------------------\n");

122 
	`¥ötf
(" TEST#1 %s\n", (
îr‹_found
 =
Ál£
) ? "PASSED" : "FAILED");

123 
	`¥ötf
("------------------\n\n");

126 
	`¥ötf
("## TEST#2:Ñead/writeÅest onállÇon-read-only,Çon-pulse,Çon-w0clr,Çon-w1clrÑegisters\n");

128 
îr‹_found
 = 
Ál£
;

129 
i
 = 0; i < 
LGW_TOTALREGS
; i++) {

130 i‡((
l‹egs
[
i
].
rd⁄
 =0Ë&& (
ªg_ign‹ed
[i] =
Ál£
)) {

132 
ªg_max
 = 
	`pow
(2, 
l‹egs
[
i
].
Àng
) - 1;

133 i‡(
l‹egs
[
i
].
Àng
 == 1) {

134 
ªg_vÆ
 = !
l‹egs
[
i
].
dÊt
;

138 i‡(
l‹egs
[
i
].
sign
 == 1) {

139 
ªg_vÆ
 = 
	`ønd
(Ë% (
ªg_max
 / 2);

141 
ªg_vÆ
 = 
	`ønd
(Ë% 
ªg_max
;

143 } 
ªg_vÆ
 =
l‹egs
[
i
].
dÊt
);

146 
x
 = 
	`lgw_ªg_w
(
i
, 
ªg_vÆ
);

147 i‡(
x
 !
LGW_REG_SUCCESS
) {

148 
	`¥ötf
("ERROR: faûedÅÿªadÑegi°îáàödex %d\n", 
i
);

152 
ønd_vÆues
[
i
] = 
ªg_vÆ
;

156 
i
 = 0; i < 
LGW_TOTALREGS
; i++) {

157 i‡((
l‹egs
[
i
].
rd⁄
 =0Ë&& (l‹egs[i].
chck
 =1Ë&& (
ªg_ign‹ed
[i] =
Ál£
)) {

158 
x
 = 
	`lgw_ªg_r
(
i
, &
vÆ
);

159 i‡(
x
 !
LGW_REG_SUCCESS
) {

160 
	`¥ötf
("ERROR: faûedÅÿªadÑegi°îáàödex %d\n", 
i
);

164 i‡(
vÆ
 !
ønd_vÆues
[
i
]) {

165 
	`¥ötf
("ERROR: vÆuêªad fromÑegi°îáàödex %d dif„r†‰omÅhêwrôã¿vÆuê(w:%uÑ:%d)\n", 
i
, 
ønd_vÆues
[i], 
vÆ
);

166 
îr‹_found
 = 
åue
;

172 
	`¥ötf
("------------------\n");

173 
	`¥ötf
(" TEST#2 %s\n", (
îr‹_found
 =
Ál£
) ? "PASSED" : "FAILED");

174 
	`¥ötf
("------------------\n\n");

176 
x
 = 
	`lgw_disc⁄√˘
();

177 i‡(
x
 !
LGW_REG_SUCCESS
) {

178 
	`¥ötf
("ERROR: failedÅo disconnect\n");

183 i‡(
	`sy°em
("./reset_lgw.sh stop") != 0) {

184 
	`¥ötf
("ERROR: failedÅoÑeset SX1302, check yourÑeset_lgw.sh script\n");

185 
	`exô
(
EXIT_FAILURE
);

189 
	}
}

194 
	$ußge
() {

195 
	`¥ötf
("~~~ Library version string~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");

196 
	`¥ötf
(" %s\n", 
	`lgw_vîsi⁄_öfo
());

197 
	`¥ötf
("~~~ Available options ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");

198 
	`¥ötf
(" -hÖrintÅhis help\n");

199 
	`¥ötf
(" -d <path> use Linux SPI device driver\n");

200 
	`¥ötf
(" => deÁu…Ö©h: " 
LINUXDEV_PATH_DEFAULT
 "\n");

201 
	}
}

	@hal/test/test_loragw_spi.c

20 #i‡
__STDC_VERSION__
 >= 199901L

21 
	#_XOPEN_SOURCE
 600

	)

23 
	#_XOPEN_SOURCE
 500

	)

26 
	~<°döt.h
>

27 
	~<°dio.h
>

28 
	~<°dlib.h
>

29 
	~<°rög.h
>

30 
	~<sig«l.h
>

31 
	~<uni°d.h
>

32 
	~<time.h
>

34 
	~"l‹agw_•i.h
"

35 
	~"l‹agw_aux.h
"

36 
	~"l‹agw_hÆ.h
"

44 
	#BUFF_SIZE
 1024

	)

46 
	#SX1302_AGC_MCU_MEM
 0x0000

	)

47 
	#SX1302_REG_COMMON
 0x5600

	)

48 
	#SX1302_REG_AGC_MCU
 0x5780

	)

50 
	#LINUXDEV_PATH_DEFAULT
 "/dev/•idev1.0"

	)

56 
	gexô_sig
 = 0;

57 
	gquô_sig
 = 0;

62 
sig_h™dÀr
(
sigio
);

63 
ußge
();

68 
	$maö
(
¨gc
, ** 
¨gv
)

70 
siga˘i⁄
 
siga˘
;

72 
uöt8_t
 
d©a
 = 0;

73 
uöt8_t
 
ã°_buff
[
BUFF_SIZE
];

74 
uöt8_t
 
ªad_buff
[
BUFF_SIZE
];

75 
cy˛e_numbî
 = 0;

76 
i
;

77 
uöt16_t
 
size
;

80 c⁄° 
•idev_∑th_deÁu…
[] = 
LINUXDEV_PATH_DEFAULT
;

81 c⁄° * 
•idev_∑th
 = 
•idev_∑th_deÁu…
;

82 *
•i_èrgë
 = 
NULL
;

85 (
i
 = 
	`gë›t
(
¨gc
, 
¨gv
, "hd:")) != -1) {

86 
i
) {

88 
	`ußge
();

89  
EXIT_SUCCESS
;

93 i‡(
›èrg
 !
NULL
) {

94 
•idev_∑th
 = 
›èrg
;

99 
	`¥ötf
("ERROR:árgumentÖarsing options, use -h option for help\n");

100 
	`ußge
();

101  
EXIT_FAILURE
;

106 
	`sigem±y£t
–&
siga˘
.
ß_mask
 );

107 
siga˘
.
ß_Êags
 = 0;

108 
siga˘
.
ß_h™dÀr
 = 
sig_h™dÀr
;

109 
	`siga˘i⁄
–
SIGQUIT
, &
siga˘
, 
NULL
 );

110 
	`siga˘i⁄
–
SIGINT
, &
siga˘
, 
NULL
 );

111 
	`siga˘i⁄
–
SIGTERM
, &
siga˘
, 
NULL
 );

114 i‡(
	`sy°em
("./reset_lgw.sh start") != 0) {

115 
	`¥ötf
("ERROR: failedÅoÑeset SX1302, check yourÑeset_lgw.sh script\n");

116 
	`exô
(
EXIT_FAILURE
);

119 
	`¥ötf
("Beginning ofÅest forÜoragw_spi.c\n");

120 
i
 = 
	`lgw_•i_›í
(
•idev_∑th
, &
•i_èrgë
);

121 i‡(
i
 != 0) {

122 
	`¥ötf
("ERROR: faûedÅÿ›í SPI devi˚ %s\n", 
•idev_∑th
);

135 
	`lgw_•i_r
(
•i_èrgë
, 
LGW_SPI_MUX_TARGET_SX1302
, 
SX1302_REG_COMMON
 + 6, &
d©a
);

136 
	`¥ötf
("SX1302 vîsi⁄: 0x%02X\n", 
d©a
);

138 
	`lgw_•i_r
(
•i_èrgë
, 
LGW_SPI_MUX_TARGET_SX1302
, 
SX1302_REG_AGC_MCU
 + 0, &
d©a
);

139 
	`lgw_•i_w
(
•i_èrgë
, 
LGW_SPI_MUX_TARGET_SX1302
, 
SX1302_REG_AGC_MCU
 + 0, 0x06);

141 
	`§™d
(
	`time
(
NULL
));

144 (
quô_sig
 !1Ë&& (
exô_sig
 != 1)) {

145 
size
 = 
	`ønd
(Ë% 
BUFF_SIZE
;

146 
i
 = 0; i < 
size
; ++i) {

147 
ã°_buff
[
i
] = 
	`ønd
() & 0xFF;

149 
	`¥ötf
("Cy˛ê%ò> ", 
cy˛e_numbî
);

150 
	`lgw_•i_wb
(
•i_èrgë
, 
LGW_SPI_MUX_TARGET_SX1302
, 
SX1302_AGC_MCU_MEM
, 
ã°_buff
, 
size
);

151 
	`lgw_•i_rb
(
•i_èrgë
, 
LGW_SPI_MUX_TARGET_SX1302
, 
SX1302_AGC_MCU_MEM
, 
ªad_buff
, 
size
);

152 
i
=0; ((i<
size
Ë&& (
ã°_buff
[i] =
ªad_buff
[i])); ++i);

153 i‡(
i
 !
size
) {

154 
	`¥ötf
("error duringÅhe buffer comparison\n");

155 
	`¥ötf
("Written values:\n");

156 
i
=0; i<
size
; ++i) {

157 
	`¥ötf
(" %02X ", 
ã°_buff
[
i
]);

158 i‡(
i
%16 =15Ë
	`¥ötf
("\n");

160 
	`¥ötf
("\n");

161 
	`¥ötf
("Read values:\n");

162 
i
=0; i<
size
; ++i) {

163 
	`¥ötf
(" %02X ", 
ªad_buff
[
i
]);

164 i‡(
i
%16 =15Ë
	`¥ötf
("\n");

166 
	`¥ötf
("\n");

167  
EXIT_FAILURE
;

169 
	`¥ötf
("didá %i-byã R/W o¿®d©®buf„∏wôhÇÿîr‹\n", 
size
);

170 ++
cy˛e_numbî
;

174 
	`lgw_•i_˛o£
(
•i_èrgë
);

175 
	`¥ötf
("End ofÅest forÜoragw_spi.c\n");

178 i‡(
	`sy°em
("./reset_lgw.sh stop") != 0) {

179 
	`¥ötf
("ERROR: failedÅoÑeset SX1302, check yourÑeset_lgw.sh script\n");

180 
	`exô
(
EXIT_FAILURE
);

184 
	}
}

189 
	$sig_h™dÀr
(
sigio
) {

190 i‡(
sigio
 =
SIGQUIT
) {

191 
quô_sig
 = 1;

192 } if((
sigio
 =
SIGINT
Ë|| (sigiÿ=
SIGTERM
)) {

193 
exô_sig
 = 1;

195 
	}
}

199 
	$ußge
() {

200 
	`¥ötf
("~~~ Library version string~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");

201 
	`¥ötf
(" %s\n", 
	`lgw_vîsi⁄_öfo
());

202 
	`¥ötf
("~~~ Available options ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");

203 
	`¥ötf
(" -hÖrintÅhis help\n");

204 
	`¥ötf
(" -d <path> use Linux SPI device driver\n");

205 
	`¥ötf
(" => deÁu…Ö©h: " 
LINUXDEV_PATH_DEFAULT
 "\n");

206 
	}
}

	@hal/test/test_loragw_spi_sx1250.c

20 #i‡
__STDC_VERSION__
 >= 199901L

21 
	#_XOPEN_SOURCE
 600

	)

23 
	#_XOPEN_SOURCE
 500

	)

26 
	~<°döt.h
>

27 
	~<°dio.h
>

28 
	~<°dlib.h
>

29 
	~<°rög.h
>

30 
	~<sig«l.h
>

31 
	~<uni°d.h
>

33 
	~"l‹agw_•i.h
"

34 
	~"l‹agw_aux.h
"

35 
	~"l‹agw_ªg.h
"

36 
	~"l‹agw_hÆ.h
"

37 
	~"l‹agw_sx1250.h
"

38 
	~"l‹agw_sx1302.h
"

46 
	#BUFF_SIZE
 16

	)

48 
	#LINUXDEV_PATH_DEFAULT
 "/dev/•idev1.0"

	)

54 
	gexô_sig
 = 0;

55 
	gquô_sig
 = 0;

60 
sig_h™dÀr
(
sigio
);

61 
ußge
();

66 
	$maö
(
¨gc
, ** 
¨gv
)

68 
siga˘i⁄
 
siga˘
;

70 
uöt8_t
 
ã°_buff
[
BUFF_SIZE
];

71 
uöt8_t
 
ªad_buff
[
BUFF_SIZE
];

72 
uöt32_t
 
ã°_vÆ
, 
ªad_vÆ
;

73 
cy˛e_numbî
 = 0;

74 
i
, 
x
;

77 c⁄° 
•idev_∑th_deÁu…
[] = 
LINUXDEV_PATH_DEFAULT
;

78 c⁄° * 
•idev_∑th
 = 
•idev_∑th_deÁu…
;

81 (
i
 = 
	`gë›t
(
¨gc
, 
¨gv
, "hd:")) != -1) {

82 
i
) {

84 
	`ußge
();

85  
EXIT_SUCCESS
;

89 i‡(
›èrg
 !
NULL
) {

90 
•idev_∑th
 = 
›èrg
;

95 
	`¥ötf
("ERROR:árgumentÖarsing options, use -h option for help\n");

96 
	`ußge
();

97  
EXIT_FAILURE
;

102 
	`sigem±y£t
–&
siga˘
.
ß_mask
 );

103 
siga˘
.
ß_Êags
 = 0;

104 
siga˘
.
ß_h™dÀr
 = 
sig_h™dÀr
;

105 
	`siga˘i⁄
–
SIGQUIT
, &
siga˘
, 
NULL
 );

106 
	`siga˘i⁄
–
SIGINT
, &
siga˘
, 
NULL
 );

107 
	`siga˘i⁄
–
SIGTERM
, &
siga˘
, 
NULL
 );

110 i‡(
	`sy°em
("./reset_lgw.sh start") != 0) {

111 
	`¥ötf
("ERROR: failedÅoÑeset SX1302, check yourÑeset_lgw.sh script\n");

112 
	`exô
(
EXIT_FAILURE
);

115 
x
 = 
	`lgw_c⁄√˘
(
•idev_∑th
);

116 i‡(
x
 !
LGW_REG_SUCCESS
) {

117 
	`¥ötf
("ERROR: FaûedÅÿc⁄√˘Åÿthêc⁄˚¡øt‹ usög SPI %s\n", 
•idev_∑th
);

118  
EXIT_FAILURE
;

122 
i
 = 0; i < 
LGW_RF_CHAIN_NB
; i++) {

123 
	`sx1302_ødio_ª£t
(
i
, 
LGW_RADIO_TYPE_SX1250
);

124 
	`sx1302_ødio_£t_mode
(
i
, 
LGW_RADIO_TYPE_SX1250
);

128 
	`sx1302_ødio_˛ock_£À˘
(0);

131 
	`lgw_ªg_w
(
SX1302_REG_COMMON_CTRL0_HOST_RADIO_CTRL
, 0x01);

134 
	`lgw_ªg_w
(
SX1302_REG_AGC_MCU_CTRL_FORCE_HOST_FE_CTRL
, 1);

135 
	`lgw_ªg_w
(
SX1302_REG_AGC_MCU_RF_EN_A_PA_EN
, 0);

136 
	`lgw_ªg_w
(
SX1302_REG_AGC_MCU_RF_EN_A_LNA_EN
, 0);

139 
ã°_buff
[0] = (
uöt8_t
)
STDBY_XOSC
;

140 
	`sx1250_wrôe_comm™d
(0, 
SET_STANDBY
, 
ã°_buff
, 1);

141 
	`sx1250_wrôe_comm™d
(1, 
SET_STANDBY
, 
ã°_buff
, 1);

142 
	`waô_ms
(10);

144 
ã°_buff
[0] = 0x00;

145 
	`sx1250_ªad_comm™d
(0, 
GET_STATUS
, 
ã°_buff
, 1);

146 
	`¥ötf
("Radio0: gë_°©us: 0x%02X\n", 
ã°_buff
[0]);

147 
	`sx1250_ªad_comm™d
(1, 
GET_STATUS
, 
ã°_buff
, 1);

148 
	`¥ötf
("Radio1: gë_°©us: 0x%02X\n", 
ã°_buff
[0]);

151 (
quô_sig
 !1Ë&& (
exô_sig
 != 1)) {

152 
ã°_buff
[0] = 
	`ønd
() & 0x7F;

153 
ã°_buff
[1] = 
	`ønd
() & 0xFF;

154 
ã°_buff
[2] = 
	`ønd
() & 0xFF;

155 
ã°_buff
[3] = 
	`ønd
() & 0xFF;

156 
ã°_vÆ
 = (
ã°_buff
[0] << 24) | (test_buff[1] << 16) | (test_buff[2] << 8) | (test_buff[3] << 0);

157 
	`sx1250_wrôe_comm™d
(0, 
SET_RF_FREQUENCY
, 
ã°_buff
, 4);

159 
ªad_buff
[0] = 0x08;

160 
ªad_buff
[1] = 0x8B;

161 
ªad_buff
[2] = 0x00;

162 
ªad_buff
[3] = 0x00;

163 
ªad_buff
[4] = 0x00;

164 
ªad_buff
[5] = 0x00;

165 
ªad_buff
[6] = 0x00;

166 
	`sx1250_ªad_comm™d
(0, 
READ_REGISTER
, 
ªad_buff
, 7);

167 
ªad_vÆ
 = (
ªad_buff
[3] << 24) | (read_buff[4] << 16) | (read_buff[5] << 8) | (read_buff[6] << 0);

169 
	`¥ötf
("Cy˛ê%ò> ", 
cy˛e_numbî
);

170 i‡(
ªad_vÆ
 !
ã°_vÆ
) {

171 
	`¥ötf
("error duringÅhe buffer comparison\n");

172 
	`¥ötf
("Wrôã¿vÆue: %08X\n", 
ã°_vÆ
);

173 
	`¥ötf
("Ród vÆue: %08X\n", 
ªad_vÆ
);

174  
EXIT_FAILURE
;

176 
	`¥ötf
("didá %i-byte R/W onáÑegister withÇoÉrror\n", 4);

177 ++
cy˛e_numbî
;

182 
	`lgw_disc⁄√˘
();

183 
	`¥ötf
("End ofÅest forÜoragw_spi_sx1250.c\n");

186 i‡(
	`sy°em
("./reset_lgw.sh stop") != 0) {

187 
	`¥ötf
("ERROR: failedÅoÑeset SX1302, check yourÑeset_lgw.sh script\n");

188 
	`exô
(
EXIT_FAILURE
);

192 
	}
}

197 
	$sig_h™dÀr
(
sigio
) {

198 i‡(
sigio
 =
SIGQUIT
) {

199 
quô_sig
 = 1;

200 } if((
sigio
 =
SIGINT
Ë|| (sigiÿ=
SIGTERM
)) {

201 
exô_sig
 = 1;

203 
	}
}

207 
	$ußge
() {

208 
	`¥ötf
("~~~ Library version string~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");

209 
	`¥ötf
(" %s\n", 
	`lgw_vîsi⁄_öfo
());

210 
	`¥ötf
("~~~ Available options ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");

211 
	`¥ötf
(" -hÖrintÅhis help\n");

212 
	`¥ötf
(" -d <path> use Linux SPI device driver\n");

213 
	`¥ötf
(" => deÁu…Ö©h: " 
LINUXDEV_PATH_DEFAULT
 "\n");

214 
	}
}

	@hal/tinymt32.c

16 
	~"töymt32.h
"

17 
	#MIN_LOOP
 8

	)

18 
	#PRE_LOOP
 8

	)

26 
uöt32_t
 
	$öi_func1
(
uöt32_t
 
x
) {

27  (
x
 ^ (x >> 27)Ë* 
	`UINT32_C
(1664525);

28 
	}
}

36 
uöt32_t
 
	$öi_func2
(
uöt32_t
 
x
) {

37  (
x
 ^ (x >> 27)Ë* 
	`UINT32_C
(1566083941);

38 
	}
}

44 
	$≥riod_˚πifiˇti⁄
(
töymt32_t
 * 
øndom
) {

45 i‡((
øndom
->
°©us
[0] & 
TINYMT32_MASK
) == 0 &&

46 
øndom
->
°©us
[1] == 0 &&

47 
øndom
->
°©us
[2] == 0 &&

48 
øndom
->
°©us
[3] == 0) {

49 
øndom
->
°©us
[0] = 'T';

50 
øndom
->
°©us
[1] = 'I';

51 
øndom
->
°©us
[2] = 'N';

52 
øndom
->
°©us
[3] = 'Y';

54 
	}
}

62 
	$töymt32_öô
(
töymt32_t
 * 
øndom
, 
uöt32_t
 
£ed
) {

63 
øndom
->
°©us
[0] = 
£ed
;

64 
øndom
->
°©us
[1] =Ñ™dom->
m©1
;

65 
øndom
->
°©us
[2] =Ñ™dom->
m©2
;

66 
øndom
->
°©us
[3] =Ñ™dom->
tm©
;

67 
i
 = 1; i < 
MIN_LOOP
; i++) {

68 
øndom
->
°©us
[
i
 & 3] ^ò+ 
	`UINT32_C
(1812433253)

69 * (
øndom
->
°©us
[(
i
 - 1) & 3]

70 ^ (
øndom
->
°©us
[(
i
 - 1) & 3] >> 30));

72 
	`≥riod_˚πifiˇti⁄
(
øndom
);

73 
i
 = 0; i < 
PRE_LOOP
; i++) {

74 
	`töymt32_√xt_°©e
(
øndom
);

76 
	}
}

85 
	$töymt32_öô_by_¨øy
(
töymt32_t
 * 
øndom
, 
uöt32_t
 
öô_key
[],

86 
key_Àngth
) {

87 c⁄° 
œg
 = 1;

88 c⁄° 
mid
 = 1;

89 c⁄° 
size
 = 4;

90 
i
, 
j
;

91 
cou¡
;

92 
uöt32_t
 
r
;

93 
uöt32_t
 * 
°
 = &
øndom
->
°©us
[0];

95 
°
[0] = 0;

96 
°
[1] = 
øndom
->
m©1
;

97 
°
[2] = 
øndom
->
m©2
;

98 
°
[3] = 
øndom
->
tm©
;

99 i‡(
key_Àngth
 + 1 > 
MIN_LOOP
) {

100 
cou¡
 = 
key_Àngth
 + 1;

102 
cou¡
 = 
MIN_LOOP
;

104 
r
 = 
	`öi_func1
(
°
[0] ^ st[
mid
 % 
size
]

105 ^ 
°
[(
size
 - 1) % size]);

106 
°
[
mid
 % 
size
] +
r
;

107 
r
 +
key_Àngth
;

108 
°
[(
mid
 + 
œg
Ë% 
size
] +
r
;

109 
°
[0] = 
r
;

110 
cou¡
--;

111 
i
 = 1, 
j
 = 0; (j < 
cou¡
Ë&& (j < 
key_Àngth
); j++) {

112 
r
 = 
	`öi_func1
(
°
[
i
 % 
size
]

113 ^ 
°
[(
i
 + 
mid
Ë% 
size
]

114 ^ 
°
[(
i
 + 
size
 - 1) % size]);

115 
°
[(
i
 + 
mid
Ë% 
size
] +
r
;

116 
r
 +
öô_key
[
j
] + 
i
;

117 
°
[(
i
 + 
mid
 + 
œg
Ë% 
size
] +
r
;

118 
°
[
i
 % 
size
] = 
r
;

119 
i
 = (ò+ 1Ë% 
size
;

121 ; 
j
 < 
cou¡
; j++) {

122 
r
 = 
	`öi_func1
(
°
[
i
 % 
size
]

123 ^ 
°
[(
i
 + 
mid
Ë% 
size
]

124 ^ 
°
[(
i
 + 
size
 - 1) % size]);

125 
°
[(
i
 + 
mid
Ë% 
size
] +
r
;

126 
r
 +
i
;

127 
°
[(
i
 + 
mid
 + 
œg
Ë% 
size
] +
r
;

128 
°
[
i
 % 
size
] = 
r
;

129 
i
 = (ò+ 1Ë% 
size
;

131 
j
 = 0; j < 
size
; j++) {

132 
r
 = 
	`öi_func2
(
°
[
i
 % 
size
]

133 + 
°
[(
i
 + 
mid
Ë% 
size
]

134 + 
°
[(
i
 + 
size
 - 1) % size]);

135 
°
[(
i
 + 
mid
Ë% 
size
] ^
r
;

136 
r
 -
i
;

137 
°
[(
i
 + 
mid
 + 
œg
Ë% 
size
] ^
r
;

138 
°
[
i
 % 
size
] = 
r
;

139 
i
 = (ò+ 1Ë% 
size
;

141 
	`≥riod_˚πifiˇti⁄
(
øndom
);

142 
i
 = 0; i < 
PRE_LOOP
; i++) {

143 
	`töymt32_√xt_°©e
(
øndom
);

145 
	}
}

	@hal/tinymt32.h

1 #i‚de‡
TINYMT32_H


2 
	#TINYMT32_H


	)

19 
	~<°döt.h
>

20 
	~<öây≥s.h
>

22 
	#TINYMT32_MEXP
 127

	)

23 
	#TINYMT32_SH0
 1

	)

24 
	#TINYMT32_SH1
 10

	)

25 
	#TINYMT32_SH8
 8

	)

26 
	#TINYMT32_MASK
 
	`UINT32_C
(0x7fffffff)

	)

27 
	#TINYMT32_MUL
 (1.0‡/ 16777216.0f)

	)

29 #i‡
deföed
(
__˝lu•lus
)

36 
	sTINYMT32_T
 {

37 
uöt32_t
 
°©us
[4];

38 
uöt32_t
 
m©1
;

39 
uöt32_t
 
m©2
;

40 
uöt32_t
 
tm©
;

43 
TINYMT32_T
 
	ttöymt32_t
;

45 
töymt32_öô
(
töymt32_t
 * 
øndom
, 
uöt32_t
 
£ed
);

46 
töymt32_öô_by_¨øy
(
töymt32_t
 * 
øndom
, 
uöt32_t
 
öô_key
[], 
key_Àngth
);

48 #i‡
deföed
(
__GNUC__
)

54 
ölöe
 
töymt32_gë_mexp
(

55 
töymt32_t
 * 
øndom
 
__©åibuã__
((
unu£d
))) {

56  
TINYMT32_MEXP
;

59 
ölöe
 
töymt32_gë_mexp
(
töymt32_t
 * 
øndom
) {

60  
TINYMT32_MEXP
;

69 
ölöe
 
töymt32_√xt_°©e
(
töymt32_t
 * 
øndom
) {

70 
uöt32_t
 
x
;

71 
uöt32_t
 
y
;

73 
y
 = 
øndom
->
°©us
[3];

74 
x
 = (
øndom
->
°©us
[0] & 
TINYMT32_MASK
)

75 ^ 
øndom
->
°©us
[1]

76 ^ 
øndom
->
°©us
[2];

77 
x
 ^(x << 
TINYMT32_SH0
);

78 
y
 ^(y >> 
TINYMT32_SH0
Ë^ 
x
;

79 
øndom
->
°©us
[0] =Ñandom->status[1];

80 
øndom
->
°©us
[1] =Ñandom->status[2];

81 
øndom
->
°©us
[2] = 
x
 ^ (
y
 << 
TINYMT32_SH1
);

82 
øndom
->
°©us
[3] = 
y
;

83 
øndom
->
°©us
[1] ^-((
öt32_t
)(
y
 & 1)Ë&Ñ™dom->
m©1
;

84 
øndom
->
°©us
[2] ^-((
öt32_t
)(
y
 & 1)Ë&Ñ™dom->
m©2
;

93 
ölöe
 
uöt32_t
 
töymt32_ãm≥r
(
töymt32_t
 * 
øndom
) {

94 
uöt32_t
 
t0
, 
t1
;

95 
t0
 = 
øndom
->
°©us
[3];

96 #i‡
deföed
(
LINEARITY_CHECK
)

97 
t1
 = 
øndom
->
°©us
[0]

98 ^ (
øndom
->
°©us
[2] >> 
TINYMT32_SH8
);

100 
t1
 = 
øndom
->
°©us
[0]

101 + (
øndom
->
°©us
[2] >> 
TINYMT32_SH8
);

103 
t0
 ^
t1
;

104 
t0
 ^-((
öt32_t
)(
t1
 & 1)Ë& 
øndom
->
tm©
;

105  
t0
;

114 
ölöe
 
töymt32_ãm≥r_c⁄v
(
töymt32_t
 * 
øndom
) {

115 
uöt32_t
 
t0
, 
t1
;

117 
uöt32_t
 
u
;

118 
f
;

119 } 
c⁄v
;

121 
t0
 = 
øndom
->
°©us
[3];

122 #i‡
deföed
(
LINEARITY_CHECK
)

123 
t1
 = 
øndom
->
°©us
[0]

124 ^ (
øndom
->
°©us
[2] >> 
TINYMT32_SH8
);

126 
t1
 = 
øndom
->
°©us
[0]

127 + (
øndom
->
°©us
[2] >> 
TINYMT32_SH8
);

129 
t0
 ^
t1
;

130 
c⁄v
.
u
 = ((
t0
 ^ (-((
öt32_t
)(
t1
 & 1)Ë& 
øndom
->
tm©
)) >> 9)

131 | 
UINT32_C
(0x3f800000);

132  
c⁄v
.
f
;

141 
ölöe
 
töymt32_ãm≥r_c⁄v_›í
(
töymt32_t
 * 
øndom
) {

142 
uöt32_t
 
t0
, 
t1
;

144 
uöt32_t
 
u
;

145 
f
;

146 } 
c⁄v
;

148 
t0
 = 
øndom
->
°©us
[3];

149 #i‡
deföed
(
LINEARITY_CHECK
)

150 
t1
 = 
øndom
->
°©us
[0]

151 ^ (
øndom
->
°©us
[2] >> 
TINYMT32_SH8
);

153 
t1
 = 
øndom
->
°©us
[0]

154 + (
øndom
->
°©us
[2] >> 
TINYMT32_SH8
);

156 
t0
 ^
t1
;

157 
c⁄v
.
u
 = ((
t0
 ^ (-((
öt32_t
)(
t1
 & 1)Ë& 
øndom
->
tm©
)) >> 9)

158 | 
UINT32_C
(0x3f800001);

159  
c⁄v
.
f
;

167 
ölöe
 
uöt32_t
 
töymt32_gíî©e_uöt32
(
töymt32_t
 * 
øndom
) {

168 
töymt32_√xt_°©e
(
øndom
);

169  
töymt32_ãm≥r
(
øndom
);

180 
ölöe
 
töymt32_gíî©e_Êﬂt
(
töymt32_t
 * 
øndom
) {

181 
töymt32_√xt_°©e
(
øndom
);

182  (
töymt32_ãm≥r
(
øndom
Ë>> 8Ë* 
TINYMT32_MUL
;

191 
ölöe
 
töymt32_gíî©e_Êﬂt12
(
töymt32_t
 * 
øndom
) {

192 
töymt32_√xt_°©e
(
øndom
);

193  
töymt32_ãm≥r_c⁄v
(
øndom
);

202 
ölöe
 
töymt32_gíî©e_Êﬂt01
(
töymt32_t
 * 
øndom
) {

203 
töymt32_√xt_°©e
(
øndom
);

204  
töymt32_ãm≥r_c⁄v
(
øndom
) - 1.0f;

213 
ölöe
 
töymt32_gíî©e_ÊﬂtOC
(
töymt32_t
 * 
øndom
) {

214 
töymt32_√xt_°©e
(
øndom
);

215  1.0‡- 
töymt32_gíî©e_Êﬂt
(
øndom
);

224 
ölöe
 
töymt32_gíî©e_ÊﬂtOO
(
töymt32_t
 * 
øndom
) {

225 
töymt32_√xt_°©e
(
øndom
);

226  
töymt32_ãm≥r_c⁄v_›í
(
øndom
) - 1.0f;

237 
ölöe
 
töymt32_gíî©e_32doubÀ
(
töymt32_t
 * 
øndom
) {

238 
töymt32_√xt_°©e
(
øndom
);

239  
töymt32_ãm≥r
(
øndom
) * (1.0 / 4294967296.0);

242 #i‡
deföed
(
__˝lu•lus
)

	@hal/tst/test_loragw_cal.c

21 #i‡
__STDC_VERSION__
 >= 199901L

22 
	#_XOPEN_SOURCE
 600

	)

24 
	#_XOPEN_SOURCE
 500

	)

27 
	~<°döt.h
>

28 
	~<°dboﬁ.h
>

29 
	~<°dio.h
>

30 
	~<°rög.h
>

31 
	~<sig«l.h
>

32 
	~<m©h.h
>

33 
	~<uni°d.h
>

35 
	~"l‹agw_hÆ.h
"

36 
	~"l‹agw_ªg.h
"

37 
	~"l‹agw_aux.h
"

38 
	~"l‹agw_ødio.h
"

43 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

48 
	#DEFAULT_TX_NOTCH_FREQ
 129E3

	)

49 
	#DEFAULT_RSSI_OFFSET
 0.0

	)

50 
	#NB_CAL_MAX
 100

	)

51 
	#MCU_AGC
 1

	)

52 
	#MCU_AGC_FW_BYTE
 8192

	)

53 
	#FW_VERSION_ADDR
 0x20

	)

54 
	#FW_VERSION_CAL
 2

	)

55 
	#RAM_SIZE
 4096

	)

56 
	#FREQ_SIG_NORM
 0.078125

	)

61 
	~"../§c/ˇl_fw.v¨
"

66 
	sˇl_ªs_s
 {

67 
öt8_t
 
	mamp_a
;

68 
öt8_t
 
	mphi_a
;

69 
öt8_t
 
	mamp_b
;

70 
öt8_t
 
	mphi_b
;

71 
öt8_t
 
	moff£t_i_a
 [8];

72 
öt8_t
 
	moff£t_q_a
 [8];

73 
öt8_t
 
	moff£t_i_b
 [8];

74 
öt8_t
 
	moff£t_q_b
 [8];

75 
uöt8_t
 
	mimg_ªj_a
;

76 
uöt8_t
 
	mimg_ªj_b
;

77 
uöt8_t
 
	moff£t_ªj_a
 [8];

78 
uöt8_t
 
	moff£t_ªj_b
 [8];

79 
uöt8_t
 
	mdebug
 [8];

85 
lﬂd_fúmw¨e
(
uöt8_t
 
èrgë
, uöt8_à*
fúmw¨e
, 
uöt16_t
 
size
);

87 
uöt8_t
 
sx125x_ˇl
(uöt8_à
ˇl_cmd
, 
ˇl_ªs_s
 *
ˇl_ªs
);

89 
ªad_ˇ±uª
(
öt16_t
 *
i
, i¡16_à*
q
, 
nb_ßmp
);

91 
uöt8_t
 
gë_img_ªj
(
öt16_t
 *
sig_i
, i¡16_à*
sig_q
, 
nb_ßmp
, 
f_sig_n‹m
);

93 
ußge
 ();

99 
	$ußge
() {

100 
	`¥ötf
("Libøry vîsi⁄ inf‹m©i⁄: %s\n", 
	`lgw_vîsi⁄_öfo
());

101 
	`¥ötf
( "Available options:\n");

102 
	`¥ötf
( " -hÖrintÅhis help\n");

103 
	`¥ötf
( " -a <float> Radio A frequency in MHz\n");

104 
	`¥ötf
( " -b <float> Radio B frequency in MHz\n");

105 
	`¥ötf
( " -r <int> RadioÅype (SX1255:1255, SX1257:1257)\n");

106 
	`¥ötf
( " -n <uint> Number of calibration iterations\n");

107 
	`¥ötf
( " -k <int> Concentrator clock source (0:radio_A, 1:radio_B(default))\n");

108 
	`¥ötf
( " -t <int> RadioÅoÑun TX calibration on (0:None(default), 1:radio_A, 2:radio_B, 3:both)\n");

109 
	}
}

114 
	$maö
(
¨gc
, **
¨gv
)

116 
i
, 
j
, 
x
;

117 
öt32_t
 
ªad_vÆ
;

118 
lgw_c⁄f_bﬂrd_s
 
bﬂrdc⁄f
;

119 
lgw_c⁄f_rxrf_s
 
rfc⁄f
;

120 
uöt8_t
 
fw_vîsi⁄
;

121 
uöt8_t
 
ˇl_cmd
;

122 
uöt8_t
 
ˇl_°©us
;

123 
ˇl_ªs_s
 
ˇl_ªs
 [
NB_CAL_MAX
];

124 
ˇl_ªs_s
 
ˇl_ªs_max
;

125 
ˇl_ªs_s
 
ˇl_ªs_mö
;

126 
öt16_t
 
sig_i
 [
RAM_SIZE
];

127 
öt16_t
 
sig_q
 [
RAM_SIZE
];

128 
uöt8_t
 
img_ªj_a
 [
NB_CAL_MAX
];

129 
uöt8_t
 
img_ªj_b
 [
NB_CAL_MAX
];

130 
uöt8_t
 
img_ªj_a_max
;

131 
uöt8_t
 
img_ªj_a_mö
;

132 
uöt8_t
 
img_ªj_b_max
;

133 
uöt8_t
 
img_ªj_b_mö
;

137 
xi
 = 0;

138 
xd
 = 0.0;

139 
uöt32_t
 
Á
 = 0, 
fb
 = 0;

140 
lgw_ødio_ty≥_e
 
ødio_ty≥
 = 
LGW_RADIO_TYPE_NONE
;

141 
uöt8_t
 
˛ocksour˚
 = 1;

142 
uöt8_t
 
tx_íabÀ
 = 0;

143 
nb_ˇl
 = 5;

146 (
i
 = 
	`gë›t
 (
¨gc
, 
¨gv
, "ha:b:r:n:k:t:")) != -1) {

147 
i
) {

149 
	`ußge
();

153 
	`ssˇnf
(
›èrg
, "%lf", &
xd
);

154 
Á
 = (
uöt32_t
)((
xd
*1e6) + 0.5);

157 
	`ssˇnf
(
›èrg
, "%lf", &
xd
);

158 
fb
 = (
uöt32_t
)((
xd
*1e6) + 0.5);

161 
	`ssˇnf
(
›èrg
, "%i", &
xi
);

162 
xi
) {

164 
ødio_ty≥
 = 
LGW_RADIO_TYPE_SX1255
;

167 
ødio_ty≥
 = 
LGW_RADIO_TYPE_SX1257
;

170 
	`¥ötf
("ERROR: invalidÑadioÅype\n");

171 
	`ußge
();

176 
i
 = 
	`ssˇnf
(
›èrg
, "%i", &
xi
);

177 i‡((
i
 !1Ë|| (
xi
 > 
NB_CAL_MAX
)) {

178 
	`¥ötf
("ERROR: invÆidÇumbî o‡ˇlibøti⁄ iãøti⁄†(MAX %d)\n",
NB_CAL_MAX
);

179 
	`ußge
();

182 
nb_ˇl
 = 
xi
;

186 
	`ssˇnf
(
›èrg
, "%i", &
xi
);

187 
˛ocksour˚
 = (
uöt8_t
)
xi
;

190 
	`ssˇnf
(
›èrg
, "%i", &
xi
);

191 
tx_íabÀ
 = (
uöt8_t
)
xi
;

194 
	`¥ötf
("ERROR:árgumentÖarsing\n");

195 
	`ußge
();

201 i‡((
Á
 =0Ë|| (
fb
 == 0)) {

202 
	`¥ötf
("ERROR: missing frequency inputÖarameter:\n");

203 
	`¥ötf
(" RadiÿA RX: %u\n", 
Á
);

204 
	`¥ötf
(" RadiÿB RX: %u\n", 
fb
);

205 
	`ußge
();

209 i‡(
ødio_ty≥
 =
LGW_RADIO_TYPE_NONE
) {

210 
	`¥ötf
("ERROR: missingÑadioÅypeÖarameter:\n");

211 
	`ußge
();

217 
	`mem£t
(&
bﬂrdc⁄f
, 0, (boardconf));

219 
bﬂrdc⁄f
.
l‹aw™_public
 = 
åue
;

220 
bﬂrdc⁄f
.
˛k§c
 = 
˛ocksour˚
;

221 
	`lgw_bﬂrd_£tc⁄f
(
bﬂrdc⁄f
);

224 
	`mem£t
(&
rfc⁄f
, 0, (rfconf));

226 
rfc⁄f
.
íabÀ
 = 
åue
;

227 
rfc⁄f
.
‰eq_hz
 = 
Á
;

228 
rfc⁄f
.
rssi_off£t
 = 
DEFAULT_RSSI_OFFSET
;

229 
rfc⁄f
.
ty≥
 = 
ødio_ty≥
;

230 
rfc⁄f
.
tx_íabÀ
 = 
Ál£
;

231 
	`lgw_rxrf_£tc⁄f
(0, 
rfc⁄f
);

233 
rfc⁄f
.
‰eq_hz
 = 
fb
;

234 
rfc⁄f
.
tx_íabÀ
 = 
Ál£
;

235 
	`lgw_rxrf_£tc⁄f
(1, 
rfc⁄f
);

238 
ˇl_cmd
 = 0;

243 
ˇl_cmd
 |= 0x10;

245 
ødio_ty≥
) {

246 
LGW_RADIO_TYPE_SX1255
:

247 
ˇl_cmd
 |= 0x20;

249 
LGW_RADIO_TYPE_SX1257
:

250 
ˇl_cmd
 |= 0x00;

256 
ˇl_cmd
 |= 0x00;

259 
	`¥ötf
("Libøry vîsi⁄ inf‹m©i⁄: %s\n", 
	`lgw_vîsi⁄_öfo
());

260 
	`¥ötf
("Radiÿty≥: %d\n",
ødio_ty≥
);

261 
	`¥ötf
("RadiÿA fªquícy: %‡MHz\n",
Á
/1e6);

262 
	`¥ötf
("RadiÿB fªquícy: %‡MHz\n",
fb
/1e6);

263 
	`¥ötf
("Numbî o‡ˇlibøti⁄ iãøti⁄s: %d\n",
nb_ˇl
);

264 
	`¥ötf
("CÆibøti⁄ comm™d: brd: %d, chù: %d, dac: %d\n\n", 
ˇl_cmd
 >> 6, 1257-2*((cal_cmd & 0x20) >> 5), 2+((cal_cmd & 0x10) >> 4));

266 
x
 = 
	`lgw_c⁄√˘
(
Ál£
, 
DEFAULT_TX_NOTCH_FREQ
);

267 i‡(
x
 == -1) {

268 
	`¥ötf
("ERROR: FAIL TO CONNECT BOARD\n");

273 
	`lgw_so·_ª£t
();

276 
	`lgw_ªg_w
(
LGW_GLOBAL_EN
, 1);

279 
	`lgw_ªg_w
(
LGW_RADIO_A_EN
,1);

280 
	`lgw_ªg_w
(
LGW_RADIO_B_EN
,1);

281 
	`waô_ms
(500);

282 
	`lgw_ªg_w
(
LGW_RADIO_RST
,1);

283 
	`waô_ms
(5);

284 
	`lgw_ªg_w
(
LGW_RADIO_RST
,0);

287 
	`lgw_£tup_sx125x
(0, 
˛ocksour˚
, 
åue
, 
ødio_ty≥
, 
Á
);

288 
	`lgw_£tup_sx125x
(1, 
˛ocksour˚
, 
Ál£
, 
ødio_ty≥
, 
fb
);

291 
	`lgw_ªg_w
(
LGW_GPIO_MODE
,31);

292 
	`lgw_ªg_w
(
LGW_GPIO_SELECT_OUTPUT
,2);

295 
	`lﬂd_fúmw¨e
(
MCU_AGC
, 
ˇl_fúmw¨e
, 
MCU_AGC_FW_BYTE
);

296 
	`lgw_ªg_w
(
LGW_MCU_RST_1
,0);

297 
	`lgw_ªg_w
(
LGW_DBG_AGC_MCU_RAM_ADDR
, 
FW_VERSION_ADDR
);

298 
	`lgw_ªg_r
(
LGW_DBG_AGC_MCU_RAM_DATA
, &
ªad_vÆ
);

299 
fw_vîsi⁄
 = (
uöt8_t
)
ªad_vÆ
;

300 i‡(
fw_vîsi⁄
 !
FW_VERSION_CAL
) {

301 
	`¥ötf
("ERROR: Vîsi⁄ o‡ˇlibøti⁄ fúmw¨ênŸÉx≥˘ed,á˘uÆ:%dÉx≥˘ed:%d\n", 
fw_vîsi⁄
, 
FW_VERSION_CAL
);

306 
i
=0; i<
nb_ˇl
; i++) {

307 
ˇl_°©us
 = 
	`sx125x_ˇl
(
ˇl_cmd
 | 0x01, &
ˇl_ªs
[
i
]);

308 
x
 = 
	`ªad_ˇ±uª
(
sig_i
, 
sig_q
, 
RAM_SIZE
);

316 
img_ªj_a
[
i
] = 
	`gë_img_ªj
(
sig_i
, 
sig_q
, 
RAM_SIZE
, 
FREQ_SIG_NORM
);

318 
	`¥ötf
("Rx A IQ mism©ch: Amp: %3d Phi: %3d Rej: %2d dB Sètus: %3d | Debug: Rej: %2d dB L«: %1d BB: %2d Dec: %2d\n", 
ˇl_ªs
[
i
].
amp_a
, cÆ_ªs[i].
phi_a
, cÆ_ªs[i].
img_ªj_a
, 
ˇl_°©us
, img_ªj_a[i], cÆ_ªs[i].
debug
[0], cal_res[i].debug[1], cal_res[i].debug[2]);

322 
	`¥ötf
("\n");

323 
i
=0; i<
nb_ˇl
; i++) {

324 
ˇl_°©us
 = 
	`sx125x_ˇl
(
ˇl_cmd
 | 0x02, &
ˇl_ªs
[
i
]);

325 
x
 = 
	`ªad_ˇ±uª
(
sig_i
, 
sig_q
, 
RAM_SIZE
);

326 
img_ªj_b
[
i
] = 
	`gë_img_ªj
(
sig_i
, 
sig_q
, 
RAM_SIZE
, 
FREQ_SIG_NORM
);

328 
	`¥ötf
("Rx B IQ mism©ch: Amp: %3d Phi: %3d Rej: %2d dB Sètus: %3d | Debug: Rej: %2d dB L«: %1d BB: %2d Dec: %2d\n", 
ˇl_ªs
[
i
].
amp_b
, cÆ_ªs[i].
phi_b
, cÆ_ªs[i].
img_ªj_b
, 
ˇl_°©us
, img_ªj_b[i], cÆ_ªs[i].
debug
[0], cal_res[i].debug[1], cal_res[i].debug[2]);

332 
	`¥ötf
("\n");

333 i‡((
tx_íabÀ
 == 1) || (tx_enable == 3)) {

334 
i
=0; i<
nb_ˇl
; i++) {

335 
ˇl_°©us
 = 
	`sx125x_ˇl
(
ˇl_cmd
 | 0x04, &
ˇl_ªs
[
i
]);

337 
	`¥ötf
("Tx A DC offset I :");

338 
j
=0; j<8; j++) {

339 
	`¥ötf
(" %3d", 
ˇl_ªs
[
i
].
off£t_i_a
[
j
]);

341 
	`¥ötf
("\n");

342 
	`¥ötf
("Tx A DC offset Q :");

343 
j
=0; j<8; j++) {

344 
	`¥ötf
(" %3d", 
ˇl_ªs
[
i
].
off£t_q_a
[
j
]);

346 
	`¥ötf
("\n");

347 
	`¥ötf
("Tx A DCÑejection:");

348 
j
=0; j<8; j++) {

349 
	`¥ötf
(" %3d", 
ˇl_ªs
[
i
].
off£t_ªj_a
[
j
]);

351 
	`¥ötf
("\n");

352 
	`¥ötf
("Tx A DC debug BB :");

353 
j
=0; j<8; j++) {

354 
	`¥ötf
(" %3d", (
ˇl_ªs
[
i
].
debug
[
j
] & 0xF0) >> 4);

356 
	`¥ötf
("\n");

357 
	`¥ötf
("Tx A DC debug Dec:");

358 
j
=0; j<8; j++) {

359 
	`¥ötf
(" %3d", 
ˇl_ªs
[
i
].
debug
[
j
] & 0x0F);

361 
	`¥ötf
("\n");

362 
	`¥ötf
("Tx A DC Sètu† : %3d\n", 
ˇl_°©us
);

365 
	`¥ötf
("Tx A calibration bypassed\n");

369 
	`¥ötf
("\n");

370 i‡((
tx_íabÀ
 == 2) || (tx_enable == 3)) {

371 
i
=0; i<
nb_ˇl
; i++) {

372 
ˇl_°©us
 = 
	`sx125x_ˇl
(
ˇl_cmd
 | 0x08, &
ˇl_ªs
[
i
]);

374 
	`¥ötf
("Tx B DC offset I :");

375 
j
=0; j<8; j++) {

376 
	`¥ötf
(" %3d", 
ˇl_ªs
[
i
].
off£t_i_b
[
j
]);

378 
	`¥ötf
("\n");

379 
	`¥ötf
("Tx B DC offset Q :");

380 
j
=0; j<8; j++) {

381 
	`¥ötf
(" %3d", 
ˇl_ªs
[
i
].
off£t_q_b
[
j
]);

383 
	`¥ötf
("\n");

384 
	`¥ötf
("Tx B DCÑejection:");

385 
j
=0; j<8; j++) {

386 
	`¥ötf
(" %3d", 
ˇl_ªs
[
i
].
off£t_ªj_b
[
j
]);

388 
	`¥ötf
("\n");

389 
	`¥ötf
("Tx B DC debug BB :");

390 
j
=0; j<8; j++) {

391 
	`¥ötf
(" %3d", (
ˇl_ªs
[
i
].
debug
[
j
] & 0xF0) >> 4);

393 
	`¥ötf
("\n");

394 
	`¥ötf
("Tx B DC debug Dec:");

395 
j
=0; j<8; j++) {

396 
	`¥ötf
(" %3d", 
ˇl_ªs
[
i
].
debug
[
j
] & 0x0F);

398 
	`¥ötf
("\n");

399 
	`¥ötf
("Tx B DC Sètu† : %3d\n", 
ˇl_°©us
);

402 
	`¥ötf
("Tx B calibration bypassed\n");

406 
ˇl_ªs_max
.
amp_a
 = -128;

407 
ˇl_ªs_max
.
phi_a
 = -128;

408 
ˇl_ªs_max
.
amp_b
 = -128;

409 
ˇl_ªs_max
.
phi_b
 = -128;

410 
ˇl_ªs_max
.
img_ªj_a
 = 0;

411 
ˇl_ªs_max
.
img_ªj_b
 = 0;

412 
j
=0; j<8; j++) {

413 
ˇl_ªs_max
.
off£t_i_a
[
j
] = -128;

414 
ˇl_ªs_max
.
off£t_q_a
[
j
] = -128;

415 
ˇl_ªs_max
.
off£t_i_b
[
j
] = -128;

416 
ˇl_ªs_max
.
off£t_q_b
[
j
] = -128;

417 
ˇl_ªs_max
.
off£t_ªj_a
[
j
] = 0;

418 
ˇl_ªs_max
.
off£t_ªj_b
[
j
] = 0;

421 
ˇl_ªs_mö
.
amp_a
 = 127;

422 
ˇl_ªs_mö
.
phi_a
 = 127;

423 
ˇl_ªs_mö
.
amp_b
 = 127;

424 
ˇl_ªs_mö
.
phi_b
 = 127;

425 
ˇl_ªs_mö
.
img_ªj_a
 = 255;

426 
ˇl_ªs_mö
.
img_ªj_b
 = 255;

427 
j
=0; j<8; j++) {

428 
ˇl_ªs_mö
.
off£t_i_a
[
j
] = 127;

429 
ˇl_ªs_mö
.
off£t_q_a
[
j
] = 127;

430 
ˇl_ªs_mö
.
off£t_i_b
[
j
] = 127;

431 
ˇl_ªs_mö
.
off£t_q_b
[
j
] = 127;

432 
ˇl_ªs_mö
.
off£t_ªj_a
[
j
] = 255;

433 
ˇl_ªs_mö
.
off£t_ªj_b
[
j
] = 255;

436 
img_ªj_a_max
 = 0;

437 
img_ªj_a_mö
 = 255;

438 
img_ªj_b_max
 = 0;

439 
img_ªj_b_mö
 = 255;

441 
i
=0; i<
nb_ˇl
; i++) {

442 i‡(
ˇl_ªs
[
i
].
amp_a
 > 
ˇl_ªs_max
.amp_a) {

443 
ˇl_ªs_max
.
amp_a
 = 
ˇl_ªs
[
i
].amp_a;

445 i‡(
ˇl_ªs
[
i
].
phi_a
 > 
ˇl_ªs_max
.phi_a) {

446 
ˇl_ªs_max
.
phi_a
 = 
ˇl_ªs
[
i
].phi_a;

448 i‡(
ˇl_ªs
[
i
].
amp_b
 > 
ˇl_ªs_max
.amp_b) {

449 
ˇl_ªs_max
.
amp_b
 = 
ˇl_ªs
[
i
].amp_b;

451 i‡(
ˇl_ªs
[
i
].
phi_b
 > 
ˇl_ªs_max
.phi_b) {

452 
ˇl_ªs_max
.
phi_b
 = 
ˇl_ªs
[
i
].phi_b;

454 i‡(
ˇl_ªs
[
i
].
phi_b
 > 
ˇl_ªs_max
.phi_b) {

455 
ˇl_ªs_max
.
phi_b
 = 
ˇl_ªs
[
i
].phi_b;

457 i‡(
ˇl_ªs
[
i
].
img_ªj_a
 > 
ˇl_ªs_max
.img_rej_a) {

458 
ˇl_ªs_max
.
img_ªj_a
 = 
ˇl_ªs
[
i
].img_rej_a;

460 i‡(
ˇl_ªs
[
i
].
img_ªj_b
 > 
ˇl_ªs_max
.img_rej_b) {

461 
ˇl_ªs_max
.
img_ªj_b
 = 
ˇl_ªs
[
i
].img_rej_b;

463 
j
=0; j<8; j++) {

464 i‡(
ˇl_ªs
[
i
].
off£t_i_a
[
j
] > 
ˇl_ªs_max
.offset_i_a[j]) {

465 
ˇl_ªs_max
.
off£t_i_a
[
j
] = 
ˇl_ªs
[
i
].offset_i_a[j];

467 i‡(
ˇl_ªs
[
i
].
off£t_q_a
[
j
] > 
ˇl_ªs_max
.offset_q_a[j]) {

468 
ˇl_ªs_max
.
off£t_q_a
[
j
] = 
ˇl_ªs
[
i
].offset_q_a[j];

470 i‡(
ˇl_ªs
[
i
].
off£t_i_b
[
j
] > 
ˇl_ªs_max
.offset_i_b[j]) {

471 
ˇl_ªs_max
.
off£t_i_b
[
j
] = 
ˇl_ªs
[
i
].offset_i_b[j];

473 i‡(
ˇl_ªs
[
i
].
off£t_q_b
[
j
] > 
ˇl_ªs_max
.offset_q_b[j]) {

474 
ˇl_ªs_max
.
off£t_q_b
[
j
] = 
ˇl_ªs
[
i
].offset_q_b[j];

476 i‡(
ˇl_ªs
[
i
].
off£t_ªj_a
[
j
] > 
ˇl_ªs_max
.offset_rej_a[j]) {

477 
ˇl_ªs_max
.
off£t_ªj_a
[
j
] = 
ˇl_ªs
[
i
].offset_rej_a[j];

479 i‡(
ˇl_ªs
[
i
].
off£t_ªj_b
[
j
] > 
ˇl_ªs_max
.offset_rej_b[j]) {

480 
ˇl_ªs_max
.
off£t_ªj_b
[
j
] = 
ˇl_ªs
[
i
].offset_rej_b[j];

484 i‡(
ˇl_ªs
[
i
].
amp_a
 < 
ˇl_ªs_mö
.amp_a) {

485 
ˇl_ªs_mö
.
amp_a
 = 
ˇl_ªs
[
i
].amp_a;

487 i‡(
ˇl_ªs
[
i
].
phi_a
 < 
ˇl_ªs_mö
.phi_a) {

488 
ˇl_ªs_mö
.
phi_a
 = 
ˇl_ªs
[
i
].phi_a;

490 i‡(
ˇl_ªs
[
i
].
amp_b
 < 
ˇl_ªs_mö
.amp_b) {

491 
ˇl_ªs_mö
.
amp_b
 = 
ˇl_ªs
[
i
].amp_b;

493 i‡(
ˇl_ªs
[
i
].
phi_b
 < 
ˇl_ªs_mö
.phi_b) {

494 
ˇl_ªs_mö
.
phi_b
 = 
ˇl_ªs
[
i
].phi_b;

496 i‡(
ˇl_ªs
[
i
].
phi_b
 < 
ˇl_ªs_mö
.phi_b) {

497 
ˇl_ªs_mö
.
phi_b
 = 
ˇl_ªs
[
i
].phi_b;

499 i‡(
ˇl_ªs
[
i
].
img_ªj_a
 < 
ˇl_ªs_mö
.img_rej_a) {

500 
ˇl_ªs_mö
.
img_ªj_a
 = 
ˇl_ªs
[
i
].img_rej_a;

502 i‡(
ˇl_ªs
[
i
].
img_ªj_b
 < 
ˇl_ªs_mö
.img_rej_b) {

503 
ˇl_ªs_mö
.
img_ªj_b
 = 
ˇl_ªs
[
i
].img_rej_b;

505 
j
=0; j<8; j++) {

506 i‡(
ˇl_ªs
[
i
].
off£t_i_a
[
j
] < 
ˇl_ªs_mö
.offset_i_a[j]) {

507 
ˇl_ªs_mö
.
off£t_i_a
[
j
] = 
ˇl_ªs
[
i
].offset_i_a[j];

509 i‡(
ˇl_ªs
[
i
].
off£t_q_a
[
j
] < 
ˇl_ªs_mö
.offset_q_a[j]) {

510 
ˇl_ªs_mö
.
off£t_q_a
[
j
] = 
ˇl_ªs
[
i
].offset_q_a[j];

512 i‡(
ˇl_ªs
[
i
].
off£t_i_b
[
j
] < 
ˇl_ªs_mö
.offset_i_b[j]) {

513 
ˇl_ªs_mö
.
off£t_i_b
[
j
] = 
ˇl_ªs
[
i
].offset_i_b[j];

515 i‡(
ˇl_ªs
[
i
].
off£t_q_b
[
j
] < 
ˇl_ªs_mö
.offset_q_b[j]) {

516 
ˇl_ªs_mö
.
off£t_q_b
[
j
] = 
ˇl_ªs
[
i
].offset_q_b[j];

518 i‡(
ˇl_ªs
[
i
].
off£t_ªj_a
[
j
] < 
ˇl_ªs_mö
.offset_rej_a[j]) {

519 
ˇl_ªs_mö
.
off£t_ªj_a
[
j
] = 
ˇl_ªs
[
i
].offset_rej_a[j];

521 i‡(
ˇl_ªs
[
i
].
off£t_ªj_b
[
j
] < 
ˇl_ªs_mö
.offset_rej_b[j]) {

522 
ˇl_ªs_mö
.
off£t_ªj_b
[
j
] = 
ˇl_ªs
[
i
].offset_rej_b[j];

526 i‡(
img_ªj_a
[
i
] > 
img_ªj_a_max
) {

527 
img_ªj_a_max
 = 
img_ªj_a
[
i
];

529 i‡(
img_ªj_a
[
i
] < 
img_ªj_a_mö
) {

530 
img_ªj_a_mö
 = 
img_ªj_a
[
i
];

532 i‡(
img_ªj_b
[
i
] > 
img_ªj_b_max
) {

533 
img_ªj_b_max
 = 
img_ªj_b
[
i
];

535 i‡(
img_ªj_b
[
i
] < 
img_ªj_b_mö
) {

536 
img_ªj_b_mö
 = 
img_ªj_b
[
i
];

541 
	`¥ötf
("\n");

542 
	`¥ötf
("Rx A IQ mism©ch cÆibøti⁄ sèti°ic†⁄ %3d iãøti⁄†(mö, max):\n", 
nb_ˇl
);

543 
	`¥ötf
("Amp: %3d %3d Phi: %3d %3d Rej: %2d %2d dB (ˇ±.: %2d %2d dB)\n", 
ˇl_ªs_mö
.
amp_a
, 
ˇl_ªs_max
.amp_a, cÆ_ªs_mö.
phi_a
, cÆ_ªs_max.phi_a, cÆ_ªs_mö.
img_ªj_a
, cÆ_ªs_max.img_ªj_a, 
img_ªj_a_mö
, 
img_ªj_a_max
);

545 
	`¥ötf
("\n");

546 
	`¥ötf
("Rx B IQ mism©ch cÆibøti⁄ sèti°ic†⁄ %3d iãøti⁄†(mö, max):\n", 
nb_ˇl
);

547 
	`¥ötf
("Amp: %3d %3d Phi: %3d %3d Rej: %2d %2d dB (ˇ±.: %2d %2d dB)\n", 
ˇl_ªs_mö
.
amp_b
, 
ˇl_ªs_max
.amp_b, cÆ_ªs_mö.
phi_b
, cÆ_ªs_max.phi_b, cÆ_ªs_mö.
img_ªj_b
, cÆ_ªs_max.img_ªj_b, 
img_ªj_b_mö
, 
img_ªj_b_max
);

549 i‡((
tx_íabÀ
 == 1) || (tx_enable == 3)) {

550 
	`¥ötf
("\n");

551 
	`¥ötf
("Tx A DC off£àˇlibøti⁄ sèti°ic†⁄ %3d iãøti⁄†(mö, max):\n", 
nb_ˇl
);

552 
j
=0; j<8; j++) {

553 
	`¥ötf
(" Mix gaö %2d: I: %3d %3d Q: %3d %3d Rej: %2d %2d dB\n", 8+
j
, 
ˇl_ªs_mö
.
off£t_i_a
[j], 
ˇl_ªs_max
.off£t_i_a[j], cÆ_ªs_mö.
off£t_q_a
[j], cÆ_ªs_max.off£t_q_a[j], cÆ_ªs_mö.
off£t_ªj_a
[j], cal_res_max.offset_rej_a[j]);

557 i‡((
tx_íabÀ
 == 2) || (tx_enable == 3)) {

558 
	`¥ötf
("\n");

559 
	`¥ötf
("Tx B DC off£àˇlibøti⁄ sèti°ic†⁄ %3d iãøti⁄†(mö, max):\n", 
nb_ˇl
);

560 
j
=0; j<8; j++) {

561 
	`¥ötf
(" Mix gaö %2d: I: %3d %3d Q: %3d %3d Rej: %2d %2d dB\n", 8+
j
, 
ˇl_ªs_mö
.
off£t_i_b
[j], 
ˇl_ªs_max
.off£t_i_b[j], cÆ_ªs_mö.
off£t_q_b
[j], cÆ_ªs_max.off£t_q_b[j], cÆ_ªs_mö.
off£t_ªj_b
[j], cal_res_max.offset_rej_b[j]);

565 
	`lgw_°›
();

567 
	`¥ötf
("\nEnd ofÑadio calibrationÅest\n");

570 
	}
}

574 
uöt8_t
 
	$sx125x_ˇl
(
uöt8_t
 
ˇl_cmd
, 
ˇl_ªs_s
 *
ˇl_ªs
) {

576 
i
;

577 
öt32_t
 
ªad_vÆ
;

578 
uöt8_t
 
ˇl_°©us
;

580 
	`lgw_ªg_w
(
LGW_FORCE_HOST_RADIO_CTRL
,0);

581 
	`lgw_ªg_w
(
LGW_RADIO_SELECT
,
ˇl_cmd
);

582 
	`lgw_ªg_w
(
LGW_MCU_RST_1
,1);

583 
	`lgw_ªg_w
(
LGW_MCU_RST_1
,0);

584 
	`lgw_ªg_w
(
LGW_PAGE_REG
,3);

585 
	`lgw_ªg_w
(
LGW_EMERGENCY_FORCE_HOST_CTRL
,0);

587 
	`waô_ms
(2000);

589 
	`lgw_ªg_w
(
LGW_EMERGENCY_FORCE_HOST_CTRL
,1);

592 
	`lgw_ªg_r
(
LGW_MCU_AGC_STATUS
, &
ªad_vÆ
);

593 
ˇl_°©us
 = (
uöt8_t
)
ªad_vÆ
;

605 i‡((
ˇl_°©us
 & 0x01) == 0) {

606 
	`¥ötf
("WARNING: calibration couldÇotáccess SX1301Ñegisters\n");

608 i‡((
ˇl_°©us
 & 0x02) == 0) {

609 
	`¥ötf
("WARNING: calibration couldÇotáccessÑadio A\n");

611 i‡((
ˇl_°©us
 & 0x04) == 0) {

612 
	`¥ötf
("WARNING: calibration couldÇotáccessÑadio B\n");

614 i‡((
ˇl_cmd
 & 0x01Ë&& ((
ˇl_°©us
 & 0x08) == 0)) {

615 
	`¥ötf
("WARNING:Öroblem in calibration ofÑadio A for imageÑejection\n");

617 i‡((
ˇl_cmd
 & 0x02Ë&& ((
ˇl_°©us
 & 0x10) == 0)) {

618 
	`¥ötf
("WARNING:Öroblem in calibration ofÑadio B for imageÑejection\n");

620 i‡((
ˇl_cmd
 & 0x04Ë&& ((
ˇl_°©us
 & 0x20) == 0)) {

621 
	`¥ötf
("WARNING:Öroblem in calibration ofÑadio A for TX imbalance\n");

623 i‡((
ˇl_cmd
 & 0x08Ë&& ((
ˇl_°©us
 & 0x40) == 0)) {

624 
	`¥ötf
("WARNING:Öroblem in calibration ofÑadio B for TX imbalance\n");

626 i‡((
ˇl_°©us
 & 0x80) == 0) {

627 
	`¥ötf
("WARNING: CalibrationÇot finished\n");

631 i‡(
ˇl_cmd
 & 0x01) {

632 
	`lgw_ªg_r
(
LGW_IQ_MISMATCH_A_AMP_COEFF
, &
ªad_vÆ
);

633 (*
ˇl_ªs
).
amp_a
 = (
öt8_t
)((
ªad_vÆ
 > 31) ?Ñead_val - 64 :Ñead_val);

634 
	`lgw_ªg_r
(
LGW_IQ_MISMATCH_A_PHI_COEFF
, &
ªad_vÆ
);

635 (*
ˇl_ªs
).
phi_a
 = (
öt8_t
)((
ªad_vÆ
 > 31) ?Ñead_val - 64 :Ñead_val);

636 
	`lgw_ªg_w
(
LGW_DBG_AGC_MCU_RAM_ADDR
, 0xD0);

637 
	`lgw_ªg_r
(
LGW_DBG_AGC_MCU_RAM_DATA
, &
ªad_vÆ
);

638 (*
ˇl_ªs
).
img_ªj_a
 = (
uöt8_t
)
ªad_vÆ
;

639 
	`lgw_ªg_w
(
LGW_DBG_AGC_MCU_RAM_ADDR
, 0xD2);

640 
	`lgw_ªg_r
(
LGW_DBG_AGC_MCU_RAM_DATA
, &
ªad_vÆ
);

641 (*
ˇl_ªs
).
debug
[0] = (
uöt8_t
)
ªad_vÆ
;

642 
	`lgw_ªg_w
(
LGW_DBG_AGC_MCU_RAM_ADDR
, 0xD3);

643 
	`lgw_ªg_r
(
LGW_DBG_AGC_MCU_RAM_DATA
, &
ªad_vÆ
);

644 (*
ˇl_ªs
).
debug
[1] = (
uöt8_t
)
ªad_vÆ
;

645 
	`lgw_ªg_w
(
LGW_DBG_AGC_MCU_RAM_ADDR
, 0xD4);

646 
	`lgw_ªg_r
(
LGW_DBG_AGC_MCU_RAM_DATA
, &
ªad_vÆ
);

647 (*
ˇl_ªs
).
debug
[2] = (
uöt8_t
)
ªad_vÆ
;

649 i‡(
ˇl_cmd
 & 0x02) {

650 
	`lgw_ªg_r
(
LGW_IQ_MISMATCH_B_AMP_COEFF
, &
ªad_vÆ
);

651 (*
ˇl_ªs
).
amp_b
 = (
öt8_t
)((
ªad_vÆ
 > 31) ?Ñead_val - 64 :Ñead_val);

652 
	`lgw_ªg_r
(
LGW_IQ_MISMATCH_B_PHI_COEFF
, &
ªad_vÆ
);

653 (*
ˇl_ªs
).
phi_b
 = (
öt8_t
)((
ªad_vÆ
 > 31) ?Ñead_val - 64 :Ñead_val);

654 
	`lgw_ªg_w
(
LGW_DBG_AGC_MCU_RAM_ADDR
, 0xD1);

655 
	`lgw_ªg_r
(
LGW_DBG_AGC_MCU_RAM_DATA
, &
ªad_vÆ
);

656 (*
ˇl_ªs
).
img_ªj_b
 = (
uöt8_t
)
ªad_vÆ
;

657 
	`lgw_ªg_w
(
LGW_DBG_AGC_MCU_RAM_ADDR
, 0xD2);

658 
	`lgw_ªg_r
(
LGW_DBG_AGC_MCU_RAM_DATA
, &
ªad_vÆ
);

659 (*
ˇl_ªs
).
debug
[0] = (
uöt8_t
)
ªad_vÆ
;

660 
	`lgw_ªg_w
(
LGW_DBG_AGC_MCU_RAM_ADDR
, 0xD3);

661 
	`lgw_ªg_r
(
LGW_DBG_AGC_MCU_RAM_DATA
, &
ªad_vÆ
);

662 (*
ˇl_ªs
).
debug
[1] = (
uöt8_t
)
ªad_vÆ
;

663 
	`lgw_ªg_w
(
LGW_DBG_AGC_MCU_RAM_ADDR
, 0xD4);

664 
	`lgw_ªg_r
(
LGW_DBG_AGC_MCU_RAM_DATA
, &
ªad_vÆ
);

665 (*
ˇl_ªs
).
debug
[2] = (
uöt8_t
)
ªad_vÆ
;

667 i‡(
ˇl_cmd
 & 0x04) {

668 
i
=0; i<=7; ++i) {

669 
	`lgw_ªg_w
(
LGW_DBG_AGC_MCU_RAM_ADDR
, 0xA0+
i
);

670 
	`lgw_ªg_r
(
LGW_DBG_AGC_MCU_RAM_DATA
, &
ªad_vÆ
);

671 (*
ˇl_ªs
).
off£t_i_a
[
i
] = (
öt8_t
)
ªad_vÆ
;

672 
	`lgw_ªg_w
(
LGW_DBG_AGC_MCU_RAM_ADDR
, 0xA8+
i
);

673 
	`lgw_ªg_r
(
LGW_DBG_AGC_MCU_RAM_DATA
, &
ªad_vÆ
);

674 (*
ˇl_ªs
).
off£t_q_a
[
i
] = (
öt8_t
)
ªad_vÆ
;

675 
	`lgw_ªg_w
(
LGW_DBG_AGC_MCU_RAM_ADDR
, 0xC0+
i
);

676 
	`lgw_ªg_r
(
LGW_DBG_AGC_MCU_RAM_DATA
, &
ªad_vÆ
);

677 (*
ˇl_ªs
).
off£t_ªj_a
[
i
] = (
uöt8_t
)
ªad_vÆ
;

678 
	`lgw_ªg_w
(
LGW_DBG_AGC_MCU_RAM_ADDR
, 0xD2+
i
);

679 
	`lgw_ªg_r
(
LGW_DBG_AGC_MCU_RAM_DATA
, &
ªad_vÆ
);

680 (*
ˇl_ªs
).
debug
[
i
] = (
uöt8_t
)
ªad_vÆ
;

683 i‡(
ˇl_cmd
 & 0x08) {

684 
i
=0; i<=7; ++i) {

685 
	`lgw_ªg_w
(
LGW_DBG_AGC_MCU_RAM_ADDR
, 0xB0+
i
);

686 
	`lgw_ªg_r
(
LGW_DBG_AGC_MCU_RAM_DATA
, &
ªad_vÆ
);

687 (*
ˇl_ªs
).
off£t_i_b
[
i
] = (
öt8_t
)
ªad_vÆ
;

688 
	`lgw_ªg_w
(
LGW_DBG_AGC_MCU_RAM_ADDR
, 0xB8+
i
);

689 
	`lgw_ªg_r
(
LGW_DBG_AGC_MCU_RAM_DATA
, &
ªad_vÆ
);

690 (*
ˇl_ªs
).
off£t_q_b
[
i
] = (
öt8_t
)
ªad_vÆ
;

691 
	`lgw_ªg_w
(
LGW_DBG_AGC_MCU_RAM_ADDR
, 0xC8+
i
);

692 
	`lgw_ªg_r
(
LGW_DBG_AGC_MCU_RAM_DATA
, &
ªad_vÆ
);

693 (*
ˇl_ªs
).
off£t_ªj_b
[
i
] = (
uöt8_t
)
ªad_vÆ
;

694 
	`lgw_ªg_w
(
LGW_DBG_AGC_MCU_RAM_ADDR
, 0xD2+
i
);

695 
	`lgw_ªg_r
(
LGW_DBG_AGC_MCU_RAM_DATA
, &
ªad_vÆ
);

696 (*
ˇl_ªs
).
debug
[
i
] = (
uöt8_t
)
ªad_vÆ
;

700  
ˇl_°©us
;

701 
	}
}

705 
	$ªad_ˇ±uª
(
öt16_t
 *
sig_i
, i¡16_à*
sig_q
, 
nb_ßmp
) {

707 
uöt8_t
 
ªad_bur°
[4];

708 
uöt16_t
 
d©a_i_c2
;

709 
uöt16_t
 
d©a_q_c2
;

710 
i
;

712 
	`lgw_ªg_w
(
LGW_CAPTURE_RAM_ADDR
, 0);

713 
i
=0 ; i<
nb_ßmp
 ; i++) {

714 
	`lgw_ªg_rb
(
LGW_CAPTURE_RAM_DATA
, 
ªad_bur°
, 4);

715 
d©a_i_c2
 = ((
uöt16_t
)
ªad_bur°
[3] << 4) + ((uint16_t)read_burst[2] >> 4);

716 
d©a_q_c2
 = ((
uöt16_t
)
ªad_bur°
[1] << 4) + ((uint16_t)read_burst[0] >> 4);

717 
sig_i
[
i
] = (
öt16_t
)((
d©a_i_c2
 > 2047) ? data_i_c2 - 4096 : data_i_c2);

718 
sig_q
[
i
] = (
öt16_t
)((
d©a_q_c2
 > 2047) ? data_q_c2 - 4096 : data_q_c2);

722 
	}
}

726 
uöt8_t
 
	$gë_img_ªj
(
öt16_t
 *
sig_i
, i¡16_à*
sig_q
, 
nb_ßmp
, 
f_sig_n‹m
) {

728 
i
;

729 
pha£
;

730 
c‹r_sig_i
, 
c‹r_sig_q
, 
c‹r_sig_abs
;

731 
c‹r_img_i
, 
c‹r_img_q
, 
c‹r_img_abs
;

732 
img_ªj
;

734 
c‹r_sig_i
 = 0;

735 
c‹r_sig_q
 = 0;

736 
c‹r_img_i
 = 0;

737 
c‹r_img_q
 = 0;

739 
i
=0 ; i<
nb_ßmp
 ; i++) {

740 
pha£
 = 6.28318530717959*
i
*
f_sig_n‹m
;

741 
c‹r_sig_i
 +()
sig_i
[
i
]*
	`cos
–
pha£
Ë- ()
sig_q
[i]*
	`sö
(Öhase);

742 
c‹r_sig_q
 +()
sig_q
[
i
]*
	`cos
–
pha£
Ë+ ()
sig_i
[i]*
	`sö
(Öhase);

743 
c‹r_img_i
 +()
sig_i
[
i
]*
	`cos
(-
pha£
Ë- ()
sig_q
[i]*
	`sö
(-phase);

744 
c‹r_img_q
 +()
sig_q
[
i
]*
	`cos
(-
pha£
Ë+ ()
sig_i
[i]*
	`sö
(-phase);

747 
c‹r_sig_abs
 = 
	`sqπ
–
c‹r_sig_i
*c‹r_sig_ò+ 
c‹r_sig_q
*corr_sig_q );

748 
c‹r_img_abs
 = 
	`sqπ
–
c‹r_img_i
*c‹r_img_ò+ 
c‹r_img_q
*corr_img_q );

750 
img_ªj
 = 20*
	`log10
(
c‹r_sig_abs
/
c‹r_img_abs
);

752  (
uöt8_t
)
img_ªj
;

753 
	}
}

	@hal/tst/test_loragw_gps.c

21 #i‡
__STDC_VERSION__
 >= 199901L

22 
	#_XOPEN_SOURCE
 600

	)

24 
	#_XOPEN_SOURCE
 500

	)

27 
	~<°döt.h
>

28 
	~<°dboﬁ.h
>

29 
	~<°dio.h
>

30 
	~<°rög.h
>

31 
	~<sig«l.h
>

32 
	~<°dlib.h
>

33 
	~<uni°d.h
>

35 
	~"l‹agw_hÆ.h
"

36 
	~"l‹agw_gps.h
"

37 
	~"l‹agw_aux.h
"

42 
	gexô_sig
 = 0;

43 
	gquô_sig
 = 0;

45 
åef
 
	gµm_ªf
;

50 
sig_h™dÀr
(
sigio
);

51 
gps_¥o˚ss_sync
();

52 
gps_¥o˚ss_co‹ds
();

57 
	$sig_h™dÀr
(
sigio
) {

58 i‡(
sigio
 =
SIGQUIT
) {

59 
quô_sig
 = 1;;

60 } i‡((
sigio
 =
SIGINT
Ë|| (sigiÿ=
SIGTERM
)) {

61 
exô_sig
 = 1;

63 
	}
}

65 
	$gps_¥o˚ss_sync
() {

67 
uöt32_t
 
µm_t°amp
;

68 
time•ec
 
µm_gps
;

69 
time•ec
 
µm_utc
;

72 
uöt32_t
 
x
, 
z
;

73 
time•ec
 
y
;

76 
i
 = 
	`lgw_gps_gë
(&
µm_utc
, &
µm_gps
, 
NULL
, NULL);

77 i‡(
i
 !
LGW_GPS_SUCCESS
) {

78 
	`¥ötf
(" No validÑeference GPSÅimeávailable, synchronization impossible.\n");

83 
i
 = 
	`lgw_gë_åig˙t
(&
µm_t°amp
);

84 i‡(
i
 !
LGW_HAL_SUCCESS
) {

85 
	`¥ötf
(" FailedÅoÑeadÅimestamp, synchronization impossible.\n");

90 
i
 = 
	`lgw_gps_sync
(&
µm_ªf
, 
µm_t°amp
, 
µm_utc
, 
µm_gps
);

91 i‡(
i
 !
LGW_GPS_SUCCESS
) {

92 
	`¥ötf
(" SynchronizationÉrror.\n");

97 
	`¥ötf
(" * Synchronization successful *\n");

98 
	`¥ötf
(" UTCÑe„ªn˚Åime: %Œd.%09ld\n", ()
µm_ªf
.
utc
.
tv_£c
,Öpm_ªf.utc.
tv_n£c
);

99 
	`¥ötf
(" GPSÑe„ªn˚Åime: %Œd.%09ld\n", ()
µm_ªf
.
gps
.
tv_£c
,Öpm_ªf.gps.
tv_n£c
);

100 
	`¥ötf
(" I¡î«»cou¡îÑe„ªn˚ vÆue: %u\n", 
µm_ªf
.
cou¡_us
);

101 
	`¥ötf
(" ClockÉº‹: %.9f\n", 
µm_ªf
.
xèl_îr
);

103 
x
 = 
µm_t°amp
 + 500000;

104 
	`¥ötf
(" * Test ofÅimestamp counter <-> GPS value conversion *\n");

105 
	`¥ötf
(" Te° vÆue: %u\n", 
x
);

106 
	`lgw_˙t2gps
(
µm_ªf
, 
x
, &
y
);

107 
	`¥ötf
(" C⁄vîsi⁄ÅÿGPS: %Œd.%09ld\n", ()
y
.
tv_£c
, y.
tv_n£c
);

108 
	`lgw_gps2˙t
(
µm_ªf
, 
y
, &
z
);

109 
	`¥ötf
(" C⁄vîãd back: %u ==> %d¬µs\n", 
z
, (
öt32_t
)(z-
x
));

110 
	`¥ötf
(" * Test ofÅimestamp counter <-> UTC value conversion *\n");

111 
	`¥ötf
(" Te° vÆue: %u\n", 
x
);

112 
	`lgw_˙t2utc
(
µm_ªf
, 
x
, &
y
);

113 
	`¥ötf
(" C⁄vîsi⁄ÅÿUTC: %Œd.%09ld\n", ()
y
.
tv_£c
, y.
tv_n£c
);

114 
	`lgw_utc2˙t
(
µm_ªf
, 
y
, &
z
);

115 
	`¥ötf
(" C⁄vîãd back: %u ==> %d¬µs\n", 
z
, (
öt32_t
)(z-
x
));

116 
	}
}

118 
	$gps_¥o˚ss_co‹ds
() {

120 
co‹d_s
 
co‹d
;

121 
co‹d_s
 
gp£º
;

122 
i
 = 
	`lgw_gps_gë
(
NULL
, NULL, &
co‹d
, &
gp£º
);

125 i‡(
i
 =
LGW_GPS_SUCCESS
) {

126 
	`¥ötf
("# GPS co‹dö©es:Ü©ôudê%.5f,Ü⁄gôudê%.5f,á…ôudê%òm\n", 
co‹d
.
œt
, co‹d.
l⁄
, co‹d.
Æt
);

127 
	`¥ötf
("# GPSÉº:Ü©ôudê%.5f,Ü⁄gôudê%.5f,á…ôudê%òm\n", 
gp£º
.
œt
, gp£º.
l⁄
, gp£º.
Æt
);

129 
	}
}

134 
	$maö
()

136 
siga˘i⁄
 
siga˘
;

138 
i
;

141 
lgw_c⁄f_bﬂrd_s
 
bﬂrdc⁄f
;

142 
lgw_c⁄f_rxrf_s
 
rfc⁄f
;

145 
£rül_buff
[128];

146 
size_t
 
wr_idx
 = 0;

147 
gps_ây_dev
;

150 
gps_msg
 
œã°_msg
;

153 
	`sigem±y£t
(&
siga˘
.
ß_mask
);

154 
siga˘
.
ß_Êags
 = 0;

155 
siga˘
.
ß_h™dÀr
 = 
sig_h™dÀr
;

156 
	`siga˘i⁄
(
SIGQUIT
, &
siga˘
, 
NULL
);

157 
	`siga˘i⁄
(
SIGINT
, &
siga˘
, 
NULL
);

158 
	`siga˘i⁄
(
SIGTERM
, &
siga˘
, 
NULL
);

161 
	`¥ötf
("Beginning ofÅest forÜoragw_gps.c\n");

162 
	`¥ötf
("*** Libøry vîsi⁄ inf‹m©i⁄ ***\n%s\n***\n", 
	`lgw_vîsi⁄_öfo
());

165 
i
 = 
	`lgw_gps_íabÀ
("/dev/âyAMA0", "ubx7", 0, &
gps_ây_dev
);

166 i‡(
i
 !
LGW_GPS_SUCCESS
) {

167 
	`¥ötf
("ERROR: IMPOSSIBLE TO ENABLE GPS\n");

168 
	`exô
(
EXIT_FAILURE
);

173 
	`mem£t
(&
bﬂrdc⁄f
, 0, (boardconf));

174 
bﬂrdc⁄f
.
l‹aw™_public
 = 
åue
;

175 
bﬂrdc⁄f
.
˛k§c
 = 1;

176 
	`lgw_bﬂrd_£tc⁄f
(
bﬂrdc⁄f
);

179 
	`mem£t
(&
rfc⁄f
, 0, (rfconf));

180 
rfc⁄f
.
íabÀ
 = 
åue
;

181 
rfc⁄f
.
‰eq_hz
 = 868000000;

182 
rfc⁄f
.
rssi_off£t
 = 0.0;

183 
rfc⁄f
.
ty≥
 = 
LGW_RADIO_TYPE_SX1257
;

184 
rfc⁄f
.
tx_íabÀ
 = 
åue
;

185 
	`lgw_rxrf_£tc⁄f
(0, 
rfc⁄f
);

187 
	`lgw_°¨t
();

190 
	`mem£t
(
£rül_buff
, 0,  serial_buff);

191 
	`mem£t
(&
µm_ªf
, 0, Öpm_ref);

194 (
quô_sig
 !1Ë&& (
exô_sig
 != 1)) {

195 
size_t
 
rd_idx
 = 0;

196 
size_t
 
‰ame_íd_idx
 = 0;

199 
ssize_t
 
nb_ch¨
 = 
	`ªad
(
gps_ây_dev
, 
£rül_buff
 + 
wr_idx
, 
LGW_GPS_MIN_MSG_SIZE
);

200 i‡(
nb_ch¨
 <= 0) {

201 
	`¥ötf
("WARNING: [gps]Ñód(Ëªtu∫ed vÆuê%d\n", 
nb_ch¨
);

204 
wr_idx
 +(
size_t
)
nb_ch¨
;

210 
rd_idx
 < 
wr_idx
) {

211 
size_t
 
‰ame_size
 = 0;

214 i‡(
£rül_buff
[
rd_idx
] =
LGW_GPS_UBX_SYNC_CHAR
) {

219 
œã°_msg
 = 
	`lgw_∑r£_ubx
(&
£rül_buff
[
rd_idx
], (
wr_idx
 -Ñd_idx), &
‰ame_size
);

221 i‡(
‰ame_size
 > 0) {

222 i‡(
œã°_msg
 =
INCOMPLETE
) {

224 
‰ame_size
 = 0;

225 } i‡(
œã°_msg
 =
INVALID
) {

227 
	`¥ötf
("WARNING: [gps] couldÇot getá valid message from GPS (noÅime)\n");

228 
‰ame_size
 = 0;

229 } i‡(
œã°_msg
 =
UBX_NAV_TIMEGPS
) {

230 
	`¥ötf
("\n~~ UBX NAV-TIMEGPS sentence,Åriggering synchronizationáttempt ~~\n");

231 
	`gps_¥o˚ss_sync
();

234 } if(
£rül_buff
[
rd_idx
] =
LGW_GPS_NMEA_SYNC_CHAR
) {

239 * 
nmó_íd_±r
 = 
	`memchr
(&
£rül_buff
[
rd_idx
],()0x0a, (
wr_idx
 -Ñd_idx));

241 i‡(
nmó_íd_±r
) {

243 
‰ame_size
 = 
nmó_íd_±r
 - &
£rül_buff
[
rd_idx
] + 1;

244 
œã°_msg
 = 
	`lgw_∑r£_nmó
(&
£rül_buff
[
rd_idx
], 
‰ame_size
);

246 if(
œã°_msg
 =
INVALID
 ||Ü©e°_msg =
UNKNOWN
) {

248 
‰ame_size
 = 0;

249 } i‡(
œã°_msg
 =
NMEA_RMC
) {

250 
	`gps_¥o˚ss_co‹ds
();

255 i‡(
‰ame_size
 > 0) {

258 
rd_idx
 +
‰ame_size
;

259 
‰ame_íd_idx
 = 
rd_idx
;

261 
rd_idx
++;

265 i‡(
‰ame_íd_idx
) {

267 
	`mem˝y
(
£rül_buff
,&£rül_buff[
‰ame_íd_idx
],
wr_idx
 - frame_end_idx);

268 
wr_idx
 -
‰ame_íd_idx
;

272 i‡(((
£rül_buff
Ë- 
wr_idx
Ë< 
LGW_GPS_MIN_MSG_SIZE
) {

273 
	`mem˝y
(
£rül_buff
,&£rül_buff[
LGW_GPS_MIN_MSG_SIZE
],
wr_idx
 - LGW_GPS_MIN_MSG_SIZE);

274 
wr_idx
 -
LGW_GPS_MIN_MSG_SIZE
;

279 i‡(
exô_sig
 == 1) {

280 
	`lgw_gps_dißbÀ
(
gps_ây_dev
);

281 
	`lgw_°›
();

284 
	`¥ötf
("\nEnd ofÅest forÜoragw_gps.c\n");

285 
	`exô
(
EXIT_SUCCESS
);

286 
	}
}

	@hal/tst/test_loragw_hal.c

21 #i‡
__STDC_VERSION__
 >= 199901L

22 
	#_XOPEN_SOURCE
 600

	)

24 
	#_XOPEN_SOURCE
 500

	)

27 
	~<°döt.h
>

28 
	~<°dboﬁ.h
>

29 
	~<°dio.h
>

30 
	~<°rög.h
>

31 
	~<sig«l.h
>

32 
	~<uni°d.h
>

34 
	~"l‹agw_hÆ.h
"

35 
	~"l‹agw_ªg.h
"

36 
	~"l‹agw_aux.h
"

41 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

46 
	#DEFAULT_RSSI_OFFSET
 0.0

	)

47 
	#DEFAULT_NOTCH_FREQ
 129000U

	)

52 
	gexô_sig
 = 0;

53 
	gquô_sig
 = 0;

58 
sig_h™dÀr
(
sigio
);

63 
	$sig_h™dÀr
(
sigio
) {

64 i‡(
sigio
 =
SIGQUIT
) {

65 
quô_sig
 = 1;;

66 } i‡((
sigio
 =
SIGINT
Ë|| (sigiÿ=
SIGTERM
)) {

67 
exô_sig
 = 1;

69 
	}
}

72 
	$ußge
() {

73 
	`¥ötf
("Libøry vîsi⁄ inf‹m©i⁄: %s\n", 
	`lgw_vîsi⁄_öfo
());

74 
	`¥ötf
( "Available options:\n");

75 
	`¥ötf
( " -hÖrintÅhis help\n");

76 
	`¥ötf
( " -a <float> Radio A RX frequency in MHz\n");

77 
	`¥ötf
( " -b <float> Radio B RX frequency in MHz\n");

78 
	`¥ötf
( " -t <float> Radio TX frequency in MHz\n");

79 
	`¥ötf
( " -r <int> RadioÅype (SX1255:1255, SX1257:1257)\n");

80 
	`¥ötf
( " -k <int> Concentrator clock source (0:Ñadio_A, 1:Ñadio_B(default))\n");

81 
	}
}

86 
	$maö
(
¨gc
, **
¨gv
)

88 
siga˘i⁄
 
siga˘
;

90 
lgw_c⁄f_bﬂrd_s
 
bﬂrdc⁄f
;

91 
lgw_c⁄f_rxrf_s
 
rfc⁄f
;

92 
lgw_c⁄f_rxif_s
 
ifc⁄f
;

94 
lgw_pkt_rx_s
 
rxpkt
[4];

95 
lgw_pkt_tx_s
 
txpkt
;

96 
lgw_pkt_rx_s
 *
p
;

98 
i
, 
j
;

99 
nb_pkt
;

100 
uöt32_t
 
Á
 = 0, 
fb
 = 0, 
·
 = 0;

101 
lgw_ødio_ty≥_e
 
ødio_ty≥
 = 
LGW_RADIO_TYPE_NONE
;

102 
uöt8_t
 
˛ocksour˚
 = 1;

104 
uöt32_t
 
tx_˙t
 = 0;

105 
lo›_˙t
 = 0;

106 
uöt8_t
 
°©us_v¨
 = 0;

107 
xd
 = 0.0;

108 
xi
 = 0;

111 (
i
 = 
	`gë›t
 (
¨gc
, 
¨gv
, "ha:b:t:r:k:")) != -1) {

112 
i
) {

114 
	`ußge
();

118 
	`ssˇnf
(
›èrg
, "%lf", &
xd
);

119 
Á
 = (
uöt32_t
)((
xd
*1e6) + 0.5);

122 
	`ssˇnf
(
›èrg
, "%lf", &
xd
);

123 
fb
 = (
uöt32_t
)((
xd
*1e6) + 0.5);

126 
	`ssˇnf
(
›èrg
, "%lf", &
xd
);

127 
·
 = (
uöt32_t
)((
xd
*1e6) + 0.5);

130 
	`ssˇnf
(
›èrg
, "%i", &
xi
);

131 
xi
) {

133 
ødio_ty≥
 = 
LGW_RADIO_TYPE_SX1255
;

136 
ødio_ty≥
 = 
LGW_RADIO_TYPE_SX1257
;

139 
	`¥ötf
("ERROR: invalidÑadioÅype\n");

140 
	`ußge
();

145 
	`ssˇnf
(
›èrg
, "%i", &
xi
);

146 
˛ocksour˚
 = (
uöt8_t
)
xi
;

149 
	`¥ötf
("ERROR:árgumentÖarsing\n");

150 
	`ußge
();

156 i‡((
Á
 =0Ë|| (
fb
 =0Ë|| (
·
 == 0)) {

157 
	`¥ötf
("ERROR: missing frequency inputÖarameter:\n");

158 
	`¥ötf
(" RadiÿA RX: %u\n", 
Á
);

159 
	`¥ötf
(" RadiÿB RX: %u\n", 
fb
);

160 
	`¥ötf
(" RadiÿTX: %u\n", 
·
);

161 
	`ußge
();

165 i‡(
ødio_ty≥
 =
LGW_RADIO_TYPE_NONE
) {

166 
	`¥ötf
("ERROR: missingÑadioÅypeÖarameter:\n");

167 
	`ußge
();

172 
	`sigem±y£t
(&
siga˘
.
ß_mask
);

173 
siga˘
.
ß_Êags
 = 0;

174 
siga˘
.
ß_h™dÀr
 = 
sig_h™dÀr
;

175 
	`siga˘i⁄
(
SIGQUIT
, &
siga˘
, 
NULL
);

176 
	`siga˘i⁄
(
SIGINT
, &
siga˘
, 
NULL
);

177 
	`siga˘i⁄
(
SIGTERM
, &
siga˘
, 
NULL
);

180 
	`¥ötf
("Beginning ofÅest forÜoragw_hal.c\n");

182 
	`¥ötf
("*** Libøry vîsi⁄ inf‹m©i⁄ ***\n%s\n\n", 
	`lgw_vîsi⁄_öfo
());

185 
	`mem£t
(&
bﬂrdc⁄f
, 0, (boardconf));

187 
bﬂrdc⁄f
.
l‹aw™_public
 = 
åue
;

188 
bﬂrdc⁄f
.
˛k§c
 = 
˛ocksour˚
;

189 
	`lgw_bﬂrd_£tc⁄f
(
bﬂrdc⁄f
);

192 
	`mem£t
(&
rfc⁄f
, 0, (rfconf));

194 
rfc⁄f
.
íabÀ
 = 
åue
;

195 
rfc⁄f
.
‰eq_hz
 = 
Á
;

196 
rfc⁄f
.
rssi_off£t
 = 
DEFAULT_RSSI_OFFSET
;

197 
rfc⁄f
.
ty≥
 = 
ødio_ty≥
;

198 
rfc⁄f
.
tx_íabÀ
 = 
åue
;

199 
rfc⁄f
.
tx_nŸch_‰eq
 = 
DEFAULT_NOTCH_FREQ
;

200 
	`lgw_rxrf_£tc⁄f
(0, 
rfc⁄f
);

202 
rfc⁄f
.
íabÀ
 = 
åue
;

203 
rfc⁄f
.
‰eq_hz
 = 
fb
;

204 
rfc⁄f
.
rssi_off£t
 = 
DEFAULT_RSSI_OFFSET
;

205 
rfc⁄f
.
ty≥
 = 
ødio_ty≥
;

206 
rfc⁄f
.
tx_íabÀ
 = 
Ál£
;

207 
	`lgw_rxrf_£tc⁄f
(1, 
rfc⁄f
);

210 
	`mem£t
(&
ifc⁄f
, 0, (ifconf));

212 
ifc⁄f
.
íabÀ
 = 
åue
;

213 
ifc⁄f
.
rf_chaö
 = 1;

214 
ifc⁄f
.
‰eq_hz
 = -400000;

215 
ifc⁄f
.
d©¨©e
 = 
DR_LORA_MULTI
;

216 
	`lgw_rxif_£tc⁄f
(0, 
ifc⁄f
);

218 
ifc⁄f
.
íabÀ
 = 
åue
;

219 
ifc⁄f
.
rf_chaö
 = 1;

220 
ifc⁄f
.
‰eq_hz
 = -200000;

221 
ifc⁄f
.
d©¨©e
 = 
DR_LORA_MULTI
;

222 
	`lgw_rxif_£tc⁄f
(1, 
ifc⁄f
);

224 
ifc⁄f
.
íabÀ
 = 
åue
;

225 
ifc⁄f
.
rf_chaö
 = 1;

226 
ifc⁄f
.
‰eq_hz
 = 0;

227 
ifc⁄f
.
d©¨©e
 = 
DR_LORA_MULTI
;

228 
	`lgw_rxif_£tc⁄f
(2, 
ifc⁄f
);

230 
ifc⁄f
.
íabÀ
 = 
åue
;

231 
ifc⁄f
.
rf_chaö
 = 0;

232 
ifc⁄f
.
‰eq_hz
 = -400000;

233 
ifc⁄f
.
d©¨©e
 = 
DR_LORA_MULTI
;

234 
	`lgw_rxif_£tc⁄f
(3, 
ifc⁄f
);

236 
ifc⁄f
.
íabÀ
 = 
åue
;

237 
ifc⁄f
.
rf_chaö
 = 0;

238 
ifc⁄f
.
‰eq_hz
 = -200000;

239 
ifc⁄f
.
d©¨©e
 = 
DR_LORA_MULTI
;

240 
	`lgw_rxif_£tc⁄f
(4, 
ifc⁄f
);

242 
ifc⁄f
.
íabÀ
 = 
åue
;

243 
ifc⁄f
.
rf_chaö
 = 0;

244 
ifc⁄f
.
‰eq_hz
 = 0;

245 
ifc⁄f
.
d©¨©e
 = 
DR_LORA_MULTI
;

246 
	`lgw_rxif_£tc⁄f
(5, 
ifc⁄f
);

248 
ifc⁄f
.
íabÀ
 = 
åue
;

249 
ifc⁄f
.
rf_chaö
 = 0;

250 
ifc⁄f
.
‰eq_hz
 = 200000;

251 
ifc⁄f
.
d©¨©e
 = 
DR_LORA_MULTI
;

252 
	`lgw_rxif_£tc⁄f
(6, 
ifc⁄f
);

254 
ifc⁄f
.
íabÀ
 = 
åue
;

255 
ifc⁄f
.
rf_chaö
 = 0;

256 
ifc⁄f
.
‰eq_hz
 = 400000;

257 
ifc⁄f
.
d©¨©e
 = 
DR_LORA_MULTI
;

258 
	`lgw_rxif_£tc⁄f
(7, 
ifc⁄f
);

261 
	`mem£t
(&
ifc⁄f
, 0, (ifconf));

262 
ifc⁄f
.
íabÀ
 = 
åue
;

263 
ifc⁄f
.
rf_chaö
 = 0;

264 
ifc⁄f
.
‰eq_hz
 = 0;

265 
ifc⁄f
.
b™dwidth
 = 
BW_250KHZ
;

266 
ifc⁄f
.
d©¨©e
 = 
DR_LORA_SF10
;

267 
	`lgw_rxif_£tc⁄f
(8, 
ifc⁄f
);

270 
	`mem£t
(&
ifc⁄f
, 0, (ifconf));

271 
ifc⁄f
.
íabÀ
 = 
åue
;

272 
ifc⁄f
.
rf_chaö
 = 1;

273 
ifc⁄f
.
‰eq_hz
 = 0;

274 
ifc⁄f
.
b™dwidth
 = 
BW_250KHZ
;

275 
ifc⁄f
.
d©¨©e
 = 64000;

276 
	`lgw_rxif_£tc⁄f
(9, 
ifc⁄f
);

279 
	`mem£t
(&
txpkt
, 0, (txpkt));

280 
txpkt
.
‰eq_hz
 = 
·
;

281 
txpkt
.
tx_mode
 = 
IMMEDIATE
;

282 
txpkt
.
rf_powî
 = 10;

283 
txpkt
.
moduœti⁄
 = 
MOD_LORA
;

284 
txpkt
.
b™dwidth
 = 
BW_125KHZ
;

285 
txpkt
.
d©¨©e
 = 
DR_LORA_SF9
;

286 
txpkt
.
codî©e
 = 
CR_LORA_4_5
;

287 
	`°r˝y
((*)
txpkt
.
∑ylﬂd
, "TX.TEST.LORA.GW.????" );

288 
txpkt
.
size
 = 20;

289 
txpkt
.
¥ómbÀ
 = 6;

290 
txpkt
.
rf_chaö
 = 0;

306 
i
 = 
	`lgw_°¨t
();

307 i‡(
i
 =
LGW_HAL_SUCCESS
) {

308 
	`¥ötf
("*** Concentrator started ***\n");

310 
	`¥ötf
("*** ImpossibleÅo start concentrator ***\n");

322 (
quô_sig
 !1Ë&& (
exô_sig
 != 1)) {

323 
lo›_˙t
++;

326 
nb_pkt
 = 
	`lgw_ª˚ive
(
	`ARRAY_SIZE
(
rxpkt
),Ñxpkt);

328 i‡(
nb_pkt
 == 0) {

329 
	`waô_ms
(300);

332 
i
=0; i < 
nb_pkt
; ++i) {

333 
p
 = &
rxpkt
[
i
];

334 
	`¥ötf
("---\nRcvÖkà#%d >>", 
i
+1);

335 i‡(
p
->
°©us
 =
STAT_CRC_OK
) {

336 
	`¥ötf
(" if_chaö:%2d", 
p
->
if_chaö
);

337 
	`¥ötf
("Å°amp:%010u", 
p
->
cou¡_us
);

338 
	`¥ötf
(" size:%3u", 
p
->
size
);

339 
p
-> 
moduœti⁄
) {

340 
MOD_LORA
: 
	`¥ötf
(" LoRa"); ;

341 
MOD_FSK
: 
	`¥ötf
(" FSK"); ;

342 : 
	`¥ötf
(" modulation?");

344 
p
->
d©¨©e
) {

345 
DR_LORA_SF7
: 
	`¥ötf
(" SF7"); ;

346 
DR_LORA_SF8
: 
	`¥ötf
(" SF8"); ;

347 
DR_LORA_SF9
: 
	`¥ötf
(" SF9"); ;

348 
DR_LORA_SF10
: 
	`¥ötf
(" SF10"); ;

349 
DR_LORA_SF11
: 
	`¥ötf
(" SF11"); ;

350 
DR_LORA_SF12
: 
	`¥ötf
(" SF12"); ;

351 : 
	`¥ötf
(" datarate?");

353 
p
->
codî©e
) {

354 
CR_LORA_4_5
: 
	`¥ötf
(" CR1(4/5)"); ;

355 
CR_LORA_4_6
: 
	`¥ötf
(" CR2(2/3)"); ;

356 
CR_LORA_4_7
: 
	`¥ötf
(" CR3(4/7)"); ;

357 
CR_LORA_4_8
: 
	`¥ötf
(" CR4(1/2)"); ;

358 : 
	`¥ötf
(" coderate?");

360 
	`¥ötf
("\n");

361 
	`¥ötf
(" RSSI:%+6.1‡SNR:%+5.1‡(mö:%+5.1f, max:%+5.1fË∑ylﬂd:\n", 
p
->
rssi
,Ö->
¢r
,Ö->
¢r_mö
,Ö->
¢r_max
);

363 
j
 = 0; j < 
p
->
size
; ++j) {

364 
	`¥ötf
(" %02X", 
p
->
∑ylﬂd
[
j
]);

366 
	`¥ötf
(" #\n");

367 } i‡(
p
->
°©us
 =
STAT_CRC_BAD
) {

368 
	`¥ötf
(" if_chaö:%2d", 
p
->
if_chaö
);

369 
	`¥ötf
("Å°amp:%010u", 
p
->
cou¡_us
);

370 
	`¥ötf
(" size:%3u\n", 
p
->
size
);

371 
	`¥ötf
(" CRCÉrror, damagedÖacket\n\n");

372 } i‡(
p
->
°©us
 =
STAT_NO_CRC
){

373 
	`¥ötf
(" if_chaö:%2d", 
p
->
if_chaö
);

374 
	`¥ötf
("Å°amp:%010u", 
p
->
cou¡_us
);

375 
	`¥ötf
(" size:%3u\n", 
p
->
size
);

376 
	`¥ötf
("Ço CRC\n\n");

378 
	`¥ötf
(" if_chaö:%2d", 
p
->
if_chaö
);

379 
	`¥ötf
("Å°amp:%010u", 
p
->
cou¡_us
);

380 
	`¥ötf
(" size:%3u\n", 
p
->
size
);

381 
	`¥ötf
(" invalid status ?!?\n\n");

387 i‡(
lo›_˙t
%16 == 0) {

389 
txpkt
.
∑ylﬂd
[16] = 0xf‡& (
tx_˙t
 >> 24);

390 
txpkt
.
∑ylﬂd
[17] = 0xf‡& (
tx_˙t
 >> 16);

391 
txpkt
.
∑ylﬂd
[18] = 0xf‡& (
tx_˙t
 >> 8);

392 
txpkt
.
∑ylﬂd
[19] = 0xf‡& 
tx_˙t
;

393 
i
 = 
	`lgw_£nd
(
txpkt
);

394 
j
 = 0;

395 
	`¥ötf
("+++\nSídögÖackë #%d,Ñ‡∑th %d,Ñëu∫ %d\n°©u†-> ", 
tx_˙t
, 
txpkt
.
rf_chaö
, 
i
);

397 ++
j
;

398 
	`waô_ms
(100);

399 
	`lgw_°©us
(
TX_STATUS
, &
°©us_v¨
);

400 
	`¥ötf
("%d:", 
°©us_v¨
);

401 } (
°©us_v¨
 !
TX_FREE
Ë&& (
j
 < 100));

402 ++
tx_˙t
;

403 
	`¥ötf
("\nTX finished\n");

407 i‡(
exô_sig
 == 1) {

409 
	`lgw_°›
();

412 
	`¥ötf
("\nEnd ofÅest forÜoragw_hal.c\n");

414 
	}
}

	@hal/tst/test_loragw_reg.c

20 
	~<°döt.h
>

21 
	~<°dio.h
>

23 
	~"l‹agw_ªg.h
"

28 
	#BURST_TEST_LENGTH
 8192

	)

30 
	$maö
()

32 
öt32_t
 
ªad_vÆue
, 
ã°_vÆue
;

33 
uöt16_t
 
lf§
;

34 
uöt8_t
 
bur°_buffout
[
BURST_TEST_LENGTH
];

35 
uöt8_t
 
bur°_buffö
[
BURST_TEST_LENGTH
];

36 
i
;

38 
	`¥ötf
("Beginning ofÅest forÜoragw_reg.c\n");

40 
	`lgw_c⁄√˘
(
Ál£
, 129E3);

48 
	`lgw_ªg_w
(
LGW_SOFT_RESET
, 1);

49 
	`lgw_ªg_check
(
°dout
);

54 
ã°_vÆue
 = 197;

55 
	`lgw_ªg_w
(
LGW_IMPLICIT_PAYLOAD_LENGHT
, 
ã°_vÆue
);

56 
	`lgw_ªg_r
(
LGW_IMPLICIT_PAYLOAD_LENGHT
, &
ªad_vÆue
);

57 
	`¥ötf
("IMPLICIT_PAYLOAD_LENGHT = %d (should bê%d)\n", 
ªad_vÆue
, 
ã°_vÆue
);

68 
ã°_vÆue
 = 11;

69 
	`lgw_ªg_w
(
LGW_FRAME_SYNCH_PEAK2_POS
, 
ã°_vÆue
);

70 
	`lgw_ªg_r
(
LGW_FRAME_SYNCH_PEAK2_POS
, &
ªad_vÆue
);

71 
	`¥ötf
("FRAME_SYNCH_PEAK2_POS = %d (should bê%d)\n", 
ªad_vÆue
, 
ã°_vÆue
);

82 
ã°_vÆue
 = 49253;

83 
	`lgw_ªg_w
(
LGW_PREAMBLE_SYMB1_NB
, 
ã°_vÆue
);

84 
	`lgw_ªg_r
(
LGW_PREAMBLE_SYMB1_NB
, &
ªad_vÆue
);

85 
	`¥ötf
("PREAMBLE_SYMB1_NB = %d (should bê%d)\n", 
ªad_vÆue
, 
ã°_vÆue
);

96 
ã°_vÆue
 = 3173;

97 
	`lgw_ªg_w
(
LGW_ADJUST_MODEM_START_OFFSET_SF12_RDX4
, 
ã°_vÆue
);

98 
	`lgw_ªg_r
(
LGW_ADJUST_MODEM_START_OFFSET_SF12_RDX4
, &
ªad_vÆue
);

99 
	`¥ötf
("ADJUST_MODEM_START_OFFSET_SF12_RDX4 = %d (should bê%d)\n", 
ªad_vÆue
, 
ã°_vÆue
);

102 
ã°_vÆue
 = -1947;

103 
	`lgw_ªg_w
(
LGW_IF_FREQ_1
, 
ã°_vÆue
);

104 
	`lgw_ªg_r
(
LGW_IF_FREQ_1
, &
ªad_vÆue
);

105 
	`¥ötf
("IF_FREQ_1 = %d (should bê%d)\n", 
ªad_vÆue
, 
ã°_vÆue
);

110 
lf§
 = 0xFFFF;

111 
i
=0; i<
BURST_TEST_LENGTH
; ++i) {

112 
bur°_buffout
[
i
] = (
uöt8_t
)(
lf§
 ^ (lfsr >> 4));

114 
lf§
 = (lfsr & 1) ? ((lfsr >> 1) ^ 0x8679) : (lfsr >> 1);

117 
	`lgw_ªg_wb
(
LGW_TX_DATA_BUF_DATA
, 
bur°_buffout
, 256);

118 
	`lgw_ªg_rb
(
LGW_RX_DATA_BUF_DATA
, 
bur°_buffö
, 256);

127 
	`lgw_disc⁄√˘
();

130 
	`¥ötf
("End ofÅest forÜoragw_reg.c\n");

132 
	}
}

	@hal/tst/test_loragw_spi.c

21 
	~<°döt.h
>

22 
	~<°dio.h
>

24 
	~"l‹agw_•i.h
"

29 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

34 
	#BURST_TEST_SIZE
 2500

	)

35 
	#TIMING_REPEAT
 1

	)

40 
	$maö
()

42 
i
;

43 *
•i_èrgë
 = 
NULL
;

44 
uöt8_t
 
d©a
 = 0;

45 
uöt8_t
 
d©aout
[
BURST_TEST_SIZE
];

46 
uöt8_t
 
d©aö
[
BURST_TEST_SIZE
];

47 
uöt8_t
 
•i_mux_mode
 = 
LGW_SPI_MUX_MODE0
;

49 
i
 = 0; i < 
BURST_TEST_SIZE
; ++i) {

50 
d©aout
[
i
] = 0x30 + (i % 10);

51 
d©aö
[
i
] = 0x23;

54 
	`¥ötf
("Beginning ofÅest forÜoragw_spi.c\n");

55 
	`lgw_•i_›í
(&
•i_èrgë
, "/dev/spidev1.0");

58 
i
 = 0; i < 
TIMING_REPEAT
; ++i)

59 
	`lgw_•i_w
(
•i_èrgë
, 
•i_mux_mode
, 
LGW_SPI_MUX_TARGET_SX1301
, 0xAA, 0x96);

60 
i
 = 0; i < 
TIMING_REPEAT
; ++i)

61 
	`lgw_•i_r
(
•i_èrgë
, 
•i_mux_mode
, 
LGW_SPI_MUX_TARGET_SX1301
, 0x55, &
d©a
);

64 
i
 = 0; i < 
TIMING_REPEAT
; ++i)

65 
	`lgw_•i_wb
(
•i_èrgë
, 
•i_mux_mode
, 
LGW_SPI_MUX_TARGET_SX1301
, 0x55, 
d©aout
, 16);

66 
i
 = 0; i < 
TIMING_REPEAT
; ++i)

67 
	`lgw_•i_rb
(
•i_èrgë
, 
•i_mux_mode
, 
LGW_SPI_MUX_TARGET_SX1301
, 0x55, 
d©aö
, 16);

70 
i
 = 0; i < 
TIMING_REPEAT
; ++i)

71 
	`lgw_•i_wb
(
•i_èrgë
, 
•i_mux_mode
, 
LGW_SPI_MUX_TARGET_SX1301
, 0x5A, 
d©aout
, 
	`ARRAY_SIZE
(dataout));

72 
i
 = 0; i < 
TIMING_REPEAT
; ++i)

73 
	`lgw_•i_rb
(
•i_èrgë
, 
•i_mux_mode
, 
LGW_SPI_MUX_TARGET_SX1301
, 0x5A, 
d©aö
, 
	`ARRAY_SIZE
(datain));

76 
	`lgw_•i_r
(
•i_èrgë
, 
•i_mux_mode
, 
LGW_SPI_MUX_TARGET_SX1301
, 0x55, &
d©a
);

77 
	`¥ötf
("d©®ª˚ived (sim∂êªad): %d\n",
d©a
);

79 
	`lgw_•i_˛o£
(
•i_èrgë
);

80 
	`¥ötf
("End ofÅest forÜoragw_spi.c\n");

83 
	}
}

	@libmqtt/MQTTClient.c

16 
	~"MQTTClõ¡.h
"

18 
	$NewMesßgeD©a
(
MesßgeD©a
 *
md
, 
MQTTSåög
 *
aT›icName
, 
MQTTMesßge
 *
aMesßge
)

20 
md
->
t›icName
 = 
aT›icName
;

21 
md
->
mesßge
 = 
aMesßge
;

22 
	}
}

24 
	$gëNextPackëId
(
MQTTClõ¡
 *
c
)

26  
c
->
√xt_∑ckëid
 = (c->√xt_∑ckëid =
MAX_PACKET_ID
) ? 1 : c->next_packetid + 1;

27 
	}
}

29 
	$£ndPackë
(
MQTTClõ¡
 *
c
, 
Àngth
, 
Timî
 *
timî
)

31 
rc
 = 
FAILURE
,

32 
£¡
 = 0;

34 i‡(!
	`Nëw‹kIsC⁄√˘ed
(
c
->
ù°ack
))

35  
rc
;

37 #i‡
	`deföed
(
MQTT_TASK
)

38 
	`MuãxLock
(&
c
->
wrôe_muãx
);

40 
£¡
 < 
Àngth
 && !
	`TimîIsExpúed
(
timî
))

42 
rc
 = 
c
->
ù°ack
->
	`mqâwrôe
(c->ù°ack, &c->
buf
[
£¡
], 
Àngth
, 
	`TimîLe·MS
(
timî
));

43 i‡(
rc
 < 0)

45 
£¡
 +
rc
;

47 #i‡
	`deföed
(
MQTT_TASK
)

48 
	`MuãxU∆ock
(&
c
->
wrôe_muãx
);

51 i‡(
£¡
 =
Àngth
)

53 
	`TimîCou¡down
(&
c
->
pög_timî
, c->
kìp_Æive_öãrvÆ
);

54 
rc
 = 
SUCCESS
;

57 
rc
 = 
FAILURE
;

59  
rc
;

60 
	}
}

62 
	$MQTTClõ¡Inô
(
MQTTClõ¡
 *
c
, 
Nëw‹k
 *
√tw‹k
, 
comm™d_timeout_ms
,

63 *
£ndbuf
, 
size_t
 
£ndbuf_size
, *
ªadbuf
, size_à
ªadbuf_size
)

65 
i
;

66 
c
->
ù°ack
 = 
√tw‹k
;

68 
i
 = 0; i < 
MAX_MESSAGE_HANDLERS
; ++i)

69 
c
->
mesßgeH™dÀrs
[
i
].
t›icFûãr
 = 0;

70 
c
->
comm™d_timeout_ms
 = command_timeout_ms;

71 
c
->
buf
 = 
£ndbuf
;

72 
c
->
buf_size
 = 
£ndbuf_size
;

73 
c
->
ªadbuf
 =Ñeadbuf;

74 
c
->
ªadbuf_size
 =Ñeadbuf_size;

75 
c
->
isc⁄√˘ed
 = 0;

76 
c
->
pög_out°™dög
 = 0;

77 
c
->
deÁu…MesßgeH™dÀr
 = 
NULL
;

78 
c
->
√xt_∑ckëid
 = 1;

79 
	`TimîInô
(&
c
->
pög_timî
);

80 #i‡
	`deföed
(
__löux__
Ë|| deföed(
__APPLE__
)

81 
c
->
pög_time
 = -1;

83 #i‡
	`deföed
(
MQTT_TASK
)

84 
	`QueueInô
(&
c
->
ª∂y
);

85 
	`MuãxInô
(&
c
->
wrôe_muãx
);

86 
c
->
ªad_thªad
.
°¨ãd
 = 0;

88 
	}
}

90 
	$MQTTClõ¡De°roy
(
MQTTClõ¡
 *
c
)

92 #i‡
	`deföed
(
MQTT_TASK
)

93 
c
->
isc⁄√˘ed
 = 0;

94 
	`ThªadJoö
(&
c
->
ªad_thªad
);

95 
	`QueueDe°roy
(&
c
->
ª∂y
);

96 
	`MuãxDe°roy
(&
c
->
wrôe_muãx
);

98 
	}
}

100 
	$decodePackë
(
MQTTClõ¡
 *
c
, *
vÆue
, 
timeout
)

102 
i
;

103 
mu…ùlõr
 = 1;

104 
Àn
 = 0;

105 
rc
 = 
SUCCESS
;

106 c⁄° 
MAX_NO_OF_REMAINING_LENGTH_BYTES
 = 4;

108 *
vÆue
 = 0;

111 i‡(++
Àn
 > 
MAX_NO_OF_REMAINING_LENGTH_BYTES
)

113 
rc
 = 
FAILURE
;

114 
exô
;

116 i‡(
c
->
ù°ack
->
	`mqâªad
(c->ù°ack, &
i
, 1, 
timeout
) != 1)

117 
exô
;

118 *
vÆue
 +(
i
 & 127Ë* 
mu…ùlõr
;

119 
mu…ùlõr
 *= 128;

120 } (
i
 & 128) != 0);

122 
exô
:

123  
rc
;

124 
	}
}

126 
	$ªadPackë
(
MQTTClõ¡
 *
c
, 
Timî
 *
timî
)

128 
rc
 = 
c
->
ù°ack
->
	`mqâªad
(c->ù°ack, c->
ªadbuf
, 1, 
	`TimîLe·MS
(
timî
));

129 i‡(
rc
 != 1)

130 
exô
;

132 
ªm_Àn
 = 0;

134 
rc
 = 
	`decodePackë
(
c
, &
ªm_Àn
, 
	`TimîLe·MS
(
timî
));

135 i‡(
rc
 !
SUCCESS
)

136 
exô
;

138 
Àn
 = 1 + 
	`MQTTPackë_ícode
(
c
->
ªadbuf
 + 1, 
ªm_Àn
);

140 i‡(
ªm_Àn
 > 0 && (
rc
 = 
c
->
ù°ack
->
	`mqâªad
(c->ù°ack, c->
ªadbuf
 + 
Àn
,Ñem_Àn, 
	`TimîLe·MS
(
timî
)) !=Ñem_len))

141 
exô
;

143 
MQTTHódî
 
hódî
 = {0};

144 
hódî
.
byã
 = 
c
->
ªadbuf
[0];

145 
rc
 = 
hódî
.
bôs
.
ty≥
;

147 
exô
:

148  
rc
;

149 
	}
}

154 
	$isT›icM©ched
(*
t›icFûãr
, 
MQTTSåög
 *
t›icName
)

156 *
curf
 = 
t›icFûãr
;

157 *
cu∫
 = 
t›icName
->
Àn°rög
.
d©a
;

158 *
cu∫_íd
 = 
cu∫
 + 
t›icName
->
Àn°rög
.
Àn
;

160 *
curf
 && 
cu∫
 < 
cu∫_íd
)

162 i‡(*
cu∫
 ='/' && *
curf
 != '/')

164 i‡(*
curf
 !'+' && *cur‡!'#' && *cur‡!*
cu∫
)

166 i‡(*
curf
 == '+')

168 *
√xços
 = 
cu∫
 + 1;

169 
√xços
 < 
cu∫_íd
 && *nextpos != '/')

170 
√xços
 = ++
cu∫
 + 1;

172 i‡(*
curf
 == '#')

173 
cu∫
 = 
cu∫_íd
 - 1;

174 
curf
++;

175 
cu∫
++;

178  (
cu∫
 =
cu∫_íd
Ë&& (*
curf
 == '\0');

179 
	}
}

181 
	$dñivîMesßge
(
MQTTClõ¡
 *
c
, 
MQTTSåög
 *
t›icName
, 
MQTTMesßge
 *
mesßge
)

183 
i
;

184 
rc
 = 
FAILURE
;

187 
i
 = 0; i < 
MAX_MESSAGE_HANDLERS
; ++i)

189 i‡(
c
->
mesßgeH™dÀrs
[
i
].
t›icFûãr
 !
NULL
 && (
	`MQTTPackë_equÆs
(
t›icName
, (*)c->messageHandlers[i].topicFilter) ||

190 
	`isT›icM©ched
((*)
c
->
mesßgeH™dÀrs
[
i
].
t›icFûãr
, 
t›icName
)))

192 i‡(
c
->
mesßgeH™dÀrs
[
i
].
Â
 !
NULL
)

194 
MesßgeD©a
 
md
;

195 
	`NewMesßgeD©a
(&
md
, 
t›icName
, 
mesßge
);

196 
c
->
mesßgeH™dÀrs
[
i
].
	`Â
(&
md
, c->mesßgeH™dÀrs[i].
¨g
);

197 
rc
 = 
SUCCESS
;

202 i‡(
rc
 =
FAILURE
 && 
c
->
deÁu…MesßgeH™dÀr
 !
NULL
)

204 
MesßgeD©a
 
md
;

205 
	`NewMesßgeD©a
(&
md
, 
t›icName
, 
mesßge
);

206 
c
->
	`deÁu…MesßgeH™dÀr
(&
md
);

207 
rc
 = 
SUCCESS
;

210  
rc
;

211 
	}
}

213 
	$kì∑live
(
MQTTClõ¡
 *
c
)

215 
rc
 = 
FAILURE
;

217 i‡(
c
->
kìp_Æive_öãrvÆ
 == 0)

219 
rc
 = 
SUCCESS
;

220 
exô
;

223 i‡(
	`TimîIsExpúed
(&
c
->
pög_timî
))

225 i‡(!
c
->
pög_out°™dög
)

227 
Timî
 
timî
;

228 
	`TimîInô
(&
timî
);

229 
	`TimîCou¡downMS
(&
timî
, 
c
->
comm™d_timeout_ms
);

230 
Àn
 = 
	`MQTTSîülize_pögªq
(
c
->
buf
, c->
buf_size
);

231 i‡(
Àn
 > 0 && (
rc
 = 
	`£ndPackë
(
c
,Üí, &
timî
)Ë=
SUCCESS
)

233 
c
->
pög_out°™dög
 = 1;

234 #i‡
	`deföed
(
__löux__
Ë|| deföed(
__APPLE__
)

235 
	`gëtimeofday
(&
c
->
pög_£¡
, 
NULL
);

241 
exô
:

242  
rc
;

243 
	}
}

245 
	$MQTTSídPög
(
MQTTClõ¡
 *
c
)

247 
rc
 = 
SUCCESS
;

249 i‡(!
c
->
pög_out°™dög
)

251 
Timî
 
timî
;

252 
	`TimîInô
(&
timî
);

253 
	`TimîCou¡downMS
(&
timî
, 
c
->
comm™d_timeout_ms
);

255 
Àn
 = 
	`MQTTSîülize_pögªq
(
c
->
buf
, c->
buf_size
);

256 i‡(
Àn
 > 0 && (
rc
 = 
	`£ndPackë
(
c
,Üí, &
timî
)Ë=
SUCCESS
)

258 
c
->
pög_out°™dög
 = 1;

259 #i‡
	`deföed
(
__löux__
Ë|| deföed(
__APPLE__
)

260 
	`gëtimeofday
(&
c
->
pög_£¡
, 
NULL
);

264  
rc
;

265 
	}
}

267 
	$cy˛e
(
MQTTClõ¡
 *
c
, 
Timî
 *
timî
)

269 
rc
 = 
	`ªadPackë
(
c
, 
timî
);

270 i‡(
rc
 < 0)

271  
rc
;

272 i‡(
rc
 == 0)

273  
FAILURE
;

275 
∑ckë_ty≥
 = ()
rc
;

276 
rc
 = 
SUCCESS
;

278 
Àn
 = 0;

279 
∑ckë_ty≥
)

281 
CONNACK
:

282 
PUBACK
:

283 
SUBACK
:

286 
PUBLISH
:

288 
MQTTSåög
 
t›icName
;

289 
MQTTMesßge
 
msg
;

290 
ötQoS
;

291 i‡(
	`MQTTDe£rülize_publish
(&
msg
.
dup
, &
ötQoS
, &msg.
ªèöed
, &msg.
id
, &
t›icName
,

292 (**)&
msg
.
∑ylﬂd
, (*)&msg.
∑ylﬂdÀn
, 
c
->
ªadbuf
, c->
ªadbuf_size
) != 1)

293 
exô
;

294 
msg
.
qos
 = (
QoS
)
ötQoS
;

295 
	`dñivîMesßge
(
c
, &
t›icName
, &
msg
);

296 i‡(
msg
.
qos
 !
QOS0
)

298 i‡(
msg
.
qos
 =
QOS1
)

299 
Àn
 = 
	`MQTTSîülize_ack
(
c
->
buf
, c->
buf_size
, 
PUBACK
, 0, 
msg
.
id
);

300 i‡(
msg
.
qos
 =
QOS2
)

301 
Àn
 = 
	`MQTTSîülize_ack
(
c
->
buf
, c->
buf_size
, 
PUBREC
, 0, 
msg
.
id
);

302 i‡(
Àn
 <= 0)

303 
rc
 = 
FAILURE
;

306 
	`TimîCou¡downMS
(
timî
, 
c
->
comm™d_timeout_ms
);

307 
rc
 = 
	`£ndPackë
(
c
, 
Àn
, 
timî
);

309 i‡(
rc
 =
FAILURE
)

310 
exô
;

315 
PUBREC
:

317 
my∑ckëid
;

318 
dup
, 
ty≥
;

319 i‡(
	`MQTTDe£rülize_ack
(&
ty≥
, &
dup
, &
my∑ckëid
, 
c
->
ªadbuf
, c->
ªadbuf_size
) != 1)

320 
rc
 = 
FAILURE
;

321 i‡((
Àn
 = 
	`MQTTSîülize_ack
(
c
->
buf
, c->
buf_size
, 
PUBREL
, 0, 
my∑ckëid
)) <= 0)

322 
rc
 = 
FAILURE
;

325 
	`TimîCou¡downMS
(
timî
, 
c
->
comm™d_timeout_ms
);

326 
rc
 = 
	`£ndPackë
(
c
, 
Àn
, 
timî
);

328 i‡(
rc
 =
FAILURE
)

329 
exô
;

333 
PUBCOMP
:

336 
PINGRESP
:

337 
c
->
pög_out°™dög
 = 0;

338 #i‡
	`deföed
(
__löux__
Ë|| deföed(
__APPLE__
)

340 
timevÆ
 
ª•_ªcv
;

341 
	`gëtimeofday
(&
ª•_ªcv
, 
NULL
);

342 
c
->
pög_time
 = ((
ª•_ªcv
.
tv_£c
 - c->
pög_£¡
.tv_£cË* 1E6Ë+ (ª•_ªcv.
tv_u£c
 - c->ping_sent.tv_usec);

348 
exô
:

349 i‡(
rc
 =
SUCCESS
)

350 
rc
 = 
∑ckë_ty≥
;

351  
rc
;

352 
	}
}

354 #i‡
deföed
(
__löux__
Ë|| deföed(
__APPLE__
)

355 
	$MQTTGëPögTime
(
MQTTClõ¡
 *
c
)

357  
c
->
pög_time
;

358 
	}
}

361 #i‡!
deföed
(
MQTT_TASK
)

362 
	$MQTTYõld
(
MQTTClõ¡
 *
c
, 
timeout_ms
)

364 
rc
 = 
SUCCESS
;

366 
Timî
 
timî
;

367 
	`TimîInô
(&
timî
);

368 
	`TimîCou¡downMS
(&
timî
, 
timeout_ms
);

372 i‡(
	`cy˛e
(
c
, &
timî
Ë=
FAILURE
)

374 
rc
 = 
FAILURE
;

377 
	`kì∑live
(
c
);

378 } !
	`TimîIsExpúed
(&
timî
));

380  
rc
;

381 
	}
}

384 #i‡
deföed
(
MQTT_TASK
)

385 
	$MQTTRód
(*
¨g
)

387 
MQTTClõ¡
 *
c
 = (MQTTClõ¡ *)
¨g
;

389 
Timî
 
timî
;

390 
	`TimîInô
(&
timî
);

392 
c
->
isc⁄√˘ed
)

394 
	`TimîCou¡downMS
(&
timî
, 1000);

395 
rc
 = 
	`cy˛e
(
c
, &
timî
);

396 
rc
)

398 
TIMEOUT
:

401 
FAILURE
:

402 
exô
;

406 
∑ckë_ty≥
 = ()
rc
;

407 
∑ckë_ty≥
)

409 
CONNACK
:

410 
PUBACK
:

411 
SUBACK
:

412 
PUBCOMP
:

413 
	`Enqueue
(&
c
->
ª∂y
, 
∑ckë_ty≥
);

420 
	`kì∑live
(
c
);

423 
exô
:

424 
c
->
isc⁄√˘ed
 = 0;

425 
	`ThªadExô
();

426 
	}
}

429 
	$waôf‹
(
MQTTClõ¡
 *
c
, 
∑ckë_ty≥
, 
Timî
 *
timî
)

431 
rc
 = 
FAILURE
;

433 #i‡
	`deföed
(
MQTT_TASK
)

434 
ª∂y
;

437 
rc
 = 
	`Dequeue
(&
c
->
ª∂y
, &ª∂y, 
timî
);

438 } 
rc
 =0 && 
ª∂y
 !
∑ckë_ty≥
);

439  
rc
 =0 ? 
ª∂y
 :Ñc;

443 i‡(
	`TimîIsExpúed
(
timî
))

445 
rc
 = 
FAILURE
;

448 } (
rc
 = 
	`cy˛e
(
c
, 
timî
)Ë!
∑ckë_ty≥
);

449  
rc
;

451 
	}
}

453 
	$MQTTC⁄√˘
(
MQTTClõ¡
 *
c
, 
MQTTPackë_c⁄√˘D©a
 *
›ti⁄s
)

455 
rc
 = 
FAILURE
;

457 i‡(
c
->
isc⁄√˘ed
)

458 
exô
;

460 
Timî
 
c⁄√˘_timî
;

461 
	`TimîInô
(&
c⁄√˘_timî
);

462 
	`TimîCou¡downMS
(&
c⁄√˘_timî
, 
c
->
comm™d_timeout_ms
);

464 
MQTTPackë_c⁄√˘D©a
 
deÁu…_›ti⁄s
 = 
MQTTPackë_c⁄√˘D©a_öôülizî
;

465 i‡(
›ti⁄s
 =
NULL
)

466 
›ti⁄s
 = &
deÁu…_›ti⁄s
;

468 
c
->
kìp_Æive_öãrvÆ
 = 
›ti⁄s
->
kìpAliveI¡îvÆ
;

469 
	`TimîCou¡down
(&
c
->
pög_timî
, c->
kìp_Æive_öãrvÆ
);

470 
Àn
;

471 i‡((
Àn
 = 
	`MQTTSîülize_c⁄√˘
(
c
->
buf
, c->
buf_size
, 
›ti⁄s
)) <= 0)

472 
exô
;

473 i‡((
rc
 = 
	`£ndPackë
(
c
, 
Àn
, &
c⁄√˘_timî
)Ë!
SUCCESS
)

474 
exô
;

476 
c
->
isc⁄√˘ed
 = 1;

477 #i‡
	`deföed
(
MQTT_TASK
)

478 
	`ThªadSèπ
(&
c
->
ªad_thªad
, &
MQTTRód
, c);

481 i‡(
	`waôf‹
(
c
, 
CONNACK
, &
c⁄√˘_timî
) == CONNACK)

483 
c⁄«ck_rc
 = 255;

484 
£ssi⁄Pª£¡
 = 0;

485 i‡(
	`MQTTDe£rülize_c⁄«ck
(&
£ssi⁄Pª£¡
, &
c⁄«ck_rc
, 
c
->
ªadbuf
, c->
ªadbuf_size
) == 1)

486 
rc
 = 
c⁄«ck_rc
;

488 
rc
 = 
FAILURE
;

491 
rc
 = 
FAILURE
;

493 
exô
:

494 i‡(
rc
 =
FAILURE
)

496 
c
->
isc⁄√˘ed
 = 0;

497 #i‡
	`deföed
(
MQTT_TASK
)

498 
	`ThªadJoö
(&
c
->
ªad_thªad
);

502  
rc
;

503 
	}
}

505 
	$MQTTSubs¸ibe
(
MQTTClõ¡
 *
c
, c⁄° *
t›icFûãr
, 
QoS
 
qos
, 
mesßgeH™dÀr
 mesßgeH™dÀr, *
¨g
)

507 
rc
 = 
FAILURE
;

508 
Timî
 
timî
;

509 
Àn
 = 0;

510 
MQTTSåög
 
t›ic
 = 
MQTTSåög_öôülizî
;

511 
t›ic
.
c°rög
 = (*)
t›icFûãr
;

513 i‡(!
c
->
isc⁄√˘ed
)

514 
exô
;

516 
	`TimîInô
(&
timî
);

517 
	`TimîCou¡downMS
(&
timî
, 
c
->
comm™d_timeout_ms
);

519 
Àn
 = 
	`MQTTSîülize_subs¸ibe
(
c
->
buf
, c->
buf_size
, 0, 
	`gëNextPackëId
(c), 1, &
t›ic
, (*)&
qos
);

520 i‡(
Àn
 <= 0)

521 
exô
;

522 i‡((
rc
 = 
	`£ndPackë
(
c
, 
Àn
, &
timî
)Ë!
SUCCESS
)

523 
exô
;

525 i‡(
	`waôf‹
(
c
, 
SUBACK
, &
timî
) == SUBACK)

527 
cou¡
 = 0, 
gø¡edQoS
 = -1;

528 
my∑ckëid
;

529 i‡(
	`MQTTDe£rülize_suback
(&
my∑ckëid
, 1, &
cou¡
, &
gø¡edQoS
, 
c
->
ªadbuf
, c->
ªadbuf_size
) == 1)

530 
rc
 = 
gø¡edQoS
;

531 i‡(
rc
 != 0x80)

533 
i
;

534 
i
 = 0; i < 
MAX_MESSAGE_HANDLERS
; ++i)

536 i‡(
c
->
mesßgeH™dÀrs
[
i
].
t›icFûãr
 =
NULL
)

538 
c
->
mesßgeH™dÀrs
[
i
].
¨g
 =árg;

539 
c
->
mesßgeH™dÀrs
[
i
].
t›icFûãr
 =ÅopicFilter;

540 
c
->
mesßgeH™dÀrs
[
i
].
Â
 = 
mesßgeH™dÀr
;

541 
rc
 = 
SUCCESS
;

548 
rc
 = 
FAILURE
;

550 
exô
:

551  
rc
;

552 
	}
}

554 
	$MQTTUnsubs¸ibe
(
MQTTClõ¡
 *
c
, c⁄° *
t›icFûãr
)

556 
rc
 = 
FAILURE
;

557 
Timî
 
timî
;

558 
MQTTSåög
 
t›ic
 = 
MQTTSåög_öôülizî
;

559 
t›ic
.
c°rög
 = (*)
t›icFûãr
;

560 
Àn
 = 0;

562 i‡(!
c
->
isc⁄√˘ed
)

563 
exô
;

565 
	`TimîInô
(&
timî
);

566 
	`TimîCou¡downMS
(&
timî
, 
c
->
comm™d_timeout_ms
);

568 i‡((
Àn
 = 
	`MQTTSîülize_unsubs¸ibe
(
c
->
buf
, c->
buf_size
, 0, 
	`gëNextPackëId
(c), 1, &
t›ic
)) <= 0)

569 
exô
;

570 i‡((
rc
 = 
	`£ndPackë
(
c
, 
Àn
, &
timî
)Ë!
SUCCESS
)

571 
exô
;

573 i‡(
	`waôf‹
(
c
, 
UNSUBACK
, &
timî
) == UNSUBACK)

575 
my∑ckëid
;

576 i‡(
	`MQTTDe£rülize_unsuback
(&
my∑ckëid
, 
c
->
ªadbuf
, c->
ªadbuf_size
) == 1)

577 
rc
 = 0;

580 
rc
 = 
FAILURE
;

582 
exô
:

583  
rc
;

584 
	}
}

586 
	$MQTTPublish
(
MQTTClõ¡
 *
c
, c⁄° *
t›icName
, 
MQTTMesßge
 *
mesßge
)

588 
rc
 = 
FAILURE
;

589 
Timî
 
timî
;

590 
MQTTSåög
 
t›ic
 = 
MQTTSåög_öôülizî
;

591 
t›ic
.
c°rög
 = (*)
t›icName
;

592 
Àn
 = 0;

594 i‡(!
c
->
isc⁄√˘ed
)

595 
exô
;

597 
	`TimîInô
(&
timî
);

598 
	`TimîCou¡downMS
(&
timî
, 
c
->
comm™d_timeout_ms
);

600 i‡(
mesßge
->
qos
 =
QOS1
 || mesßge->qo†=
QOS2
)

601 
mesßge
->
id
 = 
	`gëNextPackëId
(
c
);

603 
Àn
 = 
	`MQTTSîülize_publish
(
c
->
buf
, c->
buf_size
, 0, 
mesßge
->
qos
, mesßge->
ªèöed
, mesßge->
id
,

604 
t›ic
, (*)
mesßge
->
∑ylﬂd
, mesßge->
∑ylﬂdÀn
);

605 i‡(
Àn
 <= 0)

606 
exô
;

607 i‡((
rc
 = 
	`£ndPackë
(
c
, 
Àn
, &
timî
)Ë!
SUCCESS
)

608 
exô
;

610 i‡(
mesßge
->
qos
 =
QOS1
)

612 i‡(
	`waôf‹
(
c
, 
PUBACK
, &
timî
) == PUBACK)

614 
my∑ckëid
;

615 
dup
, 
ty≥
;

616 i‡(
	`MQTTDe£rülize_ack
(&
ty≥
, &
dup
, &
my∑ckëid
, 
c
->
ªadbuf
, c->
ªadbuf_size
) != 1)

617 
rc
 = 
FAILURE
;

620 
rc
 = 
FAILURE
;

622 i‡(
mesßge
->
qos
 =
QOS2
)

624 i‡(
	`waôf‹
(
c
, 
PUBCOMP
, &
timî
) == PUBCOMP)

626 
my∑ckëid
;

627 
dup
, 
ty≥
;

628 i‡(
	`MQTTDe£rülize_ack
(&
ty≥
, &
dup
, &
my∑ckëid
, 
c
->
ªadbuf
, c->
ªadbuf_size
) != 1)

629 
rc
 = 
FAILURE
;

632 
rc
 = 
FAILURE
;

635 
exô
:

636  
rc
;

637 
	}
}

639 
	$MQTTDisc⁄√˘
(
MQTTClõ¡
 *
c
)

641 
rc
 = 
FAILURE
;

642 
Timî
 
timî
;

643 
Àn
 = 0;

645 
	`TimîInô
(&
timî
);

646 
	`TimîCou¡downMS
(&
timî
, 
c
->
comm™d_timeout_ms
);

648 
Àn
 = 
	`MQTTSîülize_disc⁄√˘
(
c
->
buf
, c->
buf_size
);

649 i‡(
Àn
 > 0)

650 
rc
 = 
	`£ndPackë
(
c
, 
Àn
, &
timî
);

652 
c
->
isc⁄√˘ed
 = 0;

654  
rc
;

655 
	}
}

	@libmqtt/MQTTClient.h

18 #i‡!
deföed
(
__MQTT_CLIENT_C_
)

19 
	#__MQTT_CLIENT_C_


	)

21 #i‡
deföed
(
__˝lu•lus
)

25 
	~<°dio.h
>

26 
	~"MQTTLöux.h
"

27 
	~<sys/time.h
>

29 
	~"MQTTPackë.h
"

30 
	~"MQTTEº‹s.h
"

31 
	~"°dio.h
"

34 
	#MAX_PACKET_ID
 65535

	)

36 #i‡!
deföed
(
MAX_MESSAGE_HANDLERS
)

37 
	#MAX_MESSAGE_HANDLERS
 5

	)

40 
	eQoS


42 
QOS0
,

43 
QOS1
,

44 
QOS2


47 
	sMQTTMesßge


49 
QoS
 
qos
;

50 
ªèöed
;

51 
dup
;

52 
id
;

53 *
∑ylﬂd
;

54 
size_t
 
∑ylﬂdÀn
;

55 } 
	tMQTTMesßge
;

57 
	sMesßgeD©a


59 
MQTTMesßge
 *
mesßge
;

60 
MQTTSåög
 *
t›icName
;

61 } 
	tMesßgeD©a
;

63 (*
mesßgeH™dÀr
)(
	tMesßgeD©a
 *, *);

65 
	sMQTTClõ¡


67 
√xt_∑ckëid
,

68 
comm™d_timeout_ms
;

69 
size_t
 
buf_size
,

70 
ªadbuf_size
;

71 *
buf
,

72 *
ªadbuf
;

73 
kìp_Æive_öãrvÆ
;

74 
pög_out°™dög
;

75 #i‡
deföed
(
__löux__
Ë|| deföed(
__APPLE__
)

76 
timevÆ
 
pög_£¡
;

77 
pög_time
;

79 
isc⁄√˘ed
;

81 
	sMesßgeH™dÀrs


83 *
¨g
;

84 c⁄° *
t›icFûãr
;

85 (*
Â
)(
MesßgeD©a
 *, *);

86 } 
mesßgeH™dÀrs
[
MAX_MESSAGE_HANDLERS
];

88 (*
deÁu…MesßgeH™dÀr
)(
MesßgeD©a
 *);

90 
Nëw‹k
 *
ù°ack
;

91 
Timî
 
pög_timî
;

92 #i‡
deföed
(
MQTT_TASK
)

93 
Thªad
 
ªad_thªad
;

94 
Queue
 
ª∂y
;

95 
Muãx
 
wrôe_muãx
;

97 } 
	tMQTTClõ¡
;

99 
	#DeÁu…Clõ¡
 \

101 0, 0, 0, 0, 
NULL
, NULL, 0, 0, 0 \

102 }

	)

111 
MQTTClõ¡Inô
(
MQTTClõ¡
 *
˛õ¡
, 
Nëw‹k
 *
√tw‹k
, 
comm™d_timeout_ms
,

112 *
£ndbuf
, 
size_t
 
£ndbuf_size
, *
ªadbuf
, size_à
ªadbuf_size
);

118 
MQTTClõ¡De°roy
(
MQTTClõ¡
 *
˛õ¡
);

125 
MQTTC⁄√˘
(
MQTTClõ¡
 *
˛õ¡
, 
MQTTPackë_c⁄√˘D©a
 *
›ti⁄s
);

133 
MQTTPublish
(
MQTTClõ¡
 *
˛õ¡
, c⁄° *, 
MQTTMesßge
 *);

141 
MQTTSubs¸ibe
(
MQTTClõ¡
 *
˛õ¡
, c⁄° *
t›icFûãr
, 
QoS
, 
mesßgeH™dÀr
, *
¨g
);

148 
MQTTUnsubs¸ibe
(
MQTTClõ¡
 *
˛õ¡
, c⁄° *
t›icFûãr
);

154 
MQTTDisc⁄√˘
(
MQTTClõ¡
 *
˛õ¡
);

156 #i‡!
deföed
(
MQTT_TASK
)

162 
MQTTYõld
(
MQTTClõ¡
 *
˛õ¡
, 
time
);

169 
MQTTSídPög
(
MQTTClõ¡
 *
c
);

171 #i‡
deföed
(
__löux__
Ë|| deföed(
__APPLE__
)

176 
MQTTGëPögTime
(
MQTTClõ¡
 *
˛õ¡
);

179 #i‡
deföed
(
__˝lu•lus
)

	@libmqtt/MQTTConnect.h

18 #i‚de‡
MQTTCONNECT_H_


19 
	#MQTTCONNECT_H_


	)

23 
	mÆl
;

24 #i‡
deföed
(
REVERSED
)

27 
	mu£∫ame
 : 1;

28 
	m∑ssw‹d
 : 1;

29 
	mwûlRëaö
 : 1;

30 
	mwûlQoS
 : 2;

31 
	mwûl
 : 1;

32 
	m˛ón£ssi⁄
 : 1;

34 } 
	mbôs
;

39 
	m˛ón£ssi⁄
 : 1;

40 
	mwûl
 : 1;

41 
	mwûlQoS
 : 2;

42 
	mwûlRëaö
 : 1;

43 
	m∑ssw‹d
 : 1;

44 
	mu£∫ame
 : 1;

45 } 
	mbôs
;

47 } 
	tMQTTC⁄√˘Fœgs
;

58 
	m°ru˘_id
[4];

60 
	m°ru˘_vîsi⁄
;

62 
MQTTSåög
 
	mt›icName
;

64 
MQTTSåög
 
	mmesßge
;

68 
	mªèöed
;

73 
	mqos
;

74 } 
	tMQTTPackë_wûlO±i⁄s
;

77 
	#MQTTPackë_wûlO±i⁄s_öôülizî
 { {'M', 'Q', 'T', 'W'}, 0, {
NULL
, {0, NULL}}, {NULL, {0, NULL}}, 0, 0 }

	)

83 
	m°ru˘_id
[4];

85 
	m°ru˘_vîsi⁄
;

88 
	mMQTTVîsi⁄
;

89 
MQTTSåög
 
	m˛õ¡ID
;

90 
	mkìpAliveI¡îvÆ
;

91 
	m˛ón£ssi⁄
;

92 
	mwûlFœg
;

93 
MQTTPackë_wûlO±i⁄s
 
	mwûl
;

94 
MQTTSåög
 
	mu£∫ame
;

95 
MQTTSåög
 
	m∑ssw‹d
;

96 } 
	tMQTTPackë_c⁄√˘D©a
;

100 
	mÆl
;

101 #i‡
deföed
(
REVERSED
)

104 
	m£ssi⁄¥e£¡
 : 1;

106 } 
	mbôs
;

111 
	m£ssi⁄¥e£¡
 : 1;

112 } 
	mbôs
;

114 } 
	tMQTTC⁄«ckFœgs
;

116 
	#MQTTPackë_c⁄√˘D©a_öôülizî
 { {'M', 'Q', 'T', 'C'}, 0, 4, {
NULL
, {0, NULL}}, 60, 1, 0, \

117 
MQTTPackë_wûlO±i⁄s_öôülizî
, {
NULL
, {0, NULL}}, {NULL, {0, NULL}} }

	)

119 
MQTTSîülize_c⁄√˘
(* 
buf
, 
buÊí
, 
MQTTPackë_c⁄√˘D©a
* 
›ti⁄s
);

120 
MQTTDe£rülize_c⁄√˘
(
MQTTPackë_c⁄√˘D©a
* 
d©a
, * 
buf
, 
Àn
);

122 
MQTTSîülize_c⁄«ck
(* 
buf
, 
buÊí
, 
c⁄«ck_rc
, 
£ssi⁄Pª£¡
);

123 
MQTTDe£rülize_c⁄«ck
(* 
£ssi⁄Pª£¡
, * 
c⁄«ck_rc
, * 
buf
, 
buÊí
);

125 
MQTTSîülize_disc⁄√˘
(* 
buf
, 
buÊí
);

126 
MQTTSîülize_pögªq
(* 
buf
, 
buÊí
);

	@libmqtt/MQTTConnectClient.c

17 
	~"MQTTPackë.h
"

18 
	~"SèckTø˚.h
"

20 
	~<°rög.h
>

27 
	$MQTTSîülize_c⁄√˘Lígth
(
MQTTPackë_c⁄√˘D©a
* 
›ti⁄s
)

29 
Àn
 = 0;

31 
FUNC_ENTRY
;

33 i‡(
›ti⁄s
->
MQTTVîsi⁄
 == 3)

34 
Àn
 = 12;

35 i‡(
›ti⁄s
->
MQTTVîsi⁄
 == 4)

36 
Àn
 = 10;

38 
Àn
 +
	`MQTT°æí
(
›ti⁄s
->
˛õ¡ID
)+2;

39 i‡(
›ti⁄s
->
wûlFœg
)

40 
Àn
 +
	`MQTT°æí
(
›ti⁄s
->
wûl
.
t›icName
)+2 + MQTT°æí(›ti⁄s->wûl.
mesßge
)+2;

41 i‡(
›ti⁄s
->
u£∫ame
.
c°rög
 || o±i⁄s->u£∫ame.
Àn°rög
.
d©a
)

42 
Àn
 +
	`MQTT°æí
(
›ti⁄s
->
u£∫ame
)+2;

43 i‡(
›ti⁄s
->
∑ssw‹d
.
c°rög
 || o±i⁄s->∑ssw‹d.
Àn°rög
.
d©a
)

44 
Àn
 +
	`MQTT°æí
(
›ti⁄s
->
∑ssw‹d
)+2;

46 
	`FUNC_EXIT_RC
(
Àn
);

47  
Àn
;

48 
	}
}

58 
	$MQTTSîülize_c⁄√˘
(* 
buf
, 
buÊí
, 
MQTTPackë_c⁄√˘D©a
* 
›ti⁄s
)

60 *
±r
 = 
buf
;

61 
MQTTHódî
 
hódî
 = {0};

62 
MQTTC⁄√˘Fœgs
 
Êags
 = {0};

63 
Àn
 = 0;

64 
rc
 = -1;

66 
FUNC_ENTRY
;

67 i‡(
	`MQTTPackë_Àn
(
Àn
 = 
	`MQTTSîülize_c⁄√˘Lígth
(
›ti⁄s
)Ë> 
buÊí
)

69 
rc
 = 
MQTTPACKET_BUFFER_TOO_SHORT
;

70 
exô
;

73 
hódî
.
byã
 = 0;

74 
hódî
.
bôs
.
ty≥
 = 
CONNECT
;

75 
	`wrôeCh¨
(&
±r
, 
hódî
.
byã
);

77 
±r
 +
	`MQTTPackë_ícode
’å, 
Àn
);

79 i‡(
›ti⁄s
->
MQTTVîsi⁄
 == 4)

81 
	`wrôeCSåög
(&
±r
, "MQTT");

82 
	`wrôeCh¨
(&
±r
, () 4);

86 
	`wrôeCSåög
(&
±r
, "MQIsdp");

87 
	`wrôeCh¨
(&
±r
, () 3);

90 
Êags
.
Æl
 = 0;

91 
Êags
.
bôs
.
˛ón£ssi⁄
 = 
›ti⁄s
->cleansession;

92 
Êags
.
bôs
.
wûl
 = (
›ti⁄s
->
wûlFœg
) ? 1 : 0;

93 i‡(
Êags
.
bôs
.
wûl
)

95 
Êags
.
bôs
.
wûlQoS
 = 
›ti⁄s
->
wûl
.
qos
;

96 
Êags
.
bôs
.
wûlRëaö
 = 
›ti⁄s
->
wûl
.
ªèöed
;

99 i‡(
›ti⁄s
->
u£∫ame
.
c°rög
 || o±i⁄s->u£∫ame.
Àn°rög
.
d©a
)

100 
Êags
.
bôs
.
u£∫ame
 = 1;

101 i‡(
›ti⁄s
->
∑ssw‹d
.
c°rög
 || o±i⁄s->∑ssw‹d.
Àn°rög
.
d©a
)

102 
Êags
.
bôs
.
∑ssw‹d
 = 1;

104 
	`wrôeCh¨
(&
±r
, 
Êags
.
Æl
);

105 
	`wrôeI¡
(&
±r
, 
›ti⁄s
->
kìpAliveI¡îvÆ
);

106 
	`wrôeMQTTSåög
(&
±r
, 
›ti⁄s
->
˛õ¡ID
);

107 i‡(
›ti⁄s
->
wûlFœg
)

109 
	`wrôeMQTTSåög
(&
±r
, 
›ti⁄s
->
wûl
.
t›icName
);

110 
	`wrôeMQTTSåög
(&
±r
, 
›ti⁄s
->
wûl
.
mesßge
);

112 i‡(
Êags
.
bôs
.
u£∫ame
)

113 
	`wrôeMQTTSåög
(&
±r
, 
›ti⁄s
->
u£∫ame
);

114 i‡(
Êags
.
bôs
.
∑ssw‹d
)

115 
	`wrôeMQTTSåög
(&
±r
, 
›ti⁄s
->
∑ssw‹d
);

117 
rc
 = 
±r
 - 
buf
;

119 
exô
: 
	`FUNC_EXIT_RC
(
rc
);

120  
rc
;

121 
	}
}

132 
	$MQTTDe£rülize_c⁄«ck
(* 
£ssi⁄Pª£¡
, * 
c⁄«ck_rc
, * 
buf
, 
buÊí
)

134 
MQTTHódî
 
hódî
 = {0};

135 * 
curd©a
 = 
buf
;

136 * 
ídd©a
 = 
NULL
;

137 
rc
 = 0;

138 
myÀn
;

139 
MQTTC⁄«ckFœgs
 
Êags
 = {0};

141 
FUNC_ENTRY
;

142 
hódî
.
byã
 = 
	`ªadCh¨
(&
curd©a
);

143 i‡(
hódî
.
bôs
.
ty≥
 !
CONNACK
)

144 
exô
;

146 
curd©a
 +(
rc
 = 
	`MQTTPackë_decodeBuf
(curd©a, &
myÀn
));

147 
ídd©a
 = 
curd©a
 + 
myÀn
;

148 i‡(
ídd©a
 - 
curd©a
 < 2)

149 
exô
;

151 
Êags
.
Æl
 = 
	`ªadCh¨
(&
curd©a
);

152 *
£ssi⁄Pª£¡
 = 
Êags
.
bôs
.
£ssi⁄¥e£¡
;

153 *
c⁄«ck_rc
 = 
	`ªadCh¨
(&
curd©a
);

155 
rc
 = 1;

156 
exô
:

157 
	`FUNC_EXIT_RC
(
rc
);

158  
rc
;

159 
	}
}

169 
	$MQTTSîülize_zîo
(* 
buf
, 
buÊí
, 
∑ckëty≥
)

171 
MQTTHódî
 
hódî
 = {0};

172 
rc
 = -1;

173 *
±r
 = 
buf
;

175 
FUNC_ENTRY
;

176 i‡(
buÊí
 < 2)

178 
rc
 = 
MQTTPACKET_BUFFER_TOO_SHORT
;

179 
exô
;

181 
hódî
.
byã
 = 0;

182 
hódî
.
bôs
.
ty≥
 = 
∑ckëty≥
;

183 
	`wrôeCh¨
(&
±r
, 
hódî
.
byã
);

185 
±r
 +
	`MQTTPackë_ícode
(ptr, 0);

186 
rc
 = 
±r
 - 
buf
;

187 
exô
:

188 
	`FUNC_EXIT_RC
(
rc
);

189  
rc
;

190 
	}
}

199 
	$MQTTSîülize_disc⁄√˘
(* 
buf
, 
buÊí
)

201  
	`MQTTSîülize_zîo
(
buf
, 
buÊí
, 
DISCONNECT
);

202 
	}
}

211 
	$MQTTSîülize_pögªq
(* 
buf
, 
buÊí
)

213  
	`MQTTSîülize_zîo
(
buf
, 
buÊí
, 
PINGREQ
);

214 
	}
}

	@libmqtt/MQTTConnectServer.c

17 
	~"SèckTø˚.h
"

18 
	~"MQTTPackë.h
"

19 
	~<°rög.h
>

21 
	#mö
(
a
, 
b
Ë(◊ < bË?á : b)

	)

30 
	$MQTTPackë_checkVîsi⁄
(
MQTTSåög
* 
¥Ÿocﬁ
, 
vîsi⁄
)

32 
rc
 = 0;

34 i‡(
vîsi⁄
 =3 && 
	`memcmp
(
¥Ÿocﬁ
->
Àn°rög
.
d©a
, "MQIsdp",

35 
	`mö
(6, 
¥Ÿocﬁ
->
Àn°rög
.
Àn
)) == 0)

36 
rc
 = 1;

37 i‡(
vîsi⁄
 =4 && 
	`memcmp
(
¥Ÿocﬁ
->
Àn°rög
.
d©a
, "MQTT",

38 
	`mö
(4, 
¥Ÿocﬁ
->
Àn°rög
.
Àn
)) == 0)

39 
rc
 = 1;

40  
rc
;

41 
	}
}

51 
	$MQTTDe£rülize_c⁄√˘
(
MQTTPackë_c⁄√˘D©a
* 
d©a
, * 
buf
, 
Àn
)

53 
MQTTHódî
 
hódî
 = {0};

54 
MQTTC⁄√˘Fœgs
 
Êags
 = {0};

55 * 
curd©a
 = 
buf
;

56 * 
ídd©a
 = &
buf
[
Àn
];

57 
rc
 = 0;

58 
MQTTSåög
 
PrŸocﬁ
;

59 
vîsi⁄
;

60 
myÀn
 = 0;

62 
FUNC_ENTRY
;

63 
hódî
.
byã
 = 
	`ªadCh¨
(&
curd©a
);

64 i‡(
hódî
.
bôs
.
ty≥
 !
CONNECT
)

65 
exô
;

67 
curd©a
 +
	`MQTTPackë_decodeBuf
(curd©a, &
myÀn
);

69 i‡(!
	`ªadMQTTLíSåög
(&
PrŸocﬁ
, &
curd©a
, 
ídd©a
) ||

70 
ídd©a
 - 
curd©a
 < 0)

71 
exô
;

73 
vîsi⁄
 = ()
	`ªadCh¨
(&
curd©a
);

77 i‡(
	`MQTTPackë_checkVîsi⁄
(&
PrŸocﬁ
, 
vîsi⁄
))

79 
Êags
.
Æl
 = 
	`ªadCh¨
(&
curd©a
);

80 
d©a
->
˛ón£ssi⁄
 = 
Êags
.
bôs
.cleansession;

81 
d©a
->
kìpAliveI¡îvÆ
 = 
	`ªadI¡
(&
curd©a
);

82 i‡(!
	`ªadMQTTLíSåög
(&
d©a
->
˛õ¡ID
, &
curd©a
, 
ídd©a
))

83 
exô
;

84 
d©a
->
wûlFœg
 = 
Êags
.
bôs
.
wûl
;

85 i‡(
Êags
.
bôs
.
wûl
)

87 
d©a
->
wûl
.
qos
 = 
Êags
.
bôs
.
wûlQoS
;

88 
d©a
->
wûl
.
ªèöed
 = 
Êags
.
bôs
.
wûlRëaö
;

89 i‡(!
	`ªadMQTTLíSåög
(&
d©a
->
wûl
.
t›icName
, &
curd©a
, 
ídd©a
) ||

90 !
	`ªadMQTTLíSåög
(&
d©a
->
wûl
.
mesßge
, &
curd©a
, 
ídd©a
))

91 
exô
;

93 i‡(
Êags
.
bôs
.
u£∫ame
)

95 i‡(
ídd©a
 - 
curd©a
 < 3 || !
	`ªadMQTTLíSåög
(&
d©a
->
u£∫ame
, &curdata,Énddata))

96 
exô
;

97 i‡(
Êags
.
bôs
.
∑ssw‹d
 &&

98 (
ídd©a
 - 
curd©a
 < 3 || !
	`ªadMQTTLíSåög
(&
d©a
->
∑ssw‹d
, &curdata,Énddata)))

99 
exô
;

101 i‡(
Êags
.
bôs
.
∑ssw‹d
)

102 
exô
;

103 
rc
 = 1;

105 
exô
:

106 
	`FUNC_EXIT_RC
(
rc
);

107  
rc
;

108 
	}
}

119 
	$MQTTSîülize_c⁄«ck
(* 
buf
, 
buÊí
, 
c⁄«ck_rc
, 
£ssi⁄Pª£¡
)

121 
MQTTHódî
 
hódî
 = {0};

122 
rc
 = 0;

123 *
±r
 = 
buf
;

124 
MQTTC⁄«ckFœgs
 
Êags
 = {0};

126 
FUNC_ENTRY
;

127 i‡(
buÊí
 < 2)

129 
rc
 = 
MQTTPACKET_BUFFER_TOO_SHORT
;

130 
exô
;

132 
hódî
.
byã
 = 0;

133 
hódî
.
bôs
.
ty≥
 = 
CONNACK
;

134 
	`wrôeCh¨
(&
±r
, 
hódî
.
byã
);

136 
±r
 +
	`MQTTPackë_ícode
(ptr, 2);

138 
Êags
.
Æl
 = 0;

139 
Êags
.
bôs
.
£ssi⁄¥e£¡
 = 
£ssi⁄Pª£¡
;

140 
	`wrôeCh¨
(&
±r
, 
Êags
.
Æl
);

141 
	`wrôeCh¨
(&
±r
, 
c⁄«ck_rc
);

143 
rc
 = 
±r
 - 
buf
;

144 
exô
:

145 
	`FUNC_EXIT_RC
(
rc
);

146  
rc
;

147 
	}
}

	@libmqtt/MQTTDeserializePublish.c

17 
	~"SèckTø˚.h
"

18 
	~"MQTTPackë.h
"

19 
	~<°rög.h
>

21 
	#mö
(
a
, 
b
Ë(◊ < bË? 1 : 0)

	)

36 
	$MQTTDe£rülize_publish
(* 
dup
, * 
qos
, * 
ªèöed
, * 
∑ckëid
, 
MQTTSåög
* 
t›icName
,

37 ** 
∑ylﬂd
, * 
∑ylﬂdÀn
, * 
buf
, 
buÊí
)

39 
MQTTHódî
 
hódî
 = {0};

40 * 
curd©a
 = 
buf
;

41 * 
ídd©a
 = 
NULL
;

42 
rc
 = 0;

43 
myÀn
 = 0;

45 
FUNC_ENTRY
;

46 
hódî
.
byã
 = 
	`ªadCh¨
(&
curd©a
);

47 i‡(
hódî
.
bôs
.
ty≥
 !
PUBLISH
)

48 
exô
;

49 *
dup
 = 
hódî
.
bôs
.dup;

50 *
qos
 = 
hódî
.
bôs
.qos;

51 *
ªèöed
 = 
hódî
.
bôs
.
ªèö
;

53 
curd©a
 +(
rc
 = 
	`MQTTPackë_decodeBuf
(curd©a, &
myÀn
));

54 
ídd©a
 = 
curd©a
 + 
myÀn
;

55 i‡(!
	`ªadMQTTLíSåög
(
t›icName
, &
curd©a
, 
ídd©a
) ||

56 
ídd©a
 - 
curd©a
 < 0)

57 
exô
;

59 i‡(*
qos
 > 0)

60 *
∑ckëid
 = 
	`ªadI¡
(&
curd©a
);

62 *
∑ylﬂdÀn
 = 
ídd©a
 - 
curd©a
;

63 *
∑ylﬂd
 = 
curd©a
;

64 
rc
 = 1;

65 
exô
:

66 
	`FUNC_EXIT_RC
(
rc
);

67  
rc
;

68 
	}
}

81 
	$MQTTDe£rülize_ack
(* 
∑ckëty≥
, * 
dup
, * 
∑ckëid
, * 
buf
, 
buÊí
)

83 
MQTTHódî
 
hódî
 = {0};

84 * 
curd©a
 = 
buf
;

85 * 
ídd©a
 = 
NULL
;

86 
rc
 = 0;

87 
myÀn
;

89 
FUNC_ENTRY
;

90 
hódî
.
byã
 = 
	`ªadCh¨
(&
curd©a
);

91 *
dup
 = 
hódî
.
bôs
.dup;

92 *
∑ckëty≥
 = 
hódî
.
bôs
.
ty≥
;

94 
curd©a
 +(
rc
 = 
	`MQTTPackë_decodeBuf
(curd©a, &
myÀn
));

95 
ídd©a
 = 
curd©a
 + 
myÀn
;

97 i‡(
ídd©a
 - 
curd©a
 < 2)

98 
exô
;

99 *
∑ckëid
 = 
	`ªadI¡
(&
curd©a
);

101 
rc
 = 1;

102 
exô
:

103 
	`FUNC_EXIT_RC
(
rc
);

104  
rc
;

105 
	}
}

	@libmqtt/MQTTErrors.h

18 #i‡!
deföed
(
__MQTT_ERRORS_C_
)

19 
	#__MQTT_ERRORS_C_


	)

22 
	eªtu∫Code


24 
	mTIMEOUT
 = -3,

25 
	mBUFFER_OVERFLOW
 = -2,

26 
	mFAILURE
 = -1,

27 
	mSUCCESS
 = 0

	@libmqtt/MQTTFormat.c

17 
	~"SèckTø˚.h
"

18 
	~"MQTTPackë.h
"

20 
	~<°rög.h
>

23 c⁄° * 
	gMQTTPackë_«mes
[] =

31 c⁄° * 
	$MQTTPackë_gëName
(
∑ckëid
)

33  
MQTTPackë_«mes
[
∑ckëid
];

34 
	}
}

37 
	$MQTTSåögF‹m©_c⁄√˘
(* 
°rbuf
, 
°rbuÊí
, 
MQTTPackë_c⁄√˘D©a
* 
d©a
)

39 
°rödex
 = 0;

41 
°rödex
 = 
	`¢¥ötf
(
°rbuf
, 
°rbuÊí
,

43 ()
d©a
->
MQTTVîsi⁄
, d©a->
˛õ¡ID
.
Àn°rög
.
Àn
, data->clientID.lenstring.data,

44 ()
d©a
->
˛ón£ssi⁄
, d©a->
kìpAliveI¡îvÆ
);

45 i‡(
d©a
->
wûlFœg
)

46 
°rödex
 +
	`¢¥ötf
(&
°rbuf
[°rödex], 
°rbuÊí
 - strindex,

48 
d©a
->
wûl
.
qos
, d©a->wûl.
ªèöed
,

49 
d©a
->
wûl
.
t›icName
.
Àn°rög
.
Àn
, data->will.topicName.lenstring.data,

50 
d©a
->
wûl
.
mesßge
.
Àn°rög
.
Àn
, data->will.message.lenstring.data);

51 i‡(
d©a
->
u£∫ame
.
Àn°rög
.d©®&& d©a->u£∫ame.Àn°rög.
Àn
 > 0)

52 
°rödex
 +
	`¢¥ötf
(&
°rbuf
[°rödex], 
°rbuÊí
 - strindex,

53 ", u£∏«mê%.*s", 
d©a
->
u£∫ame
.
Àn°rög
.
Àn
, data->username.lenstring.data);

54 i‡(
d©a
->
∑ssw‹d
.
Àn°rög
.d©®&& d©a->∑ssw‹d.Àn°rög.
Àn
 > 0)

55 
°rödex
 +
	`¢¥ötf
(&
°rbuf
[°rödex], 
°rbuÊí
 - strindex,

56 ",Öassw‹d %.*s", 
d©a
->
∑ssw‹d
.
Àn°rög
.
Àn
, data->password.lenstring.data);

57  
°rödex
;

58 
	}
}

61 
	$MQTTSåögF‹m©_c⁄«ck
(* 
°rbuf
, 
°rbuÊí
, 
c⁄«ck_rc
, 
£ssi⁄Pª£¡
)

63 
°rödex
 = 
	`¢¥ötf
(
°rbuf
, 
°rbuÊí
, "CONNACK sessi⁄Öª£¡ %d,Ñ¯%d", 
£ssi⁄Pª£¡
, 
c⁄«ck_rc
);

64  
°rödex
;

65 
	}
}

68 
	$MQTTSåögF‹m©_publish
(* 
°rbuf
, 
°rbuÊí
, 
dup
, 
qos
, 
ªèöed
,

69 
∑ckëid
, 
MQTTSåög
 
t›icName
, * 
∑ylﬂd
, 
∑ylﬂdÀn
)

71 
°rödex
 = 
	`¢¥ötf
(
°rbuf
, 
°rbuÊí
,

73 
dup
, 
qos
, 
ªèöed
, 
∑ckëid
,

74 (
t›icName
.
Àn°rög
.
Àn
 < 20Ë?Å›icName.Àn°rög.À¿: 20,Å›icName.Àn°rög.
d©a
,

75 
∑ylﬂdÀn
, (∑ylﬂdÀ¿< 20Ë?ÖaylﬂdÀ¿: 20, 
∑ylﬂd
);

76  
°rödex
;

77 
	}
}

80 
	$MQTTSåögF‹m©_ack
(* 
°rbuf
, 
°rbuÊí
, 
∑ckëty≥
, 
dup
, 
∑ckëid
)

82 
°rödex
 = 
	`¢¥ötf
(
°rbuf
, 
°rbuÊí
, "%s,Öackë id %d", 
MQTTPackë_«mes
[
∑ckëty≥
], 
∑ckëid
);

83 i‡(
dup
)

84 
°rödex
 +
	`¢¥ötf
(
°rbuf
 + såödex, 
°rbuÊí
 - såödex, ", du∞%d", 
dup
);

85  
°rödex
;

86 
	}
}

89 
	$MQTTSåögF‹m©_subs¸ibe
(* 
°rbuf
, 
°rbuÊí
, 
dup
, 
∑ckëid
, 
cou¡
,

90 
MQTTSåög
 
t›icFûãrs
[], 
ªque°edQoSs
[])

92  
	`¢¥ötf
(
°rbuf
, 
°rbuÊí
,

94 
dup
, 
∑ckëid
, 
cou¡
,

95 
t›icFûãrs
[0].
Àn°rög
.
Àn
,Å›icFûãrs[0].Àn°rög.
d©a
,

96 
ªque°edQoSs
[0]);

97 
	}
}

100 
	$MQTTSåögF‹m©_suback
(* 
°rbuf
, 
°rbuÊí
, 
∑ckëid
, 
cou¡
, * 
gø¡edQoSs
)

102  
	`¢¥ötf
(
°rbuf
, 
°rbuÊí
,

103 "SUBACKÖackë id %d cou¡ %d gø¡ed qo†%d", 
∑ckëid
, 
cou¡
, 
gø¡edQoSs
[0]);

104 
	}
}

107 
	$MQTTSåögF‹m©_unsubs¸ibe
(* 
°rbuf
, 
°rbuÊí
, 
dup
, 
∑ckëid
,

108 
cou¡
, 
MQTTSåög
 
t›icFûãrs
[])

110  
	`¢¥ötf
(
°rbuf
, 
°rbuÊí
,

112 
dup
, 
∑ckëid
, 
cou¡
,

113 
t›icFûãrs
[0].
Àn°rög
.
Àn
,Å›icFûãrs[0].Àn°rög.
d©a
);

114 
	}
}

117 * 
	$MQTTF‹m©_toClõ¡Såög
(* 
°rbuf
, 
°rbuÊí
, * 
buf
, 
buÊí
)

119 
ödex
 = 0;

120 
ªm_Àngth
 = 0;

121 
MQTTHódî
 
hódî
 = {0};

122 
°rödex
 = 0;

124 
hódî
.
byã
 = 
buf
[
ödex
++];

125 
ödex
 +
	`MQTTPackë_decodeBuf
(&
buf
[ödex], &
ªm_Àngth
);

127 
hódî
.
bôs
.
ty≥
)

129 
CONNACK
:

131 
£ssi⁄Pª£¡
, 
c⁄«ck_rc
;

132 i‡(
	`MQTTDe£rülize_c⁄«ck
(&
£ssi⁄Pª£¡
, &
c⁄«ck_rc
, 
buf
, 
buÊí
) == 1)

133 
°rödex
 = 
	`MQTTSåögF‹m©_c⁄«ck
(
°rbuf
, 
°rbuÊí
, 
c⁄«ck_rc
, 
£ssi⁄Pª£¡
);

136 
PUBLISH
:

138 
dup
, 
ªèöed
, *
∑ylﬂd
;

139 
∑ckëid
;

140 
qos
, 
∑ylﬂdÀn
;

141 
MQTTSåög
 
t›icName
 = 
MQTTSåög_öôülizî
;

142 i‡(
	`MQTTDe£rülize_publish
(&
dup
, &
qos
, &
ªèöed
, &
∑ckëid
, &
t›icName
,

143 &
∑ylﬂd
, &
∑ylﬂdÀn
, 
buf
, 
buÊí
) == 1)

144 
°rödex
 = 
	`MQTTSåögF‹m©_publish
(
°rbuf
, 
°rbuÊí
, 
dup
, 
qos
, 
ªèöed
, 
∑ckëid
,

145 
t›icName
, 
∑ylﬂd
, 
∑ylﬂdÀn
);

148 
PUBACK
:

149 
PUBREC
:

150 
PUBREL
:

151 
PUBCOMP
:

153 
∑ckëty≥
, 
dup
;

154 
∑ckëid
;

155 i‡(
	`MQTTDe£rülize_ack
(&
∑ckëty≥
, &
dup
, &
∑ckëid
, 
buf
, 
buÊí
) == 1)

156 
°rödex
 = 
	`MQTTSåögF‹m©_ack
(
°rbuf
, 
°rbuÊí
, 
∑ckëty≥
, 
dup
, 
∑ckëid
);

159 
SUBACK
:

161 
∑ckëid
;

162 
maxcou¡
 = 1, 
cou¡
 = 0;

163 
gø¡edQoSs
[1];

164 i‡(
	`MQTTDe£rülize_suback
(&
∑ckëid
, 
maxcou¡
, &
cou¡
, 
gø¡edQoSs
, 
buf
, 
buÊí
) == 1)

165 
°rödex
 = 
	`MQTTSåögF‹m©_suback
(
°rbuf
, 
°rbuÊí
, 
∑ckëid
, 
cou¡
, 
gø¡edQoSs
);

168 
UNSUBACK
:

170 
∑ckëid
;

171 i‡(
	`MQTTDe£rülize_unsuback
(&
∑ckëid
, 
buf
, 
buÊí
) == 1)

172 
°rödex
 = 
	`MQTTSåögF‹m©_ack
(
°rbuf
, 
°rbuÊí
, 
UNSUBACK
, 0, 
∑ckëid
);

175 
PINGREQ
:

176 
PINGRESP
:

177 
DISCONNECT
:

178 
°rödex
 = 
	`¢¥ötf
(
°rbuf
, 
°rbuÊí
, "%s", 
MQTTPackë_«mes
[
hódî
.
bôs
.
ty≥
]);

181 
°rbuf
[
°rödex
] = '\0';

182  
°rbuf
;

183 
	}
}

186 * 
	$MQTTF‹m©_toSîvîSåög
(* 
°rbuf
, 
°rbuÊí
, * 
buf
, 
buÊí
)

188 
ödex
 = 0;

189 
ªm_Àngth
 = 0;

190 
MQTTHódî
 
hódî
 = {0};

191 
°rödex
 = 0;

193 
hódî
.
byã
 = 
buf
[
ödex
++];

194 
ödex
 +
	`MQTTPackë_decodeBuf
(&
buf
[ödex], &
ªm_Àngth
);

196 
hódî
.
bôs
.
ty≥
)

198 
CONNECT
:

200 
MQTTPackë_c⁄√˘D©a
 
d©a
;

201 
rc
;

202 i‡((
rc
 = 
	`MQTTDe£rülize_c⁄√˘
(&
d©a
, 
buf
, 
buÊí
)) == 1)

203 
°rödex
 = 
	`MQTTSåögF‹m©_c⁄√˘
(
°rbuf
, 
°rbuÊí
, &
d©a
);

206 
PUBLISH
:

208 
dup
, 
ªèöed
, *
∑ylﬂd
;

209 
∑ckëid
;

210 
qos
, 
∑ylﬂdÀn
;

211 
MQTTSåög
 
t›icName
 = 
MQTTSåög_öôülizî
;

212 i‡(
	`MQTTDe£rülize_publish
(&
dup
, &
qos
, &
ªèöed
, &
∑ckëid
, &
t›icName
,

213 &
∑ylﬂd
, &
∑ylﬂdÀn
, 
buf
, 
buÊí
) == 1)

214 
°rödex
 = 
	`MQTTSåögF‹m©_publish
(
°rbuf
, 
°rbuÊí
, 
dup
, 
qos
, 
ªèöed
, 
∑ckëid
,

215 
t›icName
, 
∑ylﬂd
, 
∑ylﬂdÀn
);

218 
PUBACK
:

219 
PUBREC
:

220 
PUBREL
:

221 
PUBCOMP
:

223 
∑ckëty≥
, 
dup
;

224 
∑ckëid
;

225 i‡(
	`MQTTDe£rülize_ack
(&
∑ckëty≥
, &
dup
, &
∑ckëid
, 
buf
, 
buÊí
) == 1)

226 
°rödex
 = 
	`MQTTSåögF‹m©_ack
(
°rbuf
, 
°rbuÊí
, 
∑ckëty≥
, 
dup
, 
∑ckëid
);

229 
SUBSCRIBE
:

231 
dup
;

232 
∑ckëid
;

233 
maxcou¡
 = 1, 
cou¡
 = 0;

234 
MQTTSåög
 
t›icFûãrs
[1];

235 
ªque°edQoSs
[1];

236 i‡(
	`MQTTDe£rülize_subs¸ibe
(&
dup
, &
∑ckëid
, 
maxcou¡
, &
cou¡
,

237 
t›icFûãrs
, 
ªque°edQoSs
, 
buf
, 
buÊí
) == 1)

238 
°rödex
 = 
	`MQTTSåögF‹m©_subs¸ibe
(
°rbuf
, 
°rbuÊí
, 
dup
, 
∑ckëid
, 
cou¡
, 
t›icFûãrs
, 
ªque°edQoSs
);;

241 
UNSUBSCRIBE
:

243 
dup
;

244 
∑ckëid
;

245 
maxcou¡
 = 1, 
cou¡
 = 0;

246 
MQTTSåög
 
t›icFûãrs
[1];

247 i‡(
	`MQTTDe£rülize_unsubs¸ibe
(&
dup
, &
∑ckëid
, 
maxcou¡
, &
cou¡
, 
t›icFûãrs
, 
buf
, 
buÊí
) == 1)

248 
°rödex
 = 
	`MQTTSåögF‹m©_unsubs¸ibe
(
°rbuf
, 
°rbuÊí
, 
dup
, 
∑ckëid
, 
cou¡
, 
t›icFûãrs
);

251 
PINGREQ
:

252 
PINGRESP
:

253 
DISCONNECT
:

254 
°rödex
 = 
	`¢¥ötf
(
°rbuf
, 
°rbuÊí
, "%s", 
MQTTPackë_«mes
[
hódî
.
bôs
.
ty≥
]);

257 
°rbuf
[
°rödex
] = '\0';

258  
°rbuf
;

259 
	}
}

	@libmqtt/MQTTFormat.h

17 #i‡!
deföed
(
MQTTFORMAT_H
)

18 
	#MQTTFORMAT_H


	)

20 
	~"SèckTø˚.h
"

21 
	~"MQTTPackë.h
"

23 c⁄° * 
MQTTPackë_gëName
(
∑ckëid
);

24 
MQTTSåögF‹m©_c⁄√˘
(* 
°rbuf
, 
°rbuÊí
, 
MQTTPackë_c⁄√˘D©a
* 
d©a
);

25 
MQTTSåögF‹m©_c⁄«ck
(* 
°rbuf
, 
°rbuÊí
, 
c⁄«ck_rc
, 
£ssi⁄Pª£¡
);

26 
MQTTSåögF‹m©_publish
(* 
°rbuf
, 
°rbuÊí
, 
dup
, 
qos
, 
ªèöed
,

27 
∑ckëid
, 
MQTTSåög
 
t›icName
, * 
∑ylﬂd
, 
∑ylﬂdÀn
);

28 
MQTTSåögF‹m©_ack
(* 
°rbuf
, 
°rbuÊí
, 
∑ckëty≥
, 
dup
, 
∑ckëid
);

29 
MQTTSåögF‹m©_subs¸ibe
(* 
°rbuf
, 
°rbuÊí
, 
dup
, 
∑ckëid
, 
cou¡
,

30 
MQTTSåög
 
t›icFûãrs
[], 
ªque°edQoSs
[]);

31 
MQTTSåögF‹m©_suback
(* 
°rbuf
, 
°rbuÊí
, 
∑ckëid
, 
cou¡
, * 
gø¡edQoSs
);

32 
MQTTSåögF‹m©_unsubs¸ibe
(* 
°rbuf
, 
°rbuÊí
, 
dup
, 
∑ckëid
,

33 
cou¡
, 
MQTTSåög
 
t›icFûãrs
[]);

34 * 
MQTTF‹m©_toClõ¡Såög
(* 
°rbuf
, 
°rbuÊí
, * 
buf
, 
buÊí
);

35 * 
MQTTF‹m©_toSîvîSåög
(* 
°rbuf
, 
°rbuÊí
, * 
buf
, 
buÊí
);

	@libmqtt/MQTTLinux.c

17 
	~"MQTTLöux.h
"

19 
	$TimîInô
(
Timî
 *
timî
)

21 
timî
->
íd_time
 = (
timevÆ
){0, 0};

22 
	}
}

24 
	$TimîIsExpúed
(
Timî
 *
timî
)

26 
timevÆ
 
now
, 
ªs
;

27 
	`gëtimeofday
(&
now
, 
NULL
);

28 
	`timîsub
(&
timî
->
íd_time
, &
now
, &
ªs
);

29  
ªs
.
tv_£c
 < 0 || (ªs.tv_£¯=0 &&Ñes.
tv_u£c
 <= 0);

30 
	}
}

32 
	$TimîCou¡downMS
(
Timî
 *
timî
, 
timeout
)

34 
timevÆ
 
now
;

35 
	`gëtimeofday
(&
now
, 
NULL
);

36 
timevÆ
 
öãrvÆ
 = {
timeout
 / 1000, (timeout % 1000) * 1000};

37 
	`timîadd
(&
now
, &
öãrvÆ
, &
timî
->
íd_time
);

38 
	}
}

40 
	$TimîCou¡down
(
Timî
 *
timî
, 
timeout
)

42 
timevÆ
 
now
;

43 
	`gëtimeofday
(&
now
, 
NULL
);

44 
timevÆ
 
öãrvÆ
 = {
timeout
, 0};

45 
	`timîadd
(&
now
, &
öãrvÆ
, &
timî
->
íd_time
);

46 
	}
}

48 
	$TimîLe·MS
(
Timî
 *
timî
)

50 
timevÆ
 
now
, 
ªs
;

51 
	`gëtimeofday
(&
now
, 
NULL
);

52 
	`timîsub
(&
timî
->
íd_time
, &
now
, &
ªs
);

54  (
ªs
.
tv_£c
 < 0Ë? 0 :Ñes.tv_£¯* 1000 +Ñes.
tv_u£c
 / 1000;

55 
	}
}

57 
	$löux_ªad
(
Nëw‹k
 *
n
, *
buf„r
, 
Àn
, 
timeout_ms
)

59 
timevÆ
 
öãrvÆ
 = {
timeout_ms
 / 1000, (timeout_ms % 1000) * 1000};

60 i‡(
öãrvÆ
.
tv_£c
 < 0 || (öãrvÆ.tv_£¯=0 && i¡îvÆ.
tv_u£c
 <= 0))

62 
öãrvÆ
.
tv_£c
 = 0;

63 
öãrvÆ
.
tv_u£c
 = 100;

66 
	`£tsock›t
(
n
->
my_sockë
, 
SOL_SOCKET
, 
SO_RCVTIMEO
, (*)&
öãrvÆ
, (
timevÆ
));

68 
rc
;

69 
byãs
 = 0;

70 
byãs
 < 
Àn
)

72 
rc
 = 
	`ªcv
(
n
->
my_sockë
, &
buf„r
[
byãs
], (
size_t
)(
Àn
 - bytes), 0);

73 i‡(
rc
 < 0)

74 
î∫o
)

76 
EAGAIN
:

77  
TIMEOUT
;

79  
FAILURE
;

81 i‡(
rc
 == 0)

84 
byãs
 +
rc
;

86  
byãs
;

87 
	}
}

89 
	$löux_wrôe
(
Nëw‹k
 *
n
, *
buf„r
, 
Àn
, 
timeout_ms
)

91 
timevÆ
 
tv
;

93 
tv
.
tv_£c
 = 0;

94 
tv
.
tv_u£c
 = 
timeout_ms
 * 1000;

96 
	`£tsock›t
(
n
->
my_sockë
, 
SOL_SOCKET
, 
SO_RCVTIMEO
, (*)&
tv
, (
timevÆ
));

97 
rc
 = 
	`wrôe
(
n
->
my_sockë
, 
buf„r
, 
Àn
);

98  
rc
;

99 
	}
}

101 
	$Nëw‹kInô
(
Nëw‹k
 *
n
)

103 
n
->
my_sockë
 = -1;

104 
n
->
mqâªad
 = 
löux_ªad
;

105 
n
->
mqâwrôe
 = 
löux_wrôe
;

106 
	}
}

108 
	$Nëw‹kC⁄√˘
(
Nëw‹k
 *
n
, *
addr
, 
p‹t
)

110 
ty≥
 = 
SOCK_STREAM
;

111 
sockaddr_ö
 
addªss
;

112 
rc
 = -1;

113 
ß_Ámûy_t
 
Ámûy
 = 
AF_INET
;

114 
addröfo
 *
ªsu…
 = 
NULL
;

115 
addröfo
 
höts
 = {0, 
AF_UNSPEC
, 
SOCK_STREAM
, 
IPPROTO_TCP
, 0, 
NULL
, NULL, NULL};

117 i‡((
rc
 = 
	`gëaddröfo
(
addr
, 
NULL
, &
höts
, &
ªsu…
)) == 0)

119 
addröfo
 *
ªs
 = 
ªsu…
;

122 
ªs
)

124 i‡(
ªs
->
ai_Ámûy
 =
AF_INET
)

126 
ªsu…
 = 
ªs
;

129 
ªs
 =Ñes->
ai_√xt
;

132 i‡(
ªsu…
->
ai_Ámûy
 =
AF_INET
)

134 
addªss
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

135 
addªss
.
sö_Ámûy
 = 
Ámûy
 = 
AF_INET
;

136 
addªss
.
sö_addr
 = ((
sockaddr_ö
 *)(
ªsu…
->
ai_addr
))->sin_addr;

139 
rc
 = -1;

141 
	`‰ìaddröfo
(
ªsu…
);

144 i‡(
rc
 == 0)

146 
n
->
my_sockë
 = 
	`sockë
(
Ámûy
, 
ty≥
, 0);

147 i‡(
n
->
my_sockë
 != -1)

148 
rc
 = 
	`c⁄√˘
(
n
->
my_sockë
, (
sockaddr
 *)&
addªss
, (address));

149 i‡(
rc
 != 0) {

150 
	`˛o£
(
n
->
my_sockë
);

151 
n
->
my_sockë
 =-1;

155  
rc
;

156 
	}
}

158 
	$Nëw‹kDisc⁄√˘
(
Nëw‹k
 *
n
)

160 
	`˛o£
(
n
->
my_sockë
);

161 
n
->
my_sockë
 =-1;

162 
	}
}

164 
	$Nëw‹kCheckC⁄√˘ed
(
Nëw‹k
 *
n
)

166 
sockaddr_ö
 
addr
;

167 
sockÀn_t
 
addr_Àn
 = (
addr
);

168 
îr
;

170 i‡(
n
->
my_sockë
 == -1) {

174 
îr
 = 
	`gë≥î«me
(
n
->
my_sockë
, (
sockaddr
 *Ë&
addr
, &
addr_Àn
);

175 i‡(
îr
 == -1) {

179 
	}
}

181 
	$Nëw‹kIsC⁄√˘ed
(
Nëw‹k
 *
n
)

183  (
n
->
my_sockë
 != -1);

184 
	}
}

186 
	$MuãxInô
(
Muãx
 *
muãx
)

188 
	`±hªad_muãx_öô
(&
muãx
->
m
, 
NULL
);

189 
	}
}

191 
	$MuãxLock
(
Muãx
 *
muãx
)

193  
	`±hªad_muãx_lock
(&
muãx
->
m
);

194 
	}
}

196 
	$MuãxU∆ock
(
Muãx
 *
muãx
)

198  
	`±hªad_muãx_u∆ock
(&
muãx
->
m
);

199 
	}
}

201 
	$MuãxDe°roy
(
Muãx
 *
muãx
)

203  
	`±hªad_muãx_de°roy
(&
muãx
->
m
);

204 
	}
}

206 
	$Sem≠h‹eInô
(
Sem≠h‹e
 *
£m
)

208 
	`£m_öô
(&
£m
->
s
, 0, 0);

209 
	}
}

211 
	$Sem≠h‹eWaô
(
Sem≠h‹e
 *
£m
)

213  
	`£m_waô
(&
£m
->
s
);

214 
	}
}

216 
	$Sem≠h‹eTimedWaô
(
Sem≠h‹e
 *
£m
, 
Timî
 *
timî
)

218 
rc
;

219 
time•ec
 
ts
;

220 
ts
.
tv_£c
 = 
timî
->
íd_time
.tv_sec;

221 
ts
.
tv_n£c
 = 
timî
->
íd_time
.
tv_u£c
 * 1000;

224 
rc
 = 
	`£m_timedwaô
(&
£m
->
s
, &
ts
);

225 } 
rc
 =
EINTR
);

226 i‡(
rc
 =
ETIMEDOUT
)

227  
TIMEOUT
;

228 i‡(
rc
 != 0)

229  
FAILURE
;

231 
	}
}

233 
	$Sem≠h‹eSig«l
(
Sem≠h‹e
 *
£m
)

235  
	`£m_po°
(&
£m
->
s
);

236 
	}
}

238 
	$Sem≠h‹eDe°roy
(
Sem≠h‹e
 *
£m
)

240  
	`£m_de°roy
(&
£m
->
s
);

241 
	}
}

243 
	$QueueInô
(
Queue
 *
queue
)

245 
	`MuãxInô
(&
queue
->
m
);

246 
	`Sem≠h‹eInô
(&
queue
->
s
);

247 
	}
}

249 
	$QueueDe°roy
(
Queue
 *
queue
)

251 
	`MuãxDe°roy
(&
queue
->
m
);

252 
	`Sem≠h‹eDe°roy
(&
queue
->
s
);

254 
	}
}

256 
	$Enqueue
(
Queue
 *
queue
, 
ôem
)

258 
¥evôem
;

260 
	`MuãxLock
(&
queue
->
m
);

261 
¥evôem
 = 
queue
->
ôem
;

262 
	`MuãxU∆ock
(&
queue
->
m
);

263 i‡(
¥evôem
 != 0)

264 
	`Sem≠h‹eWaô
(&
queue
->
s
);

265 } 
¥evôem
 != 0);

267 
	`MuãxLock
(&
queue
->
m
);

268 
queue
->
ôem
 = item;

269 
	`MuãxU∆ock
(&
queue
->
m
);

270 
	`Sem≠h‹eSig«l
(&
queue
->
s
);

272 
	}
}

274 
	$Dequeue
(
Queue
 *
queue
, *
ôem
, 
Timî
 *
timî
)

276 
rc
 = 0;

279 
	`MuãxLock
(&
queue
->
m
);

280 *
ôem
 = 
queue
->item;

281 
	`MuãxU∆ock
(&
queue
->
m
);

283 i‡(*
ôem
 =0Ë
rc
 = 
	`Sem≠h‹eTimedWaô
(&
queue
->
s
, 
timî
);

284 } *
ôem
 =0 && 
rc
 == 0);

286 
	`MuãxLock
(&
queue
->
m
);

287 
queue
->
ôem
 = 0;

288 
	`MuãxU∆ock
(&
queue
->
m
);

289 
	`Sem≠h‹eSig«l
(&
queue
->
s
);

290  
rc
;

291 
	}
}

293 
	$ThªadSèπ
(
Thªad
 *
thªad
, (*
‚
)(*), *
¨g
)

295 
rc
 = 
	`±hªad_¸óã
(&
thªad
->
t
, 
NULL
, (*)
‚
, 
¨g
);

296 
thªad
->
°¨ãd
 = 
rc
 == 0;

297  
rc
;

298 
	}
}

300 
	$ThªadSèπed
(
Thªad
 *
thªad
)

302  
thªad
->
°¨ãd
;

303 
	}
}

305 
	$ThªadJoö
(
Thªad
 *
thªad
)

307 
rc
 = 0;

308 i‡(
thªad
->
°¨ãd
Ë
	`±hªad_joö
—hªad->
t
, 
NULL
);

309 
thªad
->
°¨ãd
 = 0;

310  
rc
;

311 
	}
}

313 
	$ThªadExô
()

315 
	`±hªad_exô
(
NULL
);

316 
	}
}

	@libmqtt/MQTTLinux.h

17 #i‡!
deföed
(
__MQTT_LINUX_
)

18 
	#__MQTT_LINUX_


	)

20 
	~<sys/ty≥s.h
>

21 
	~<sys/sockë.h
>

22 
	~<sys/∑øm.h
>

23 
	~<sys/time.h
>

24 
	~<sys/£À˘.h
>

25 
	~<√töë/ö.h
>

26 
	~<√töë/t˝.h
>

27 
	~<¨∑/öë.h
>

28 
	~<√tdb.h
>

29 
	~<°dio.h
>

30 
	~<uni°d.h
>

31 
	~<î∫o.h
>

32 
	~<f˙é.h
>

33 
	~<£m≠h‹e.h
>

34 
	~<±hªad.h
>

36 
	~<°dlib.h
>

37 
	~<°rög.h
>

38 
	~<sig«l.h
>

40 
	~"MQTTEº‹s.h
"

42 
	sTimî


44 
timevÆ
 
	míd_time
;

45 } 
	tTimî
;

47 
TimîInô
(
Timî
 *);

48 
TimîIsExpúed
(
Timî
 *);

49 
TimîCou¡downMS
(
Timî
 *, );

50 
TimîCou¡down
(
Timî
 *, );

51 
TimîLe·MS
(
Timî
 *);

53 
	sNëw‹k


55 
	mmy_sockë
;

56 (*
	mmqâªad
)(
	mNëw‹k
 *, *, , );

57 (*
	mmqâwrôe
)(
	mNëw‹k
 *, *, , );

58 } 
	tNëw‹k
;

60 
löux_ªad
(
Nëw‹k
 *, *, , );

61 
löux_wrôe
(
Nëw‹k
 *, *, , );

63 
Nëw‹kInô
(
Nëw‹k
 *);

64 
Nëw‹kC⁄√˘
(
Nëw‹k
 *, *, );

65 
Nëw‹kDisc⁄√˘
(
Nëw‹k
 *);

66 
Nëw‹kCheckC⁄√˘ed
(
Nëw‹k
 *);

67 
Nëw‹kIsC⁄√˘ed
(
Nëw‹k
 *);

69 
	sMuãx


71 
±hªad_muãx_t
 
	mm
;

72 } 
	tMuãx
;

74 
MuãxInô
(
Muãx
 *);

75 
MuãxLock
(
Muãx
 *);

76 
MuãxU∆ock
(
Muãx
 *);

77 
MuãxDe°roy
(
Muãx
 *);

79 
	sSem≠h‹e


81 
£m_t
 
	ms
;

82 } 
	tSem≠h‹e
;

84 
Sem≠h‹eInô
(
Sem≠h‹e
 *);

85 
Sem≠h‹eWaô
(
Sem≠h‹e
 *);

86 
Sem≠h‹eTimedWaô
(
Sem≠h‹e
 *, 
Timî
 *);

87 
Sem≠h‹eSig«l
(
Sem≠h‹e
 *);

88 
Sem≠h‹eDe°roy
(
Sem≠h‹e
 *);

90 
	sQueue


92 
	môem
;

93 
Sem≠h‹e
 
	ms
;

94 
Muãx
 
	mm
;

95 } 
	tQueue
;

97 
QueueInô
(
Queue
 *);

98 
Enqueue
(
Queue
 *, );

99 
Dequeue
(
Queue
 *, *, 
Timî
 *);

100 
QueueDe°roy
(
Queue
 *);

102 
	sThªad


104 
±hªad_t
 
	mt
;

105 
	m°¨ãd
;

106 } 
	tThªad
;

108 
ThªadSèπ
(
Thªad
 *, (*
‚
)(*), *
¨g
);

109 
	`ThªadSèπed
(
Thªad
 *);

110 
	`ThªadJoö
(
Thªad
 *);

111 
	`ThªadExô
();

	@libmqtt/MQTTPacket.c

18 
	~"SèckTø˚.h
"

19 
	~"MQTTPackë.h
"

21 
	~<°rög.h
>

29 
	$MQTTPackë_ícode
(* 
buf
, 
Àngth
)

31 
rc
 = 0;

33 
FUNC_ENTRY
;

36 
d
 = 
Àngth
 % 128;

37 
Àngth
 /= 128;

39 i‡(
Àngth
 > 0)

40 
d
 |= 0x80;

41 
buf
[
rc
++] = 
d
;

42 } 
Àngth
 > 0);

43 
	`FUNC_EXIT_RC
(
rc
);

44  
rc
;

45 
	}
}

54 
	$MQTTPackë_decode
((*
gëch¨‚
)(*, ), * 
vÆue
)

56 
c
;

57 
mu…ùlõr
 = 1;

58 
Àn
 = 0;

59 
	#MAX_NO_OF_REMAINING_LENGTH_BYTES
 4

	)

61 
FUNC_ENTRY
;

62 *
vÆue
 = 0;

65 
rc
 = 
MQTTPACKET_READ_ERROR
;

67 i‡(++
Àn
 > 
MAX_NO_OF_REMAINING_LENGTH_BYTES
)

69 
rc
 = 
MQTTPACKET_READ_ERROR
;

70 
exô
;

72 
rc
 = (*
gëch¨‚
)(&
c
, 1);

73 i‡(
rc
 != 1)

74 
exô
;

75 *
vÆue
 +(
c
 & 127Ë* 
mu…ùlõr
;

76 
mu…ùlõr
 *= 128;

77 } (
c
 & 128) != 0);

78 
exô
:

79 
	`FUNC_EXIT_RC
(
Àn
);

80  
Àn
;

81 
	}
}

84 
	$MQTTPackë_Àn
(
ªm_Àn
)

86 
ªm_Àn
 += 1;

89 i‡(
ªm_Àn
 < 128)

90 
ªm_Àn
 += 1;

91 i‡(
ªm_Àn
 < 16384)

92 
ªm_Àn
 += 2;

93 i‡(
ªm_Àn
 < 2097151)

94 
ªm_Àn
 += 3;

96 
ªm_Àn
 += 4;

97  
ªm_Àn
;

98 
	}
}

101 * 
	gbuÂå
;

103 
	$bufch¨
(* 
c
, 
cou¡
)

105 
i
;

107 
i
 = 0; i < 
cou¡
; ++i)

108 *
c
 = *
buÂå
++;

109  
cou¡
;

110 
	}
}

113 
	$MQTTPackë_decodeBuf
(* 
buf
, * 
vÆue
)

115 
buÂå
 = 
buf
;

116  
	`MQTTPackë_decode
(
bufch¨
, 
vÆue
);

117 
	}
}

125 
	$ªadI¡
(** 
µå
)

127 * 
±r
 = *
µå
;

128 
Àn
 = 256*(*
±r
) + (*(ptr+1));

129 *
µå
 += 2;

130  
Àn
;

131 
	}
}

139 
	$ªadCh¨
(** 
µå
)

141 
c
 = **
µå
;

142 (*
µå
)++;

143  
c
;

144 
	}
}

152 
	$wrôeCh¨
(** 
µå
, 
c
)

154 **
µå
 = 
c
;

155 (*
µå
)++;

156 
	}
}

164 
	$wrôeI¡
(** 
µå
, 
™I¡
)

166 **
µå
 = ()(
™I¡
 / 256);

167 (*
µå
)++;

168 **
µå
 = ()(
™I¡
 % 256);

169 (*
µå
)++;

170 
	}
}

178 
	$wrôeCSåög
(** 
µå
, c⁄° * 
°rög
)

180 
Àn
 = 
	`°æí
(
°rög
);

181 
	`wrôeI¡
(
µå
, 
Àn
);

182 
	`mem˝y
(*
µå
, 
°rög
, 
Àn
);

183 *
µå
 +
Àn
;

184 
	}
}

187 
	$gëLíSåögLí
(* 
±r
)

189 
Àn
 = 256*(()(*
±r
)) + ()(*(ptr+1));

190  
Àn
;

191 
	}
}

194 
	$wrôeMQTTSåög
(** 
µå
, 
MQTTSåög
 
mqâ°rög
)

196 i‡(
mqâ°rög
.
Àn°rög
.
Àn
 > 0)

198 
	`wrôeI¡
(
µå
, 
mqâ°rög
.
Àn°rög
.
Àn
);

199 
	`mem˝y
(*
µå
, 
mqâ°rög
.
Àn°rög
.
d©a
, mqâ°rög.Àn°rög.
Àn
);

200 *
µå
 +
mqâ°rög
.
Àn°rög
.
Àn
;

202 i‡(
mqâ°rög
.
c°rög
)

203 
	`wrôeCSåög
(
µå
, 
mqâ°rög
.
c°rög
);

205 
	`wrôeI¡
(
µå
, 0);

206 
	}
}

215 
	$ªadMQTTLíSåög
(
MQTTSåög
* 
mqâ°rög
, ** 
µå
, * 
ídd©a
)

217 
rc
 = 0;

219 
FUNC_ENTRY
;

221 i‡(
ídd©a
 - (*
µå
) > 1)

223 
mqâ°rög
->
Àn°rög
.
Àn
 = 
	`ªadI¡
(
µå
);

224 i‡(&(*
µå
)[
mqâ°rög
->
Àn°rög
.
Àn
] <
ídd©a
)

226 
mqâ°rög
->
Àn°rög
.
d©a
 = (*)*
µå
;

227 *
µå
 +
mqâ°rög
->
Àn°rög
.
Àn
;

228 
rc
 = 1;

231 
mqâ°rög
->
c°rög
 = 
NULL
;

232 
	`FUNC_EXIT_RC
(
rc
);

233  
rc
;

234 
	}
}

242 
	$MQTT°æí
(
MQTTSåög
 
mqâ°rög
)

244 
rc
 = 0;

246 i‡(
mqâ°rög
.
c°rög
)

247 
rc
 = 
	`°æí
(
mqâ°rög
.
c°rög
);

249 
rc
 = 
mqâ°rög
.
Àn°rög
.
Àn
;

250  
rc
;

251 
	}
}

260 
	$MQTTPackë_equÆs
(
MQTTSåög
* 
a
, * 
b±r
)

262 
Æí
 = 0,

263 
bÀn
 = 0;

264 *
≠å
;

266 i‡(
a
->
c°rög
)

268 
≠å
 = 
a
->
c°rög
;

269 
Æí
 = 
	`°æí
(
a
->
c°rög
);

273 
≠å
 = 
a
->
Àn°rög
.
d©a
;

274 
Æí
 = 
a
->
Àn°rög
.
Àn
;

276 
bÀn
 = 
	`°æí
(
b±r
);

278  (
Æí
 =
bÀn
Ë&& (
	`°∫cmp
(
≠å
, 
b±r
,álen) == 0);

279 
	}
}

290 
	$MQTTPackë_ªad
(* 
buf
, 
buÊí
, (*
gë‚
)(*, ))

292 
rc
 = -1;

293 
MQTTHódî
 
hódî
 = {0};

294 
Àn
 = 0;

295 
ªm_Àn
 = 0;

298 i‡((*
gë‚
)(
buf
, 1) != 1)

299 
exô
;

301 
Àn
 = 1;

303 
	`MQTTPackë_decode
(
gë‚
, &
ªm_Àn
);

304 
Àn
 +
	`MQTTPackë_ícode
(
buf
 + 1, 
ªm_Àn
);

307 if((
ªm_Àn
 + 
Àn
Ë> 
buÊí
)

308 
exô
;

309 i‡((*
gë‚
)(
buf
 + 
Àn
, 
ªm_Àn
) !=Ñem_len)

310 
exô
;

312 
hódî
.
byã
 = 
buf
[0];

313 
rc
 = 
hódî
.
bôs
.
ty≥
;

314 
exô
:

315  
rc
;

316 
	}
}

324 
	$MQTTPackë_decodíb
(
MQTTTøn•‹t
 *
åp
)

326 
c
;

327 
rc
 = 
MQTTPACKET_READ_ERROR
;

329 
FUNC_ENTRY
;

330 if(
åp
->
Àn
 == 0){

331 
åp
->
mu…ùlõr
 = 1;

332 
åp
->
ªm_Àn
 = 0;

335 
‰c
;

336 i‡(++(
åp
->
Àn
Ë> 
MAX_NO_OF_REMAINING_LENGTH_BYTES
)

337 
exô
;

338 i‡((
‰c
=(*
åp
->
gë‚
)—Ω->
sck
, &
c
, 1)) == -1)

339 
exô
;

340 i‡(
‰c
 == 0){

341 
rc
 = 0;

342 
exô
;

344 
åp
->
ªm_Àn
 +(
c
 & 127Ë*ÅΩ->
mu…ùlõr
;

345 
åp
->
mu…ùlõr
 *= 128;

346 } (
c
 & 128) != 0);

347 
rc
 = 
åp
->
Àn
;

348 
exô
:

349 
	`FUNC_EXIT_RC
(
rc
);

350  
rc
;

351 
	}
}

361 
	$MQTTPackë_ªadnb
(* 
buf
, 
buÊí
, 
MQTTTøn•‹t
 *
åp
)

363 
rc
 = -1, 
‰c
;

364 
MQTTHódî
 
hódî
 = {0};

366 
åp
->
°©e
){

368 
åp
->
°©e
 = 0;

372 i‡((
‰c
=(*
åp
->
gë‚
)—Ω->
sck
, 
buf
, 1)) == -1)

373 
exô
;

374 i‡(
‰c
 == 0)

376 
åp
->
Àn
 = 0;

377 ++
åp
->
°©e
;

381 if((
‰c
=
	`MQTTPackë_decodíb
(
åp
)Ë=
MQTTPACKET_READ_ERROR
)

382 
exô
;

383 if(
‰c
 == 0)

385 
åp
->
Àn
 = 1 + 
	`MQTTPackë_ícode
(
buf
 + 1,ÅΩ->
ªm_Àn
);

386 if((
åp
->
ªm_Àn
 +ÅΩ->
Àn
Ë> 
buÊí
)

387 
exô
;

388 ++
åp
->
°©e
;

392 i‡((
‰c
=(*
åp
->
gë‚
)—Ω->
sck
, 
buf
 +ÅΩ->
Àn
,ÅΩ->
ªm_Àn
)) == -1)

393 
exô
;

394 i‡(
‰c
 == 0)

396 
åp
->
ªm_Àn
 -
‰c
;

397 
åp
->
Àn
 +
‰c
;

398 if(
åp
->
ªm_Àn
)

401 
hódî
.
byã
 = 
buf
[0];

402 
rc
 = 
hódî
.
bôs
.
ty≥
;

406 
exô
:

407 
åp
->
°©e
 = 0;

408  
rc
;

409 
	}
}

	@libmqtt/MQTTPacket.h

18 #i‚de‡
MQTTPACKET_H_


19 
	#MQTTPACKET_H_


	)

21 #i‡
deföed
(
__˝lu•lus
)

25 
	eîr‹s


27 
MQTTPACKET_BUFFER_TOO_SHORT
 = -2,

28 
MQTTPACKET_READ_ERROR
 = -1,

29 
MQTTPACKET_READ_COMPLETE


32 
	emsgTy≥s


34 
CONNECT
 = 1, 
CONNACK
, 
PUBLISH
, 
PUBACK
, 
PUBREC
, 
PUBREL
,

35 
PUBCOMP
, 
SUBSCRIBE
, 
SUBACK
, 
UNSUBSCRIBE
, 
UNSUBACK
,

36 
PINGREQ
, 
PINGRESP
, 
DISCONNECT


44 
byã
;

45 #i‡
deföed
(
REVERSED
)

48 
ty≥
 : 4;

49 
dup
 : 1;

50 
qos
 : 2;

51 
ªèö
 : 1;

52 } 
bôs
;

56 
ªèö
 : 1;

57 
qos
 : 2;

58 
dup
 : 1;

59 
ty≥
 : 4;

60 } 
bôs
;

62 } 
	tMQTTHódî
;

66 
Àn
;

67 * 
d©a
;

68 } 
	tMQTTLíSåög
;

72 * 
c°rög
;

73 
MQTTLíSåög
 
Àn°rög
;

74 } 
	tMQTTSåög
;

76 
	#MQTTSåög_öôülizî
 {
NULL
, {0, NULL}}

	)

78 
MQTT°æí
(
MQTTSåög
 
mqâ°rög
);

80 
	~"MQTTC⁄√˘.h
"

81 
	~"MQTTPublish.h
"

82 
	~"MQTTSubs¸ibe.h
"

83 
	~"MQTTUnsubs¸ibe.h
"

84 
	~"MQTTF‹m©.h
"

86 
MQTTSîülize_ack
(* 
buf
, 
buÊí
, 
ty≥
, 
dup
, 
∑ckëid
);

87 
MQTTDe£rülize_ack
(* 
∑ckëty≥
, * 
dup
, * 
∑ckëid
, * 
buf
, 
buÊí
);

89 
MQTTPackë_Àn
(
ªm_Àn
);

90 
MQTTPackë_equÆs
(
MQTTSåög
* 
a
, * 
b
);

92 
MQTTPackë_ícode
(* 
buf
, 
Àngth
);

93 
MQTTPackë_decode
((*
gëch¨‚
)(*, ), * 
vÆue
);

94 
MQTTPackë_decodeBuf
(* 
buf
, * 
vÆue
);

96 
ªadI¡
(** 
µå
);

97 
ªadCh¨
(** 
µå
);

98 
wrôeCh¨
(** 
µå
, 
c
);

99 
wrôeI¡
(** 
µå
, 
™I¡
);

100 
ªadMQTTLíSåög
(
MQTTSåög
* 
mqâ°rög
, ** 
µå
, * 
ídd©a
);

101 
wrôeCSåög
(** 
µå
, c⁄° * 
°rög
);

102 
wrôeMQTTSåög
(** 
µå
, 
MQTTSåög
 
mqâ°rög
);

104 
MQTTPackë_ªad
(* 
buf
, 
buÊí
, (*
gë‚
)(*, ));

107 (*
gë‚
)(*, *, );

108 *
sck
;

109 
mu…ùlõr
;

110 
ªm_Àn
;

111 
Àn
;

112 
°©e
;

113 }
	tMQTTTøn•‹t
;

115 
MQTTPackë_ªadnb
(* 
buf
, 
buÊí
, 
MQTTTøn•‹t
 *
åp
);

117 #ifde‡
__˝lu•lus


	@libmqtt/MQTTPublish.h

18 #i‚de‡
MQTTPUBLISH_H_


19 
	#MQTTPUBLISH_H_


	)

21 #i‡!
deföed
(
DLLImp‹t
)

22 
	#DLLImp‹t


	)

24 #i‡!
deföed
(
DLLExp‹t
)

25 
	#DLLExp‹t


	)

28 
DLLExp‹t
 
MQTTSîülize_publish
(* 
buf
, 
buÊí
, 
dup
, 
qos
, 
ªèöed
, 
∑ckëid
,

29 
MQTTSåög
 
t›icName
, * 
∑ylﬂd
, 
∑ylﬂdÀn
);

31 
DLLExp‹t
 
MQTTDe£rülize_publish
(* 
dup
, * 
qos
, * 
ªèöed
, * 
∑ckëid
, 
MQTTSåög
* 
t›icName
,

32 ** 
∑ylﬂd
, * 
∑ylﬂdÀn
, * 
buf
, 
Àn
);

34 
DLLExp‹t
 
MQTTSîülize_puback
(* 
buf
, 
buÊí
, 
∑ckëid
);

35 
DLLExp‹t
 
MQTTSîülize_pubªl
(* 
buf
, 
buÊí
, 
dup
, 
∑ckëid
);

36 
DLLExp‹t
 
MQTTSîülize_pubcomp
(* 
buf
, 
buÊí
, 
∑ckëid
);

	@libmqtt/MQTTSerializePublish.c

18 
	~"MQTTPackë.h
"

19 
	~"SèckTø˚.h
"

21 
	~<°rög.h
>

31 
	$MQTTSîülize_publishLígth
(
qos
, 
MQTTSåög
 
t›icName
, 
∑ylﬂdÀn
)

33 
Àn
 = 0;

35 
Àn
 +2 + 
	`MQTT°æí
(
t›icName
Ë+ 
∑ylﬂdÀn
;

36 i‡(
qos
 > 0)

37 
Àn
 += 2;

38  
Àn
;

39 
	}
}

55 
	$MQTTSîülize_publish
(* 
buf
, 
buÊí
, 
dup
, 
qos
, 
ªèöed
, 
∑ckëid
,

56 
MQTTSåög
 
t›icName
, * 
∑ylﬂd
, 
∑ylﬂdÀn
)

58 *
±r
 = 
buf
;

59 
MQTTHódî
 
hódî
 = {0};

60 
ªm_Àn
 = 0;

61 
rc
 = 0;

63 
FUNC_ENTRY
;

64 i‡(
	`MQTTPackë_Àn
(
ªm_Àn
 = 
	`MQTTSîülize_publishLígth
(
qos
, 
t›icName
, 
∑ylﬂdÀn
)Ë> 
buÊí
)

66 
rc
 = 
MQTTPACKET_BUFFER_TOO_SHORT
;

67 
exô
;

70 
hódî
.
bôs
.
ty≥
 = 
PUBLISH
;

71 
hódî
.
bôs
.
dup
 = dup;

72 
hódî
.
bôs
.
qos
 = qos;

73 
hódî
.
bôs
.
ªèö
 = 
ªèöed
;

74 
	`wrôeCh¨
(&
±r
, 
hódî
.
byã
);

76 
±r
 +
	`MQTTPackë_ícode
’å, 
ªm_Àn
); ;

78 
	`wrôeMQTTSåög
(&
±r
, 
t›icName
);

80 i‡(
qos
 > 0)

81 
	`wrôeI¡
(&
±r
, 
∑ckëid
);

83 
	`mem˝y
(
±r
, 
∑ylﬂd
, 
∑ylﬂdÀn
);

84 
±r
 +
∑ylﬂdÀn
;

86 
rc
 = 
±r
 - 
buf
;

88 
exô
:

89 
	`FUNC_EXIT_RC
(
rc
);

90  
rc
;

91 
	}
}

104 
	$MQTTSîülize_ack
(* 
buf
, 
buÊí
, 
∑ckëty≥
, 
dup
, 
∑ckëid
)

106 
MQTTHódî
 
hódî
 = {0};

107 
rc
 = 0;

108 *
±r
 = 
buf
;

110 
FUNC_ENTRY
;

111 i‡(
buÊí
 < 4)

113 
rc
 = 
MQTTPACKET_BUFFER_TOO_SHORT
;

114 
exô
;

116 
hódî
.
bôs
.
ty≥
 = 
∑ckëty≥
;

117 
hódî
.
bôs
.
dup
 = dup;

118 
hódî
.
bôs
.
qos
 = (
∑ckëty≥
 =
PUBREL
) ? 1 : 0;

119 
	`wrôeCh¨
(&
±r
, 
hódî
.
byã
);

121 
±r
 +
	`MQTTPackë_ícode
(ptr, 2);

122 
	`wrôeI¡
(&
±r
, 
∑ckëid
);

123 
rc
 = 
±r
 - 
buf
;

124 
exô
:

125 
	`FUNC_EXIT_RC
(
rc
);

126  
rc
;

127 
	}
}

137 
	$MQTTSîülize_puback
(* 
buf
, 
buÊí
, 
∑ckëid
)

139  
	`MQTTSîülize_ack
(
buf
, 
buÊí
, 
PUBACK
, 0, 
∑ckëid
);

140 
	}
}

151 
	$MQTTSîülize_pubªl
(* 
buf
, 
buÊí
, 
dup
, 
∑ckëid
)

153  
	`MQTTSîülize_ack
(
buf
, 
buÊí
, 
PUBREL
, 
dup
, 
∑ckëid
);

154 
	}
}

164 
	$MQTTSîülize_pubcomp
(* 
buf
, 
buÊí
, 
∑ckëid
)

166  
	`MQTTSîülize_ack
(
buf
, 
buÊí
, 
PUBCOMP
, 0, 
∑ckëid
);

167 
	}
}

	@libmqtt/MQTTSubscribe.h

18 #i‚de‡
MQTTSUBSCRIBE_H_


19 
	#MQTTSUBSCRIBE_H_


	)

21 #i‡!
deföed
(
DLLImp‹t
)

22 
	#DLLImp‹t


	)

24 #i‡!
deföed
(
DLLExp‹t
)

25 
	#DLLExp‹t


	)

28 
DLLExp‹t
 
MQTTSîülize_subs¸ibe
(* 
buf
, 
buÊí
, 
dup
, 
∑ckëid
,

29 
cou¡
, 
MQTTSåög
 
t›icFûãrs
[], 
ªque°edQoSs
[]);

31 
DLLExp‹t
 
MQTTDe£rülize_subs¸ibe
(* 
dup
, * 
∑ckëid
,

32 
maxcou¡
, * 
cou¡
, 
MQTTSåög
 
t›icFûãrs
[], 
ªque°edQoSs
[], * 
buf
, 
Àn
);

34 
DLLExp‹t
 
MQTTSîülize_suback
(* 
buf
, 
buÊí
, 
∑ckëid
, 
cou¡
, * 
gø¡edQoSs
);

36 
DLLExp‹t
 
MQTTDe£rülize_suback
(* 
∑ckëid
, 
maxcou¡
, * 
cou¡
, 
gø¡edQoSs
[], * 
buf
, 
Àn
);

	@libmqtt/MQTTSubscribeClient.c

17 
	~"MQTTPackë.h
"

18 
	~"SèckTø˚.h
"

20 
	~<°rög.h
>

28 
	$MQTTSîülize_subs¸ibeLígth
(
cou¡
, 
MQTTSåög
 
t›icFûãrs
[])

30 
i
;

31 
Àn
 = 2;

33 
i
 = 0; i < 
cou¡
; ++i)

34 
Àn
 +2 + 
	`MQTT°æí
(
t›icFûãrs
[
i
]) + 1;

35  
Àn
;

36 
	}
}

50 
	$MQTTSîülize_subs¸ibe
(* 
buf
, 
buÊí
, 
dup
, 
∑ckëid
, 
cou¡
,

51 
MQTTSåög
 
t›icFûãrs
[], 
ªque°edQoSs
[])

53 *
±r
 = 
buf
;

54 
MQTTHódî
 
hódî
 = {0};

55 
ªm_Àn
 = 0;

56 
rc
 = 0;

57 
i
 = 0;

59 
FUNC_ENTRY
;

60 i‡(
	`MQTTPackë_Àn
(
ªm_Àn
 = 
	`MQTTSîülize_subs¸ibeLígth
(
cou¡
, 
t›icFûãrs
)Ë> 
buÊí
)

62 
rc
 = 
MQTTPACKET_BUFFER_TOO_SHORT
;

63 
exô
;

66 
hódî
.
byã
 = 0;

67 
hódî
.
bôs
.
ty≥
 = 
SUBSCRIBE
;

68 
hódî
.
bôs
.
dup
 = dup;

69 
hódî
.
bôs
.
qos
 = 1;

70 
	`wrôeCh¨
(&
±r
, 
hódî
.
byã
);

72 
±r
 +
	`MQTTPackë_ícode
’å, 
ªm_Àn
); ;

74 
	`wrôeI¡
(&
±r
, 
∑ckëid
);

76 
i
 = 0; i < 
cou¡
; ++i)

78 
	`wrôeMQTTSåög
(&
±r
, 
t›icFûãrs
[
i
]);

79 
	`wrôeCh¨
(&
±r
, 
ªque°edQoSs
[
i
]);

82 
rc
 = 
±r
 - 
buf
;

83 
exô
:

84 
	`FUNC_EXIT_RC
(
rc
);

85  
rc
;

86 
	}
}

100 
	$MQTTDe£rülize_suback
(* 
∑ckëid
, 
maxcou¡
, * 
cou¡
, 
gø¡edQoSs
[], * 
buf
, 
buÊí
)

102 
MQTTHódî
 
hódî
 = {0};

103 * 
curd©a
 = 
buf
;

104 * 
ídd©a
 = 
NULL
;

105 
rc
 = 0;

106 
myÀn
;

108 
FUNC_ENTRY
;

109 
hódî
.
byã
 = 
	`ªadCh¨
(&
curd©a
);

110 i‡(
hódî
.
bôs
.
ty≥
 !
SUBACK
)

111 
exô
;

113 
curd©a
 +(
rc
 = 
	`MQTTPackë_decodeBuf
(curd©a, &
myÀn
));

114 
ídd©a
 = 
curd©a
 + 
myÀn
;

115 i‡(
ídd©a
 - 
curd©a
 < 2)

116 
exô
;

118 *
∑ckëid
 = 
	`ªadI¡
(&
curd©a
);

120 *
cou¡
 = 0;

121 
curd©a
 < 
ídd©a
)

123 i‡(*
cou¡
 > 
maxcou¡
)

125 
rc
 = -1;

126 
exô
;

128 
gø¡edQoSs
[(*
cou¡
)++] = 
	`ªadCh¨
(&
curd©a
);

131 
rc
 = 1;

132 
exô
:

133 
	`FUNC_EXIT_RC
(
rc
);

134  
rc
;

135 
	}
}

	@libmqtt/MQTTSubscribeServer.c

17 
	~"MQTTPackë.h
"

18 
	~"SèckTø˚.h
"

20 
	~<°rög.h
>

35 
	$MQTTDe£rülize_subs¸ibe
(* 
dup
, * 
∑ckëid
, 
maxcou¡
, * 
cou¡
, 
MQTTSåög
 
t›icFûãrs
[],

36 
ªque°edQoSs
[], * 
buf
, 
buÊí
)

38 
MQTTHódî
 
hódî
 = {0};

39 * 
curd©a
 = 
buf
;

40 * 
ídd©a
 = 
NULL
;

41 
rc
 = -1;

42 
myÀn
 = 0;

44 
FUNC_ENTRY
;

45 
hódî
.
byã
 = 
	`ªadCh¨
(&
curd©a
);

46 i‡(
hódî
.
bôs
.
ty≥
 !
SUBSCRIBE
)

47 
exô
;

48 *
dup
 = 
hódî
.
bôs
.dup;

50 
curd©a
 +(
rc
 = 
	`MQTTPackë_decodeBuf
(curd©a, &
myÀn
));

51 
ídd©a
 = 
curd©a
 + 
myÀn
;

53 *
∑ckëid
 = 
	`ªadI¡
(&
curd©a
);

55 *
cou¡
 = 0;

56 
curd©a
 < 
ídd©a
)

58 i‡(!
	`ªadMQTTLíSåög
(&
t›icFûãrs
[*
cou¡
], &
curd©a
, 
ídd©a
))

59 
exô
;

60 i‡(
curd©a
 >
ídd©a
)

61 
exô
;

62 
ªque°edQoSs
[*
cou¡
] = 
	`ªadCh¨
(&
curd©a
);

63 (*
cou¡
)++;

66 
rc
 = 1;

67 
exô
:

68 
	`FUNC_EXIT_RC
(
rc
);

69  
rc
;

70 
	}
}

82 
	$MQTTSîülize_suback
(* 
buf
, 
buÊí
, 
∑ckëid
, 
cou¡
, * 
gø¡edQoSs
)

84 
MQTTHódî
 
hódî
 = {0};

85 
rc
 = -1;

86 *
±r
 = 
buf
;

87 
i
;

89 
FUNC_ENTRY
;

90 i‡(
buÊí
 < 2 + 
cou¡
)

92 
rc
 = 
MQTTPACKET_BUFFER_TOO_SHORT
;

93 
exô
;

95 
hódî
.
byã
 = 0;

96 
hódî
.
bôs
.
ty≥
 = 
SUBACK
;

97 
	`wrôeCh¨
(&
±r
, 
hódî
.
byã
);

99 
±r
 +
	`MQTTPackë_ícode
’å, 2 + 
cou¡
);

101 
	`wrôeI¡
(&
±r
, 
∑ckëid
);

103 
i
 = 0; i < 
cou¡
; ++i)

104 
	`wrôeCh¨
(&
±r
, 
gø¡edQoSs
[
i
]);

106 
rc
 = 
±r
 - 
buf
;

107 
exô
:

108 
	`FUNC_EXIT_RC
(
rc
);

109  
rc
;

110 
	}
}

	@libmqtt/MQTTUnsubscribe.h

18 #i‚de‡
MQTTUNSUBSCRIBE_H_


19 
	#MQTTUNSUBSCRIBE_H_


	)

21 #i‡!
deföed
(
DLLImp‹t
)

22 
	#DLLImp‹t


	)

24 #i‡!
deföed
(
DLLExp‹t
)

25 
	#DLLExp‹t


	)

28 
DLLExp‹t
 
MQTTSîülize_unsubs¸ibe
(* 
buf
, 
buÊí
, 
dup
, 
∑ckëid
,

29 
cou¡
, 
MQTTSåög
 
t›icFûãrs
[]);

31 
DLLExp‹t
 
MQTTDe£rülize_unsubs¸ibe
(* 
dup
, * 
∑ckëid
, 
max_cou¡
, * 
cou¡
, 
MQTTSåög
 
t›icFûãrs
[],

32 * 
buf
, 
Àn
);

34 
DLLExp‹t
 
MQTTSîülize_unsuback
(* 
buf
, 
buÊí
, 
∑ckëid
);

36 
DLLExp‹t
 
MQTTDe£rülize_unsuback
(* 
∑ckëid
, * 
buf
, 
Àn
);

	@libmqtt/MQTTUnsubscribeClient.c

17 
	~"MQTTPackë.h
"

18 
	~"SèckTø˚.h
"

20 
	~<°rög.h
>

28 
	$MQTTSîülize_unsubs¸ibeLígth
(
cou¡
, 
MQTTSåög
 
t›icFûãrs
[])

30 
i
;

31 
Àn
 = 2;

33 
i
 = 0; i < 
cou¡
; ++i)

34 
Àn
 +2 + 
	`MQTT°æí
(
t›icFûãrs
[
i
]);

35  
Àn
;

36 
	}
}

49 
	$MQTTSîülize_unsubs¸ibe
(* 
buf
, 
buÊí
, 
dup
, 
∑ckëid
,

50 
cou¡
, 
MQTTSåög
 
t›icFûãrs
[])

52 *
±r
 = 
buf
;

53 
MQTTHódî
 
hódî
 = {0};

54 
ªm_Àn
 = 0;

55 
rc
 = -1;

56 
i
 = 0;

58 
FUNC_ENTRY
;

59 i‡(
	`MQTTPackë_Àn
(
ªm_Àn
 = 
	`MQTTSîülize_unsubs¸ibeLígth
(
cou¡
, 
t›icFûãrs
)Ë> 
buÊí
)

61 
rc
 = 
MQTTPACKET_BUFFER_TOO_SHORT
;

62 
exô
;

65 
hódî
.
byã
 = 0;

66 
hódî
.
bôs
.
ty≥
 = 
UNSUBSCRIBE
;

67 
hódî
.
bôs
.
dup
 = dup;

68 
hódî
.
bôs
.
qos
 = 1;

69 
	`wrôeCh¨
(&
±r
, 
hódî
.
byã
);

71 
±r
 +
	`MQTTPackë_ícode
’å, 
ªm_Àn
); ;

73 
	`wrôeI¡
(&
±r
, 
∑ckëid
);

75 
i
 = 0; i < 
cou¡
; ++i)

76 
	`wrôeMQTTSåög
(&
±r
, 
t›icFûãrs
[
i
]);

78 
rc
 = 
±r
 - 
buf
;

79 
exô
:

80 
	`FUNC_EXIT_RC
(
rc
);

81  
rc
;

82 
	}
}

92 
	$MQTTDe£rülize_unsuback
(* 
∑ckëid
, * 
buf
, 
buÊí
)

94 
ty≥
 = 0;

95 
dup
 = 0;

96 
rc
 = 0;

98 
FUNC_ENTRY
;

99 
rc
 = 
	`MQTTDe£rülize_ack
(&
ty≥
, &
dup
, 
∑ckëid
, 
buf
, 
buÊí
);

100 i‡(
ty≥
 =
UNSUBACK
)

101 
rc
 = 1;

102 
	`FUNC_EXIT_RC
(
rc
);

103  
rc
;

104 
	}
}

	@libmqtt/MQTTUnsubscribeServer.c

17 
	~"MQTTPackë.h
"

18 
	~"SèckTø˚.h
"

20 
	~<°rög.h
>

34 
	$MQTTDe£rülize_unsubs¸ibe
(* 
dup
, * 
∑ckëid
, 
maxcou¡
, * 
cou¡
, 
MQTTSåög
 
t›icFûãrs
[],

35 * 
buf
, 
Àn
)

37 
MQTTHódî
 
hódî
 = {0};

38 * 
curd©a
 = 
buf
;

39 * 
ídd©a
 = 
NULL
;

40 
rc
 = 0;

41 
myÀn
 = 0;

43 
FUNC_ENTRY
;

44 
hódî
.
byã
 = 
	`ªadCh¨
(&
curd©a
);

45 i‡(
hódî
.
bôs
.
ty≥
 !
UNSUBSCRIBE
)

46 
exô
;

47 *
dup
 = 
hódî
.
bôs
.dup;

49 
curd©a
 +(
rc
 = 
	`MQTTPackë_decodeBuf
(curd©a, &
myÀn
));

50 
ídd©a
 = 
curd©a
 + 
myÀn
;

52 *
∑ckëid
 = 
	`ªadI¡
(&
curd©a
);

54 *
cou¡
 = 0;

55 
curd©a
 < 
ídd©a
)

57 i‡(!
	`ªadMQTTLíSåög
(&
t›icFûãrs
[*
cou¡
], &
curd©a
, 
ídd©a
))

58 
exô
;

59 (*
cou¡
)++;

62 
rc
 = 1;

63 
exô
:

64 
	`FUNC_EXIT_RC
(
rc
);

65  
rc
;

66 
	}
}

76 
	$MQTTSîülize_unsuback
(* 
buf
, 
buÊí
, 
∑ckëid
)

78 
MQTTHódî
 
hódî
 = {0};

79 
rc
 = 0;

80 *
±r
 = 
buf
;

82 
FUNC_ENTRY
;

83 i‡(
buÊí
 < 2)

85 
rc
 = 
MQTTPACKET_BUFFER_TOO_SHORT
;

86 
exô
;

88 
hódî
.
byã
 = 0;

89 
hódî
.
bôs
.
ty≥
 = 
UNSUBACK
;

90 
	`wrôeCh¨
(&
±r
, 
hódî
.
byã
);

92 
±r
 +
	`MQTTPackë_ícode
(ptr, 2);

94 
	`wrôeI¡
(&
±r
, 
∑ckëid
);

96 
rc
 = 
±r
 - 
buf
;

97 
exô
:

98 
	`FUNC_EXIT_RC
(
rc
);

99  
rc
;

100 
	}
}

	@libmqtt/StackTrace.h

18 #i‚de‡
STACKTRACE_H_


19 
	#STACKTRACE_H_


	)

21 
	~<°dio.h
>

22 
	#NOSTACKTRACE
 1

	)

24 #i‡
deföed
(
NOSTACKTRACE
)

25 
	#FUNC_ENTRY


	)

26 
	#FUNC_ENTRY_NOLOG


	)

27 
	#FUNC_ENTRY_MED


	)

28 
	#FUNC_ENTRY_MAX


	)

29 
	#FUNC_EXIT


	)

30 
	#FUNC_EXIT_NOLOG


	)

31 
	#FUNC_EXIT_MED


	)

32 
	#FUNC_EXIT_MAX


	)

33 
	#FUNC_EXIT_RC
(
x
)

	)

34 
	#FUNC_EXIT_MED_RC
(
x
)

	)

35 
	#FUNC_EXIT_MAX_RC
(
x
)

	)

39 #i‡
deföed
(
WIN32
)

40 
	#ölöe
 
__ölöe


	)

41 
	#FUNC_ENTRY
 
	`SèckTø˚_íåy
(
__FUNCTION__
, 
__LINE__
, 
TRACE_MINIMUM
)

	)

42 
	#FUNC_ENTRY_NOLOG
 
	`SèckTø˚_íåy
(
__FUNCTION__
, 
__LINE__
, -1)

	)

43 
	#FUNC_ENTRY_MED
 
	`SèckTø˚_íåy
(
__FUNCTION__
, 
__LINE__
, 
TRACE_MEDIUM
)

	)

44 
	#FUNC_ENTRY_MAX
 
	`SèckTø˚_íåy
(
__FUNCTION__
, 
__LINE__
, 
TRACE_MAXIMUM
)

	)

45 
	#FUNC_EXIT
 
	`SèckTø˚_exô
(
__FUNCTION__
, 
__LINE__
, 
NULL
, 
TRACE_MINIMUM
)

	)

46 
	#FUNC_EXIT_NOLOG
 
	`SèckTø˚_exô
(
__FUNCTION__
, 
__LINE__
, -1)

	)

47 
	#FUNC_EXIT_MED
 
	`SèckTø˚_exô
(
__FUNCTION__
, 
__LINE__
, 
NULL
, 
TRACE_MEDIUM
)

	)

48 
	#FUNC_EXIT_MAX
 
	`SèckTø˚_exô
(
__FUNCTION__
, 
__LINE__
, 
NULL
, 
TRACE_MAXIMUM
)

	)

49 
	#FUNC_EXIT_RC
(
x
Ë
	`SèckTø˚_exô
(
__FUNCTION__
, 
__LINE__
, &x, 
TRACE_MINIMUM
)

	)

50 
	#FUNC_EXIT_MED_RC
(
x
Ë
	`SèckTø˚_exô
(
__FUNCTION__
, 
__LINE__
, &x, 
TRACE_MEDIUM
)

	)

51 
	#FUNC_EXIT_MAX_RC
(
x
Ë
	`SèckTø˚_exô
(
__FUNCTION__
, 
__LINE__
, &x, 
TRACE_MAXIMUM
)

	)

53 
	#FUNC_ENTRY
 
	`SèckTø˚_íåy
(
__func__
, 
__LINE__
, 
TRACE_MINIMUM
)

	)

54 
	#FUNC_ENTRY_NOLOG
 
	`SèckTø˚_íåy
(
__func__
, 
__LINE__
, -1)

	)

55 
	#FUNC_ENTRY_MED
 
	`SèckTø˚_íåy
(
__func__
, 
__LINE__
, 
TRACE_MEDIUM
)

	)

56 
	#FUNC_ENTRY_MAX
 
	`SèckTø˚_íåy
(
__func__
, 
__LINE__
, 
TRACE_MAXIMUM
)

	)

57 
	#FUNC_EXIT
 
	`SèckTø˚_exô
(
__func__
, 
__LINE__
, 
NULL
, 
TRACE_MINIMUM
)

	)

58 
	#FUNC_EXIT_NOLOG
 
	`SèckTø˚_exô
(
__func__
, 
__LINE__
, 
NULL
, -1)

	)

59 
	#FUNC_EXIT_MED
 
	`SèckTø˚_exô
(
__func__
, 
__LINE__
, 
NULL
, 
TRACE_MEDIUM
)

	)

60 
	#FUNC_EXIT_MAX
 
	`SèckTø˚_exô
(
__func__
, 
__LINE__
, 
NULL
, 
TRACE_MAXIMUM
)

	)

61 
	#FUNC_EXIT_RC
(
x
Ë
	`SèckTø˚_exô
(
__func__
, 
__LINE__
, &x, 
TRACE_MINIMUM
)

	)

62 
	#FUNC_EXIT_MED_RC
(
x
Ë
	`SèckTø˚_exô
(
__func__
, 
__LINE__
, &x, 
TRACE_MEDIUM
)

	)

63 
	#FUNC_EXIT_MAX_RC
(
x
Ë
	`SèckTø˚_exô
(
__func__
, 
__LINE__
, &x, 
TRACE_MAXIMUM
)

	)

65 
SèckTø˚_íåy
(c⁄° * 
«me
, 
löe
, 
åa˚
);

66 
SèckTø˚_exô
(c⁄° * 
«me
, 
löe
, * 
ªtu∫_vÆue
, 
åa˚
);

68 
SèckTø˚_¥ötSèck
(
FILE
* 
de°
);

69 * 
SèckTø˚_gë
();

	@libmqtt/test/stdoutsub.c

44 
	~<°dio.h
>

45 
	~"MQTTClõ¡.h
"

47 
	~<°dio.h
>

48 
	~<sig«l.h
>

49 
	~<mem‹y.h
>

51 
	~<sys/time.h
>

53 vﬁ©ûê
	gtoSt›
 = 0;

55 
	$ußge
()

57 
	`¥ötf
("MQTT stdout subscriber\n");

58 
	`¥ötf
("Usage: stdoutsubÅopicname <options>, where optionsáre:\n");

59 
	`¥ötf
(" --host <hostname> (default isÜocalhost)\n");

60 
	`¥ötf
(" --port <port> (default is 1883)\n");

61 
	`¥ötf
(" --qos <qos> (default is 2)\n");

62 
	`¥ötf
(" --delimiter <delim> (default is \\n)\n");

63 
	`¥ötf
(" --clientid <clientid> (default is hostname+timestamp)\n");

64 
	`¥ötf
(" --usernameÇone\n");

65 
	`¥ötf
(" --passwordÇone\n");

66 
	`¥ötf
(" --showtopics <on or off> (default is on ifÅheÅopic hasá wildcard,Élse off)\n");

67 
	`exô
(-1);

68 
	}
}

70 
	$cföish
(
sig
)

72 
	`sig«l
(
SIGINT
, 
NULL
);

73 
toSt›
 = 1;

74 
	}
}

76 
	s›ts_°ru˘


78 *
	m˛õ¡id
;

79 
	mnodñimôî
;

80 *
	mdñimôî
;

81 
QoS
 
	mqos
;

82 *
	mu£∫ame
;

83 *
	m∑ssw‹d
;

84 *
	mho°
;

85 
	mp‹t
;

86 
	mshowt›ics
;

87 } 
	g›ts
 =

89 (*)"°dout-subs¸ibî", 0, (*)"\n", 
QOS2
, 
NULL
, NULL, (*)"localhost", 1883, 0};

91 
	$gë›ts
(
¨gc
, **
¨gv
)

93 
cou¡
 = 2;

95 
cou¡
 < 
¨gc
)

97 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--qos") == 0)

99 i‡(++
cou¡
 < 
¨gc
)

101 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "0") == 0)

102 
›ts
.
qos
 = 
QOS0
;

103 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "1") == 0)

104 
›ts
.
qos
 = 
QOS1
;

105 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "2") == 0)

106 
›ts
.
qos
 = 
QOS2
;

108 
	`ußge
();

111 
	`ußge
();

113 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--host") == 0)

115 i‡(++
cou¡
 < 
¨gc
)

116 
›ts
.
ho°
 = 
¨gv
[
cou¡
];

118 
	`ußge
();

120 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--port") == 0)

122 i‡(++
cou¡
 < 
¨gc
)

123 
›ts
.
p‹t
 = 
	`©oi
(
¨gv
[
cou¡
]);

125 
	`ußge
();

127 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--clientid") == 0)

129 i‡(++
cou¡
 < 
¨gc
)

130 
›ts
.
˛õ¡id
 = 
¨gv
[
cou¡
];

132 
	`ußge
();

134 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--username") == 0)

136 i‡(++
cou¡
 < 
¨gc
)

137 
›ts
.
u£∫ame
 = 
¨gv
[
cou¡
];

139 
	`ußge
();

141 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--password") == 0)

143 i‡(++
cou¡
 < 
¨gc
)

144 
›ts
.
∑ssw‹d
 = 
¨gv
[
cou¡
];

146 
	`ußge
();

148 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--delimiter") == 0)

150 i‡(++
cou¡
 < 
¨gc
)

151 
›ts
.
dñimôî
 = 
¨gv
[
cou¡
];

153 
›ts
.
nodñimôî
 = 1;

155 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--showtopics") == 0)

157 i‡(++
cou¡
 < 
¨gc
)

159 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "on") == 0)

160 
›ts
.
showt›ics
 = 1;

161 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "off") == 0)

162 
›ts
.
showt›ics
 = 0;

164 
	`ußge
();

167 
	`ußge
();

169 
cou¡
++;

171 
	}
}

173 
	$mesßgeAºived
(
MesßgeD©a
 *
md
, *
¨g
)

175 
MQTTMesßge
 *
mesßge
 = 
md
->message;

177 i‡(
›ts
.
showt›ics
)

178 
	`¥ötf
("%.*s\t", 
md
->
t›icName
->
Àn°rög
.
Àn
, md->t›icName->Àn°rög.
d©a
);

179 i‡(
›ts
.
nodñimôî
)

180 
	`¥ötf
("%.*s", ()
mesßge
->
∑ylﬂdÀn
, (*)mesßge->
∑ylﬂd
);

182 
	`¥ötf
("%.*s%s", ()
mesßge
->
∑ylﬂdÀn
, (*)mesßge->
∑ylﬂd
, 
›ts
.
dñimôî
);

184 
	}
}

186 
	$maö
(
¨gc
, **
¨gv
)

188 
rc
 = 0;

189 
buf
[100];

190 
ªadbuf
[100];

192 i‡(
¨gc
 < 2)

193 
	`ußge
();

195 *
t›ic
 = 
¨gv
[1];

197 i‡(
	`°rchr
(
t›ic
, '#') || strchr(topic, '+'))

198 
›ts
.
showt›ics
 = 1;

199 i‡(
›ts
.
showt›ics
)

200 
	`¥ötf
("t›i¯i†%s\n", 
t›ic
);

202 
	`gë›ts
(
¨gc
, 
¨gv
);

204 
Nëw‹k
 
n
;

205 
MQTTClõ¡
 
c
;

207 
	`sig«l
(
SIGINT
, 
cföish
);

208 
	`sig«l
(
SIGTERM
, 
cföish
);

210 
	`Nëw‹kInô
(&
n
);

211 
rc
 = 
	`Nëw‹kC⁄√˘
(&
n
, 
›ts
.
ho°
, o±s.
p‹t
);

212 
	`¥ötf
("Nëw‹kC¬ %d\n", 
rc
);

214 
	`MQTTClõ¡Inô
(&
c
, &
n
, 1000, 
buf
, 100, 
ªadbuf
, 100);

216 
MQTTPackë_c⁄√˘D©a
 
d©a
 = 
MQTTPackë_c⁄√˘D©a_öôülizî
;

217 
d©a
.
wûlFœg
 = 0;

218 
d©a
.
MQTTVîsi⁄
 = 3;

219 
d©a
.
˛õ¡ID
.
c°rög
 = 
›ts
.
˛õ¡id
;

220 
d©a
.
u£∫ame
.
c°rög
 = 
›ts
.username;

221 
d©a
.
∑ssw‹d
.
c°rög
 = 
›ts
.password;

223 
d©a
.
kìpAliveI¡îvÆ
 = 10;

224 
d©a
.
˛ón£ssi⁄
 = 1;

225 
	`¥ötf
("C⁄√˘ögÅÿ%†%d\n", 
›ts
.
ho°
, o±s.
p‹t
);

227 
rc
 = 
	`MQTTC⁄√˘
(&
c
, &
d©a
);

228 
	`¥ötf
("C⁄√˘ed %d\n", 
rc
);

230 
	`¥ötf
("Subs¸ibögÅÿ%s\n", 
t›ic
);

231 
rc
 = 
	`MQTTSubs¸ibe
(&
c
, 
t›ic
, 
›ts
.
qos
, 
mesßgeAºived
, 
NULL
);

232 
	`¥ötf
("Subs¸ibed %d\n", 
rc
);

234 !
toSt›
)

236 
	`MQTTYõld
(&
c
, 1000);

239 
	`¥ötf
("Stopping\n");

241 
	`MQTTDisc⁄√˘
(&
c
);

242 
	`Nëw‹kDisc⁄√˘
(&
n
);

245 
	}
}

	@libttn/api.pb-c.c

5 #i‚de‡
PROTOBUF_C__NO_DEPRECATED


6 
	#PROTOBUF_C__NO_DEPRECATED


	)

9 
	~"≠i.pb-c.h
"

10 
	g≠i__≥r˚¡ûes__öô


11 (
Api__Pî˚¡ûes
 *
	gmesßge
)

13 
Api__Pî˚¡ûes
 
	göô_vÆue
 = 
API__PERCENTILES__INIT
;

14 *
	gmesßge
 = 
öô_vÆue
;

16 
size_t
 
	g≠i__≥r˚¡ûes__gë_∑cked_size


17 (c⁄° 
Api__Pî˚¡ûes
 *
	gmesßge
)

19 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
≠i__≥r˚¡ûes__des¸ùt‹
);

20  
¥Ÿobuf_c_mesßge_gë_∑cked_size
 ((c⁄° 
PrŸobufCMesßge
*)(
mesßge
));

22 
size_t
 
	g≠i__≥r˚¡ûes__∑ck


23 (c⁄° 
Api__Pî˚¡ûes
 *
	gmesßge
,

24 
uöt8_t
 *
	gout
)

26 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
≠i__≥r˚¡ûes__des¸ùt‹
);

27  
¥Ÿobuf_c_mesßge_∑ck
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
out
);

29 
size_t
 
	g≠i__≥r˚¡ûes__∑ck_to_buf„r


30 (c⁄° 
Api__Pî˚¡ûes
 *
	gmesßge
,

31 
PrŸobufCBuf„r
 *
	gbuf„r
)

33 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
≠i__≥r˚¡ûes__des¸ùt‹
);

34  
¥Ÿobuf_c_mesßge_∑ck_to_buf„r
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
buf„r
);

36 
Api__Pî˚¡ûes
 *

37 
	g≠i__≥r˚¡ûes__u≈ack


38 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

39 
size_t
 
	gÀn
,

40 c⁄° 
uöt8_t
 *
	gd©a
)

42  (
	gApi__Pî˚¡ûes
 *)

43 
¥Ÿobuf_c_mesßge_u≈ack
 (&
≠i__≥r˚¡ûes__des¸ùt‹
,

44 
Æloˇt‹
, 
Àn
, 
d©a
);

46 
	g≠i__≥r˚¡ûes__‰ì_u≈acked


47 (
Api__Pî˚¡ûes
 *
	gmesßge
,

48 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
)

50 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
≠i__≥r˚¡ûes__des¸ùt‹
);

51 
¥Ÿobuf_c_mesßge_‰ì_u≈acked
 ((
PrŸobufCMesßge
*)
mesßge
, 
Æloˇt‹
);

53 
	g≠i__øãs__öô


54 (
Api__R©es
 *
	gmesßge
)

56 
Api__R©es
 
	göô_vÆue
 = 
API__RATES__INIT
;

57 *
	gmesßge
 = 
öô_vÆue
;

59 
size_t
 
	g≠i__øãs__gë_∑cked_size


60 (c⁄° 
Api__R©es
 *
	gmesßge
)

62 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
≠i__øãs__des¸ùt‹
);

63  
¥Ÿobuf_c_mesßge_gë_∑cked_size
 ((c⁄° 
PrŸobufCMesßge
*)(
mesßge
));

65 
size_t
 
	g≠i__øãs__∑ck


66 (c⁄° 
Api__R©es
 *
	gmesßge
,

67 
uöt8_t
 *
	gout
)

69 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
≠i__øãs__des¸ùt‹
);

70  
¥Ÿobuf_c_mesßge_∑ck
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
out
);

72 
size_t
 
	g≠i__øãs__∑ck_to_buf„r


73 (c⁄° 
Api__R©es
 *
	gmesßge
,

74 
PrŸobufCBuf„r
 *
	gbuf„r
)

76 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
≠i__øãs__des¸ùt‹
);

77  
¥Ÿobuf_c_mesßge_∑ck_to_buf„r
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
buf„r
);

79 
Api__R©es
 *

80 
	g≠i__øãs__u≈ack


81 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

82 
size_t
 
	gÀn
,

83 c⁄° 
uöt8_t
 *
	gd©a
)

85  (
	gApi__R©es
 *)

86 
¥Ÿobuf_c_mesßge_u≈ack
 (&
≠i__øãs__des¸ùt‹
,

87 
Æloˇt‹
, 
Àn
, 
d©a
);

89 
	g≠i__øãs__‰ì_u≈acked


90 (
Api__R©es
 *
	gmesßge
,

91 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
)

93 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
≠i__øãs__des¸ùt‹
);

94 
¥Ÿobuf_c_mesßge_‰ì_u≈acked
 ((
PrŸobufCMesßge
*)
mesßge
, 
Æloˇt‹
);

96 
	g≠i__sy°em_°©s__lﬂd°©s__öô


97 (
Api__Sy°emSèts__Lﬂd°©s
 *
	gmesßge
)

99 
Api__Sy°emSèts__Lﬂd°©s
 
	göô_vÆue
 = 
API__SYSTEM_STATS__LOADSTATS__INIT
;

100 *
	gmesßge
 = 
öô_vÆue
;

102 
	g≠i__sy°em_°©s__˝u°©s__öô


103 (
Api__Sy°emSèts__CPUSèts
 *
	gmesßge
)

105 
Api__Sy°emSèts__CPUSèts
 
	göô_vÆue
 = 
API__SYSTEM_STATS__CPUSTATS__INIT
;

106 *
	gmesßge
 = 
öô_vÆue
;

108 
	g≠i__sy°em_°©s__mem‹y_°©s__öô


109 (
Api__Sy°emSèts__Mem‹ySèts
 *
	gmesßge
)

111 
Api__Sy°emSèts__Mem‹ySèts
 
	göô_vÆue
 = 
API__SYSTEM_STATS__MEMORY_STATS__INIT
;

112 *
	gmesßge
 = 
öô_vÆue
;

114 
	g≠i__sy°em_°©s__öô


115 (
Api__Sy°emSèts
 *
	gmesßge
)

117 
Api__Sy°emSèts
 
	göô_vÆue
 = 
API__SYSTEM_STATS__INIT
;

118 *
	gmesßge
 = 
öô_vÆue
;

120 
size_t
 
	g≠i__sy°em_°©s__gë_∑cked_size


121 (c⁄° 
Api__Sy°emSèts
 *
	gmesßge
)

123 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
≠i__sy°em_°©s__des¸ùt‹
);

124  
¥Ÿobuf_c_mesßge_gë_∑cked_size
 ((c⁄° 
PrŸobufCMesßge
*)(
mesßge
));

126 
size_t
 
	g≠i__sy°em_°©s__∑ck


127 (c⁄° 
Api__Sy°emSèts
 *
	gmesßge
,

128 
uöt8_t
 *
	gout
)

130 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
≠i__sy°em_°©s__des¸ùt‹
);

131  
¥Ÿobuf_c_mesßge_∑ck
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
out
);

133 
size_t
 
	g≠i__sy°em_°©s__∑ck_to_buf„r


134 (c⁄° 
Api__Sy°emSèts
 *
	gmesßge
,

135 
PrŸobufCBuf„r
 *
	gbuf„r
)

137 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
≠i__sy°em_°©s__des¸ùt‹
);

138  
¥Ÿobuf_c_mesßge_∑ck_to_buf„r
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
buf„r
);

140 
Api__Sy°emSèts
 *

141 
	g≠i__sy°em_°©s__u≈ack


142 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

143 
size_t
 
	gÀn
,

144 c⁄° 
uöt8_t
 *
	gd©a
)

146  (
	gApi__Sy°emSèts
 *)

147 
¥Ÿobuf_c_mesßge_u≈ack
 (&
≠i__sy°em_°©s__des¸ùt‹
,

148 
Æloˇt‹
, 
Àn
, 
d©a
);

150 
	g≠i__sy°em_°©s__‰ì_u≈acked


151 (
Api__Sy°emSèts
 *
	gmesßge
,

152 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
)

154 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
≠i__sy°em_°©s__des¸ùt‹
);

155 
¥Ÿobuf_c_mesßge_‰ì_u≈acked
 ((
PrŸobufCMesßge
*)
mesßge
, 
Æloˇt‹
);

157 
	g≠i__comp⁄ít_°©s__˝u°©s__öô


158 (
Api__Comp⁄ítSèts__CPUSèts
 *
	gmesßge
)

160 
Api__Comp⁄ítSèts__CPUSèts
 
	göô_vÆue
 = 
API__COMPONENT_STATS__CPUSTATS__INIT
;

161 *
	gmesßge
 = 
öô_vÆue
;

163 
	g≠i__comp⁄ít_°©s__mem‹y_°©s__öô


164 (
Api__Comp⁄ítSèts__Mem‹ySèts
 *
	gmesßge
)

166 
Api__Comp⁄ítSèts__Mem‹ySèts
 
	göô_vÆue
 = 
API__COMPONENT_STATS__MEMORY_STATS__INIT
;

167 *
	gmesßge
 = 
öô_vÆue
;

169 
	g≠i__comp⁄ít_°©s__öô


170 (
Api__Comp⁄ítSèts
 *
	gmesßge
)

172 
Api__Comp⁄ítSèts
 
	göô_vÆue
 = 
API__COMPONENT_STATS__INIT
;

173 *
	gmesßge
 = 
öô_vÆue
;

175 
size_t
 
	g≠i__comp⁄ít_°©s__gë_∑cked_size


176 (c⁄° 
Api__Comp⁄ítSèts
 *
	gmesßge
)

178 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
≠i__comp⁄ít_°©s__des¸ùt‹
);

179  
¥Ÿobuf_c_mesßge_gë_∑cked_size
 ((c⁄° 
PrŸobufCMesßge
*)(
mesßge
));

181 
size_t
 
	g≠i__comp⁄ít_°©s__∑ck


182 (c⁄° 
Api__Comp⁄ítSèts
 *
	gmesßge
,

183 
uöt8_t
 *
	gout
)

185 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
≠i__comp⁄ít_°©s__des¸ùt‹
);

186  
¥Ÿobuf_c_mesßge_∑ck
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
out
);

188 
size_t
 
	g≠i__comp⁄ít_°©s__∑ck_to_buf„r


189 (c⁄° 
Api__Comp⁄ítSèts
 *
	gmesßge
,

190 
PrŸobufCBuf„r
 *
	gbuf„r
)

192 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
≠i__comp⁄ít_°©s__des¸ùt‹
);

193  
¥Ÿobuf_c_mesßge_∑ck_to_buf„r
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
buf„r
);

195 
Api__Comp⁄ítSèts
 *

196 
	g≠i__comp⁄ít_°©s__u≈ack


197 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

198 
size_t
 
	gÀn
,

199 c⁄° 
uöt8_t
 *
	gd©a
)

201  (
	gApi__Comp⁄ítSèts
 *)

202 
¥Ÿobuf_c_mesßge_u≈ack
 (&
≠i__comp⁄ít_°©s__des¸ùt‹
,

203 
Æloˇt‹
, 
Àn
, 
d©a
);

205 
	g≠i__comp⁄ít_°©s__‰ì_u≈acked


206 (
Api__Comp⁄ítSèts
 *
	gmesßge
,

207 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
)

209 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
≠i__comp⁄ít_°©s__des¸ùt‹
);

210 
¥Ÿobuf_c_mesßge_‰ì_u≈acked
 ((
PrŸobufCMesßge
*)
mesßge
, 
Æloˇt‹
);

212 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	g≠i__≥r˚¡ûes__fõld_des¸ùt‹s
[9] =

217 
PROTOBUF_C_LABEL_OPTIONAL
,

218 
PROTOBUF_C_TYPE_FLOAT
,

219 
off£tof
(
Api__Pî˚¡ûes
, 
has_≥r˚¡ûe1
),

220 
off£tof
(
Api__Pî˚¡ûes
, 
≥r˚¡ûe1
),

221 
NULL
,

222 
NULL
,

224 0,
NULL
,NULL

229 
PROTOBUF_C_LABEL_OPTIONAL
,

230 
PROTOBUF_C_TYPE_FLOAT
,

231 
off£tof
(
Api__Pî˚¡ûes
, 
has_≥r˚¡ûe5
),

232 
off£tof
(
Api__Pî˚¡ûes
, 
≥r˚¡ûe5
),

233 
NULL
,

234 
NULL
,

236 0,
NULL
,NULL

241 
PROTOBUF_C_LABEL_OPTIONAL
,

242 
PROTOBUF_C_TYPE_FLOAT
,

243 
off£tof
(
Api__Pî˚¡ûes
, 
has_≥r˚¡ûe10
),

244 
off£tof
(
Api__Pî˚¡ûes
, 
≥r˚¡ûe10
),

245 
NULL
,

246 
NULL
,

248 0,
NULL
,NULL

253 
PROTOBUF_C_LABEL_OPTIONAL
,

254 
PROTOBUF_C_TYPE_FLOAT
,

255 
off£tof
(
Api__Pî˚¡ûes
, 
has_≥r˚¡ûe25
),

256 
off£tof
(
Api__Pî˚¡ûes
, 
≥r˚¡ûe25
),

257 
NULL
,

258 
NULL
,

260 0,
NULL
,NULL

265 
PROTOBUF_C_LABEL_OPTIONAL
,

266 
PROTOBUF_C_TYPE_FLOAT
,

267 
off£tof
(
Api__Pî˚¡ûes
, 
has_≥r˚¡ûe50
),

268 
off£tof
(
Api__Pî˚¡ûes
, 
≥r˚¡ûe50
),

269 
NULL
,

270 
NULL
,

272 0,
NULL
,NULL

277 
PROTOBUF_C_LABEL_OPTIONAL
,

278 
PROTOBUF_C_TYPE_FLOAT
,

279 
off£tof
(
Api__Pî˚¡ûes
, 
has_≥r˚¡ûe75
),

280 
off£tof
(
Api__Pî˚¡ûes
, 
≥r˚¡ûe75
),

281 
NULL
,

282 
NULL
,

284 0,
NULL
,NULL

289 
PROTOBUF_C_LABEL_OPTIONAL
,

290 
PROTOBUF_C_TYPE_FLOAT
,

291 
off£tof
(
Api__Pî˚¡ûes
, 
has_≥r˚¡ûe90
),

292 
off£tof
(
Api__Pî˚¡ûes
, 
≥r˚¡ûe90
),

293 
NULL
,

294 
NULL
,

296 0,
NULL
,NULL

301 
PROTOBUF_C_LABEL_OPTIONAL
,

302 
PROTOBUF_C_TYPE_FLOAT
,

303 
off£tof
(
Api__Pî˚¡ûes
, 
has_≥r˚¡ûe95
),

304 
off£tof
(
Api__Pî˚¡ûes
, 
≥r˚¡ûe95
),

305 
NULL
,

306 
NULL
,

308 0,
NULL
,NULL

313 
PROTOBUF_C_LABEL_OPTIONAL
,

314 
PROTOBUF_C_TYPE_FLOAT
,

315 
off£tof
(
Api__Pî˚¡ûes
, 
has_≥r˚¡ûe99
),

316 
off£tof
(
Api__Pî˚¡ûes
, 
≥r˚¡ûe99
),

317 
NULL
,

318 
NULL
,

320 0,
NULL
,NULL

323 c⁄° 
	g≠i__≥r˚¡ûes__fõld_ödi˚s_by_«me
[] = {

334 c⁄° 
PrŸobufCI¡R™ge
 
	g≠i__≥r˚¡ûes__numbî_ønges
[1 + 1] =

339 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	g≠i__≥r˚¡ûes__des¸ùt‹
 =

341 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

346 (
Api__Pî˚¡ûes
),

348 
≠i__≥r˚¡ûes__fõld_des¸ùt‹s
,

349 
≠i__≥r˚¡ûes__fõld_ödi˚s_by_«me
,

350 1, 
≠i__≥r˚¡ûes__numbî_ønges
,

351 (
PrŸobufCMesßgeInô
Ë
≠i__≥r˚¡ûes__öô
,

352 
NULL
,NULL,NULL

354 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	g≠i__øãs__fõld_des¸ùt‹s
[3] =

359 
PROTOBUF_C_LABEL_OPTIONAL
,

360 
PROTOBUF_C_TYPE_FLOAT
,

361 
off£tof
(
Api__R©es
, 
has_øã1
),

362 
off£tof
(
Api__R©es
, 
øã1
),

363 
NULL
,

364 
NULL
,

366 0,
NULL
,NULL

371 
PROTOBUF_C_LABEL_OPTIONAL
,

372 
PROTOBUF_C_TYPE_FLOAT
,

373 
off£tof
(
Api__R©es
, 
has_øã5
),

374 
off£tof
(
Api__R©es
, 
øã5
),

375 
NULL
,

376 
NULL
,

378 0,
NULL
,NULL

383 
PROTOBUF_C_LABEL_OPTIONAL
,

384 
PROTOBUF_C_TYPE_FLOAT
,

385 
off£tof
(
Api__R©es
, 
has_øã15
),

386 
off£tof
(
Api__R©es
, 
øã15
),

387 
NULL
,

388 
NULL
,

390 0,
NULL
,NULL

393 c⁄° 
	g≠i__øãs__fõld_ödi˚s_by_«me
[] = {

398 c⁄° 
PrŸobufCI¡R™ge
 
	g≠i__øãs__numbî_ønges
[1 + 1] =

403 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	g≠i__øãs__des¸ùt‹
 =

405 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

410 (
Api__R©es
),

412 
≠i__øãs__fõld_des¸ùt‹s
,

413 
≠i__øãs__fõld_ödi˚s_by_«me
,

414 1, 
≠i__øãs__numbî_ønges
,

415 (
PrŸobufCMesßgeInô
Ë
≠i__øãs__öô
,

416 
NULL
,NULL,NULL

418 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	g≠i__sy°em_°©s__lﬂd°©s__fõld_des¸ùt‹s
[3] =

423 
PROTOBUF_C_LABEL_OPTIONAL
,

424 
PROTOBUF_C_TYPE_FLOAT
,

425 
off£tof
(
Api__Sy°emSèts__Lﬂd°©s
, 
has_lﬂd1
),

426 
off£tof
(
Api__Sy°emSèts__Lﬂd°©s
, 
lﬂd1
),

427 
NULL
,

428 
NULL
,

430 0,
NULL
,NULL

435 
PROTOBUF_C_LABEL_OPTIONAL
,

436 
PROTOBUF_C_TYPE_FLOAT
,

437 
off£tof
(
Api__Sy°emSèts__Lﬂd°©s
, 
has_lﬂd5
),

438 
off£tof
(
Api__Sy°emSèts__Lﬂd°©s
, 
lﬂd5
),

439 
NULL
,

440 
NULL
,

442 0,
NULL
,NULL

447 
PROTOBUF_C_LABEL_OPTIONAL
,

448 
PROTOBUF_C_TYPE_FLOAT
,

449 
off£tof
(
Api__Sy°emSèts__Lﬂd°©s
, 
has_lﬂd15
),

450 
off£tof
(
Api__Sy°emSèts__Lﬂd°©s
, 
lﬂd15
),

451 
NULL
,

452 
NULL
,

454 0,
NULL
,NULL

457 c⁄° 
	g≠i__sy°em_°©s__lﬂd°©s__fõld_ödi˚s_by_«me
[] = {

462 c⁄° 
PrŸobufCI¡R™ge
 
	g≠i__sy°em_°©s__lﬂd°©s__numbî_ønges
[1 + 1] =

467 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	g≠i__sy°em_°©s__lﬂd°©s__des¸ùt‹
 =

469 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

474 (
Api__Sy°emSèts__Lﬂd°©s
),

476 
≠i__sy°em_°©s__lﬂd°©s__fõld_des¸ùt‹s
,

477 
≠i__sy°em_°©s__lﬂd°©s__fõld_ödi˚s_by_«me
,

478 1, 
≠i__sy°em_°©s__lﬂd°©s__numbî_ønges
,

479 (
PrŸobufCMesßgeInô
Ë
≠i__sy°em_°©s__lﬂd°©s__öô
,

480 
NULL
,NULL,NULL

482 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	g≠i__sy°em_°©s__˝u°©s__fõld_des¸ùt‹s
[4] =

487 
PROTOBUF_C_LABEL_OPTIONAL
,

488 
PROTOBUF_C_TYPE_FLOAT
,

489 
off£tof
(
Api__Sy°emSèts__CPUSèts
, 
has_u£r
),

490 
off£tof
(
Api__Sy°emSèts__CPUSèts
, 
u£r
),

491 
NULL
,

492 
NULL
,

494 0,
NULL
,NULL

499 
PROTOBUF_C_LABEL_OPTIONAL
,

500 
PROTOBUF_C_TYPE_FLOAT
,

501 
off£tof
(
Api__Sy°emSèts__CPUSèts
, 
has_sy°em
),

502 
off£tof
(
Api__Sy°emSèts__CPUSèts
, 
sy°em
),

503 
NULL
,

504 
NULL
,

506 0,
NULL
,NULL

511 
PROTOBUF_C_LABEL_OPTIONAL
,

512 
PROTOBUF_C_TYPE_FLOAT
,

513 
off£tof
(
Api__Sy°emSèts__CPUSèts
, 
has_idÀ
),

514 
off£tof
(
Api__Sy°emSèts__CPUSèts
, 
idÀ
),

515 
NULL
,

516 
NULL
,

518 0,
NULL
,NULL

523 
PROTOBUF_C_LABEL_OPTIONAL
,

524 
PROTOBUF_C_TYPE_FLOAT
,

525 
off£tof
(
Api__Sy°emSèts__CPUSèts
, 
has_≥r˚¡age
),

526 
off£tof
(
Api__Sy°emSèts__CPUSèts
, 
≥r˚¡age
),

527 
NULL
,

528 
NULL
,

530 0,
NULL
,NULL

533 c⁄° 
	g≠i__sy°em_°©s__˝u°©s__fõld_ödi˚s_by_«me
[] = {

539 c⁄° 
PrŸobufCI¡R™ge
 
	g≠i__sy°em_°©s__˝u°©s__numbî_ønges
[1 + 1] =

544 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	g≠i__sy°em_°©s__˝u°©s__des¸ùt‹
 =

546 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

551 (
Api__Sy°emSèts__CPUSèts
),

553 
≠i__sy°em_°©s__˝u°©s__fõld_des¸ùt‹s
,

554 
≠i__sy°em_°©s__˝u°©s__fõld_ödi˚s_by_«me
,

555 1, 
≠i__sy°em_°©s__˝u°©s__numbî_ønges
,

556 (
PrŸobufCMesßgeInô
Ë
≠i__sy°em_°©s__˝u°©s__öô
,

557 
NULL
,NULL,NULL

559 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	g≠i__sy°em_°©s__mem‹y_°©s__fõld_des¸ùt‹s
[3] =

564 
PROTOBUF_C_LABEL_OPTIONAL
,

565 
PROTOBUF_C_TYPE_UINT64
,

566 
off£tof
(
Api__Sy°emSèts__Mem‹ySèts
, 
has_tŸÆ
),

567 
off£tof
(
Api__Sy°emSèts__Mem‹ySèts
, 
tŸÆ
),

568 
NULL
,

569 
NULL
,

571 0,
NULL
,NULL

576 
PROTOBUF_C_LABEL_OPTIONAL
,

577 
PROTOBUF_C_TYPE_UINT64
,

578 
off£tof
(
Api__Sy°emSèts__Mem‹ySèts
, 
has_avaûabÀ
),

579 
off£tof
(
Api__Sy°emSèts__Mem‹ySèts
, 
avaûabÀ
),

580 
NULL
,

581 
NULL
,

583 0,
NULL
,NULL

588 
PROTOBUF_C_LABEL_OPTIONAL
,

589 
PROTOBUF_C_TYPE_UINT64
,

590 
off£tof
(
Api__Sy°emSèts__Mem‹ySèts
, 
has_u£d
),

591 
off£tof
(
Api__Sy°emSèts__Mem‹ySèts
, 
u£d
),

592 
NULL
,

593 
NULL
,

595 0,
NULL
,NULL

598 c⁄° 
	g≠i__sy°em_°©s__mem‹y_°©s__fõld_ödi˚s_by_«me
[] = {

603 c⁄° 
PrŸobufCI¡R™ge
 
	g≠i__sy°em_°©s__mem‹y_°©s__numbî_ønges
[1 + 1] =

608 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	g≠i__sy°em_°©s__mem‹y_°©s__des¸ùt‹
 =

610 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

615 (
Api__Sy°emSèts__Mem‹ySèts
),

617 
≠i__sy°em_°©s__mem‹y_°©s__fõld_des¸ùt‹s
,

618 
≠i__sy°em_°©s__mem‹y_°©s__fõld_ödi˚s_by_«me
,

619 1, 
≠i__sy°em_°©s__mem‹y_°©s__numbî_ønges
,

620 (
PrŸobufCMesßgeInô
Ë
≠i__sy°em_°©s__mem‹y_°©s__öô
,

621 
NULL
,NULL,NULL

623 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	g≠i__sy°em_°©s__fõld_des¸ùt‹s
[3] =

628 
PROTOBUF_C_LABEL_OPTIONAL
,

629 
PROTOBUF_C_TYPE_MESSAGE
,

631 
off£tof
(
Api__Sy°emSèts
, 
lﬂd
),

632 &
≠i__sy°em_°©s__lﬂd°©s__des¸ùt‹
,

633 
NULL
,

635 0,
NULL
,NULL

640 
PROTOBUF_C_LABEL_OPTIONAL
,

641 
PROTOBUF_C_TYPE_MESSAGE
,

643 
off£tof
(
Api__Sy°emSèts
, 
˝u
),

644 &
≠i__sy°em_°©s__˝u°©s__des¸ùt‹
,

645 
NULL
,

647 0,
NULL
,NULL

652 
PROTOBUF_C_LABEL_OPTIONAL
,

653 
PROTOBUF_C_TYPE_MESSAGE
,

655 
off£tof
(
Api__Sy°emSèts
, 
mem‹y
),

656 &
≠i__sy°em_°©s__mem‹y_°©s__des¸ùt‹
,

657 
NULL
,

659 0,
NULL
,NULL

662 c⁄° 
	g≠i__sy°em_°©s__fõld_ödi˚s_by_«me
[] = {

667 c⁄° 
PrŸobufCI¡R™ge
 
	g≠i__sy°em_°©s__numbî_ønges
[1 + 1] =

672 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	g≠i__sy°em_°©s__des¸ùt‹
 =

674 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

679 (
Api__Sy°emSèts
),

681 
≠i__sy°em_°©s__fõld_des¸ùt‹s
,

682 
≠i__sy°em_°©s__fõld_ödi˚s_by_«me
,

683 1, 
≠i__sy°em_°©s__numbî_ønges
,

684 (
PrŸobufCMesßgeInô
Ë
≠i__sy°em_°©s__öô
,

685 
NULL
,NULL,NULL

687 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	g≠i__comp⁄ít_°©s__˝u°©s__fõld_des¸ùt‹s
[4] =

692 
PROTOBUF_C_LABEL_OPTIONAL
,

693 
PROTOBUF_C_TYPE_FLOAT
,

694 
off£tof
(
Api__Comp⁄ítSèts__CPUSèts
, 
has_u£r
),

695 
off£tof
(
Api__Comp⁄ítSèts__CPUSèts
, 
u£r
),

696 
NULL
,

697 
NULL
,

699 0,
NULL
,NULL

704 
PROTOBUF_C_LABEL_OPTIONAL
,

705 
PROTOBUF_C_TYPE_FLOAT
,

706 
off£tof
(
Api__Comp⁄ítSèts__CPUSèts
, 
has_sy°em
),

707 
off£tof
(
Api__Comp⁄ítSèts__CPUSèts
, 
sy°em
),

708 
NULL
,

709 
NULL
,

711 0,
NULL
,NULL

716 
PROTOBUF_C_LABEL_OPTIONAL
,

717 
PROTOBUF_C_TYPE_FLOAT
,

718 
off£tof
(
Api__Comp⁄ítSèts__CPUSèts
, 
has_idÀ
),

719 
off£tof
(
Api__Comp⁄ítSèts__CPUSèts
, 
idÀ
),

720 
NULL
,

721 
NULL
,

723 0,
NULL
,NULL

728 
PROTOBUF_C_LABEL_OPTIONAL
,

729 
PROTOBUF_C_TYPE_FLOAT
,

730 
off£tof
(
Api__Comp⁄ítSèts__CPUSèts
, 
has_≥r˚¡age
),

731 
off£tof
(
Api__Comp⁄ítSèts__CPUSèts
, 
≥r˚¡age
),

732 
NULL
,

733 
NULL
,

735 0,
NULL
,NULL

738 c⁄° 
	g≠i__comp⁄ít_°©s__˝u°©s__fõld_ödi˚s_by_«me
[] = {

744 c⁄° 
PrŸobufCI¡R™ge
 
	g≠i__comp⁄ít_°©s__˝u°©s__numbî_ønges
[1 + 1] =

749 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	g≠i__comp⁄ít_°©s__˝u°©s__des¸ùt‹
 =

751 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

756 (
Api__Comp⁄ítSèts__CPUSèts
),

758 
≠i__comp⁄ít_°©s__˝u°©s__fõld_des¸ùt‹s
,

759 
≠i__comp⁄ít_°©s__˝u°©s__fõld_ödi˚s_by_«me
,

760 1, 
≠i__comp⁄ít_°©s__˝u°©s__numbî_ønges
,

761 (
PrŸobufCMesßgeInô
Ë
≠i__comp⁄ít_°©s__˝u°©s__öô
,

762 
NULL
,NULL,NULL

764 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	g≠i__comp⁄ít_°©s__mem‹y_°©s__fõld_des¸ùt‹s
[4] =

769 
PROTOBUF_C_LABEL_OPTIONAL
,

770 
PROTOBUF_C_TYPE_UINT64
,

771 
off£tof
(
Api__Comp⁄ítSèts__Mem‹ySèts
, 
has_mem‹y
),

772 
off£tof
(
Api__Comp⁄ítSèts__Mem‹ySèts
, 
mem‹y
),

773 
NULL
,

774 
NULL
,

776 0,
NULL
,NULL

781 
PROTOBUF_C_LABEL_OPTIONAL
,

782 
PROTOBUF_C_TYPE_UINT64
,

783 
off£tof
(
Api__Comp⁄ítSèts__Mem‹ySèts
, 
has_sw≠
),

784 
off£tof
(
Api__Comp⁄ítSèts__Mem‹ySèts
, 
sw≠
),

785 
NULL
,

786 
NULL
,

788 0,
NULL
,NULL

793 
PROTOBUF_C_LABEL_OPTIONAL
,

794 
PROTOBUF_C_TYPE_UINT64
,

795 
off£tof
(
Api__Comp⁄ítSèts__Mem‹ySèts
, 
has_hóp
),

796 
off£tof
(
Api__Comp⁄ítSèts__Mem‹ySèts
, 
hóp
),

797 
NULL
,

798 
NULL
,

800 0,
NULL
,NULL

805 
PROTOBUF_C_LABEL_OPTIONAL
,

806 
PROTOBUF_C_TYPE_UINT64
,

807 
off£tof
(
Api__Comp⁄ítSèts__Mem‹ySèts
, 
has_°ack
),

808 
off£tof
(
Api__Comp⁄ítSèts__Mem‹ySèts
, 
°ack
),

809 
NULL
,

810 
NULL
,

812 0,
NULL
,NULL

815 c⁄° 
	g≠i__comp⁄ít_°©s__mem‹y_°©s__fõld_ödi˚s_by_«me
[] = {

821 c⁄° 
PrŸobufCI¡R™ge
 
	g≠i__comp⁄ít_°©s__mem‹y_°©s__numbî_ønges
[2 + 1] =

827 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	g≠i__comp⁄ít_°©s__mem‹y_°©s__des¸ùt‹
 =

829 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

834 (
Api__Comp⁄ítSèts__Mem‹ySèts
),

836 
≠i__comp⁄ít_°©s__mem‹y_°©s__fõld_des¸ùt‹s
,

837 
≠i__comp⁄ít_°©s__mem‹y_°©s__fõld_ödi˚s_by_«me
,

838 2, 
≠i__comp⁄ít_°©s__mem‹y_°©s__numbî_ønges
,

839 (
PrŸobufCMesßgeInô
Ë
≠i__comp⁄ít_°©s__mem‹y_°©s__öô
,

840 
NULL
,NULL,NULL

842 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	g≠i__comp⁄ít_°©s__fõld_des¸ùt‹s
[5] =

847 
PROTOBUF_C_LABEL_OPTIONAL
,

848 
PROTOBUF_C_TYPE_UINT64
,

849 
off£tof
(
Api__Comp⁄ítSèts
, 
has_u±ime
),

850 
off£tof
(
Api__Comp⁄ítSèts
, 
u±ime
),

851 
NULL
,

852 
NULL
,

854 0,
NULL
,NULL

859 
PROTOBUF_C_LABEL_OPTIONAL
,

860 
PROTOBUF_C_TYPE_MESSAGE
,

862 
off£tof
(
Api__Comp⁄ítSèts
, 
˝u
),

863 &
≠i__comp⁄ít_°©s__˝u°©s__des¸ùt‹
,

864 
NULL
,

866 0,
NULL
,NULL

871 
PROTOBUF_C_LABEL_OPTIONAL
,

872 
PROTOBUF_C_TYPE_MESSAGE
,

874 
off£tof
(
Api__Comp⁄ítSèts
, 
mem‹y
),

875 &
≠i__comp⁄ít_°©s__mem‹y_°©s__des¸ùt‹
,

876 
NULL
,

878 0,
NULL
,NULL

883 
PROTOBUF_C_LABEL_OPTIONAL
,

884 
PROTOBUF_C_TYPE_UINT64
,

885 
off£tof
(
Api__Comp⁄ítSèts
, 
has_g‹outöes
),

886 
off£tof
(
Api__Comp⁄ítSèts
, 
g‹outöes
),

887 
NULL
,

888 
NULL
,

890 0,
NULL
,NULL

895 
PROTOBUF_C_LABEL_OPTIONAL
,

896 
PROTOBUF_C_TYPE_FLOAT
,

897 
off£tof
(
Api__Comp⁄ítSèts
, 
has_gc_˝u_‰a˘i⁄
),

898 
off£tof
(
Api__Comp⁄ítSèts
, 
gc_˝u_‰a˘i⁄
),

899 
NULL
,

900 
NULL
,

902 0,
NULL
,NULL

905 c⁄° 
	g≠i__comp⁄ít_°©s__fõld_ödi˚s_by_«me
[] = {

912 c⁄° 
PrŸobufCI¡R™ge
 
	g≠i__comp⁄ít_°©s__numbî_ønges
[1 + 1] =

917 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	g≠i__comp⁄ít_°©s__des¸ùt‹
 =

919 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

924 (
Api__Comp⁄ítSèts
),

926 
≠i__comp⁄ít_°©s__fõld_des¸ùt‹s
,

927 
≠i__comp⁄ít_°©s__fõld_ödi˚s_by_«me
,

928 1, 
≠i__comp⁄ít_°©s__numbî_ønges
,

929 (
PrŸobufCMesßgeInô
Ë
≠i__comp⁄ít_°©s__öô
,

930 
NULL
,NULL,NULL

	@libttn/api.pb-c.h

4 #i‚de‡
PROTOBUF_C_gôhub_2ecom_2fTheThögsNëw‹k_2·ä_2Ápi_2Ápi_2ïrŸo__INCLUDED


5 
	#PROTOBUF_C_gôhub_2ecom_2fTheThögsNëw‹k_2·ä_2Ápi_2Ápi_2ïrŸo__INCLUDED


	)

7 
	~<¥Ÿobuf-c/¥Ÿobuf-c.h
>

9 
	gPROTOBUF_C__BEGIN_DECLS


11 #i‡
PROTOBUF_C_VERSION_NUMBER
 < 1000000

12 #îr‹ 
This
 
fûe
 
was
 
gíî©ed
 
by
 
a
 
√wî
 
vîsi⁄
 
of
 
¥Ÿoc
-
c
 
which
 
is
 
öcom∑tibÀ
 
wôh
 
your
 
lib¥Ÿobuf
-¯
hódîs
. 
PÀa£
 
upd©e
 your headers.

13 #ñi‡1002001 < 
PROTOBUF_C_MIN_COMPILER_VERSION


14 #îr‹ 
This
 
fûe
 
was
 
gíî©ed
 
by
 
™
 
ﬁdî
 
vîsi⁄
 
of
 
¥Ÿoc
-
c
 
which
 
is
 
öcom∑tibÀ
 
wôh
 
your
 
lib¥Ÿobuf
-¯
hódîs
. 
PÀa£
 
ªgíî©e
 
this
 fûêwôh 
a
 
√wî
 version ofÖrotoc-c.

18 
_Api__Pî˚¡ûes
 
	tApi__Pî˚¡ûes
;

19 
_Api__R©es
 
	tApi__R©es
;

20 
_Api__Sy°emSèts
 
	tApi__Sy°emSèts
;

21 
_Api__Sy°emSèts__Lﬂd°©s
 
	tApi__Sy°emSèts__Lﬂd°©s
;

22 
_Api__Sy°emSèts__CPUSèts
 
	tApi__Sy°emSèts__CPUSèts
;

23 
_Api__Sy°emSèts__Mem‹ySèts
 
	tApi__Sy°emSèts__Mem‹ySèts
;

24 
_Api__Comp⁄ítSèts
 
	tApi__Comp⁄ítSèts
;

25 
_Api__Comp⁄ítSèts__CPUSèts
 
	tApi__Comp⁄ítSèts__CPUSèts
;

26 
_Api__Comp⁄ítSèts__Mem‹ySèts
 
	tApi__Comp⁄ítSèts__Mem‹ySèts
;

34 
	s_Api__Pî˚¡ûes


36 
PrŸobufCMesßge
 
	mba£
;

37 
¥Ÿobuf_c_boﬁón
 
	mhas_≥r˚¡ûe1
;

38 
	m≥r˚¡ûe1
;

39 
¥Ÿobuf_c_boﬁón
 
	mhas_≥r˚¡ûe5
;

40 
	m≥r˚¡ûe5
;

41 
¥Ÿobuf_c_boﬁón
 
	mhas_≥r˚¡ûe10
;

42 
	m≥r˚¡ûe10
;

43 
¥Ÿobuf_c_boﬁón
 
	mhas_≥r˚¡ûe25
;

44 
	m≥r˚¡ûe25
;

45 
¥Ÿobuf_c_boﬁón
 
	mhas_≥r˚¡ûe50
;

46 
	m≥r˚¡ûe50
;

47 
¥Ÿobuf_c_boﬁón
 
	mhas_≥r˚¡ûe75
;

48 
	m≥r˚¡ûe75
;

49 
¥Ÿobuf_c_boﬁón
 
	mhas_≥r˚¡ûe90
;

50 
	m≥r˚¡ûe90
;

51 
¥Ÿobuf_c_boﬁón
 
	mhas_≥r˚¡ûe95
;

52 
	m≥r˚¡ûe95
;

53 
¥Ÿobuf_c_boﬁón
 
	mhas_≥r˚¡ûe99
;

54 
	m≥r˚¡ûe99
;

56 
	#API__PERCENTILES__INIT
 \

57 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
≠i__≥r˚¡ûes__des¸ùt‹
) \

58 , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }

	)

61 
	s_Api__R©es


63 
PrŸobufCMesßge
 
	mba£
;

64 
¥Ÿobuf_c_boﬁón
 
	mhas_øã1
;

65 
	møã1
;

66 
¥Ÿobuf_c_boﬁón
 
	mhas_øã5
;

67 
	møã5
;

68 
¥Ÿobuf_c_boﬁón
 
	mhas_øã15
;

69 
	møã15
;

71 
	#API__RATES__INIT
 \

72 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
≠i__øãs__des¸ùt‹
) \

73 , 0,0, 0,0, 0,0 }

	)

76 
	s_Api__Sy°emSèts__Lﬂd°©s


78 
PrŸobufCMesßge
 
	mba£
;

79 
¥Ÿobuf_c_boﬁón
 
	mhas_lﬂd1
;

80 
	mlﬂd1
;

81 
¥Ÿobuf_c_boﬁón
 
	mhas_lﬂd5
;

82 
	mlﬂd5
;

83 
¥Ÿobuf_c_boﬁón
 
	mhas_lﬂd15
;

84 
	mlﬂd15
;

86 
	#API__SYSTEM_STATS__LOADSTATS__INIT
 \

87 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
≠i__sy°em_°©s__lﬂd°©s__des¸ùt‹
) \

88 , 0,0, 0,0, 0,0 }

	)

91 
	s_Api__Sy°emSèts__CPUSèts


93 
PrŸobufCMesßge
 
	mba£
;

94 
¥Ÿobuf_c_boﬁón
 
	mhas_u£r
;

95 
	mu£r
;

96 
¥Ÿobuf_c_boﬁón
 
	mhas_sy°em
;

97 
	msy°em
;

98 
¥Ÿobuf_c_boﬁón
 
	mhas_idÀ
;

99 
	midÀ
;

100 
¥Ÿobuf_c_boﬁón
 
	mhas_≥r˚¡age
;

101 
	m≥r˚¡age
;

103 
	#API__SYSTEM_STATS__CPUSTATS__INIT
 \

104 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
≠i__sy°em_°©s__˝u°©s__des¸ùt‹
) \

105 , 0,0, 0,0, 0,0, 0,0 }

	)

108 
	s_Api__Sy°emSèts__Mem‹ySèts


110 
PrŸobufCMesßge
 
	mba£
;

111 
¥Ÿobuf_c_boﬁón
 
	mhas_tŸÆ
;

112 
uöt64_t
 
	mtŸÆ
;

113 
¥Ÿobuf_c_boﬁón
 
	mhas_avaûabÀ
;

114 
uöt64_t
 
	mavaûabÀ
;

115 
¥Ÿobuf_c_boﬁón
 
	mhas_u£d
;

116 
uöt64_t
 
	mu£d
;

118 
	#API__SYSTEM_STATS__MEMORY_STATS__INIT
 \

119 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
≠i__sy°em_°©s__mem‹y_°©s__des¸ùt‹
) \

120 , 0,0, 0,0, 0,0 }

	)

123 
	s_Api__Sy°emSèts


125 
PrŸobufCMesßge
 
	mba£
;

126 
Api__Sy°emSèts__Lﬂd°©s
 *
	mlﬂd
;

127 
Api__Sy°emSèts__CPUSèts
 *
	m˝u
;

128 
Api__Sy°emSèts__Mem‹ySèts
 *
	mmem‹y
;

130 
	#API__SYSTEM_STATS__INIT
 \

131 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
≠i__sy°em_°©s__des¸ùt‹
) \

132 , 
NULL
, NULL, NULL }

	)

135 
	s_Api__Comp⁄ítSèts__CPUSèts


137 
PrŸobufCMesßge
 
	mba£
;

138 
¥Ÿobuf_c_boﬁón
 
	mhas_u£r
;

139 
	mu£r
;

140 
¥Ÿobuf_c_boﬁón
 
	mhas_sy°em
;

141 
	msy°em
;

142 
¥Ÿobuf_c_boﬁón
 
	mhas_idÀ
;

143 
	midÀ
;

144 
¥Ÿobuf_c_boﬁón
 
	mhas_≥r˚¡age
;

145 
	m≥r˚¡age
;

147 
	#API__COMPONENT_STATS__CPUSTATS__INIT
 \

148 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
≠i__comp⁄ít_°©s__˝u°©s__des¸ùt‹
) \

149 , 0,0, 0,0, 0,0, 0,0 }

	)

152 
	s_Api__Comp⁄ítSèts__Mem‹ySèts


154 
PrŸobufCMesßge
 
	mba£
;

155 
¥Ÿobuf_c_boﬁón
 
	mhas_mem‹y
;

156 
uöt64_t
 
	mmem‹y
;

157 
¥Ÿobuf_c_boﬁón
 
	mhas_sw≠
;

158 
uöt64_t
 
	msw≠
;

159 
¥Ÿobuf_c_boﬁón
 
	mhas_hóp
;

160 
uöt64_t
 
	mhóp
;

161 
¥Ÿobuf_c_boﬁón
 
	mhas_°ack
;

162 
uöt64_t
 
	m°ack
;

164 
	#API__COMPONENT_STATS__MEMORY_STATS__INIT
 \

165 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
≠i__comp⁄ít_°©s__mem‹y_°©s__des¸ùt‹
) \

166 , 0,0, 0,0, 0,0, 0,0 }

	)

169 
	s_Api__Comp⁄ítSèts


171 
PrŸobufCMesßge
 
	mba£
;

172 
¥Ÿobuf_c_boﬁón
 
	mhas_u±ime
;

173 
uöt64_t
 
	mu±ime
;

174 
Api__Comp⁄ítSèts__CPUSèts
 *
	m˝u
;

175 
Api__Comp⁄ítSèts__Mem‹ySèts
 *
	mmem‹y
;

176 
¥Ÿobuf_c_boﬁón
 
	mhas_g‹outöes
;

177 
uöt64_t
 
	mg‹outöes
;

178 
¥Ÿobuf_c_boﬁón
 
	mhas_gc_˝u_‰a˘i⁄
;

179 
	mgc_˝u_‰a˘i⁄
;

181 
	#API__COMPONENT_STATS__INIT
 \

182 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
≠i__comp⁄ít_°©s__des¸ùt‹
) \

183 , 0,0, 
NULL
, NULL, 0,0, 0,0 }

	)

187 
	g≠i__≥r˚¡ûes__öô


188 (
Api__Pî˚¡ûes
 *
	gmesßge
);

189 
size_t
 
	g≠i__≥r˚¡ûes__gë_∑cked_size


190 (c⁄° 
Api__Pî˚¡ûes
 *
	gmesßge
);

191 
size_t
 
	g≠i__≥r˚¡ûes__∑ck


192 (c⁄° 
Api__Pî˚¡ûes
 *
	gmesßge
,

193 
uöt8_t
 *
	gout
);

194 
size_t
 
	g≠i__≥r˚¡ûes__∑ck_to_buf„r


195 (c⁄° 
Api__Pî˚¡ûes
 *
	gmesßge
,

196 
PrŸobufCBuf„r
 *
	gbuf„r
);

197 
Api__Pî˚¡ûes
 *

198 
	g≠i__≥r˚¡ûes__u≈ack


199 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

200 
size_t
 
	gÀn
,

201 c⁄° 
uöt8_t
 *
	gd©a
);

202 
	g≠i__≥r˚¡ûes__‰ì_u≈acked


203 (
Api__Pî˚¡ûes
 *
	gmesßge
,

204 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
);

206 
	g≠i__øãs__öô


207 (
Api__R©es
 *
	gmesßge
);

208 
size_t
 
	g≠i__øãs__gë_∑cked_size


209 (c⁄° 
Api__R©es
 *
	gmesßge
);

210 
size_t
 
	g≠i__øãs__∑ck


211 (c⁄° 
Api__R©es
 *
	gmesßge
,

212 
uöt8_t
 *
	gout
);

213 
size_t
 
	g≠i__øãs__∑ck_to_buf„r


214 (c⁄° 
Api__R©es
 *
	gmesßge
,

215 
PrŸobufCBuf„r
 *
	gbuf„r
);

216 
Api__R©es
 *

217 
	g≠i__øãs__u≈ack


218 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

219 
size_t
 
	gÀn
,

220 c⁄° 
uöt8_t
 *
	gd©a
);

221 
	g≠i__øãs__‰ì_u≈acked


222 (
Api__R©es
 *
	gmesßge
,

223 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
);

225 
	g≠i__sy°em_°©s__lﬂd°©s__öô


226 (
Api__Sy°emSèts__Lﬂd°©s
 *
	gmesßge
);

228 
	g≠i__sy°em_°©s__˝u°©s__öô


229 (
Api__Sy°emSèts__CPUSèts
 *
	gmesßge
);

231 
	g≠i__sy°em_°©s__mem‹y_°©s__öô


232 (
Api__Sy°emSèts__Mem‹ySèts
 *
	gmesßge
);

234 
	g≠i__sy°em_°©s__öô


235 (
Api__Sy°emSèts
 *
	gmesßge
);

236 
size_t
 
	g≠i__sy°em_°©s__gë_∑cked_size


237 (c⁄° 
Api__Sy°emSèts
 *
	gmesßge
);

238 
size_t
 
	g≠i__sy°em_°©s__∑ck


239 (c⁄° 
Api__Sy°emSèts
 *
	gmesßge
,

240 
uöt8_t
 *
	gout
);

241 
size_t
 
	g≠i__sy°em_°©s__∑ck_to_buf„r


242 (c⁄° 
Api__Sy°emSèts
 *
	gmesßge
,

243 
PrŸobufCBuf„r
 *
	gbuf„r
);

244 
Api__Sy°emSèts
 *

245 
	g≠i__sy°em_°©s__u≈ack


246 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

247 
size_t
 
	gÀn
,

248 c⁄° 
uöt8_t
 *
	gd©a
);

249 
	g≠i__sy°em_°©s__‰ì_u≈acked


250 (
Api__Sy°emSèts
 *
	gmesßge
,

251 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
);

253 
	g≠i__comp⁄ít_°©s__˝u°©s__öô


254 (
Api__Comp⁄ítSèts__CPUSèts
 *
	gmesßge
);

256 
	g≠i__comp⁄ít_°©s__mem‹y_°©s__öô


257 (
Api__Comp⁄ítSèts__Mem‹ySèts
 *
	gmesßge
);

259 
	g≠i__comp⁄ít_°©s__öô


260 (
Api__Comp⁄ítSèts
 *
	gmesßge
);

261 
size_t
 
	g≠i__comp⁄ít_°©s__gë_∑cked_size


262 (c⁄° 
Api__Comp⁄ítSèts
 *
	gmesßge
);

263 
size_t
 
	g≠i__comp⁄ít_°©s__∑ck


264 (c⁄° 
Api__Comp⁄ítSèts
 *
	gmesßge
,

265 
uöt8_t
 *
	gout
);

266 
size_t
 
	g≠i__comp⁄ít_°©s__∑ck_to_buf„r


267 (c⁄° 
Api__Comp⁄ítSèts
 *
	gmesßge
,

268 
PrŸobufCBuf„r
 *
	gbuf„r
);

269 
Api__Comp⁄ítSèts
 *

270 
	g≠i__comp⁄ít_°©s__u≈ack


271 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

272 
size_t
 
	gÀn
,

273 c⁄° 
uöt8_t
 *
	gd©a
);

274 
	g≠i__comp⁄ít_°©s__‰ì_u≈acked


275 (
Api__Comp⁄ítSèts
 *
	gmesßge
,

276 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
);

279 (*
	tApi__Pî˚¡ûes_Closuª
)

280 (c⁄° 
	tApi__Pî˚¡ûes
 *
	tmesßge
,

281 *
	t˛osuª_d©a
);

282 (*
	tApi__R©es_Closuª
)

283 (c⁄° 
	tApi__R©es
 *
	tmesßge
,

284 *
	t˛osuª_d©a
);

285 (*
	tApi__Sy°emSèts__Lﬂd°©s_Closuª
)

286 (c⁄° 
	tApi__Sy°emSèts__Lﬂd°©s
 *
	tmesßge
,

287 *
	t˛osuª_d©a
);

288 (*
	tApi__Sy°emSèts__CPUSèts_Closuª
)

289 (c⁄° 
	tApi__Sy°emSèts__CPUSèts
 *
	tmesßge
,

290 *
	t˛osuª_d©a
);

291 (*
	tApi__Sy°emSèts__Mem‹ySèts_Closuª
)

292 (c⁄° 
	tApi__Sy°emSèts__Mem‹ySèts
 *
	tmesßge
,

293 *
	t˛osuª_d©a
);

294 (*
	tApi__Sy°emSèts_Closuª
)

295 (c⁄° 
	tApi__Sy°emSèts
 *
	tmesßge
,

296 *
	t˛osuª_d©a
);

297 (*
	tApi__Comp⁄ítSèts__CPUSèts_Closuª
)

298 (c⁄° 
	tApi__Comp⁄ítSèts__CPUSèts
 *
	tmesßge
,

299 *
	t˛osuª_d©a
);

300 (*
	tApi__Comp⁄ítSèts__Mem‹ySèts_Closuª
)

301 (c⁄° 
	tApi__Comp⁄ítSèts__Mem‹ySèts
 *
	tmesßge
,

302 *
	t˛osuª_d©a
);

303 (*
	tApi__Comp⁄ítSèts_Closuª
)

304 (c⁄° 
	tApi__Comp⁄ítSèts
 *
	tmesßge
,

305 *
	t˛osuª_d©a
);

312 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
≠i__≥r˚¡ûes__des¸ùt‹
;

313 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
≠i__øãs__des¸ùt‹
;

314 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
≠i__sy°em_°©s__des¸ùt‹
;

315 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
≠i__sy°em_°©s__lﬂd°©s__des¸ùt‹
;

316 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
≠i__sy°em_°©s__˝u°©s__des¸ùt‹
;

317 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
≠i__sy°em_°©s__mem‹y_°©s__des¸ùt‹
;

318 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
≠i__comp⁄ít_°©s__des¸ùt‹
;

319 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
≠i__comp⁄ít_°©s__˝u°©s__des¸ùt‹
;

320 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
≠i__comp⁄ít_°©s__mem‹y_°©s__des¸ùt‹
;

322 
PROTOBUF_C__END_DECLS


	@libttn/connector.c

5 
	~"√tw‹k.h
"

7 
	$ângwc_öô
(
TTN
 **
s
, c⁄° *
id
, 
TTNDow∆ökH™dÀr
 
dow∆ök_h™dÀr
,

8 *
cb_¨g
) {

9 
Sessi⁄
 *
£ssi⁄
 = (Sessi⁄ *)
	`mÆloc
((Session));

10 
	`mem£t
(
£ssi⁄
, 0, (
Sessi⁄
));

12 
£ssi⁄
->
id
 = 
	`°rdup
(id);

13 
£ssi⁄
->
key
 = 
NULL
;

14 
£ssi⁄
->
dow∆ök_h™dÀr
 = downlink_handler;

15 
£ssi⁄
->
cb_¨g
 = cb_arg;

16 
£ssi⁄
->
ªad_buf„r
 = 
	`mÆloc
(
READ_BUFFER_SIZE
);

17 
£ssi⁄
->
£nd_buf„r
 = 
	`mÆloc
(
SEND_BUFFER_SIZE
);

19 
	`Nëw‹kInô
(&
£ssi⁄
->
√tw‹k
);

20 
	`MQTTClõ¡Inô
(&
£ssi⁄
->
˛õ¡
, &£ssi⁄->
√tw‹k
, 
COMMAND_TIMEOUT
,

21 
£ssi⁄
->
£nd_buf„r
, 
SEND_BUFFER_SIZE
, sessi⁄->
ªad_buf„r
,

22 
READ_BUFFER_SIZE
);

24 *
s
 = (
TTN
 *)
£ssi⁄
;

25 
	}
}

27 
	$ângwc_˛ónup
(
TTN
 *
s
) {

28 
Sessi⁄
 *
£ssi⁄
 = (Sessi⁄ *)
s
;

30 
	`MQTTClõ¡De°roy
(&
£ssi⁄
->
˛õ¡
);

32 i‡(
£ssi⁄
->
key
 !
NULL
)

33 
	`‰ì
(
£ssi⁄
->
key
);

34 
	`‰ì
(
£ssi⁄
->
id
);

35 
	`‰ì
(
£ssi⁄
->
ªad_buf„r
);

36 
	`‰ì
(
£ssi⁄
->
£nd_buf„r
);

37 
	`‰ì
(
£ssi⁄
);

38 
	}
}

40 
	$ângwc_£ndpög
(*
s
) {

41 
Sessi⁄
 *
£ssi⁄
 = (Sessi⁄ *)
s
;

42  
	`MQTTSídPög
(&
£ssi⁄
->
˛õ¡
);

43 
	}
}

45 
	$ângwc_gëπt
(*
s
) {

46 
Sessi⁄
 *
£ssi⁄
 = (Sessi⁄ *)
s
;

47  
	`MQTTGëPögTime
(&
£ssi⁄
->
˛õ¡
) / 1000;

48 
	}
}

50 
	$ângwc_dow∆ök_cb
(
MesßgeD©a
 *
d©a
, *
s
) {

51 
Sessi⁄
 *
£ssi⁄
 = (Sessi⁄ *)
s
;

53 
Rouãr__Dow∆ökMesßge
 *
dow∆ök
 = 
	`rouãr__dow∆ök_mesßge__u≈ack
(

54 
NULL
, 
d©a
->
mesßge
->
∑ylﬂdÀn
, d©a->mesßge->
∑ylﬂd
);

55 i‡(!
dow∆ök
)

58 i‡(
£ssi⁄
->
dow∆ök_h™dÀr
)

59 
£ssi⁄
->
	`dow∆ök_h™dÀr
(
dow∆ök
, sessi⁄->
cb_¨g
);

61 
	`rouãr__dow∆ök_mesßge__‰ì_u≈acked
(
dow∆ök
, 
NULL
);

62 
	}
}

64 
	$ângwc_c⁄√˘
(
TTN
 *
s
, c⁄° *
ho°_«me
, 
p‹t
, c⁄° *
key
) {

65 
Sessi⁄
 *
£ssi⁄
 = (Sessi⁄ *)
s
;

66 i‡(
key
)

67 
£ssi⁄
->
key
 = 
	`°rdup
(key);

69 
îr
;

70 
MQTTPackë_c⁄√˘D©a
 
c⁄√˘
 = 
MQTTPackë_c⁄√˘D©a_öôülizî
;

72 
îr
 = 
	`Nëw‹kC⁄√˘
(&
£ssi⁄
->
√tw‹k
, (*)
ho°_«me
, 
p‹t
);

73 i‡(
îr
 !
SUCCESS
)

74 
exô
;

76 
c⁄√˘
.
˛õ¡ID
.
c°rög
 = 
£ssi⁄
->
id
;

77 
c⁄√˘
.
kìpAliveI¡îvÆ
 = 
KEEP_ALIVE_INTERVAL
;

79 i‡(
key
) {

80 
c⁄√˘
.
u£∫ame
.
c°rög
 = 
£ssi⁄
->
id
;

81 
c⁄√˘
.
∑ssw‹d
.
c°rög
 = (*)
key
;

83 #i‡
SEND_DISCONNECT_WILL


84 
Ty≥s__Disc⁄√˘Mesßge
 
wûl
 = 
TYPES__DISCONNECT_MESSAGE__INIT
;

85 
wûl
.
id
 = 
£ssi⁄
->id;

86 i‡(
£ssi⁄
->
key
)

87 
wûl
.
key
 = 
£ssi⁄
->key;

88 
c⁄√˘
.
wûlFœg
 = 1;

89 
c⁄√˘
.
wûl
.
t›icName
.
c°rög
 = "disconnect";

90 
c⁄√˘
.
wûl
.
mesßge
.
Àn°rög
.
Àn
 =

91 
	`ty≥s__disc⁄√˘_mesßge__gë_∑cked_size
(&
wûl
);

92 
c⁄√˘
.
wûl
.
mesßge
.
Àn°rög
.
d©a
 =

93 
	`mÆloc
(
c⁄√˘
.
wûl
.
mesßge
.
Àn°rög
.
Àn
);

94 
c⁄√˘
.
wûl
.
qos
 = 
QOS_WILL
;

95 
c⁄√˘
.
wûl
.
ªèöed
 = 0;

96 
	`ty≥s__disc⁄√˘_mesßge__∑ck
(

97 &
wûl
, (
uöt8_t
 *)
c⁄√˘
.wûl.
mesßge
.
Àn°rög
.
d©a
);

100 
îr
 = 
	`MQTTC⁄√˘
(&
£ssi⁄
->
˛õ¡
, &
c⁄√˘
);

101 #i‡
SEND_DISCONNECT_WILL


102 
	`‰ì
(
c⁄√˘
.
wûl
.
mesßge
.
Àn°rög
.
d©a
);

104 i‡(
îr
 !
SUCCESS
)

105 
exô
;

107 #i‡
SEND_CONNECT


108 
Ty≥s__C⁄√˘Mesßge
 
c⁄n
 = 
TYPES__CONNECT_MESSAGE__INIT
;

109 
c⁄n
.
id
 = 
£ssi⁄
->id;

110 
c⁄n
.
key
 = (*)key;

111 
MQTTMesßge
 
mesßge
;

112 
mesßge
.
qos
 = 
QOS_CONNECT
;

113 
mesßge
.
ªèöed
 = 0;

114 
mesßge
.
dup
 = 0;

115 
mesßge
.
∑ylﬂdÀn
 = 
	`ty≥s__c⁄√˘_mesßge__gë_∑cked_size
(&
c⁄n
);

116 
mesßge
.
∑ylﬂd
 = 
	`mÆloc
(mesßge.
∑ylﬂdÀn
);

117 
	`ty≥s__c⁄√˘_mesßge__∑ck
(&
c⁄n
, (
uöt8_t
 *)
mesßge
.
∑ylﬂd
);

118 
	`MQTTPublish
(&
£ssi⁄
->
˛õ¡
, "c⁄√˘", &
mesßge
);

119 
	`‰ì
(
mesßge
.
∑ylﬂd
);

122 
	`a•rötf
(&
£ssi⁄
->
dow∆ök_t›ic
, "%s/down", sessi⁄->
id
);

123 
îr
 = 
	`MQTTSubs¸ibe
(&
£ssi⁄
->
˛õ¡
, sessi⁄->
dow∆ök_t›ic
, 
QOS_DOWN
,

124 &
ângwc_dow∆ök_cb
, 
£ssi⁄
);

126 
exô
:

127 i‡(
îr
 !
SUCCESS
) {

128 if(
£ssi⁄
->
dow∆ök_t›ic
 !
NULL
) {

129 
	`‰ì
(
£ssi⁄
->
dow∆ök_t›ic
);

130 
£ssi⁄
->
dow∆ök_t›ic
 = 
NULL
;

132 if(
£ssi⁄
->
key
 !
NULL
) {

133 
	`‰ì
(
£ssi⁄
->
key
);

134 
£ssi⁄
->
key
 = 
NULL
;

137  
îr
;

138 
	}
}

140 
	$ângwc_disc⁄√˘
(
TTN
 *
s
) {

141 
Sessi⁄
 *
£ssi⁄
 = (Sessi⁄ *)
s
;

143 #i‡
SEND_DISCONNECT_WILL


144 
Ty≥s__Disc⁄√˘Mesßge
 
wûl
 = 
TYPES__DISCONNECT_MESSAGE__INIT
;

145 
wûl
.
id
 = 
£ssi⁄
->id;

146 i‡(
£ssi⁄
->
key
)

147 
wûl
.
key
 = 
£ssi⁄
->key;

148 
MQTTMesßge
 
mesßge
;

149 
mesßge
.
qos
 = 
QOS_WILL
;

150 
mesßge
.
ªèöed
 = 0;

151 
mesßge
.
dup
 = 0;

152 
mesßge
.
∑ylﬂdÀn
 = 
	`ty≥s__disc⁄√˘_mesßge__gë_∑cked_size
(&
wûl
);

153 
mesßge
.
∑ylﬂd
 = 
	`mÆloc
(mesßge.
∑ylﬂdÀn
);

154 
	`ty≥s__disc⁄√˘_mesßge__∑ck
(&
wûl
, (
uöt8_t
 *)
mesßge
.
∑ylﬂd
);

155 
	`MQTTPublish
(&
£ssi⁄
->
˛õ¡
, "disc⁄√˘", &
mesßge
);

156 
	`‰ì
(
mesßge
.
∑ylﬂd
);

159 
	`MQTTDisc⁄√˘
(&
£ssi⁄
->
˛õ¡
);

160 
	`Nëw‹kDisc⁄√˘
(&
£ssi⁄
->
√tw‹k
);

162 if(
£ssi⁄
->
key
 !
NULL
) {

163 
	`‰ì
(
£ssi⁄
->
key
);

164 
£ssi⁄
->
key
 = 
NULL
;

167 if(
£ssi⁄
->
dow∆ök_t›ic
 !
NULL
) {

168 
	`‰ì
(
£ssi⁄
->
dow∆ök_t›ic
);

169 
£ssi⁄
->
dow∆ök_t›ic
 = 
NULL
;

173 
	}
}

175 
	$ângwc_checkc⁄√˘ed
(
TTN
 *
s
) {

176 
Sessi⁄
 *
£ssi⁄
 = (Sessi⁄ *)
s
;

177  
	`Nëw‹kCheckC⁄√˘ed
(&
£ssi⁄
->
√tw‹k
);

178 
	}
}

180 
	$ângwc_£nd_u∂ök
(
TTN
 *
s
, 
Rouãr__U∂ökMesßge
 *
u∂ök
) {

181 
Sessi⁄
 *
£ssi⁄
 = (Sessi⁄ *)
s
;

183 
rc
 = 
FAILURE
;

184 *
∑ylﬂd
 = 
NULL
;

185 *
t›ic
 = 
NULL
;

187 
size_t
 
Àn
 = 
	`rouãr__u∂ök_mesßge__gë_∑cked_size
(
u∂ök
);

188 
∑ylﬂd
 = 
	`mÆloc
(
Àn
);

189 i‡(!
∑ylﬂd
)

190 
exô
;

192 
	`rouãr__u∂ök_mesßge__∑ck
(
u∂ök
, 
∑ylﬂd
);

194 
MQTTMesßge
 
mesßge
;

195 
mesßge
.
qos
 = 
QOS_UP
;

196 
mesßge
.
ªèöed
 = 0;

197 
mesßge
.
dup
 = 0;

198 
mesßge
.
∑ylﬂd
 =Öayload;

199 
mesßge
.
∑ylﬂdÀn
 = 
Àn
;

201 i‡(
	`a•rötf
(&
t›ic
, "%s/up", 
£ssi⁄
->
id
) == -1)

202 
exô
;

204 
rc
 = 
	`MQTTPublish
(&
£ssi⁄
->
˛õ¡
, 
t›ic
, &
mesßge
);

206 
exô
:

207 i‡(
t›ic
 !
NULL
)

208 
	`‰ì
(
t›ic
);

209 i‡(
∑ylﬂd
 !
NULL
)

210 
	`‰ì
(
∑ylﬂd
);

211  
rc
;

212 
	}
}

214 
	$ângwc_£nd_°©us
(
TTN
 *
s
, 
G©eway__Sètus
 *
°©us
) {

215 
Sessi⁄
 *
£ssi⁄
 = (Sessi⁄ *)
s
;

217 
rc
 = 
FAILURE
;

218 *
∑ylﬂd
 = 
NULL
;

219 *
t›ic
 = 
NULL
;

221 
size_t
 
Àn
 = 
	`g©eway__°©us__gë_∑cked_size
(
°©us
);

222 
∑ylﬂd
 = 
	`mÆloc
(
Àn
);

223 i‡(!
∑ylﬂd
)

224 
exô
;

226 
	`g©eway__°©us__∑ck
(
°©us
, 
∑ylﬂd
);

228 
MQTTMesßge
 
mesßge
;

229 
mesßge
.
qos
 = 
QOS_STATUS
;

230 
mesßge
.
ªèöed
 = 0;

231 
mesßge
.
dup
 = 0;

232 
mesßge
.
∑ylﬂd
 =Öayload;

233 
mesßge
.
∑ylﬂdÀn
 = 
Àn
;

235 i‡(
	`a•rötf
(&
t›ic
, "%s/°©us", 
£ssi⁄
->
id
) == -1)

236 
exô
;

238 
rc
 = 
	`MQTTPublish
(&
£ssi⁄
->
˛õ¡
, 
t›ic
, &
mesßge
);

240 
exô
:

241 i‡(
t›ic
 !
NULL
)

242 
	`‰ì
(
t›ic
);

243 i‡(
∑ylﬂd
 !
NULL
)

244 
	`‰ì
(
∑ylﬂd
);

245  
rc
;

246 
	}
}

	@libttn/connector.h

4 #i‡!
deföed
(
__TTN_GW_H_
)

5 
	#__TTN_GW_H_


	)

7 
	~<°döt.h
>

9 
	#MAX_ID_LENGTH
 32

	)

10 
	#SEND_DISCONNECT_WILL
 1

	)

11 
	#SEND_CONNECT
 1

	)

13 
	~"g©eway.pb-c.h
"

14 
	~"rouãr.pb-c.h
"

15 
	~"ty≥s.pb-c.h
"

17 
	tTTN
;

18 (*
	tTTNDow∆ökH™dÀr
)(
	tRouãr__Dow∆ökMesßge
 *, *);

21 
	`ângwc_öô
(
TTN
 **
£ssi⁄
, c⁄° *
id
, 
TTNDow∆ökH™dÀr
, *);

24 
	`ângwc_˛ónup
(
TTN
 *
£ssi⁄
);

28 
	`ângwc_c⁄√˘
(
TTN
 *
£ssi⁄
, c⁄° *
ho°_«me
, 
p‹t
,

29 c⁄° *
key
);

33 
	`ângwc_disc⁄√˘
(
TTN
 *
£ssi⁄
);

37 
	`ângwc_£nd_u∂ök
(
TTN
 *
£ssi⁄
, 
Rouãr__U∂ökMesßge
 *
u∂ök
);

41 
	`ângwc_£nd_°©us
(
TTN
 *
£ssi⁄
, 
G©eway__Sètus
 *
°©us
);

45 
	`ângwc_£ndpög
(*
s
);

49 
	`ângwc_gëπt
(*
s
);

53 
	`ângwc_checkc⁄√˘ed
(
TTN
 *
£ssi⁄
);

	@libttn/descriptor.pb-c.c

5 #i‚de‡
PROTOBUF_C__NO_DEPRECATED


6 
	#PROTOBUF_C__NO_DEPRECATED


	)

9 
	~"des¸ùt‹.pb-c.h
"

10 
	ggoogÀ__¥Ÿobuf__fûe_des¸ùt‹_£t__öô


11 (
GoogÀ__PrŸobuf__FûeDes¸ùt‹Së
 *
	gmesßge
)

13 
GoogÀ__PrŸobuf__FûeDes¸ùt‹Së
 
	göô_vÆue
 = 
GOOGLE__PROTOBUF__FILE_DESCRIPTOR_SET__INIT
;

14 *
	gmesßge
 = 
öô_vÆue
;

16 
size_t
 
	ggoogÀ__¥Ÿobuf__fûe_des¸ùt‹_£t__gë_∑cked_size


17 (c⁄° 
GoogÀ__PrŸobuf__FûeDes¸ùt‹Së
 *
	gmesßge
)

19 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__fûe_des¸ùt‹_£t__des¸ùt‹
);

20  
¥Ÿobuf_c_mesßge_gë_∑cked_size
 ((c⁄° 
PrŸobufCMesßge
*)(
mesßge
));

22 
size_t
 
	ggoogÀ__¥Ÿobuf__fûe_des¸ùt‹_£t__∑ck


23 (c⁄° 
GoogÀ__PrŸobuf__FûeDes¸ùt‹Së
 *
	gmesßge
,

24 
uöt8_t
 *
	gout
)

26 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__fûe_des¸ùt‹_£t__des¸ùt‹
);

27  
¥Ÿobuf_c_mesßge_∑ck
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
out
);

29 
size_t
 
	ggoogÀ__¥Ÿobuf__fûe_des¸ùt‹_£t__∑ck_to_buf„r


30 (c⁄° 
GoogÀ__PrŸobuf__FûeDes¸ùt‹Së
 *
	gmesßge
,

31 
PrŸobufCBuf„r
 *
	gbuf„r
)

33 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__fûe_des¸ùt‹_£t__des¸ùt‹
);

34  
¥Ÿobuf_c_mesßge_∑ck_to_buf„r
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
buf„r
);

36 
GoogÀ__PrŸobuf__FûeDes¸ùt‹Së
 *

37 
	ggoogÀ__¥Ÿobuf__fûe_des¸ùt‹_£t__u≈ack


38 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

39 
size_t
 
	gÀn
,

40 c⁄° 
uöt8_t
 *
	gd©a
)

42  (
	gGoogÀ__PrŸobuf__FûeDes¸ùt‹Së
 *)

43 
¥Ÿobuf_c_mesßge_u≈ack
 (&
googÀ__¥Ÿobuf__fûe_des¸ùt‹_£t__des¸ùt‹
,

44 
Æloˇt‹
, 
Àn
, 
d©a
);

46 
	ggoogÀ__¥Ÿobuf__fûe_des¸ùt‹_£t__‰ì_u≈acked


47 (
GoogÀ__PrŸobuf__FûeDes¸ùt‹Së
 *
	gmesßge
,

48 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
)

50 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__fûe_des¸ùt‹_£t__des¸ùt‹
);

51 
¥Ÿobuf_c_mesßge_‰ì_u≈acked
 ((
PrŸobufCMesßge
*)
mesßge
, 
Æloˇt‹
);

53 
	ggoogÀ__¥Ÿobuf__fûe_des¸ùt‹_¥Ÿo__öô


54 (
GoogÀ__PrŸobuf__FûeDes¸ùt‹PrŸo
 *
	gmesßge
)

56 
GoogÀ__PrŸobuf__FûeDes¸ùt‹PrŸo
 
	göô_vÆue
 = 
GOOGLE__PROTOBUF__FILE_DESCRIPTOR_PROTO__INIT
;

57 *
	gmesßge
 = 
öô_vÆue
;

59 
size_t
 
	ggoogÀ__¥Ÿobuf__fûe_des¸ùt‹_¥Ÿo__gë_∑cked_size


60 (c⁄° 
GoogÀ__PrŸobuf__FûeDes¸ùt‹PrŸo
 *
	gmesßge
)

62 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__fûe_des¸ùt‹_¥Ÿo__des¸ùt‹
);

63  
¥Ÿobuf_c_mesßge_gë_∑cked_size
 ((c⁄° 
PrŸobufCMesßge
*)(
mesßge
));

65 
size_t
 
	ggoogÀ__¥Ÿobuf__fûe_des¸ùt‹_¥Ÿo__∑ck


66 (c⁄° 
GoogÀ__PrŸobuf__FûeDes¸ùt‹PrŸo
 *
	gmesßge
,

67 
uöt8_t
 *
	gout
)

69 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__fûe_des¸ùt‹_¥Ÿo__des¸ùt‹
);

70  
¥Ÿobuf_c_mesßge_∑ck
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
out
);

72 
size_t
 
	ggoogÀ__¥Ÿobuf__fûe_des¸ùt‹_¥Ÿo__∑ck_to_buf„r


73 (c⁄° 
GoogÀ__PrŸobuf__FûeDes¸ùt‹PrŸo
 *
	gmesßge
,

74 
PrŸobufCBuf„r
 *
	gbuf„r
)

76 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__fûe_des¸ùt‹_¥Ÿo__des¸ùt‹
);

77  
¥Ÿobuf_c_mesßge_∑ck_to_buf„r
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
buf„r
);

79 
GoogÀ__PrŸobuf__FûeDes¸ùt‹PrŸo
 *

80 
	ggoogÀ__¥Ÿobuf__fûe_des¸ùt‹_¥Ÿo__u≈ack


81 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

82 
size_t
 
	gÀn
,

83 c⁄° 
uöt8_t
 *
	gd©a
)

85  (
	gGoogÀ__PrŸobuf__FûeDes¸ùt‹PrŸo
 *)

86 
¥Ÿobuf_c_mesßge_u≈ack
 (&
googÀ__¥Ÿobuf__fûe_des¸ùt‹_¥Ÿo__des¸ùt‹
,

87 
Æloˇt‹
, 
Àn
, 
d©a
);

89 
	ggoogÀ__¥Ÿobuf__fûe_des¸ùt‹_¥Ÿo__‰ì_u≈acked


90 (
GoogÀ__PrŸobuf__FûeDes¸ùt‹PrŸo
 *
	gmesßge
,

91 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
)

93 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__fûe_des¸ùt‹_¥Ÿo__des¸ùt‹
);

94 
¥Ÿobuf_c_mesßge_‰ì_u≈acked
 ((
PrŸobufCMesßge
*)
mesßge
, 
Æloˇt‹
);

96 
	ggoogÀ__¥Ÿobuf__des¸ùt‹_¥Ÿo__exãnsi⁄_ønge__öô


97 (
GoogÀ__PrŸobuf__Des¸ùt‹PrŸo__Exãnsi⁄R™ge
 *
	gmesßge
)

99 
GoogÀ__PrŸobuf__Des¸ùt‹PrŸo__Exãnsi⁄R™ge
 
	göô_vÆue
 = 
GOOGLE__PROTOBUF__DESCRIPTOR_PROTO__EXTENSION_RANGE__INIT
;

100 *
	gmesßge
 = 
öô_vÆue
;

102 
	ggoogÀ__¥Ÿobuf__des¸ùt‹_¥Ÿo__ª£rved_ønge__öô


103 (
GoogÀ__PrŸobuf__Des¸ùt‹PrŸo__Re£rvedR™ge
 *
	gmesßge
)

105 
GoogÀ__PrŸobuf__Des¸ùt‹PrŸo__Re£rvedR™ge
 
	göô_vÆue
 = 
GOOGLE__PROTOBUF__DESCRIPTOR_PROTO__RESERVED_RANGE__INIT
;

106 *
	gmesßge
 = 
öô_vÆue
;

108 
	ggoogÀ__¥Ÿobuf__des¸ùt‹_¥Ÿo__öô


109 (
GoogÀ__PrŸobuf__Des¸ùt‹PrŸo
 *
	gmesßge
)

111 
GoogÀ__PrŸobuf__Des¸ùt‹PrŸo
 
	göô_vÆue
 = 
GOOGLE__PROTOBUF__DESCRIPTOR_PROTO__INIT
;

112 *
	gmesßge
 = 
öô_vÆue
;

114 
size_t
 
	ggoogÀ__¥Ÿobuf__des¸ùt‹_¥Ÿo__gë_∑cked_size


115 (c⁄° 
GoogÀ__PrŸobuf__Des¸ùt‹PrŸo
 *
	gmesßge
)

117 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__des¸ùt‹_¥Ÿo__des¸ùt‹
);

118  
¥Ÿobuf_c_mesßge_gë_∑cked_size
 ((c⁄° 
PrŸobufCMesßge
*)(
mesßge
));

120 
size_t
 
	ggoogÀ__¥Ÿobuf__des¸ùt‹_¥Ÿo__∑ck


121 (c⁄° 
GoogÀ__PrŸobuf__Des¸ùt‹PrŸo
 *
	gmesßge
,

122 
uöt8_t
 *
	gout
)

124 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__des¸ùt‹_¥Ÿo__des¸ùt‹
);

125  
¥Ÿobuf_c_mesßge_∑ck
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
out
);

127 
size_t
 
	ggoogÀ__¥Ÿobuf__des¸ùt‹_¥Ÿo__∑ck_to_buf„r


128 (c⁄° 
GoogÀ__PrŸobuf__Des¸ùt‹PrŸo
 *
	gmesßge
,

129 
PrŸobufCBuf„r
 *
	gbuf„r
)

131 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__des¸ùt‹_¥Ÿo__des¸ùt‹
);

132  
¥Ÿobuf_c_mesßge_∑ck_to_buf„r
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
buf„r
);

134 
GoogÀ__PrŸobuf__Des¸ùt‹PrŸo
 *

135 
	ggoogÀ__¥Ÿobuf__des¸ùt‹_¥Ÿo__u≈ack


136 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

137 
size_t
 
	gÀn
,

138 c⁄° 
uöt8_t
 *
	gd©a
)

140  (
	gGoogÀ__PrŸobuf__Des¸ùt‹PrŸo
 *)

141 
¥Ÿobuf_c_mesßge_u≈ack
 (&
googÀ__¥Ÿobuf__des¸ùt‹_¥Ÿo__des¸ùt‹
,

142 
Æloˇt‹
, 
Àn
, 
d©a
);

144 
	ggoogÀ__¥Ÿobuf__des¸ùt‹_¥Ÿo__‰ì_u≈acked


145 (
GoogÀ__PrŸobuf__Des¸ùt‹PrŸo
 *
	gmesßge
,

146 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
)

148 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__des¸ùt‹_¥Ÿo__des¸ùt‹
);

149 
¥Ÿobuf_c_mesßge_‰ì_u≈acked
 ((
PrŸobufCMesßge
*)
mesßge
, 
Æloˇt‹
);

151 
	ggoogÀ__¥Ÿobuf__fõld_des¸ùt‹_¥Ÿo__öô


152 (
GoogÀ__PrŸobuf__FõldDes¸ùt‹PrŸo
 *
	gmesßge
)

154 
GoogÀ__PrŸobuf__FõldDes¸ùt‹PrŸo
 
	göô_vÆue
 = 
GOOGLE__PROTOBUF__FIELD_DESCRIPTOR_PROTO__INIT
;

155 *
	gmesßge
 = 
öô_vÆue
;

157 
size_t
 
	ggoogÀ__¥Ÿobuf__fõld_des¸ùt‹_¥Ÿo__gë_∑cked_size


158 (c⁄° 
GoogÀ__PrŸobuf__FõldDes¸ùt‹PrŸo
 *
	gmesßge
)

160 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__fõld_des¸ùt‹_¥Ÿo__des¸ùt‹
);

161  
¥Ÿobuf_c_mesßge_gë_∑cked_size
 ((c⁄° 
PrŸobufCMesßge
*)(
mesßge
));

163 
size_t
 
	ggoogÀ__¥Ÿobuf__fõld_des¸ùt‹_¥Ÿo__∑ck


164 (c⁄° 
GoogÀ__PrŸobuf__FõldDes¸ùt‹PrŸo
 *
	gmesßge
,

165 
uöt8_t
 *
	gout
)

167 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__fõld_des¸ùt‹_¥Ÿo__des¸ùt‹
);

168  
¥Ÿobuf_c_mesßge_∑ck
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
out
);

170 
size_t
 
	ggoogÀ__¥Ÿobuf__fõld_des¸ùt‹_¥Ÿo__∑ck_to_buf„r


171 (c⁄° 
GoogÀ__PrŸobuf__FõldDes¸ùt‹PrŸo
 *
	gmesßge
,

172 
PrŸobufCBuf„r
 *
	gbuf„r
)

174 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__fõld_des¸ùt‹_¥Ÿo__des¸ùt‹
);

175  
¥Ÿobuf_c_mesßge_∑ck_to_buf„r
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
buf„r
);

177 
GoogÀ__PrŸobuf__FõldDes¸ùt‹PrŸo
 *

178 
	ggoogÀ__¥Ÿobuf__fõld_des¸ùt‹_¥Ÿo__u≈ack


179 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

180 
size_t
 
	gÀn
,

181 c⁄° 
uöt8_t
 *
	gd©a
)

183  (
	gGoogÀ__PrŸobuf__FõldDes¸ùt‹PrŸo
 *)

184 
¥Ÿobuf_c_mesßge_u≈ack
 (&
googÀ__¥Ÿobuf__fõld_des¸ùt‹_¥Ÿo__des¸ùt‹
,

185 
Æloˇt‹
, 
Àn
, 
d©a
);

187 
	ggoogÀ__¥Ÿobuf__fõld_des¸ùt‹_¥Ÿo__‰ì_u≈acked


188 (
GoogÀ__PrŸobuf__FõldDes¸ùt‹PrŸo
 *
	gmesßge
,

189 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
)

191 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__fõld_des¸ùt‹_¥Ÿo__des¸ùt‹
);

192 
¥Ÿobuf_c_mesßge_‰ì_u≈acked
 ((
PrŸobufCMesßge
*)
mesßge
, 
Æloˇt‹
);

194 
	ggoogÀ__¥Ÿobuf__⁄eof_des¸ùt‹_¥Ÿo__öô


195 (
GoogÀ__PrŸobuf__O√ofDes¸ùt‹PrŸo
 *
	gmesßge
)

197 
GoogÀ__PrŸobuf__O√ofDes¸ùt‹PrŸo
 
	göô_vÆue
 = 
GOOGLE__PROTOBUF__ONEOF_DESCRIPTOR_PROTO__INIT
;

198 *
	gmesßge
 = 
öô_vÆue
;

200 
size_t
 
	ggoogÀ__¥Ÿobuf__⁄eof_des¸ùt‹_¥Ÿo__gë_∑cked_size


201 (c⁄° 
GoogÀ__PrŸobuf__O√ofDes¸ùt‹PrŸo
 *
	gmesßge
)

203 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__⁄eof_des¸ùt‹_¥Ÿo__des¸ùt‹
);

204  
¥Ÿobuf_c_mesßge_gë_∑cked_size
 ((c⁄° 
PrŸobufCMesßge
*)(
mesßge
));

206 
size_t
 
	ggoogÀ__¥Ÿobuf__⁄eof_des¸ùt‹_¥Ÿo__∑ck


207 (c⁄° 
GoogÀ__PrŸobuf__O√ofDes¸ùt‹PrŸo
 *
	gmesßge
,

208 
uöt8_t
 *
	gout
)

210 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__⁄eof_des¸ùt‹_¥Ÿo__des¸ùt‹
);

211  
¥Ÿobuf_c_mesßge_∑ck
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
out
);

213 
size_t
 
	ggoogÀ__¥Ÿobuf__⁄eof_des¸ùt‹_¥Ÿo__∑ck_to_buf„r


214 (c⁄° 
GoogÀ__PrŸobuf__O√ofDes¸ùt‹PrŸo
 *
	gmesßge
,

215 
PrŸobufCBuf„r
 *
	gbuf„r
)

217 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__⁄eof_des¸ùt‹_¥Ÿo__des¸ùt‹
);

218  
¥Ÿobuf_c_mesßge_∑ck_to_buf„r
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
buf„r
);

220 
GoogÀ__PrŸobuf__O√ofDes¸ùt‹PrŸo
 *

221 
	ggoogÀ__¥Ÿobuf__⁄eof_des¸ùt‹_¥Ÿo__u≈ack


222 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

223 
size_t
 
	gÀn
,

224 c⁄° 
uöt8_t
 *
	gd©a
)

226  (
	gGoogÀ__PrŸobuf__O√ofDes¸ùt‹PrŸo
 *)

227 
¥Ÿobuf_c_mesßge_u≈ack
 (&
googÀ__¥Ÿobuf__⁄eof_des¸ùt‹_¥Ÿo__des¸ùt‹
,

228 
Æloˇt‹
, 
Àn
, 
d©a
);

230 
	ggoogÀ__¥Ÿobuf__⁄eof_des¸ùt‹_¥Ÿo__‰ì_u≈acked


231 (
GoogÀ__PrŸobuf__O√ofDes¸ùt‹PrŸo
 *
	gmesßge
,

232 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
)

234 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__⁄eof_des¸ùt‹_¥Ÿo__des¸ùt‹
);

235 
¥Ÿobuf_c_mesßge_‰ì_u≈acked
 ((
PrŸobufCMesßge
*)
mesßge
, 
Æloˇt‹
);

237 
	ggoogÀ__¥Ÿobuf__íum_des¸ùt‹_¥Ÿo__öô


238 (
GoogÀ__PrŸobuf__EnumDes¸ùt‹PrŸo
 *
	gmesßge
)

240 
GoogÀ__PrŸobuf__EnumDes¸ùt‹PrŸo
 
	göô_vÆue
 = 
GOOGLE__PROTOBUF__ENUM_DESCRIPTOR_PROTO__INIT
;

241 *
	gmesßge
 = 
öô_vÆue
;

243 
size_t
 
	ggoogÀ__¥Ÿobuf__íum_des¸ùt‹_¥Ÿo__gë_∑cked_size


244 (c⁄° 
GoogÀ__PrŸobuf__EnumDes¸ùt‹PrŸo
 *
	gmesßge
)

246 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__íum_des¸ùt‹_¥Ÿo__des¸ùt‹
);

247  
¥Ÿobuf_c_mesßge_gë_∑cked_size
 ((c⁄° 
PrŸobufCMesßge
*)(
mesßge
));

249 
size_t
 
	ggoogÀ__¥Ÿobuf__íum_des¸ùt‹_¥Ÿo__∑ck


250 (c⁄° 
GoogÀ__PrŸobuf__EnumDes¸ùt‹PrŸo
 *
	gmesßge
,

251 
uöt8_t
 *
	gout
)

253 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__íum_des¸ùt‹_¥Ÿo__des¸ùt‹
);

254  
¥Ÿobuf_c_mesßge_∑ck
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
out
);

256 
size_t
 
	ggoogÀ__¥Ÿobuf__íum_des¸ùt‹_¥Ÿo__∑ck_to_buf„r


257 (c⁄° 
GoogÀ__PrŸobuf__EnumDes¸ùt‹PrŸo
 *
	gmesßge
,

258 
PrŸobufCBuf„r
 *
	gbuf„r
)

260 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__íum_des¸ùt‹_¥Ÿo__des¸ùt‹
);

261  
¥Ÿobuf_c_mesßge_∑ck_to_buf„r
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
buf„r
);

263 
GoogÀ__PrŸobuf__EnumDes¸ùt‹PrŸo
 *

264 
	ggoogÀ__¥Ÿobuf__íum_des¸ùt‹_¥Ÿo__u≈ack


265 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

266 
size_t
 
	gÀn
,

267 c⁄° 
uöt8_t
 *
	gd©a
)

269  (
	gGoogÀ__PrŸobuf__EnumDes¸ùt‹PrŸo
 *)

270 
¥Ÿobuf_c_mesßge_u≈ack
 (&
googÀ__¥Ÿobuf__íum_des¸ùt‹_¥Ÿo__des¸ùt‹
,

271 
Æloˇt‹
, 
Àn
, 
d©a
);

273 
	ggoogÀ__¥Ÿobuf__íum_des¸ùt‹_¥Ÿo__‰ì_u≈acked


274 (
GoogÀ__PrŸobuf__EnumDes¸ùt‹PrŸo
 *
	gmesßge
,

275 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
)

277 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__íum_des¸ùt‹_¥Ÿo__des¸ùt‹
);

278 
¥Ÿobuf_c_mesßge_‰ì_u≈acked
 ((
PrŸobufCMesßge
*)
mesßge
, 
Æloˇt‹
);

280 
	ggoogÀ__¥Ÿobuf__íum_vÆue_des¸ùt‹_¥Ÿo__öô


281 (
GoogÀ__PrŸobuf__EnumVÆueDes¸ùt‹PrŸo
 *
	gmesßge
)

283 
GoogÀ__PrŸobuf__EnumVÆueDes¸ùt‹PrŸo
 
	göô_vÆue
 = 
GOOGLE__PROTOBUF__ENUM_VALUE_DESCRIPTOR_PROTO__INIT
;

284 *
	gmesßge
 = 
öô_vÆue
;

286 
size_t
 
	ggoogÀ__¥Ÿobuf__íum_vÆue_des¸ùt‹_¥Ÿo__gë_∑cked_size


287 (c⁄° 
GoogÀ__PrŸobuf__EnumVÆueDes¸ùt‹PrŸo
 *
	gmesßge
)

289 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__íum_vÆue_des¸ùt‹_¥Ÿo__des¸ùt‹
);

290  
¥Ÿobuf_c_mesßge_gë_∑cked_size
 ((c⁄° 
PrŸobufCMesßge
*)(
mesßge
));

292 
size_t
 
	ggoogÀ__¥Ÿobuf__íum_vÆue_des¸ùt‹_¥Ÿo__∑ck


293 (c⁄° 
GoogÀ__PrŸobuf__EnumVÆueDes¸ùt‹PrŸo
 *
	gmesßge
,

294 
uöt8_t
 *
	gout
)

296 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__íum_vÆue_des¸ùt‹_¥Ÿo__des¸ùt‹
);

297  
¥Ÿobuf_c_mesßge_∑ck
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
out
);

299 
size_t
 
	ggoogÀ__¥Ÿobuf__íum_vÆue_des¸ùt‹_¥Ÿo__∑ck_to_buf„r


300 (c⁄° 
GoogÀ__PrŸobuf__EnumVÆueDes¸ùt‹PrŸo
 *
	gmesßge
,

301 
PrŸobufCBuf„r
 *
	gbuf„r
)

303 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__íum_vÆue_des¸ùt‹_¥Ÿo__des¸ùt‹
);

304  
¥Ÿobuf_c_mesßge_∑ck_to_buf„r
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
buf„r
);

306 
GoogÀ__PrŸobuf__EnumVÆueDes¸ùt‹PrŸo
 *

307 
	ggoogÀ__¥Ÿobuf__íum_vÆue_des¸ùt‹_¥Ÿo__u≈ack


308 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

309 
size_t
 
	gÀn
,

310 c⁄° 
uöt8_t
 *
	gd©a
)

312  (
	gGoogÀ__PrŸobuf__EnumVÆueDes¸ùt‹PrŸo
 *)

313 
¥Ÿobuf_c_mesßge_u≈ack
 (&
googÀ__¥Ÿobuf__íum_vÆue_des¸ùt‹_¥Ÿo__des¸ùt‹
,

314 
Æloˇt‹
, 
Àn
, 
d©a
);

316 
	ggoogÀ__¥Ÿobuf__íum_vÆue_des¸ùt‹_¥Ÿo__‰ì_u≈acked


317 (
GoogÀ__PrŸobuf__EnumVÆueDes¸ùt‹PrŸo
 *
	gmesßge
,

318 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
)

320 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__íum_vÆue_des¸ùt‹_¥Ÿo__des¸ùt‹
);

321 
¥Ÿobuf_c_mesßge_‰ì_u≈acked
 ((
PrŸobufCMesßge
*)
mesßge
, 
Æloˇt‹
);

323 
	ggoogÀ__¥Ÿobuf__£rvi˚_des¸ùt‹_¥Ÿo__öô


324 (
GoogÀ__PrŸobuf__Sîvi˚Des¸ùt‹PrŸo
 *
	gmesßge
)

326 
GoogÀ__PrŸobuf__Sîvi˚Des¸ùt‹PrŸo
 
	göô_vÆue
 = 
GOOGLE__PROTOBUF__SERVICE_DESCRIPTOR_PROTO__INIT
;

327 *
	gmesßge
 = 
öô_vÆue
;

329 
size_t
 
	ggoogÀ__¥Ÿobuf__£rvi˚_des¸ùt‹_¥Ÿo__gë_∑cked_size


330 (c⁄° 
GoogÀ__PrŸobuf__Sîvi˚Des¸ùt‹PrŸo
 *
	gmesßge
)

332 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__£rvi˚_des¸ùt‹_¥Ÿo__des¸ùt‹
);

333  
¥Ÿobuf_c_mesßge_gë_∑cked_size
 ((c⁄° 
PrŸobufCMesßge
*)(
mesßge
));

335 
size_t
 
	ggoogÀ__¥Ÿobuf__£rvi˚_des¸ùt‹_¥Ÿo__∑ck


336 (c⁄° 
GoogÀ__PrŸobuf__Sîvi˚Des¸ùt‹PrŸo
 *
	gmesßge
,

337 
uöt8_t
 *
	gout
)

339 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__£rvi˚_des¸ùt‹_¥Ÿo__des¸ùt‹
);

340  
¥Ÿobuf_c_mesßge_∑ck
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
out
);

342 
size_t
 
	ggoogÀ__¥Ÿobuf__£rvi˚_des¸ùt‹_¥Ÿo__∑ck_to_buf„r


343 (c⁄° 
GoogÀ__PrŸobuf__Sîvi˚Des¸ùt‹PrŸo
 *
	gmesßge
,

344 
PrŸobufCBuf„r
 *
	gbuf„r
)

346 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__£rvi˚_des¸ùt‹_¥Ÿo__des¸ùt‹
);

347  
¥Ÿobuf_c_mesßge_∑ck_to_buf„r
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
buf„r
);

349 
GoogÀ__PrŸobuf__Sîvi˚Des¸ùt‹PrŸo
 *

350 
	ggoogÀ__¥Ÿobuf__£rvi˚_des¸ùt‹_¥Ÿo__u≈ack


351 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

352 
size_t
 
	gÀn
,

353 c⁄° 
uöt8_t
 *
	gd©a
)

355  (
	gGoogÀ__PrŸobuf__Sîvi˚Des¸ùt‹PrŸo
 *)

356 
¥Ÿobuf_c_mesßge_u≈ack
 (&
googÀ__¥Ÿobuf__£rvi˚_des¸ùt‹_¥Ÿo__des¸ùt‹
,

357 
Æloˇt‹
, 
Àn
, 
d©a
);

359 
	ggoogÀ__¥Ÿobuf__£rvi˚_des¸ùt‹_¥Ÿo__‰ì_u≈acked


360 (
GoogÀ__PrŸobuf__Sîvi˚Des¸ùt‹PrŸo
 *
	gmesßge
,

361 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
)

363 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__£rvi˚_des¸ùt‹_¥Ÿo__des¸ùt‹
);

364 
¥Ÿobuf_c_mesßge_‰ì_u≈acked
 ((
PrŸobufCMesßge
*)
mesßge
, 
Æloˇt‹
);

366 
	ggoogÀ__¥Ÿobuf__mëhod_des¸ùt‹_¥Ÿo__öô


367 (
GoogÀ__PrŸobuf__MëhodDes¸ùt‹PrŸo
 *
	gmesßge
)

369 
GoogÀ__PrŸobuf__MëhodDes¸ùt‹PrŸo
 
	göô_vÆue
 = 
GOOGLE__PROTOBUF__METHOD_DESCRIPTOR_PROTO__INIT
;

370 *
	gmesßge
 = 
öô_vÆue
;

372 
size_t
 
	ggoogÀ__¥Ÿobuf__mëhod_des¸ùt‹_¥Ÿo__gë_∑cked_size


373 (c⁄° 
GoogÀ__PrŸobuf__MëhodDes¸ùt‹PrŸo
 *
	gmesßge
)

375 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__mëhod_des¸ùt‹_¥Ÿo__des¸ùt‹
);

376  
¥Ÿobuf_c_mesßge_gë_∑cked_size
 ((c⁄° 
PrŸobufCMesßge
*)(
mesßge
));

378 
size_t
 
	ggoogÀ__¥Ÿobuf__mëhod_des¸ùt‹_¥Ÿo__∑ck


379 (c⁄° 
GoogÀ__PrŸobuf__MëhodDes¸ùt‹PrŸo
 *
	gmesßge
,

380 
uöt8_t
 *
	gout
)

382 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__mëhod_des¸ùt‹_¥Ÿo__des¸ùt‹
);

383  
¥Ÿobuf_c_mesßge_∑ck
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
out
);

385 
size_t
 
	ggoogÀ__¥Ÿobuf__mëhod_des¸ùt‹_¥Ÿo__∑ck_to_buf„r


386 (c⁄° 
GoogÀ__PrŸobuf__MëhodDes¸ùt‹PrŸo
 *
	gmesßge
,

387 
PrŸobufCBuf„r
 *
	gbuf„r
)

389 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__mëhod_des¸ùt‹_¥Ÿo__des¸ùt‹
);

390  
¥Ÿobuf_c_mesßge_∑ck_to_buf„r
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
buf„r
);

392 
GoogÀ__PrŸobuf__MëhodDes¸ùt‹PrŸo
 *

393 
	ggoogÀ__¥Ÿobuf__mëhod_des¸ùt‹_¥Ÿo__u≈ack


394 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

395 
size_t
 
	gÀn
,

396 c⁄° 
uöt8_t
 *
	gd©a
)

398  (
	gGoogÀ__PrŸobuf__MëhodDes¸ùt‹PrŸo
 *)

399 
¥Ÿobuf_c_mesßge_u≈ack
 (&
googÀ__¥Ÿobuf__mëhod_des¸ùt‹_¥Ÿo__des¸ùt‹
,

400 
Æloˇt‹
, 
Àn
, 
d©a
);

402 
	ggoogÀ__¥Ÿobuf__mëhod_des¸ùt‹_¥Ÿo__‰ì_u≈acked


403 (
GoogÀ__PrŸobuf__MëhodDes¸ùt‹PrŸo
 *
	gmesßge
,

404 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
)

406 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__mëhod_des¸ùt‹_¥Ÿo__des¸ùt‹
);

407 
¥Ÿobuf_c_mesßge_‰ì_u≈acked
 ((
PrŸobufCMesßge
*)
mesßge
, 
Æloˇt‹
);

409 
	ggoogÀ__¥Ÿobuf__fûe_›ti⁄s__öô


410 (
GoogÀ__PrŸobuf__FûeO±i⁄s
 *
	gmesßge
)

412 
GoogÀ__PrŸobuf__FûeO±i⁄s
 
	göô_vÆue
 = 
GOOGLE__PROTOBUF__FILE_OPTIONS__INIT
;

413 *
	gmesßge
 = 
öô_vÆue
;

415 
size_t
 
	ggoogÀ__¥Ÿobuf__fûe_›ti⁄s__gë_∑cked_size


416 (c⁄° 
GoogÀ__PrŸobuf__FûeO±i⁄s
 *
	gmesßge
)

418 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__fûe_›ti⁄s__des¸ùt‹
);

419  
¥Ÿobuf_c_mesßge_gë_∑cked_size
 ((c⁄° 
PrŸobufCMesßge
*)(
mesßge
));

421 
size_t
 
	ggoogÀ__¥Ÿobuf__fûe_›ti⁄s__∑ck


422 (c⁄° 
GoogÀ__PrŸobuf__FûeO±i⁄s
 *
	gmesßge
,

423 
uöt8_t
 *
	gout
)

425 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__fûe_›ti⁄s__des¸ùt‹
);

426  
¥Ÿobuf_c_mesßge_∑ck
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
out
);

428 
size_t
 
	ggoogÀ__¥Ÿobuf__fûe_›ti⁄s__∑ck_to_buf„r


429 (c⁄° 
GoogÀ__PrŸobuf__FûeO±i⁄s
 *
	gmesßge
,

430 
PrŸobufCBuf„r
 *
	gbuf„r
)

432 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__fûe_›ti⁄s__des¸ùt‹
);

433  
¥Ÿobuf_c_mesßge_∑ck_to_buf„r
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
buf„r
);

435 
GoogÀ__PrŸobuf__FûeO±i⁄s
 *

436 
	ggoogÀ__¥Ÿobuf__fûe_›ti⁄s__u≈ack


437 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

438 
size_t
 
	gÀn
,

439 c⁄° 
uöt8_t
 *
	gd©a
)

441  (
	gGoogÀ__PrŸobuf__FûeO±i⁄s
 *)

442 
¥Ÿobuf_c_mesßge_u≈ack
 (&
googÀ__¥Ÿobuf__fûe_›ti⁄s__des¸ùt‹
,

443 
Æloˇt‹
, 
Àn
, 
d©a
);

445 
	ggoogÀ__¥Ÿobuf__fûe_›ti⁄s__‰ì_u≈acked


446 (
GoogÀ__PrŸobuf__FûeO±i⁄s
 *
	gmesßge
,

447 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
)

449 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__fûe_›ti⁄s__des¸ùt‹
);

450 
¥Ÿobuf_c_mesßge_‰ì_u≈acked
 ((
PrŸobufCMesßge
*)
mesßge
, 
Æloˇt‹
);

452 
	ggoogÀ__¥Ÿobuf__mesßge_›ti⁄s__öô


453 (
GoogÀ__PrŸobuf__MesßgeO±i⁄s
 *
	gmesßge
)

455 
GoogÀ__PrŸobuf__MesßgeO±i⁄s
 
	göô_vÆue
 = 
GOOGLE__PROTOBUF__MESSAGE_OPTIONS__INIT
;

456 *
	gmesßge
 = 
öô_vÆue
;

458 
size_t
 
	ggoogÀ__¥Ÿobuf__mesßge_›ti⁄s__gë_∑cked_size


459 (c⁄° 
GoogÀ__PrŸobuf__MesßgeO±i⁄s
 *
	gmesßge
)

461 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__mesßge_›ti⁄s__des¸ùt‹
);

462  
¥Ÿobuf_c_mesßge_gë_∑cked_size
 ((c⁄° 
PrŸobufCMesßge
*)(
mesßge
));

464 
size_t
 
	ggoogÀ__¥Ÿobuf__mesßge_›ti⁄s__∑ck


465 (c⁄° 
GoogÀ__PrŸobuf__MesßgeO±i⁄s
 *
	gmesßge
,

466 
uöt8_t
 *
	gout
)

468 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__mesßge_›ti⁄s__des¸ùt‹
);

469  
¥Ÿobuf_c_mesßge_∑ck
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
out
);

471 
size_t
 
	ggoogÀ__¥Ÿobuf__mesßge_›ti⁄s__∑ck_to_buf„r


472 (c⁄° 
GoogÀ__PrŸobuf__MesßgeO±i⁄s
 *
	gmesßge
,

473 
PrŸobufCBuf„r
 *
	gbuf„r
)

475 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__mesßge_›ti⁄s__des¸ùt‹
);

476  
¥Ÿobuf_c_mesßge_∑ck_to_buf„r
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
buf„r
);

478 
GoogÀ__PrŸobuf__MesßgeO±i⁄s
 *

479 
	ggoogÀ__¥Ÿobuf__mesßge_›ti⁄s__u≈ack


480 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

481 
size_t
 
	gÀn
,

482 c⁄° 
uöt8_t
 *
	gd©a
)

484  (
	gGoogÀ__PrŸobuf__MesßgeO±i⁄s
 *)

485 
¥Ÿobuf_c_mesßge_u≈ack
 (&
googÀ__¥Ÿobuf__mesßge_›ti⁄s__des¸ùt‹
,

486 
Æloˇt‹
, 
Àn
, 
d©a
);

488 
	ggoogÀ__¥Ÿobuf__mesßge_›ti⁄s__‰ì_u≈acked


489 (
GoogÀ__PrŸobuf__MesßgeO±i⁄s
 *
	gmesßge
,

490 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
)

492 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__mesßge_›ti⁄s__des¸ùt‹
);

493 
¥Ÿobuf_c_mesßge_‰ì_u≈acked
 ((
PrŸobufCMesßge
*)
mesßge
, 
Æloˇt‹
);

495 
	ggoogÀ__¥Ÿobuf__fõld_›ti⁄s__öô


496 (
GoogÀ__PrŸobuf__FõldO±i⁄s
 *
	gmesßge
)

498 
GoogÀ__PrŸobuf__FõldO±i⁄s
 
	göô_vÆue
 = 
GOOGLE__PROTOBUF__FIELD_OPTIONS__INIT
;

499 *
	gmesßge
 = 
öô_vÆue
;

501 
size_t
 
	ggoogÀ__¥Ÿobuf__fõld_›ti⁄s__gë_∑cked_size


502 (c⁄° 
GoogÀ__PrŸobuf__FõldO±i⁄s
 *
	gmesßge
)

504 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__fõld_›ti⁄s__des¸ùt‹
);

505  
¥Ÿobuf_c_mesßge_gë_∑cked_size
 ((c⁄° 
PrŸobufCMesßge
*)(
mesßge
));

507 
size_t
 
	ggoogÀ__¥Ÿobuf__fõld_›ti⁄s__∑ck


508 (c⁄° 
GoogÀ__PrŸobuf__FõldO±i⁄s
 *
	gmesßge
,

509 
uöt8_t
 *
	gout
)

511 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__fõld_›ti⁄s__des¸ùt‹
);

512  
¥Ÿobuf_c_mesßge_∑ck
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
out
);

514 
size_t
 
	ggoogÀ__¥Ÿobuf__fõld_›ti⁄s__∑ck_to_buf„r


515 (c⁄° 
GoogÀ__PrŸobuf__FõldO±i⁄s
 *
	gmesßge
,

516 
PrŸobufCBuf„r
 *
	gbuf„r
)

518 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__fõld_›ti⁄s__des¸ùt‹
);

519  
¥Ÿobuf_c_mesßge_∑ck_to_buf„r
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
buf„r
);

521 
GoogÀ__PrŸobuf__FõldO±i⁄s
 *

522 
	ggoogÀ__¥Ÿobuf__fõld_›ti⁄s__u≈ack


523 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

524 
size_t
 
	gÀn
,

525 c⁄° 
uöt8_t
 *
	gd©a
)

527  (
	gGoogÀ__PrŸobuf__FõldO±i⁄s
 *)

528 
¥Ÿobuf_c_mesßge_u≈ack
 (&
googÀ__¥Ÿobuf__fõld_›ti⁄s__des¸ùt‹
,

529 
Æloˇt‹
, 
Àn
, 
d©a
);

531 
	ggoogÀ__¥Ÿobuf__fõld_›ti⁄s__‰ì_u≈acked


532 (
GoogÀ__PrŸobuf__FõldO±i⁄s
 *
	gmesßge
,

533 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
)

535 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__fõld_›ti⁄s__des¸ùt‹
);

536 
¥Ÿobuf_c_mesßge_‰ì_u≈acked
 ((
PrŸobufCMesßge
*)
mesßge
, 
Æloˇt‹
);

538 
	ggoogÀ__¥Ÿobuf__⁄eof_›ti⁄s__öô


539 (
GoogÀ__PrŸobuf__O√ofO±i⁄s
 *
	gmesßge
)

541 
GoogÀ__PrŸobuf__O√ofO±i⁄s
 
	göô_vÆue
 = 
GOOGLE__PROTOBUF__ONEOF_OPTIONS__INIT
;

542 *
	gmesßge
 = 
öô_vÆue
;

544 
size_t
 
	ggoogÀ__¥Ÿobuf__⁄eof_›ti⁄s__gë_∑cked_size


545 (c⁄° 
GoogÀ__PrŸobuf__O√ofO±i⁄s
 *
	gmesßge
)

547 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__⁄eof_›ti⁄s__des¸ùt‹
);

548  
¥Ÿobuf_c_mesßge_gë_∑cked_size
 ((c⁄° 
PrŸobufCMesßge
*)(
mesßge
));

550 
size_t
 
	ggoogÀ__¥Ÿobuf__⁄eof_›ti⁄s__∑ck


551 (c⁄° 
GoogÀ__PrŸobuf__O√ofO±i⁄s
 *
	gmesßge
,

552 
uöt8_t
 *
	gout
)

554 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__⁄eof_›ti⁄s__des¸ùt‹
);

555  
¥Ÿobuf_c_mesßge_∑ck
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
out
);

557 
size_t
 
	ggoogÀ__¥Ÿobuf__⁄eof_›ti⁄s__∑ck_to_buf„r


558 (c⁄° 
GoogÀ__PrŸobuf__O√ofO±i⁄s
 *
	gmesßge
,

559 
PrŸobufCBuf„r
 *
	gbuf„r
)

561 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__⁄eof_›ti⁄s__des¸ùt‹
);

562  
¥Ÿobuf_c_mesßge_∑ck_to_buf„r
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
buf„r
);

564 
GoogÀ__PrŸobuf__O√ofO±i⁄s
 *

565 
	ggoogÀ__¥Ÿobuf__⁄eof_›ti⁄s__u≈ack


566 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

567 
size_t
 
	gÀn
,

568 c⁄° 
uöt8_t
 *
	gd©a
)

570  (
	gGoogÀ__PrŸobuf__O√ofO±i⁄s
 *)

571 
¥Ÿobuf_c_mesßge_u≈ack
 (&
googÀ__¥Ÿobuf__⁄eof_›ti⁄s__des¸ùt‹
,

572 
Æloˇt‹
, 
Àn
, 
d©a
);

574 
	ggoogÀ__¥Ÿobuf__⁄eof_›ti⁄s__‰ì_u≈acked


575 (
GoogÀ__PrŸobuf__O√ofO±i⁄s
 *
	gmesßge
,

576 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
)

578 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__⁄eof_›ti⁄s__des¸ùt‹
);

579 
¥Ÿobuf_c_mesßge_‰ì_u≈acked
 ((
PrŸobufCMesßge
*)
mesßge
, 
Æloˇt‹
);

581 
	ggoogÀ__¥Ÿobuf__íum_›ti⁄s__öô


582 (
GoogÀ__PrŸobuf__EnumO±i⁄s
 *
	gmesßge
)

584 
GoogÀ__PrŸobuf__EnumO±i⁄s
 
	göô_vÆue
 = 
GOOGLE__PROTOBUF__ENUM_OPTIONS__INIT
;

585 *
	gmesßge
 = 
öô_vÆue
;

587 
size_t
 
	ggoogÀ__¥Ÿobuf__íum_›ti⁄s__gë_∑cked_size


588 (c⁄° 
GoogÀ__PrŸobuf__EnumO±i⁄s
 *
	gmesßge
)

590 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__íum_›ti⁄s__des¸ùt‹
);

591  
¥Ÿobuf_c_mesßge_gë_∑cked_size
 ((c⁄° 
PrŸobufCMesßge
*)(
mesßge
));

593 
size_t
 
	ggoogÀ__¥Ÿobuf__íum_›ti⁄s__∑ck


594 (c⁄° 
GoogÀ__PrŸobuf__EnumO±i⁄s
 *
	gmesßge
,

595 
uöt8_t
 *
	gout
)

597 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__íum_›ti⁄s__des¸ùt‹
);

598  
¥Ÿobuf_c_mesßge_∑ck
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
out
);

600 
size_t
 
	ggoogÀ__¥Ÿobuf__íum_›ti⁄s__∑ck_to_buf„r


601 (c⁄° 
GoogÀ__PrŸobuf__EnumO±i⁄s
 *
	gmesßge
,

602 
PrŸobufCBuf„r
 *
	gbuf„r
)

604 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__íum_›ti⁄s__des¸ùt‹
);

605  
¥Ÿobuf_c_mesßge_∑ck_to_buf„r
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
buf„r
);

607 
GoogÀ__PrŸobuf__EnumO±i⁄s
 *

608 
	ggoogÀ__¥Ÿobuf__íum_›ti⁄s__u≈ack


609 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

610 
size_t
 
	gÀn
,

611 c⁄° 
uöt8_t
 *
	gd©a
)

613  (
	gGoogÀ__PrŸobuf__EnumO±i⁄s
 *)

614 
¥Ÿobuf_c_mesßge_u≈ack
 (&
googÀ__¥Ÿobuf__íum_›ti⁄s__des¸ùt‹
,

615 
Æloˇt‹
, 
Àn
, 
d©a
);

617 
	ggoogÀ__¥Ÿobuf__íum_›ti⁄s__‰ì_u≈acked


618 (
GoogÀ__PrŸobuf__EnumO±i⁄s
 *
	gmesßge
,

619 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
)

621 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__íum_›ti⁄s__des¸ùt‹
);

622 
¥Ÿobuf_c_mesßge_‰ì_u≈acked
 ((
PrŸobufCMesßge
*)
mesßge
, 
Æloˇt‹
);

624 
	ggoogÀ__¥Ÿobuf__íum_vÆue_›ti⁄s__öô


625 (
GoogÀ__PrŸobuf__EnumVÆueO±i⁄s
 *
	gmesßge
)

627 
GoogÀ__PrŸobuf__EnumVÆueO±i⁄s
 
	göô_vÆue
 = 
GOOGLE__PROTOBUF__ENUM_VALUE_OPTIONS__INIT
;

628 *
	gmesßge
 = 
öô_vÆue
;

630 
size_t
 
	ggoogÀ__¥Ÿobuf__íum_vÆue_›ti⁄s__gë_∑cked_size


631 (c⁄° 
GoogÀ__PrŸobuf__EnumVÆueO±i⁄s
 *
	gmesßge
)

633 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__íum_vÆue_›ti⁄s__des¸ùt‹
);

634  
¥Ÿobuf_c_mesßge_gë_∑cked_size
 ((c⁄° 
PrŸobufCMesßge
*)(
mesßge
));

636 
size_t
 
	ggoogÀ__¥Ÿobuf__íum_vÆue_›ti⁄s__∑ck


637 (c⁄° 
GoogÀ__PrŸobuf__EnumVÆueO±i⁄s
 *
	gmesßge
,

638 
uöt8_t
 *
	gout
)

640 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__íum_vÆue_›ti⁄s__des¸ùt‹
);

641  
¥Ÿobuf_c_mesßge_∑ck
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
out
);

643 
size_t
 
	ggoogÀ__¥Ÿobuf__íum_vÆue_›ti⁄s__∑ck_to_buf„r


644 (c⁄° 
GoogÀ__PrŸobuf__EnumVÆueO±i⁄s
 *
	gmesßge
,

645 
PrŸobufCBuf„r
 *
	gbuf„r
)

647 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__íum_vÆue_›ti⁄s__des¸ùt‹
);

648  
¥Ÿobuf_c_mesßge_∑ck_to_buf„r
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
buf„r
);

650 
GoogÀ__PrŸobuf__EnumVÆueO±i⁄s
 *

651 
	ggoogÀ__¥Ÿobuf__íum_vÆue_›ti⁄s__u≈ack


652 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

653 
size_t
 
	gÀn
,

654 c⁄° 
uöt8_t
 *
	gd©a
)

656  (
	gGoogÀ__PrŸobuf__EnumVÆueO±i⁄s
 *)

657 
¥Ÿobuf_c_mesßge_u≈ack
 (&
googÀ__¥Ÿobuf__íum_vÆue_›ti⁄s__des¸ùt‹
,

658 
Æloˇt‹
, 
Àn
, 
d©a
);

660 
	ggoogÀ__¥Ÿobuf__íum_vÆue_›ti⁄s__‰ì_u≈acked


661 (
GoogÀ__PrŸobuf__EnumVÆueO±i⁄s
 *
	gmesßge
,

662 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
)

664 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__íum_vÆue_›ti⁄s__des¸ùt‹
);

665 
¥Ÿobuf_c_mesßge_‰ì_u≈acked
 ((
PrŸobufCMesßge
*)
mesßge
, 
Æloˇt‹
);

667 
	ggoogÀ__¥Ÿobuf__£rvi˚_›ti⁄s__öô


668 (
GoogÀ__PrŸobuf__Sîvi˚O±i⁄s
 *
	gmesßge
)

670 
GoogÀ__PrŸobuf__Sîvi˚O±i⁄s
 
	göô_vÆue
 = 
GOOGLE__PROTOBUF__SERVICE_OPTIONS__INIT
;

671 *
	gmesßge
 = 
öô_vÆue
;

673 
size_t
 
	ggoogÀ__¥Ÿobuf__£rvi˚_›ti⁄s__gë_∑cked_size


674 (c⁄° 
GoogÀ__PrŸobuf__Sîvi˚O±i⁄s
 *
	gmesßge
)

676 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__£rvi˚_›ti⁄s__des¸ùt‹
);

677  
¥Ÿobuf_c_mesßge_gë_∑cked_size
 ((c⁄° 
PrŸobufCMesßge
*)(
mesßge
));

679 
size_t
 
	ggoogÀ__¥Ÿobuf__£rvi˚_›ti⁄s__∑ck


680 (c⁄° 
GoogÀ__PrŸobuf__Sîvi˚O±i⁄s
 *
	gmesßge
,

681 
uöt8_t
 *
	gout
)

683 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__£rvi˚_›ti⁄s__des¸ùt‹
);

684  
¥Ÿobuf_c_mesßge_∑ck
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
out
);

686 
size_t
 
	ggoogÀ__¥Ÿobuf__£rvi˚_›ti⁄s__∑ck_to_buf„r


687 (c⁄° 
GoogÀ__PrŸobuf__Sîvi˚O±i⁄s
 *
	gmesßge
,

688 
PrŸobufCBuf„r
 *
	gbuf„r
)

690 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__£rvi˚_›ti⁄s__des¸ùt‹
);

691  
¥Ÿobuf_c_mesßge_∑ck_to_buf„r
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
buf„r
);

693 
GoogÀ__PrŸobuf__Sîvi˚O±i⁄s
 *

694 
	ggoogÀ__¥Ÿobuf__£rvi˚_›ti⁄s__u≈ack


695 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

696 
size_t
 
	gÀn
,

697 c⁄° 
uöt8_t
 *
	gd©a
)

699  (
	gGoogÀ__PrŸobuf__Sîvi˚O±i⁄s
 *)

700 
¥Ÿobuf_c_mesßge_u≈ack
 (&
googÀ__¥Ÿobuf__£rvi˚_›ti⁄s__des¸ùt‹
,

701 
Æloˇt‹
, 
Àn
, 
d©a
);

703 
	ggoogÀ__¥Ÿobuf__£rvi˚_›ti⁄s__‰ì_u≈acked


704 (
GoogÀ__PrŸobuf__Sîvi˚O±i⁄s
 *
	gmesßge
,

705 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
)

707 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__£rvi˚_›ti⁄s__des¸ùt‹
);

708 
¥Ÿobuf_c_mesßge_‰ì_u≈acked
 ((
PrŸobufCMesßge
*)
mesßge
, 
Æloˇt‹
);

710 
	ggoogÀ__¥Ÿobuf__mëhod_›ti⁄s__öô


711 (
GoogÀ__PrŸobuf__MëhodO±i⁄s
 *
	gmesßge
)

713 
GoogÀ__PrŸobuf__MëhodO±i⁄s
 
	göô_vÆue
 = 
GOOGLE__PROTOBUF__METHOD_OPTIONS__INIT
;

714 *
	gmesßge
 = 
öô_vÆue
;

716 
size_t
 
	ggoogÀ__¥Ÿobuf__mëhod_›ti⁄s__gë_∑cked_size


717 (c⁄° 
GoogÀ__PrŸobuf__MëhodO±i⁄s
 *
	gmesßge
)

719 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__mëhod_›ti⁄s__des¸ùt‹
);

720  
¥Ÿobuf_c_mesßge_gë_∑cked_size
 ((c⁄° 
PrŸobufCMesßge
*)(
mesßge
));

722 
size_t
 
	ggoogÀ__¥Ÿobuf__mëhod_›ti⁄s__∑ck


723 (c⁄° 
GoogÀ__PrŸobuf__MëhodO±i⁄s
 *
	gmesßge
,

724 
uöt8_t
 *
	gout
)

726 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__mëhod_›ti⁄s__des¸ùt‹
);

727  
¥Ÿobuf_c_mesßge_∑ck
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
out
);

729 
size_t
 
	ggoogÀ__¥Ÿobuf__mëhod_›ti⁄s__∑ck_to_buf„r


730 (c⁄° 
GoogÀ__PrŸobuf__MëhodO±i⁄s
 *
	gmesßge
,

731 
PrŸobufCBuf„r
 *
	gbuf„r
)

733 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__mëhod_›ti⁄s__des¸ùt‹
);

734  
¥Ÿobuf_c_mesßge_∑ck_to_buf„r
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
buf„r
);

736 
GoogÀ__PrŸobuf__MëhodO±i⁄s
 *

737 
	ggoogÀ__¥Ÿobuf__mëhod_›ti⁄s__u≈ack


738 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

739 
size_t
 
	gÀn
,

740 c⁄° 
uöt8_t
 *
	gd©a
)

742  (
	gGoogÀ__PrŸobuf__MëhodO±i⁄s
 *)

743 
¥Ÿobuf_c_mesßge_u≈ack
 (&
googÀ__¥Ÿobuf__mëhod_›ti⁄s__des¸ùt‹
,

744 
Æloˇt‹
, 
Àn
, 
d©a
);

746 
	ggoogÀ__¥Ÿobuf__mëhod_›ti⁄s__‰ì_u≈acked


747 (
GoogÀ__PrŸobuf__MëhodO±i⁄s
 *
	gmesßge
,

748 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
)

750 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__mëhod_›ti⁄s__des¸ùt‹
);

751 
¥Ÿobuf_c_mesßge_‰ì_u≈acked
 ((
PrŸobufCMesßge
*)
mesßge
, 
Æloˇt‹
);

753 
	ggoogÀ__¥Ÿobuf__unöãΩªãd_›ti⁄__«me_∑π__öô


754 (
GoogÀ__PrŸobuf__UnöãΩªãdO±i⁄__NameP¨t
 *
	gmesßge
)

756 
GoogÀ__PrŸobuf__UnöãΩªãdO±i⁄__NameP¨t
 
	göô_vÆue
 = 
GOOGLE__PROTOBUF__UNINTERPRETED_OPTION__NAME_PART__INIT
;

757 *
	gmesßge
 = 
öô_vÆue
;

759 
	ggoogÀ__¥Ÿobuf__unöãΩªãd_›ti⁄__öô


760 (
GoogÀ__PrŸobuf__UnöãΩªãdO±i⁄
 *
	gmesßge
)

762 
GoogÀ__PrŸobuf__UnöãΩªãdO±i⁄
 
	göô_vÆue
 = 
GOOGLE__PROTOBUF__UNINTERPRETED_OPTION__INIT
;

763 *
	gmesßge
 = 
öô_vÆue
;

765 
size_t
 
	ggoogÀ__¥Ÿobuf__unöãΩªãd_›ti⁄__gë_∑cked_size


766 (c⁄° 
GoogÀ__PrŸobuf__UnöãΩªãdO±i⁄
 *
	gmesßge
)

768 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__unöãΩªãd_›ti⁄__des¸ùt‹
);

769  
¥Ÿobuf_c_mesßge_gë_∑cked_size
 ((c⁄° 
PrŸobufCMesßge
*)(
mesßge
));

771 
size_t
 
	ggoogÀ__¥Ÿobuf__unöãΩªãd_›ti⁄__∑ck


772 (c⁄° 
GoogÀ__PrŸobuf__UnöãΩªãdO±i⁄
 *
	gmesßge
,

773 
uöt8_t
 *
	gout
)

775 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__unöãΩªãd_›ti⁄__des¸ùt‹
);

776  
¥Ÿobuf_c_mesßge_∑ck
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
out
);

778 
size_t
 
	ggoogÀ__¥Ÿobuf__unöãΩªãd_›ti⁄__∑ck_to_buf„r


779 (c⁄° 
GoogÀ__PrŸobuf__UnöãΩªãdO±i⁄
 *
	gmesßge
,

780 
PrŸobufCBuf„r
 *
	gbuf„r
)

782 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__unöãΩªãd_›ti⁄__des¸ùt‹
);

783  
¥Ÿobuf_c_mesßge_∑ck_to_buf„r
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
buf„r
);

785 
GoogÀ__PrŸobuf__UnöãΩªãdO±i⁄
 *

786 
	ggoogÀ__¥Ÿobuf__unöãΩªãd_›ti⁄__u≈ack


787 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

788 
size_t
 
	gÀn
,

789 c⁄° 
uöt8_t
 *
	gd©a
)

791  (
	gGoogÀ__PrŸobuf__UnöãΩªãdO±i⁄
 *)

792 
¥Ÿobuf_c_mesßge_u≈ack
 (&
googÀ__¥Ÿobuf__unöãΩªãd_›ti⁄__des¸ùt‹
,

793 
Æloˇt‹
, 
Àn
, 
d©a
);

795 
	ggoogÀ__¥Ÿobuf__unöãΩªãd_›ti⁄__‰ì_u≈acked


796 (
GoogÀ__PrŸobuf__UnöãΩªãdO±i⁄
 *
	gmesßge
,

797 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
)

799 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__unöãΩªãd_›ti⁄__des¸ùt‹
);

800 
¥Ÿobuf_c_mesßge_‰ì_u≈acked
 ((
PrŸobufCMesßge
*)
mesßge
, 
Æloˇt‹
);

802 
	ggoogÀ__¥Ÿobuf__sour˚_code_öfo__loˇti⁄__öô


803 (
GoogÀ__PrŸobuf__Sour˚CodeInfo__Loˇti⁄
 *
	gmesßge
)

805 
GoogÀ__PrŸobuf__Sour˚CodeInfo__Loˇti⁄
 
	göô_vÆue
 = 
GOOGLE__PROTOBUF__SOURCE_CODE_INFO__LOCATION__INIT
;

806 *
	gmesßge
 = 
öô_vÆue
;

808 
	ggoogÀ__¥Ÿobuf__sour˚_code_öfo__öô


809 (
GoogÀ__PrŸobuf__Sour˚CodeInfo
 *
	gmesßge
)

811 
GoogÀ__PrŸobuf__Sour˚CodeInfo
 
	göô_vÆue
 = 
GOOGLE__PROTOBUF__SOURCE_CODE_INFO__INIT
;

812 *
	gmesßge
 = 
öô_vÆue
;

814 
size_t
 
	ggoogÀ__¥Ÿobuf__sour˚_code_öfo__gë_∑cked_size


815 (c⁄° 
GoogÀ__PrŸobuf__Sour˚CodeInfo
 *
	gmesßge
)

817 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__sour˚_code_öfo__des¸ùt‹
);

818  
¥Ÿobuf_c_mesßge_gë_∑cked_size
 ((c⁄° 
PrŸobufCMesßge
*)(
mesßge
));

820 
size_t
 
	ggoogÀ__¥Ÿobuf__sour˚_code_öfo__∑ck


821 (c⁄° 
GoogÀ__PrŸobuf__Sour˚CodeInfo
 *
	gmesßge
,

822 
uöt8_t
 *
	gout
)

824 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__sour˚_code_öfo__des¸ùt‹
);

825  
¥Ÿobuf_c_mesßge_∑ck
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
out
);

827 
size_t
 
	ggoogÀ__¥Ÿobuf__sour˚_code_öfo__∑ck_to_buf„r


828 (c⁄° 
GoogÀ__PrŸobuf__Sour˚CodeInfo
 *
	gmesßge
,

829 
PrŸobufCBuf„r
 *
	gbuf„r
)

831 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__sour˚_code_öfo__des¸ùt‹
);

832  
¥Ÿobuf_c_mesßge_∑ck_to_buf„r
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
buf„r
);

834 
GoogÀ__PrŸobuf__Sour˚CodeInfo
 *

835 
	ggoogÀ__¥Ÿobuf__sour˚_code_öfo__u≈ack


836 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

837 
size_t
 
	gÀn
,

838 c⁄° 
uöt8_t
 *
	gd©a
)

840  (
	gGoogÀ__PrŸobuf__Sour˚CodeInfo
 *)

841 
¥Ÿobuf_c_mesßge_u≈ack
 (&
googÀ__¥Ÿobuf__sour˚_code_öfo__des¸ùt‹
,

842 
Æloˇt‹
, 
Àn
, 
d©a
);

844 
	ggoogÀ__¥Ÿobuf__sour˚_code_öfo__‰ì_u≈acked


845 (
GoogÀ__PrŸobuf__Sour˚CodeInfo
 *
	gmesßge
,

846 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
)

848 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__sour˚_code_öfo__des¸ùt‹
);

849 
¥Ÿobuf_c_mesßge_‰ì_u≈acked
 ((
PrŸobufCMesßge
*)
mesßge
, 
Æloˇt‹
);

851 
	ggoogÀ__¥Ÿobuf__gíî©ed_code_öfo__™nŸ©i⁄__öô


852 (
GoogÀ__PrŸobuf__Gíî©edCodeInfo__A¬Ÿ©i⁄
 *
	gmesßge
)

854 
GoogÀ__PrŸobuf__Gíî©edCodeInfo__A¬Ÿ©i⁄
 
	göô_vÆue
 = 
GOOGLE__PROTOBUF__GENERATED_CODE_INFO__ANNOTATION__INIT
;

855 *
	gmesßge
 = 
öô_vÆue
;

857 
	ggoogÀ__¥Ÿobuf__gíî©ed_code_öfo__öô


858 (
GoogÀ__PrŸobuf__Gíî©edCodeInfo
 *
	gmesßge
)

860 
GoogÀ__PrŸobuf__Gíî©edCodeInfo
 
	göô_vÆue
 = 
GOOGLE__PROTOBUF__GENERATED_CODE_INFO__INIT
;

861 *
	gmesßge
 = 
öô_vÆue
;

863 
size_t
 
	ggoogÀ__¥Ÿobuf__gíî©ed_code_öfo__gë_∑cked_size


864 (c⁄° 
GoogÀ__PrŸobuf__Gíî©edCodeInfo
 *
	gmesßge
)

866 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__gíî©ed_code_öfo__des¸ùt‹
);

867  
¥Ÿobuf_c_mesßge_gë_∑cked_size
 ((c⁄° 
PrŸobufCMesßge
*)(
mesßge
));

869 
size_t
 
	ggoogÀ__¥Ÿobuf__gíî©ed_code_öfo__∑ck


870 (c⁄° 
GoogÀ__PrŸobuf__Gíî©edCodeInfo
 *
	gmesßge
,

871 
uöt8_t
 *
	gout
)

873 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__gíî©ed_code_öfo__des¸ùt‹
);

874  
¥Ÿobuf_c_mesßge_∑ck
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
out
);

876 
size_t
 
	ggoogÀ__¥Ÿobuf__gíî©ed_code_öfo__∑ck_to_buf„r


877 (c⁄° 
GoogÀ__PrŸobuf__Gíî©edCodeInfo
 *
	gmesßge
,

878 
PrŸobufCBuf„r
 *
	gbuf„r
)

880 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__gíî©ed_code_öfo__des¸ùt‹
);

881  
¥Ÿobuf_c_mesßge_∑ck_to_buf„r
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
buf„r
);

883 
GoogÀ__PrŸobuf__Gíî©edCodeInfo
 *

884 
	ggoogÀ__¥Ÿobuf__gíî©ed_code_öfo__u≈ack


885 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

886 
size_t
 
	gÀn
,

887 c⁄° 
uöt8_t
 *
	gd©a
)

889  (
	gGoogÀ__PrŸobuf__Gíî©edCodeInfo
 *)

890 
¥Ÿobuf_c_mesßge_u≈ack
 (&
googÀ__¥Ÿobuf__gíî©ed_code_öfo__des¸ùt‹
,

891 
Æloˇt‹
, 
Àn
, 
d©a
);

893 
	ggoogÀ__¥Ÿobuf__gíî©ed_code_öfo__‰ì_u≈acked


894 (
GoogÀ__PrŸobuf__Gíî©edCodeInfo
 *
	gmesßge
,

895 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
)

897 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__gíî©ed_code_öfo__des¸ùt‹
);

898 
¥Ÿobuf_c_mesßge_‰ì_u≈acked
 ((
PrŸobufCMesßge
*)
mesßge
, 
Æloˇt‹
);

900 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	ggoogÀ__¥Ÿobuf__fûe_des¸ùt‹_£t__fõld_des¸ùt‹s
[1] =

905 
PROTOBUF_C_LABEL_REPEATED
,

906 
PROTOBUF_C_TYPE_MESSAGE
,

907 
off£tof
(
GoogÀ__PrŸobuf__FûeDes¸ùt‹Së
, 
n_fûe
),

908 
off£tof
(
GoogÀ__PrŸobuf__FûeDes¸ùt‹Së
, 
fûe
),

909 &
googÀ__¥Ÿobuf__fûe_des¸ùt‹_¥Ÿo__des¸ùt‹
,

910 
NULL
,

912 0,
NULL
,NULL

915 c⁄° 
	ggoogÀ__¥Ÿobuf__fûe_des¸ùt‹_£t__fõld_ödi˚s_by_«me
[] = {

918 c⁄° 
PrŸobufCI¡R™ge
 
	ggoogÀ__¥Ÿobuf__fûe_des¸ùt‹_£t__numbî_ønges
[1 + 1] =

923 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	ggoogÀ__¥Ÿobuf__fûe_des¸ùt‹_£t__des¸ùt‹
 =

925 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

930 (
GoogÀ__PrŸobuf__FûeDes¸ùt‹Së
),

932 
googÀ__¥Ÿobuf__fûe_des¸ùt‹_£t__fõld_des¸ùt‹s
,

933 
googÀ__¥Ÿobuf__fûe_des¸ùt‹_£t__fõld_ödi˚s_by_«me
,

934 1, 
googÀ__¥Ÿobuf__fûe_des¸ùt‹_£t__numbî_ønges
,

935 (
PrŸobufCMesßgeInô
Ë
googÀ__¥Ÿobuf__fûe_des¸ùt‹_£t__öô
,

936 
NULL
,NULL,NULL

938 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	ggoogÀ__¥Ÿobuf__fûe_des¸ùt‹_¥Ÿo__fõld_des¸ùt‹s
[12] =

943 
PROTOBUF_C_LABEL_OPTIONAL
,

944 
PROTOBUF_C_TYPE_STRING
,

946 
off£tof
(
GoogÀ__PrŸobuf__FûeDes¸ùt‹PrŸo
, 
«me
),

947 
NULL
,

948 
NULL
,

950 0,
NULL
,NULL

955 
PROTOBUF_C_LABEL_OPTIONAL
,

956 
PROTOBUF_C_TYPE_STRING
,

958 
off£tof
(
GoogÀ__PrŸobuf__FûeDes¸ùt‹PrŸo
, 
∑ckage
),

959 
NULL
,

960 
NULL
,

962 0,
NULL
,NULL

967 
PROTOBUF_C_LABEL_REPEATED
,

968 
PROTOBUF_C_TYPE_STRING
,

969 
off£tof
(
GoogÀ__PrŸobuf__FûeDes¸ùt‹PrŸo
, 
n_dïídícy
),

970 
off£tof
(
GoogÀ__PrŸobuf__FûeDes¸ùt‹PrŸo
, 
dïídícy
),

971 
NULL
,

972 
NULL
,

974 0,
NULL
,NULL

979 
PROTOBUF_C_LABEL_REPEATED
,

980 
PROTOBUF_C_TYPE_MESSAGE
,

981 
off£tof
(
GoogÀ__PrŸobuf__FûeDes¸ùt‹PrŸo
, 
n_mesßge_ty≥
),

982 
off£tof
(
GoogÀ__PrŸobuf__FûeDes¸ùt‹PrŸo
, 
mesßge_ty≥
),

983 &
googÀ__¥Ÿobuf__des¸ùt‹_¥Ÿo__des¸ùt‹
,

984 
NULL
,

986 0,
NULL
,NULL

991 
PROTOBUF_C_LABEL_REPEATED
,

992 
PROTOBUF_C_TYPE_MESSAGE
,

993 
off£tof
(
GoogÀ__PrŸobuf__FûeDes¸ùt‹PrŸo
, 
n_íum_ty≥
),

994 
off£tof
(
GoogÀ__PrŸobuf__FûeDes¸ùt‹PrŸo
, 
íum_ty≥
),

995 &
googÀ__¥Ÿobuf__íum_des¸ùt‹_¥Ÿo__des¸ùt‹
,

996 
NULL
,

998 0,
NULL
,NULL

1003 
PROTOBUF_C_LABEL_REPEATED
,

1004 
PROTOBUF_C_TYPE_MESSAGE
,

1005 
off£tof
(
GoogÀ__PrŸobuf__FûeDes¸ùt‹PrŸo
, 
n_£rvi˚
),

1006 
off£tof
(
GoogÀ__PrŸobuf__FûeDes¸ùt‹PrŸo
, 
£rvi˚
),

1007 &
googÀ__¥Ÿobuf__£rvi˚_des¸ùt‹_¥Ÿo__des¸ùt‹
,

1008 
NULL
,

1010 0,
NULL
,NULL

1015 
PROTOBUF_C_LABEL_REPEATED
,

1016 
PROTOBUF_C_TYPE_MESSAGE
,

1017 
off£tof
(
GoogÀ__PrŸobuf__FûeDes¸ùt‹PrŸo
, 
n_exãnsi⁄
),

1018 
off£tof
(
GoogÀ__PrŸobuf__FûeDes¸ùt‹PrŸo
, 
exãnsi⁄
),

1019 &
googÀ__¥Ÿobuf__fõld_des¸ùt‹_¥Ÿo__des¸ùt‹
,

1020 
NULL
,

1022 0,
NULL
,NULL

1027 
PROTOBUF_C_LABEL_OPTIONAL
,

1028 
PROTOBUF_C_TYPE_MESSAGE
,

1030 
off£tof
(
GoogÀ__PrŸobuf__FûeDes¸ùt‹PrŸo
, 
›ti⁄s
),

1031 &
googÀ__¥Ÿobuf__fûe_›ti⁄s__des¸ùt‹
,

1032 
NULL
,

1034 0,
NULL
,NULL

1039 
PROTOBUF_C_LABEL_OPTIONAL
,

1040 
PROTOBUF_C_TYPE_MESSAGE
,

1042 
off£tof
(
GoogÀ__PrŸobuf__FûeDes¸ùt‹PrŸo
, 
sour˚_code_öfo
),

1043 &
googÀ__¥Ÿobuf__sour˚_code_öfo__des¸ùt‹
,

1044 
NULL
,

1046 0,
NULL
,NULL

1051 
PROTOBUF_C_LABEL_REPEATED
,

1052 
PROTOBUF_C_TYPE_INT32
,

1053 
off£tof
(
GoogÀ__PrŸobuf__FûeDes¸ùt‹PrŸo
, 
n_public_dïídícy
),

1054 
off£tof
(
GoogÀ__PrŸobuf__FûeDes¸ùt‹PrŸo
, 
public_dïídícy
),

1055 
NULL
,

1056 
NULL
,

1058 0,
NULL
,NULL

1063 
PROTOBUF_C_LABEL_REPEATED
,

1064 
PROTOBUF_C_TYPE_INT32
,

1065 
off£tof
(
GoogÀ__PrŸobuf__FûeDes¸ùt‹PrŸo
, 
n_wók_dïídícy
),

1066 
off£tof
(
GoogÀ__PrŸobuf__FûeDes¸ùt‹PrŸo
, 
wók_dïídícy
),

1067 
NULL
,

1068 
NULL
,

1070 0,
NULL
,NULL

1075 
PROTOBUF_C_LABEL_OPTIONAL
,

1076 
PROTOBUF_C_TYPE_STRING
,

1078 
off£tof
(
GoogÀ__PrŸobuf__FûeDes¸ùt‹PrŸo
, 
sy¡ax
),

1079 
NULL
,

1080 
NULL
,

1082 0,
NULL
,NULL

1085 c⁄° 
	ggoogÀ__¥Ÿobuf__fûe_des¸ùt‹_¥Ÿo__fõld_ödi˚s_by_«me
[] = {

1099 c⁄° 
PrŸobufCI¡R™ge
 
	ggoogÀ__¥Ÿobuf__fûe_des¸ùt‹_¥Ÿo__numbî_ønges
[1 + 1] =

1104 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	ggoogÀ__¥Ÿobuf__fûe_des¸ùt‹_¥Ÿo__des¸ùt‹
 =

1106 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

1111 (
GoogÀ__PrŸobuf__FûeDes¸ùt‹PrŸo
),

1113 
googÀ__¥Ÿobuf__fûe_des¸ùt‹_¥Ÿo__fõld_des¸ùt‹s
,

1114 
googÀ__¥Ÿobuf__fûe_des¸ùt‹_¥Ÿo__fõld_ödi˚s_by_«me
,

1115 1, 
googÀ__¥Ÿobuf__fûe_des¸ùt‹_¥Ÿo__numbî_ønges
,

1116 (
PrŸobufCMesßgeInô
Ë
googÀ__¥Ÿobuf__fûe_des¸ùt‹_¥Ÿo__öô
,

1117 
NULL
,NULL,NULL

1119 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	ggoogÀ__¥Ÿobuf__des¸ùt‹_¥Ÿo__exãnsi⁄_ønge__fõld_des¸ùt‹s
[2] =

1124 
PROTOBUF_C_LABEL_OPTIONAL
,

1125 
PROTOBUF_C_TYPE_INT32
,

1126 
off£tof
(
GoogÀ__PrŸobuf__Des¸ùt‹PrŸo__Exãnsi⁄R™ge
, 
has_°¨t
),

1127 
off£tof
(
GoogÀ__PrŸobuf__Des¸ùt‹PrŸo__Exãnsi⁄R™ge
, 
°¨t
),

1128 
NULL
,

1129 
NULL
,

1131 0,
NULL
,NULL

1136 
PROTOBUF_C_LABEL_OPTIONAL
,

1137 
PROTOBUF_C_TYPE_INT32
,

1138 
off£tof
(
GoogÀ__PrŸobuf__Des¸ùt‹PrŸo__Exãnsi⁄R™ge
, 
has_íd
),

1139 
off£tof
(
GoogÀ__PrŸobuf__Des¸ùt‹PrŸo__Exãnsi⁄R™ge
, 
íd
),

1140 
NULL
,

1141 
NULL
,

1143 0,
NULL
,NULL

1146 c⁄° 
	ggoogÀ__¥Ÿobuf__des¸ùt‹_¥Ÿo__exãnsi⁄_ønge__fõld_ödi˚s_by_«me
[] = {

1150 c⁄° 
PrŸobufCI¡R™ge
 
	ggoogÀ__¥Ÿobuf__des¸ùt‹_¥Ÿo__exãnsi⁄_ønge__numbî_ønges
[1 + 1] =

1155 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	ggoogÀ__¥Ÿobuf__des¸ùt‹_¥Ÿo__exãnsi⁄_ønge__des¸ùt‹
 =

1157 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

1162 (
GoogÀ__PrŸobuf__Des¸ùt‹PrŸo__Exãnsi⁄R™ge
),

1164 
googÀ__¥Ÿobuf__des¸ùt‹_¥Ÿo__exãnsi⁄_ønge__fõld_des¸ùt‹s
,

1165 
googÀ__¥Ÿobuf__des¸ùt‹_¥Ÿo__exãnsi⁄_ønge__fõld_ödi˚s_by_«me
,

1166 1, 
googÀ__¥Ÿobuf__des¸ùt‹_¥Ÿo__exãnsi⁄_ønge__numbî_ønges
,

1167 (
PrŸobufCMesßgeInô
Ë
googÀ__¥Ÿobuf__des¸ùt‹_¥Ÿo__exãnsi⁄_ønge__öô
,

1168 
NULL
,NULL,NULL

1170 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	ggoogÀ__¥Ÿobuf__des¸ùt‹_¥Ÿo__ª£rved_ønge__fõld_des¸ùt‹s
[2] =

1175 
PROTOBUF_C_LABEL_OPTIONAL
,

1176 
PROTOBUF_C_TYPE_INT32
,

1177 
off£tof
(
GoogÀ__PrŸobuf__Des¸ùt‹PrŸo__Re£rvedR™ge
, 
has_°¨t
),

1178 
off£tof
(
GoogÀ__PrŸobuf__Des¸ùt‹PrŸo__Re£rvedR™ge
, 
°¨t
),

1179 
NULL
,

1180 
NULL
,

1182 0,
NULL
,NULL

1187 
PROTOBUF_C_LABEL_OPTIONAL
,

1188 
PROTOBUF_C_TYPE_INT32
,

1189 
off£tof
(
GoogÀ__PrŸobuf__Des¸ùt‹PrŸo__Re£rvedR™ge
, 
has_íd
),

1190 
off£tof
(
GoogÀ__PrŸobuf__Des¸ùt‹PrŸo__Re£rvedR™ge
, 
íd
),

1191 
NULL
,

1192 
NULL
,

1194 0,
NULL
,NULL

1197 c⁄° 
	ggoogÀ__¥Ÿobuf__des¸ùt‹_¥Ÿo__ª£rved_ønge__fõld_ödi˚s_by_«me
[] = {

1201 c⁄° 
PrŸobufCI¡R™ge
 
	ggoogÀ__¥Ÿobuf__des¸ùt‹_¥Ÿo__ª£rved_ønge__numbî_ønges
[1 + 1] =

1206 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	ggoogÀ__¥Ÿobuf__des¸ùt‹_¥Ÿo__ª£rved_ønge__des¸ùt‹
 =

1208 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

1213 (
GoogÀ__PrŸobuf__Des¸ùt‹PrŸo__Re£rvedR™ge
),

1215 
googÀ__¥Ÿobuf__des¸ùt‹_¥Ÿo__ª£rved_ønge__fõld_des¸ùt‹s
,

1216 
googÀ__¥Ÿobuf__des¸ùt‹_¥Ÿo__ª£rved_ønge__fõld_ödi˚s_by_«me
,

1217 1, 
googÀ__¥Ÿobuf__des¸ùt‹_¥Ÿo__ª£rved_ønge__numbî_ønges
,

1218 (
PrŸobufCMesßgeInô
Ë
googÀ__¥Ÿobuf__des¸ùt‹_¥Ÿo__ª£rved_ønge__öô
,

1219 
NULL
,NULL,NULL

1221 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	ggoogÀ__¥Ÿobuf__des¸ùt‹_¥Ÿo__fõld_des¸ùt‹s
[10] =

1226 
PROTOBUF_C_LABEL_OPTIONAL
,

1227 
PROTOBUF_C_TYPE_STRING
,

1229 
off£tof
(
GoogÀ__PrŸobuf__Des¸ùt‹PrŸo
, 
«me
),

1230 
NULL
,

1231 
NULL
,

1233 0,
NULL
,NULL

1238 
PROTOBUF_C_LABEL_REPEATED
,

1239 
PROTOBUF_C_TYPE_MESSAGE
,

1240 
off£tof
(
GoogÀ__PrŸobuf__Des¸ùt‹PrŸo
, 
n_fõld
),

1241 
off£tof
(
GoogÀ__PrŸobuf__Des¸ùt‹PrŸo
, 
fõld
),

1242 &
googÀ__¥Ÿobuf__fõld_des¸ùt‹_¥Ÿo__des¸ùt‹
,

1243 
NULL
,

1245 0,
NULL
,NULL

1250 
PROTOBUF_C_LABEL_REPEATED
,

1251 
PROTOBUF_C_TYPE_MESSAGE
,

1252 
off£tof
(
GoogÀ__PrŸobuf__Des¸ùt‹PrŸo
, 
n_√°ed_ty≥
),

1253 
off£tof
(
GoogÀ__PrŸobuf__Des¸ùt‹PrŸo
, 
√°ed_ty≥
),

1254 &
googÀ__¥Ÿobuf__des¸ùt‹_¥Ÿo__des¸ùt‹
,

1255 
NULL
,

1257 0,
NULL
,NULL

1262 
PROTOBUF_C_LABEL_REPEATED
,

1263 
PROTOBUF_C_TYPE_MESSAGE
,

1264 
off£tof
(
GoogÀ__PrŸobuf__Des¸ùt‹PrŸo
, 
n_íum_ty≥
),

1265 
off£tof
(
GoogÀ__PrŸobuf__Des¸ùt‹PrŸo
, 
íum_ty≥
),

1266 &
googÀ__¥Ÿobuf__íum_des¸ùt‹_¥Ÿo__des¸ùt‹
,

1267 
NULL
,

1269 0,
NULL
,NULL

1274 
PROTOBUF_C_LABEL_REPEATED
,

1275 
PROTOBUF_C_TYPE_MESSAGE
,

1276 
off£tof
(
GoogÀ__PrŸobuf__Des¸ùt‹PrŸo
, 
n_exãnsi⁄_ønge
),

1277 
off£tof
(
GoogÀ__PrŸobuf__Des¸ùt‹PrŸo
, 
exãnsi⁄_ønge
),

1278 &
googÀ__¥Ÿobuf__des¸ùt‹_¥Ÿo__exãnsi⁄_ønge__des¸ùt‹
,

1279 
NULL
,

1281 0,
NULL
,NULL

1286 
PROTOBUF_C_LABEL_REPEATED
,

1287 
PROTOBUF_C_TYPE_MESSAGE
,

1288 
off£tof
(
GoogÀ__PrŸobuf__Des¸ùt‹PrŸo
, 
n_exãnsi⁄
),

1289 
off£tof
(
GoogÀ__PrŸobuf__Des¸ùt‹PrŸo
, 
exãnsi⁄
),

1290 &
googÀ__¥Ÿobuf__fõld_des¸ùt‹_¥Ÿo__des¸ùt‹
,

1291 
NULL
,

1293 0,
NULL
,NULL

1298 
PROTOBUF_C_LABEL_OPTIONAL
,

1299 
PROTOBUF_C_TYPE_MESSAGE
,

1301 
off£tof
(
GoogÀ__PrŸobuf__Des¸ùt‹PrŸo
, 
›ti⁄s
),

1302 &
googÀ__¥Ÿobuf__mesßge_›ti⁄s__des¸ùt‹
,

1303 
NULL
,

1305 0,
NULL
,NULL

1310 
PROTOBUF_C_LABEL_REPEATED
,

1311 
PROTOBUF_C_TYPE_MESSAGE
,

1312 
off£tof
(
GoogÀ__PrŸobuf__Des¸ùt‹PrŸo
, 
n_⁄eof_de˛
),

1313 
off£tof
(
GoogÀ__PrŸobuf__Des¸ùt‹PrŸo
, 
⁄eof_de˛
),

1314 &
googÀ__¥Ÿobuf__⁄eof_des¸ùt‹_¥Ÿo__des¸ùt‹
,

1315 
NULL
,

1317 0,
NULL
,NULL

1322 
PROTOBUF_C_LABEL_REPEATED
,

1323 
PROTOBUF_C_TYPE_MESSAGE
,

1324 
off£tof
(
GoogÀ__PrŸobuf__Des¸ùt‹PrŸo
, 
n_ª£rved_ønge
),

1325 
off£tof
(
GoogÀ__PrŸobuf__Des¸ùt‹PrŸo
, 
ª£rved_ønge
),

1326 &
googÀ__¥Ÿobuf__des¸ùt‹_¥Ÿo__ª£rved_ønge__des¸ùt‹
,

1327 
NULL
,

1329 0,
NULL
,NULL

1334 
PROTOBUF_C_LABEL_REPEATED
,

1335 
PROTOBUF_C_TYPE_STRING
,

1336 
off£tof
(
GoogÀ__PrŸobuf__Des¸ùt‹PrŸo
, 
n_ª£rved_«me
),

1337 
off£tof
(
GoogÀ__PrŸobuf__Des¸ùt‹PrŸo
, 
ª£rved_«me
),

1338 
NULL
,

1339 
NULL
,

1341 0,
NULL
,NULL

1344 c⁄° 
	ggoogÀ__¥Ÿobuf__des¸ùt‹_¥Ÿo__fõld_ödi˚s_by_«me
[] = {

1356 c⁄° 
PrŸobufCI¡R™ge
 
	ggoogÀ__¥Ÿobuf__des¸ùt‹_¥Ÿo__numbî_ønges
[1 + 1] =

1361 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	ggoogÀ__¥Ÿobuf__des¸ùt‹_¥Ÿo__des¸ùt‹
 =

1363 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

1368 (
GoogÀ__PrŸobuf__Des¸ùt‹PrŸo
),

1370 
googÀ__¥Ÿobuf__des¸ùt‹_¥Ÿo__fõld_des¸ùt‹s
,

1371 
googÀ__¥Ÿobuf__des¸ùt‹_¥Ÿo__fõld_ödi˚s_by_«me
,

1372 1, 
googÀ__¥Ÿobuf__des¸ùt‹_¥Ÿo__numbî_ønges
,

1373 (
PrŸobufCMesßgeInô
Ë
googÀ__¥Ÿobuf__des¸ùt‹_¥Ÿo__öô
,

1374 
NULL
,NULL,NULL

1376 c⁄° 
PrŸobufCEnumVÆue
 
	ggoogÀ__¥Ÿobuf__fõld_des¸ùt‹_¥Ÿo__ty≥__íum_vÆues_by_numbî
[18] =

1397 c⁄° 
PrŸobufCI¡R™ge
 
	ggoogÀ__¥Ÿobuf__fõld_des¸ùt‹_¥Ÿo__ty≥__vÆue_ønges
[] = {

1400 c⁄° 
PrŸobufCEnumVÆueIndex
 
	ggoogÀ__¥Ÿobuf__fõld_des¸ùt‹_¥Ÿo__ty≥__íum_vÆues_by_«me
[18] =

1421 c⁄° 
PrŸobufCEnumDes¸ùt‹
 
	ggoogÀ__¥Ÿobuf__fõld_des¸ùt‹_¥Ÿo__ty≥__des¸ùt‹
 =

1423 
PROTOBUF_C__ENUM_DESCRIPTOR_MAGIC
,

1429 
googÀ__¥Ÿobuf__fõld_des¸ùt‹_¥Ÿo__ty≥__íum_vÆues_by_numbî
,

1431 
googÀ__¥Ÿobuf__fõld_des¸ùt‹_¥Ÿo__ty≥__íum_vÆues_by_«me
,

1433 
googÀ__¥Ÿobuf__fõld_des¸ùt‹_¥Ÿo__ty≥__vÆue_ønges
,

1434 
NULL
,NULL,NULL,NULL

1436 c⁄° 
PrŸobufCEnumVÆue
 
	ggoogÀ__¥Ÿobuf__fõld_des¸ùt‹_¥Ÿo__œbñ__íum_vÆues_by_numbî
[3] =

1442 c⁄° 
PrŸobufCI¡R™ge
 
	ggoogÀ__¥Ÿobuf__fõld_des¸ùt‹_¥Ÿo__œbñ__vÆue_ønges
[] = {

1445 c⁄° 
PrŸobufCEnumVÆueIndex
 
	ggoogÀ__¥Ÿobuf__fõld_des¸ùt‹_¥Ÿo__œbñ__íum_vÆues_by_«me
[3] =

1451 c⁄° 
PrŸobufCEnumDes¸ùt‹
 
	ggoogÀ__¥Ÿobuf__fõld_des¸ùt‹_¥Ÿo__œbñ__des¸ùt‹
 =

1453 
PROTOBUF_C__ENUM_DESCRIPTOR_MAGIC
,

1459 
googÀ__¥Ÿobuf__fõld_des¸ùt‹_¥Ÿo__œbñ__íum_vÆues_by_numbî
,

1461 
googÀ__¥Ÿobuf__fõld_des¸ùt‹_¥Ÿo__œbñ__íum_vÆues_by_«me
,

1463 
googÀ__¥Ÿobuf__fõld_des¸ùt‹_¥Ÿo__œbñ__vÆue_ønges
,

1464 
NULL
,NULL,NULL,NULL

1466 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	ggoogÀ__¥Ÿobuf__fõld_des¸ùt‹_¥Ÿo__fõld_des¸ùt‹s
[10] =

1471 
PROTOBUF_C_LABEL_OPTIONAL
,

1472 
PROTOBUF_C_TYPE_STRING
,

1474 
off£tof
(
GoogÀ__PrŸobuf__FõldDes¸ùt‹PrŸo
, 
«me
),

1475 
NULL
,

1476 
NULL
,

1478 0,
NULL
,NULL

1483 
PROTOBUF_C_LABEL_OPTIONAL
,

1484 
PROTOBUF_C_TYPE_STRING
,

1486 
off£tof
(
GoogÀ__PrŸobuf__FõldDes¸ùt‹PrŸo
, 
exãndì
),

1487 
NULL
,

1488 
NULL
,

1490 0,
NULL
,NULL

1495 
PROTOBUF_C_LABEL_OPTIONAL
,

1496 
PROTOBUF_C_TYPE_INT32
,

1497 
off£tof
(
GoogÀ__PrŸobuf__FõldDes¸ùt‹PrŸo
, 
has_numbî
),

1498 
off£tof
(
GoogÀ__PrŸobuf__FõldDes¸ùt‹PrŸo
, 
numbî
),

1499 
NULL
,

1500 
NULL
,

1502 0,
NULL
,NULL

1507 
PROTOBUF_C_LABEL_OPTIONAL
,

1508 
PROTOBUF_C_TYPE_ENUM
,

1509 
off£tof
(
GoogÀ__PrŸobuf__FõldDes¸ùt‹PrŸo
, 
has_œbñ
),

1510 
off£tof
(
GoogÀ__PrŸobuf__FõldDes¸ùt‹PrŸo
, 
œbñ
),

1511 &
googÀ__¥Ÿobuf__fõld_des¸ùt‹_¥Ÿo__œbñ__des¸ùt‹
,

1512 
NULL
,

1514 0,
NULL
,NULL

1519 
PROTOBUF_C_LABEL_OPTIONAL
,

1520 
PROTOBUF_C_TYPE_ENUM
,

1521 
off£tof
(
GoogÀ__PrŸobuf__FõldDes¸ùt‹PrŸo
, 
has_ty≥
),

1522 
off£tof
(
GoogÀ__PrŸobuf__FõldDes¸ùt‹PrŸo
, 
ty≥
),

1523 &
googÀ__¥Ÿobuf__fõld_des¸ùt‹_¥Ÿo__ty≥__des¸ùt‹
,

1524 
NULL
,

1526 0,
NULL
,NULL

1531 
PROTOBUF_C_LABEL_OPTIONAL
,

1532 
PROTOBUF_C_TYPE_STRING
,

1534 
off£tof
(
GoogÀ__PrŸobuf__FõldDes¸ùt‹PrŸo
, 
ty≥_«me
),

1535 
NULL
,

1536 
NULL
,

1538 0,
NULL
,NULL

1543 
PROTOBUF_C_LABEL_OPTIONAL
,

1544 
PROTOBUF_C_TYPE_STRING
,

1546 
off£tof
(
GoogÀ__PrŸobuf__FõldDes¸ùt‹PrŸo
, 
deÁu…_vÆue
),

1547 
NULL
,

1548 
NULL
,

1550 0,
NULL
,NULL

1555 
PROTOBUF_C_LABEL_OPTIONAL
,

1556 
PROTOBUF_C_TYPE_MESSAGE
,

1558 
off£tof
(
GoogÀ__PrŸobuf__FõldDes¸ùt‹PrŸo
, 
›ti⁄s
),

1559 &
googÀ__¥Ÿobuf__fõld_›ti⁄s__des¸ùt‹
,

1560 
NULL
,

1562 0,
NULL
,NULL

1567 
PROTOBUF_C_LABEL_OPTIONAL
,

1568 
PROTOBUF_C_TYPE_INT32
,

1569 
off£tof
(
GoogÀ__PrŸobuf__FõldDes¸ùt‹PrŸo
, 
has_⁄eof_ödex
),

1570 
off£tof
(
GoogÀ__PrŸobuf__FõldDes¸ùt‹PrŸo
, 
⁄eof_ödex
),

1571 
NULL
,

1572 
NULL
,

1574 0,
NULL
,NULL

1579 
PROTOBUF_C_LABEL_OPTIONAL
,

1580 
PROTOBUF_C_TYPE_STRING
,

1582 
off£tof
(
GoogÀ__PrŸobuf__FõldDes¸ùt‹PrŸo
, 
js⁄_«me
),

1583 
NULL
,

1584 
NULL
,

1586 0,
NULL
,NULL

1589 c⁄° 
	ggoogÀ__¥Ÿobuf__fõld_des¸ùt‹_¥Ÿo__fõld_ödi˚s_by_«me
[] = {

1601 c⁄° 
PrŸobufCI¡R™ge
 
	ggoogÀ__¥Ÿobuf__fõld_des¸ùt‹_¥Ÿo__numbî_ønges
[1 + 1] =

1606 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	ggoogÀ__¥Ÿobuf__fõld_des¸ùt‹_¥Ÿo__des¸ùt‹
 =

1608 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

1613 (
GoogÀ__PrŸobuf__FõldDes¸ùt‹PrŸo
),

1615 
googÀ__¥Ÿobuf__fõld_des¸ùt‹_¥Ÿo__fõld_des¸ùt‹s
,

1616 
googÀ__¥Ÿobuf__fõld_des¸ùt‹_¥Ÿo__fõld_ödi˚s_by_«me
,

1617 1, 
googÀ__¥Ÿobuf__fõld_des¸ùt‹_¥Ÿo__numbî_ønges
,

1618 (
PrŸobufCMesßgeInô
Ë
googÀ__¥Ÿobuf__fõld_des¸ùt‹_¥Ÿo__öô
,

1619 
NULL
,NULL,NULL

1621 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	ggoogÀ__¥Ÿobuf__⁄eof_des¸ùt‹_¥Ÿo__fõld_des¸ùt‹s
[2] =

1626 
PROTOBUF_C_LABEL_OPTIONAL
,

1627 
PROTOBUF_C_TYPE_STRING
,

1629 
off£tof
(
GoogÀ__PrŸobuf__O√ofDes¸ùt‹PrŸo
, 
«me
),

1630 
NULL
,

1631 
NULL
,

1633 0,
NULL
,NULL

1638 
PROTOBUF_C_LABEL_OPTIONAL
,

1639 
PROTOBUF_C_TYPE_MESSAGE
,

1641 
off£tof
(
GoogÀ__PrŸobuf__O√ofDes¸ùt‹PrŸo
, 
›ti⁄s
),

1642 &
googÀ__¥Ÿobuf__⁄eof_›ti⁄s__des¸ùt‹
,

1643 
NULL
,

1645 0,
NULL
,NULL

1648 c⁄° 
	ggoogÀ__¥Ÿobuf__⁄eof_des¸ùt‹_¥Ÿo__fõld_ödi˚s_by_«me
[] = {

1652 c⁄° 
PrŸobufCI¡R™ge
 
	ggoogÀ__¥Ÿobuf__⁄eof_des¸ùt‹_¥Ÿo__numbî_ønges
[1 + 1] =

1657 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	ggoogÀ__¥Ÿobuf__⁄eof_des¸ùt‹_¥Ÿo__des¸ùt‹
 =

1659 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

1664 (
GoogÀ__PrŸobuf__O√ofDes¸ùt‹PrŸo
),

1666 
googÀ__¥Ÿobuf__⁄eof_des¸ùt‹_¥Ÿo__fõld_des¸ùt‹s
,

1667 
googÀ__¥Ÿobuf__⁄eof_des¸ùt‹_¥Ÿo__fõld_ödi˚s_by_«me
,

1668 1, 
googÀ__¥Ÿobuf__⁄eof_des¸ùt‹_¥Ÿo__numbî_ønges
,

1669 (
PrŸobufCMesßgeInô
Ë
googÀ__¥Ÿobuf__⁄eof_des¸ùt‹_¥Ÿo__öô
,

1670 
NULL
,NULL,NULL

1672 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	ggoogÀ__¥Ÿobuf__íum_des¸ùt‹_¥Ÿo__fõld_des¸ùt‹s
[3] =

1677 
PROTOBUF_C_LABEL_OPTIONAL
,

1678 
PROTOBUF_C_TYPE_STRING
,

1680 
off£tof
(
GoogÀ__PrŸobuf__EnumDes¸ùt‹PrŸo
, 
«me
),

1681 
NULL
,

1682 
NULL
,

1684 0,
NULL
,NULL

1689 
PROTOBUF_C_LABEL_REPEATED
,

1690 
PROTOBUF_C_TYPE_MESSAGE
,

1691 
off£tof
(
GoogÀ__PrŸobuf__EnumDes¸ùt‹PrŸo
, 
n_vÆue
),

1692 
off£tof
(
GoogÀ__PrŸobuf__EnumDes¸ùt‹PrŸo
, 
vÆue
),

1693 &
googÀ__¥Ÿobuf__íum_vÆue_des¸ùt‹_¥Ÿo__des¸ùt‹
,

1694 
NULL
,

1696 0,
NULL
,NULL

1701 
PROTOBUF_C_LABEL_OPTIONAL
,

1702 
PROTOBUF_C_TYPE_MESSAGE
,

1704 
off£tof
(
GoogÀ__PrŸobuf__EnumDes¸ùt‹PrŸo
, 
›ti⁄s
),

1705 &
googÀ__¥Ÿobuf__íum_›ti⁄s__des¸ùt‹
,

1706 
NULL
,

1708 0,
NULL
,NULL

1711 c⁄° 
	ggoogÀ__¥Ÿobuf__íum_des¸ùt‹_¥Ÿo__fõld_ödi˚s_by_«me
[] = {

1716 c⁄° 
PrŸobufCI¡R™ge
 
	ggoogÀ__¥Ÿobuf__íum_des¸ùt‹_¥Ÿo__numbî_ønges
[1 + 1] =

1721 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	ggoogÀ__¥Ÿobuf__íum_des¸ùt‹_¥Ÿo__des¸ùt‹
 =

1723 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

1728 (
GoogÀ__PrŸobuf__EnumDes¸ùt‹PrŸo
),

1730 
googÀ__¥Ÿobuf__íum_des¸ùt‹_¥Ÿo__fõld_des¸ùt‹s
,

1731 
googÀ__¥Ÿobuf__íum_des¸ùt‹_¥Ÿo__fõld_ödi˚s_by_«me
,

1732 1, 
googÀ__¥Ÿobuf__íum_des¸ùt‹_¥Ÿo__numbî_ønges
,

1733 (
PrŸobufCMesßgeInô
Ë
googÀ__¥Ÿobuf__íum_des¸ùt‹_¥Ÿo__öô
,

1734 
NULL
,NULL,NULL

1736 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	ggoogÀ__¥Ÿobuf__íum_vÆue_des¸ùt‹_¥Ÿo__fõld_des¸ùt‹s
[3] =

1741 
PROTOBUF_C_LABEL_OPTIONAL
,

1742 
PROTOBUF_C_TYPE_STRING
,

1744 
off£tof
(
GoogÀ__PrŸobuf__EnumVÆueDes¸ùt‹PrŸo
, 
«me
),

1745 
NULL
,

1746 
NULL
,

1748 0,
NULL
,NULL

1753 
PROTOBUF_C_LABEL_OPTIONAL
,

1754 
PROTOBUF_C_TYPE_INT32
,

1755 
off£tof
(
GoogÀ__PrŸobuf__EnumVÆueDes¸ùt‹PrŸo
, 
has_numbî
),

1756 
off£tof
(
GoogÀ__PrŸobuf__EnumVÆueDes¸ùt‹PrŸo
, 
numbî
),

1757 
NULL
,

1758 
NULL
,

1760 0,
NULL
,NULL

1765 
PROTOBUF_C_LABEL_OPTIONAL
,

1766 
PROTOBUF_C_TYPE_MESSAGE
,

1768 
off£tof
(
GoogÀ__PrŸobuf__EnumVÆueDes¸ùt‹PrŸo
, 
›ti⁄s
),

1769 &
googÀ__¥Ÿobuf__íum_vÆue_›ti⁄s__des¸ùt‹
,

1770 
NULL
,

1772 0,
NULL
,NULL

1775 c⁄° 
	ggoogÀ__¥Ÿobuf__íum_vÆue_des¸ùt‹_¥Ÿo__fõld_ödi˚s_by_«me
[] = {

1780 c⁄° 
PrŸobufCI¡R™ge
 
	ggoogÀ__¥Ÿobuf__íum_vÆue_des¸ùt‹_¥Ÿo__numbî_ønges
[1 + 1] =

1785 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	ggoogÀ__¥Ÿobuf__íum_vÆue_des¸ùt‹_¥Ÿo__des¸ùt‹
 =

1787 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

1792 (
GoogÀ__PrŸobuf__EnumVÆueDes¸ùt‹PrŸo
),

1794 
googÀ__¥Ÿobuf__íum_vÆue_des¸ùt‹_¥Ÿo__fõld_des¸ùt‹s
,

1795 
googÀ__¥Ÿobuf__íum_vÆue_des¸ùt‹_¥Ÿo__fõld_ödi˚s_by_«me
,

1796 1, 
googÀ__¥Ÿobuf__íum_vÆue_des¸ùt‹_¥Ÿo__numbî_ønges
,

1797 (
PrŸobufCMesßgeInô
Ë
googÀ__¥Ÿobuf__íum_vÆue_des¸ùt‹_¥Ÿo__öô
,

1798 
NULL
,NULL,NULL

1800 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	ggoogÀ__¥Ÿobuf__£rvi˚_des¸ùt‹_¥Ÿo__fõld_des¸ùt‹s
[3] =

1805 
PROTOBUF_C_LABEL_OPTIONAL
,

1806 
PROTOBUF_C_TYPE_STRING
,

1808 
off£tof
(
GoogÀ__PrŸobuf__Sîvi˚Des¸ùt‹PrŸo
, 
«me
),

1809 
NULL
,

1810 
NULL
,

1812 0,
NULL
,NULL

1817 
PROTOBUF_C_LABEL_REPEATED
,

1818 
PROTOBUF_C_TYPE_MESSAGE
,

1819 
off£tof
(
GoogÀ__PrŸobuf__Sîvi˚Des¸ùt‹PrŸo
, 
n_mëhod
),

1820 
off£tof
(
GoogÀ__PrŸobuf__Sîvi˚Des¸ùt‹PrŸo
, 
mëhod
),

1821 &
googÀ__¥Ÿobuf__mëhod_des¸ùt‹_¥Ÿo__des¸ùt‹
,

1822 
NULL
,

1824 0,
NULL
,NULL

1829 
PROTOBUF_C_LABEL_OPTIONAL
,

1830 
PROTOBUF_C_TYPE_MESSAGE
,

1832 
off£tof
(
GoogÀ__PrŸobuf__Sîvi˚Des¸ùt‹PrŸo
, 
›ti⁄s
),

1833 &
googÀ__¥Ÿobuf__£rvi˚_›ti⁄s__des¸ùt‹
,

1834 
NULL
,

1836 0,
NULL
,NULL

1839 c⁄° 
	ggoogÀ__¥Ÿobuf__£rvi˚_des¸ùt‹_¥Ÿo__fõld_ödi˚s_by_«me
[] = {

1844 c⁄° 
PrŸobufCI¡R™ge
 
	ggoogÀ__¥Ÿobuf__£rvi˚_des¸ùt‹_¥Ÿo__numbî_ønges
[1 + 1] =

1849 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	ggoogÀ__¥Ÿobuf__£rvi˚_des¸ùt‹_¥Ÿo__des¸ùt‹
 =

1851 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

1856 (
GoogÀ__PrŸobuf__Sîvi˚Des¸ùt‹PrŸo
),

1858 
googÀ__¥Ÿobuf__£rvi˚_des¸ùt‹_¥Ÿo__fõld_des¸ùt‹s
,

1859 
googÀ__¥Ÿobuf__£rvi˚_des¸ùt‹_¥Ÿo__fõld_ödi˚s_by_«me
,

1860 1, 
googÀ__¥Ÿobuf__£rvi˚_des¸ùt‹_¥Ÿo__numbî_ønges
,

1861 (
PrŸobufCMesßgeInô
Ë
googÀ__¥Ÿobuf__£rvi˚_des¸ùt‹_¥Ÿo__öô
,

1862 
NULL
,NULL,NULL

1864 c⁄° 
¥Ÿobuf_c_boﬁón
 
	ggoogÀ__¥Ÿobuf__mëhod_des¸ùt‹_¥Ÿo__˛õ¡_°ªamög__deÁu…_vÆue
 = 0;

1865 c⁄° 
¥Ÿobuf_c_boﬁón
 
	ggoogÀ__¥Ÿobuf__mëhod_des¸ùt‹_¥Ÿo__£rvî_°ªamög__deÁu…_vÆue
 = 0;

1866 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	ggoogÀ__¥Ÿobuf__mëhod_des¸ùt‹_¥Ÿo__fõld_des¸ùt‹s
[6] =

1871 
PROTOBUF_C_LABEL_OPTIONAL
,

1872 
PROTOBUF_C_TYPE_STRING
,

1874 
off£tof
(
GoogÀ__PrŸobuf__MëhodDes¸ùt‹PrŸo
, 
«me
),

1875 
NULL
,

1876 
NULL
,

1878 0,
NULL
,NULL

1883 
PROTOBUF_C_LABEL_OPTIONAL
,

1884 
PROTOBUF_C_TYPE_STRING
,

1886 
off£tof
(
GoogÀ__PrŸobuf__MëhodDes¸ùt‹PrŸo
, 
öput_ty≥
),

1887 
NULL
,

1888 
NULL
,

1890 0,
NULL
,NULL

1895 
PROTOBUF_C_LABEL_OPTIONAL
,

1896 
PROTOBUF_C_TYPE_STRING
,

1898 
off£tof
(
GoogÀ__PrŸobuf__MëhodDes¸ùt‹PrŸo
, 
ouçut_ty≥
),

1899 
NULL
,

1900 
NULL
,

1902 0,
NULL
,NULL

1907 
PROTOBUF_C_LABEL_OPTIONAL
,

1908 
PROTOBUF_C_TYPE_MESSAGE
,

1910 
off£tof
(
GoogÀ__PrŸobuf__MëhodDes¸ùt‹PrŸo
, 
›ti⁄s
),

1911 &
googÀ__¥Ÿobuf__mëhod_›ti⁄s__des¸ùt‹
,

1912 
NULL
,

1914 0,
NULL
,NULL

1919 
PROTOBUF_C_LABEL_OPTIONAL
,

1920 
PROTOBUF_C_TYPE_BOOL
,

1921 
off£tof
(
GoogÀ__PrŸobuf__MëhodDes¸ùt‹PrŸo
, 
has_˛õ¡_°ªamög
),

1922 
off£tof
(
GoogÀ__PrŸobuf__MëhodDes¸ùt‹PrŸo
, 
˛õ¡_°ªamög
),

1923 
NULL
,

1924 &
googÀ__¥Ÿobuf__mëhod_des¸ùt‹_¥Ÿo__˛õ¡_°ªamög__deÁu…_vÆue
,

1926 0,
NULL
,NULL

1931 
PROTOBUF_C_LABEL_OPTIONAL
,

1932 
PROTOBUF_C_TYPE_BOOL
,

1933 
off£tof
(
GoogÀ__PrŸobuf__MëhodDes¸ùt‹PrŸo
, 
has_£rvî_°ªamög
),

1934 
off£tof
(
GoogÀ__PrŸobuf__MëhodDes¸ùt‹PrŸo
, 
£rvî_°ªamög
),

1935 
NULL
,

1936 &
googÀ__¥Ÿobuf__mëhod_des¸ùt‹_¥Ÿo__£rvî_°ªamög__deÁu…_vÆue
,

1938 0,
NULL
,NULL

1941 c⁄° 
	ggoogÀ__¥Ÿobuf__mëhod_des¸ùt‹_¥Ÿo__fõld_ödi˚s_by_«me
[] = {

1949 c⁄° 
PrŸobufCI¡R™ge
 
	ggoogÀ__¥Ÿobuf__mëhod_des¸ùt‹_¥Ÿo__numbî_ønges
[1 + 1] =

1954 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	ggoogÀ__¥Ÿobuf__mëhod_des¸ùt‹_¥Ÿo__des¸ùt‹
 =

1956 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

1961 (
GoogÀ__PrŸobuf__MëhodDes¸ùt‹PrŸo
),

1963 
googÀ__¥Ÿobuf__mëhod_des¸ùt‹_¥Ÿo__fõld_des¸ùt‹s
,

1964 
googÀ__¥Ÿobuf__mëhod_des¸ùt‹_¥Ÿo__fõld_ödi˚s_by_«me
,

1965 1, 
googÀ__¥Ÿobuf__mëhod_des¸ùt‹_¥Ÿo__numbî_ønges
,

1966 (
PrŸobufCMesßgeInô
Ë
googÀ__¥Ÿobuf__mëhod_des¸ùt‹_¥Ÿo__öô
,

1967 
NULL
,NULL,NULL

1969 c⁄° 
PrŸobufCEnumVÆue
 
	ggoogÀ__¥Ÿobuf__fûe_›ti⁄s__›timize_mode__íum_vÆues_by_numbî
[3] =

1975 c⁄° 
PrŸobufCI¡R™ge
 
	ggoogÀ__¥Ÿobuf__fûe_›ti⁄s__›timize_mode__vÆue_ønges
[] = {

1978 c⁄° 
PrŸobufCEnumVÆueIndex
 
	ggoogÀ__¥Ÿobuf__fûe_›ti⁄s__›timize_mode__íum_vÆues_by_«me
[3] =

1984 c⁄° 
PrŸobufCEnumDes¸ùt‹
 
	ggoogÀ__¥Ÿobuf__fûe_›ti⁄s__›timize_mode__des¸ùt‹
 =

1986 
PROTOBUF_C__ENUM_DESCRIPTOR_MAGIC
,

1992 
googÀ__¥Ÿobuf__fûe_›ti⁄s__›timize_mode__íum_vÆues_by_numbî
,

1994 
googÀ__¥Ÿobuf__fûe_›ti⁄s__›timize_mode__íum_vÆues_by_«me
,

1996 
googÀ__¥Ÿobuf__fûe_›ti⁄s__›timize_mode__vÆue_ønges
,

1997 
NULL
,NULL,NULL,NULL

1999 c⁄° 
¥Ÿobuf_c_boﬁón
 
	ggoogÀ__¥Ÿobuf__fûe_›ti⁄s__java_mu…ùÀ_fûes__deÁu…_vÆue
 = 0;

2000 c⁄° 
¥Ÿobuf_c_boﬁón
 
	ggoogÀ__¥Ÿobuf__fûe_›ti⁄s__java_°rög_check_utf8__deÁu…_vÆue
 = 0;

2001 c⁄° 
GoogÀ__PrŸobuf__FûeO±i⁄s__O±imizeMode
 
	ggoogÀ__¥Ÿobuf__fûe_›ti⁄s__›timize_f‹__deÁu…_vÆue
 = 
GOOGLE__PROTOBUF__FILE_OPTIONS__OPTIMIZE_MODE__SPEED
;

2002 c⁄° 
¥Ÿobuf_c_boﬁón
 
	ggoogÀ__¥Ÿobuf__fûe_›ti⁄s__cc_gíîic_£rvi˚s__deÁu…_vÆue
 = 0;

2003 c⁄° 
¥Ÿobuf_c_boﬁón
 
	ggoogÀ__¥Ÿobuf__fûe_›ti⁄s__java_gíîic_£rvi˚s__deÁu…_vÆue
 = 0;

2004 c⁄° 
¥Ÿobuf_c_boﬁón
 
	ggoogÀ__¥Ÿobuf__fûe_›ti⁄s__py_gíîic_£rvi˚s__deÁu…_vÆue
 = 0;

2005 c⁄° 
¥Ÿobuf_c_boﬁón
 
	ggoogÀ__¥Ÿobuf__fûe_›ti⁄s__dïªˇãd__deÁu…_vÆue
 = 0;

2006 c⁄° 
¥Ÿobuf_c_boﬁón
 
	ggoogÀ__¥Ÿobuf__fûe_›ti⁄s__cc_íabÀ_¨ías__deÁu…_vÆue
 = 0;

2007 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	ggoogÀ__¥Ÿobuf__fûe_›ti⁄s__fõld_des¸ùt‹s
[16] =

2012 
PROTOBUF_C_LABEL_OPTIONAL
,

2013 
PROTOBUF_C_TYPE_STRING
,

2015 
off£tof
(
GoogÀ__PrŸobuf__FûeO±i⁄s
, 
java_∑ckage
),

2016 
NULL
,

2017 
NULL
,

2019 0,
NULL
,NULL

2024 
PROTOBUF_C_LABEL_OPTIONAL
,

2025 
PROTOBUF_C_TYPE_STRING
,

2027 
off£tof
(
GoogÀ__PrŸobuf__FûeO±i⁄s
, 
java_ouãr_˛as¢ame
),

2028 
NULL
,

2029 
NULL
,

2031 0,
NULL
,NULL

2036 
PROTOBUF_C_LABEL_OPTIONAL
,

2037 
PROTOBUF_C_TYPE_ENUM
,

2038 
off£tof
(
GoogÀ__PrŸobuf__FûeO±i⁄s
, 
has_›timize_f‹
),

2039 
off£tof
(
GoogÀ__PrŸobuf__FûeO±i⁄s
, 
›timize_f‹
),

2040 &
googÀ__¥Ÿobuf__fûe_›ti⁄s__›timize_mode__des¸ùt‹
,

2041 &
googÀ__¥Ÿobuf__fûe_›ti⁄s__›timize_f‹__deÁu…_vÆue
,

2043 0,
NULL
,NULL

2048 
PROTOBUF_C_LABEL_OPTIONAL
,

2049 
PROTOBUF_C_TYPE_BOOL
,

2050 
off£tof
(
GoogÀ__PrŸobuf__FûeO±i⁄s
, 
has_java_mu…ùÀ_fûes
),

2051 
off£tof
(
GoogÀ__PrŸobuf__FûeO±i⁄s
, 
java_mu…ùÀ_fûes
),

2052 
NULL
,

2053 &
googÀ__¥Ÿobuf__fûe_›ti⁄s__java_mu…ùÀ_fûes__deÁu…_vÆue
,

2055 0,
NULL
,NULL

2060 
PROTOBUF_C_LABEL_OPTIONAL
,

2061 
PROTOBUF_C_TYPE_STRING
,

2063 
off£tof
(
GoogÀ__PrŸobuf__FûeO±i⁄s
, 
go_∑ckage
),

2064 
NULL
,

2065 
NULL
,

2067 0,
NULL
,NULL

2072 
PROTOBUF_C_LABEL_OPTIONAL
,

2073 
PROTOBUF_C_TYPE_BOOL
,

2074 
off£tof
(
GoogÀ__PrŸobuf__FûeO±i⁄s
, 
has_cc_gíîic_£rvi˚s
),

2075 
off£tof
(
GoogÀ__PrŸobuf__FûeO±i⁄s
, 
cc_gíîic_£rvi˚s
),

2076 
NULL
,

2077 &
googÀ__¥Ÿobuf__fûe_›ti⁄s__cc_gíîic_£rvi˚s__deÁu…_vÆue
,

2079 0,
NULL
,NULL

2084 
PROTOBUF_C_LABEL_OPTIONAL
,

2085 
PROTOBUF_C_TYPE_BOOL
,

2086 
off£tof
(
GoogÀ__PrŸobuf__FûeO±i⁄s
, 
has_java_gíîic_£rvi˚s
),

2087 
off£tof
(
GoogÀ__PrŸobuf__FûeO±i⁄s
, 
java_gíîic_£rvi˚s
),

2088 
NULL
,

2089 &
googÀ__¥Ÿobuf__fûe_›ti⁄s__java_gíîic_£rvi˚s__deÁu…_vÆue
,

2091 0,
NULL
,NULL

2096 
PROTOBUF_C_LABEL_OPTIONAL
,

2097 
PROTOBUF_C_TYPE_BOOL
,

2098 
off£tof
(
GoogÀ__PrŸobuf__FûeO±i⁄s
, 
has_py_gíîic_£rvi˚s
),

2099 
off£tof
(
GoogÀ__PrŸobuf__FûeO±i⁄s
, 
py_gíîic_£rvi˚s
),

2100 
NULL
,

2101 &
googÀ__¥Ÿobuf__fûe_›ti⁄s__py_gíîic_£rvi˚s__deÁu…_vÆue
,

2103 0,
NULL
,NULL

2108 
PROTOBUF_C_LABEL_OPTIONAL
,

2109 
PROTOBUF_C_TYPE_BOOL
,

2110 
off£tof
(
GoogÀ__PrŸobuf__FûeO±i⁄s
, 
has_java_gíî©e_equÆs_™d_hash
),

2111 
off£tof
(
GoogÀ__PrŸobuf__FûeO±i⁄s
, 
java_gíî©e_equÆs_™d_hash
),

2112 
NULL
,

2113 
NULL
,

2114 0 | 
PROTOBUF_C_FIELD_FLAG_DEPRECATED
,

2115 0,
NULL
,NULL

2120 
PROTOBUF_C_LABEL_OPTIONAL
,

2121 
PROTOBUF_C_TYPE_BOOL
,

2122 
off£tof
(
GoogÀ__PrŸobuf__FûeO±i⁄s
, 
has_dïªˇãd
),

2123 
off£tof
(
GoogÀ__PrŸobuf__FûeO±i⁄s
, 
dïªˇãd
),

2124 
NULL
,

2125 &
googÀ__¥Ÿobuf__fûe_›ti⁄s__dïªˇãd__deÁu…_vÆue
,

2127 0,
NULL
,NULL

2132 
PROTOBUF_C_LABEL_OPTIONAL
,

2133 
PROTOBUF_C_TYPE_BOOL
,

2134 
off£tof
(
GoogÀ__PrŸobuf__FûeO±i⁄s
, 
has_java_°rög_check_utf8
),

2135 
off£tof
(
GoogÀ__PrŸobuf__FûeO±i⁄s
, 
java_°rög_check_utf8
),

2136 
NULL
,

2137 &
googÀ__¥Ÿobuf__fûe_›ti⁄s__java_°rög_check_utf8__deÁu…_vÆue
,

2139 0,
NULL
,NULL

2144 
PROTOBUF_C_LABEL_OPTIONAL
,

2145 
PROTOBUF_C_TYPE_BOOL
,

2146 
off£tof
(
GoogÀ__PrŸobuf__FûeO±i⁄s
, 
has_cc_íabÀ_¨ías
),

2147 
off£tof
(
GoogÀ__PrŸobuf__FûeO±i⁄s
, 
cc_íabÀ_¨ías
),

2148 
NULL
,

2149 &
googÀ__¥Ÿobuf__fûe_›ti⁄s__cc_íabÀ_¨ías__deÁu…_vÆue
,

2151 0,
NULL
,NULL

2156 
PROTOBUF_C_LABEL_OPTIONAL
,

2157 
PROTOBUF_C_TYPE_STRING
,

2159 
off£tof
(
GoogÀ__PrŸobuf__FûeO±i⁄s
, 
objc_˛ass_¥efix
),

2160 
NULL
,

2161 
NULL
,

2163 0,
NULL
,NULL

2168 
PROTOBUF_C_LABEL_OPTIONAL
,

2169 
PROTOBUF_C_TYPE_STRING
,

2171 
off£tof
(
GoogÀ__PrŸobuf__FûeO±i⁄s
, 
csh¨p_«me•a˚
),

2172 
NULL
,

2173 
NULL
,

2175 0,
NULL
,NULL

2180 
PROTOBUF_C_LABEL_OPTIONAL
,

2181 
PROTOBUF_C_TYPE_STRING
,

2183 
off£tof
(
GoogÀ__PrŸobuf__FûeO±i⁄s
, 
swi·_¥efix
),

2184 
NULL
,

2185 
NULL
,

2187 0,
NULL
,NULL

2192 
PROTOBUF_C_LABEL_REPEATED
,

2193 
PROTOBUF_C_TYPE_MESSAGE
,

2194 
off£tof
(
GoogÀ__PrŸobuf__FûeO±i⁄s
, 
n_unöãΩªãd_›ti⁄
),

2195 
off£tof
(
GoogÀ__PrŸobuf__FûeO±i⁄s
, 
unöãΩªãd_›ti⁄
),

2196 &
googÀ__¥Ÿobuf__unöãΩªãd_›ti⁄__des¸ùt‹
,

2197 
NULL
,

2199 0,
NULL
,NULL

2202 c⁄° 
	ggoogÀ__¥Ÿobuf__fûe_›ti⁄s__fõld_ödi˚s_by_«me
[] = {

2220 c⁄° 
PrŸobufCI¡R™ge
 
	ggoogÀ__¥Ÿobuf__fûe_›ti⁄s__numbî_ønges
[10 + 1] =

2234 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	ggoogÀ__¥Ÿobuf__fûe_›ti⁄s__des¸ùt‹
 =

2236 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

2241 (
GoogÀ__PrŸobuf__FûeO±i⁄s
),

2243 
googÀ__¥Ÿobuf__fûe_›ti⁄s__fõld_des¸ùt‹s
,

2244 
googÀ__¥Ÿobuf__fûe_›ti⁄s__fõld_ödi˚s_by_«me
,

2245 10, 
googÀ__¥Ÿobuf__fûe_›ti⁄s__numbî_ønges
,

2246 (
PrŸobufCMesßgeInô
Ë
googÀ__¥Ÿobuf__fûe_›ti⁄s__öô
,

2247 
NULL
,NULL,NULL

2249 c⁄° 
¥Ÿobuf_c_boﬁón
 
	ggoogÀ__¥Ÿobuf__mesßge_›ti⁄s__mesßge_£t_wúe_f‹m©__deÁu…_vÆue
 = 0;

2250 c⁄° 
¥Ÿobuf_c_boﬁón
 
	ggoogÀ__¥Ÿobuf__mesßge_›ti⁄s__no_°™d¨d_des¸ùt‹_ac˚ss‹__deÁu…_vÆue
 = 0;

2251 c⁄° 
¥Ÿobuf_c_boﬁón
 
	ggoogÀ__¥Ÿobuf__mesßge_›ti⁄s__dïªˇãd__deÁu…_vÆue
 = 0;

2252 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	ggoogÀ__¥Ÿobuf__mesßge_›ti⁄s__fõld_des¸ùt‹s
[5] =

2257 
PROTOBUF_C_LABEL_OPTIONAL
,

2258 
PROTOBUF_C_TYPE_BOOL
,

2259 
off£tof
(
GoogÀ__PrŸobuf__MesßgeO±i⁄s
, 
has_mesßge_£t_wúe_f‹m©
),

2260 
off£tof
(
GoogÀ__PrŸobuf__MesßgeO±i⁄s
, 
mesßge_£t_wúe_f‹m©
),

2261 
NULL
,

2262 &
googÀ__¥Ÿobuf__mesßge_›ti⁄s__mesßge_£t_wúe_f‹m©__deÁu…_vÆue
,

2264 0,
NULL
,NULL

2269 
PROTOBUF_C_LABEL_OPTIONAL
,

2270 
PROTOBUF_C_TYPE_BOOL
,

2271 
off£tof
(
GoogÀ__PrŸobuf__MesßgeO±i⁄s
, 
has_no_°™d¨d_des¸ùt‹_ac˚ss‹
),

2272 
off£tof
(
GoogÀ__PrŸobuf__MesßgeO±i⁄s
, 
no_°™d¨d_des¸ùt‹_ac˚ss‹
),

2273 
NULL
,

2274 &
googÀ__¥Ÿobuf__mesßge_›ti⁄s__no_°™d¨d_des¸ùt‹_ac˚ss‹__deÁu…_vÆue
,

2276 0,
NULL
,NULL

2281 
PROTOBUF_C_LABEL_OPTIONAL
,

2282 
PROTOBUF_C_TYPE_BOOL
,

2283 
off£tof
(
GoogÀ__PrŸobuf__MesßgeO±i⁄s
, 
has_dïªˇãd
),

2284 
off£tof
(
GoogÀ__PrŸobuf__MesßgeO±i⁄s
, 
dïªˇãd
),

2285 
NULL
,

2286 &
googÀ__¥Ÿobuf__mesßge_›ti⁄s__dïªˇãd__deÁu…_vÆue
,

2288 0,
NULL
,NULL

2293 
PROTOBUF_C_LABEL_OPTIONAL
,

2294 
PROTOBUF_C_TYPE_BOOL
,

2295 
off£tof
(
GoogÀ__PrŸobuf__MesßgeO±i⁄s
, 
has_m≠_íåy
),

2296 
off£tof
(
GoogÀ__PrŸobuf__MesßgeO±i⁄s
, 
m≠_íåy
),

2297 
NULL
,

2298 
NULL
,

2300 0,
NULL
,NULL

2305 
PROTOBUF_C_LABEL_REPEATED
,

2306 
PROTOBUF_C_TYPE_MESSAGE
,

2307 
off£tof
(
GoogÀ__PrŸobuf__MesßgeO±i⁄s
, 
n_unöãΩªãd_›ti⁄
),

2308 
off£tof
(
GoogÀ__PrŸobuf__MesßgeO±i⁄s
, 
unöãΩªãd_›ti⁄
),

2309 &
googÀ__¥Ÿobuf__unöãΩªãd_›ti⁄__des¸ùt‹
,

2310 
NULL
,

2312 0,
NULL
,NULL

2315 c⁄° 
	ggoogÀ__¥Ÿobuf__mesßge_›ti⁄s__fõld_ödi˚s_by_«me
[] = {

2322 c⁄° 
PrŸobufCI¡R™ge
 
	ggoogÀ__¥Ÿobuf__mesßge_›ti⁄s__numbî_ønges
[3 + 1] =

2329 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	ggoogÀ__¥Ÿobuf__mesßge_›ti⁄s__des¸ùt‹
 =

2331 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

2336 (
GoogÀ__PrŸobuf__MesßgeO±i⁄s
),

2338 
googÀ__¥Ÿobuf__mesßge_›ti⁄s__fõld_des¸ùt‹s
,

2339 
googÀ__¥Ÿobuf__mesßge_›ti⁄s__fõld_ödi˚s_by_«me
,

2340 3, 
googÀ__¥Ÿobuf__mesßge_›ti⁄s__numbî_ønges
,

2341 (
PrŸobufCMesßgeInô
Ë
googÀ__¥Ÿobuf__mesßge_›ti⁄s__öô
,

2342 
NULL
,NULL,NULL

2344 c⁄° 
PrŸobufCEnumVÆue
 
	ggoogÀ__¥Ÿobuf__fõld_›ti⁄s__˘y≥__íum_vÆues_by_numbî
[3] =

2350 c⁄° 
PrŸobufCI¡R™ge
 
	ggoogÀ__¥Ÿobuf__fõld_›ti⁄s__˘y≥__vÆue_ønges
[] = {

2353 c⁄° 
PrŸobufCEnumVÆueIndex
 
	ggoogÀ__¥Ÿobuf__fõld_›ti⁄s__˘y≥__íum_vÆues_by_«me
[3] =

2359 c⁄° 
PrŸobufCEnumDes¸ùt‹
 
	ggoogÀ__¥Ÿobuf__fõld_›ti⁄s__˘y≥__des¸ùt‹
 =

2361 
PROTOBUF_C__ENUM_DESCRIPTOR_MAGIC
,

2367 
googÀ__¥Ÿobuf__fõld_›ti⁄s__˘y≥__íum_vÆues_by_numbî
,

2369 
googÀ__¥Ÿobuf__fõld_›ti⁄s__˘y≥__íum_vÆues_by_«me
,

2371 
googÀ__¥Ÿobuf__fõld_›ti⁄s__˘y≥__vÆue_ønges
,

2372 
NULL
,NULL,NULL,NULL

2374 c⁄° 
PrŸobufCEnumVÆue
 
	ggoogÀ__¥Ÿobuf__fõld_›ti⁄s__j°y≥__íum_vÆues_by_numbî
[3] =

2380 c⁄° 
PrŸobufCI¡R™ge
 
	ggoogÀ__¥Ÿobuf__fõld_›ti⁄s__j°y≥__vÆue_ønges
[] = {

2383 c⁄° 
PrŸobufCEnumVÆueIndex
 
	ggoogÀ__¥Ÿobuf__fõld_›ti⁄s__j°y≥__íum_vÆues_by_«me
[3] =

2389 c⁄° 
PrŸobufCEnumDes¸ùt‹
 
	ggoogÀ__¥Ÿobuf__fõld_›ti⁄s__j°y≥__des¸ùt‹
 =

2391 
PROTOBUF_C__ENUM_DESCRIPTOR_MAGIC
,

2397 
googÀ__¥Ÿobuf__fõld_›ti⁄s__j°y≥__íum_vÆues_by_numbî
,

2399 
googÀ__¥Ÿobuf__fõld_›ti⁄s__j°y≥__íum_vÆues_by_«me
,

2401 
googÀ__¥Ÿobuf__fõld_›ti⁄s__j°y≥__vÆue_ønges
,

2402 
NULL
,NULL,NULL,NULL

2404 c⁄° 
GoogÀ__PrŸobuf__FõldO±i⁄s__CTy≥
 
	ggoogÀ__¥Ÿobuf__fõld_›ti⁄s__˘y≥__deÁu…_vÆue
 = 
GOOGLE__PROTOBUF__FIELD_OPTIONS__CTYPE__STRING
;

2405 c⁄° 
GoogÀ__PrŸobuf__FõldO±i⁄s__JSTy≥
 
	ggoogÀ__¥Ÿobuf__fõld_›ti⁄s__j°y≥__deÁu…_vÆue
 = 
GOOGLE__PROTOBUF__FIELD_OPTIONS__JSTYPE__JS_NORMAL
;

2406 c⁄° 
¥Ÿobuf_c_boﬁón
 
	ggoogÀ__¥Ÿobuf__fõld_›ti⁄s__œzy__deÁu…_vÆue
 = 0;

2407 c⁄° 
¥Ÿobuf_c_boﬁón
 
	ggoogÀ__¥Ÿobuf__fõld_›ti⁄s__dïªˇãd__deÁu…_vÆue
 = 0;

2408 c⁄° 
¥Ÿobuf_c_boﬁón
 
	ggoogÀ__¥Ÿobuf__fõld_›ti⁄s__wók__deÁu…_vÆue
 = 0;

2409 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	ggoogÀ__¥Ÿobuf__fõld_›ti⁄s__fõld_des¸ùt‹s
[7] =

2414 
PROTOBUF_C_LABEL_OPTIONAL
,

2415 
PROTOBUF_C_TYPE_ENUM
,

2416 
off£tof
(
GoogÀ__PrŸobuf__FõldO±i⁄s
, 
has_˘y≥
),

2417 
off£tof
(
GoogÀ__PrŸobuf__FõldO±i⁄s
, 
˘y≥
),

2418 &
googÀ__¥Ÿobuf__fõld_›ti⁄s__˘y≥__des¸ùt‹
,

2419 &
googÀ__¥Ÿobuf__fõld_›ti⁄s__˘y≥__deÁu…_vÆue
,

2421 0,
NULL
,NULL

2426 
PROTOBUF_C_LABEL_OPTIONAL
,

2427 
PROTOBUF_C_TYPE_BOOL
,

2428 
off£tof
(
GoogÀ__PrŸobuf__FõldO±i⁄s
, 
has_∑cked
),

2429 
off£tof
(
GoogÀ__PrŸobuf__FõldO±i⁄s
, 
∑cked
),

2430 
NULL
,

2431 
NULL
,

2433 0,
NULL
,NULL

2438 
PROTOBUF_C_LABEL_OPTIONAL
,

2439 
PROTOBUF_C_TYPE_BOOL
,

2440 
off£tof
(
GoogÀ__PrŸobuf__FõldO±i⁄s
, 
has_dïªˇãd
),

2441 
off£tof
(
GoogÀ__PrŸobuf__FõldO±i⁄s
, 
dïªˇãd
),

2442 
NULL
,

2443 &
googÀ__¥Ÿobuf__fõld_›ti⁄s__dïªˇãd__deÁu…_vÆue
,

2445 0,
NULL
,NULL

2450 
PROTOBUF_C_LABEL_OPTIONAL
,

2451 
PROTOBUF_C_TYPE_BOOL
,

2452 
off£tof
(
GoogÀ__PrŸobuf__FõldO±i⁄s
, 
has_œzy
),

2453 
off£tof
(
GoogÀ__PrŸobuf__FõldO±i⁄s
, 
œzy
),

2454 
NULL
,

2455 &
googÀ__¥Ÿobuf__fõld_›ti⁄s__œzy__deÁu…_vÆue
,

2457 0,
NULL
,NULL

2462 
PROTOBUF_C_LABEL_OPTIONAL
,

2463 
PROTOBUF_C_TYPE_ENUM
,

2464 
off£tof
(
GoogÀ__PrŸobuf__FõldO±i⁄s
, 
has_j°y≥
),

2465 
off£tof
(
GoogÀ__PrŸobuf__FõldO±i⁄s
, 
j°y≥
),

2466 &
googÀ__¥Ÿobuf__fõld_›ti⁄s__j°y≥__des¸ùt‹
,

2467 &
googÀ__¥Ÿobuf__fõld_›ti⁄s__j°y≥__deÁu…_vÆue
,

2469 0,
NULL
,NULL

2474 
PROTOBUF_C_LABEL_OPTIONAL
,

2475 
PROTOBUF_C_TYPE_BOOL
,

2476 
off£tof
(
GoogÀ__PrŸobuf__FõldO±i⁄s
, 
has_wók
),

2477 
off£tof
(
GoogÀ__PrŸobuf__FõldO±i⁄s
, 
wók
),

2478 
NULL
,

2479 &
googÀ__¥Ÿobuf__fõld_›ti⁄s__wók__deÁu…_vÆue
,

2481 0,
NULL
,NULL

2486 
PROTOBUF_C_LABEL_REPEATED
,

2487 
PROTOBUF_C_TYPE_MESSAGE
,

2488 
off£tof
(
GoogÀ__PrŸobuf__FõldO±i⁄s
, 
n_unöãΩªãd_›ti⁄
),

2489 
off£tof
(
GoogÀ__PrŸobuf__FõldO±i⁄s
, 
unöãΩªãd_›ti⁄
),

2490 &
googÀ__¥Ÿobuf__unöãΩªãd_›ti⁄__des¸ùt‹
,

2491 
NULL
,

2493 0,
NULL
,NULL

2496 c⁄° 
	ggoogÀ__¥Ÿobuf__fõld_›ti⁄s__fõld_ödi˚s_by_«me
[] = {

2505 c⁄° 
PrŸobufCI¡R™ge
 
	ggoogÀ__¥Ÿobuf__fõld_›ti⁄s__numbî_ønges
[4 + 1] =

2513 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	ggoogÀ__¥Ÿobuf__fõld_›ti⁄s__des¸ùt‹
 =

2515 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

2520 (
GoogÀ__PrŸobuf__FõldO±i⁄s
),

2522 
googÀ__¥Ÿobuf__fõld_›ti⁄s__fõld_des¸ùt‹s
,

2523 
googÀ__¥Ÿobuf__fõld_›ti⁄s__fõld_ödi˚s_by_«me
,

2524 4, 
googÀ__¥Ÿobuf__fõld_›ti⁄s__numbî_ønges
,

2525 (
PrŸobufCMesßgeInô
Ë
googÀ__¥Ÿobuf__fõld_›ti⁄s__öô
,

2526 
NULL
,NULL,NULL

2528 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	ggoogÀ__¥Ÿobuf__⁄eof_›ti⁄s__fõld_des¸ùt‹s
[1] =

2533 
PROTOBUF_C_LABEL_REPEATED
,

2534 
PROTOBUF_C_TYPE_MESSAGE
,

2535 
off£tof
(
GoogÀ__PrŸobuf__O√ofO±i⁄s
, 
n_unöãΩªãd_›ti⁄
),

2536 
off£tof
(
GoogÀ__PrŸobuf__O√ofO±i⁄s
, 
unöãΩªãd_›ti⁄
),

2537 &
googÀ__¥Ÿobuf__unöãΩªãd_›ti⁄__des¸ùt‹
,

2538 
NULL
,

2540 0,
NULL
,NULL

2543 c⁄° 
	ggoogÀ__¥Ÿobuf__⁄eof_›ti⁄s__fõld_ödi˚s_by_«me
[] = {

2546 c⁄° 
PrŸobufCI¡R™ge
 
	ggoogÀ__¥Ÿobuf__⁄eof_›ti⁄s__numbî_ønges
[1 + 1] =

2551 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	ggoogÀ__¥Ÿobuf__⁄eof_›ti⁄s__des¸ùt‹
 =

2553 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

2558 (
GoogÀ__PrŸobuf__O√ofO±i⁄s
),

2560 
googÀ__¥Ÿobuf__⁄eof_›ti⁄s__fõld_des¸ùt‹s
,

2561 
googÀ__¥Ÿobuf__⁄eof_›ti⁄s__fõld_ödi˚s_by_«me
,

2562 1, 
googÀ__¥Ÿobuf__⁄eof_›ti⁄s__numbî_ønges
,

2563 (
PrŸobufCMesßgeInô
Ë
googÀ__¥Ÿobuf__⁄eof_›ti⁄s__öô
,

2564 
NULL
,NULL,NULL

2566 c⁄° 
¥Ÿobuf_c_boﬁón
 
	ggoogÀ__¥Ÿobuf__íum_›ti⁄s__dïªˇãd__deÁu…_vÆue
 = 0;

2567 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	ggoogÀ__¥Ÿobuf__íum_›ti⁄s__fõld_des¸ùt‹s
[3] =

2572 
PROTOBUF_C_LABEL_OPTIONAL
,

2573 
PROTOBUF_C_TYPE_BOOL
,

2574 
off£tof
(
GoogÀ__PrŸobuf__EnumO±i⁄s
, 
has_Ælow_Æüs
),

2575 
off£tof
(
GoogÀ__PrŸobuf__EnumO±i⁄s
, 
Ælow_Æüs
),

2576 
NULL
,

2577 
NULL
,

2579 0,
NULL
,NULL

2584 
PROTOBUF_C_LABEL_OPTIONAL
,

2585 
PROTOBUF_C_TYPE_BOOL
,

2586 
off£tof
(
GoogÀ__PrŸobuf__EnumO±i⁄s
, 
has_dïªˇãd
),

2587 
off£tof
(
GoogÀ__PrŸobuf__EnumO±i⁄s
, 
dïªˇãd
),

2588 
NULL
,

2589 &
googÀ__¥Ÿobuf__íum_›ti⁄s__dïªˇãd__deÁu…_vÆue
,

2591 0,
NULL
,NULL

2596 
PROTOBUF_C_LABEL_REPEATED
,

2597 
PROTOBUF_C_TYPE_MESSAGE
,

2598 
off£tof
(
GoogÀ__PrŸobuf__EnumO±i⁄s
, 
n_unöãΩªãd_›ti⁄
),

2599 
off£tof
(
GoogÀ__PrŸobuf__EnumO±i⁄s
, 
unöãΩªãd_›ti⁄
),

2600 &
googÀ__¥Ÿobuf__unöãΩªãd_›ti⁄__des¸ùt‹
,

2601 
NULL
,

2603 0,
NULL
,NULL

2606 c⁄° 
	ggoogÀ__¥Ÿobuf__íum_›ti⁄s__fõld_ödi˚s_by_«me
[] = {

2611 c⁄° 
PrŸobufCI¡R™ge
 
	ggoogÀ__¥Ÿobuf__íum_›ti⁄s__numbî_ønges
[2 + 1] =

2617 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	ggoogÀ__¥Ÿobuf__íum_›ti⁄s__des¸ùt‹
 =

2619 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

2624 (
GoogÀ__PrŸobuf__EnumO±i⁄s
),

2626 
googÀ__¥Ÿobuf__íum_›ti⁄s__fõld_des¸ùt‹s
,

2627 
googÀ__¥Ÿobuf__íum_›ti⁄s__fõld_ödi˚s_by_«me
,

2628 2, 
googÀ__¥Ÿobuf__íum_›ti⁄s__numbî_ønges
,

2629 (
PrŸobufCMesßgeInô
Ë
googÀ__¥Ÿobuf__íum_›ti⁄s__öô
,

2630 
NULL
,NULL,NULL

2632 c⁄° 
¥Ÿobuf_c_boﬁón
 
	ggoogÀ__¥Ÿobuf__íum_vÆue_›ti⁄s__dïªˇãd__deÁu…_vÆue
 = 0;

2633 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	ggoogÀ__¥Ÿobuf__íum_vÆue_›ti⁄s__fõld_des¸ùt‹s
[2] =

2638 
PROTOBUF_C_LABEL_OPTIONAL
,

2639 
PROTOBUF_C_TYPE_BOOL
,

2640 
off£tof
(
GoogÀ__PrŸobuf__EnumVÆueO±i⁄s
, 
has_dïªˇãd
),

2641 
off£tof
(
GoogÀ__PrŸobuf__EnumVÆueO±i⁄s
, 
dïªˇãd
),

2642 
NULL
,

2643 &
googÀ__¥Ÿobuf__íum_vÆue_›ti⁄s__dïªˇãd__deÁu…_vÆue
,

2645 0,
NULL
,NULL

2650 
PROTOBUF_C_LABEL_REPEATED
,

2651 
PROTOBUF_C_TYPE_MESSAGE
,

2652 
off£tof
(
GoogÀ__PrŸobuf__EnumVÆueO±i⁄s
, 
n_unöãΩªãd_›ti⁄
),

2653 
off£tof
(
GoogÀ__PrŸobuf__EnumVÆueO±i⁄s
, 
unöãΩªãd_›ti⁄
),

2654 &
googÀ__¥Ÿobuf__unöãΩªãd_›ti⁄__des¸ùt‹
,

2655 
NULL
,

2657 0,
NULL
,NULL

2660 c⁄° 
	ggoogÀ__¥Ÿobuf__íum_vÆue_›ti⁄s__fõld_ödi˚s_by_«me
[] = {

2664 c⁄° 
PrŸobufCI¡R™ge
 
	ggoogÀ__¥Ÿobuf__íum_vÆue_›ti⁄s__numbî_ønges
[2 + 1] =

2670 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	ggoogÀ__¥Ÿobuf__íum_vÆue_›ti⁄s__des¸ùt‹
 =

2672 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

2677 (
GoogÀ__PrŸobuf__EnumVÆueO±i⁄s
),

2679 
googÀ__¥Ÿobuf__íum_vÆue_›ti⁄s__fõld_des¸ùt‹s
,

2680 
googÀ__¥Ÿobuf__íum_vÆue_›ti⁄s__fõld_ödi˚s_by_«me
,

2681 2, 
googÀ__¥Ÿobuf__íum_vÆue_›ti⁄s__numbî_ønges
,

2682 (
PrŸobufCMesßgeInô
Ë
googÀ__¥Ÿobuf__íum_vÆue_›ti⁄s__öô
,

2683 
NULL
,NULL,NULL

2685 c⁄° 
¥Ÿobuf_c_boﬁón
 
	ggoogÀ__¥Ÿobuf__£rvi˚_›ti⁄s__dïªˇãd__deÁu…_vÆue
 = 0;

2686 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	ggoogÀ__¥Ÿobuf__£rvi˚_›ti⁄s__fõld_des¸ùt‹s
[2] =

2691 
PROTOBUF_C_LABEL_OPTIONAL
,

2692 
PROTOBUF_C_TYPE_BOOL
,

2693 
off£tof
(
GoogÀ__PrŸobuf__Sîvi˚O±i⁄s
, 
has_dïªˇãd
),

2694 
off£tof
(
GoogÀ__PrŸobuf__Sîvi˚O±i⁄s
, 
dïªˇãd
),

2695 
NULL
,

2696 &
googÀ__¥Ÿobuf__£rvi˚_›ti⁄s__dïªˇãd__deÁu…_vÆue
,

2698 0,
NULL
,NULL

2703 
PROTOBUF_C_LABEL_REPEATED
,

2704 
PROTOBUF_C_TYPE_MESSAGE
,

2705 
off£tof
(
GoogÀ__PrŸobuf__Sîvi˚O±i⁄s
, 
n_unöãΩªãd_›ti⁄
),

2706 
off£tof
(
GoogÀ__PrŸobuf__Sîvi˚O±i⁄s
, 
unöãΩªãd_›ti⁄
),

2707 &
googÀ__¥Ÿobuf__unöãΩªãd_›ti⁄__des¸ùt‹
,

2708 
NULL
,

2710 0,
NULL
,NULL

2713 c⁄° 
	ggoogÀ__¥Ÿobuf__£rvi˚_›ti⁄s__fõld_ödi˚s_by_«me
[] = {

2717 c⁄° 
PrŸobufCI¡R™ge
 
	ggoogÀ__¥Ÿobuf__£rvi˚_›ti⁄s__numbî_ønges
[2 + 1] =

2723 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	ggoogÀ__¥Ÿobuf__£rvi˚_›ti⁄s__des¸ùt‹
 =

2725 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

2730 (
GoogÀ__PrŸobuf__Sîvi˚O±i⁄s
),

2732 
googÀ__¥Ÿobuf__£rvi˚_›ti⁄s__fõld_des¸ùt‹s
,

2733 
googÀ__¥Ÿobuf__£rvi˚_›ti⁄s__fõld_ödi˚s_by_«me
,

2734 2, 
googÀ__¥Ÿobuf__£rvi˚_›ti⁄s__numbî_ønges
,

2735 (
PrŸobufCMesßgeInô
Ë
googÀ__¥Ÿobuf__£rvi˚_›ti⁄s__öô
,

2736 
NULL
,NULL,NULL

2738 c⁄° 
PrŸobufCEnumVÆue
 
	ggoogÀ__¥Ÿobuf__mëhod_›ti⁄s__idempŸícy_Àvñ__íum_vÆues_by_numbî
[3] =

2744 c⁄° 
PrŸobufCI¡R™ge
 
	ggoogÀ__¥Ÿobuf__mëhod_›ti⁄s__idempŸícy_Àvñ__vÆue_ønges
[] = {

2747 c⁄° 
PrŸobufCEnumVÆueIndex
 
	ggoogÀ__¥Ÿobuf__mëhod_›ti⁄s__idempŸícy_Àvñ__íum_vÆues_by_«me
[3] =

2753 c⁄° 
PrŸobufCEnumDes¸ùt‹
 
	ggoogÀ__¥Ÿobuf__mëhod_›ti⁄s__idempŸícy_Àvñ__des¸ùt‹
 =

2755 
PROTOBUF_C__ENUM_DESCRIPTOR_MAGIC
,

2761 
googÀ__¥Ÿobuf__mëhod_›ti⁄s__idempŸícy_Àvñ__íum_vÆues_by_numbî
,

2763 
googÀ__¥Ÿobuf__mëhod_›ti⁄s__idempŸícy_Àvñ__íum_vÆues_by_«me
,

2765 
googÀ__¥Ÿobuf__mëhod_›ti⁄s__idempŸícy_Àvñ__vÆue_ønges
,

2766 
NULL
,NULL,NULL,NULL

2768 c⁄° 
¥Ÿobuf_c_boﬁón
 
	ggoogÀ__¥Ÿobuf__mëhod_›ti⁄s__dïªˇãd__deÁu…_vÆue
 = 0;

2769 c⁄° 
GoogÀ__PrŸobuf__MëhodO±i⁄s__IdempŸícyLevñ
 
	ggoogÀ__¥Ÿobuf__mëhod_›ti⁄s__idempŸícy_Àvñ__deÁu…_vÆue
 = 
GOOGLE__PROTOBUF__METHOD_OPTIONS__IDEMPOTENCY_LEVEL__IDEMPOTENCY_UNKNOWN
;

2770 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	ggoogÀ__¥Ÿobuf__mëhod_›ti⁄s__fõld_des¸ùt‹s
[3] =

2775 
PROTOBUF_C_LABEL_OPTIONAL
,

2776 
PROTOBUF_C_TYPE_BOOL
,

2777 
off£tof
(
GoogÀ__PrŸobuf__MëhodO±i⁄s
, 
has_dïªˇãd
),

2778 
off£tof
(
GoogÀ__PrŸobuf__MëhodO±i⁄s
, 
dïªˇãd
),

2779 
NULL
,

2780 &
googÀ__¥Ÿobuf__mëhod_›ti⁄s__dïªˇãd__deÁu…_vÆue
,

2782 0,
NULL
,NULL

2787 
PROTOBUF_C_LABEL_OPTIONAL
,

2788 
PROTOBUF_C_TYPE_ENUM
,

2789 
off£tof
(
GoogÀ__PrŸobuf__MëhodO±i⁄s
, 
has_idempŸícy_Àvñ
),

2790 
off£tof
(
GoogÀ__PrŸobuf__MëhodO±i⁄s
, 
idempŸícy_Àvñ
),

2791 &
googÀ__¥Ÿobuf__mëhod_›ti⁄s__idempŸícy_Àvñ__des¸ùt‹
,

2792 &
googÀ__¥Ÿobuf__mëhod_›ti⁄s__idempŸícy_Àvñ__deÁu…_vÆue
,

2794 0,
NULL
,NULL

2799 
PROTOBUF_C_LABEL_REPEATED
,

2800 
PROTOBUF_C_TYPE_MESSAGE
,

2801 
off£tof
(
GoogÀ__PrŸobuf__MëhodO±i⁄s
, 
n_unöãΩªãd_›ti⁄
),

2802 
off£tof
(
GoogÀ__PrŸobuf__MëhodO±i⁄s
, 
unöãΩªãd_›ti⁄
),

2803 &
googÀ__¥Ÿobuf__unöãΩªãd_›ti⁄__des¸ùt‹
,

2804 
NULL
,

2806 0,
NULL
,NULL

2809 c⁄° 
	ggoogÀ__¥Ÿobuf__mëhod_›ti⁄s__fõld_ödi˚s_by_«me
[] = {

2814 c⁄° 
PrŸobufCI¡R™ge
 
	ggoogÀ__¥Ÿobuf__mëhod_›ti⁄s__numbî_ønges
[2 + 1] =

2820 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	ggoogÀ__¥Ÿobuf__mëhod_›ti⁄s__des¸ùt‹
 =

2822 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

2827 (
GoogÀ__PrŸobuf__MëhodO±i⁄s
),

2829 
googÀ__¥Ÿobuf__mëhod_›ti⁄s__fõld_des¸ùt‹s
,

2830 
googÀ__¥Ÿobuf__mëhod_›ti⁄s__fõld_ödi˚s_by_«me
,

2831 2, 
googÀ__¥Ÿobuf__mëhod_›ti⁄s__numbî_ønges
,

2832 (
PrŸobufCMesßgeInô
Ë
googÀ__¥Ÿobuf__mëhod_›ti⁄s__öô
,

2833 
NULL
,NULL,NULL

2835 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	ggoogÀ__¥Ÿobuf__unöãΩªãd_›ti⁄__«me_∑π__fõld_des¸ùt‹s
[2] =

2840 
PROTOBUF_C_LABEL_REQUIRED
,

2841 
PROTOBUF_C_TYPE_STRING
,

2843 
off£tof
(
GoogÀ__PrŸobuf__UnöãΩªãdO±i⁄__NameP¨t
, 
«me_∑π
),

2844 
NULL
,

2845 
NULL
,

2847 0,
NULL
,NULL

2852 
PROTOBUF_C_LABEL_REQUIRED
,

2853 
PROTOBUF_C_TYPE_BOOL
,

2855 
off£tof
(
GoogÀ__PrŸobuf__UnöãΩªãdO±i⁄__NameP¨t
, 
is_exãnsi⁄
),

2856 
NULL
,

2857 
NULL
,

2859 0,
NULL
,NULL

2862 c⁄° 
	ggoogÀ__¥Ÿobuf__unöãΩªãd_›ti⁄__«me_∑π__fõld_ödi˚s_by_«me
[] = {

2866 c⁄° 
PrŸobufCI¡R™ge
 
	ggoogÀ__¥Ÿobuf__unöãΩªãd_›ti⁄__«me_∑π__numbî_ønges
[1 + 1] =

2871 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	ggoogÀ__¥Ÿobuf__unöãΩªãd_›ti⁄__«me_∑π__des¸ùt‹
 =

2873 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

2878 (
GoogÀ__PrŸobuf__UnöãΩªãdO±i⁄__NameP¨t
),

2880 
googÀ__¥Ÿobuf__unöãΩªãd_›ti⁄__«me_∑π__fõld_des¸ùt‹s
,

2881 
googÀ__¥Ÿobuf__unöãΩªãd_›ti⁄__«me_∑π__fõld_ödi˚s_by_«me
,

2882 1, 
googÀ__¥Ÿobuf__unöãΩªãd_›ti⁄__«me_∑π__numbî_ønges
,

2883 (
PrŸobufCMesßgeInô
Ë
googÀ__¥Ÿobuf__unöãΩªãd_›ti⁄__«me_∑π__öô
,

2884 
NULL
,NULL,NULL

2886 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	ggoogÀ__¥Ÿobuf__unöãΩªãd_›ti⁄__fõld_des¸ùt‹s
[7] =

2891 
PROTOBUF_C_LABEL_REPEATED
,

2892 
PROTOBUF_C_TYPE_MESSAGE
,

2893 
off£tof
(
GoogÀ__PrŸobuf__UnöãΩªãdO±i⁄
, 
n_«me
),

2894 
off£tof
(
GoogÀ__PrŸobuf__UnöãΩªãdO±i⁄
, 
«me
),

2895 &
googÀ__¥Ÿobuf__unöãΩªãd_›ti⁄__«me_∑π__des¸ùt‹
,

2896 
NULL
,

2898 0,
NULL
,NULL

2903 
PROTOBUF_C_LABEL_OPTIONAL
,

2904 
PROTOBUF_C_TYPE_STRING
,

2906 
off£tof
(
GoogÀ__PrŸobuf__UnöãΩªãdO±i⁄
, 
idítifõr_vÆue
),

2907 
NULL
,

2908 
NULL
,

2910 0,
NULL
,NULL

2915 
PROTOBUF_C_LABEL_OPTIONAL
,

2916 
PROTOBUF_C_TYPE_UINT64
,

2917 
off£tof
(
GoogÀ__PrŸobuf__UnöãΩªãdO±i⁄
, 
has_posôive_öt_vÆue
),

2918 
off£tof
(
GoogÀ__PrŸobuf__UnöãΩªãdO±i⁄
, 
posôive_öt_vÆue
),

2919 
NULL
,

2920 
NULL
,

2922 0,
NULL
,NULL

2927 
PROTOBUF_C_LABEL_OPTIONAL
,

2928 
PROTOBUF_C_TYPE_INT64
,

2929 
off£tof
(
GoogÀ__PrŸobuf__UnöãΩªãdO±i⁄
, 
has_√g©ive_öt_vÆue
),

2930 
off£tof
(
GoogÀ__PrŸobuf__UnöãΩªãdO±i⁄
, 
√g©ive_öt_vÆue
),

2931 
NULL
,

2932 
NULL
,

2934 0,
NULL
,NULL

2939 
PROTOBUF_C_LABEL_OPTIONAL
,

2940 
PROTOBUF_C_TYPE_DOUBLE
,

2941 
off£tof
(
GoogÀ__PrŸobuf__UnöãΩªãdO±i⁄
, 
has_doubÀ_vÆue
),

2942 
off£tof
(
GoogÀ__PrŸobuf__UnöãΩªãdO±i⁄
, 
doubÀ_vÆue
),

2943 
NULL
,

2944 
NULL
,

2946 0,
NULL
,NULL

2951 
PROTOBUF_C_LABEL_OPTIONAL
,

2952 
PROTOBUF_C_TYPE_BYTES
,

2953 
off£tof
(
GoogÀ__PrŸobuf__UnöãΩªãdO±i⁄
, 
has_°rög_vÆue
),

2954 
off£tof
(
GoogÀ__PrŸobuf__UnöãΩªãdO±i⁄
, 
°rög_vÆue
),

2955 
NULL
,

2956 
NULL
,

2958 0,
NULL
,NULL

2963 
PROTOBUF_C_LABEL_OPTIONAL
,

2964 
PROTOBUF_C_TYPE_STRING
,

2966 
off£tof
(
GoogÀ__PrŸobuf__UnöãΩªãdO±i⁄
, 
aggªg©e_vÆue
),

2967 
NULL
,

2968 
NULL
,

2970 0,
NULL
,NULL

2973 c⁄° 
	ggoogÀ__¥Ÿobuf__unöãΩªãd_›ti⁄__fõld_ödi˚s_by_«me
[] = {

2982 c⁄° 
PrŸobufCI¡R™ge
 
	ggoogÀ__¥Ÿobuf__unöãΩªãd_›ti⁄__numbî_ønges
[1 + 1] =

2987 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	ggoogÀ__¥Ÿobuf__unöãΩªãd_›ti⁄__des¸ùt‹
 =

2989 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

2994 (
GoogÀ__PrŸobuf__UnöãΩªãdO±i⁄
),

2996 
googÀ__¥Ÿobuf__unöãΩªãd_›ti⁄__fõld_des¸ùt‹s
,

2997 
googÀ__¥Ÿobuf__unöãΩªãd_›ti⁄__fõld_ödi˚s_by_«me
,

2998 1, 
googÀ__¥Ÿobuf__unöãΩªãd_›ti⁄__numbî_ønges
,

2999 (
PrŸobufCMesßgeInô
Ë
googÀ__¥Ÿobuf__unöãΩªãd_›ti⁄__öô
,

3000 
NULL
,NULL,NULL

3002 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	ggoogÀ__¥Ÿobuf__sour˚_code_öfo__loˇti⁄__fõld_des¸ùt‹s
[5] =

3007 
PROTOBUF_C_LABEL_REPEATED
,

3008 
PROTOBUF_C_TYPE_INT32
,

3009 
off£tof
(
GoogÀ__PrŸobuf__Sour˚CodeInfo__Loˇti⁄
, 
n_∑th
),

3010 
off£tof
(
GoogÀ__PrŸobuf__Sour˚CodeInfo__Loˇti⁄
, 
∑th
),

3011 
NULL
,

3012 
NULL
,

3013 0 | 
PROTOBUF_C_FIELD_FLAG_PACKED
,

3014 0,
NULL
,NULL

3019 
PROTOBUF_C_LABEL_REPEATED
,

3020 
PROTOBUF_C_TYPE_INT32
,

3021 
off£tof
(
GoogÀ__PrŸobuf__Sour˚CodeInfo__Loˇti⁄
, 
n_•™
),

3022 
off£tof
(
GoogÀ__PrŸobuf__Sour˚CodeInfo__Loˇti⁄
, 
•™
),

3023 
NULL
,

3024 
NULL
,

3025 0 | 
PROTOBUF_C_FIELD_FLAG_PACKED
,

3026 0,
NULL
,NULL

3031 
PROTOBUF_C_LABEL_OPTIONAL
,

3032 
PROTOBUF_C_TYPE_STRING
,

3034 
off£tof
(
GoogÀ__PrŸobuf__Sour˚CodeInfo__Loˇti⁄
, 
Àadög_commíts
),

3035 
NULL
,

3036 
NULL
,

3038 0,
NULL
,NULL

3043 
PROTOBUF_C_LABEL_OPTIONAL
,

3044 
PROTOBUF_C_TYPE_STRING
,

3046 
off£tof
(
GoogÀ__PrŸobuf__Sour˚CodeInfo__Loˇti⁄
, 
åaûög_commíts
),

3047 
NULL
,

3048 
NULL
,

3050 0,
NULL
,NULL

3055 
PROTOBUF_C_LABEL_REPEATED
,

3056 
PROTOBUF_C_TYPE_STRING
,

3057 
off£tof
(
GoogÀ__PrŸobuf__Sour˚CodeInfo__Loˇti⁄
, 
n_Àadög_dëached_commíts
),

3058 
off£tof
(
GoogÀ__PrŸobuf__Sour˚CodeInfo__Loˇti⁄
, 
Àadög_dëached_commíts
),

3059 
NULL
,

3060 
NULL
,

3062 0,
NULL
,NULL

3065 c⁄° 
	ggoogÀ__¥Ÿobuf__sour˚_code_öfo__loˇti⁄__fõld_ödi˚s_by_«me
[] = {

3072 c⁄° 
PrŸobufCI¡R™ge
 
	ggoogÀ__¥Ÿobuf__sour˚_code_öfo__loˇti⁄__numbî_ønges
[2 + 1] =

3078 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	ggoogÀ__¥Ÿobuf__sour˚_code_öfo__loˇti⁄__des¸ùt‹
 =

3080 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

3085 (
GoogÀ__PrŸobuf__Sour˚CodeInfo__Loˇti⁄
),

3087 
googÀ__¥Ÿobuf__sour˚_code_öfo__loˇti⁄__fõld_des¸ùt‹s
,

3088 
googÀ__¥Ÿobuf__sour˚_code_öfo__loˇti⁄__fõld_ödi˚s_by_«me
,

3089 2, 
googÀ__¥Ÿobuf__sour˚_code_öfo__loˇti⁄__numbî_ønges
,

3090 (
PrŸobufCMesßgeInô
Ë
googÀ__¥Ÿobuf__sour˚_code_öfo__loˇti⁄__öô
,

3091 
NULL
,NULL,NULL

3093 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	ggoogÀ__¥Ÿobuf__sour˚_code_öfo__fõld_des¸ùt‹s
[1] =

3098 
PROTOBUF_C_LABEL_REPEATED
,

3099 
PROTOBUF_C_TYPE_MESSAGE
,

3100 
off£tof
(
GoogÀ__PrŸobuf__Sour˚CodeInfo
, 
n_loˇti⁄
),

3101 
off£tof
(
GoogÀ__PrŸobuf__Sour˚CodeInfo
, 
loˇti⁄
),

3102 &
googÀ__¥Ÿobuf__sour˚_code_öfo__loˇti⁄__des¸ùt‹
,

3103 
NULL
,

3105 0,
NULL
,NULL

3108 c⁄° 
	ggoogÀ__¥Ÿobuf__sour˚_code_öfo__fõld_ödi˚s_by_«me
[] = {

3111 c⁄° 
PrŸobufCI¡R™ge
 
	ggoogÀ__¥Ÿobuf__sour˚_code_öfo__numbî_ønges
[1 + 1] =

3116 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	ggoogÀ__¥Ÿobuf__sour˚_code_öfo__des¸ùt‹
 =

3118 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

3123 (
GoogÀ__PrŸobuf__Sour˚CodeInfo
),

3125 
googÀ__¥Ÿobuf__sour˚_code_öfo__fõld_des¸ùt‹s
,

3126 
googÀ__¥Ÿobuf__sour˚_code_öfo__fõld_ödi˚s_by_«me
,

3127 1, 
googÀ__¥Ÿobuf__sour˚_code_öfo__numbî_ønges
,

3128 (
PrŸobufCMesßgeInô
Ë
googÀ__¥Ÿobuf__sour˚_code_öfo__öô
,

3129 
NULL
,NULL,NULL

3131 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	ggoogÀ__¥Ÿobuf__gíî©ed_code_öfo__™nŸ©i⁄__fõld_des¸ùt‹s
[4] =

3136 
PROTOBUF_C_LABEL_REPEATED
,

3137 
PROTOBUF_C_TYPE_INT32
,

3138 
off£tof
(
GoogÀ__PrŸobuf__Gíî©edCodeInfo__A¬Ÿ©i⁄
, 
n_∑th
),

3139 
off£tof
(
GoogÀ__PrŸobuf__Gíî©edCodeInfo__A¬Ÿ©i⁄
, 
∑th
),

3140 
NULL
,

3141 
NULL
,

3142 0 | 
PROTOBUF_C_FIELD_FLAG_PACKED
,

3143 0,
NULL
,NULL

3148 
PROTOBUF_C_LABEL_OPTIONAL
,

3149 
PROTOBUF_C_TYPE_STRING
,

3151 
off£tof
(
GoogÀ__PrŸobuf__Gíî©edCodeInfo__A¬Ÿ©i⁄
, 
sour˚_fûe
),

3152 
NULL
,

3153 
NULL
,

3155 0,
NULL
,NULL

3160 
PROTOBUF_C_LABEL_OPTIONAL
,

3161 
PROTOBUF_C_TYPE_INT32
,

3162 
off£tof
(
GoogÀ__PrŸobuf__Gíî©edCodeInfo__A¬Ÿ©i⁄
, 
has_begö
),

3163 
off£tof
(
GoogÀ__PrŸobuf__Gíî©edCodeInfo__A¬Ÿ©i⁄
, 
begö
),

3164 
NULL
,

3165 
NULL
,

3167 0,
NULL
,NULL

3172 
PROTOBUF_C_LABEL_OPTIONAL
,

3173 
PROTOBUF_C_TYPE_INT32
,

3174 
off£tof
(
GoogÀ__PrŸobuf__Gíî©edCodeInfo__A¬Ÿ©i⁄
, 
has_íd
),

3175 
off£tof
(
GoogÀ__PrŸobuf__Gíî©edCodeInfo__A¬Ÿ©i⁄
, 
íd
),

3176 
NULL
,

3177 
NULL
,

3179 0,
NULL
,NULL

3182 c⁄° 
	ggoogÀ__¥Ÿobuf__gíî©ed_code_öfo__™nŸ©i⁄__fõld_ödi˚s_by_«me
[] = {

3188 c⁄° 
PrŸobufCI¡R™ge
 
	ggoogÀ__¥Ÿobuf__gíî©ed_code_öfo__™nŸ©i⁄__numbî_ønges
[1 + 1] =

3193 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	ggoogÀ__¥Ÿobuf__gíî©ed_code_öfo__™nŸ©i⁄__des¸ùt‹
 =

3195 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

3200 (
GoogÀ__PrŸobuf__Gíî©edCodeInfo__A¬Ÿ©i⁄
),

3202 
googÀ__¥Ÿobuf__gíî©ed_code_öfo__™nŸ©i⁄__fõld_des¸ùt‹s
,

3203 
googÀ__¥Ÿobuf__gíî©ed_code_öfo__™nŸ©i⁄__fõld_ödi˚s_by_«me
,

3204 1, 
googÀ__¥Ÿobuf__gíî©ed_code_öfo__™nŸ©i⁄__numbî_ønges
,

3205 (
PrŸobufCMesßgeInô
Ë
googÀ__¥Ÿobuf__gíî©ed_code_öfo__™nŸ©i⁄__öô
,

3206 
NULL
,NULL,NULL

3208 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	ggoogÀ__¥Ÿobuf__gíî©ed_code_öfo__fõld_des¸ùt‹s
[1] =

3213 
PROTOBUF_C_LABEL_REPEATED
,

3214 
PROTOBUF_C_TYPE_MESSAGE
,

3215 
off£tof
(
GoogÀ__PrŸobuf__Gíî©edCodeInfo
, 
n_™nŸ©i⁄
),

3216 
off£tof
(
GoogÀ__PrŸobuf__Gíî©edCodeInfo
, 
™nŸ©i⁄
),

3217 &
googÀ__¥Ÿobuf__gíî©ed_code_öfo__™nŸ©i⁄__des¸ùt‹
,

3218 
NULL
,

3220 0,
NULL
,NULL

3223 c⁄° 
	ggoogÀ__¥Ÿobuf__gíî©ed_code_öfo__fõld_ödi˚s_by_«me
[] = {

3226 c⁄° 
PrŸobufCI¡R™ge
 
	ggoogÀ__¥Ÿobuf__gíî©ed_code_öfo__numbî_ønges
[1 + 1] =

3231 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	ggoogÀ__¥Ÿobuf__gíî©ed_code_öfo__des¸ùt‹
 =

3233 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

3238 (
GoogÀ__PrŸobuf__Gíî©edCodeInfo
),

3240 
googÀ__¥Ÿobuf__gíî©ed_code_öfo__fõld_des¸ùt‹s
,

3241 
googÀ__¥Ÿobuf__gíî©ed_code_öfo__fõld_ödi˚s_by_«me
,

3242 1, 
googÀ__¥Ÿobuf__gíî©ed_code_öfo__numbî_ønges
,

3243 (
PrŸobufCMesßgeInô
Ë
googÀ__¥Ÿobuf__gíî©ed_code_öfo__öô
,

3244 
NULL
,NULL,NULL

	@libttn/descriptor.pb-c.h

4 #i‚de‡
PROTOBUF_C_gôhub_2ecom_2fgogo_2ÂrŸobuf_2ÂrŸobuf_2fgoogÀ_2ÂrŸobuf_2fdes¸ùt‹_2ïrŸo__INCLUDED


5 
	#PROTOBUF_C_gôhub_2ecom_2fgogo_2ÂrŸobuf_2ÂrŸobuf_2fgoogÀ_2ÂrŸobuf_2fdes¸ùt‹_2ïrŸo__INCLUDED


	)

7 
	~<¥Ÿobuf-c/¥Ÿobuf-c.h
>

9 
	gPROTOBUF_C__BEGIN_DECLS


11 #i‡
PROTOBUF_C_VERSION_NUMBER
 < 1000000

12 #îr‹ 
This
 
fûe
 
was
 
gíî©ed
 
by
 
a
 
√wî
 
vîsi⁄
 
of
 
¥Ÿoc
-
c
 
which
 
is
 
öcom∑tibÀ
 
wôh
 
your
 
lib¥Ÿobuf
-¯
hódîs
. 
PÀa£
 
upd©e
 your headers.

13 #ñi‡1002001 < 
PROTOBUF_C_MIN_COMPILER_VERSION


14 #îr‹ 
This
 
fûe
 
was
 
gíî©ed
 
by
 
™
 
ﬁdî
 
vîsi⁄
 
of
 
¥Ÿoc
-
c
 
which
 
is
 
öcom∑tibÀ
 
wôh
 
your
 
lib¥Ÿobuf
-¯
hódîs
. 
PÀa£
 
ªgíî©e
 
this
 fûêwôh 
a
 
√wî
 version ofÖrotoc-c.

18 
_GoogÀ__PrŸobuf__FûeDes¸ùt‹Së
 
	tGoogÀ__PrŸobuf__FûeDes¸ùt‹Së
;

19 
_GoogÀ__PrŸobuf__FûeDes¸ùt‹PrŸo
 
	tGoogÀ__PrŸobuf__FûeDes¸ùt‹PrŸo
;

20 
_GoogÀ__PrŸobuf__Des¸ùt‹PrŸo
 
	tGoogÀ__PrŸobuf__Des¸ùt‹PrŸo
;

21 
_GoogÀ__PrŸobuf__Des¸ùt‹PrŸo__Exãnsi⁄R™ge
 
	tGoogÀ__PrŸobuf__Des¸ùt‹PrŸo__Exãnsi⁄R™ge
;

22 
_GoogÀ__PrŸobuf__Des¸ùt‹PrŸo__Re£rvedR™ge
 
	tGoogÀ__PrŸobuf__Des¸ùt‹PrŸo__Re£rvedR™ge
;

23 
_GoogÀ__PrŸobuf__FõldDes¸ùt‹PrŸo
 
	tGoogÀ__PrŸobuf__FõldDes¸ùt‹PrŸo
;

24 
_GoogÀ__PrŸobuf__O√ofDes¸ùt‹PrŸo
 
	tGoogÀ__PrŸobuf__O√ofDes¸ùt‹PrŸo
;

25 
_GoogÀ__PrŸobuf__EnumDes¸ùt‹PrŸo
 
	tGoogÀ__PrŸobuf__EnumDes¸ùt‹PrŸo
;

26 
_GoogÀ__PrŸobuf__EnumVÆueDes¸ùt‹PrŸo
 
	tGoogÀ__PrŸobuf__EnumVÆueDes¸ùt‹PrŸo
;

27 
_GoogÀ__PrŸobuf__Sîvi˚Des¸ùt‹PrŸo
 
	tGoogÀ__PrŸobuf__Sîvi˚Des¸ùt‹PrŸo
;

28 
_GoogÀ__PrŸobuf__MëhodDes¸ùt‹PrŸo
 
	tGoogÀ__PrŸobuf__MëhodDes¸ùt‹PrŸo
;

29 
_GoogÀ__PrŸobuf__FûeO±i⁄s
 
	tGoogÀ__PrŸobuf__FûeO±i⁄s
;

30 
_GoogÀ__PrŸobuf__MesßgeO±i⁄s
 
	tGoogÀ__PrŸobuf__MesßgeO±i⁄s
;

31 
_GoogÀ__PrŸobuf__FõldO±i⁄s
 
	tGoogÀ__PrŸobuf__FõldO±i⁄s
;

32 
_GoogÀ__PrŸobuf__O√ofO±i⁄s
 
	tGoogÀ__PrŸobuf__O√ofO±i⁄s
;

33 
_GoogÀ__PrŸobuf__EnumO±i⁄s
 
	tGoogÀ__PrŸobuf__EnumO±i⁄s
;

34 
_GoogÀ__PrŸobuf__EnumVÆueO±i⁄s
 
	tGoogÀ__PrŸobuf__EnumVÆueO±i⁄s
;

35 
_GoogÀ__PrŸobuf__Sîvi˚O±i⁄s
 
	tGoogÀ__PrŸobuf__Sîvi˚O±i⁄s
;

36 
_GoogÀ__PrŸobuf__MëhodO±i⁄s
 
	tGoogÀ__PrŸobuf__MëhodO±i⁄s
;

37 
_GoogÀ__PrŸobuf__UnöãΩªãdO±i⁄
 
	tGoogÀ__PrŸobuf__UnöãΩªãdO±i⁄
;

38 
_GoogÀ__PrŸobuf__UnöãΩªãdO±i⁄__NameP¨t
 
	tGoogÀ__PrŸobuf__UnöãΩªãdO±i⁄__NameP¨t
;

39 
_GoogÀ__PrŸobuf__Sour˚CodeInfo
 
	tGoogÀ__PrŸobuf__Sour˚CodeInfo
;

40 
_GoogÀ__PrŸobuf__Sour˚CodeInfo__Loˇti⁄
 
	tGoogÀ__PrŸobuf__Sour˚CodeInfo__Loˇti⁄
;

41 
_GoogÀ__PrŸobuf__Gíî©edCodeInfo
 
	tGoogÀ__PrŸobuf__Gíî©edCodeInfo
;

42 
_GoogÀ__PrŸobuf__Gíî©edCodeInfo__A¬Ÿ©i⁄
 
	tGoogÀ__PrŸobuf__Gíî©edCodeInfo__A¬Ÿ©i⁄
;

47 
	e_GoogÀ__PrŸobuf__FõldDes¸ùt‹PrŸo__Ty≥
 {

52 
	mGOOGLE__PROTOBUF__FIELD_DESCRIPTOR_PROTO__TYPE__TYPE_DOUBLE
 = 1,

53 
	mGOOGLE__PROTOBUF__FIELD_DESCRIPTOR_PROTO__TYPE__TYPE_FLOAT
 = 2,

58 
	mGOOGLE__PROTOBUF__FIELD_DESCRIPTOR_PROTO__TYPE__TYPE_INT64
 = 3,

59 
	mGOOGLE__PROTOBUF__FIELD_DESCRIPTOR_PROTO__TYPE__TYPE_UINT64
 = 4,

64 
	mGOOGLE__PROTOBUF__FIELD_DESCRIPTOR_PROTO__TYPE__TYPE_INT32
 = 5,

65 
	mGOOGLE__PROTOBUF__FIELD_DESCRIPTOR_PROTO__TYPE__TYPE_FIXED64
 = 6,

66 
	mGOOGLE__PROTOBUF__FIELD_DESCRIPTOR_PROTO__TYPE__TYPE_FIXED32
 = 7,

67 
	mGOOGLE__PROTOBUF__FIELD_DESCRIPTOR_PROTO__TYPE__TYPE_BOOL
 = 8,

68 
	mGOOGLE__PROTOBUF__FIELD_DESCRIPTOR_PROTO__TYPE__TYPE_STRING
 = 9,

75 
	mGOOGLE__PROTOBUF__FIELD_DESCRIPTOR_PROTO__TYPE__TYPE_GROUP
 = 10,

79 
	mGOOGLE__PROTOBUF__FIELD_DESCRIPTOR_PROTO__TYPE__TYPE_MESSAGE
 = 11,

83 
	mGOOGLE__PROTOBUF__FIELD_DESCRIPTOR_PROTO__TYPE__TYPE_BYTES
 = 12,

84 
	mGOOGLE__PROTOBUF__FIELD_DESCRIPTOR_PROTO__TYPE__TYPE_UINT32
 = 13,

85 
	mGOOGLE__PROTOBUF__FIELD_DESCRIPTOR_PROTO__TYPE__TYPE_ENUM
 = 14,

86 
	mGOOGLE__PROTOBUF__FIELD_DESCRIPTOR_PROTO__TYPE__TYPE_SFIXED32
 = 15,

87 
	mGOOGLE__PROTOBUF__FIELD_DESCRIPTOR_PROTO__TYPE__TYPE_SFIXED64
 = 16,

91 
	mGOOGLE__PROTOBUF__FIELD_DESCRIPTOR_PROTO__TYPE__TYPE_SINT32
 = 17,

95 
	mGOOGLE__PROTOBUF__FIELD_DESCRIPTOR_PROTO__TYPE__TYPE_SINT64
 = 18

96 
PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE
(
GOOGLE__PROTOBUF__FIELD_DESCRIPTOR_PROTO__TYPE
)

97 } 
	tGoogÀ__PrŸobuf__FõldDes¸ùt‹PrŸo__Ty≥
;

98 
	e_GoogÀ__PrŸobuf__FõldDes¸ùt‹PrŸo__Labñ
 {

102 
	mGOOGLE__PROTOBUF__FIELD_DESCRIPTOR_PROTO__LABEL__LABEL_OPTIONAL
 = 1,

103 
	mGOOGLE__PROTOBUF__FIELD_DESCRIPTOR_PROTO__LABEL__LABEL_REQUIRED
 = 2,

104 
	mGOOGLE__PROTOBUF__FIELD_DESCRIPTOR_PROTO__LABEL__LABEL_REPEATED
 = 3

105 
PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE
(
GOOGLE__PROTOBUF__FIELD_DESCRIPTOR_PROTO__LABEL
)

106 } 
	tGoogÀ__PrŸobuf__FõldDes¸ùt‹PrŸo__Labñ
;

110 
	e_GoogÀ__PrŸobuf__FûeO±i⁄s__O±imizeMode
 {

114 
	mGOOGLE__PROTOBUF__FILE_OPTIONS__OPTIMIZE_MODE__SPEED
 = 1,

121 
	mGOOGLE__PROTOBUF__FILE_OPTIONS__OPTIMIZE_MODE__CODE_SIZE
 = 2,

125 
	mGOOGLE__PROTOBUF__FILE_OPTIONS__OPTIMIZE_MODE__LITE_RUNTIME
 = 3

126 
PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE
(
GOOGLE__PROTOBUF__FILE_OPTIONS__OPTIMIZE_MODE
)

127 } 
	tGoogÀ__PrŸobuf__FûeO±i⁄s__O±imizeMode
;

128 
	e_GoogÀ__PrŸobuf__FõldO±i⁄s__CTy≥
 {

132 
	mGOOGLE__PROTOBUF__FIELD_OPTIONS__CTYPE__STRING
 = 0,

133 
	mGOOGLE__PROTOBUF__FIELD_OPTIONS__CTYPE__CORD
 = 1,

134 
	mGOOGLE__PROTOBUF__FIELD_OPTIONS__CTYPE__STRING_PIECE
 = 2

135 
PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE
(
GOOGLE__PROTOBUF__FIELD_OPTIONS__CTYPE
)

136 } 
	tGoogÀ__PrŸobuf__FõldO±i⁄s__CTy≥
;

137 
	e_GoogÀ__PrŸobuf__FõldO±i⁄s__JSTy≥
 {

141 
	mGOOGLE__PROTOBUF__FIELD_OPTIONS__JSTYPE__JS_NORMAL
 = 0,

145 
	mGOOGLE__PROTOBUF__FIELD_OPTIONS__JSTYPE__JS_STRING
 = 1,

149 
	mGOOGLE__PROTOBUF__FIELD_OPTIONS__JSTYPE__JS_NUMBER
 = 2

150 
PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE
(
GOOGLE__PROTOBUF__FIELD_OPTIONS__JSTYPE
)

151 } 
	tGoogÀ__PrŸobuf__FõldO±i⁄s__JSTy≥
;

157 
	e_GoogÀ__PrŸobuf__MëhodO±i⁄s__IdempŸícyLevñ
 {

158 
	mGOOGLE__PROTOBUF__METHOD_OPTIONS__IDEMPOTENCY_LEVEL__IDEMPOTENCY_UNKNOWN
 = 0,

162 
	mGOOGLE__PROTOBUF__METHOD_OPTIONS__IDEMPOTENCY_LEVEL__NO_SIDE_EFFECTS
 = 1,

166 
	mGOOGLE__PROTOBUF__METHOD_OPTIONS__IDEMPOTENCY_LEVEL__IDEMPOTENT
 = 2

167 
PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE
(
GOOGLE__PROTOBUF__METHOD_OPTIONS__IDEMPOTENCY_LEVEL
)

168 } 
	tGoogÀ__PrŸobuf__MëhodO±i⁄s__IdempŸícyLevñ
;

176 
	s_GoogÀ__PrŸobuf__FûeDes¸ùt‹Së


178 
PrŸobufCMesßge
 
	mba£
;

179 
size_t
 
	mn_fûe
;

180 
GoogÀ__PrŸobuf__FûeDes¸ùt‹PrŸo
 **
	mfûe
;

182 
	#GOOGLE__PROTOBUF__FILE_DESCRIPTOR_SET__INIT
 \

183 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
googÀ__¥Ÿobuf__fûe_des¸ùt‹_£t__des¸ùt‹
) \

184 , 0,
NULL
 }

	)

190 
	s_GoogÀ__PrŸobuf__FûeDes¸ùt‹PrŸo


192 
PrŸobufCMesßge
 
	mba£
;

196 *
	m«me
;

200 *
	m∑ckage
;

204 
size_t
 
	mn_dïídícy
;

205 **
	mdïídícy
;

209 
size_t
 
	mn_public_dïídícy
;

210 
öt32_t
 *
	mpublic_dïídícy
;

215 
size_t
 
	mn_wók_dïídícy
;

216 
öt32_t
 *
	mwók_dïídícy
;

220 
size_t
 
	mn_mesßge_ty≥
;

221 
GoogÀ__PrŸobuf__Des¸ùt‹PrŸo
 **
	mmesßge_ty≥
;

222 
size_t
 
	mn_íum_ty≥
;

223 
GoogÀ__PrŸobuf__EnumDes¸ùt‹PrŸo
 **
	míum_ty≥
;

224 
size_t
 
	mn_£rvi˚
;

225 
GoogÀ__PrŸobuf__Sîvi˚Des¸ùt‹PrŸo
 **
	m£rvi˚
;

226 
size_t
 
	mn_exãnsi⁄
;

227 
GoogÀ__PrŸobuf__FõldDes¸ùt‹PrŸo
 **
	mexãnsi⁄
;

228 
GoogÀ__PrŸobuf__FûeO±i⁄s
 *
	m›ti⁄s
;

235 
GoogÀ__PrŸobuf__Sour˚CodeInfo
 *
	msour˚_code_öfo
;

240 *
	msy¡ax
;

242 
	#GOOGLE__PROTOBUF__FILE_DESCRIPTOR_PROTO__INIT
 \

243 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
googÀ__¥Ÿobuf__fûe_des¸ùt‹_¥Ÿo__des¸ùt‹
) \

244 , 
NULL
, NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, NULL, NULL, NULL }

	)

247 
	s_GoogÀ__PrŸobuf__Des¸ùt‹PrŸo__Exãnsi⁄R™ge


249 
PrŸobufCMesßge
 
	mba£
;

250 
¥Ÿobuf_c_boﬁón
 
	mhas_°¨t
;

251 
öt32_t
 
	m°¨t
;

252 
¥Ÿobuf_c_boﬁón
 
	mhas_íd
;

253 
öt32_t
 
	míd
;

255 
	#GOOGLE__PROTOBUF__DESCRIPTOR_PROTO__EXTENSION_RANGE__INIT
 \

256 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
googÀ__¥Ÿobuf__des¸ùt‹_¥Ÿo__exãnsi⁄_ønge__des¸ùt‹
) \

257 , 0,0, 0,0 }

	)

265 
	s_GoogÀ__PrŸobuf__Des¸ùt‹PrŸo__Re£rvedR™ge


267 
PrŸobufCMesßge
 
	mba£
;

271 
¥Ÿobuf_c_boﬁón
 
	mhas_°¨t
;

272 
öt32_t
 
	m°¨t
;

276 
¥Ÿobuf_c_boﬁón
 
	mhas_íd
;

277 
öt32_t
 
	míd
;

279 
	#GOOGLE__PROTOBUF__DESCRIPTOR_PROTO__RESERVED_RANGE__INIT
 \

280 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
googÀ__¥Ÿobuf__des¸ùt‹_¥Ÿo__ª£rved_ønge__des¸ùt‹
) \

281 , 0,0, 0,0 }

	)

287 
	s_GoogÀ__PrŸobuf__Des¸ùt‹PrŸo


289 
PrŸobufCMesßge
 
	mba£
;

290 *
	m«me
;

291 
size_t
 
	mn_fõld
;

292 
GoogÀ__PrŸobuf__FõldDes¸ùt‹PrŸo
 **
	mfõld
;

293 
size_t
 
	mn_exãnsi⁄
;

294 
GoogÀ__PrŸobuf__FõldDes¸ùt‹PrŸo
 **
	mexãnsi⁄
;

295 
size_t
 
	mn_√°ed_ty≥
;

296 
GoogÀ__PrŸobuf__Des¸ùt‹PrŸo
 **
	m√°ed_ty≥
;

297 
size_t
 
	mn_íum_ty≥
;

298 
GoogÀ__PrŸobuf__EnumDes¸ùt‹PrŸo
 **
	míum_ty≥
;

299 
size_t
 
	mn_exãnsi⁄_ønge
;

300 
GoogÀ__PrŸobuf__Des¸ùt‹PrŸo__Exãnsi⁄R™ge
 **
	mexãnsi⁄_ønge
;

301 
size_t
 
	mn_⁄eof_de˛
;

302 
GoogÀ__PrŸobuf__O√ofDes¸ùt‹PrŸo
 **
	m⁄eof_de˛
;

303 
GoogÀ__PrŸobuf__MesßgeO±i⁄s
 *
	m›ti⁄s
;

304 
size_t
 
	mn_ª£rved_ønge
;

305 
GoogÀ__PrŸobuf__Des¸ùt‹PrŸo__Re£rvedR™ge
 **
	mª£rved_ønge
;

310 
size_t
 
	mn_ª£rved_«me
;

311 **
	mª£rved_«me
;

313 
	#GOOGLE__PROTOBUF__DESCRIPTOR_PROTO__INIT
 \

314 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
googÀ__¥Ÿobuf__des¸ùt‹_¥Ÿo__des¸ùt‹
) \

315 , 
NULL
, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, NULL, 0,NULL, 0,NULL }

	)

321 
	s_GoogÀ__PrŸobuf__FõldDes¸ùt‹PrŸo


323 
PrŸobufCMesßge
 
	mba£
;

324 *
	m«me
;

325 
¥Ÿobuf_c_boﬁón
 
	mhas_numbî
;

326 
öt32_t
 
	mnumbî
;

327 
¥Ÿobuf_c_boﬁón
 
	mhas_œbñ
;

328 
GoogÀ__PrŸobuf__FõldDes¸ùt‹PrŸo__Labñ
 
	mœbñ
;

333 
¥Ÿobuf_c_boﬁón
 
	mhas_ty≥
;

334 
GoogÀ__PrŸobuf__FõldDes¸ùt‹PrŸo__Ty≥
 
	mty≥
;

342 *
	mty≥_«me
;

347 *
	mexãndì
;

355 *
	mdeÁu…_vÆue
;

360 
¥Ÿobuf_c_boﬁón
 
	mhas_⁄eof_ödex
;

361 
öt32_t
 
	m⁄eof_ödex
;

368 *
	mjs⁄_«me
;

369 
GoogÀ__PrŸobuf__FõldO±i⁄s
 *
	m›ti⁄s
;

371 
	#GOOGLE__PROTOBUF__FIELD_DESCRIPTOR_PROTO__INIT
 \

372 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
googÀ__¥Ÿobuf__fõld_des¸ùt‹_¥Ÿo__des¸ùt‹
) \

373 , 
NULL
, 0,0, 0,0, 0,0, NULL, NULL, NULL, 0,0, NULL, NULL }

	)

379 
	s_GoogÀ__PrŸobuf__O√ofDes¸ùt‹PrŸo


381 
PrŸobufCMesßge
 
	mba£
;

382 *
	m«me
;

383 
GoogÀ__PrŸobuf__O√ofO±i⁄s
 *
	m›ti⁄s
;

385 
	#GOOGLE__PROTOBUF__ONEOF_DESCRIPTOR_PROTO__INIT
 \

386 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
googÀ__¥Ÿobuf__⁄eof_des¸ùt‹_¥Ÿo__des¸ùt‹
) \

387 , 
NULL
, NULL }

	)

393 
	s_GoogÀ__PrŸobuf__EnumDes¸ùt‹PrŸo


395 
PrŸobufCMesßge
 
	mba£
;

396 *
	m«me
;

397 
size_t
 
	mn_vÆue
;

398 
GoogÀ__PrŸobuf__EnumVÆueDes¸ùt‹PrŸo
 **
	mvÆue
;

399 
GoogÀ__PrŸobuf__EnumO±i⁄s
 *
	m›ti⁄s
;

401 
	#GOOGLE__PROTOBUF__ENUM_DESCRIPTOR_PROTO__INIT
 \

402 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
googÀ__¥Ÿobuf__íum_des¸ùt‹_¥Ÿo__des¸ùt‹
) \

403 , 
NULL
, 0,NULL, NULL }

	)

409 
	s_GoogÀ__PrŸobuf__EnumVÆueDes¸ùt‹PrŸo


411 
PrŸobufCMesßge
 
	mba£
;

412 *
	m«me
;

413 
¥Ÿobuf_c_boﬁón
 
	mhas_numbî
;

414 
öt32_t
 
	mnumbî
;

415 
GoogÀ__PrŸobuf__EnumVÆueO±i⁄s
 *
	m›ti⁄s
;

417 
	#GOOGLE__PROTOBUF__ENUM_VALUE_DESCRIPTOR_PROTO__INIT
 \

418 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
googÀ__¥Ÿobuf__íum_vÆue_des¸ùt‹_¥Ÿo__des¸ùt‹
) \

419 , 
NULL
, 0,0, NULL }

	)

425 
	s_GoogÀ__PrŸobuf__Sîvi˚Des¸ùt‹PrŸo


427 
PrŸobufCMesßge
 
	mba£
;

428 *
	m«me
;

429 
size_t
 
	mn_mëhod
;

430 
GoogÀ__PrŸobuf__MëhodDes¸ùt‹PrŸo
 **
	mmëhod
;

431 
GoogÀ__PrŸobuf__Sîvi˚O±i⁄s
 *
	m›ti⁄s
;

433 
	#GOOGLE__PROTOBUF__SERVICE_DESCRIPTOR_PROTO__INIT
 \

434 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
googÀ__¥Ÿobuf__£rvi˚_des¸ùt‹_¥Ÿo__des¸ùt‹
) \

435 , 
NULL
, 0,NULL, NULL }

	)

441 
	s_GoogÀ__PrŸobuf__MëhodDes¸ùt‹PrŸo


443 
PrŸobufCMesßge
 
	mba£
;

444 *
	m«me
;

449 *
	möput_ty≥
;

450 *
	mouçut_ty≥
;

451 
GoogÀ__PrŸobuf__MëhodO±i⁄s
 *
	m›ti⁄s
;

455 
¥Ÿobuf_c_boﬁón
 
	mhas_˛õ¡_°ªamög
;

456 
¥Ÿobuf_c_boﬁón
 
	m˛õ¡_°ªamög
;

460 
¥Ÿobuf_c_boﬁón
 
	mhas_£rvî_°ªamög
;

461 
¥Ÿobuf_c_boﬁón
 
	m£rvî_°ªamög
;

463 
	#GOOGLE__PROTOBUF__METHOD_DESCRIPTOR_PROTO__INIT
 \

464 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
googÀ__¥Ÿobuf__mëhod_des¸ùt‹_¥Ÿo__des¸ùt‹
) \

465 , 
NULL
, NULL, NULL, NULL, 0,0, 0,0 }

	)

468 
	s_GoogÀ__PrŸobuf__FûeO±i⁄s


470 
PrŸobufCMesßge
 
	mba£
;

477 *
	mjava_∑ckage
;

485 *
	mjava_ouãr_˛as¢ame
;

494 
¥Ÿobuf_c_boﬁón
 
	mhas_java_mu…ùÀ_fûes
;

495 
¥Ÿobuf_c_boﬁón
 
	mjava_mu…ùÀ_fûes
;

499 
¥Ÿobuf_c_boﬁón
 
has_java_gíî©e_equÆs_™d_hash
 
	mPROTOBUF_C__DEPRECATED
;

500 
¥Ÿobuf_c_boﬁón
 
java_gíî©e_equÆs_™d_hash
 
	mPROTOBUF_C__DEPRECATED
;

509 
¥Ÿobuf_c_boﬁón
 
	mhas_java_°rög_check_utf8
;

510 
¥Ÿobuf_c_boﬁón
 
	mjava_°rög_check_utf8
;

511 
¥Ÿobuf_c_boﬁón
 
	mhas_›timize_f‹
;

512 
GoogÀ__PrŸobuf__FûeO±i⁄s__O±imizeMode
 
	m›timize_f‹
;

520 *
	mgo_∑ckage
;

532 
¥Ÿobuf_c_boﬁón
 
	mhas_cc_gíîic_£rvi˚s
;

533 
¥Ÿobuf_c_boﬁón
 
	mcc_gíîic_£rvi˚s
;

534 
¥Ÿobuf_c_boﬁón
 
	mhas_java_gíîic_£rvi˚s
;

535 
¥Ÿobuf_c_boﬁón
 
	mjava_gíîic_£rvi˚s
;

536 
¥Ÿobuf_c_boﬁón
 
	mhas_py_gíîic_£rvi˚s
;

537 
¥Ÿobuf_c_boﬁón
 
	mpy_gíîic_£rvi˚s
;

544 
¥Ÿobuf_c_boﬁón
 
	mhas_dïªˇãd
;

545 
¥Ÿobuf_c_boﬁón
 
	mdïªˇãd
;

550 
¥Ÿobuf_c_boﬁón
 
	mhas_cc_íabÀ_¨ías
;

551 
¥Ÿobuf_c_boﬁón
 
	mcc_íabÀ_¨ías
;

556 *
	mobjc_˛ass_¥efix
;

560 *
	mcsh¨p_«me•a˚
;

567 *
	mswi·_¥efix
;

571 
size_t
 
	mn_unöãΩªãd_›ti⁄
;

572 
GoogÀ__PrŸobuf__UnöãΩªãdO±i⁄
 **
	munöãΩªãd_›ti⁄
;

574 
	#GOOGLE__PROTOBUF__FILE_OPTIONS__INIT
 \

575 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
googÀ__¥Ÿobuf__fûe_›ti⁄s__des¸ùt‹
) \

576 , 
NULL
, NULL, 0,0, 0,0, 0,0, 0,
GOOGLE__PROTOBUF__FILE_OPTIONS__OPTIMIZE_MODE__SPEED
, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, NULL, NULL, 0,NULL }

	)

579 
	s_GoogÀ__PrŸobuf__MesßgeO±i⁄s


581 
PrŸobufCMesßge
 
	mba£
;

599 
¥Ÿobuf_c_boﬁón
 
	mhas_mesßge_£t_wúe_f‹m©
;

600 
¥Ÿobuf_c_boﬁón
 
	mmesßge_£t_wúe_f‹m©
;

606 
¥Ÿobuf_c_boﬁón
 
	mhas_no_°™d¨d_des¸ùt‹_ac˚ss‹
;

607 
¥Ÿobuf_c_boﬁón
 
	mno_°™d¨d_des¸ùt‹_ac˚ss‹
;

614 
¥Ÿobuf_c_boﬁón
 
	mhas_dïªˇãd
;

615 
¥Ÿobuf_c_boﬁón
 
	mdïªˇãd
;

636 
¥Ÿobuf_c_boﬁón
 
	mhas_m≠_íåy
;

637 
¥Ÿobuf_c_boﬁón
 
	mm≠_íåy
;

641 
size_t
 
	mn_unöãΩªãd_›ti⁄
;

642 
GoogÀ__PrŸobuf__UnöãΩªãdO±i⁄
 **
	munöãΩªãd_›ti⁄
;

644 
	#GOOGLE__PROTOBUF__MESSAGE_OPTIONS__INIT
 \

645 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
googÀ__¥Ÿobuf__mesßge_›ti⁄s__des¸ùt‹
) \

646 , 0,0, 0,0, 0,0, 0,0, 0,
NULL
 }

	)

649 
	s_GoogÀ__PrŸobuf__FõldO±i⁄s


651 
PrŸobufCMesßge
 
	mba£
;

658 
¥Ÿobuf_c_boﬁón
 
	mhas_˘y≥
;

659 
GoogÀ__PrŸobuf__FõldO±i⁄s__CTy≥
 
	m˘y≥
;

667 
¥Ÿobuf_c_boﬁón
 
	mhas_∑cked
;

668 
¥Ÿobuf_c_boﬁón
 
	m∑cked
;

680 
¥Ÿobuf_c_boﬁón
 
	mhas_j°y≥
;

681 
GoogÀ__PrŸobuf__FõldO±i⁄s__JSTy≥
 
	mj°y≥
;

708 
¥Ÿobuf_c_boﬁón
 
	mhas_œzy
;

709 
¥Ÿobuf_c_boﬁón
 
	mœzy
;

716 
¥Ÿobuf_c_boﬁón
 
	mhas_dïªˇãd
;

717 
¥Ÿobuf_c_boﬁón
 
	mdïªˇãd
;

721 
¥Ÿobuf_c_boﬁón
 
	mhas_wók
;

722 
¥Ÿobuf_c_boﬁón
 
	mwók
;

726 
size_t
 
	mn_unöãΩªãd_›ti⁄
;

727 
GoogÀ__PrŸobuf__UnöãΩªãdO±i⁄
 **
	munöãΩªãd_›ti⁄
;

729 
	#GOOGLE__PROTOBUF__FIELD_OPTIONS__INIT
 \

730 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
googÀ__¥Ÿobuf__fõld_›ti⁄s__des¸ùt‹
) \

731 , 0,
GOOGLE__PROTOBUF__FIELD_OPTIONS__CTYPE__STRING
, 0,0, 0,
GOOGLE__PROTOBUF__FIELD_OPTIONS__JSTYPE__JS_NORMAL
, 0,0, 0,0, 0,0, 0,
NULL
 }

	)

734 
	s_GoogÀ__PrŸobuf__O√ofO±i⁄s


736 
PrŸobufCMesßge
 
	mba£
;

740 
size_t
 
	mn_unöãΩªãd_›ti⁄
;

741 
GoogÀ__PrŸobuf__UnöãΩªãdO±i⁄
 **
	munöãΩªãd_›ti⁄
;

743 
	#GOOGLE__PROTOBUF__ONEOF_OPTIONS__INIT
 \

744 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
googÀ__¥Ÿobuf__⁄eof_›ti⁄s__des¸ùt‹
) \

745 , 0,
NULL
 }

	)

748 
	s_GoogÀ__PrŸobuf__EnumO±i⁄s


750 
PrŸobufCMesßge
 
	mba£
;

755 
¥Ÿobuf_c_boﬁón
 
	mhas_Ælow_Æüs
;

756 
¥Ÿobuf_c_boﬁón
 
	mÆlow_Æüs
;

763 
¥Ÿobuf_c_boﬁón
 
	mhas_dïªˇãd
;

764 
¥Ÿobuf_c_boﬁón
 
	mdïªˇãd
;

768 
size_t
 
	mn_unöãΩªãd_›ti⁄
;

769 
GoogÀ__PrŸobuf__UnöãΩªãdO±i⁄
 **
	munöãΩªãd_›ti⁄
;

771 
	#GOOGLE__PROTOBUF__ENUM_OPTIONS__INIT
 \

772 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
googÀ__¥Ÿobuf__íum_›ti⁄s__des¸ùt‹
) \

773 , 0,0, 0,0, 0,
NULL
 }

	)

776 
	s_GoogÀ__PrŸobuf__EnumVÆueO±i⁄s


778 
PrŸobufCMesßge
 
	mba£
;

785 
¥Ÿobuf_c_boﬁón
 
	mhas_dïªˇãd
;

786 
¥Ÿobuf_c_boﬁón
 
	mdïªˇãd
;

790 
size_t
 
	mn_unöãΩªãd_›ti⁄
;

791 
GoogÀ__PrŸobuf__UnöãΩªãdO±i⁄
 **
	munöãΩªãd_›ti⁄
;

793 
	#GOOGLE__PROTOBUF__ENUM_VALUE_OPTIONS__INIT
 \

794 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
googÀ__¥Ÿobuf__íum_vÆue_›ti⁄s__des¸ùt‹
) \

795 , 0,0, 0,
NULL
 }

	)

798 
	s_GoogÀ__PrŸobuf__Sîvi˚O±i⁄s


800 
PrŸobufCMesßge
 
	mba£
;

807 
¥Ÿobuf_c_boﬁón
 
	mhas_dïªˇãd
;

808 
¥Ÿobuf_c_boﬁón
 
	mdïªˇãd
;

812 
size_t
 
	mn_unöãΩªãd_›ti⁄
;

813 
GoogÀ__PrŸobuf__UnöãΩªãdO±i⁄
 **
	munöãΩªãd_›ti⁄
;

815 
	#GOOGLE__PROTOBUF__SERVICE_OPTIONS__INIT
 \

816 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
googÀ__¥Ÿobuf__£rvi˚_›ti⁄s__des¸ùt‹
) \

817 , 0,0, 0,
NULL
 }

	)

820 
	s_GoogÀ__PrŸobuf__MëhodO±i⁄s


822 
PrŸobufCMesßge
 
	mba£
;

829 
¥Ÿobuf_c_boﬁón
 
	mhas_dïªˇãd
;

830 
¥Ÿobuf_c_boﬁón
 
	mdïªˇãd
;

831 
¥Ÿobuf_c_boﬁón
 
	mhas_idempŸícy_Àvñ
;

832 
GoogÀ__PrŸobuf__MëhodO±i⁄s__IdempŸícyLevñ
 
	midempŸícy_Àvñ
;

836 
size_t
 
	mn_unöãΩªãd_›ti⁄
;

837 
GoogÀ__PrŸobuf__UnöãΩªãdO±i⁄
 **
	munöãΩªãd_›ti⁄
;

839 
	#GOOGLE__PROTOBUF__METHOD_OPTIONS__INIT
 \

840 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
googÀ__¥Ÿobuf__mëhod_›ti⁄s__des¸ùt‹
) \

841 , 0,0, 0,
GOOGLE__PROTOBUF__METHOD_OPTIONS__IDEMPOTENCY_LEVEL__IDEMPOTENCY_UNKNOWN
, 0,
NULL
 }

	)

851 
	s_GoogÀ__PrŸobuf__UnöãΩªãdO±i⁄__NameP¨t


853 
PrŸobufCMesßge
 
	mba£
;

854 *
	m«me_∑π
;

855 
¥Ÿobuf_c_boﬁón
 
	mis_exãnsi⁄
;

857 
	#GOOGLE__PROTOBUF__UNINTERPRETED_OPTION__NAME_PART__INIT
 \

858 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
googÀ__¥Ÿobuf__unöãΩªãd_›ti⁄__«me_∑π__des¸ùt‹
) \

859 , 
NULL
, 0 }

	)

870 
	s_GoogÀ__PrŸobuf__UnöãΩªãdO±i⁄


872 
PrŸobufCMesßge
 
	mba£
;

873 
size_t
 
	mn_«me
;

874 
GoogÀ__PrŸobuf__UnöãΩªãdO±i⁄__NameP¨t
 **
	m«me
;

879 *
	midítifõr_vÆue
;

880 
¥Ÿobuf_c_boﬁón
 
	mhas_posôive_öt_vÆue
;

881 
uöt64_t
 
	mposôive_öt_vÆue
;

882 
¥Ÿobuf_c_boﬁón
 
	mhas_√g©ive_öt_vÆue
;

883 
öt64_t
 
	m√g©ive_öt_vÆue
;

884 
¥Ÿobuf_c_boﬁón
 
	mhas_doubÀ_vÆue
;

885 
	mdoubÀ_vÆue
;

886 
¥Ÿobuf_c_boﬁón
 
	mhas_°rög_vÆue
;

887 
PrŸobufCBö¨yD©a
 
	m°rög_vÆue
;

888 *
	maggªg©e_vÆue
;

890 
	#GOOGLE__PROTOBUF__UNINTERPRETED_OPTION__INIT
 \

891 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
googÀ__¥Ÿobuf__unöãΩªãd_›ti⁄__des¸ùt‹
) \

892 , 0,
NULL
, NULL, 0,0, 0,0, 0,0, 0,{0,NULL}, NULL }

	)

895 
	s_GoogÀ__PrŸobuf__Sour˚CodeInfo__Loˇti⁄


897 
PrŸobufCMesßge
 
	mba£
;

921 
size_t
 
	mn_∑th
;

922 
öt32_t
 *
	m∑th
;

930 
size_t
 
	mn_•™
;

931 
öt32_t
 *
	m•™
;

970 *
	mÀadög_commíts
;

971 *
	måaûög_commíts
;

972 
size_t
 
	mn_Àadög_dëached_commíts
;

973 **
	mÀadög_dëached_commíts
;

975 
	#GOOGLE__PROTOBUF__SOURCE_CODE_INFO__LOCATION__INIT
 \

976 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
googÀ__¥Ÿobuf__sour˚_code_öfo__loˇti⁄__des¸ùt‹
) \

977 , 0,
NULL
, 0,NULL, NULL, NULL, 0,NULL }

	)

984 
	s_GoogÀ__PrŸobuf__Sour˚CodeInfo


986 
PrŸobufCMesßge
 
	mba£
;

1030 
size_t
 
	mn_loˇti⁄
;

1031 
GoogÀ__PrŸobuf__Sour˚CodeInfo__Loˇti⁄
 **
	mloˇti⁄
;

1033 
	#GOOGLE__PROTOBUF__SOURCE_CODE_INFO__INIT
 \

1034 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
googÀ__¥Ÿobuf__sour˚_code_öfo__des¸ùt‹
) \

1035 , 0,
NULL
 }

	)

1038 
	s_GoogÀ__PrŸobuf__Gíî©edCodeInfo__A¬Ÿ©i⁄


1040 
PrŸobufCMesßge
 
	mba£
;

1045 
size_t
 
	mn_∑th
;

1046 
öt32_t
 *
	m∑th
;

1050 *
	msour˚_fûe
;

1055 
¥Ÿobuf_c_boﬁón
 
	mhas_begö
;

1056 
öt32_t
 
	mbegö
;

1062 
¥Ÿobuf_c_boﬁón
 
	mhas_íd
;

1063 
öt32_t
 
	míd
;

1065 
	#GOOGLE__PROTOBUF__GENERATED_CODE_INFO__ANNOTATION__INIT
 \

1066 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
googÀ__¥Ÿobuf__gíî©ed_code_öfo__™nŸ©i⁄__des¸ùt‹
) \

1067 , 0,
NULL
, NULL, 0,0, 0,0 }

	)

1075 
	s_GoogÀ__PrŸobuf__Gíî©edCodeInfo


1077 
PrŸobufCMesßge
 
	mba£
;

1082 
size_t
 
	mn_™nŸ©i⁄
;

1083 
GoogÀ__PrŸobuf__Gíî©edCodeInfo__A¬Ÿ©i⁄
 **
	m™nŸ©i⁄
;

1085 
	#GOOGLE__PROTOBUF__GENERATED_CODE_INFO__INIT
 \

1086 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
googÀ__¥Ÿobuf__gíî©ed_code_öfo__des¸ùt‹
) \

1087 , 0,
NULL
 }

	)

1091 
	ggoogÀ__¥Ÿobuf__fûe_des¸ùt‹_£t__öô


1092 (
GoogÀ__PrŸobuf__FûeDes¸ùt‹Së
 *
	gmesßge
);

1093 
size_t
 
	ggoogÀ__¥Ÿobuf__fûe_des¸ùt‹_£t__gë_∑cked_size


1094 (c⁄° 
GoogÀ__PrŸobuf__FûeDes¸ùt‹Së
 *
	gmesßge
);

1095 
size_t
 
	ggoogÀ__¥Ÿobuf__fûe_des¸ùt‹_£t__∑ck


1096 (c⁄° 
GoogÀ__PrŸobuf__FûeDes¸ùt‹Së
 *
	gmesßge
,

1097 
uöt8_t
 *
	gout
);

1098 
size_t
 
	ggoogÀ__¥Ÿobuf__fûe_des¸ùt‹_£t__∑ck_to_buf„r


1099 (c⁄° 
GoogÀ__PrŸobuf__FûeDes¸ùt‹Së
 *
	gmesßge
,

1100 
PrŸobufCBuf„r
 *
	gbuf„r
);

1101 
GoogÀ__PrŸobuf__FûeDes¸ùt‹Së
 *

1102 
	ggoogÀ__¥Ÿobuf__fûe_des¸ùt‹_£t__u≈ack


1103 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

1104 
size_t
 
	gÀn
,

1105 c⁄° 
uöt8_t
 *
	gd©a
);

1106 
	ggoogÀ__¥Ÿobuf__fûe_des¸ùt‹_£t__‰ì_u≈acked


1107 (
GoogÀ__PrŸobuf__FûeDes¸ùt‹Së
 *
	gmesßge
,

1108 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
);

1110 
	ggoogÀ__¥Ÿobuf__fûe_des¸ùt‹_¥Ÿo__öô


1111 (
GoogÀ__PrŸobuf__FûeDes¸ùt‹PrŸo
 *
	gmesßge
);

1112 
size_t
 
	ggoogÀ__¥Ÿobuf__fûe_des¸ùt‹_¥Ÿo__gë_∑cked_size


1113 (c⁄° 
GoogÀ__PrŸobuf__FûeDes¸ùt‹PrŸo
 *
	gmesßge
);

1114 
size_t
 
	ggoogÀ__¥Ÿobuf__fûe_des¸ùt‹_¥Ÿo__∑ck


1115 (c⁄° 
GoogÀ__PrŸobuf__FûeDes¸ùt‹PrŸo
 *
	gmesßge
,

1116 
uöt8_t
 *
	gout
);

1117 
size_t
 
	ggoogÀ__¥Ÿobuf__fûe_des¸ùt‹_¥Ÿo__∑ck_to_buf„r


1118 (c⁄° 
GoogÀ__PrŸobuf__FûeDes¸ùt‹PrŸo
 *
	gmesßge
,

1119 
PrŸobufCBuf„r
 *
	gbuf„r
);

1120 
GoogÀ__PrŸobuf__FûeDes¸ùt‹PrŸo
 *

1121 
	ggoogÀ__¥Ÿobuf__fûe_des¸ùt‹_¥Ÿo__u≈ack


1122 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

1123 
size_t
 
	gÀn
,

1124 c⁄° 
uöt8_t
 *
	gd©a
);

1125 
	ggoogÀ__¥Ÿobuf__fûe_des¸ùt‹_¥Ÿo__‰ì_u≈acked


1126 (
GoogÀ__PrŸobuf__FûeDes¸ùt‹PrŸo
 *
	gmesßge
,

1127 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
);

1129 
	ggoogÀ__¥Ÿobuf__des¸ùt‹_¥Ÿo__exãnsi⁄_ønge__öô


1130 (
GoogÀ__PrŸobuf__Des¸ùt‹PrŸo__Exãnsi⁄R™ge
 *
	gmesßge
);

1132 
	ggoogÀ__¥Ÿobuf__des¸ùt‹_¥Ÿo__ª£rved_ønge__öô


1133 (
GoogÀ__PrŸobuf__Des¸ùt‹PrŸo__Re£rvedR™ge
 *
	gmesßge
);

1135 
	ggoogÀ__¥Ÿobuf__des¸ùt‹_¥Ÿo__öô


1136 (
GoogÀ__PrŸobuf__Des¸ùt‹PrŸo
 *
	gmesßge
);

1137 
size_t
 
	ggoogÀ__¥Ÿobuf__des¸ùt‹_¥Ÿo__gë_∑cked_size


1138 (c⁄° 
GoogÀ__PrŸobuf__Des¸ùt‹PrŸo
 *
	gmesßge
);

1139 
size_t
 
	ggoogÀ__¥Ÿobuf__des¸ùt‹_¥Ÿo__∑ck


1140 (c⁄° 
GoogÀ__PrŸobuf__Des¸ùt‹PrŸo
 *
	gmesßge
,

1141 
uöt8_t
 *
	gout
);

1142 
size_t
 
	ggoogÀ__¥Ÿobuf__des¸ùt‹_¥Ÿo__∑ck_to_buf„r


1143 (c⁄° 
GoogÀ__PrŸobuf__Des¸ùt‹PrŸo
 *
	gmesßge
,

1144 
PrŸobufCBuf„r
 *
	gbuf„r
);

1145 
GoogÀ__PrŸobuf__Des¸ùt‹PrŸo
 *

1146 
	ggoogÀ__¥Ÿobuf__des¸ùt‹_¥Ÿo__u≈ack


1147 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

1148 
size_t
 
	gÀn
,

1149 c⁄° 
uöt8_t
 *
	gd©a
);

1150 
	ggoogÀ__¥Ÿobuf__des¸ùt‹_¥Ÿo__‰ì_u≈acked


1151 (
GoogÀ__PrŸobuf__Des¸ùt‹PrŸo
 *
	gmesßge
,

1152 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
);

1154 
	ggoogÀ__¥Ÿobuf__fõld_des¸ùt‹_¥Ÿo__öô


1155 (
GoogÀ__PrŸobuf__FõldDes¸ùt‹PrŸo
 *
	gmesßge
);

1156 
size_t
 
	ggoogÀ__¥Ÿobuf__fõld_des¸ùt‹_¥Ÿo__gë_∑cked_size


1157 (c⁄° 
GoogÀ__PrŸobuf__FõldDes¸ùt‹PrŸo
 *
	gmesßge
);

1158 
size_t
 
	ggoogÀ__¥Ÿobuf__fõld_des¸ùt‹_¥Ÿo__∑ck


1159 (c⁄° 
GoogÀ__PrŸobuf__FõldDes¸ùt‹PrŸo
 *
	gmesßge
,

1160 
uöt8_t
 *
	gout
);

1161 
size_t
 
	ggoogÀ__¥Ÿobuf__fõld_des¸ùt‹_¥Ÿo__∑ck_to_buf„r


1162 (c⁄° 
GoogÀ__PrŸobuf__FõldDes¸ùt‹PrŸo
 *
	gmesßge
,

1163 
PrŸobufCBuf„r
 *
	gbuf„r
);

1164 
GoogÀ__PrŸobuf__FõldDes¸ùt‹PrŸo
 *

1165 
	ggoogÀ__¥Ÿobuf__fõld_des¸ùt‹_¥Ÿo__u≈ack


1166 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

1167 
size_t
 
	gÀn
,

1168 c⁄° 
uöt8_t
 *
	gd©a
);

1169 
	ggoogÀ__¥Ÿobuf__fõld_des¸ùt‹_¥Ÿo__‰ì_u≈acked


1170 (
GoogÀ__PrŸobuf__FõldDes¸ùt‹PrŸo
 *
	gmesßge
,

1171 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
);

1173 
	ggoogÀ__¥Ÿobuf__⁄eof_des¸ùt‹_¥Ÿo__öô


1174 (
GoogÀ__PrŸobuf__O√ofDes¸ùt‹PrŸo
 *
	gmesßge
);

1175 
size_t
 
	ggoogÀ__¥Ÿobuf__⁄eof_des¸ùt‹_¥Ÿo__gë_∑cked_size


1176 (c⁄° 
GoogÀ__PrŸobuf__O√ofDes¸ùt‹PrŸo
 *
	gmesßge
);

1177 
size_t
 
	ggoogÀ__¥Ÿobuf__⁄eof_des¸ùt‹_¥Ÿo__∑ck


1178 (c⁄° 
GoogÀ__PrŸobuf__O√ofDes¸ùt‹PrŸo
 *
	gmesßge
,

1179 
uöt8_t
 *
	gout
);

1180 
size_t
 
	ggoogÀ__¥Ÿobuf__⁄eof_des¸ùt‹_¥Ÿo__∑ck_to_buf„r


1181 (c⁄° 
GoogÀ__PrŸobuf__O√ofDes¸ùt‹PrŸo
 *
	gmesßge
,

1182 
PrŸobufCBuf„r
 *
	gbuf„r
);

1183 
GoogÀ__PrŸobuf__O√ofDes¸ùt‹PrŸo
 *

1184 
	ggoogÀ__¥Ÿobuf__⁄eof_des¸ùt‹_¥Ÿo__u≈ack


1185 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

1186 
size_t
 
	gÀn
,

1187 c⁄° 
uöt8_t
 *
	gd©a
);

1188 
	ggoogÀ__¥Ÿobuf__⁄eof_des¸ùt‹_¥Ÿo__‰ì_u≈acked


1189 (
GoogÀ__PrŸobuf__O√ofDes¸ùt‹PrŸo
 *
	gmesßge
,

1190 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
);

1192 
	ggoogÀ__¥Ÿobuf__íum_des¸ùt‹_¥Ÿo__öô


1193 (
GoogÀ__PrŸobuf__EnumDes¸ùt‹PrŸo
 *
	gmesßge
);

1194 
size_t
 
	ggoogÀ__¥Ÿobuf__íum_des¸ùt‹_¥Ÿo__gë_∑cked_size


1195 (c⁄° 
GoogÀ__PrŸobuf__EnumDes¸ùt‹PrŸo
 *
	gmesßge
);

1196 
size_t
 
	ggoogÀ__¥Ÿobuf__íum_des¸ùt‹_¥Ÿo__∑ck


1197 (c⁄° 
GoogÀ__PrŸobuf__EnumDes¸ùt‹PrŸo
 *
	gmesßge
,

1198 
uöt8_t
 *
	gout
);

1199 
size_t
 
	ggoogÀ__¥Ÿobuf__íum_des¸ùt‹_¥Ÿo__∑ck_to_buf„r


1200 (c⁄° 
GoogÀ__PrŸobuf__EnumDes¸ùt‹PrŸo
 *
	gmesßge
,

1201 
PrŸobufCBuf„r
 *
	gbuf„r
);

1202 
GoogÀ__PrŸobuf__EnumDes¸ùt‹PrŸo
 *

1203 
	ggoogÀ__¥Ÿobuf__íum_des¸ùt‹_¥Ÿo__u≈ack


1204 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

1205 
size_t
 
	gÀn
,

1206 c⁄° 
uöt8_t
 *
	gd©a
);

1207 
	ggoogÀ__¥Ÿobuf__íum_des¸ùt‹_¥Ÿo__‰ì_u≈acked


1208 (
GoogÀ__PrŸobuf__EnumDes¸ùt‹PrŸo
 *
	gmesßge
,

1209 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
);

1211 
	ggoogÀ__¥Ÿobuf__íum_vÆue_des¸ùt‹_¥Ÿo__öô


1212 (
GoogÀ__PrŸobuf__EnumVÆueDes¸ùt‹PrŸo
 *
	gmesßge
);

1213 
size_t
 
	ggoogÀ__¥Ÿobuf__íum_vÆue_des¸ùt‹_¥Ÿo__gë_∑cked_size


1214 (c⁄° 
GoogÀ__PrŸobuf__EnumVÆueDes¸ùt‹PrŸo
 *
	gmesßge
);

1215 
size_t
 
	ggoogÀ__¥Ÿobuf__íum_vÆue_des¸ùt‹_¥Ÿo__∑ck


1216 (c⁄° 
GoogÀ__PrŸobuf__EnumVÆueDes¸ùt‹PrŸo
 *
	gmesßge
,

1217 
uöt8_t
 *
	gout
);

1218 
size_t
 
	ggoogÀ__¥Ÿobuf__íum_vÆue_des¸ùt‹_¥Ÿo__∑ck_to_buf„r


1219 (c⁄° 
GoogÀ__PrŸobuf__EnumVÆueDes¸ùt‹PrŸo
 *
	gmesßge
,

1220 
PrŸobufCBuf„r
 *
	gbuf„r
);

1221 
GoogÀ__PrŸobuf__EnumVÆueDes¸ùt‹PrŸo
 *

1222 
	ggoogÀ__¥Ÿobuf__íum_vÆue_des¸ùt‹_¥Ÿo__u≈ack


1223 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

1224 
size_t
 
	gÀn
,

1225 c⁄° 
uöt8_t
 *
	gd©a
);

1226 
	ggoogÀ__¥Ÿobuf__íum_vÆue_des¸ùt‹_¥Ÿo__‰ì_u≈acked


1227 (
GoogÀ__PrŸobuf__EnumVÆueDes¸ùt‹PrŸo
 *
	gmesßge
,

1228 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
);

1230 
	ggoogÀ__¥Ÿobuf__£rvi˚_des¸ùt‹_¥Ÿo__öô


1231 (
GoogÀ__PrŸobuf__Sîvi˚Des¸ùt‹PrŸo
 *
	gmesßge
);

1232 
size_t
 
	ggoogÀ__¥Ÿobuf__£rvi˚_des¸ùt‹_¥Ÿo__gë_∑cked_size


1233 (c⁄° 
GoogÀ__PrŸobuf__Sîvi˚Des¸ùt‹PrŸo
 *
	gmesßge
);

1234 
size_t
 
	ggoogÀ__¥Ÿobuf__£rvi˚_des¸ùt‹_¥Ÿo__∑ck


1235 (c⁄° 
GoogÀ__PrŸobuf__Sîvi˚Des¸ùt‹PrŸo
 *
	gmesßge
,

1236 
uöt8_t
 *
	gout
);

1237 
size_t
 
	ggoogÀ__¥Ÿobuf__£rvi˚_des¸ùt‹_¥Ÿo__∑ck_to_buf„r


1238 (c⁄° 
GoogÀ__PrŸobuf__Sîvi˚Des¸ùt‹PrŸo
 *
	gmesßge
,

1239 
PrŸobufCBuf„r
 *
	gbuf„r
);

1240 
GoogÀ__PrŸobuf__Sîvi˚Des¸ùt‹PrŸo
 *

1241 
	ggoogÀ__¥Ÿobuf__£rvi˚_des¸ùt‹_¥Ÿo__u≈ack


1242 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

1243 
size_t
 
	gÀn
,

1244 c⁄° 
uöt8_t
 *
	gd©a
);

1245 
	ggoogÀ__¥Ÿobuf__£rvi˚_des¸ùt‹_¥Ÿo__‰ì_u≈acked


1246 (
GoogÀ__PrŸobuf__Sîvi˚Des¸ùt‹PrŸo
 *
	gmesßge
,

1247 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
);

1249 
	ggoogÀ__¥Ÿobuf__mëhod_des¸ùt‹_¥Ÿo__öô


1250 (
GoogÀ__PrŸobuf__MëhodDes¸ùt‹PrŸo
 *
	gmesßge
);

1251 
size_t
 
	ggoogÀ__¥Ÿobuf__mëhod_des¸ùt‹_¥Ÿo__gë_∑cked_size


1252 (c⁄° 
GoogÀ__PrŸobuf__MëhodDes¸ùt‹PrŸo
 *
	gmesßge
);

1253 
size_t
 
	ggoogÀ__¥Ÿobuf__mëhod_des¸ùt‹_¥Ÿo__∑ck


1254 (c⁄° 
GoogÀ__PrŸobuf__MëhodDes¸ùt‹PrŸo
 *
	gmesßge
,

1255 
uöt8_t
 *
	gout
);

1256 
size_t
 
	ggoogÀ__¥Ÿobuf__mëhod_des¸ùt‹_¥Ÿo__∑ck_to_buf„r


1257 (c⁄° 
GoogÀ__PrŸobuf__MëhodDes¸ùt‹PrŸo
 *
	gmesßge
,

1258 
PrŸobufCBuf„r
 *
	gbuf„r
);

1259 
GoogÀ__PrŸobuf__MëhodDes¸ùt‹PrŸo
 *

1260 
	ggoogÀ__¥Ÿobuf__mëhod_des¸ùt‹_¥Ÿo__u≈ack


1261 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

1262 
size_t
 
	gÀn
,

1263 c⁄° 
uöt8_t
 *
	gd©a
);

1264 
	ggoogÀ__¥Ÿobuf__mëhod_des¸ùt‹_¥Ÿo__‰ì_u≈acked


1265 (
GoogÀ__PrŸobuf__MëhodDes¸ùt‹PrŸo
 *
	gmesßge
,

1266 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
);

1268 
	ggoogÀ__¥Ÿobuf__fûe_›ti⁄s__öô


1269 (
GoogÀ__PrŸobuf__FûeO±i⁄s
 *
	gmesßge
);

1270 
size_t
 
	ggoogÀ__¥Ÿobuf__fûe_›ti⁄s__gë_∑cked_size


1271 (c⁄° 
GoogÀ__PrŸobuf__FûeO±i⁄s
 *
	gmesßge
);

1272 
size_t
 
	ggoogÀ__¥Ÿobuf__fûe_›ti⁄s__∑ck


1273 (c⁄° 
GoogÀ__PrŸobuf__FûeO±i⁄s
 *
	gmesßge
,

1274 
uöt8_t
 *
	gout
);

1275 
size_t
 
	ggoogÀ__¥Ÿobuf__fûe_›ti⁄s__∑ck_to_buf„r


1276 (c⁄° 
GoogÀ__PrŸobuf__FûeO±i⁄s
 *
	gmesßge
,

1277 
PrŸobufCBuf„r
 *
	gbuf„r
);

1278 
GoogÀ__PrŸobuf__FûeO±i⁄s
 *

1279 
	ggoogÀ__¥Ÿobuf__fûe_›ti⁄s__u≈ack


1280 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

1281 
size_t
 
	gÀn
,

1282 c⁄° 
uöt8_t
 *
	gd©a
);

1283 
	ggoogÀ__¥Ÿobuf__fûe_›ti⁄s__‰ì_u≈acked


1284 (
GoogÀ__PrŸobuf__FûeO±i⁄s
 *
	gmesßge
,

1285 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
);

1287 
	ggoogÀ__¥Ÿobuf__mesßge_›ti⁄s__öô


1288 (
GoogÀ__PrŸobuf__MesßgeO±i⁄s
 *
	gmesßge
);

1289 
size_t
 
	ggoogÀ__¥Ÿobuf__mesßge_›ti⁄s__gë_∑cked_size


1290 (c⁄° 
GoogÀ__PrŸobuf__MesßgeO±i⁄s
 *
	gmesßge
);

1291 
size_t
 
	ggoogÀ__¥Ÿobuf__mesßge_›ti⁄s__∑ck


1292 (c⁄° 
GoogÀ__PrŸobuf__MesßgeO±i⁄s
 *
	gmesßge
,

1293 
uöt8_t
 *
	gout
);

1294 
size_t
 
	ggoogÀ__¥Ÿobuf__mesßge_›ti⁄s__∑ck_to_buf„r


1295 (c⁄° 
GoogÀ__PrŸobuf__MesßgeO±i⁄s
 *
	gmesßge
,

1296 
PrŸobufCBuf„r
 *
	gbuf„r
);

1297 
GoogÀ__PrŸobuf__MesßgeO±i⁄s
 *

1298 
	ggoogÀ__¥Ÿobuf__mesßge_›ti⁄s__u≈ack


1299 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

1300 
size_t
 
	gÀn
,

1301 c⁄° 
uöt8_t
 *
	gd©a
);

1302 
	ggoogÀ__¥Ÿobuf__mesßge_›ti⁄s__‰ì_u≈acked


1303 (
GoogÀ__PrŸobuf__MesßgeO±i⁄s
 *
	gmesßge
,

1304 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
);

1306 
	ggoogÀ__¥Ÿobuf__fõld_›ti⁄s__öô


1307 (
GoogÀ__PrŸobuf__FõldO±i⁄s
 *
	gmesßge
);

1308 
size_t
 
	ggoogÀ__¥Ÿobuf__fõld_›ti⁄s__gë_∑cked_size


1309 (c⁄° 
GoogÀ__PrŸobuf__FõldO±i⁄s
 *
	gmesßge
);

1310 
size_t
 
	ggoogÀ__¥Ÿobuf__fõld_›ti⁄s__∑ck


1311 (c⁄° 
GoogÀ__PrŸobuf__FõldO±i⁄s
 *
	gmesßge
,

1312 
uöt8_t
 *
	gout
);

1313 
size_t
 
	ggoogÀ__¥Ÿobuf__fõld_›ti⁄s__∑ck_to_buf„r


1314 (c⁄° 
GoogÀ__PrŸobuf__FõldO±i⁄s
 *
	gmesßge
,

1315 
PrŸobufCBuf„r
 *
	gbuf„r
);

1316 
GoogÀ__PrŸobuf__FõldO±i⁄s
 *

1317 
	ggoogÀ__¥Ÿobuf__fõld_›ti⁄s__u≈ack


1318 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

1319 
size_t
 
	gÀn
,

1320 c⁄° 
uöt8_t
 *
	gd©a
);

1321 
	ggoogÀ__¥Ÿobuf__fõld_›ti⁄s__‰ì_u≈acked


1322 (
GoogÀ__PrŸobuf__FõldO±i⁄s
 *
	gmesßge
,

1323 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
);

1325 
	ggoogÀ__¥Ÿobuf__⁄eof_›ti⁄s__öô


1326 (
GoogÀ__PrŸobuf__O√ofO±i⁄s
 *
	gmesßge
);

1327 
size_t
 
	ggoogÀ__¥Ÿobuf__⁄eof_›ti⁄s__gë_∑cked_size


1328 (c⁄° 
GoogÀ__PrŸobuf__O√ofO±i⁄s
 *
	gmesßge
);

1329 
size_t
 
	ggoogÀ__¥Ÿobuf__⁄eof_›ti⁄s__∑ck


1330 (c⁄° 
GoogÀ__PrŸobuf__O√ofO±i⁄s
 *
	gmesßge
,

1331 
uöt8_t
 *
	gout
);

1332 
size_t
 
	ggoogÀ__¥Ÿobuf__⁄eof_›ti⁄s__∑ck_to_buf„r


1333 (c⁄° 
GoogÀ__PrŸobuf__O√ofO±i⁄s
 *
	gmesßge
,

1334 
PrŸobufCBuf„r
 *
	gbuf„r
);

1335 
GoogÀ__PrŸobuf__O√ofO±i⁄s
 *

1336 
	ggoogÀ__¥Ÿobuf__⁄eof_›ti⁄s__u≈ack


1337 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

1338 
size_t
 
	gÀn
,

1339 c⁄° 
uöt8_t
 *
	gd©a
);

1340 
	ggoogÀ__¥Ÿobuf__⁄eof_›ti⁄s__‰ì_u≈acked


1341 (
GoogÀ__PrŸobuf__O√ofO±i⁄s
 *
	gmesßge
,

1342 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
);

1344 
	ggoogÀ__¥Ÿobuf__íum_›ti⁄s__öô


1345 (
GoogÀ__PrŸobuf__EnumO±i⁄s
 *
	gmesßge
);

1346 
size_t
 
	ggoogÀ__¥Ÿobuf__íum_›ti⁄s__gë_∑cked_size


1347 (c⁄° 
GoogÀ__PrŸobuf__EnumO±i⁄s
 *
	gmesßge
);

1348 
size_t
 
	ggoogÀ__¥Ÿobuf__íum_›ti⁄s__∑ck


1349 (c⁄° 
GoogÀ__PrŸobuf__EnumO±i⁄s
 *
	gmesßge
,

1350 
uöt8_t
 *
	gout
);

1351 
size_t
 
	ggoogÀ__¥Ÿobuf__íum_›ti⁄s__∑ck_to_buf„r


1352 (c⁄° 
GoogÀ__PrŸobuf__EnumO±i⁄s
 *
	gmesßge
,

1353 
PrŸobufCBuf„r
 *
	gbuf„r
);

1354 
GoogÀ__PrŸobuf__EnumO±i⁄s
 *

1355 
	ggoogÀ__¥Ÿobuf__íum_›ti⁄s__u≈ack


1356 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

1357 
size_t
 
	gÀn
,

1358 c⁄° 
uöt8_t
 *
	gd©a
);

1359 
	ggoogÀ__¥Ÿobuf__íum_›ti⁄s__‰ì_u≈acked


1360 (
GoogÀ__PrŸobuf__EnumO±i⁄s
 *
	gmesßge
,

1361 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
);

1363 
	ggoogÀ__¥Ÿobuf__íum_vÆue_›ti⁄s__öô


1364 (
GoogÀ__PrŸobuf__EnumVÆueO±i⁄s
 *
	gmesßge
);

1365 
size_t
 
	ggoogÀ__¥Ÿobuf__íum_vÆue_›ti⁄s__gë_∑cked_size


1366 (c⁄° 
GoogÀ__PrŸobuf__EnumVÆueO±i⁄s
 *
	gmesßge
);

1367 
size_t
 
	ggoogÀ__¥Ÿobuf__íum_vÆue_›ti⁄s__∑ck


1368 (c⁄° 
GoogÀ__PrŸobuf__EnumVÆueO±i⁄s
 *
	gmesßge
,

1369 
uöt8_t
 *
	gout
);

1370 
size_t
 
	ggoogÀ__¥Ÿobuf__íum_vÆue_›ti⁄s__∑ck_to_buf„r


1371 (c⁄° 
GoogÀ__PrŸobuf__EnumVÆueO±i⁄s
 *
	gmesßge
,

1372 
PrŸobufCBuf„r
 *
	gbuf„r
);

1373 
GoogÀ__PrŸobuf__EnumVÆueO±i⁄s
 *

1374 
	ggoogÀ__¥Ÿobuf__íum_vÆue_›ti⁄s__u≈ack


1375 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

1376 
size_t
 
	gÀn
,

1377 c⁄° 
uöt8_t
 *
	gd©a
);

1378 
	ggoogÀ__¥Ÿobuf__íum_vÆue_›ti⁄s__‰ì_u≈acked


1379 (
GoogÀ__PrŸobuf__EnumVÆueO±i⁄s
 *
	gmesßge
,

1380 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
);

1382 
	ggoogÀ__¥Ÿobuf__£rvi˚_›ti⁄s__öô


1383 (
GoogÀ__PrŸobuf__Sîvi˚O±i⁄s
 *
	gmesßge
);

1384 
size_t
 
	ggoogÀ__¥Ÿobuf__£rvi˚_›ti⁄s__gë_∑cked_size


1385 (c⁄° 
GoogÀ__PrŸobuf__Sîvi˚O±i⁄s
 *
	gmesßge
);

1386 
size_t
 
	ggoogÀ__¥Ÿobuf__£rvi˚_›ti⁄s__∑ck


1387 (c⁄° 
GoogÀ__PrŸobuf__Sîvi˚O±i⁄s
 *
	gmesßge
,

1388 
uöt8_t
 *
	gout
);

1389 
size_t
 
	ggoogÀ__¥Ÿobuf__£rvi˚_›ti⁄s__∑ck_to_buf„r


1390 (c⁄° 
GoogÀ__PrŸobuf__Sîvi˚O±i⁄s
 *
	gmesßge
,

1391 
PrŸobufCBuf„r
 *
	gbuf„r
);

1392 
GoogÀ__PrŸobuf__Sîvi˚O±i⁄s
 *

1393 
	ggoogÀ__¥Ÿobuf__£rvi˚_›ti⁄s__u≈ack


1394 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

1395 
size_t
 
	gÀn
,

1396 c⁄° 
uöt8_t
 *
	gd©a
);

1397 
	ggoogÀ__¥Ÿobuf__£rvi˚_›ti⁄s__‰ì_u≈acked


1398 (
GoogÀ__PrŸobuf__Sîvi˚O±i⁄s
 *
	gmesßge
,

1399 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
);

1401 
	ggoogÀ__¥Ÿobuf__mëhod_›ti⁄s__öô


1402 (
GoogÀ__PrŸobuf__MëhodO±i⁄s
 *
	gmesßge
);

1403 
size_t
 
	ggoogÀ__¥Ÿobuf__mëhod_›ti⁄s__gë_∑cked_size


1404 (c⁄° 
GoogÀ__PrŸobuf__MëhodO±i⁄s
 *
	gmesßge
);

1405 
size_t
 
	ggoogÀ__¥Ÿobuf__mëhod_›ti⁄s__∑ck


1406 (c⁄° 
GoogÀ__PrŸobuf__MëhodO±i⁄s
 *
	gmesßge
,

1407 
uöt8_t
 *
	gout
);

1408 
size_t
 
	ggoogÀ__¥Ÿobuf__mëhod_›ti⁄s__∑ck_to_buf„r


1409 (c⁄° 
GoogÀ__PrŸobuf__MëhodO±i⁄s
 *
	gmesßge
,

1410 
PrŸobufCBuf„r
 *
	gbuf„r
);

1411 
GoogÀ__PrŸobuf__MëhodO±i⁄s
 *

1412 
	ggoogÀ__¥Ÿobuf__mëhod_›ti⁄s__u≈ack


1413 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

1414 
size_t
 
	gÀn
,

1415 c⁄° 
uöt8_t
 *
	gd©a
);

1416 
	ggoogÀ__¥Ÿobuf__mëhod_›ti⁄s__‰ì_u≈acked


1417 (
GoogÀ__PrŸobuf__MëhodO±i⁄s
 *
	gmesßge
,

1418 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
);

1420 
	ggoogÀ__¥Ÿobuf__unöãΩªãd_›ti⁄__«me_∑π__öô


1421 (
GoogÀ__PrŸobuf__UnöãΩªãdO±i⁄__NameP¨t
 *
	gmesßge
);

1423 
	ggoogÀ__¥Ÿobuf__unöãΩªãd_›ti⁄__öô


1424 (
GoogÀ__PrŸobuf__UnöãΩªãdO±i⁄
 *
	gmesßge
);

1425 
size_t
 
	ggoogÀ__¥Ÿobuf__unöãΩªãd_›ti⁄__gë_∑cked_size


1426 (c⁄° 
GoogÀ__PrŸobuf__UnöãΩªãdO±i⁄
 *
	gmesßge
);

1427 
size_t
 
	ggoogÀ__¥Ÿobuf__unöãΩªãd_›ti⁄__∑ck


1428 (c⁄° 
GoogÀ__PrŸobuf__UnöãΩªãdO±i⁄
 *
	gmesßge
,

1429 
uöt8_t
 *
	gout
);

1430 
size_t
 
	ggoogÀ__¥Ÿobuf__unöãΩªãd_›ti⁄__∑ck_to_buf„r


1431 (c⁄° 
GoogÀ__PrŸobuf__UnöãΩªãdO±i⁄
 *
	gmesßge
,

1432 
PrŸobufCBuf„r
 *
	gbuf„r
);

1433 
GoogÀ__PrŸobuf__UnöãΩªãdO±i⁄
 *

1434 
	ggoogÀ__¥Ÿobuf__unöãΩªãd_›ti⁄__u≈ack


1435 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

1436 
size_t
 
	gÀn
,

1437 c⁄° 
uöt8_t
 *
	gd©a
);

1438 
	ggoogÀ__¥Ÿobuf__unöãΩªãd_›ti⁄__‰ì_u≈acked


1439 (
GoogÀ__PrŸobuf__UnöãΩªãdO±i⁄
 *
	gmesßge
,

1440 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
);

1442 
	ggoogÀ__¥Ÿobuf__sour˚_code_öfo__loˇti⁄__öô


1443 (
GoogÀ__PrŸobuf__Sour˚CodeInfo__Loˇti⁄
 *
	gmesßge
);

1445 
	ggoogÀ__¥Ÿobuf__sour˚_code_öfo__öô


1446 (
GoogÀ__PrŸobuf__Sour˚CodeInfo
 *
	gmesßge
);

1447 
size_t
 
	ggoogÀ__¥Ÿobuf__sour˚_code_öfo__gë_∑cked_size


1448 (c⁄° 
GoogÀ__PrŸobuf__Sour˚CodeInfo
 *
	gmesßge
);

1449 
size_t
 
	ggoogÀ__¥Ÿobuf__sour˚_code_öfo__∑ck


1450 (c⁄° 
GoogÀ__PrŸobuf__Sour˚CodeInfo
 *
	gmesßge
,

1451 
uöt8_t
 *
	gout
);

1452 
size_t
 
	ggoogÀ__¥Ÿobuf__sour˚_code_öfo__∑ck_to_buf„r


1453 (c⁄° 
GoogÀ__PrŸobuf__Sour˚CodeInfo
 *
	gmesßge
,

1454 
PrŸobufCBuf„r
 *
	gbuf„r
);

1455 
GoogÀ__PrŸobuf__Sour˚CodeInfo
 *

1456 
	ggoogÀ__¥Ÿobuf__sour˚_code_öfo__u≈ack


1457 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

1458 
size_t
 
	gÀn
,

1459 c⁄° 
uöt8_t
 *
	gd©a
);

1460 
	ggoogÀ__¥Ÿobuf__sour˚_code_öfo__‰ì_u≈acked


1461 (
GoogÀ__PrŸobuf__Sour˚CodeInfo
 *
	gmesßge
,

1462 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
);

1464 
	ggoogÀ__¥Ÿobuf__gíî©ed_code_öfo__™nŸ©i⁄__öô


1465 (
GoogÀ__PrŸobuf__Gíî©edCodeInfo__A¬Ÿ©i⁄
 *
	gmesßge
);

1467 
	ggoogÀ__¥Ÿobuf__gíî©ed_code_öfo__öô


1468 (
GoogÀ__PrŸobuf__Gíî©edCodeInfo
 *
	gmesßge
);

1469 
size_t
 
	ggoogÀ__¥Ÿobuf__gíî©ed_code_öfo__gë_∑cked_size


1470 (c⁄° 
GoogÀ__PrŸobuf__Gíî©edCodeInfo
 *
	gmesßge
);

1471 
size_t
 
	ggoogÀ__¥Ÿobuf__gíî©ed_code_öfo__∑ck


1472 (c⁄° 
GoogÀ__PrŸobuf__Gíî©edCodeInfo
 *
	gmesßge
,

1473 
uöt8_t
 *
	gout
);

1474 
size_t
 
	ggoogÀ__¥Ÿobuf__gíî©ed_code_öfo__∑ck_to_buf„r


1475 (c⁄° 
GoogÀ__PrŸobuf__Gíî©edCodeInfo
 *
	gmesßge
,

1476 
PrŸobufCBuf„r
 *
	gbuf„r
);

1477 
GoogÀ__PrŸobuf__Gíî©edCodeInfo
 *

1478 
	ggoogÀ__¥Ÿobuf__gíî©ed_code_öfo__u≈ack


1479 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

1480 
size_t
 
	gÀn
,

1481 c⁄° 
uöt8_t
 *
	gd©a
);

1482 
	ggoogÀ__¥Ÿobuf__gíî©ed_code_öfo__‰ì_u≈acked


1483 (
GoogÀ__PrŸobuf__Gíî©edCodeInfo
 *
	gmesßge
,

1484 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
);

1487 (*
	tGoogÀ__PrŸobuf__FûeDes¸ùt‹Së_Closuª
)

1488 (c⁄° 
	tGoogÀ__PrŸobuf__FûeDes¸ùt‹Së
 *
	tmesßge
,

1489 *
	t˛osuª_d©a
);

1490 (*
	tGoogÀ__PrŸobuf__FûeDes¸ùt‹PrŸo_Closuª
)

1491 (c⁄° 
	tGoogÀ__PrŸobuf__FûeDes¸ùt‹PrŸo
 *
	tmesßge
,

1492 *
	t˛osuª_d©a
);

1493 (*
	tGoogÀ__PrŸobuf__Des¸ùt‹PrŸo__Exãnsi⁄R™ge_Closuª
)

1494 (c⁄° 
	tGoogÀ__PrŸobuf__Des¸ùt‹PrŸo__Exãnsi⁄R™ge
 *
	tmesßge
,

1495 *
	t˛osuª_d©a
);

1496 (*
	tGoogÀ__PrŸobuf__Des¸ùt‹PrŸo__Re£rvedR™ge_Closuª
)

1497 (c⁄° 
	tGoogÀ__PrŸobuf__Des¸ùt‹PrŸo__Re£rvedR™ge
 *
	tmesßge
,

1498 *
	t˛osuª_d©a
);

1499 (*
	tGoogÀ__PrŸobuf__Des¸ùt‹PrŸo_Closuª
)

1500 (c⁄° 
	tGoogÀ__PrŸobuf__Des¸ùt‹PrŸo
 *
	tmesßge
,

1501 *
	t˛osuª_d©a
);

1502 (*
	tGoogÀ__PrŸobuf__FõldDes¸ùt‹PrŸo_Closuª
)

1503 (c⁄° 
	tGoogÀ__PrŸobuf__FõldDes¸ùt‹PrŸo
 *
	tmesßge
,

1504 *
	t˛osuª_d©a
);

1505 (*
	tGoogÀ__PrŸobuf__O√ofDes¸ùt‹PrŸo_Closuª
)

1506 (c⁄° 
	tGoogÀ__PrŸobuf__O√ofDes¸ùt‹PrŸo
 *
	tmesßge
,

1507 *
	t˛osuª_d©a
);

1508 (*
	tGoogÀ__PrŸobuf__EnumDes¸ùt‹PrŸo_Closuª
)

1509 (c⁄° 
	tGoogÀ__PrŸobuf__EnumDes¸ùt‹PrŸo
 *
	tmesßge
,

1510 *
	t˛osuª_d©a
);

1511 (*
	tGoogÀ__PrŸobuf__EnumVÆueDes¸ùt‹PrŸo_Closuª
)

1512 (c⁄° 
	tGoogÀ__PrŸobuf__EnumVÆueDes¸ùt‹PrŸo
 *
	tmesßge
,

1513 *
	t˛osuª_d©a
);

1514 (*
	tGoogÀ__PrŸobuf__Sîvi˚Des¸ùt‹PrŸo_Closuª
)

1515 (c⁄° 
	tGoogÀ__PrŸobuf__Sîvi˚Des¸ùt‹PrŸo
 *
	tmesßge
,

1516 *
	t˛osuª_d©a
);

1517 (*
	tGoogÀ__PrŸobuf__MëhodDes¸ùt‹PrŸo_Closuª
)

1518 (c⁄° 
	tGoogÀ__PrŸobuf__MëhodDes¸ùt‹PrŸo
 *
	tmesßge
,

1519 *
	t˛osuª_d©a
);

1520 (*
	tGoogÀ__PrŸobuf__FûeO±i⁄s_Closuª
)

1521 (c⁄° 
	tGoogÀ__PrŸobuf__FûeO±i⁄s
 *
	tmesßge
,

1522 *
	t˛osuª_d©a
);

1523 (*
	tGoogÀ__PrŸobuf__MesßgeO±i⁄s_Closuª
)

1524 (c⁄° 
	tGoogÀ__PrŸobuf__MesßgeO±i⁄s
 *
	tmesßge
,

1525 *
	t˛osuª_d©a
);

1526 (*
	tGoogÀ__PrŸobuf__FõldO±i⁄s_Closuª
)

1527 (c⁄° 
	tGoogÀ__PrŸobuf__FõldO±i⁄s
 *
	tmesßge
,

1528 *
	t˛osuª_d©a
);

1529 (*
	tGoogÀ__PrŸobuf__O√ofO±i⁄s_Closuª
)

1530 (c⁄° 
	tGoogÀ__PrŸobuf__O√ofO±i⁄s
 *
	tmesßge
,

1531 *
	t˛osuª_d©a
);

1532 (*
	tGoogÀ__PrŸobuf__EnumO±i⁄s_Closuª
)

1533 (c⁄° 
	tGoogÀ__PrŸobuf__EnumO±i⁄s
 *
	tmesßge
,

1534 *
	t˛osuª_d©a
);

1535 (*
	tGoogÀ__PrŸobuf__EnumVÆueO±i⁄s_Closuª
)

1536 (c⁄° 
	tGoogÀ__PrŸobuf__EnumVÆueO±i⁄s
 *
	tmesßge
,

1537 *
	t˛osuª_d©a
);

1538 (*
	tGoogÀ__PrŸobuf__Sîvi˚O±i⁄s_Closuª
)

1539 (c⁄° 
	tGoogÀ__PrŸobuf__Sîvi˚O±i⁄s
 *
	tmesßge
,

1540 *
	t˛osuª_d©a
);

1541 (*
	tGoogÀ__PrŸobuf__MëhodO±i⁄s_Closuª
)

1542 (c⁄° 
	tGoogÀ__PrŸobuf__MëhodO±i⁄s
 *
	tmesßge
,

1543 *
	t˛osuª_d©a
);

1544 (*
	tGoogÀ__PrŸobuf__UnöãΩªãdO±i⁄__NameP¨t_Closuª
)

1545 (c⁄° 
	tGoogÀ__PrŸobuf__UnöãΩªãdO±i⁄__NameP¨t
 *
	tmesßge
,

1546 *
	t˛osuª_d©a
);

1547 (*
	tGoogÀ__PrŸobuf__UnöãΩªãdO±i⁄_Closuª
)

1548 (c⁄° 
	tGoogÀ__PrŸobuf__UnöãΩªãdO±i⁄
 *
	tmesßge
,

1549 *
	t˛osuª_d©a
);

1550 (*
	tGoogÀ__PrŸobuf__Sour˚CodeInfo__Loˇti⁄_Closuª
)

1551 (c⁄° 
	tGoogÀ__PrŸobuf__Sour˚CodeInfo__Loˇti⁄
 *
	tmesßge
,

1552 *
	t˛osuª_d©a
);

1553 (*
	tGoogÀ__PrŸobuf__Sour˚CodeInfo_Closuª
)

1554 (c⁄° 
	tGoogÀ__PrŸobuf__Sour˚CodeInfo
 *
	tmesßge
,

1555 *
	t˛osuª_d©a
);

1556 (*
	tGoogÀ__PrŸobuf__Gíî©edCodeInfo__A¬Ÿ©i⁄_Closuª
)

1557 (c⁄° 
	tGoogÀ__PrŸobuf__Gíî©edCodeInfo__A¬Ÿ©i⁄
 *
	tmesßge
,

1558 *
	t˛osuª_d©a
);

1559 (*
	tGoogÀ__PrŸobuf__Gíî©edCodeInfo_Closuª
)

1560 (c⁄° 
	tGoogÀ__PrŸobuf__Gíî©edCodeInfo
 *
	tmesßge
,

1561 *
	t˛osuª_d©a
);

1568 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
googÀ__¥Ÿobuf__fûe_des¸ùt‹_£t__des¸ùt‹
;

1569 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
googÀ__¥Ÿobuf__fûe_des¸ùt‹_¥Ÿo__des¸ùt‹
;

1570 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
googÀ__¥Ÿobuf__des¸ùt‹_¥Ÿo__des¸ùt‹
;

1571 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
googÀ__¥Ÿobuf__des¸ùt‹_¥Ÿo__exãnsi⁄_ønge__des¸ùt‹
;

1572 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
googÀ__¥Ÿobuf__des¸ùt‹_¥Ÿo__ª£rved_ønge__des¸ùt‹
;

1573 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
googÀ__¥Ÿobuf__fõld_des¸ùt‹_¥Ÿo__des¸ùt‹
;

1574 c⁄° 
PrŸobufCEnumDes¸ùt‹
 
googÀ__¥Ÿobuf__fõld_des¸ùt‹_¥Ÿo__ty≥__des¸ùt‹
;

1575 c⁄° 
PrŸobufCEnumDes¸ùt‹
 
googÀ__¥Ÿobuf__fõld_des¸ùt‹_¥Ÿo__œbñ__des¸ùt‹
;

1576 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
googÀ__¥Ÿobuf__⁄eof_des¸ùt‹_¥Ÿo__des¸ùt‹
;

1577 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
googÀ__¥Ÿobuf__íum_des¸ùt‹_¥Ÿo__des¸ùt‹
;

1578 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
googÀ__¥Ÿobuf__íum_vÆue_des¸ùt‹_¥Ÿo__des¸ùt‹
;

1579 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
googÀ__¥Ÿobuf__£rvi˚_des¸ùt‹_¥Ÿo__des¸ùt‹
;

1580 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
googÀ__¥Ÿobuf__mëhod_des¸ùt‹_¥Ÿo__des¸ùt‹
;

1581 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
googÀ__¥Ÿobuf__fûe_›ti⁄s__des¸ùt‹
;

1582 c⁄° 
PrŸobufCEnumDes¸ùt‹
 
googÀ__¥Ÿobuf__fûe_›ti⁄s__›timize_mode__des¸ùt‹
;

1583 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
googÀ__¥Ÿobuf__mesßge_›ti⁄s__des¸ùt‹
;

1584 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
googÀ__¥Ÿobuf__fõld_›ti⁄s__des¸ùt‹
;

1585 c⁄° 
PrŸobufCEnumDes¸ùt‹
 
googÀ__¥Ÿobuf__fõld_›ti⁄s__˘y≥__des¸ùt‹
;

1586 c⁄° 
PrŸobufCEnumDes¸ùt‹
 
googÀ__¥Ÿobuf__fõld_›ti⁄s__j°y≥__des¸ùt‹
;

1587 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
googÀ__¥Ÿobuf__⁄eof_›ti⁄s__des¸ùt‹
;

1588 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
googÀ__¥Ÿobuf__íum_›ti⁄s__des¸ùt‹
;

1589 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
googÀ__¥Ÿobuf__íum_vÆue_›ti⁄s__des¸ùt‹
;

1590 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
googÀ__¥Ÿobuf__£rvi˚_›ti⁄s__des¸ùt‹
;

1591 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
googÀ__¥Ÿobuf__mëhod_›ti⁄s__des¸ùt‹
;

1592 c⁄° 
PrŸobufCEnumDes¸ùt‹
 
googÀ__¥Ÿobuf__mëhod_›ti⁄s__idempŸícy_Àvñ__des¸ùt‹
;

1593 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
googÀ__¥Ÿobuf__unöãΩªãd_›ti⁄__des¸ùt‹
;

1594 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
googÀ__¥Ÿobuf__unöãΩªãd_›ti⁄__«me_∑π__des¸ùt‹
;

1595 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
googÀ__¥Ÿobuf__sour˚_code_öfo__des¸ùt‹
;

1596 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
googÀ__¥Ÿobuf__sour˚_code_öfo__loˇti⁄__des¸ùt‹
;

1597 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
googÀ__¥Ÿobuf__gíî©ed_code_öfo__des¸ùt‹
;

1598 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
googÀ__¥Ÿobuf__gíî©ed_code_öfo__™nŸ©i⁄__des¸ùt‹
;

1600 
PROTOBUF_C__END_DECLS


	@libttn/empty.pb-c.c

5 #i‚de‡
PROTOBUF_C__NO_DEPRECATED


6 
	#PROTOBUF_C__NO_DEPRECATED


	)

9 
	~"em±y.pb-c.h
"

10 
	ggoogÀ__¥Ÿobuf__em±y__öô


11 (
GoogÀ__PrŸobuf__Em±y
 *
	gmesßge
)

13 
GoogÀ__PrŸobuf__Em±y
 
	göô_vÆue
 = 
GOOGLE__PROTOBUF__EMPTY__INIT
;

14 *
	gmesßge
 = 
öô_vÆue
;

16 
size_t
 
	ggoogÀ__¥Ÿobuf__em±y__gë_∑cked_size


17 (c⁄° 
GoogÀ__PrŸobuf__Em±y
 *
	gmesßge
)

19 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__em±y__des¸ùt‹
);

20  
¥Ÿobuf_c_mesßge_gë_∑cked_size
 ((c⁄° 
PrŸobufCMesßge
*)(
mesßge
));

22 
size_t
 
	ggoogÀ__¥Ÿobuf__em±y__∑ck


23 (c⁄° 
GoogÀ__PrŸobuf__Em±y
 *
	gmesßge
,

24 
uöt8_t
 *
	gout
)

26 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__em±y__des¸ùt‹
);

27  
¥Ÿobuf_c_mesßge_∑ck
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
out
);

29 
size_t
 
	ggoogÀ__¥Ÿobuf__em±y__∑ck_to_buf„r


30 (c⁄° 
GoogÀ__PrŸobuf__Em±y
 *
	gmesßge
,

31 
PrŸobufCBuf„r
 *
	gbuf„r
)

33 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__em±y__des¸ùt‹
);

34  
¥Ÿobuf_c_mesßge_∑ck_to_buf„r
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
buf„r
);

36 
GoogÀ__PrŸobuf__Em±y
 *

37 
	ggoogÀ__¥Ÿobuf__em±y__u≈ack


38 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

39 
size_t
 
	gÀn
,

40 c⁄° 
uöt8_t
 *
	gd©a
)

42  (
	gGoogÀ__PrŸobuf__Em±y
 *)

43 
¥Ÿobuf_c_mesßge_u≈ack
 (&
googÀ__¥Ÿobuf__em±y__des¸ùt‹
,

44 
Æloˇt‹
, 
Àn
, 
d©a
);

46 
	ggoogÀ__¥Ÿobuf__em±y__‰ì_u≈acked


47 (
GoogÀ__PrŸobuf__Em±y
 *
	gmesßge
,

48 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
)

50 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
googÀ__¥Ÿobuf__em±y__des¸ùt‹
);

51 
¥Ÿobuf_c_mesßge_‰ì_u≈acked
 ((
PrŸobufCMesßge
*)
mesßge
, 
Æloˇt‹
);

53 
	#googÀ__¥Ÿobuf__em±y__fõld_des¸ùt‹s
 
NULL


	)

54 
	#googÀ__¥Ÿobuf__em±y__fõld_ödi˚s_by_«me
 
NULL


	)

55 
	#googÀ__¥Ÿobuf__em±y__numbî_ønges
 
NULL


	)

56 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	ggoogÀ__¥Ÿobuf__em±y__des¸ùt‹
 =

58 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

63 (
GoogÀ__PrŸobuf__Em±y
),

65 
googÀ__¥Ÿobuf__em±y__fõld_des¸ùt‹s
,

66 
googÀ__¥Ÿobuf__em±y__fõld_ödi˚s_by_«me
,

67 0, 
googÀ__¥Ÿobuf__em±y__numbî_ønges
,

68 (
PrŸobufCMesßgeInô
Ë
googÀ__¥Ÿobuf__em±y__öô
,

69 
NULL
,NULL,NULL

	@libttn/empty.pb-c.h

4 #i‚de‡
PROTOBUF_C_gôhub_2ecom_2fgogo_2ÂrŸobuf_2ÂrŸobuf_2fgoogÀ_2ÂrŸobuf_2„m±y_2ïrŸo__INCLUDED


5 
	#PROTOBUF_C_gôhub_2ecom_2fgogo_2ÂrŸobuf_2ÂrŸobuf_2fgoogÀ_2ÂrŸobuf_2„m±y_2ïrŸo__INCLUDED


	)

7 
	~<¥Ÿobuf-c/¥Ÿobuf-c.h
>

9 
	gPROTOBUF_C__BEGIN_DECLS


11 #i‡
PROTOBUF_C_VERSION_NUMBER
 < 1000000

12 #îr‹ 
This
 
fûe
 
was
 
gíî©ed
 
by
 
a
 
√wî
 
vîsi⁄
 
of
 
¥Ÿoc
-
c
 
which
 
is
 
öcom∑tibÀ
 
wôh
 
your
 
lib¥Ÿobuf
-¯
hódîs
. 
PÀa£
 
upd©e
 your headers.

13 #ñi‡1002001 < 
PROTOBUF_C_MIN_COMPILER_VERSION


14 #îr‹ 
This
 
fûe
 
was
 
gíî©ed
 
by
 
™
 
ﬁdî
 
vîsi⁄
 
of
 
¥Ÿoc
-
c
 
which
 
is
 
öcom∑tibÀ
 
wôh
 
your
 
lib¥Ÿobuf
-¯
hódîs
. 
PÀa£
 
ªgíî©e
 
this
 fûêwôh 
a
 
√wî
 version ofÖrotoc-c.

18 
_GoogÀ__PrŸobuf__Em±y
 
	tGoogÀ__PrŸobuf__Em±y
;

35 
	s_GoogÀ__PrŸobuf__Em±y


37 
PrŸobufCMesßge
 
	mba£
;

39 
	#GOOGLE__PROTOBUF__EMPTY__INIT
 \

40 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
googÀ__¥Ÿobuf__em±y__des¸ùt‹
) \

41 }

	)

45 
	ggoogÀ__¥Ÿobuf__em±y__öô


46 (
GoogÀ__PrŸobuf__Em±y
 *
	gmesßge
);

47 
size_t
 
	ggoogÀ__¥Ÿobuf__em±y__gë_∑cked_size


48 (c⁄° 
GoogÀ__PrŸobuf__Em±y
 *
	gmesßge
);

49 
size_t
 
	ggoogÀ__¥Ÿobuf__em±y__∑ck


50 (c⁄° 
GoogÀ__PrŸobuf__Em±y
 *
	gmesßge
,

51 
uöt8_t
 *
	gout
);

52 
size_t
 
	ggoogÀ__¥Ÿobuf__em±y__∑ck_to_buf„r


53 (c⁄° 
GoogÀ__PrŸobuf__Em±y
 *
	gmesßge
,

54 
PrŸobufCBuf„r
 *
	gbuf„r
);

55 
GoogÀ__PrŸobuf__Em±y
 *

56 
	ggoogÀ__¥Ÿobuf__em±y__u≈ack


57 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

58 
size_t
 
	gÀn
,

59 c⁄° 
uöt8_t
 *
	gd©a
);

60 
	ggoogÀ__¥Ÿobuf__em±y__‰ì_u≈acked


61 (
GoogÀ__PrŸobuf__Em±y
 *
	gmesßge
,

62 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
);

65 (*
	tGoogÀ__PrŸobuf__Em±y_Closuª
)

66 (c⁄° 
	tGoogÀ__PrŸobuf__Em±y
 *
	tmesßge
,

67 *
	t˛osuª_d©a
);

74 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
googÀ__¥Ÿobuf__em±y__des¸ùt‹
;

76 
PROTOBUF_C__END_DECLS


	@libttn/gateway.pb-c.c

5 #i‚de‡
PROTOBUF_C__NO_DEPRECATED


6 
	#PROTOBUF_C__NO_DEPRECATED


	)

9 
	~"g©eway.pb-c.h
"

10 
	gg©eway__gpsmëad©a__öô


11 (
G©eway__GPSMëad©a
 *
	gmesßge
)

13 
G©eway__GPSMëad©a
 
	göô_vÆue
 = 
GATEWAY__GPSMETADATA__INIT
;

14 *
	gmesßge
 = 
öô_vÆue
;

16 
size_t
 
	gg©eway__gpsmëad©a__gë_∑cked_size


17 (c⁄° 
G©eway__GPSMëad©a
 *
	gmesßge
)

19 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
g©eway__gpsmëad©a__des¸ùt‹
);

20  
¥Ÿobuf_c_mesßge_gë_∑cked_size
 ((c⁄° 
PrŸobufCMesßge
*)(
mesßge
));

22 
size_t
 
	gg©eway__gpsmëad©a__∑ck


23 (c⁄° 
G©eway__GPSMëad©a
 *
	gmesßge
,

24 
uöt8_t
 *
	gout
)

26 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
g©eway__gpsmëad©a__des¸ùt‹
);

27  
¥Ÿobuf_c_mesßge_∑ck
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
out
);

29 
size_t
 
	gg©eway__gpsmëad©a__∑ck_to_buf„r


30 (c⁄° 
G©eway__GPSMëad©a
 *
	gmesßge
,

31 
PrŸobufCBuf„r
 *
	gbuf„r
)

33 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
g©eway__gpsmëad©a__des¸ùt‹
);

34  
¥Ÿobuf_c_mesßge_∑ck_to_buf„r
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
buf„r
);

36 
G©eway__GPSMëad©a
 *

37 
	gg©eway__gpsmëad©a__u≈ack


38 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

39 
size_t
 
	gÀn
,

40 c⁄° 
uöt8_t
 *
	gd©a
)

42  (
	gG©eway__GPSMëad©a
 *)

43 
¥Ÿobuf_c_mesßge_u≈ack
 (&
g©eway__gpsmëad©a__des¸ùt‹
,

44 
Æloˇt‹
, 
Àn
, 
d©a
);

46 
	gg©eway__gpsmëad©a__‰ì_u≈acked


47 (
G©eway__GPSMëad©a
 *
	gmesßge
,

48 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
)

50 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
g©eway__gpsmëad©a__des¸ùt‹
);

51 
¥Ÿobuf_c_mesßge_‰ì_u≈acked
 ((
PrŸobufCMesßge
*)
mesßge
, 
Æloˇt‹
);

53 
	gg©eway__rx_mëad©a__™ã¬a__öô


54 (
G©eway__RxMëad©a__A¡í«
 *
	gmesßge
)

56 
G©eway__RxMëad©a__A¡í«
 
	göô_vÆue
 = 
GATEWAY__RX_METADATA__ANTENNA__INIT
;

57 *
	gmesßge
 = 
öô_vÆue
;

59 
	gg©eway__rx_mëad©a__öô


60 (
G©eway__RxMëad©a
 *
	gmesßge
)

62 
G©eway__RxMëad©a
 
	göô_vÆue
 = 
GATEWAY__RX_METADATA__INIT
;

63 *
	gmesßge
 = 
öô_vÆue
;

65 
size_t
 
	gg©eway__rx_mëad©a__gë_∑cked_size


66 (c⁄° 
G©eway__RxMëad©a
 *
	gmesßge
)

68 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
g©eway__rx_mëad©a__des¸ùt‹
);

69  
¥Ÿobuf_c_mesßge_gë_∑cked_size
 ((c⁄° 
PrŸobufCMesßge
*)(
mesßge
));

71 
size_t
 
	gg©eway__rx_mëad©a__∑ck


72 (c⁄° 
G©eway__RxMëad©a
 *
	gmesßge
,

73 
uöt8_t
 *
	gout
)

75 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
g©eway__rx_mëad©a__des¸ùt‹
);

76  
¥Ÿobuf_c_mesßge_∑ck
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
out
);

78 
size_t
 
	gg©eway__rx_mëad©a__∑ck_to_buf„r


79 (c⁄° 
G©eway__RxMëad©a
 *
	gmesßge
,

80 
PrŸobufCBuf„r
 *
	gbuf„r
)

82 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
g©eway__rx_mëad©a__des¸ùt‹
);

83  
¥Ÿobuf_c_mesßge_∑ck_to_buf„r
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
buf„r
);

85 
G©eway__RxMëad©a
 *

86 
	gg©eway__rx_mëad©a__u≈ack


87 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

88 
size_t
 
	gÀn
,

89 c⁄° 
uöt8_t
 *
	gd©a
)

91  (
	gG©eway__RxMëad©a
 *)

92 
¥Ÿobuf_c_mesßge_u≈ack
 (&
g©eway__rx_mëad©a__des¸ùt‹
,

93 
Æloˇt‹
, 
Àn
, 
d©a
);

95 
	gg©eway__rx_mëad©a__‰ì_u≈acked


96 (
G©eway__RxMëad©a
 *
	gmesßge
,

97 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
)

99 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
g©eway__rx_mëad©a__des¸ùt‹
);

100 
¥Ÿobuf_c_mesßge_‰ì_u≈acked
 ((
PrŸobufCMesßge
*)
mesßge
, 
Æloˇt‹
);

102 
	gg©eway__tx_c⁄figuøti⁄__öô


103 (
G©eway__TxC⁄figuøti⁄
 *
	gmesßge
)

105 
G©eway__TxC⁄figuøti⁄
 
	göô_vÆue
 = 
GATEWAY__TX_CONFIGURATION__INIT
;

106 *
	gmesßge
 = 
öô_vÆue
;

108 
size_t
 
	gg©eway__tx_c⁄figuøti⁄__gë_∑cked_size


109 (c⁄° 
G©eway__TxC⁄figuøti⁄
 *
	gmesßge
)

111 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
g©eway__tx_c⁄figuøti⁄__des¸ùt‹
);

112  
¥Ÿobuf_c_mesßge_gë_∑cked_size
 ((c⁄° 
PrŸobufCMesßge
*)(
mesßge
));

114 
size_t
 
	gg©eway__tx_c⁄figuøti⁄__∑ck


115 (c⁄° 
G©eway__TxC⁄figuøti⁄
 *
	gmesßge
,

116 
uöt8_t
 *
	gout
)

118 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
g©eway__tx_c⁄figuøti⁄__des¸ùt‹
);

119  
¥Ÿobuf_c_mesßge_∑ck
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
out
);

121 
size_t
 
	gg©eway__tx_c⁄figuøti⁄__∑ck_to_buf„r


122 (c⁄° 
G©eway__TxC⁄figuøti⁄
 *
	gmesßge
,

123 
PrŸobufCBuf„r
 *
	gbuf„r
)

125 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
g©eway__tx_c⁄figuøti⁄__des¸ùt‹
);

126  
¥Ÿobuf_c_mesßge_∑ck_to_buf„r
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
buf„r
);

128 
G©eway__TxC⁄figuøti⁄
 *

129 
	gg©eway__tx_c⁄figuøti⁄__u≈ack


130 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

131 
size_t
 
	gÀn
,

132 c⁄° 
uöt8_t
 *
	gd©a
)

134  (
	gG©eway__TxC⁄figuøti⁄
 *)

135 
¥Ÿobuf_c_mesßge_u≈ack
 (&
g©eway__tx_c⁄figuøti⁄__des¸ùt‹
,

136 
Æloˇt‹
, 
Àn
, 
d©a
);

138 
	gg©eway__tx_c⁄figuøti⁄__‰ì_u≈acked


139 (
G©eway__TxC⁄figuøti⁄
 *
	gmesßge
,

140 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
)

142 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
g©eway__tx_c⁄figuøti⁄__des¸ùt‹
);

143 
¥Ÿobuf_c_mesßge_‰ì_u≈acked
 ((
PrŸobufCMesßge
*)
mesßge
, 
Æloˇt‹
);

145 
	gg©eway__°©us__osmërics__öô


146 (
G©eway__Sètus__OSMërics
 *
	gmesßge
)

148 
G©eway__Sètus__OSMërics
 
	göô_vÆue
 = 
GATEWAY__STATUS__OSMETRICS__INIT
;

149 *
	gmesßge
 = 
öô_vÆue
;

151 
	gg©eway__°©us__öô


152 (
G©eway__Sètus
 *
	gmesßge
)

154 
G©eway__Sètus
 
	göô_vÆue
 = 
GATEWAY__STATUS__INIT
;

155 *
	gmesßge
 = 
öô_vÆue
;

157 
size_t
 
	gg©eway__°©us__gë_∑cked_size


158 (c⁄° 
G©eway__Sètus
 *
	gmesßge
)

160 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
g©eway__°©us__des¸ùt‹
);

161  
¥Ÿobuf_c_mesßge_gë_∑cked_size
 ((c⁄° 
PrŸobufCMesßge
*)(
mesßge
));

163 
size_t
 
	gg©eway__°©us__∑ck


164 (c⁄° 
G©eway__Sètus
 *
	gmesßge
,

165 
uöt8_t
 *
	gout
)

167 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
g©eway__°©us__des¸ùt‹
);

168  
¥Ÿobuf_c_mesßge_∑ck
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
out
);

170 
size_t
 
	gg©eway__°©us__∑ck_to_buf„r


171 (c⁄° 
G©eway__Sètus
 *
	gmesßge
,

172 
PrŸobufCBuf„r
 *
	gbuf„r
)

174 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
g©eway__°©us__des¸ùt‹
);

175  
¥Ÿobuf_c_mesßge_∑ck_to_buf„r
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
buf„r
);

177 
G©eway__Sètus
 *

178 
	gg©eway__°©us__u≈ack


179 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

180 
size_t
 
	gÀn
,

181 c⁄° 
uöt8_t
 *
	gd©a
)

183  (
	gG©eway__Sètus
 *)

184 
¥Ÿobuf_c_mesßge_u≈ack
 (&
g©eway__°©us__des¸ùt‹
,

185 
Æloˇt‹
, 
Àn
, 
d©a
);

187 
	gg©eway__°©us__‰ì_u≈acked


188 (
G©eway__Sètus
 *
	gmesßge
,

189 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
)

191 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
g©eway__°©us__des¸ùt‹
);

192 
¥Ÿobuf_c_mesßge_‰ì_u≈acked
 ((
PrŸobufCMesßge
*)
mesßge
, 
Æloˇt‹
);

194 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	gg©eway__gpsmëad©a__fõld_des¸ùt‹s
[4] =

199 
PROTOBUF_C_LABEL_OPTIONAL
,

200 
PROTOBUF_C_TYPE_INT64
,

201 
off£tof
(
G©eway__GPSMëad©a
, 
has_time
),

202 
off£tof
(
G©eway__GPSMëad©a
, 
time
),

203 
NULL
,

204 
NULL
,

206 0,
NULL
,NULL

211 
PROTOBUF_C_LABEL_OPTIONAL
,

212 
PROTOBUF_C_TYPE_FLOAT
,

213 
off£tof
(
G©eway__GPSMëad©a
, 
has_œtôude
),

214 
off£tof
(
G©eway__GPSMëad©a
, 
œtôude
),

215 
NULL
,

216 
NULL
,

218 0,
NULL
,NULL

223 
PROTOBUF_C_LABEL_OPTIONAL
,

224 
PROTOBUF_C_TYPE_FLOAT
,

225 
off£tof
(
G©eway__GPSMëad©a
, 
has_l⁄gôude
),

226 
off£tof
(
G©eway__GPSMëad©a
, 
l⁄gôude
),

227 
NULL
,

228 
NULL
,

230 0,
NULL
,NULL

235 
PROTOBUF_C_LABEL_OPTIONAL
,

236 
PROTOBUF_C_TYPE_INT32
,

237 
off£tof
(
G©eway__GPSMëad©a
, 
has_Ætôude
),

238 
off£tof
(
G©eway__GPSMëad©a
, 
Ætôude
),

239 
NULL
,

240 
NULL
,

242 0,
NULL
,NULL

245 c⁄° 
	gg©eway__gpsmëad©a__fõld_ödi˚s_by_«me
[] = {

251 c⁄° 
PrŸobufCI¡R™ge
 
	gg©eway__gpsmëad©a__numbî_ønges
[1 + 1] =

256 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	gg©eway__gpsmëad©a__des¸ùt‹
 =

258 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

263 (
G©eway__GPSMëad©a
),

265 
g©eway__gpsmëad©a__fõld_des¸ùt‹s
,

266 
g©eway__gpsmëad©a__fõld_ödi˚s_by_«me
,

267 1, 
g©eway__gpsmëad©a__numbî_ønges
,

268 (
PrŸobufCMesßgeInô
Ë
g©eway__gpsmëad©a__öô
,

269 
NULL
,NULL,NULL

271 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	gg©eway__rx_mëad©a__™ã¬a__fõld_des¸ùt‹s
[5] =

276 
PROTOBUF_C_LABEL_OPTIONAL
,

277 
PROTOBUF_C_TYPE_UINT32
,

278 
off£tof
(
G©eway__RxMëad©a__A¡í«
, 
has_™ã¬a
),

279 
off£tof
(
G©eway__RxMëad©a__A¡í«
, 
™ã¬a
),

280 
NULL
,

281 
NULL
,

283 0,
NULL
,NULL

288 
PROTOBUF_C_LABEL_OPTIONAL
,

289 
PROTOBUF_C_TYPE_UINT32
,

290 
off£tof
(
G©eway__RxMëad©a__A¡í«
, 
has_ch™√l
),

291 
off£tof
(
G©eway__RxMëad©a__A¡í«
, 
ch™√l
),

292 
NULL
,

293 
NULL
,

295 0,
NULL
,NULL

300 
PROTOBUF_C_LABEL_OPTIONAL
,

301 
PROTOBUF_C_TYPE_FLOAT
,

302 
off£tof
(
G©eway__RxMëad©a__A¡í«
, 
has_rssi
),

303 
off£tof
(
G©eway__RxMëad©a__A¡í«
, 
rssi
),

304 
NULL
,

305 
NULL
,

307 0,
NULL
,NULL

312 
PROTOBUF_C_LABEL_OPTIONAL
,

313 
PROTOBUF_C_TYPE_FLOAT
,

314 
off£tof
(
G©eway__RxMëad©a__A¡í«
, 
has_¢r
),

315 
off£tof
(
G©eway__RxMëad©a__A¡í«
, 
¢r
),

316 
NULL
,

317 
NULL
,

319 0,
NULL
,NULL

324 
PROTOBUF_C_LABEL_OPTIONAL
,

325 
PROTOBUF_C_TYPE_BYTES
,

326 
off£tof
(
G©eway__RxMëad©a__A¡í«
, 
has_í¸y±ed_time
),

327 
off£tof
(
G©eway__RxMëad©a__A¡í«
, 
í¸y±ed_time
),

328 
NULL
,

329 
NULL
,

331 0,
NULL
,NULL

334 c⁄° 
	gg©eway__rx_mëad©a__™ã¬a__fõld_ödi˚s_by_«me
[] = {

341 c⁄° 
PrŸobufCI¡R™ge
 
	gg©eway__rx_mëad©a__™ã¬a__numbî_ønges
[2 + 1] =

347 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	gg©eway__rx_mëad©a__™ã¬a__des¸ùt‹
 =

349 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

354 (
G©eway__RxMëad©a__A¡í«
),

356 
g©eway__rx_mëad©a__™ã¬a__fõld_des¸ùt‹s
,

357 
g©eway__rx_mëad©a__™ã¬a__fõld_ödi˚s_by_«me
,

358 2, 
g©eway__rx_mëad©a__™ã¬a__numbî_ønges
,

359 (
PrŸobufCMesßgeInô
Ë
g©eway__rx_mëad©a__™ã¬a__öô
,

360 
NULL
,NULL,NULL

362 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	gg©eway__rx_mëad©a__fõld_des¸ùt‹s
[12] =

367 
PROTOBUF_C_LABEL_OPTIONAL
,

368 
PROTOBUF_C_TYPE_STRING
,

370 
off£tof
(
G©eway__RxMëad©a
, 
g©eway_id
),

371 
NULL
,

372 
NULL
,

374 0,
NULL
,NULL

379 
PROTOBUF_C_LABEL_OPTIONAL
,

380 
PROTOBUF_C_TYPE_BOOL
,

381 
off£tof
(
G©eway__RxMëad©a
, 
has_g©eway_åu°ed
),

382 
off£tof
(
G©eway__RxMëad©a
, 
g©eway_åu°ed
),

383 
NULL
,

384 
NULL
,

386 0,
NULL
,NULL

391 
PROTOBUF_C_LABEL_OPTIONAL
,

392 
PROTOBUF_C_TYPE_UINT32
,

393 
off£tof
(
G©eway__RxMëad©a
, 
has_time°amp
),

394 
off£tof
(
G©eway__RxMëad©a
, 
time°amp
),

395 
NULL
,

396 
NULL
,

398 0,
NULL
,NULL

403 
PROTOBUF_C_LABEL_OPTIONAL
,

404 
PROTOBUF_C_TYPE_INT64
,

405 
off£tof
(
G©eway__RxMëad©a
, 
has_time
),

406 
off£tof
(
G©eway__RxMëad©a
, 
time
),

407 
NULL
,

408 
NULL
,

410 0,
NULL
,NULL

415 
PROTOBUF_C_LABEL_OPTIONAL
,

416 
PROTOBUF_C_TYPE_BYTES
,

417 
off£tof
(
G©eway__RxMëad©a
, 
has_í¸y±ed_time
),

418 
off£tof
(
G©eway__RxMëad©a
, 
í¸y±ed_time
),

419 
NULL
,

420 
NULL
,

422 0,
NULL
,NULL

427 
PROTOBUF_C_LABEL_OPTIONAL
,

428 
PROTOBUF_C_TYPE_UINT32
,

429 
off£tof
(
G©eway__RxMëad©a
, 
has_rf_chaö
),

430 
off£tof
(
G©eway__RxMëad©a
, 
rf_chaö
),

431 
NULL
,

432 
NULL
,

434 0,
NULL
,NULL

439 
PROTOBUF_C_LABEL_OPTIONAL
,

440 
PROTOBUF_C_TYPE_UINT32
,

441 
off£tof
(
G©eway__RxMëad©a
, 
has_ch™√l
),

442 
off£tof
(
G©eway__RxMëad©a
, 
ch™√l
),

443 
NULL
,

444 
NULL
,

446 0,
NULL
,NULL

451 
PROTOBUF_C_LABEL_REPEATED
,

452 
PROTOBUF_C_TYPE_MESSAGE
,

453 
off£tof
(
G©eway__RxMëad©a
, 
n_™ã¬as
),

454 
off£tof
(
G©eway__RxMëad©a
, 
™ã¬as
),

455 &
g©eway__rx_mëad©a__™ã¬a__des¸ùt‹
,

456 
NULL
,

458 0,
NULL
,NULL

463 
PROTOBUF_C_LABEL_OPTIONAL
,

464 
PROTOBUF_C_TYPE_UINT64
,

465 
off£tof
(
G©eway__RxMëad©a
, 
has_‰equícy
),

466 
off£tof
(
G©eway__RxMëad©a
, 
‰equícy
),

467 
NULL
,

468 
NULL
,

470 0,
NULL
,NULL

475 
PROTOBUF_C_LABEL_OPTIONAL
,

476 
PROTOBUF_C_TYPE_FLOAT
,

477 
off£tof
(
G©eway__RxMëad©a
, 
has_rssi
),

478 
off£tof
(
G©eway__RxMëad©a
, 
rssi
),

479 
NULL
,

480 
NULL
,

482 0,
NULL
,NULL

487 
PROTOBUF_C_LABEL_OPTIONAL
,

488 
PROTOBUF_C_TYPE_FLOAT
,

489 
off£tof
(
G©eway__RxMëad©a
, 
has_¢r
),

490 
off£tof
(
G©eway__RxMëad©a
, 
¢r
),

491 
NULL
,

492 
NULL
,

494 0,
NULL
,NULL

499 
PROTOBUF_C_LABEL_OPTIONAL
,

500 
PROTOBUF_C_TYPE_MESSAGE
,

502 
off£tof
(
G©eway__RxMëad©a
, 
gps
),

503 &
g©eway__gpsmëad©a__des¸ùt‹
,

504 
NULL
,

506 0,
NULL
,NULL

509 c⁄° 
	gg©eway__rx_mëad©a__fõld_ödi˚s_by_«me
[] = {

523 c⁄° 
PrŸobufCI¡R™ge
 
	gg©eway__rx_mëad©a__numbî_ønges
[5 + 1] =

532 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	gg©eway__rx_mëad©a__des¸ùt‹
 =

534 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

539 (
G©eway__RxMëad©a
),

541 
g©eway__rx_mëad©a__fõld_des¸ùt‹s
,

542 
g©eway__rx_mëad©a__fõld_ödi˚s_by_«me
,

543 5, 
g©eway__rx_mëad©a__numbî_ønges
,

544 (
PrŸobufCMesßgeInô
Ë
g©eway__rx_mëad©a__öô
,

545 
NULL
,NULL,NULL

547 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	gg©eway__tx_c⁄figuøti⁄__fõld_des¸ùt‹s
[6] =

552 
PROTOBUF_C_LABEL_OPTIONAL
,

553 
PROTOBUF_C_TYPE_UINT32
,

554 
off£tof
(
G©eway__TxC⁄figuøti⁄
, 
has_time°amp
),

555 
off£tof
(
G©eway__TxC⁄figuøti⁄
, 
time°amp
),

556 
NULL
,

557 
NULL
,

559 0,
NULL
,NULL

564 
PROTOBUF_C_LABEL_OPTIONAL
,

565 
PROTOBUF_C_TYPE_UINT32
,

566 
off£tof
(
G©eway__TxC⁄figuøti⁄
, 
has_rf_chaö
),

567 
off£tof
(
G©eway__TxC⁄figuøti⁄
, 
rf_chaö
),

568 
NULL
,

569 
NULL
,

571 0,
NULL
,NULL

576 
PROTOBUF_C_LABEL_OPTIONAL
,

577 
PROTOBUF_C_TYPE_UINT64
,

578 
off£tof
(
G©eway__TxC⁄figuøti⁄
, 
has_‰equícy
),

579 
off£tof
(
G©eway__TxC⁄figuøti⁄
, 
‰equícy
),

580 
NULL
,

581 
NULL
,

583 0,
NULL
,NULL

588 
PROTOBUF_C_LABEL_OPTIONAL
,

589 
PROTOBUF_C_TYPE_INT32
,

590 
off£tof
(
G©eway__TxC⁄figuøti⁄
, 
has_powî
),

591 
off£tof
(
G©eway__TxC⁄figuøti⁄
, 
powî
),

592 
NULL
,

593 
NULL
,

595 0,
NULL
,NULL

600 
PROTOBUF_C_LABEL_OPTIONAL
,

601 
PROTOBUF_C_TYPE_BOOL
,

602 
off£tof
(
G©eway__TxC⁄figuøti⁄
, 
has_pﬁ¨iz©i⁄_övîsi⁄
),

603 
off£tof
(
G©eway__TxC⁄figuøti⁄
, 
pﬁ¨iz©i⁄_övîsi⁄
),

604 
NULL
,

605 
NULL
,

607 0,
NULL
,NULL

612 
PROTOBUF_C_LABEL_OPTIONAL
,

613 
PROTOBUF_C_TYPE_UINT32
,

614 
off£tof
(
G©eway__TxC⁄figuøti⁄
, 
has_‰equícy_devüti⁄
),

615 
off£tof
(
G©eway__TxC⁄figuøti⁄
, 
‰equícy_devüti⁄
),

616 
NULL
,

617 
NULL
,

619 0,
NULL
,NULL

622 c⁄° 
	gg©eway__tx_c⁄figuøti⁄__fõld_ödi˚s_by_«me
[] = {

630 c⁄° 
PrŸobufCI¡R™ge
 
	gg©eway__tx_c⁄figuøti⁄__numbî_ønges
[3 + 1] =

637 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	gg©eway__tx_c⁄figuøti⁄__des¸ùt‹
 =

639 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

644 (
G©eway__TxC⁄figuøti⁄
),

646 
g©eway__tx_c⁄figuøti⁄__fõld_des¸ùt‹s
,

647 
g©eway__tx_c⁄figuøti⁄__fõld_ödi˚s_by_«me
,

648 3, 
g©eway__tx_c⁄figuøti⁄__numbî_ønges
,

649 (
PrŸobufCMesßgeInô
Ë
g©eway__tx_c⁄figuøti⁄__öô
,

650 
NULL
,NULL,NULL

652 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	gg©eway__°©us__osmërics__fõld_des¸ùt‹s
[6] =

657 
PROTOBUF_C_LABEL_OPTIONAL
,

658 
PROTOBUF_C_TYPE_FLOAT
,

659 
off£tof
(
G©eway__Sètus__OSMërics
, 
has_lﬂd_1
),

660 
off£tof
(
G©eway__Sètus__OSMërics
, 
lﬂd_1
),

661 
NULL
,

662 
NULL
,

664 0,
NULL
,NULL

669 
PROTOBUF_C_LABEL_OPTIONAL
,

670 
PROTOBUF_C_TYPE_FLOAT
,

671 
off£tof
(
G©eway__Sètus__OSMërics
, 
has_lﬂd_5
),

672 
off£tof
(
G©eway__Sètus__OSMërics
, 
lﬂd_5
),

673 
NULL
,

674 
NULL
,

676 0,
NULL
,NULL

681 
PROTOBUF_C_LABEL_OPTIONAL
,

682 
PROTOBUF_C_TYPE_FLOAT
,

683 
off£tof
(
G©eway__Sètus__OSMërics
, 
has_lﬂd_15
),

684 
off£tof
(
G©eway__Sètus__OSMërics
, 
lﬂd_15
),

685 
NULL
,

686 
NULL
,

688 0,
NULL
,NULL

693 
PROTOBUF_C_LABEL_OPTIONAL
,

694 
PROTOBUF_C_TYPE_FLOAT
,

695 
off£tof
(
G©eway__Sètus__OSMërics
, 
has_˝u_≥r˚¡age
),

696 
off£tof
(
G©eway__Sètus__OSMërics
, 
˝u_≥r˚¡age
),

697 
NULL
,

698 
NULL
,

700 0,
NULL
,NULL

705 
PROTOBUF_C_LABEL_OPTIONAL
,

706 
PROTOBUF_C_TYPE_FLOAT
,

707 
off£tof
(
G©eway__Sètus__OSMërics
, 
has_mem‹y_≥r˚¡age
),

708 
off£tof
(
G©eway__Sètus__OSMërics
, 
mem‹y_≥r˚¡age
),

709 
NULL
,

710 
NULL
,

712 0,
NULL
,NULL

717 
PROTOBUF_C_LABEL_OPTIONAL
,

718 
PROTOBUF_C_TYPE_FLOAT
,

719 
off£tof
(
G©eway__Sètus__OSMërics
, 
has_ãm≥øtuª
),

720 
off£tof
(
G©eway__Sètus__OSMërics
, 
ãm≥øtuª
),

721 
NULL
,

722 
NULL
,

724 0,
NULL
,NULL

727 c⁄° 
	gg©eway__°©us__osmërics__fõld_ödi˚s_by_«me
[] = {

735 c⁄° 
PrŸobufCI¡R™ge
 
	gg©eway__°©us__osmërics__numbî_ønges
[4 + 1] =

743 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	gg©eway__°©us__osmërics__des¸ùt‹
 =

745 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

750 (
G©eway__Sètus__OSMërics
),

752 
g©eway__°©us__osmërics__fõld_des¸ùt‹s
,

753 
g©eway__°©us__osmërics__fõld_ödi˚s_by_«me
,

754 4, 
g©eway__°©us__osmërics__numbî_ønges
,

755 (
PrŸobufCMesßgeInô
Ë
g©eway__°©us__osmërics__öô
,

756 
NULL
,NULL,NULL

758 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	gg©eway__°©us__fõld_des¸ùt‹s
[26] =

763 
PROTOBUF_C_LABEL_OPTIONAL
,

764 
PROTOBUF_C_TYPE_UINT32
,

765 
off£tof
(
G©eway__Sètus
, 
has_time°amp
),

766 
off£tof
(
G©eway__Sètus
, 
time°amp
),

767 
NULL
,

768 
NULL
,

770 0,
NULL
,NULL

775 
PROTOBUF_C_LABEL_OPTIONAL
,

776 
PROTOBUF_C_TYPE_INT64
,

777 
off£tof
(
G©eway__Sètus
, 
has_time
),

778 
off£tof
(
G©eway__Sètus
, 
time
),

779 
NULL
,

780 
NULL
,

782 0,
NULL
,NULL

787 
PROTOBUF_C_LABEL_OPTIONAL
,

788 
PROTOBUF_C_TYPE_BOOL
,

789 
off£tof
(
G©eway__Sètus
, 
has_g©eway_åu°ed
),

790 
off£tof
(
G©eway__Sètus
, 
g©eway_åu°ed
),

791 
NULL
,

792 
NULL
,

794 0,
NULL
,NULL

799 
PROTOBUF_C_LABEL_OPTIONAL
,

800 
PROTOBUF_C_TYPE_INT64
,

801 
off£tof
(
G©eway__Sètus
, 
has_boŸ_time
),

802 
off£tof
(
G©eway__Sètus
, 
boŸ_time
),

803 
NULL
,

804 
NULL
,

806 0,
NULL
,NULL

811 
PROTOBUF_C_LABEL_REPEATED
,

812 
PROTOBUF_C_TYPE_STRING
,

813 
off£tof
(
G©eway__Sètus
, 
n_ù
),

814 
off£tof
(
G©eway__Sètus
, 
ù
),

815 
NULL
,

816 
NULL
,

818 0,
NULL
,NULL

823 
PROTOBUF_C_LABEL_OPTIONAL
,

824 
PROTOBUF_C_TYPE_STRING
,

826 
off£tof
(
G©eway__Sètus
, 
∂©f‹m
),

827 
NULL
,

828 
NULL
,

830 0,
NULL
,NULL

835 
PROTOBUF_C_LABEL_OPTIONAL
,

836 
PROTOBUF_C_TYPE_STRING
,

838 
off£tof
(
G©eway__Sètus
, 
c⁄è˘_emaû
),

839 
NULL
,

840 
NULL
,

842 0,
NULL
,NULL

847 
PROTOBUF_C_LABEL_OPTIONAL
,

848 
PROTOBUF_C_TYPE_STRING
,

850 
off£tof
(
G©eway__Sètus
, 
des¸ùti⁄
),

851 
NULL
,

852 
NULL
,

854 0,
NULL
,NULL

859 
PROTOBUF_C_LABEL_OPTIONAL
,

860 
PROTOBUF_C_TYPE_STRING
,

862 
off£tof
(
G©eway__Sètus
, 
‰equícy_∂™
),

863 
NULL
,

864 
NULL
,

866 0,
NULL
,NULL

871 
PROTOBUF_C_LABEL_OPTIONAL
,

872 
PROTOBUF_C_TYPE_STRING
,

874 
off£tof
(
G©eway__Sètus
, 
bridge
),

875 
NULL
,

876 
NULL
,

878 0,
NULL
,NULL

883 
PROTOBUF_C_LABEL_OPTIONAL
,

884 
PROTOBUF_C_TYPE_STRING
,

886 
off£tof
(
G©eway__Sètus
, 
rouãr
),

887 
NULL
,

888 
NULL
,

890 0,
NULL
,NULL

895 
PROTOBUF_C_LABEL_OPTIONAL
,

896 
PROTOBUF_C_TYPE_UINT32
,

897 
off£tof
(
G©eway__Sètus
, 
has_Âga
),

898 
off£tof
(
G©eway__Sètus
, 
Âga
),

899 
NULL
,

900 
NULL
,

902 0,
NULL
,NULL

907 
PROTOBUF_C_LABEL_OPTIONAL
,

908 
PROTOBUF_C_TYPE_UINT32
,

909 
off£tof
(
G©eway__Sètus
, 
has_d•
),

910 
off£tof
(
G©eway__Sètus
, 
d•
),

911 
NULL
,

912 
NULL
,

914 0,
NULL
,NULL

919 
PROTOBUF_C_LABEL_OPTIONAL
,

920 
PROTOBUF_C_TYPE_STRING
,

922 
off£tof
(
G©eway__Sètus
, 
hÆ
),

923 
NULL
,

924 
NULL
,

926 0,
NULL
,NULL

931 
PROTOBUF_C_LABEL_OPTIONAL
,

932 
PROTOBUF_C_TYPE_MESSAGE
,

934 
off£tof
(
G©eway__Sètus
, 
gps
),

935 &
g©eway__gpsmëad©a__des¸ùt‹
,

936 
NULL
,

938 0,
NULL
,NULL

943 
PROTOBUF_C_LABEL_OPTIONAL
,

944 
PROTOBUF_C_TYPE_UINT32
,

945 
off£tof
(
G©eway__Sètus
, 
has_πt
),

946 
off£tof
(
G©eway__Sètus
, 
πt
),

947 
NULL
,

948 
NULL
,

950 0,
NULL
,NULL

955 
PROTOBUF_C_LABEL_OPTIONAL
,

956 
PROTOBUF_C_TYPE_UINT32
,

957 
off£tof
(
G©eway__Sètus
, 
has_rx_ö
),

958 
off£tof
(
G©eway__Sètus
, 
rx_ö
),

959 
NULL
,

960 
NULL
,

962 0,
NULL
,NULL

967 
PROTOBUF_C_LABEL_OPTIONAL
,

968 
PROTOBUF_C_TYPE_UINT32
,

969 
off£tof
(
G©eway__Sètus
, 
has_rx_ok
),

970 
off£tof
(
G©eway__Sètus
, 
rx_ok
),

971 
NULL
,

972 
NULL
,

974 0,
NULL
,NULL

979 
PROTOBUF_C_LABEL_OPTIONAL
,

980 
PROTOBUF_C_TYPE_UINT32
,

981 
off£tof
(
G©eway__Sètus
, 
has_tx_ö
),

982 
off£tof
(
G©eway__Sètus
, 
tx_ö
),

983 
NULL
,

984 
NULL
,

986 0,
NULL
,NULL

991 
PROTOBUF_C_LABEL_OPTIONAL
,

992 
PROTOBUF_C_TYPE_UINT32
,

993 
off£tof
(
G©eway__Sètus
, 
has_tx_ok
),

994 
off£tof
(
G©eway__Sètus
, 
tx_ok
),

995 
NULL
,

996 
NULL
,

998 0,
NULL
,NULL

1003 
PROTOBUF_C_LABEL_OPTIONAL
,

1004 
PROTOBUF_C_TYPE_UINT32
,

1005 
off£tof
(
G©eway__Sètus
, 
has_lm_ok
),

1006 
off£tof
(
G©eway__Sètus
, 
lm_ok
),

1007 
NULL
,

1008 
NULL
,

1010 0,
NULL
,NULL

1015 
PROTOBUF_C_LABEL_OPTIONAL
,

1016 
PROTOBUF_C_TYPE_UINT32
,

1017 
off£tof
(
G©eway__Sètus
, 
has_lm_°
),

1018 
off£tof
(
G©eway__Sètus
, 
lm_°
),

1019 
NULL
,

1020 
NULL
,

1022 0,
NULL
,NULL

1027 
PROTOBUF_C_LABEL_OPTIONAL
,

1028 
PROTOBUF_C_TYPE_UINT32
,

1029 
off£tof
(
G©eway__Sètus
, 
has_lm_nw
),

1030 
off£tof
(
G©eway__Sètus
, 
lm_nw
),

1031 
NULL
,

1032 
NULL
,

1034 0,
NULL
,NULL

1039 
PROTOBUF_C_LABEL_OPTIONAL
,

1040 
PROTOBUF_C_TYPE_UINT32
,

1041 
off£tof
(
G©eway__Sètus
, 
has_l_µs
),

1042 
off£tof
(
G©eway__Sètus
, 
l_µs
),

1043 
NULL
,

1044 
NULL
,

1046 0,
NULL
,NULL

1051 
PROTOBUF_C_LABEL_OPTIONAL
,

1052 
PROTOBUF_C_TYPE_MESSAGE
,

1054 
off£tof
(
G©eway__Sètus
, 
os
),

1055 &
g©eway__°©us__osmërics__des¸ùt‹
,

1056 
NULL
,

1058 0,
NULL
,NULL

1063 
PROTOBUF_C_LABEL_REPEATED
,

1064 
PROTOBUF_C_TYPE_STRING
,

1065 
off£tof
(
G©eway__Sètus
, 
n_mesßges
),

1066 
off£tof
(
G©eway__Sètus
, 
mesßges
),

1067 
NULL
,

1068 
NULL
,

1070 0,
NULL
,NULL

1073 c⁄° 
	gg©eway__°©us__fõld_ödi˚s_by_«me
[] = {

1101 c⁄° 
PrŸobufCI¡R™ge
 
	gg©eway__°©us__numbî_ønges
[5 + 1] =

1110 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	gg©eway__°©us__des¸ùt‹
 =

1112 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

1117 (
G©eway__Sètus
),

1119 
g©eway__°©us__fõld_des¸ùt‹s
,

1120 
g©eway__°©us__fõld_ödi˚s_by_«me
,

1121 5, 
g©eway__°©us__numbî_ønges
,

1122 (
PrŸobufCMesßgeInô
Ë
g©eway__°©us__öô
,

1123 
NULL
,NULL,NULL

	@libttn/gateway.pb-c.h

4 #i‚de‡
PROTOBUF_C_gôhub_2ecom_2fTheThögsNëw‹k_2·ä_2Ápi_2fg©eway_2fg©eway_2ïrŸo__INCLUDED


5 
	#PROTOBUF_C_gôhub_2ecom_2fTheThögsNëw‹k_2·ä_2Ápi_2fg©eway_2fg©eway_2ïrŸo__INCLUDED


	)

7 
	~<¥Ÿobuf-c/¥Ÿobuf-c.h
>

9 
	gPROTOBUF_C__BEGIN_DECLS


11 #i‡
PROTOBUF_C_VERSION_NUMBER
 < 1000000

12 #îr‹ 
This
 
fûe
 
was
 
gíî©ed
 
by
 
a
 
√wî
 
vîsi⁄
 
of
 
¥Ÿoc
-
c
 
which
 
is
 
öcom∑tibÀ
 
wôh
 
your
 
lib¥Ÿobuf
-¯
hódîs
. 
PÀa£
 
upd©e
 your headers.

13 #ñi‡1002001 < 
PROTOBUF_C_MIN_COMPILER_VERSION


14 #îr‹ 
This
 
fûe
 
was
 
gíî©ed
 
by
 
™
 
ﬁdî
 
vîsi⁄
 
of
 
¥Ÿoc
-
c
 
which
 
is
 
öcom∑tibÀ
 
wôh
 
your
 
lib¥Ÿobuf
-¯
hódîs
. 
PÀa£
 
ªgíî©e
 
this
 fûêwôh 
a
 
√wî
 version ofÖrotoc-c.

17 
	~"gogo.pb-c.h
"

19 
_G©eway__GPSMëad©a
 
	tG©eway__GPSMëad©a
;

20 
_G©eway__RxMëad©a
 
	tG©eway__RxMëad©a
;

21 
_G©eway__RxMëad©a__A¡í«
 
	tG©eway__RxMëad©a__A¡í«
;

22 
_G©eway__TxC⁄figuøti⁄
 
	tG©eway__TxC⁄figuøti⁄
;

23 
_G©eway__Sètus
 
	tG©eway__Sètus
;

24 
_G©eway__Sètus__OSMërics
 
	tG©eway__Sètus__OSMërics
;

32 
	s_G©eway__GPSMëad©a


34 
PrŸobufCMesßge
 
	mba£
;

38 
¥Ÿobuf_c_boﬁón
 
	mhas_time
;

39 
öt64_t
 
	mtime
;

40 
¥Ÿobuf_c_boﬁón
 
	mhas_œtôude
;

41 
	mœtôude
;

42 
¥Ÿobuf_c_boﬁón
 
	mhas_l⁄gôude
;

43 
	ml⁄gôude
;

44 
¥Ÿobuf_c_boﬁón
 
	mhas_Ætôude
;

45 
öt32_t
 
	mÆtôude
;

47 
	#GATEWAY__GPSMETADATA__INIT
 \

48 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
g©eway__gpsmëad©a__des¸ùt‹
) \

49 , 0,0, 0,0, 0,0, 0,0 }

	)

52 
	s_G©eway__RxMëad©a__A¡í«


54 
PrŸobufCMesßge
 
	mba£
;

55 
¥Ÿobuf_c_boﬁón
 
	mhas_™ã¬a
;

56 
uöt32_t
 
	m™ã¬a
;

57 
¥Ÿobuf_c_boﬁón
 
	mhas_ch™√l
;

58 
uöt32_t
 
	mch™√l
;

62 
¥Ÿobuf_c_boﬁón
 
	mhas_rssi
;

63 
	mrssi
;

67 
¥Ÿobuf_c_boﬁón
 
	mhas_¢r
;

68 
	m¢r
;

72 
¥Ÿobuf_c_boﬁón
 
	mhas_í¸y±ed_time
;

73 
PrŸobufCBö¨yD©a
 
	mí¸y±ed_time
;

75 
	#GATEWAY__RX_METADATA__ANTENNA__INIT
 \

76 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
g©eway__rx_mëad©a__™ã¬a__des¸ùt‹
) \

77 , 0,0, 0,0, 0,0, 0,0, 0,{0,
NULL
} }

	)

80 
	s_G©eway__RxMëad©a


82 
PrŸobufCMesßge
 
	mba£
;

83 *
	mg©eway_id
;

87 
¥Ÿobuf_c_boﬁón
 
	mhas_g©eway_åu°ed
;

88 
¥Ÿobuf_c_boﬁón
 
	mg©eway_åu°ed
;

92 
¥Ÿobuf_c_boﬁón
 
	mhas_time°amp
;

93 
uöt32_t
 
	mtime°amp
;

97 
¥Ÿobuf_c_boﬁón
 
	mhas_time
;

98 
öt64_t
 
	mtime
;

102 
¥Ÿobuf_c_boﬁón
 
	mhas_í¸y±ed_time
;

103 
PrŸobufCBö¨yD©a
 
	mí¸y±ed_time
;

104 
¥Ÿobuf_c_boﬁón
 
	mhas_rf_chaö
;

105 
uöt32_t
 
	mrf_chaö
;

106 
¥Ÿobuf_c_boﬁón
 
	mhas_ch™√l
;

107 
uöt32_t
 
	mch™√l
;

108 
size_t
 
	mn_™ã¬as
;

109 
G©eway__RxMëad©a__A¡í«
 **
	m™ã¬as
;

113 
¥Ÿobuf_c_boﬁón
 
	mhas_‰equícy
;

114 
uöt64_t
 
	m‰equícy
;

118 
¥Ÿobuf_c_boﬁón
 
	mhas_rssi
;

119 
	mrssi
;

123 
¥Ÿobuf_c_boﬁón
 
	mhas_¢r
;

124 
	m¢r
;

125 
G©eway__GPSMëad©a
 *
	mgps
;

127 
	#GATEWAY__RX_METADATA__INIT
 \

128 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
g©eway__rx_mëad©a__des¸ùt‹
) \

129 , 
NULL
, 0,0, 0,0, 0,0, 0,{0,NULL}, 0,0, 0,0, 0,NULL, 0,0, 0,0, 0,0, NULL }

	)

132 
	s_G©eway__TxC⁄figuøti⁄


134 
PrŸobufCMesßge
 
	mba£
;

138 
¥Ÿobuf_c_boﬁón
 
	mhas_time°amp
;

139 
uöt32_t
 
	mtime°amp
;

140 
¥Ÿobuf_c_boﬁón
 
	mhas_rf_chaö
;

141 
uöt32_t
 
	mrf_chaö
;

145 
¥Ÿobuf_c_boﬁón
 
	mhas_‰equícy
;

146 
uöt64_t
 
	m‰equícy
;

150 
¥Ÿobuf_c_boﬁón
 
	mhas_powî
;

151 
öt32_t
 
	mpowî
;

155 
¥Ÿobuf_c_boﬁón
 
	mhas_pﬁ¨iz©i⁄_övîsi⁄
;

156 
¥Ÿobuf_c_boﬁón
 
	mpﬁ¨iz©i⁄_övîsi⁄
;

160 
¥Ÿobuf_c_boﬁón
 
	mhas_‰equícy_devüti⁄
;

161 
uöt32_t
 
	m‰equícy_devüti⁄
;

163 
	#GATEWAY__TX_CONFIGURATION__INIT
 \

164 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
g©eway__tx_c⁄figuøti⁄__des¸ùt‹
) \

165 , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }

	)

171 
	s_G©eway__Sètus__OSMërics


173 
PrŸobufCMesßge
 
	mba£
;

174 
¥Ÿobuf_c_boﬁón
 
	mhas_lﬂd_1
;

175 
	mlﬂd_1
;

176 
¥Ÿobuf_c_boﬁón
 
	mhas_lﬂd_5
;

177 
	mlﬂd_5
;

178 
¥Ÿobuf_c_boﬁón
 
	mhas_lﬂd_15
;

179 
	mlﬂd_15
;

180 
¥Ÿobuf_c_boﬁón
 
	mhas_˝u_≥r˚¡age
;

181 
	m˝u_≥r˚¡age
;

182 
¥Ÿobuf_c_boﬁón
 
	mhas_mem‹y_≥r˚¡age
;

183 
	mmem‹y_≥r˚¡age
;

184 
¥Ÿobuf_c_boﬁón
 
	mhas_ãm≥øtuª
;

185 
	mãm≥øtuª
;

187 
	#GATEWAY__STATUS__OSMETRICS__INIT
 \

188 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
g©eway__°©us__osmërics__des¸ùt‹
) \

189 , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }

	)

195 
	s_G©eway__Sètus


197 
PrŸobufCMesßge
 
	mba£
;

201 
¥Ÿobuf_c_boﬁón
 
	mhas_time°amp
;

202 
uöt32_t
 
	mtime°amp
;

206 
¥Ÿobuf_c_boﬁón
 
	mhas_time
;

207 
öt64_t
 
	mtime
;

211 
¥Ÿobuf_c_boﬁón
 
	mhas_g©eway_åu°ed
;

212 
¥Ÿobuf_c_boﬁón
 
	mg©eway_åu°ed
;

216 
¥Ÿobuf_c_boﬁón
 
	mhas_boŸ_time
;

217 
öt64_t
 
	mboŸ_time
;

218 
size_t
 
	mn_ù
;

219 **
	mù
;

220 *
	m∂©f‹m
;

221 *
	mc⁄è˘_emaû
;

222 *
	mdes¸ùti⁄
;

226 *
	m‰equícy_∂™
;

230 *
	mbridge
;

234 *
	mrouãr
;

238 
¥Ÿobuf_c_boﬁón
 
	mhas_Âga
;

239 
uöt32_t
 
	mÂga
;

243 
¥Ÿobuf_c_boﬁón
 
	mhas_d•
;

244 
uöt32_t
 
	md•
;

248 *
	mhÆ
;

249 
G©eway__GPSMëad©a
 *
	mgps
;

253 
¥Ÿobuf_c_boﬁón
 
	mhas_πt
;

254 
uöt32_t
 
	mπt
;

258 
¥Ÿobuf_c_boﬁón
 
	mhas_rx_ö
;

259 
uöt32_t
 
	mrx_ö
;

263 
¥Ÿobuf_c_boﬁón
 
	mhas_rx_ok
;

264 
uöt32_t
 
	mrx_ok
;

268 
¥Ÿobuf_c_boﬁón
 
	mhas_tx_ö
;

269 
uöt32_t
 
	mtx_ö
;

273 
¥Ÿobuf_c_boﬁón
 
	mhas_tx_ok
;

274 
uöt32_t
 
	mtx_ok
;

278 
¥Ÿobuf_c_boﬁón
 
	mhas_lm_ok
;

279 
uöt32_t
 
	mlm_ok
;

283 
¥Ÿobuf_c_boﬁón
 
	mhas_lm_°
;

284 
uöt32_t
 
	mlm_°
;

288 
¥Ÿobuf_c_boﬁón
 
	mhas_lm_nw
;

289 
uöt32_t
 
	mlm_nw
;

293 
¥Ÿobuf_c_boﬁón
 
	mhas_l_µs
;

294 
uöt32_t
 
	ml_µs
;

295 
G©eway__Sètus__OSMërics
 *
	mos
;

299 
size_t
 
	mn_mesßges
;

300 **
	mmesßges
;

302 
	#GATEWAY__STATUS__INIT
 \

303 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
g©eway__°©us__des¸ùt‹
) \

304 , 0,0, 0,0, 0,0, 0,0, 0,
NULL
, NULL, NULL, NULL, NULL, NULL, NULL, 0,0, 0,0, NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, 0,NULL }

	)

308 
	gg©eway__gpsmëad©a__öô


309 (
G©eway__GPSMëad©a
 *
	gmesßge
);

310 
size_t
 
	gg©eway__gpsmëad©a__gë_∑cked_size


311 (c⁄° 
G©eway__GPSMëad©a
 *
	gmesßge
);

312 
size_t
 
	gg©eway__gpsmëad©a__∑ck


313 (c⁄° 
G©eway__GPSMëad©a
 *
	gmesßge
,

314 
uöt8_t
 *
	gout
);

315 
size_t
 
	gg©eway__gpsmëad©a__∑ck_to_buf„r


316 (c⁄° 
G©eway__GPSMëad©a
 *
	gmesßge
,

317 
PrŸobufCBuf„r
 *
	gbuf„r
);

318 
G©eway__GPSMëad©a
 *

319 
	gg©eway__gpsmëad©a__u≈ack


320 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

321 
size_t
 
	gÀn
,

322 c⁄° 
uöt8_t
 *
	gd©a
);

323 
	gg©eway__gpsmëad©a__‰ì_u≈acked


324 (
G©eway__GPSMëad©a
 *
	gmesßge
,

325 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
);

327 
	gg©eway__rx_mëad©a__™ã¬a__öô


328 (
G©eway__RxMëad©a__A¡í«
 *
	gmesßge
);

330 
	gg©eway__rx_mëad©a__öô


331 (
G©eway__RxMëad©a
 *
	gmesßge
);

332 
size_t
 
	gg©eway__rx_mëad©a__gë_∑cked_size


333 (c⁄° 
G©eway__RxMëad©a
 *
	gmesßge
);

334 
size_t
 
	gg©eway__rx_mëad©a__∑ck


335 (c⁄° 
G©eway__RxMëad©a
 *
	gmesßge
,

336 
uöt8_t
 *
	gout
);

337 
size_t
 
	gg©eway__rx_mëad©a__∑ck_to_buf„r


338 (c⁄° 
G©eway__RxMëad©a
 *
	gmesßge
,

339 
PrŸobufCBuf„r
 *
	gbuf„r
);

340 
G©eway__RxMëad©a
 *

341 
	gg©eway__rx_mëad©a__u≈ack


342 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

343 
size_t
 
	gÀn
,

344 c⁄° 
uöt8_t
 *
	gd©a
);

345 
	gg©eway__rx_mëad©a__‰ì_u≈acked


346 (
G©eway__RxMëad©a
 *
	gmesßge
,

347 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
);

349 
	gg©eway__tx_c⁄figuøti⁄__öô


350 (
G©eway__TxC⁄figuøti⁄
 *
	gmesßge
);

351 
size_t
 
	gg©eway__tx_c⁄figuøti⁄__gë_∑cked_size


352 (c⁄° 
G©eway__TxC⁄figuøti⁄
 *
	gmesßge
);

353 
size_t
 
	gg©eway__tx_c⁄figuøti⁄__∑ck


354 (c⁄° 
G©eway__TxC⁄figuøti⁄
 *
	gmesßge
,

355 
uöt8_t
 *
	gout
);

356 
size_t
 
	gg©eway__tx_c⁄figuøti⁄__∑ck_to_buf„r


357 (c⁄° 
G©eway__TxC⁄figuøti⁄
 *
	gmesßge
,

358 
PrŸobufCBuf„r
 *
	gbuf„r
);

359 
G©eway__TxC⁄figuøti⁄
 *

360 
	gg©eway__tx_c⁄figuøti⁄__u≈ack


361 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

362 
size_t
 
	gÀn
,

363 c⁄° 
uöt8_t
 *
	gd©a
);

364 
	gg©eway__tx_c⁄figuøti⁄__‰ì_u≈acked


365 (
G©eway__TxC⁄figuøti⁄
 *
	gmesßge
,

366 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
);

368 
	gg©eway__°©us__osmërics__öô


369 (
G©eway__Sètus__OSMërics
 *
	gmesßge
);

371 
	gg©eway__°©us__öô


372 (
G©eway__Sètus
 *
	gmesßge
);

373 
size_t
 
	gg©eway__°©us__gë_∑cked_size


374 (c⁄° 
G©eway__Sètus
 *
	gmesßge
);

375 
size_t
 
	gg©eway__°©us__∑ck


376 (c⁄° 
G©eway__Sètus
 *
	gmesßge
,

377 
uöt8_t
 *
	gout
);

378 
size_t
 
	gg©eway__°©us__∑ck_to_buf„r


379 (c⁄° 
G©eway__Sètus
 *
	gmesßge
,

380 
PrŸobufCBuf„r
 *
	gbuf„r
);

381 
G©eway__Sètus
 *

382 
	gg©eway__°©us__u≈ack


383 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

384 
size_t
 
	gÀn
,

385 c⁄° 
uöt8_t
 *
	gd©a
);

386 
	gg©eway__°©us__‰ì_u≈acked


387 (
G©eway__Sètus
 *
	gmesßge
,

388 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
);

391 (*
	tG©eway__GPSMëad©a_Closuª
)

392 (c⁄° 
	tG©eway__GPSMëad©a
 *
	tmesßge
,

393 *
	t˛osuª_d©a
);

394 (*
	tG©eway__RxMëad©a__A¡í«_Closuª
)

395 (c⁄° 
	tG©eway__RxMëad©a__A¡í«
 *
	tmesßge
,

396 *
	t˛osuª_d©a
);

397 (*
	tG©eway__RxMëad©a_Closuª
)

398 (c⁄° 
	tG©eway__RxMëad©a
 *
	tmesßge
,

399 *
	t˛osuª_d©a
);

400 (*
	tG©eway__TxC⁄figuøti⁄_Closuª
)

401 (c⁄° 
	tG©eway__TxC⁄figuøti⁄
 *
	tmesßge
,

402 *
	t˛osuª_d©a
);

403 (*
	tG©eway__Sètus__OSMërics_Closuª
)

404 (c⁄° 
	tG©eway__Sètus__OSMërics
 *
	tmesßge
,

405 *
	t˛osuª_d©a
);

406 (*
	tG©eway__Sètus_Closuª
)

407 (c⁄° 
	tG©eway__Sètus
 *
	tmesßge
,

408 *
	t˛osuª_d©a
);

415 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
g©eway__gpsmëad©a__des¸ùt‹
;

416 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
g©eway__rx_mëad©a__des¸ùt‹
;

417 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
g©eway__rx_mëad©a__™ã¬a__des¸ùt‹
;

418 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
g©eway__tx_c⁄figuøti⁄__des¸ùt‹
;

419 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
g©eway__°©us__des¸ùt‹
;

420 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
g©eway__°©us__osmërics__des¸ùt‹
;

422 
PROTOBUF_C__END_DECLS


	@libttn/gogo.pb-c.c

5 #i‚de‡
PROTOBUF_C__NO_DEPRECATED


6 
	#PROTOBUF_C__NO_DEPRECATED


	)

9 
	~"gogo.pb-c.h
"

	@libttn/gogo.pb-c.h

4 #i‚de‡
PROTOBUF_C_gôhub_2ecom_2fgogo_2ÂrŸobuf_2fgog›rŸo_2fgogo_2ïrŸo__INCLUDED


5 
	#PROTOBUF_C_gôhub_2ecom_2fgogo_2ÂrŸobuf_2fgog›rŸo_2fgogo_2ïrŸo__INCLUDED


	)

7 
	~<¥Ÿobuf-c/¥Ÿobuf-c.h
>

9 
	gPROTOBUF_C__BEGIN_DECLS


11 #i‡
PROTOBUF_C_VERSION_NUMBER
 < 1000000

12 #îr‹ 
This
 
fûe
 
was
 
gíî©ed
 
by
 
a
 
√wî
 
vîsi⁄
 
of
 
¥Ÿoc
-
c
 
which
 
is
 
öcom∑tibÀ
 
wôh
 
your
 
lib¥Ÿobuf
-¯
hódîs
. 
PÀa£
 
upd©e
 your headers.

13 #ñi‡1002001 < 
PROTOBUF_C_MIN_COMPILER_VERSION


14 #îr‹ 
This
 
fûe
 
was
 
gíî©ed
 
by
 
™
 
ﬁdî
 
vîsi⁄
 
of
 
¥Ÿoc
-
c
 
which
 
is
 
öcom∑tibÀ
 
wôh
 
your
 
lib¥Ÿobuf
-¯
hódîs
. 
PÀa£
 
ªgíî©e
 
this
 fûêwôh 
a
 
√wî
 version ofÖrotoc-c.

17 
	~"des¸ùt‹.pb-c.h
"

35 
	gPROTOBUF_C__END_DECLS


	@libttn/lorawan.pb-c.c

5 #i‚de‡
PROTOBUF_C__NO_DEPRECATED


6 
	#PROTOBUF_C__NO_DEPRECATED


	)

9 
	~"l‹aw™.pb-c.h
"

10 
	gl‹aw™__mëad©a__öô


11 (
L‹aw™__Mëad©a
 *
	gmesßge
)

13 
L‹aw™__Mëad©a
 
	göô_vÆue
 = 
LORAWAN__METADATA__INIT
;

14 *
	gmesßge
 = 
öô_vÆue
;

16 
size_t
 
	gl‹aw™__mëad©a__gë_∑cked_size


17 (c⁄° 
L‹aw™__Mëad©a
 *
	gmesßge
)

19 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
l‹aw™__mëad©a__des¸ùt‹
);

20  
¥Ÿobuf_c_mesßge_gë_∑cked_size
 ((c⁄° 
PrŸobufCMesßge
*)(
mesßge
));

22 
size_t
 
	gl‹aw™__mëad©a__∑ck


23 (c⁄° 
L‹aw™__Mëad©a
 *
	gmesßge
,

24 
uöt8_t
 *
	gout
)

26 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
l‹aw™__mëad©a__des¸ùt‹
);

27  
¥Ÿobuf_c_mesßge_∑ck
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
out
);

29 
size_t
 
	gl‹aw™__mëad©a__∑ck_to_buf„r


30 (c⁄° 
L‹aw™__Mëad©a
 *
	gmesßge
,

31 
PrŸobufCBuf„r
 *
	gbuf„r
)

33 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
l‹aw™__mëad©a__des¸ùt‹
);

34  
¥Ÿobuf_c_mesßge_∑ck_to_buf„r
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
buf„r
);

36 
L‹aw™__Mëad©a
 *

37 
	gl‹aw™__mëad©a__u≈ack


38 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

39 
size_t
 
	gÀn
,

40 c⁄° 
uöt8_t
 *
	gd©a
)

42  (
	gL‹aw™__Mëad©a
 *)

43 
¥Ÿobuf_c_mesßge_u≈ack
 (&
l‹aw™__mëad©a__des¸ùt‹
,

44 
Æloˇt‹
, 
Àn
, 
d©a
);

46 
	gl‹aw™__mëad©a__‰ì_u≈acked


47 (
L‹aw™__Mëad©a
 *
	gmesßge
,

48 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
)

50 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
l‹aw™__mëad©a__des¸ùt‹
);

51 
¥Ÿobuf_c_mesßge_‰ì_u≈acked
 ((
PrŸobufCMesßge
*)
mesßge
, 
Æloˇt‹
);

53 
	gl‹aw™__tx_c⁄figuøti⁄__öô


54 (
L‹aw™__TxC⁄figuøti⁄
 *
	gmesßge
)

56 
L‹aw™__TxC⁄figuøti⁄
 
	göô_vÆue
 = 
LORAWAN__TX_CONFIGURATION__INIT
;

57 *
	gmesßge
 = 
öô_vÆue
;

59 
size_t
 
	gl‹aw™__tx_c⁄figuøti⁄__gë_∑cked_size


60 (c⁄° 
L‹aw™__TxC⁄figuøti⁄
 *
	gmesßge
)

62 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
l‹aw™__tx_c⁄figuøti⁄__des¸ùt‹
);

63  
¥Ÿobuf_c_mesßge_gë_∑cked_size
 ((c⁄° 
PrŸobufCMesßge
*)(
mesßge
));

65 
size_t
 
	gl‹aw™__tx_c⁄figuøti⁄__∑ck


66 (c⁄° 
L‹aw™__TxC⁄figuøti⁄
 *
	gmesßge
,

67 
uöt8_t
 *
	gout
)

69 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
l‹aw™__tx_c⁄figuøti⁄__des¸ùt‹
);

70  
¥Ÿobuf_c_mesßge_∑ck
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
out
);

72 
size_t
 
	gl‹aw™__tx_c⁄figuøti⁄__∑ck_to_buf„r


73 (c⁄° 
L‹aw™__TxC⁄figuøti⁄
 *
	gmesßge
,

74 
PrŸobufCBuf„r
 *
	gbuf„r
)

76 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
l‹aw™__tx_c⁄figuøti⁄__des¸ùt‹
);

77  
¥Ÿobuf_c_mesßge_∑ck_to_buf„r
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
buf„r
);

79 
L‹aw™__TxC⁄figuøti⁄
 *

80 
	gl‹aw™__tx_c⁄figuøti⁄__u≈ack


81 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

82 
size_t
 
	gÀn
,

83 c⁄° 
uöt8_t
 *
	gd©a
)

85  (
	gL‹aw™__TxC⁄figuøti⁄
 *)

86 
¥Ÿobuf_c_mesßge_u≈ack
 (&
l‹aw™__tx_c⁄figuøti⁄__des¸ùt‹
,

87 
Æloˇt‹
, 
Àn
, 
d©a
);

89 
	gl‹aw™__tx_c⁄figuøti⁄__‰ì_u≈acked


90 (
L‹aw™__TxC⁄figuøti⁄
 *
	gmesßge
,

91 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
)

93 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
l‹aw™__tx_c⁄figuøti⁄__des¸ùt‹
);

94 
¥Ÿobuf_c_mesßge_‰ì_u≈acked
 ((
PrŸobufCMesßge
*)
mesßge
, 
Æloˇt‹
);

96 
	gl‹aw™__a˘iv©i⁄_mëad©a__öô


97 (
L‹aw™__A˘iv©i⁄Mëad©a
 *
	gmesßge
)

99 
L‹aw™__A˘iv©i⁄Mëad©a
 
	göô_vÆue
 = 
LORAWAN__ACTIVATION_METADATA__INIT
;

100 *
	gmesßge
 = 
öô_vÆue
;

102 
size_t
 
	gl‹aw™__a˘iv©i⁄_mëad©a__gë_∑cked_size


103 (c⁄° 
L‹aw™__A˘iv©i⁄Mëad©a
 *
	gmesßge
)

105 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
l‹aw™__a˘iv©i⁄_mëad©a__des¸ùt‹
);

106  
¥Ÿobuf_c_mesßge_gë_∑cked_size
 ((c⁄° 
PrŸobufCMesßge
*)(
mesßge
));

108 
size_t
 
	gl‹aw™__a˘iv©i⁄_mëad©a__∑ck


109 (c⁄° 
L‹aw™__A˘iv©i⁄Mëad©a
 *
	gmesßge
,

110 
uöt8_t
 *
	gout
)

112 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
l‹aw™__a˘iv©i⁄_mëad©a__des¸ùt‹
);

113  
¥Ÿobuf_c_mesßge_∑ck
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
out
);

115 
size_t
 
	gl‹aw™__a˘iv©i⁄_mëad©a__∑ck_to_buf„r


116 (c⁄° 
L‹aw™__A˘iv©i⁄Mëad©a
 *
	gmesßge
,

117 
PrŸobufCBuf„r
 *
	gbuf„r
)

119 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
l‹aw™__a˘iv©i⁄_mëad©a__des¸ùt‹
);

120  
¥Ÿobuf_c_mesßge_∑ck_to_buf„r
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
buf„r
);

122 
L‹aw™__A˘iv©i⁄Mëad©a
 *

123 
	gl‹aw™__a˘iv©i⁄_mëad©a__u≈ack


124 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

125 
size_t
 
	gÀn
,

126 c⁄° 
uöt8_t
 *
	gd©a
)

128  (
	gL‹aw™__A˘iv©i⁄Mëad©a
 *)

129 
¥Ÿobuf_c_mesßge_u≈ack
 (&
l‹aw™__a˘iv©i⁄_mëad©a__des¸ùt‹
,

130 
Æloˇt‹
, 
Àn
, 
d©a
);

132 
	gl‹aw™__a˘iv©i⁄_mëad©a__‰ì_u≈acked


133 (
L‹aw™__A˘iv©i⁄Mëad©a
 *
	gmesßge
,

134 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
)

136 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
l‹aw™__a˘iv©i⁄_mëad©a__des¸ùt‹
);

137 
¥Ÿobuf_c_mesßge_‰ì_u≈acked
 ((
PrŸobufCMesßge
*)
mesßge
, 
Æloˇt‹
);

139 
	gl‹aw™__mesßge__öô


140 (
L‹aw™__Mesßge
 *
	gmesßge
)

142 
L‹aw™__Mesßge
 
	göô_vÆue
 = 
LORAWAN__MESSAGE__INIT
;

143 *
	gmesßge
 = 
öô_vÆue
;

145 
size_t
 
	gl‹aw™__mesßge__gë_∑cked_size


146 (c⁄° 
L‹aw™__Mesßge
 *
	gmesßge
)

148 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
l‹aw™__mesßge__des¸ùt‹
);

149  
¥Ÿobuf_c_mesßge_gë_∑cked_size
 ((c⁄° 
PrŸobufCMesßge
*)(
mesßge
));

151 
size_t
 
	gl‹aw™__mesßge__∑ck


152 (c⁄° 
L‹aw™__Mesßge
 *
	gmesßge
,

153 
uöt8_t
 *
	gout
)

155 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
l‹aw™__mesßge__des¸ùt‹
);

156  
¥Ÿobuf_c_mesßge_∑ck
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
out
);

158 
size_t
 
	gl‹aw™__mesßge__∑ck_to_buf„r


159 (c⁄° 
L‹aw™__Mesßge
 *
	gmesßge
,

160 
PrŸobufCBuf„r
 *
	gbuf„r
)

162 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
l‹aw™__mesßge__des¸ùt‹
);

163  
¥Ÿobuf_c_mesßge_∑ck_to_buf„r
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
buf„r
);

165 
L‹aw™__Mesßge
 *

166 
	gl‹aw™__mesßge__u≈ack


167 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

168 
size_t
 
	gÀn
,

169 c⁄° 
uöt8_t
 *
	gd©a
)

171  (
	gL‹aw™__Mesßge
 *)

172 
¥Ÿobuf_c_mesßge_u≈ack
 (&
l‹aw™__mesßge__des¸ùt‹
,

173 
Æloˇt‹
, 
Àn
, 
d©a
);

175 
	gl‹aw™__mesßge__‰ì_u≈acked


176 (
L‹aw™__Mesßge
 *
	gmesßge
,

177 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
)

179 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
l‹aw™__mesßge__des¸ùt‹
);

180 
¥Ÿobuf_c_mesßge_‰ì_u≈acked
 ((
PrŸobufCMesßge
*)
mesßge
, 
Æloˇt‹
);

182 
	gl‹aw™__mhdr__öô


183 (
L‹aw™__MHDR
 *
	gmesßge
)

185 
L‹aw™__MHDR
 
	göô_vÆue
 = 
LORAWAN__MHDR__INIT
;

186 *
	gmesßge
 = 
öô_vÆue
;

188 
size_t
 
	gl‹aw™__mhdr__gë_∑cked_size


189 (c⁄° 
L‹aw™__MHDR
 *
	gmesßge
)

191 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
l‹aw™__mhdr__des¸ùt‹
);

192  
¥Ÿobuf_c_mesßge_gë_∑cked_size
 ((c⁄° 
PrŸobufCMesßge
*)(
mesßge
));

194 
size_t
 
	gl‹aw™__mhdr__∑ck


195 (c⁄° 
L‹aw™__MHDR
 *
	gmesßge
,

196 
uöt8_t
 *
	gout
)

198 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
l‹aw™__mhdr__des¸ùt‹
);

199  
¥Ÿobuf_c_mesßge_∑ck
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
out
);

201 
size_t
 
	gl‹aw™__mhdr__∑ck_to_buf„r


202 (c⁄° 
L‹aw™__MHDR
 *
	gmesßge
,

203 
PrŸobufCBuf„r
 *
	gbuf„r
)

205 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
l‹aw™__mhdr__des¸ùt‹
);

206  
¥Ÿobuf_c_mesßge_∑ck_to_buf„r
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
buf„r
);

208 
L‹aw™__MHDR
 *

209 
	gl‹aw™__mhdr__u≈ack


210 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

211 
size_t
 
	gÀn
,

212 c⁄° 
uöt8_t
 *
	gd©a
)

214  (
	gL‹aw™__MHDR
 *)

215 
¥Ÿobuf_c_mesßge_u≈ack
 (&
l‹aw™__mhdr__des¸ùt‹
,

216 
Æloˇt‹
, 
Àn
, 
d©a
);

218 
	gl‹aw™__mhdr__‰ì_u≈acked


219 (
L‹aw™__MHDR
 *
	gmesßge
,

220 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
)

222 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
l‹aw™__mhdr__des¸ùt‹
);

223 
¥Ÿobuf_c_mesßge_‰ì_u≈acked
 ((
PrŸobufCMesßge
*)
mesßge
, 
Æloˇt‹
);

225 
	gl‹aw™__ma˝aylﬂd__öô


226 (
L‹aw™__MACPaylﬂd
 *
	gmesßge
)

228 
L‹aw™__MACPaylﬂd
 
	göô_vÆue
 = 
LORAWAN__MACPAYLOAD__INIT
;

229 *
	gmesßge
 = 
öô_vÆue
;

231 
size_t
 
	gl‹aw™__ma˝aylﬂd__gë_∑cked_size


232 (c⁄° 
L‹aw™__MACPaylﬂd
 *
	gmesßge
)

234 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
l‹aw™__ma˝aylﬂd__des¸ùt‹
);

235  
¥Ÿobuf_c_mesßge_gë_∑cked_size
 ((c⁄° 
PrŸobufCMesßge
*)(
mesßge
));

237 
size_t
 
	gl‹aw™__ma˝aylﬂd__∑ck


238 (c⁄° 
L‹aw™__MACPaylﬂd
 *
	gmesßge
,

239 
uöt8_t
 *
	gout
)

241 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
l‹aw™__ma˝aylﬂd__des¸ùt‹
);

242  
¥Ÿobuf_c_mesßge_∑ck
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
out
);

244 
size_t
 
	gl‹aw™__ma˝aylﬂd__∑ck_to_buf„r


245 (c⁄° 
L‹aw™__MACPaylﬂd
 *
	gmesßge
,

246 
PrŸobufCBuf„r
 *
	gbuf„r
)

248 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
l‹aw™__ma˝aylﬂd__des¸ùt‹
);

249  
¥Ÿobuf_c_mesßge_∑ck_to_buf„r
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
buf„r
);

251 
L‹aw™__MACPaylﬂd
 *

252 
	gl‹aw™__ma˝aylﬂd__u≈ack


253 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

254 
size_t
 
	gÀn
,

255 c⁄° 
uöt8_t
 *
	gd©a
)

257  (
	gL‹aw™__MACPaylﬂd
 *)

258 
¥Ÿobuf_c_mesßge_u≈ack
 (&
l‹aw™__ma˝aylﬂd__des¸ùt‹
,

259 
Æloˇt‹
, 
Àn
, 
d©a
);

261 
	gl‹aw™__ma˝aylﬂd__‰ì_u≈acked


262 (
L‹aw™__MACPaylﬂd
 *
	gmesßge
,

263 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
)

265 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
l‹aw™__ma˝aylﬂd__des¸ùt‹
);

266 
¥Ÿobuf_c_mesßge_‰ì_u≈acked
 ((
PrŸobufCMesßge
*)
mesßge
, 
Æloˇt‹
);

268 
	gl‹aw™__fhdr__öô


269 (
L‹aw™__FHDR
 *
	gmesßge
)

271 
L‹aw™__FHDR
 
	göô_vÆue
 = 
LORAWAN__FHDR__INIT
;

272 *
	gmesßge
 = 
öô_vÆue
;

274 
size_t
 
	gl‹aw™__fhdr__gë_∑cked_size


275 (c⁄° 
L‹aw™__FHDR
 *
	gmesßge
)

277 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
l‹aw™__fhdr__des¸ùt‹
);

278  
¥Ÿobuf_c_mesßge_gë_∑cked_size
 ((c⁄° 
PrŸobufCMesßge
*)(
mesßge
));

280 
size_t
 
	gl‹aw™__fhdr__∑ck


281 (c⁄° 
L‹aw™__FHDR
 *
	gmesßge
,

282 
uöt8_t
 *
	gout
)

284 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
l‹aw™__fhdr__des¸ùt‹
);

285  
¥Ÿobuf_c_mesßge_∑ck
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
out
);

287 
size_t
 
	gl‹aw™__fhdr__∑ck_to_buf„r


288 (c⁄° 
L‹aw™__FHDR
 *
	gmesßge
,

289 
PrŸobufCBuf„r
 *
	gbuf„r
)

291 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
l‹aw™__fhdr__des¸ùt‹
);

292  
¥Ÿobuf_c_mesßge_∑ck_to_buf„r
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
buf„r
);

294 
L‹aw™__FHDR
 *

295 
	gl‹aw™__fhdr__u≈ack


296 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

297 
size_t
 
	gÀn
,

298 c⁄° 
uöt8_t
 *
	gd©a
)

300  (
	gL‹aw™__FHDR
 *)

301 
¥Ÿobuf_c_mesßge_u≈ack
 (&
l‹aw™__fhdr__des¸ùt‹
,

302 
Æloˇt‹
, 
Àn
, 
d©a
);

304 
	gl‹aw™__fhdr__‰ì_u≈acked


305 (
L‹aw™__FHDR
 *
	gmesßge
,

306 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
)

308 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
l‹aw™__fhdr__des¸ùt‹
);

309 
¥Ÿobuf_c_mesßge_‰ì_u≈acked
 ((
PrŸobufCMesßge
*)
mesßge
, 
Æloˇt‹
);

311 
	gl‹aw™__f˘æ__öô


312 (
L‹aw™__FCål
 *
	gmesßge
)

314 
L‹aw™__FCål
 
	göô_vÆue
 = 
LORAWAN__FCTRL__INIT
;

315 *
	gmesßge
 = 
öô_vÆue
;

317 
size_t
 
	gl‹aw™__f˘æ__gë_∑cked_size


318 (c⁄° 
L‹aw™__FCål
 *
	gmesßge
)

320 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
l‹aw™__f˘æ__des¸ùt‹
);

321  
¥Ÿobuf_c_mesßge_gë_∑cked_size
 ((c⁄° 
PrŸobufCMesßge
*)(
mesßge
));

323 
size_t
 
	gl‹aw™__f˘æ__∑ck


324 (c⁄° 
L‹aw™__FCål
 *
	gmesßge
,

325 
uöt8_t
 *
	gout
)

327 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
l‹aw™__f˘æ__des¸ùt‹
);

328  
¥Ÿobuf_c_mesßge_∑ck
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
out
);

330 
size_t
 
	gl‹aw™__f˘æ__∑ck_to_buf„r


331 (c⁄° 
L‹aw™__FCål
 *
	gmesßge
,

332 
PrŸobufCBuf„r
 *
	gbuf„r
)

334 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
l‹aw™__f˘æ__des¸ùt‹
);

335  
¥Ÿobuf_c_mesßge_∑ck_to_buf„r
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
buf„r
);

337 
L‹aw™__FCål
 *

338 
	gl‹aw™__f˘æ__u≈ack


339 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

340 
size_t
 
	gÀn
,

341 c⁄° 
uöt8_t
 *
	gd©a
)

343  (
	gL‹aw™__FCål
 *)

344 
¥Ÿobuf_c_mesßge_u≈ack
 (&
l‹aw™__f˘æ__des¸ùt‹
,

345 
Æloˇt‹
, 
Àn
, 
d©a
);

347 
	gl‹aw™__f˘æ__‰ì_u≈acked


348 (
L‹aw™__FCål
 *
	gmesßge
,

349 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
)

351 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
l‹aw™__f˘æ__des¸ùt‹
);

352 
¥Ÿobuf_c_mesßge_‰ì_u≈acked
 ((
PrŸobufCMesßge
*)
mesßge
, 
Æloˇt‹
);

354 
	gl‹aw™__maccomm™d__öô


355 (
L‹aw™__MACComm™d
 *
	gmesßge
)

357 
L‹aw™__MACComm™d
 
	göô_vÆue
 = 
LORAWAN__MACCOMMAND__INIT
;

358 *
	gmesßge
 = 
öô_vÆue
;

360 
size_t
 
	gl‹aw™__maccomm™d__gë_∑cked_size


361 (c⁄° 
L‹aw™__MACComm™d
 *
	gmesßge
)

363 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
l‹aw™__maccomm™d__des¸ùt‹
);

364  
¥Ÿobuf_c_mesßge_gë_∑cked_size
 ((c⁄° 
PrŸobufCMesßge
*)(
mesßge
));

366 
size_t
 
	gl‹aw™__maccomm™d__∑ck


367 (c⁄° 
L‹aw™__MACComm™d
 *
	gmesßge
,

368 
uöt8_t
 *
	gout
)

370 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
l‹aw™__maccomm™d__des¸ùt‹
);

371  
¥Ÿobuf_c_mesßge_∑ck
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
out
);

373 
size_t
 
	gl‹aw™__maccomm™d__∑ck_to_buf„r


374 (c⁄° 
L‹aw™__MACComm™d
 *
	gmesßge
,

375 
PrŸobufCBuf„r
 *
	gbuf„r
)

377 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
l‹aw™__maccomm™d__des¸ùt‹
);

378  
¥Ÿobuf_c_mesßge_∑ck_to_buf„r
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
buf„r
);

380 
L‹aw™__MACComm™d
 *

381 
	gl‹aw™__maccomm™d__u≈ack


382 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

383 
size_t
 
	gÀn
,

384 c⁄° 
uöt8_t
 *
	gd©a
)

386  (
	gL‹aw™__MACComm™d
 *)

387 
¥Ÿobuf_c_mesßge_u≈ack
 (&
l‹aw™__maccomm™d__des¸ùt‹
,

388 
Æloˇt‹
, 
Àn
, 
d©a
);

390 
	gl‹aw™__maccomm™d__‰ì_u≈acked


391 (
L‹aw™__MACComm™d
 *
	gmesßge
,

392 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
)

394 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
l‹aw™__maccomm™d__des¸ùt‹
);

395 
¥Ÿobuf_c_mesßge_‰ì_u≈acked
 ((
PrŸobufCMesßge
*)
mesßge
, 
Æloˇt‹
);

397 
	gl‹aw™__joö_ªque°_∑ylﬂd__öô


398 (
L‹aw™__JoöReque°Paylﬂd
 *
	gmesßge
)

400 
L‹aw™__JoöReque°Paylﬂd
 
	göô_vÆue
 = 
LORAWAN__JOIN_REQUEST_PAYLOAD__INIT
;

401 *
	gmesßge
 = 
öô_vÆue
;

403 
size_t
 
	gl‹aw™__joö_ªque°_∑ylﬂd__gë_∑cked_size


404 (c⁄° 
L‹aw™__JoöReque°Paylﬂd
 *
	gmesßge
)

406 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
l‹aw™__joö_ªque°_∑ylﬂd__des¸ùt‹
);

407  
¥Ÿobuf_c_mesßge_gë_∑cked_size
 ((c⁄° 
PrŸobufCMesßge
*)(
mesßge
));

409 
size_t
 
	gl‹aw™__joö_ªque°_∑ylﬂd__∑ck


410 (c⁄° 
L‹aw™__JoöReque°Paylﬂd
 *
	gmesßge
,

411 
uöt8_t
 *
	gout
)

413 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
l‹aw™__joö_ªque°_∑ylﬂd__des¸ùt‹
);

414  
¥Ÿobuf_c_mesßge_∑ck
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
out
);

416 
size_t
 
	gl‹aw™__joö_ªque°_∑ylﬂd__∑ck_to_buf„r


417 (c⁄° 
L‹aw™__JoöReque°Paylﬂd
 *
	gmesßge
,

418 
PrŸobufCBuf„r
 *
	gbuf„r
)

420 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
l‹aw™__joö_ªque°_∑ylﬂd__des¸ùt‹
);

421  
¥Ÿobuf_c_mesßge_∑ck_to_buf„r
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
buf„r
);

423 
L‹aw™__JoöReque°Paylﬂd
 *

424 
	gl‹aw™__joö_ªque°_∑ylﬂd__u≈ack


425 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

426 
size_t
 
	gÀn
,

427 c⁄° 
uöt8_t
 *
	gd©a
)

429  (
	gL‹aw™__JoöReque°Paylﬂd
 *)

430 
¥Ÿobuf_c_mesßge_u≈ack
 (&
l‹aw™__joö_ªque°_∑ylﬂd__des¸ùt‹
,

431 
Æloˇt‹
, 
Àn
, 
d©a
);

433 
	gl‹aw™__joö_ªque°_∑ylﬂd__‰ì_u≈acked


434 (
L‹aw™__JoöReque°Paylﬂd
 *
	gmesßge
,

435 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
)

437 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
l‹aw™__joö_ªque°_∑ylﬂd__des¸ùt‹
);

438 
¥Ÿobuf_c_mesßge_‰ì_u≈acked
 ((
PrŸobufCMesßge
*)
mesßge
, 
Æloˇt‹
);

440 
	gl‹aw™__joö_ac˚±_∑ylﬂd__öô


441 (
L‹aw™__JoöAc˚±Paylﬂd
 *
	gmesßge
)

443 
L‹aw™__JoöAc˚±Paylﬂd
 
	göô_vÆue
 = 
LORAWAN__JOIN_ACCEPT_PAYLOAD__INIT
;

444 *
	gmesßge
 = 
öô_vÆue
;

446 
size_t
 
	gl‹aw™__joö_ac˚±_∑ylﬂd__gë_∑cked_size


447 (c⁄° 
L‹aw™__JoöAc˚±Paylﬂd
 *
	gmesßge
)

449 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
l‹aw™__joö_ac˚±_∑ylﬂd__des¸ùt‹
);

450  
¥Ÿobuf_c_mesßge_gë_∑cked_size
 ((c⁄° 
PrŸobufCMesßge
*)(
mesßge
));

452 
size_t
 
	gl‹aw™__joö_ac˚±_∑ylﬂd__∑ck


453 (c⁄° 
L‹aw™__JoöAc˚±Paylﬂd
 *
	gmesßge
,

454 
uöt8_t
 *
	gout
)

456 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
l‹aw™__joö_ac˚±_∑ylﬂd__des¸ùt‹
);

457  
¥Ÿobuf_c_mesßge_∑ck
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
out
);

459 
size_t
 
	gl‹aw™__joö_ac˚±_∑ylﬂd__∑ck_to_buf„r


460 (c⁄° 
L‹aw™__JoöAc˚±Paylﬂd
 *
	gmesßge
,

461 
PrŸobufCBuf„r
 *
	gbuf„r
)

463 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
l‹aw™__joö_ac˚±_∑ylﬂd__des¸ùt‹
);

464  
¥Ÿobuf_c_mesßge_∑ck_to_buf„r
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
buf„r
);

466 
L‹aw™__JoöAc˚±Paylﬂd
 *

467 
	gl‹aw™__joö_ac˚±_∑ylﬂd__u≈ack


468 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

469 
size_t
 
	gÀn
,

470 c⁄° 
uöt8_t
 *
	gd©a
)

472  (
	gL‹aw™__JoöAc˚±Paylﬂd
 *)

473 
¥Ÿobuf_c_mesßge_u≈ack
 (&
l‹aw™__joö_ac˚±_∑ylﬂd__des¸ùt‹
,

474 
Æloˇt‹
, 
Àn
, 
d©a
);

476 
	gl‹aw™__joö_ac˚±_∑ylﬂd__‰ì_u≈acked


477 (
L‹aw™__JoöAc˚±Paylﬂd
 *
	gmesßge
,

478 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
)

480 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
l‹aw™__joö_ac˚±_∑ylﬂd__des¸ùt‹
);

481 
¥Ÿobuf_c_mesßge_‰ì_u≈acked
 ((
PrŸobufCMesßge
*)
mesßge
, 
Æloˇt‹
);

483 
	gl‹aw™__dl£âögs__öô


484 (
L‹aw™__DLSëtögs
 *
	gmesßge
)

486 
L‹aw™__DLSëtögs
 
	göô_vÆue
 = 
LORAWAN__DLSETTINGS__INIT
;

487 *
	gmesßge
 = 
öô_vÆue
;

489 
size_t
 
	gl‹aw™__dl£âögs__gë_∑cked_size


490 (c⁄° 
L‹aw™__DLSëtögs
 *
	gmesßge
)

492 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
l‹aw™__dl£âögs__des¸ùt‹
);

493  
¥Ÿobuf_c_mesßge_gë_∑cked_size
 ((c⁄° 
PrŸobufCMesßge
*)(
mesßge
));

495 
size_t
 
	gl‹aw™__dl£âögs__∑ck


496 (c⁄° 
L‹aw™__DLSëtögs
 *
	gmesßge
,

497 
uöt8_t
 *
	gout
)

499 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
l‹aw™__dl£âögs__des¸ùt‹
);

500  
¥Ÿobuf_c_mesßge_∑ck
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
out
);

502 
size_t
 
	gl‹aw™__dl£âögs__∑ck_to_buf„r


503 (c⁄° 
L‹aw™__DLSëtögs
 *
	gmesßge
,

504 
PrŸobufCBuf„r
 *
	gbuf„r
)

506 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
l‹aw™__dl£âögs__des¸ùt‹
);

507  
¥Ÿobuf_c_mesßge_∑ck_to_buf„r
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
buf„r
);

509 
L‹aw™__DLSëtögs
 *

510 
	gl‹aw™__dl£âögs__u≈ack


511 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

512 
size_t
 
	gÀn
,

513 c⁄° 
uöt8_t
 *
	gd©a
)

515  (
	gL‹aw™__DLSëtögs
 *)

516 
¥Ÿobuf_c_mesßge_u≈ack
 (&
l‹aw™__dl£âögs__des¸ùt‹
,

517 
Æloˇt‹
, 
Àn
, 
d©a
);

519 
	gl‹aw™__dl£âögs__‰ì_u≈acked


520 (
L‹aw™__DLSëtögs
 *
	gmesßge
,

521 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
)

523 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
l‹aw™__dl£âögs__des¸ùt‹
);

524 
¥Ÿobuf_c_mesßge_‰ì_u≈acked
 ((
PrŸobufCMesßge
*)
mesßge
, 
Æloˇt‹
);

526 
	gl‹aw™__cÊi°__öô


527 (
L‹aw™__CFLi°
 *
	gmesßge
)

529 
L‹aw™__CFLi°
 
	göô_vÆue
 = 
LORAWAN__CFLIST__INIT
;

530 *
	gmesßge
 = 
öô_vÆue
;

532 
size_t
 
	gl‹aw™__cÊi°__gë_∑cked_size


533 (c⁄° 
L‹aw™__CFLi°
 *
	gmesßge
)

535 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
l‹aw™__cÊi°__des¸ùt‹
);

536  
¥Ÿobuf_c_mesßge_gë_∑cked_size
 ((c⁄° 
PrŸobufCMesßge
*)(
mesßge
));

538 
size_t
 
	gl‹aw™__cÊi°__∑ck


539 (c⁄° 
L‹aw™__CFLi°
 *
	gmesßge
,

540 
uöt8_t
 *
	gout
)

542 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
l‹aw™__cÊi°__des¸ùt‹
);

543  
¥Ÿobuf_c_mesßge_∑ck
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
out
);

545 
size_t
 
	gl‹aw™__cÊi°__∑ck_to_buf„r


546 (c⁄° 
L‹aw™__CFLi°
 *
	gmesßge
,

547 
PrŸobufCBuf„r
 *
	gbuf„r
)

549 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
l‹aw™__cÊi°__des¸ùt‹
);

550  
¥Ÿobuf_c_mesßge_∑ck_to_buf„r
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
buf„r
);

552 
L‹aw™__CFLi°
 *

553 
	gl‹aw™__cÊi°__u≈ack


554 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

555 
size_t
 
	gÀn
,

556 c⁄° 
uöt8_t
 *
	gd©a
)

558  (
	gL‹aw™__CFLi°
 *)

559 
¥Ÿobuf_c_mesßge_u≈ack
 (&
l‹aw™__cÊi°__des¸ùt‹
,

560 
Æloˇt‹
, 
Àn
, 
d©a
);

562 
	gl‹aw™__cÊi°__‰ì_u≈acked


563 (
L‹aw™__CFLi°
 *
	gmesßge
,

564 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
)

566 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
l‹aw™__cÊi°__des¸ùt‹
);

567 
¥Ÿobuf_c_mesßge_‰ì_u≈acked
 ((
PrŸobufCMesßge
*)
mesßge
, 
Æloˇt‹
);

569 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	gl‹aw™__mëad©a__fõld_des¸ùt‹s
[6] =

574 
PROTOBUF_C_LABEL_OPTIONAL
,

575 
PROTOBUF_C_TYPE_ENUM
,

576 
off£tof
(
L‹aw™__Mëad©a
, 
has_moduœti⁄
),

577 
off£tof
(
L‹aw™__Mëad©a
, 
moduœti⁄
),

578 &
l‹aw™__moduœti⁄__des¸ùt‹
,

579 
NULL
,

581 0,
NULL
,NULL

586 
PROTOBUF_C_LABEL_OPTIONAL
,

587 
PROTOBUF_C_TYPE_STRING
,

589 
off£tof
(
L‹aw™__Mëad©a
, 
d©a_øã
),

590 
NULL
,

591 
NULL
,

593 0,
NULL
,NULL

598 
PROTOBUF_C_LABEL_OPTIONAL
,

599 
PROTOBUF_C_TYPE_UINT32
,

600 
off£tof
(
L‹aw™__Mëad©a
, 
has_bô_øã
),

601 
off£tof
(
L‹aw™__Mëad©a
, 
bô_øã
),

602 
NULL
,

603 
NULL
,

605 0,
NULL
,NULL

610 
PROTOBUF_C_LABEL_OPTIONAL
,

611 
PROTOBUF_C_TYPE_STRING
,

613 
off£tof
(
L‹aw™__Mëad©a
, 
codög_øã
),

614 
NULL
,

615 
NULL
,

617 0,
NULL
,NULL

622 
PROTOBUF_C_LABEL_OPTIONAL
,

623 
PROTOBUF_C_TYPE_UINT32
,

624 
off£tof
(
L‹aw™__Mëad©a
, 
has_f_˙t
),

625 
off£tof
(
L‹aw™__Mëad©a
, 
f_˙t
),

626 
NULL
,

627 
NULL
,

629 0,
NULL
,NULL

634 
PROTOBUF_C_LABEL_OPTIONAL
,

635 
PROTOBUF_C_TYPE_ENUM
,

636 
off£tof
(
L‹aw™__Mëad©a
, 
has_‰equícy_∂™
),

637 
off£tof
(
L‹aw™__Mëad©a
, 
‰equícy_∂™
),

638 &
l‹aw™__‰equícy_∂™__des¸ùt‹
,

639 
NULL
,

641 0,
NULL
,NULL

644 c⁄° 
	gl‹aw™__mëad©a__fõld_ödi˚s_by_«me
[] = {

652 c⁄° 
PrŸobufCI¡R™ge
 
	gl‹aw™__mëad©a__numbî_ønges
[1 + 1] =

657 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	gl‹aw™__mëad©a__des¸ùt‹
 =

659 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

664 (
L‹aw™__Mëad©a
),

666 
l‹aw™__mëad©a__fõld_des¸ùt‹s
,

667 
l‹aw™__mëad©a__fõld_ödi˚s_by_«me
,

668 1, 
l‹aw™__mëad©a__numbî_ønges
,

669 (
PrŸobufCMesßgeInô
Ë
l‹aw™__mëad©a__öô
,

670 
NULL
,NULL,NULL

672 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	gl‹aw™__tx_c⁄figuøti⁄__fõld_des¸ùt‹s
[5] =

677 
PROTOBUF_C_LABEL_OPTIONAL
,

678 
PROTOBUF_C_TYPE_ENUM
,

679 
off£tof
(
L‹aw™__TxC⁄figuøti⁄
, 
has_moduœti⁄
),

680 
off£tof
(
L‹aw™__TxC⁄figuøti⁄
, 
moduœti⁄
),

681 &
l‹aw™__moduœti⁄__des¸ùt‹
,

682 
NULL
,

684 0,
NULL
,NULL

689 
PROTOBUF_C_LABEL_OPTIONAL
,

690 
PROTOBUF_C_TYPE_STRING
,

692 
off£tof
(
L‹aw™__TxC⁄figuøti⁄
, 
d©a_øã
),

693 
NULL
,

694 
NULL
,

696 0,
NULL
,NULL

701 
PROTOBUF_C_LABEL_OPTIONAL
,

702 
PROTOBUF_C_TYPE_UINT32
,

703 
off£tof
(
L‹aw™__TxC⁄figuøti⁄
, 
has_bô_øã
),

704 
off£tof
(
L‹aw™__TxC⁄figuøti⁄
, 
bô_øã
),

705 
NULL
,

706 
NULL
,

708 0,
NULL
,NULL

713 
PROTOBUF_C_LABEL_OPTIONAL
,

714 
PROTOBUF_C_TYPE_STRING
,

716 
off£tof
(
L‹aw™__TxC⁄figuøti⁄
, 
codög_øã
),

717 
NULL
,

718 
NULL
,

720 0,
NULL
,NULL

725 
PROTOBUF_C_LABEL_OPTIONAL
,

726 
PROTOBUF_C_TYPE_UINT32
,

727 
off£tof
(
L‹aw™__TxC⁄figuøti⁄
, 
has_f_˙t
),

728 
off£tof
(
L‹aw™__TxC⁄figuøti⁄
, 
f_˙t
),

729 
NULL
,

730 
NULL
,

732 0,
NULL
,NULL

735 c⁄° 
	gl‹aw™__tx_c⁄figuøti⁄__fõld_ödi˚s_by_«me
[] = {

742 c⁄° 
PrŸobufCI¡R™ge
 
	gl‹aw™__tx_c⁄figuøti⁄__numbî_ønges
[1 + 1] =

747 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	gl‹aw™__tx_c⁄figuøti⁄__des¸ùt‹
 =

749 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

754 (
L‹aw™__TxC⁄figuøti⁄
),

756 
l‹aw™__tx_c⁄figuøti⁄__fõld_des¸ùt‹s
,

757 
l‹aw™__tx_c⁄figuøti⁄__fõld_ödi˚s_by_«me
,

758 1, 
l‹aw™__tx_c⁄figuøti⁄__numbî_ønges
,

759 (
PrŸobufCMesßgeInô
Ë
l‹aw™__tx_c⁄figuøti⁄__öô
,

760 
NULL
,NULL,NULL

762 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	gl‹aw™__a˘iv©i⁄_mëad©a__fõld_des¸ùt‹s
[9] =

767 
PROTOBUF_C_LABEL_OPTIONAL
,

768 
PROTOBUF_C_TYPE_BYTES
,

769 
off£tof
(
L‹aw™__A˘iv©i⁄Mëad©a
, 
has_≠p_eui
),

770 
off£tof
(
L‹aw™__A˘iv©i⁄Mëad©a
, 
≠p_eui
),

771 
NULL
,

772 
NULL
,

774 0,
NULL
,NULL

779 
PROTOBUF_C_LABEL_OPTIONAL
,

780 
PROTOBUF_C_TYPE_BYTES
,

781 
off£tof
(
L‹aw™__A˘iv©i⁄Mëad©a
, 
has_dev_eui
),

782 
off£tof
(
L‹aw™__A˘iv©i⁄Mëad©a
, 
dev_eui
),

783 
NULL
,

784 
NULL
,

786 0,
NULL
,NULL

791 
PROTOBUF_C_LABEL_OPTIONAL
,

792 
PROTOBUF_C_TYPE_BYTES
,

793 
off£tof
(
L‹aw™__A˘iv©i⁄Mëad©a
, 
has_dev_addr
),

794 
off£tof
(
L‹aw™__A˘iv©i⁄Mëad©a
, 
dev_addr
),

795 
NULL
,

796 
NULL
,

798 0,
NULL
,NULL

803 
PROTOBUF_C_LABEL_OPTIONAL
,

804 
PROTOBUF_C_TYPE_BYTES
,

805 
off£tof
(
L‹aw™__A˘iv©i⁄Mëad©a
, 
has_nwk_s_key
),

806 
off£tof
(
L‹aw™__A˘iv©i⁄Mëad©a
, 
nwk_s_key
),

807 
NULL
,

808 
NULL
,

810 0,
NULL
,NULL

815 
PROTOBUF_C_LABEL_OPTIONAL
,

816 
PROTOBUF_C_TYPE_UINT32
,

817 
off£tof
(
L‹aw™__A˘iv©i⁄Mëad©a
, 
has_rx1_dr_off£t
),

818 
off£tof
(
L‹aw™__A˘iv©i⁄Mëad©a
, 
rx1_dr_off£t
),

819 
NULL
,

820 
NULL
,

822 0,
NULL
,NULL

827 
PROTOBUF_C_LABEL_OPTIONAL
,

828 
PROTOBUF_C_TYPE_UINT32
,

829 
off£tof
(
L‹aw™__A˘iv©i⁄Mëad©a
, 
has_rx2_dr
),

830 
off£tof
(
L‹aw™__A˘iv©i⁄Mëad©a
, 
rx2_dr
),

831 
NULL
,

832 
NULL
,

834 0,
NULL
,NULL

839 
PROTOBUF_C_LABEL_OPTIONAL
,

840 
PROTOBUF_C_TYPE_UINT32
,

841 
off£tof
(
L‹aw™__A˘iv©i⁄Mëad©a
, 
has_rx_dñay
),

842 
off£tof
(
L‹aw™__A˘iv©i⁄Mëad©a
, 
rx_dñay
),

843 
NULL
,

844 
NULL
,

846 0,
NULL
,NULL

851 
PROTOBUF_C_LABEL_OPTIONAL
,

852 
PROTOBUF_C_TYPE_MESSAGE
,

854 
off£tof
(
L‹aw™__A˘iv©i⁄Mëad©a
, 
cf_li°
),

855 &
l‹aw™__cÊi°__des¸ùt‹
,

856 
NULL
,

858 0,
NULL
,NULL

863 
PROTOBUF_C_LABEL_OPTIONAL
,

864 
PROTOBUF_C_TYPE_ENUM
,

865 
off£tof
(
L‹aw™__A˘iv©i⁄Mëad©a
, 
has_‰equícy_∂™
),

866 
off£tof
(
L‹aw™__A˘iv©i⁄Mëad©a
, 
‰equícy_∂™
),

867 &
l‹aw™__‰equícy_∂™__des¸ùt‹
,

868 
NULL
,

870 0,
NULL
,NULL

873 c⁄° 
	gl‹aw™__a˘iv©i⁄_mëad©a__fõld_ödi˚s_by_«me
[] = {

884 c⁄° 
PrŸobufCI¡R™ge
 
	gl‹aw™__a˘iv©i⁄_mëad©a__numbî_ønges
[2 + 1] =

890 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	gl‹aw™__a˘iv©i⁄_mëad©a__des¸ùt‹
 =

892 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

897 (
L‹aw™__A˘iv©i⁄Mëad©a
),

899 
l‹aw™__a˘iv©i⁄_mëad©a__fõld_des¸ùt‹s
,

900 
l‹aw™__a˘iv©i⁄_mëad©a__fõld_ödi˚s_by_«me
,

901 2, 
l‹aw™__a˘iv©i⁄_mëad©a__numbî_ønges
,

902 (
PrŸobufCMesßgeInô
Ë
l‹aw™__a˘iv©i⁄_mëad©a__öô
,

903 
NULL
,NULL,NULL

905 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	gl‹aw™__mesßge__fõld_des¸ùt‹s
[5] =

910 
PROTOBUF_C_LABEL_OPTIONAL
,

911 
PROTOBUF_C_TYPE_MESSAGE
,

913 
off£tof
(
L‹aw™__Mesßge
, 
m_hdr
),

914 &
l‹aw™__mhdr__des¸ùt‹
,

915 
NULL
,

917 0,
NULL
,NULL

922 
PROTOBUF_C_LABEL_OPTIONAL
,

923 
PROTOBUF_C_TYPE_BYTES
,

924 
off£tof
(
L‹aw™__Mesßge
, 
has_mic
),

925 
off£tof
(
L‹aw™__Mesßge
, 
mic
),

926 
NULL
,

927 
NULL
,

929 0,
NULL
,NULL

934 
PROTOBUF_C_LABEL_OPTIONAL
,

935 
PROTOBUF_C_TYPE_MESSAGE
,

936 
off£tof
(
L‹aw™__Mesßge
, 
∑ylﬂd_ˇ£
),

937 
off£tof
(
L‹aw™__Mesßge
, 
mac_∑ylﬂd
),

938 &
l‹aw™__ma˝aylﬂd__des¸ùt‹
,

939 
NULL
,

940 0 | 
PROTOBUF_C_FIELD_FLAG_ONEOF
,

941 0,
NULL
,NULL

946 
PROTOBUF_C_LABEL_OPTIONAL
,

947 
PROTOBUF_C_TYPE_MESSAGE
,

948 
off£tof
(
L‹aw™__Mesßge
, 
∑ylﬂd_ˇ£
),

949 
off£tof
(
L‹aw™__Mesßge
, 
joö_ªque°_∑ylﬂd
),

950 &
l‹aw™__joö_ªque°_∑ylﬂd__des¸ùt‹
,

951 
NULL
,

952 0 | 
PROTOBUF_C_FIELD_FLAG_ONEOF
,

953 0,
NULL
,NULL

958 
PROTOBUF_C_LABEL_OPTIONAL
,

959 
PROTOBUF_C_TYPE_MESSAGE
,

960 
off£tof
(
L‹aw™__Mesßge
, 
∑ylﬂd_ˇ£
),

961 
off£tof
(
L‹aw™__Mesßge
, 
joö_ac˚±_∑ylﬂd
),

962 &
l‹aw™__joö_ac˚±_∑ylﬂd__des¸ùt‹
,

963 
NULL
,

964 0 | 
PROTOBUF_C_FIELD_FLAG_ONEOF
,

965 0,
NULL
,NULL

968 c⁄° 
	gl‹aw™__mesßge__fõld_ödi˚s_by_«me
[] = {

975 c⁄° 
PrŸobufCI¡R™ge
 
	gl‹aw™__mesßge__numbî_ønges
[1 + 1] =

980 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	gl‹aw™__mesßge__des¸ùt‹
 =

982 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

987 (
L‹aw™__Mesßge
),

989 
l‹aw™__mesßge__fõld_des¸ùt‹s
,

990 
l‹aw™__mesßge__fõld_ödi˚s_by_«me
,

991 1, 
l‹aw™__mesßge__numbî_ønges
,

992 (
PrŸobufCMesßgeInô
Ë
l‹aw™__mesßge__öô
,

993 
NULL
,NULL,NULL

995 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	gl‹aw™__mhdr__fõld_des¸ùt‹s
[2] =

1000 
PROTOBUF_C_LABEL_OPTIONAL
,

1001 
PROTOBUF_C_TYPE_ENUM
,

1002 
off£tof
(
L‹aw™__MHDR
, 
has_m_ty≥
),

1003 
off£tof
(
L‹aw™__MHDR
, 
m_ty≥
),

1004 &
l‹aw™__mty≥__des¸ùt‹
,

1005 
NULL
,

1007 0,
NULL
,NULL

1012 
PROTOBUF_C_LABEL_OPTIONAL
,

1013 
PROTOBUF_C_TYPE_ENUM
,

1014 
off£tof
(
L‹aw™__MHDR
, 
has_maj‹
),

1015 
off£tof
(
L‹aw™__MHDR
, 
maj‹
),

1016 &
l‹aw™__maj‹__des¸ùt‹
,

1017 
NULL
,

1019 0,
NULL
,NULL

1022 c⁄° 
	gl‹aw™__mhdr__fõld_ödi˚s_by_«me
[] = {

1026 c⁄° 
PrŸobufCI¡R™ge
 
	gl‹aw™__mhdr__numbî_ønges
[1 + 1] =

1031 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	gl‹aw™__mhdr__des¸ùt‹
 =

1033 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

1038 (
L‹aw™__MHDR
),

1040 
l‹aw™__mhdr__fõld_des¸ùt‹s
,

1041 
l‹aw™__mhdr__fõld_ödi˚s_by_«me
,

1042 1, 
l‹aw™__mhdr__numbî_ønges
,

1043 (
PrŸobufCMesßgeInô
Ë
l‹aw™__mhdr__öô
,

1044 
NULL
,NULL,NULL

1046 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	gl‹aw™__ma˝aylﬂd__fõld_des¸ùt‹s
[3] =

1051 
PROTOBUF_C_LABEL_OPTIONAL
,

1052 
PROTOBUF_C_TYPE_MESSAGE
,

1054 
off£tof
(
L‹aw™__MACPaylﬂd
, 
f_hdr
),

1055 &
l‹aw™__fhdr__des¸ùt‹
,

1056 
NULL
,

1058 0,
NULL
,NULL

1063 
PROTOBUF_C_LABEL_OPTIONAL
,

1064 
PROTOBUF_C_TYPE_INT32
,

1065 
off£tof
(
L‹aw™__MACPaylﬂd
, 
has_f_p‹t
),

1066 
off£tof
(
L‹aw™__MACPaylﬂd
, 
f_p‹t
),

1067 
NULL
,

1068 
NULL
,

1070 0,
NULL
,NULL

1075 
PROTOBUF_C_LABEL_OPTIONAL
,

1076 
PROTOBUF_C_TYPE_BYTES
,

1077 
off£tof
(
L‹aw™__MACPaylﬂd
, 
has_‰m_∑ylﬂd
),

1078 
off£tof
(
L‹aw™__MACPaylﬂd
, 
‰m_∑ylﬂd
),

1079 
NULL
,

1080 
NULL
,

1082 0,
NULL
,NULL

1085 c⁄° 
	gl‹aw™__ma˝aylﬂd__fõld_ödi˚s_by_«me
[] = {

1090 c⁄° 
PrŸobufCI¡R™ge
 
	gl‹aw™__ma˝aylﬂd__numbî_ønges
[1 + 1] =

1095 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	gl‹aw™__ma˝aylﬂd__des¸ùt‹
 =

1097 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

1102 (
L‹aw™__MACPaylﬂd
),

1104 
l‹aw™__ma˝aylﬂd__fõld_des¸ùt‹s
,

1105 
l‹aw™__ma˝aylﬂd__fõld_ödi˚s_by_«me
,

1106 1, 
l‹aw™__ma˝aylﬂd__numbî_ønges
,

1107 (
PrŸobufCMesßgeInô
Ë
l‹aw™__ma˝aylﬂd__öô
,

1108 
NULL
,NULL,NULL

1110 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	gl‹aw™__fhdr__fõld_des¸ùt‹s
[4] =

1115 
PROTOBUF_C_LABEL_OPTIONAL
,

1116 
PROTOBUF_C_TYPE_BYTES
,

1117 
off£tof
(
L‹aw™__FHDR
, 
has_dev_addr
),

1118 
off£tof
(
L‹aw™__FHDR
, 
dev_addr
),

1119 
NULL
,

1120 
NULL
,

1122 0,
NULL
,NULL

1127 
PROTOBUF_C_LABEL_OPTIONAL
,

1128 
PROTOBUF_C_TYPE_MESSAGE
,

1130 
off£tof
(
L‹aw™__FHDR
, 
f_˘æ
),

1131 &
l‹aw™__f˘æ__des¸ùt‹
,

1132 
NULL
,

1134 0,
NULL
,NULL

1139 
PROTOBUF_C_LABEL_OPTIONAL
,

1140 
PROTOBUF_C_TYPE_UINT32
,

1141 
off£tof
(
L‹aw™__FHDR
, 
has_f_˙t
),

1142 
off£tof
(
L‹aw™__FHDR
, 
f_˙t
),

1143 
NULL
,

1144 
NULL
,

1146 0,
NULL
,NULL

1151 
PROTOBUF_C_LABEL_REPEATED
,

1152 
PROTOBUF_C_TYPE_MESSAGE
,

1153 
off£tof
(
L‹aw™__FHDR
, 
n_f_›ts
),

1154 
off£tof
(
L‹aw™__FHDR
, 
f_›ts
),

1155 &
l‹aw™__maccomm™d__des¸ùt‹
,

1156 
NULL
,

1158 0,
NULL
,NULL

1161 c⁄° 
	gl‹aw™__fhdr__fõld_ödi˚s_by_«me
[] = {

1167 c⁄° 
PrŸobufCI¡R™ge
 
	gl‹aw™__fhdr__numbî_ønges
[1 + 1] =

1172 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	gl‹aw™__fhdr__des¸ùt‹
 =

1174 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

1179 (
L‹aw™__FHDR
),

1181 
l‹aw™__fhdr__fõld_des¸ùt‹s
,

1182 
l‹aw™__fhdr__fõld_ödi˚s_by_«me
,

1183 1, 
l‹aw™__fhdr__numbî_ønges
,

1184 (
PrŸobufCMesßgeInô
Ë
l‹aw™__fhdr__öô
,

1185 
NULL
,NULL,NULL

1187 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	gl‹aw™__f˘æ__fõld_des¸ùt‹s
[4] =

1192 
PROTOBUF_C_LABEL_OPTIONAL
,

1193 
PROTOBUF_C_TYPE_BOOL
,

1194 
off£tof
(
L‹aw™__FCål
, 
has_adr
),

1195 
off£tof
(
L‹aw™__FCål
, 
adr
),

1196 
NULL
,

1197 
NULL
,

1199 0,
NULL
,NULL

1204 
PROTOBUF_C_LABEL_OPTIONAL
,

1205 
PROTOBUF_C_TYPE_BOOL
,

1206 
off£tof
(
L‹aw™__FCål
, 
has_adr_ack_ªq
),

1207 
off£tof
(
L‹aw™__FCål
, 
adr_ack_ªq
),

1208 
NULL
,

1209 
NULL
,

1211 0,
NULL
,NULL

1216 
PROTOBUF_C_LABEL_OPTIONAL
,

1217 
PROTOBUF_C_TYPE_BOOL
,

1218 
off£tof
(
L‹aw™__FCål
, 
has_ack
),

1219 
off£tof
(
L‹aw™__FCål
, 
ack
),

1220 
NULL
,

1221 
NULL
,

1223 0,
NULL
,NULL

1228 
PROTOBUF_C_LABEL_OPTIONAL
,

1229 
PROTOBUF_C_TYPE_BOOL
,

1230 
off£tof
(
L‹aw™__FCål
, 
has_f_≥ndög
),

1231 
off£tof
(
L‹aw™__FCål
, 
f_≥ndög
),

1232 
NULL
,

1233 
NULL
,

1235 0,
NULL
,NULL

1238 c⁄° 
	gl‹aw™__f˘æ__fõld_ödi˚s_by_«me
[] = {

1244 c⁄° 
PrŸobufCI¡R™ge
 
	gl‹aw™__f˘æ__numbî_ønges
[1 + 1] =

1249 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	gl‹aw™__f˘æ__des¸ùt‹
 =

1251 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

1256 (
L‹aw™__FCål
),

1258 
l‹aw™__f˘æ__fõld_des¸ùt‹s
,

1259 
l‹aw™__f˘æ__fõld_ödi˚s_by_«me
,

1260 1, 
l‹aw™__f˘æ__numbî_ønges
,

1261 (
PrŸobufCMesßgeInô
Ë
l‹aw™__f˘æ__öô
,

1262 
NULL
,NULL,NULL

1264 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	gl‹aw™__maccomm™d__fõld_des¸ùt‹s
[2] =

1269 
PROTOBUF_C_LABEL_OPTIONAL
,

1270 
PROTOBUF_C_TYPE_UINT32
,

1271 
off£tof
(
L‹aw™__MACComm™d
, 
has_cid
),

1272 
off£tof
(
L‹aw™__MACComm™d
, 
cid
),

1273 
NULL
,

1274 
NULL
,

1276 0,
NULL
,NULL

1281 
PROTOBUF_C_LABEL_OPTIONAL
,

1282 
PROTOBUF_C_TYPE_BYTES
,

1283 
off£tof
(
L‹aw™__MACComm™d
, 
has_∑ylﬂd
),

1284 
off£tof
(
L‹aw™__MACComm™d
, 
∑ylﬂd
),

1285 
NULL
,

1286 
NULL
,

1288 0,
NULL
,NULL

1291 c⁄° 
	gl‹aw™__maccomm™d__fõld_ödi˚s_by_«me
[] = {

1295 c⁄° 
PrŸobufCI¡R™ge
 
	gl‹aw™__maccomm™d__numbî_ønges
[1 + 1] =

1300 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	gl‹aw™__maccomm™d__des¸ùt‹
 =

1302 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

1307 (
L‹aw™__MACComm™d
),

1309 
l‹aw™__maccomm™d__fõld_des¸ùt‹s
,

1310 
l‹aw™__maccomm™d__fõld_ödi˚s_by_«me
,

1311 1, 
l‹aw™__maccomm™d__numbî_ønges
,

1312 (
PrŸobufCMesßgeInô
Ë
l‹aw™__maccomm™d__öô
,

1313 
NULL
,NULL,NULL

1315 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	gl‹aw™__joö_ªque°_∑ylﬂd__fõld_des¸ùt‹s
[3] =

1320 
PROTOBUF_C_LABEL_OPTIONAL
,

1321 
PROTOBUF_C_TYPE_BYTES
,

1322 
off£tof
(
L‹aw™__JoöReque°Paylﬂd
, 
has_≠p_eui
),

1323 
off£tof
(
L‹aw™__JoöReque°Paylﬂd
, 
≠p_eui
),

1324 
NULL
,

1325 
NULL
,

1327 0,
NULL
,NULL

1332 
PROTOBUF_C_LABEL_OPTIONAL
,

1333 
PROTOBUF_C_TYPE_BYTES
,

1334 
off£tof
(
L‹aw™__JoöReque°Paylﬂd
, 
has_dev_eui
),

1335 
off£tof
(
L‹aw™__JoöReque°Paylﬂd
, 
dev_eui
),

1336 
NULL
,

1337 
NULL
,

1339 0,
NULL
,NULL

1344 
PROTOBUF_C_LABEL_OPTIONAL
,

1345 
PROTOBUF_C_TYPE_BYTES
,

1346 
off£tof
(
L‹aw™__JoöReque°Paylﬂd
, 
has_dev_n⁄˚
),

1347 
off£tof
(
L‹aw™__JoöReque°Paylﬂd
, 
dev_n⁄˚
),

1348 
NULL
,

1349 
NULL
,

1351 0,
NULL
,NULL

1354 c⁄° 
	gl‹aw™__joö_ªque°_∑ylﬂd__fõld_ödi˚s_by_«me
[] = {

1359 c⁄° 
PrŸobufCI¡R™ge
 
	gl‹aw™__joö_ªque°_∑ylﬂd__numbî_ønges
[1 + 1] =

1364 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	gl‹aw™__joö_ªque°_∑ylﬂd__des¸ùt‹
 =

1366 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

1371 (
L‹aw™__JoöReque°Paylﬂd
),

1373 
l‹aw™__joö_ªque°_∑ylﬂd__fõld_des¸ùt‹s
,

1374 
l‹aw™__joö_ªque°_∑ylﬂd__fõld_ödi˚s_by_«me
,

1375 1, 
l‹aw™__joö_ªque°_∑ylﬂd__numbî_ønges
,

1376 (
PrŸobufCMesßgeInô
Ë
l‹aw™__joö_ªque°_∑ylﬂd__öô
,

1377 
NULL
,NULL,NULL

1379 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	gl‹aw™__joö_ac˚±_∑ylﬂd__fõld_des¸ùt‹s
[7] =

1384 
PROTOBUF_C_LABEL_OPTIONAL
,

1385 
PROTOBUF_C_TYPE_BYTES
,

1386 
off£tof
(
L‹aw™__JoöAc˚±Paylﬂd
, 
has_í¸y±ed
),

1387 
off£tof
(
L‹aw™__JoöAc˚±Paylﬂd
, 
í¸y±ed
),

1388 
NULL
,

1389 
NULL
,

1391 0,
NULL
,NULL

1396 
PROTOBUF_C_LABEL_OPTIONAL
,

1397 
PROTOBUF_C_TYPE_BYTES
,

1398 
off£tof
(
L‹aw™__JoöAc˚±Paylﬂd
, 
has_≠p_n⁄˚
),

1399 
off£tof
(
L‹aw™__JoöAc˚±Paylﬂd
, 
≠p_n⁄˚
),

1400 
NULL
,

1401 
NULL
,

1403 0,
NULL
,NULL

1408 
PROTOBUF_C_LABEL_OPTIONAL
,

1409 
PROTOBUF_C_TYPE_BYTES
,

1410 
off£tof
(
L‹aw™__JoöAc˚±Paylﬂd
, 
has_√t_id
),

1411 
off£tof
(
L‹aw™__JoöAc˚±Paylﬂd
, 
√t_id
),

1412 
NULL
,

1413 
NULL
,

1415 0,
NULL
,NULL

1420 
PROTOBUF_C_LABEL_OPTIONAL
,

1421 
PROTOBUF_C_TYPE_BYTES
,

1422 
off£tof
(
L‹aw™__JoöAc˚±Paylﬂd
, 
has_dev_addr
),

1423 
off£tof
(
L‹aw™__JoöAc˚±Paylﬂd
, 
dev_addr
),

1424 
NULL
,

1425 
NULL
,

1427 0,
NULL
,NULL

1432 
PROTOBUF_C_LABEL_OPTIONAL
,

1433 
PROTOBUF_C_TYPE_MESSAGE
,

1435 
off£tof
(
L‹aw™__JoöAc˚±Paylﬂd
, 
dl_£âögs
),

1436 &
l‹aw™__dl£âögs__des¸ùt‹
,

1437 
NULL
,

1439 0,
NULL
,NULL

1444 
PROTOBUF_C_LABEL_OPTIONAL
,

1445 
PROTOBUF_C_TYPE_UINT32
,

1446 
off£tof
(
L‹aw™__JoöAc˚±Paylﬂd
, 
has_rx_dñay
),

1447 
off£tof
(
L‹aw™__JoöAc˚±Paylﬂd
, 
rx_dñay
),

1448 
NULL
,

1449 
NULL
,

1451 0,
NULL
,NULL

1456 
PROTOBUF_C_LABEL_OPTIONAL
,

1457 
PROTOBUF_C_TYPE_MESSAGE
,

1459 
off£tof
(
L‹aw™__JoöAc˚±Paylﬂd
, 
cf_li°
),

1460 &
l‹aw™__cÊi°__des¸ùt‹
,

1461 
NULL
,

1463 0,
NULL
,NULL

1466 c⁄° 
	gl‹aw™__joö_ac˚±_∑ylﬂd__fõld_ödi˚s_by_«me
[] = {

1475 c⁄° 
PrŸobufCI¡R™ge
 
	gl‹aw™__joö_ac˚±_∑ylﬂd__numbî_ønges
[1 + 1] =

1480 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	gl‹aw™__joö_ac˚±_∑ylﬂd__des¸ùt‹
 =

1482 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

1487 (
L‹aw™__JoöAc˚±Paylﬂd
),

1489 
l‹aw™__joö_ac˚±_∑ylﬂd__fõld_des¸ùt‹s
,

1490 
l‹aw™__joö_ac˚±_∑ylﬂd__fõld_ödi˚s_by_«me
,

1491 1, 
l‹aw™__joö_ac˚±_∑ylﬂd__numbî_ønges
,

1492 (
PrŸobufCMesßgeInô
Ë
l‹aw™__joö_ac˚±_∑ylﬂd__öô
,

1493 
NULL
,NULL,NULL

1495 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	gl‹aw™__dl£âögs__fõld_des¸ùt‹s
[2] =

1500 
PROTOBUF_C_LABEL_OPTIONAL
,

1501 
PROTOBUF_C_TYPE_UINT32
,

1502 
off£tof
(
L‹aw™__DLSëtögs
, 
has_rx1_dr_off£t
),

1503 
off£tof
(
L‹aw™__DLSëtögs
, 
rx1_dr_off£t
),

1504 
NULL
,

1505 
NULL
,

1507 0,
NULL
,NULL

1512 
PROTOBUF_C_LABEL_OPTIONAL
,

1513 
PROTOBUF_C_TYPE_UINT32
,

1514 
off£tof
(
L‹aw™__DLSëtögs
, 
has_rx2_dr
),

1515 
off£tof
(
L‹aw™__DLSëtögs
, 
rx2_dr
),

1516 
NULL
,

1517 
NULL
,

1519 0,
NULL
,NULL

1522 c⁄° 
	gl‹aw™__dl£âögs__fõld_ödi˚s_by_«me
[] = {

1526 c⁄° 
PrŸobufCI¡R™ge
 
	gl‹aw™__dl£âögs__numbî_ønges
[1 + 1] =

1531 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	gl‹aw™__dl£âögs__des¸ùt‹
 =

1533 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

1538 (
L‹aw™__DLSëtögs
),

1540 
l‹aw™__dl£âögs__fõld_des¸ùt‹s
,

1541 
l‹aw™__dl£âögs__fõld_ödi˚s_by_«me
,

1542 1, 
l‹aw™__dl£âögs__numbî_ønges
,

1543 (
PrŸobufCMesßgeInô
Ë
l‹aw™__dl£âögs__öô
,

1544 
NULL
,NULL,NULL

1546 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	gl‹aw™__cÊi°__fõld_des¸ùt‹s
[1] =

1551 
PROTOBUF_C_LABEL_REPEATED
,

1552 
PROTOBUF_C_TYPE_UINT32
,

1553 
off£tof
(
L‹aw™__CFLi°
, 
n_‰eq
),

1554 
off£tof
(
L‹aw™__CFLi°
, 
‰eq
),

1555 
NULL
,

1556 
NULL
,

1558 0,
NULL
,NULL

1561 c⁄° 
	gl‹aw™__cÊi°__fõld_ödi˚s_by_«me
[] = {

1564 c⁄° 
PrŸobufCI¡R™ge
 
	gl‹aw™__cÊi°__numbî_ønges
[1 + 1] =

1569 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	gl‹aw™__cÊi°__des¸ùt‹
 =

1571 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

1576 (
L‹aw™__CFLi°
),

1578 
l‹aw™__cÊi°__fõld_des¸ùt‹s
,

1579 
l‹aw™__cÊi°__fõld_ödi˚s_by_«me
,

1580 1, 
l‹aw™__cÊi°__numbî_ønges
,

1581 (
PrŸobufCMesßgeInô
Ë
l‹aw™__cÊi°__öô
,

1582 
NULL
,NULL,NULL

1584 c⁄° 
PrŸobufCEnumVÆue
 
	gl‹aw™__moduœti⁄__íum_vÆues_by_numbî
[2] =

1589 c⁄° 
PrŸobufCI¡R™ge
 
	gl‹aw™__moduœti⁄__vÆue_ønges
[] = {

1592 c⁄° 
PrŸobufCEnumVÆueIndex
 
	gl‹aw™__moduœti⁄__íum_vÆues_by_«me
[2] =

1597 c⁄° 
PrŸobufCEnumDes¸ùt‹
 
	gl‹aw™__moduœti⁄__des¸ùt‹
 =

1599 
PROTOBUF_C__ENUM_DESCRIPTOR_MAGIC
,

1605 
l‹aw™__moduœti⁄__íum_vÆues_by_numbî
,

1607 
l‹aw™__moduœti⁄__íum_vÆues_by_«me
,

1609 
l‹aw™__moduœti⁄__vÆue_ønges
,

1610 
NULL
,NULL,NULL,NULL

1612 c⁄° 
PrŸobufCEnumVÆue
 
	gl‹aw™__‰equícy_∂™__íum_vÆues_by_numbî
[10] =

1625 c⁄° 
PrŸobufCI¡R™ge
 
	gl‹aw™__‰equícy_∂™__vÆue_ønges
[] = {

1628 c⁄° 
PrŸobufCEnumVÆueIndex
 
	gl‹aw™__‰equícy_∂™__íum_vÆues_by_«me
[10] =

1641 c⁄° 
PrŸobufCEnumDes¸ùt‹
 
	gl‹aw™__‰equícy_∂™__des¸ùt‹
 =

1643 
PROTOBUF_C__ENUM_DESCRIPTOR_MAGIC
,

1649 
l‹aw™__‰equícy_∂™__íum_vÆues_by_numbî
,

1651 
l‹aw™__‰equícy_∂™__íum_vÆues_by_«me
,

1653 
l‹aw™__‰equícy_∂™__vÆue_ønges
,

1654 
NULL
,NULL,NULL,NULL

1656 c⁄° 
PrŸobufCEnumVÆue
 
	gl‹aw™__maj‹__íum_vÆues_by_numbî
[1] =

1660 c⁄° 
PrŸobufCI¡R™ge
 
	gl‹aw™__maj‹__vÆue_ønges
[] = {

1663 c⁄° 
PrŸobufCEnumVÆueIndex
 
	gl‹aw™__maj‹__íum_vÆues_by_«me
[1] =

1667 c⁄° 
PrŸobufCEnumDes¸ùt‹
 
	gl‹aw™__maj‹__des¸ùt‹
 =

1669 
PROTOBUF_C__ENUM_DESCRIPTOR_MAGIC
,

1675 
l‹aw™__maj‹__íum_vÆues_by_numbî
,

1677 
l‹aw™__maj‹__íum_vÆues_by_«me
,

1679 
l‹aw™__maj‹__vÆue_ønges
,

1680 
NULL
,NULL,NULL,NULL

1682 c⁄° 
PrŸobufCEnumVÆue
 
	gl‹aw™__mty≥__íum_vÆues_by_numbî
[6] =

1691 c⁄° 
PrŸobufCI¡R™ge
 
	gl‹aw™__mty≥__vÆue_ønges
[] = {

1694 c⁄° 
PrŸobufCEnumVÆueIndex
 
	gl‹aw™__mty≥__íum_vÆues_by_«me
[6] =

1703 c⁄° 
PrŸobufCEnumDes¸ùt‹
 
	gl‹aw™__mty≥__des¸ùt‹
 =

1705 
PROTOBUF_C__ENUM_DESCRIPTOR_MAGIC
,

1711 
l‹aw™__mty≥__íum_vÆues_by_numbî
,

1713 
l‹aw™__mty≥__íum_vÆues_by_«me
,

1715 
l‹aw™__mty≥__vÆue_ønges
,

1716 
NULL
,NULL,NULL,NULL

	@libttn/lorawan.pb-c.h

4 #i‚de‡
PROTOBUF_C_gôhub_2ecom_2fTheThögsNëw‹k_2·ä_2Ápi_2ÂrŸocﬁ_2Ê‹aw™_2Ê‹aw™_2ïrŸo__INCLUDED


5 
	#PROTOBUF_C_gôhub_2ecom_2fTheThögsNëw‹k_2·ä_2Ápi_2ÂrŸocﬁ_2Ê‹aw™_2Ê‹aw™_2ïrŸo__INCLUDED


	)

7 
	~<¥Ÿobuf-c/¥Ÿobuf-c.h
>

9 
	gPROTOBUF_C__BEGIN_DECLS


11 #i‡
PROTOBUF_C_VERSION_NUMBER
 < 1000000

12 #îr‹ 
This
 
fûe
 
was
 
gíî©ed
 
by
 
a
 
√wî
 
vîsi⁄
 
of
 
¥Ÿoc
-
c
 
which
 
is
 
öcom∑tibÀ
 
wôh
 
your
 
lib¥Ÿobuf
-¯
hódîs
. 
PÀa£
 
upd©e
 your headers.

13 #ñi‡1002001 < 
PROTOBUF_C_MIN_COMPILER_VERSION


14 #îr‹ 
This
 
fûe
 
was
 
gíî©ed
 
by
 
™
 
ﬁdî
 
vîsi⁄
 
of
 
¥Ÿoc
-
c
 
which
 
is
 
öcom∑tibÀ
 
wôh
 
your
 
lib¥Ÿobuf
-¯
hódîs
. 
PÀa£
 
ªgíî©e
 
this
 fûêwôh 
a
 
√wî
 version ofÖrotoc-c.

17 
	~"gogo.pb-c.h
"

19 
_L‹aw™__Mëad©a
 
	tL‹aw™__Mëad©a
;

20 
_L‹aw™__TxC⁄figuøti⁄
 
	tL‹aw™__TxC⁄figuøti⁄
;

21 
_L‹aw™__A˘iv©i⁄Mëad©a
 
	tL‹aw™__A˘iv©i⁄Mëad©a
;

22 
_L‹aw™__Mesßge
 
	tL‹aw™__Mesßge
;

23 
_L‹aw™__MHDR
 
	tL‹aw™__MHDR
;

24 
_L‹aw™__MACPaylﬂd
 
	tL‹aw™__MACPaylﬂd
;

25 
_L‹aw™__FHDR
 
	tL‹aw™__FHDR
;

26 
_L‹aw™__FCål
 
	tL‹aw™__FCål
;

27 
_L‹aw™__MACComm™d
 
	tL‹aw™__MACComm™d
;

28 
_L‹aw™__JoöReque°Paylﬂd
 
	tL‹aw™__JoöReque°Paylﬂd
;

29 
_L‹aw™__JoöAc˚±Paylﬂd
 
	tL‹aw™__JoöAc˚±Paylﬂd
;

30 
_L‹aw™__DLSëtögs
 
	tL‹aw™__DLSëtögs
;

31 
_L‹aw™__CFLi°
 
	tL‹aw™__CFLi°
;

36 
	e_L‹aw™__Moduœti⁄
 {

37 
	mLORAWAN__MODULATION__LORA
 = 0,

38 
	mLORAWAN__MODULATION__FSK
 = 1

39 
PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE
(
LORAWAN__MODULATION
)

40 } 
	tL‹aw™__Moduœti⁄
;

41 
	e_L‹aw™__FªquícyPœn
 {

42 
	mLORAWAN__FREQUENCY_PLAN__EU_863_870
 = 0,

43 
	mLORAWAN__FREQUENCY_PLAN__US_902_928
 = 1,

44 
	mLORAWAN__FREQUENCY_PLAN__CN_779_787
 = 2,

45 
	mLORAWAN__FREQUENCY_PLAN__EU_433
 = 3,

46 
	mLORAWAN__FREQUENCY_PLAN__AU_915_928
 = 4,

47 
	mLORAWAN__FREQUENCY_PLAN__CN_470_510
 = 5,

48 
	mLORAWAN__FREQUENCY_PLAN__AS_923
 = 6,

49 
	mLORAWAN__FREQUENCY_PLAN__AS_920_923
 = 61,

50 
	mLORAWAN__FREQUENCY_PLAN__AS_923_925
 = 62,

51 
	mLORAWAN__FREQUENCY_PLAN__KR_920_923
 = 7

52 
PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE
(
LORAWAN__FREQUENCY_PLAN
)

53 } 
	tL‹aw™__FªquícyPœn
;

54 
	e_L‹aw™__Maj‹
 {

55 
	mLORAWAN__MAJOR__LORAWAN_R1
 = 0

56 
PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE
(
LORAWAN__MAJOR
)

57 } 
	tL‹aw™__Maj‹
;

58 
	e_L‹aw™__MTy≥
 {

59 
	mLORAWAN__MTYPE__JOIN_REQUEST
 = 0,

60 
	mLORAWAN__MTYPE__JOIN_ACCEPT
 = 1,

61 
	mLORAWAN__MTYPE__UNCONFIRMED_UP
 = 2,

62 
	mLORAWAN__MTYPE__UNCONFIRMED_DOWN
 = 3,

63 
	mLORAWAN__MTYPE__CONFIRMED_UP
 = 4,

64 
	mLORAWAN__MTYPE__CONFIRMED_DOWN
 = 5

65 
PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE
(
LORAWAN__MTYPE
)

66 } 
	tL‹aw™__MTy≥
;

70 
	s_L‹aw™__Mëad©a


72 
PrŸobufCMesßge
 
	mba£
;

73 
¥Ÿobuf_c_boﬁón
 
	mhas_moduœti⁄
;

74 
L‹aw™__Moduœti⁄
 
	mmoduœti⁄
;

78 *
	md©a_øã
;

82 
¥Ÿobuf_c_boﬁón
 
	mhas_bô_øã
;

83 
uöt32_t
 
	mbô_øã
;

87 *
	mcodög_øã
;

91 
¥Ÿobuf_c_boﬁón
 
	mhas_f_˙t
;

92 
uöt32_t
 
	mf_˙t
;

93 
¥Ÿobuf_c_boﬁón
 
	mhas_‰equícy_∂™
;

94 
L‹aw™__FªquícyPœn
 
	m‰equícy_∂™
;

96 
	#LORAWAN__METADATA__INIT
 \

97 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
l‹aw™__mëad©a__des¸ùt‹
) \

98 , 0,0, 
NULL
, 0,0, NULL, 0,0, 0,0 }

	)

101 
	s_L‹aw™__TxC⁄figuøti⁄


103 
PrŸobufCMesßge
 
	mba£
;

104 
¥Ÿobuf_c_boﬁón
 
	mhas_moduœti⁄
;

105 
L‹aw™__Moduœti⁄
 
	mmoduœti⁄
;

109 *
	md©a_øã
;

113 
¥Ÿobuf_c_boﬁón
 
	mhas_bô_øã
;

114 
uöt32_t
 
	mbô_øã
;

118 *
	mcodög_øã
;

122 
¥Ÿobuf_c_boﬁón
 
	mhas_f_˙t
;

123 
uöt32_t
 
	mf_˙t
;

125 
	#LORAWAN__TX_CONFIGURATION__INIT
 \

126 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
l‹aw™__tx_c⁄figuøti⁄__des¸ùt‹
) \

127 , 0,0, 
NULL
, 0,0, NULL, 0,0 }

	)

130 
	s_L‹aw™__A˘iv©i⁄Mëad©a


132 
PrŸobufCMesßge
 
	mba£
;

133 
¥Ÿobuf_c_boﬁón
 
	mhas_≠p_eui
;

134 
PrŸobufCBö¨yD©a
 
	m≠p_eui
;

135 
¥Ÿobuf_c_boﬁón
 
	mhas_dev_eui
;

136 
PrŸobufCBö¨yD©a
 
	mdev_eui
;

137 
¥Ÿobuf_c_boﬁón
 
	mhas_dev_addr
;

138 
PrŸobufCBö¨yD©a
 
	mdev_addr
;

139 
¥Ÿobuf_c_boﬁón
 
	mhas_nwk_s_key
;

140 
PrŸobufCBö¨yD©a
 
	mnwk_s_key
;

141 
¥Ÿobuf_c_boﬁón
 
	mhas_rx1_dr_off£t
;

142 
uöt32_t
 
	mrx1_dr_off£t
;

143 
¥Ÿobuf_c_boﬁón
 
	mhas_rx2_dr
;

144 
uöt32_t
 
	mrx2_dr
;

145 
¥Ÿobuf_c_boﬁón
 
	mhas_rx_dñay
;

146 
uöt32_t
 
	mrx_dñay
;

147 
L‹aw™__CFLi°
 *
	mcf_li°
;

148 
¥Ÿobuf_c_boﬁón
 
	mhas_‰equícy_∂™
;

149 
L‹aw™__FªquícyPœn
 
	m‰equícy_∂™
;

151 
	#LORAWAN__ACTIVATION_METADATA__INIT
 \

152 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
l‹aw™__a˘iv©i⁄_mëad©a__des¸ùt‹
) \

153 , 0,{0,
NULL
}, 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL}, 0,0, 0,0, 0,0, NULL, 0,0 }

	)

157 
	mLORAWAN__MESSAGE__PAYLOAD__NOT_SET
 = 0,

158 
	mLORAWAN__MESSAGE__PAYLOAD_MAC_PAYLOAD
 = 3,

159 
	mLORAWAN__MESSAGE__PAYLOAD_JOIN_REQUEST_PAYLOAD
 = 4,

160 
	mLORAWAN__MESSAGE__PAYLOAD_JOIN_ACCEPT_PAYLOAD
 = 5,

161 } 
	tL‹aw™__Mesßge__PaylﬂdCa£
;

163 
	s_L‹aw™__Mesßge


165 
PrŸobufCMesßge
 
	mba£
;

166 
L‹aw™__MHDR
 *
	mm_hdr
;

167 
¥Ÿobuf_c_boﬁón
 
	mhas_mic
;

168 
PrŸobufCBö¨yD©a
 
	mmic
;

169 
L‹aw™__Mesßge__PaylﬂdCa£
 
	m∑ylﬂd_ˇ£
;

171 
L‹aw™__MACPaylﬂd
 *
	mmac_∑ylﬂd
;

172 
L‹aw™__JoöReque°Paylﬂd
 *
	mjoö_ªque°_∑ylﬂd
;

173 
L‹aw™__JoöAc˚±Paylﬂd
 *
	mjoö_ac˚±_∑ylﬂd
;

176 
	#LORAWAN__MESSAGE__INIT
 \

177 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
l‹aw™__mesßge__des¸ùt‹
) \

178 , 
NULL
, 0,{0,NULL}, 
LORAWAN__MESSAGE__PAYLOAD__NOT_SET
, {0} }

	)

181 
	s_L‹aw™__MHDR


183 
PrŸobufCMesßge
 
	mba£
;

184 
¥Ÿobuf_c_boﬁón
 
	mhas_m_ty≥
;

185 
L‹aw™__MTy≥
 
	mm_ty≥
;

186 
¥Ÿobuf_c_boﬁón
 
	mhas_maj‹
;

187 
L‹aw™__Maj‹
 
	mmaj‹
;

189 
	#LORAWAN__MHDR__INIT
 \

190 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
l‹aw™__mhdr__des¸ùt‹
) \

191 , 0,0, 0,0 }

	)

194 
	s_L‹aw™__MACPaylﬂd


196 
PrŸobufCMesßge
 
	mba£
;

197 
L‹aw™__FHDR
 *
	mf_hdr
;

198 
¥Ÿobuf_c_boﬁón
 
	mhas_f_p‹t
;

199 
öt32_t
 
	mf_p‹t
;

200 
¥Ÿobuf_c_boﬁón
 
	mhas_‰m_∑ylﬂd
;

201 
PrŸobufCBö¨yD©a
 
	m‰m_∑ylﬂd
;

203 
	#LORAWAN__MACPAYLOAD__INIT
 \

204 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
l‹aw™__ma˝aylﬂd__des¸ùt‹
) \

205 , 
NULL
, 0,0, 0,{0,NULL} }

	)

208 
	s_L‹aw™__FHDR


210 
PrŸobufCMesßge
 
	mba£
;

211 
¥Ÿobuf_c_boﬁón
 
	mhas_dev_addr
;

212 
PrŸobufCBö¨yD©a
 
	mdev_addr
;

213 
L‹aw™__FCål
 *
	mf_˘æ
;

214 
¥Ÿobuf_c_boﬁón
 
	mhas_f_˙t
;

215 
uöt32_t
 
	mf_˙t
;

216 
size_t
 
	mn_f_›ts
;

217 
L‹aw™__MACComm™d
 **
	mf_›ts
;

219 
	#LORAWAN__FHDR__INIT
 \

220 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
l‹aw™__fhdr__des¸ùt‹
) \

221 , 0,{0,
NULL
}, NULL, 0,0, 0,NULL }

	)

224 
	s_L‹aw™__FCål


226 
PrŸobufCMesßge
 
	mba£
;

227 
¥Ÿobuf_c_boﬁón
 
	mhas_adr
;

228 
¥Ÿobuf_c_boﬁón
 
	madr
;

229 
¥Ÿobuf_c_boﬁón
 
	mhas_adr_ack_ªq
;

230 
¥Ÿobuf_c_boﬁón
 
	madr_ack_ªq
;

231 
¥Ÿobuf_c_boﬁón
 
	mhas_ack
;

232 
¥Ÿobuf_c_boﬁón
 
	mack
;

233 
¥Ÿobuf_c_boﬁón
 
	mhas_f_≥ndög
;

234 
¥Ÿobuf_c_boﬁón
 
	mf_≥ndög
;

236 
	#LORAWAN__FCTRL__INIT
 \

237 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
l‹aw™__f˘æ__des¸ùt‹
) \

238 , 0,0, 0,0, 0,0, 0,0 }

	)

241 
	s_L‹aw™__MACComm™d


243 
PrŸobufCMesßge
 
	mba£
;

244 
¥Ÿobuf_c_boﬁón
 
	mhas_cid
;

245 
uöt32_t
 
	mcid
;

246 
¥Ÿobuf_c_boﬁón
 
	mhas_∑ylﬂd
;

247 
PrŸobufCBö¨yD©a
 
	m∑ylﬂd
;

249 
	#LORAWAN__MACCOMMAND__INIT
 \

250 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
l‹aw™__maccomm™d__des¸ùt‹
) \

251 , 0,0, 0,{0,
NULL
} }

	)

254 
	s_L‹aw™__JoöReque°Paylﬂd


256 
PrŸobufCMesßge
 
	mba£
;

257 
¥Ÿobuf_c_boﬁón
 
	mhas_≠p_eui
;

258 
PrŸobufCBö¨yD©a
 
	m≠p_eui
;

259 
¥Ÿobuf_c_boﬁón
 
	mhas_dev_eui
;

260 
PrŸobufCBö¨yD©a
 
	mdev_eui
;

261 
¥Ÿobuf_c_boﬁón
 
	mhas_dev_n⁄˚
;

262 
PrŸobufCBö¨yD©a
 
	mdev_n⁄˚
;

264 
	#LORAWAN__JOIN_REQUEST_PAYLOAD__INIT
 \

265 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
l‹aw™__joö_ªque°_∑ylﬂd__des¸ùt‹
) \

266 , 0,{0,
NULL
}, 0,{0,NULL}, 0,{0,NULL} }

	)

269 
	s_L‹aw™__JoöAc˚±Paylﬂd


271 
PrŸobufCMesßge
 
	mba£
;

272 
¥Ÿobuf_c_boﬁón
 
	mhas_í¸y±ed
;

273 
PrŸobufCBö¨yD©a
 
	mí¸y±ed
;

274 
¥Ÿobuf_c_boﬁón
 
	mhas_≠p_n⁄˚
;

275 
PrŸobufCBö¨yD©a
 
	m≠p_n⁄˚
;

276 
¥Ÿobuf_c_boﬁón
 
	mhas_√t_id
;

277 
PrŸobufCBö¨yD©a
 
	m√t_id
;

278 
¥Ÿobuf_c_boﬁón
 
	mhas_dev_addr
;

279 
PrŸobufCBö¨yD©a
 
	mdev_addr
;

280 
L‹aw™__DLSëtögs
 *
	mdl_£âögs
;

281 
¥Ÿobuf_c_boﬁón
 
	mhas_rx_dñay
;

282 
uöt32_t
 
	mrx_dñay
;

283 
L‹aw™__CFLi°
 *
	mcf_li°
;

285 
	#LORAWAN__JOIN_ACCEPT_PAYLOAD__INIT
 \

286 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
l‹aw™__joö_ac˚±_∑ylﬂd__des¸ùt‹
) \

287 , 0,{0,
NULL
}, 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL}, NULL, 0,0, NULL }

	)

290 
	s_L‹aw™__DLSëtögs


292 
PrŸobufCMesßge
 
	mba£
;

293 
¥Ÿobuf_c_boﬁón
 
	mhas_rx1_dr_off£t
;

294 
uöt32_t
 
	mrx1_dr_off£t
;

295 
¥Ÿobuf_c_boﬁón
 
	mhas_rx2_dr
;

296 
uöt32_t
 
	mrx2_dr
;

298 
	#LORAWAN__DLSETTINGS__INIT
 \

299 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
l‹aw™__dl£âögs__des¸ùt‹
) \

300 , 0,0, 0,0 }

	)

303 
	s_L‹aw™__CFLi°


305 
PrŸobufCMesßge
 
	mba£
;

306 
size_t
 
	mn_‰eq
;

307 
uöt32_t
 *
	m‰eq
;

309 
	#LORAWAN__CFLIST__INIT
 \

310 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
l‹aw™__cÊi°__des¸ùt‹
) \

311 , 0,
NULL
 }

	)

315 
	gl‹aw™__mëad©a__öô


316 (
L‹aw™__Mëad©a
 *
	gmesßge
);

317 
size_t
 
	gl‹aw™__mëad©a__gë_∑cked_size


318 (c⁄° 
L‹aw™__Mëad©a
 *
	gmesßge
);

319 
size_t
 
	gl‹aw™__mëad©a__∑ck


320 (c⁄° 
L‹aw™__Mëad©a
 *
	gmesßge
,

321 
uöt8_t
 *
	gout
);

322 
size_t
 
	gl‹aw™__mëad©a__∑ck_to_buf„r


323 (c⁄° 
L‹aw™__Mëad©a
 *
	gmesßge
,

324 
PrŸobufCBuf„r
 *
	gbuf„r
);

325 
L‹aw™__Mëad©a
 *

326 
	gl‹aw™__mëad©a__u≈ack


327 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

328 
size_t
 
	gÀn
,

329 c⁄° 
uöt8_t
 *
	gd©a
);

330 
	gl‹aw™__mëad©a__‰ì_u≈acked


331 (
L‹aw™__Mëad©a
 *
	gmesßge
,

332 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
);

334 
	gl‹aw™__tx_c⁄figuøti⁄__öô


335 (
L‹aw™__TxC⁄figuøti⁄
 *
	gmesßge
);

336 
size_t
 
	gl‹aw™__tx_c⁄figuøti⁄__gë_∑cked_size


337 (c⁄° 
L‹aw™__TxC⁄figuøti⁄
 *
	gmesßge
);

338 
size_t
 
	gl‹aw™__tx_c⁄figuøti⁄__∑ck


339 (c⁄° 
L‹aw™__TxC⁄figuøti⁄
 *
	gmesßge
,

340 
uöt8_t
 *
	gout
);

341 
size_t
 
	gl‹aw™__tx_c⁄figuøti⁄__∑ck_to_buf„r


342 (c⁄° 
L‹aw™__TxC⁄figuøti⁄
 *
	gmesßge
,

343 
PrŸobufCBuf„r
 *
	gbuf„r
);

344 
L‹aw™__TxC⁄figuøti⁄
 *

345 
	gl‹aw™__tx_c⁄figuøti⁄__u≈ack


346 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

347 
size_t
 
	gÀn
,

348 c⁄° 
uöt8_t
 *
	gd©a
);

349 
	gl‹aw™__tx_c⁄figuøti⁄__‰ì_u≈acked


350 (
L‹aw™__TxC⁄figuøti⁄
 *
	gmesßge
,

351 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
);

353 
	gl‹aw™__a˘iv©i⁄_mëad©a__öô


354 (
L‹aw™__A˘iv©i⁄Mëad©a
 *
	gmesßge
);

355 
size_t
 
	gl‹aw™__a˘iv©i⁄_mëad©a__gë_∑cked_size


356 (c⁄° 
L‹aw™__A˘iv©i⁄Mëad©a
 *
	gmesßge
);

357 
size_t
 
	gl‹aw™__a˘iv©i⁄_mëad©a__∑ck


358 (c⁄° 
L‹aw™__A˘iv©i⁄Mëad©a
 *
	gmesßge
,

359 
uöt8_t
 *
	gout
);

360 
size_t
 
	gl‹aw™__a˘iv©i⁄_mëad©a__∑ck_to_buf„r


361 (c⁄° 
L‹aw™__A˘iv©i⁄Mëad©a
 *
	gmesßge
,

362 
PrŸobufCBuf„r
 *
	gbuf„r
);

363 
L‹aw™__A˘iv©i⁄Mëad©a
 *

364 
	gl‹aw™__a˘iv©i⁄_mëad©a__u≈ack


365 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

366 
size_t
 
	gÀn
,

367 c⁄° 
uöt8_t
 *
	gd©a
);

368 
	gl‹aw™__a˘iv©i⁄_mëad©a__‰ì_u≈acked


369 (
L‹aw™__A˘iv©i⁄Mëad©a
 *
	gmesßge
,

370 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
);

372 
	gl‹aw™__mesßge__öô


373 (
L‹aw™__Mesßge
 *
	gmesßge
);

374 
size_t
 
	gl‹aw™__mesßge__gë_∑cked_size


375 (c⁄° 
L‹aw™__Mesßge
 *
	gmesßge
);

376 
size_t
 
	gl‹aw™__mesßge__∑ck


377 (c⁄° 
L‹aw™__Mesßge
 *
	gmesßge
,

378 
uöt8_t
 *
	gout
);

379 
size_t
 
	gl‹aw™__mesßge__∑ck_to_buf„r


380 (c⁄° 
L‹aw™__Mesßge
 *
	gmesßge
,

381 
PrŸobufCBuf„r
 *
	gbuf„r
);

382 
L‹aw™__Mesßge
 *

383 
	gl‹aw™__mesßge__u≈ack


384 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

385 
size_t
 
	gÀn
,

386 c⁄° 
uöt8_t
 *
	gd©a
);

387 
	gl‹aw™__mesßge__‰ì_u≈acked


388 (
L‹aw™__Mesßge
 *
	gmesßge
,

389 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
);

391 
	gl‹aw™__mhdr__öô


392 (
L‹aw™__MHDR
 *
	gmesßge
);

393 
size_t
 
	gl‹aw™__mhdr__gë_∑cked_size


394 (c⁄° 
L‹aw™__MHDR
 *
	gmesßge
);

395 
size_t
 
	gl‹aw™__mhdr__∑ck


396 (c⁄° 
L‹aw™__MHDR
 *
	gmesßge
,

397 
uöt8_t
 *
	gout
);

398 
size_t
 
	gl‹aw™__mhdr__∑ck_to_buf„r


399 (c⁄° 
L‹aw™__MHDR
 *
	gmesßge
,

400 
PrŸobufCBuf„r
 *
	gbuf„r
);

401 
L‹aw™__MHDR
 *

402 
	gl‹aw™__mhdr__u≈ack


403 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

404 
size_t
 
	gÀn
,

405 c⁄° 
uöt8_t
 *
	gd©a
);

406 
	gl‹aw™__mhdr__‰ì_u≈acked


407 (
L‹aw™__MHDR
 *
	gmesßge
,

408 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
);

410 
	gl‹aw™__ma˝aylﬂd__öô


411 (
L‹aw™__MACPaylﬂd
 *
	gmesßge
);

412 
size_t
 
	gl‹aw™__ma˝aylﬂd__gë_∑cked_size


413 (c⁄° 
L‹aw™__MACPaylﬂd
 *
	gmesßge
);

414 
size_t
 
	gl‹aw™__ma˝aylﬂd__∑ck


415 (c⁄° 
L‹aw™__MACPaylﬂd
 *
	gmesßge
,

416 
uöt8_t
 *
	gout
);

417 
size_t
 
	gl‹aw™__ma˝aylﬂd__∑ck_to_buf„r


418 (c⁄° 
L‹aw™__MACPaylﬂd
 *
	gmesßge
,

419 
PrŸobufCBuf„r
 *
	gbuf„r
);

420 
L‹aw™__MACPaylﬂd
 *

421 
	gl‹aw™__ma˝aylﬂd__u≈ack


422 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

423 
size_t
 
	gÀn
,

424 c⁄° 
uöt8_t
 *
	gd©a
);

425 
	gl‹aw™__ma˝aylﬂd__‰ì_u≈acked


426 (
L‹aw™__MACPaylﬂd
 *
	gmesßge
,

427 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
);

429 
	gl‹aw™__fhdr__öô


430 (
L‹aw™__FHDR
 *
	gmesßge
);

431 
size_t
 
	gl‹aw™__fhdr__gë_∑cked_size


432 (c⁄° 
L‹aw™__FHDR
 *
	gmesßge
);

433 
size_t
 
	gl‹aw™__fhdr__∑ck


434 (c⁄° 
L‹aw™__FHDR
 *
	gmesßge
,

435 
uöt8_t
 *
	gout
);

436 
size_t
 
	gl‹aw™__fhdr__∑ck_to_buf„r


437 (c⁄° 
L‹aw™__FHDR
 *
	gmesßge
,

438 
PrŸobufCBuf„r
 *
	gbuf„r
);

439 
L‹aw™__FHDR
 *

440 
	gl‹aw™__fhdr__u≈ack


441 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

442 
size_t
 
	gÀn
,

443 c⁄° 
uöt8_t
 *
	gd©a
);

444 
	gl‹aw™__fhdr__‰ì_u≈acked


445 (
L‹aw™__FHDR
 *
	gmesßge
,

446 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
);

448 
	gl‹aw™__f˘æ__öô


449 (
L‹aw™__FCål
 *
	gmesßge
);

450 
size_t
 
	gl‹aw™__f˘æ__gë_∑cked_size


451 (c⁄° 
L‹aw™__FCål
 *
	gmesßge
);

452 
size_t
 
	gl‹aw™__f˘æ__∑ck


453 (c⁄° 
L‹aw™__FCål
 *
	gmesßge
,

454 
uöt8_t
 *
	gout
);

455 
size_t
 
	gl‹aw™__f˘æ__∑ck_to_buf„r


456 (c⁄° 
L‹aw™__FCål
 *
	gmesßge
,

457 
PrŸobufCBuf„r
 *
	gbuf„r
);

458 
L‹aw™__FCål
 *

459 
	gl‹aw™__f˘æ__u≈ack


460 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

461 
size_t
 
	gÀn
,

462 c⁄° 
uöt8_t
 *
	gd©a
);

463 
	gl‹aw™__f˘æ__‰ì_u≈acked


464 (
L‹aw™__FCål
 *
	gmesßge
,

465 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
);

467 
	gl‹aw™__maccomm™d__öô


468 (
L‹aw™__MACComm™d
 *
	gmesßge
);

469 
size_t
 
	gl‹aw™__maccomm™d__gë_∑cked_size


470 (c⁄° 
L‹aw™__MACComm™d
 *
	gmesßge
);

471 
size_t
 
	gl‹aw™__maccomm™d__∑ck


472 (c⁄° 
L‹aw™__MACComm™d
 *
	gmesßge
,

473 
uöt8_t
 *
	gout
);

474 
size_t
 
	gl‹aw™__maccomm™d__∑ck_to_buf„r


475 (c⁄° 
L‹aw™__MACComm™d
 *
	gmesßge
,

476 
PrŸobufCBuf„r
 *
	gbuf„r
);

477 
L‹aw™__MACComm™d
 *

478 
	gl‹aw™__maccomm™d__u≈ack


479 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

480 
size_t
 
	gÀn
,

481 c⁄° 
uöt8_t
 *
	gd©a
);

482 
	gl‹aw™__maccomm™d__‰ì_u≈acked


483 (
L‹aw™__MACComm™d
 *
	gmesßge
,

484 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
);

486 
	gl‹aw™__joö_ªque°_∑ylﬂd__öô


487 (
L‹aw™__JoöReque°Paylﬂd
 *
	gmesßge
);

488 
size_t
 
	gl‹aw™__joö_ªque°_∑ylﬂd__gë_∑cked_size


489 (c⁄° 
L‹aw™__JoöReque°Paylﬂd
 *
	gmesßge
);

490 
size_t
 
	gl‹aw™__joö_ªque°_∑ylﬂd__∑ck


491 (c⁄° 
L‹aw™__JoöReque°Paylﬂd
 *
	gmesßge
,

492 
uöt8_t
 *
	gout
);

493 
size_t
 
	gl‹aw™__joö_ªque°_∑ylﬂd__∑ck_to_buf„r


494 (c⁄° 
L‹aw™__JoöReque°Paylﬂd
 *
	gmesßge
,

495 
PrŸobufCBuf„r
 *
	gbuf„r
);

496 
L‹aw™__JoöReque°Paylﬂd
 *

497 
	gl‹aw™__joö_ªque°_∑ylﬂd__u≈ack


498 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

499 
size_t
 
	gÀn
,

500 c⁄° 
uöt8_t
 *
	gd©a
);

501 
	gl‹aw™__joö_ªque°_∑ylﬂd__‰ì_u≈acked


502 (
L‹aw™__JoöReque°Paylﬂd
 *
	gmesßge
,

503 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
);

505 
	gl‹aw™__joö_ac˚±_∑ylﬂd__öô


506 (
L‹aw™__JoöAc˚±Paylﬂd
 *
	gmesßge
);

507 
size_t
 
	gl‹aw™__joö_ac˚±_∑ylﬂd__gë_∑cked_size


508 (c⁄° 
L‹aw™__JoöAc˚±Paylﬂd
 *
	gmesßge
);

509 
size_t
 
	gl‹aw™__joö_ac˚±_∑ylﬂd__∑ck


510 (c⁄° 
L‹aw™__JoöAc˚±Paylﬂd
 *
	gmesßge
,

511 
uöt8_t
 *
	gout
);

512 
size_t
 
	gl‹aw™__joö_ac˚±_∑ylﬂd__∑ck_to_buf„r


513 (c⁄° 
L‹aw™__JoöAc˚±Paylﬂd
 *
	gmesßge
,

514 
PrŸobufCBuf„r
 *
	gbuf„r
);

515 
L‹aw™__JoöAc˚±Paylﬂd
 *

516 
	gl‹aw™__joö_ac˚±_∑ylﬂd__u≈ack


517 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

518 
size_t
 
	gÀn
,

519 c⁄° 
uöt8_t
 *
	gd©a
);

520 
	gl‹aw™__joö_ac˚±_∑ylﬂd__‰ì_u≈acked


521 (
L‹aw™__JoöAc˚±Paylﬂd
 *
	gmesßge
,

522 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
);

524 
	gl‹aw™__dl£âögs__öô


525 (
L‹aw™__DLSëtögs
 *
	gmesßge
);

526 
size_t
 
	gl‹aw™__dl£âögs__gë_∑cked_size


527 (c⁄° 
L‹aw™__DLSëtögs
 *
	gmesßge
);

528 
size_t
 
	gl‹aw™__dl£âögs__∑ck


529 (c⁄° 
L‹aw™__DLSëtögs
 *
	gmesßge
,

530 
uöt8_t
 *
	gout
);

531 
size_t
 
	gl‹aw™__dl£âögs__∑ck_to_buf„r


532 (c⁄° 
L‹aw™__DLSëtögs
 *
	gmesßge
,

533 
PrŸobufCBuf„r
 *
	gbuf„r
);

534 
L‹aw™__DLSëtögs
 *

535 
	gl‹aw™__dl£âögs__u≈ack


536 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

537 
size_t
 
	gÀn
,

538 c⁄° 
uöt8_t
 *
	gd©a
);

539 
	gl‹aw™__dl£âögs__‰ì_u≈acked


540 (
L‹aw™__DLSëtögs
 *
	gmesßge
,

541 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
);

543 
	gl‹aw™__cÊi°__öô


544 (
L‹aw™__CFLi°
 *
	gmesßge
);

545 
size_t
 
	gl‹aw™__cÊi°__gë_∑cked_size


546 (c⁄° 
L‹aw™__CFLi°
 *
	gmesßge
);

547 
size_t
 
	gl‹aw™__cÊi°__∑ck


548 (c⁄° 
L‹aw™__CFLi°
 *
	gmesßge
,

549 
uöt8_t
 *
	gout
);

550 
size_t
 
	gl‹aw™__cÊi°__∑ck_to_buf„r


551 (c⁄° 
L‹aw™__CFLi°
 *
	gmesßge
,

552 
PrŸobufCBuf„r
 *
	gbuf„r
);

553 
L‹aw™__CFLi°
 *

554 
	gl‹aw™__cÊi°__u≈ack


555 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

556 
size_t
 
	gÀn
,

557 c⁄° 
uöt8_t
 *
	gd©a
);

558 
	gl‹aw™__cÊi°__‰ì_u≈acked


559 (
L‹aw™__CFLi°
 *
	gmesßge
,

560 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
);

563 (*
	tL‹aw™__Mëad©a_Closuª
)

564 (c⁄° 
	tL‹aw™__Mëad©a
 *
	tmesßge
,

565 *
	t˛osuª_d©a
);

566 (*
	tL‹aw™__TxC⁄figuøti⁄_Closuª
)

567 (c⁄° 
	tL‹aw™__TxC⁄figuøti⁄
 *
	tmesßge
,

568 *
	t˛osuª_d©a
);

569 (*
	tL‹aw™__A˘iv©i⁄Mëad©a_Closuª
)

570 (c⁄° 
	tL‹aw™__A˘iv©i⁄Mëad©a
 *
	tmesßge
,

571 *
	t˛osuª_d©a
);

572 (*
	tL‹aw™__Mesßge_Closuª
)

573 (c⁄° 
	tL‹aw™__Mesßge
 *
	tmesßge
,

574 *
	t˛osuª_d©a
);

575 (*
	tL‹aw™__MHDR_Closuª
)

576 (c⁄° 
	tL‹aw™__MHDR
 *
	tmesßge
,

577 *
	t˛osuª_d©a
);

578 (*
	tL‹aw™__MACPaylﬂd_Closuª
)

579 (c⁄° 
	tL‹aw™__MACPaylﬂd
 *
	tmesßge
,

580 *
	t˛osuª_d©a
);

581 (*
	tL‹aw™__FHDR_Closuª
)

582 (c⁄° 
	tL‹aw™__FHDR
 *
	tmesßge
,

583 *
	t˛osuª_d©a
);

584 (*
	tL‹aw™__FCål_Closuª
)

585 (c⁄° 
	tL‹aw™__FCål
 *
	tmesßge
,

586 *
	t˛osuª_d©a
);

587 (*
	tL‹aw™__MACComm™d_Closuª
)

588 (c⁄° 
	tL‹aw™__MACComm™d
 *
	tmesßge
,

589 *
	t˛osuª_d©a
);

590 (*
	tL‹aw™__JoöReque°Paylﬂd_Closuª
)

591 (c⁄° 
	tL‹aw™__JoöReque°Paylﬂd
 *
	tmesßge
,

592 *
	t˛osuª_d©a
);

593 (*
	tL‹aw™__JoöAc˚±Paylﬂd_Closuª
)

594 (c⁄° 
	tL‹aw™__JoöAc˚±Paylﬂd
 *
	tmesßge
,

595 *
	t˛osuª_d©a
);

596 (*
	tL‹aw™__DLSëtögs_Closuª
)

597 (c⁄° 
	tL‹aw™__DLSëtögs
 *
	tmesßge
,

598 *
	t˛osuª_d©a
);

599 (*
	tL‹aw™__CFLi°_Closuª
)

600 (c⁄° 
	tL‹aw™__CFLi°
 *
	tmesßge
,

601 *
	t˛osuª_d©a
);

608 c⁄° 
PrŸobufCEnumDes¸ùt‹
 
l‹aw™__moduœti⁄__des¸ùt‹
;

609 c⁄° 
PrŸobufCEnumDes¸ùt‹
 
l‹aw™__‰equícy_∂™__des¸ùt‹
;

610 c⁄° 
PrŸobufCEnumDes¸ùt‹
 
l‹aw™__maj‹__des¸ùt‹
;

611 c⁄° 
PrŸobufCEnumDes¸ùt‹
 
l‹aw™__mty≥__des¸ùt‹
;

612 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
l‹aw™__mëad©a__des¸ùt‹
;

613 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
l‹aw™__tx_c⁄figuøti⁄__des¸ùt‹
;

614 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
l‹aw™__a˘iv©i⁄_mëad©a__des¸ùt‹
;

615 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
l‹aw™__mesßge__des¸ùt‹
;

616 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
l‹aw™__mhdr__des¸ùt‹
;

617 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
l‹aw™__ma˝aylﬂd__des¸ùt‹
;

618 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
l‹aw™__fhdr__des¸ùt‹
;

619 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
l‹aw™__f˘æ__des¸ùt‹
;

620 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
l‹aw™__maccomm™d__des¸ùt‹
;

621 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
l‹aw™__joö_ªque°_∑ylﬂd__des¸ùt‹
;

622 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
l‹aw™__joö_ac˚±_∑ylﬂd__des¸ùt‹
;

623 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
l‹aw™__dl£âögs__des¸ùt‹
;

624 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
l‹aw™__cÊi°__des¸ùt‹
;

626 
PROTOBUF_C__END_DECLS


	@libttn/network.h

4 #i‡!
deföed
(
__TTN_GW_NETWORK_H_
)

5 
	#__TTN_GW_NETWORK_H_


	)

7 
	~<MQTTClõ¡.h
>

8 
	~<MQTTPackë.h
>

10 
	~"c⁄√˘‹.h
"

11 
	~"£ssi⁄.h
"

12 
	~"rouãr.pb-c.h
"

14 
	#KEEP_ALIVE_INTERVAL
 20

	)

15 
	#COMMAND_TIMEOUT
 2000

	)

16 
	#READ_BUFFER_SIZE
 512

	)

17 
	#SEND_BUFFER_SIZE
 512

	)

19 
	#QOS_STATUS
 
QOS1


	)

20 
	#QOS_DOWN
 
QOS1


	)

21 
	#QOS_UP
 
QOS1


	)

22 
	#QOS_CONNECT
 
QOS1


	)

23 
	#QOS_WILL
 
QOS1


	)

	@libttn/protocol.pb-c.c

5 #i‚de‡
PROTOBUF_C__NO_DEPRECATED


6 
	#PROTOBUF_C__NO_DEPRECATED


	)

9 
	~"¥Ÿocﬁ.pb-c.h
"

10 
	g¥Ÿocﬁ__mesßge__öô


11 (
PrŸocﬁ__Mesßge
 *
	gmesßge
)

13 
PrŸocﬁ__Mesßge
 
	göô_vÆue
 = 
PROTOCOL__MESSAGE__INIT
;

14 *
	gmesßge
 = 
öô_vÆue
;

16 
size_t
 
	g¥Ÿocﬁ__mesßge__gë_∑cked_size


17 (c⁄° 
PrŸocﬁ__Mesßge
 *
	gmesßge
)

19 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
¥Ÿocﬁ__mesßge__des¸ùt‹
);

20  
¥Ÿobuf_c_mesßge_gë_∑cked_size
 ((c⁄° 
PrŸobufCMesßge
*)(
mesßge
));

22 
size_t
 
	g¥Ÿocﬁ__mesßge__∑ck


23 (c⁄° 
PrŸocﬁ__Mesßge
 *
	gmesßge
,

24 
uöt8_t
 *
	gout
)

26 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
¥Ÿocﬁ__mesßge__des¸ùt‹
);

27  
¥Ÿobuf_c_mesßge_∑ck
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
out
);

29 
size_t
 
	g¥Ÿocﬁ__mesßge__∑ck_to_buf„r


30 (c⁄° 
PrŸocﬁ__Mesßge
 *
	gmesßge
,

31 
PrŸobufCBuf„r
 *
	gbuf„r
)

33 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
¥Ÿocﬁ__mesßge__des¸ùt‹
);

34  
¥Ÿobuf_c_mesßge_∑ck_to_buf„r
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
buf„r
);

36 
PrŸocﬁ__Mesßge
 *

37 
	g¥Ÿocﬁ__mesßge__u≈ack


38 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

39 
size_t
 
	gÀn
,

40 c⁄° 
uöt8_t
 *
	gd©a
)

42  (
	gPrŸocﬁ__Mesßge
 *)

43 
¥Ÿobuf_c_mesßge_u≈ack
 (&
¥Ÿocﬁ__mesßge__des¸ùt‹
,

44 
Æloˇt‹
, 
Àn
, 
d©a
);

46 
	g¥Ÿocﬁ__mesßge__‰ì_u≈acked


47 (
PrŸocﬁ__Mesßge
 *
	gmesßge
,

48 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
)

50 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
¥Ÿocﬁ__mesßge__des¸ùt‹
);

51 
¥Ÿobuf_c_mesßge_‰ì_u≈acked
 ((
PrŸobufCMesßge
*)
mesßge
, 
Æloˇt‹
);

53 
	g¥Ÿocﬁ__rx_mëad©a__öô


54 (
PrŸocﬁ__RxMëad©a
 *
	gmesßge
)

56 
PrŸocﬁ__RxMëad©a
 
	göô_vÆue
 = 
PROTOCOL__RX_METADATA__INIT
;

57 *
	gmesßge
 = 
öô_vÆue
;

59 
size_t
 
	g¥Ÿocﬁ__rx_mëad©a__gë_∑cked_size


60 (c⁄° 
PrŸocﬁ__RxMëad©a
 *
	gmesßge
)

62 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
¥Ÿocﬁ__rx_mëad©a__des¸ùt‹
);

63  
¥Ÿobuf_c_mesßge_gë_∑cked_size
 ((c⁄° 
PrŸobufCMesßge
*)(
mesßge
));

65 
size_t
 
	g¥Ÿocﬁ__rx_mëad©a__∑ck


66 (c⁄° 
PrŸocﬁ__RxMëad©a
 *
	gmesßge
,

67 
uöt8_t
 *
	gout
)

69 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
¥Ÿocﬁ__rx_mëad©a__des¸ùt‹
);

70  
¥Ÿobuf_c_mesßge_∑ck
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
out
);

72 
size_t
 
	g¥Ÿocﬁ__rx_mëad©a__∑ck_to_buf„r


73 (c⁄° 
PrŸocﬁ__RxMëad©a
 *
	gmesßge
,

74 
PrŸobufCBuf„r
 *
	gbuf„r
)

76 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
¥Ÿocﬁ__rx_mëad©a__des¸ùt‹
);

77  
¥Ÿobuf_c_mesßge_∑ck_to_buf„r
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
buf„r
);

79 
PrŸocﬁ__RxMëad©a
 *

80 
	g¥Ÿocﬁ__rx_mëad©a__u≈ack


81 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

82 
size_t
 
	gÀn
,

83 c⁄° 
uöt8_t
 *
	gd©a
)

85  (
	gPrŸocﬁ__RxMëad©a
 *)

86 
¥Ÿobuf_c_mesßge_u≈ack
 (&
¥Ÿocﬁ__rx_mëad©a__des¸ùt‹
,

87 
Æloˇt‹
, 
Àn
, 
d©a
);

89 
	g¥Ÿocﬁ__rx_mëad©a__‰ì_u≈acked


90 (
PrŸocﬁ__RxMëad©a
 *
	gmesßge
,

91 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
)

93 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
¥Ÿocﬁ__rx_mëad©a__des¸ùt‹
);

94 
¥Ÿobuf_c_mesßge_‰ì_u≈acked
 ((
PrŸobufCMesßge
*)
mesßge
, 
Æloˇt‹
);

96 
	g¥Ÿocﬁ__tx_c⁄figuøti⁄__öô


97 (
PrŸocﬁ__TxC⁄figuøti⁄
 *
	gmesßge
)

99 
PrŸocﬁ__TxC⁄figuøti⁄
 
	göô_vÆue
 = 
PROTOCOL__TX_CONFIGURATION__INIT
;

100 *
	gmesßge
 = 
öô_vÆue
;

102 
size_t
 
	g¥Ÿocﬁ__tx_c⁄figuøti⁄__gë_∑cked_size


103 (c⁄° 
PrŸocﬁ__TxC⁄figuøti⁄
 *
	gmesßge
)

105 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
¥Ÿocﬁ__tx_c⁄figuøti⁄__des¸ùt‹
);

106  
¥Ÿobuf_c_mesßge_gë_∑cked_size
 ((c⁄° 
PrŸobufCMesßge
*)(
mesßge
));

108 
size_t
 
	g¥Ÿocﬁ__tx_c⁄figuøti⁄__∑ck


109 (c⁄° 
PrŸocﬁ__TxC⁄figuøti⁄
 *
	gmesßge
,

110 
uöt8_t
 *
	gout
)

112 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
¥Ÿocﬁ__tx_c⁄figuøti⁄__des¸ùt‹
);

113  
¥Ÿobuf_c_mesßge_∑ck
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
out
);

115 
size_t
 
	g¥Ÿocﬁ__tx_c⁄figuøti⁄__∑ck_to_buf„r


116 (c⁄° 
PrŸocﬁ__TxC⁄figuøti⁄
 *
	gmesßge
,

117 
PrŸobufCBuf„r
 *
	gbuf„r
)

119 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
¥Ÿocﬁ__tx_c⁄figuøti⁄__des¸ùt‹
);

120  
¥Ÿobuf_c_mesßge_∑ck_to_buf„r
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
buf„r
);

122 
PrŸocﬁ__TxC⁄figuøti⁄
 *

123 
	g¥Ÿocﬁ__tx_c⁄figuøti⁄__u≈ack


124 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

125 
size_t
 
	gÀn
,

126 c⁄° 
uöt8_t
 *
	gd©a
)

128  (
	gPrŸocﬁ__TxC⁄figuøti⁄
 *)

129 
¥Ÿobuf_c_mesßge_u≈ack
 (&
¥Ÿocﬁ__tx_c⁄figuøti⁄__des¸ùt‹
,

130 
Æloˇt‹
, 
Àn
, 
d©a
);

132 
	g¥Ÿocﬁ__tx_c⁄figuøti⁄__‰ì_u≈acked


133 (
PrŸocﬁ__TxC⁄figuøti⁄
 *
	gmesßge
,

134 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
)

136 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
¥Ÿocﬁ__tx_c⁄figuøti⁄__des¸ùt‹
);

137 
¥Ÿobuf_c_mesßge_‰ì_u≈acked
 ((
PrŸobufCMesßge
*)
mesßge
, 
Æloˇt‹
);

139 
	g¥Ÿocﬁ__a˘iv©i⁄_mëad©a__öô


140 (
PrŸocﬁ__A˘iv©i⁄Mëad©a
 *
	gmesßge
)

142 
PrŸocﬁ__A˘iv©i⁄Mëad©a
 
	göô_vÆue
 = 
PROTOCOL__ACTIVATION_METADATA__INIT
;

143 *
	gmesßge
 = 
öô_vÆue
;

145 
size_t
 
	g¥Ÿocﬁ__a˘iv©i⁄_mëad©a__gë_∑cked_size


146 (c⁄° 
PrŸocﬁ__A˘iv©i⁄Mëad©a
 *
	gmesßge
)

148 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
¥Ÿocﬁ__a˘iv©i⁄_mëad©a__des¸ùt‹
);

149  
¥Ÿobuf_c_mesßge_gë_∑cked_size
 ((c⁄° 
PrŸobufCMesßge
*)(
mesßge
));

151 
size_t
 
	g¥Ÿocﬁ__a˘iv©i⁄_mëad©a__∑ck


152 (c⁄° 
PrŸocﬁ__A˘iv©i⁄Mëad©a
 *
	gmesßge
,

153 
uöt8_t
 *
	gout
)

155 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
¥Ÿocﬁ__a˘iv©i⁄_mëad©a__des¸ùt‹
);

156  
¥Ÿobuf_c_mesßge_∑ck
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
out
);

158 
size_t
 
	g¥Ÿocﬁ__a˘iv©i⁄_mëad©a__∑ck_to_buf„r


159 (c⁄° 
PrŸocﬁ__A˘iv©i⁄Mëad©a
 *
	gmesßge
,

160 
PrŸobufCBuf„r
 *
	gbuf„r
)

162 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
¥Ÿocﬁ__a˘iv©i⁄_mëad©a__des¸ùt‹
);

163  
¥Ÿobuf_c_mesßge_∑ck_to_buf„r
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
buf„r
);

165 
PrŸocﬁ__A˘iv©i⁄Mëad©a
 *

166 
	g¥Ÿocﬁ__a˘iv©i⁄_mëad©a__u≈ack


167 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

168 
size_t
 
	gÀn
,

169 c⁄° 
uöt8_t
 *
	gd©a
)

171  (
	gPrŸocﬁ__A˘iv©i⁄Mëad©a
 *)

172 
¥Ÿobuf_c_mesßge_u≈ack
 (&
¥Ÿocﬁ__a˘iv©i⁄_mëad©a__des¸ùt‹
,

173 
Æloˇt‹
, 
Àn
, 
d©a
);

175 
	g¥Ÿocﬁ__a˘iv©i⁄_mëad©a__‰ì_u≈acked


176 (
PrŸocﬁ__A˘iv©i⁄Mëad©a
 *
	gmesßge
,

177 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
)

179 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
¥Ÿocﬁ__a˘iv©i⁄_mëad©a__des¸ùt‹
);

180 
¥Ÿobuf_c_mesßge_‰ì_u≈acked
 ((
PrŸobufCMesßge
*)
mesßge
, 
Æloˇt‹
);

182 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	g¥Ÿocﬁ__mesßge__fõld_des¸ùt‹s
[1] =

187 
PROTOBUF_C_LABEL_OPTIONAL
,

188 
PROTOBUF_C_TYPE_MESSAGE
,

189 
off£tof
(
PrŸocﬁ__Mesßge
, 
¥Ÿocﬁ_ˇ£
),

190 
off£tof
(
PrŸocﬁ__Mesßge
, 
l‹aw™
),

191 &
l‹aw™__mesßge__des¸ùt‹
,

192 
NULL
,

193 0 | 
PROTOBUF_C_FIELD_FLAG_ONEOF
,

194 0,
NULL
,NULL

197 c⁄° 
	g¥Ÿocﬁ__mesßge__fõld_ödi˚s_by_«me
[] = {

200 c⁄° 
PrŸobufCI¡R™ge
 
	g¥Ÿocﬁ__mesßge__numbî_ønges
[1 + 1] =

205 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	g¥Ÿocﬁ__mesßge__des¸ùt‹
 =

207 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

212 (
PrŸocﬁ__Mesßge
),

214 
¥Ÿocﬁ__mesßge__fõld_des¸ùt‹s
,

215 
¥Ÿocﬁ__mesßge__fõld_ödi˚s_by_«me
,

216 1, 
¥Ÿocﬁ__mesßge__numbî_ønges
,

217 (
PrŸobufCMesßgeInô
Ë
¥Ÿocﬁ__mesßge__öô
,

218 
NULL
,NULL,NULL

220 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	g¥Ÿocﬁ__rx_mëad©a__fõld_des¸ùt‹s
[1] =

225 
PROTOBUF_C_LABEL_OPTIONAL
,

226 
PROTOBUF_C_TYPE_MESSAGE
,

227 
off£tof
(
PrŸocﬁ__RxMëad©a
, 
¥Ÿocﬁ_ˇ£
),

228 
off£tof
(
PrŸocﬁ__RxMëad©a
, 
l‹aw™
),

229 &
l‹aw™__mëad©a__des¸ùt‹
,

230 
NULL
,

231 0 | 
PROTOBUF_C_FIELD_FLAG_ONEOF
,

232 0,
NULL
,NULL

235 c⁄° 
	g¥Ÿocﬁ__rx_mëad©a__fõld_ödi˚s_by_«me
[] = {

238 c⁄° 
PrŸobufCI¡R™ge
 
	g¥Ÿocﬁ__rx_mëad©a__numbî_ønges
[1 + 1] =

243 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	g¥Ÿocﬁ__rx_mëad©a__des¸ùt‹
 =

245 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

250 (
PrŸocﬁ__RxMëad©a
),

252 
¥Ÿocﬁ__rx_mëad©a__fõld_des¸ùt‹s
,

253 
¥Ÿocﬁ__rx_mëad©a__fõld_ödi˚s_by_«me
,

254 1, 
¥Ÿocﬁ__rx_mëad©a__numbî_ønges
,

255 (
PrŸobufCMesßgeInô
Ë
¥Ÿocﬁ__rx_mëad©a__öô
,

256 
NULL
,NULL,NULL

258 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	g¥Ÿocﬁ__tx_c⁄figuøti⁄__fõld_des¸ùt‹s
[1] =

263 
PROTOBUF_C_LABEL_OPTIONAL
,

264 
PROTOBUF_C_TYPE_MESSAGE
,

265 
off£tof
(
PrŸocﬁ__TxC⁄figuøti⁄
, 
¥Ÿocﬁ_ˇ£
),

266 
off£tof
(
PrŸocﬁ__TxC⁄figuøti⁄
, 
l‹aw™
),

267 &
l‹aw™__tx_c⁄figuøti⁄__des¸ùt‹
,

268 
NULL
,

269 0 | 
PROTOBUF_C_FIELD_FLAG_ONEOF
,

270 0,
NULL
,NULL

273 c⁄° 
	g¥Ÿocﬁ__tx_c⁄figuøti⁄__fõld_ödi˚s_by_«me
[] = {

276 c⁄° 
PrŸobufCI¡R™ge
 
	g¥Ÿocﬁ__tx_c⁄figuøti⁄__numbî_ønges
[1 + 1] =

281 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	g¥Ÿocﬁ__tx_c⁄figuøti⁄__des¸ùt‹
 =

283 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

288 (
PrŸocﬁ__TxC⁄figuøti⁄
),

290 
¥Ÿocﬁ__tx_c⁄figuøti⁄__fõld_des¸ùt‹s
,

291 
¥Ÿocﬁ__tx_c⁄figuøti⁄__fõld_ödi˚s_by_«me
,

292 1, 
¥Ÿocﬁ__tx_c⁄figuøti⁄__numbî_ønges
,

293 (
PrŸobufCMesßgeInô
Ë
¥Ÿocﬁ__tx_c⁄figuøti⁄__öô
,

294 
NULL
,NULL,NULL

296 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	g¥Ÿocﬁ__a˘iv©i⁄_mëad©a__fõld_des¸ùt‹s
[1] =

301 
PROTOBUF_C_LABEL_OPTIONAL
,

302 
PROTOBUF_C_TYPE_MESSAGE
,

303 
off£tof
(
PrŸocﬁ__A˘iv©i⁄Mëad©a
, 
¥Ÿocﬁ_ˇ£
),

304 
off£tof
(
PrŸocﬁ__A˘iv©i⁄Mëad©a
, 
l‹aw™
),

305 &
l‹aw™__a˘iv©i⁄_mëad©a__des¸ùt‹
,

306 
NULL
,

307 0 | 
PROTOBUF_C_FIELD_FLAG_ONEOF
,

308 0,
NULL
,NULL

311 c⁄° 
	g¥Ÿocﬁ__a˘iv©i⁄_mëad©a__fõld_ödi˚s_by_«me
[] = {

314 c⁄° 
PrŸobufCI¡R™ge
 
	g¥Ÿocﬁ__a˘iv©i⁄_mëad©a__numbî_ønges
[1 + 1] =

319 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	g¥Ÿocﬁ__a˘iv©i⁄_mëad©a__des¸ùt‹
 =

321 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

326 (
PrŸocﬁ__A˘iv©i⁄Mëad©a
),

328 
¥Ÿocﬁ__a˘iv©i⁄_mëad©a__fõld_des¸ùt‹s
,

329 
¥Ÿocﬁ__a˘iv©i⁄_mëad©a__fõld_ödi˚s_by_«me
,

330 1, 
¥Ÿocﬁ__a˘iv©i⁄_mëad©a__numbî_ønges
,

331 (
PrŸobufCMesßgeInô
Ë
¥Ÿocﬁ__a˘iv©i⁄_mëad©a__öô
,

332 
NULL
,NULL,NULL

	@libttn/protocol.pb-c.h

4 #i‚de‡
PROTOBUF_C_gôhub_2ecom_2fTheThögsNëw‹k_2·ä_2Ápi_2ÂrŸocﬁ_2ÂrŸocﬁ_2ïrŸo__INCLUDED


5 
	#PROTOBUF_C_gôhub_2ecom_2fTheThögsNëw‹k_2·ä_2Ápi_2ÂrŸocﬁ_2ÂrŸocﬁ_2ïrŸo__INCLUDED


	)

7 
	~<¥Ÿobuf-c/¥Ÿobuf-c.h
>

9 
	gPROTOBUF_C__BEGIN_DECLS


11 #i‡
PROTOBUF_C_VERSION_NUMBER
 < 1000000

12 #îr‹ 
This
 
fûe
 
was
 
gíî©ed
 
by
 
a
 
√wî
 
vîsi⁄
 
of
 
¥Ÿoc
-
c
 
which
 
is
 
öcom∑tibÀ
 
wôh
 
your
 
lib¥Ÿobuf
-¯
hódîs
. 
PÀa£
 
upd©e
 your headers.

13 #ñi‡1002001 < 
PROTOBUF_C_MIN_COMPILER_VERSION


14 #îr‹ 
This
 
fûe
 
was
 
gíî©ed
 
by
 
™
 
ﬁdî
 
vîsi⁄
 
of
 
¥Ÿoc
-
c
 
which
 
is
 
öcom∑tibÀ
 
wôh
 
your
 
lib¥Ÿobuf
-¯
hódîs
. 
PÀa£
 
ªgíî©e
 
this
 fûêwôh 
a
 
√wî
 version ofÖrotoc-c.

17 
	~"l‹aw™.pb-c.h
"

19 
_PrŸocﬁ__Mesßge
 
	tPrŸocﬁ__Mesßge
;

20 
_PrŸocﬁ__RxMëad©a
 
	tPrŸocﬁ__RxMëad©a
;

21 
_PrŸocﬁ__TxC⁄figuøti⁄
 
	tPrŸocﬁ__TxC⁄figuøti⁄
;

22 
_PrŸocﬁ__A˘iv©i⁄Mëad©a
 
	tPrŸocﬁ__A˘iv©i⁄Mëad©a
;

31 
	mPROTOCOL__MESSAGE__PROTOCOL__NOT_SET
 = 0,

32 
	mPROTOCOL__MESSAGE__PROTOCOL_LORAWAN
 = 1,

33 } 
	tPrŸocﬁ__Mesßge__PrŸocﬁCa£
;

35 
	s_PrŸocﬁ__Mesßge


37 
PrŸobufCMesßge
 
	mba£
;

38 
PrŸocﬁ__Mesßge__PrŸocﬁCa£
 
	m¥Ÿocﬁ_ˇ£
;

40 
L‹aw™__Mesßge
 *
	ml‹aw™
;

43 
	#PROTOCOL__MESSAGE__INIT
 \

44 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
¥Ÿocﬁ__mesßge__des¸ùt‹
) \

45 , 
PROTOCOL__MESSAGE__PROTOCOL__NOT_SET
, {0} }

	)

49 
	mPROTOCOL__RX_METADATA__PROTOCOL__NOT_SET
 = 0,

50 
	mPROTOCOL__RX_METADATA__PROTOCOL_LORAWAN
 = 1,

51 } 
	tPrŸocﬁ__RxMëad©a__PrŸocﬁCa£
;

53 
	s_PrŸocﬁ__RxMëad©a


55 
PrŸobufCMesßge
 
	mba£
;

56 
PrŸocﬁ__RxMëad©a__PrŸocﬁCa£
 
	m¥Ÿocﬁ_ˇ£
;

58 
L‹aw™__Mëad©a
 *
	ml‹aw™
;

61 
	#PROTOCOL__RX_METADATA__INIT
 \

62 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
¥Ÿocﬁ__rx_mëad©a__des¸ùt‹
) \

63 , 
PROTOCOL__RX_METADATA__PROTOCOL__NOT_SET
, {0} }

	)

67 
	mPROTOCOL__TX_CONFIGURATION__PROTOCOL__NOT_SET
 = 0,

68 
	mPROTOCOL__TX_CONFIGURATION__PROTOCOL_LORAWAN
 = 1,

69 } 
	tPrŸocﬁ__TxC⁄figuøti⁄__PrŸocﬁCa£
;

71 
	s_PrŸocﬁ__TxC⁄figuøti⁄


73 
PrŸobufCMesßge
 
	mba£
;

74 
PrŸocﬁ__TxC⁄figuøti⁄__PrŸocﬁCa£
 
	m¥Ÿocﬁ_ˇ£
;

76 
L‹aw™__TxC⁄figuøti⁄
 *
	ml‹aw™
;

79 
	#PROTOCOL__TX_CONFIGURATION__INIT
 \

80 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
¥Ÿocﬁ__tx_c⁄figuøti⁄__des¸ùt‹
) \

81 , 
PROTOCOL__TX_CONFIGURATION__PROTOCOL__NOT_SET
, {0} }

	)

85 
	mPROTOCOL__ACTIVATION_METADATA__PROTOCOL__NOT_SET
 = 0,

86 
	mPROTOCOL__ACTIVATION_METADATA__PROTOCOL_LORAWAN
 = 1,

87 } 
	tPrŸocﬁ__A˘iv©i⁄Mëad©a__PrŸocﬁCa£
;

89 
	s_PrŸocﬁ__A˘iv©i⁄Mëad©a


91 
PrŸobufCMesßge
 
	mba£
;

92 
PrŸocﬁ__A˘iv©i⁄Mëad©a__PrŸocﬁCa£
 
	m¥Ÿocﬁ_ˇ£
;

94 
L‹aw™__A˘iv©i⁄Mëad©a
 *
	ml‹aw™
;

97 
	#PROTOCOL__ACTIVATION_METADATA__INIT
 \

98 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
¥Ÿocﬁ__a˘iv©i⁄_mëad©a__des¸ùt‹
) \

99 , 
PROTOCOL__ACTIVATION_METADATA__PROTOCOL__NOT_SET
, {0} }

	)

103 
	g¥Ÿocﬁ__mesßge__öô


104 (
PrŸocﬁ__Mesßge
 *
	gmesßge
);

105 
size_t
 
	g¥Ÿocﬁ__mesßge__gë_∑cked_size


106 (c⁄° 
PrŸocﬁ__Mesßge
 *
	gmesßge
);

107 
size_t
 
	g¥Ÿocﬁ__mesßge__∑ck


108 (c⁄° 
PrŸocﬁ__Mesßge
 *
	gmesßge
,

109 
uöt8_t
 *
	gout
);

110 
size_t
 
	g¥Ÿocﬁ__mesßge__∑ck_to_buf„r


111 (c⁄° 
PrŸocﬁ__Mesßge
 *
	gmesßge
,

112 
PrŸobufCBuf„r
 *
	gbuf„r
);

113 
PrŸocﬁ__Mesßge
 *

114 
	g¥Ÿocﬁ__mesßge__u≈ack


115 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

116 
size_t
 
	gÀn
,

117 c⁄° 
uöt8_t
 *
	gd©a
);

118 
	g¥Ÿocﬁ__mesßge__‰ì_u≈acked


119 (
PrŸocﬁ__Mesßge
 *
	gmesßge
,

120 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
);

122 
	g¥Ÿocﬁ__rx_mëad©a__öô


123 (
PrŸocﬁ__RxMëad©a
 *
	gmesßge
);

124 
size_t
 
	g¥Ÿocﬁ__rx_mëad©a__gë_∑cked_size


125 (c⁄° 
PrŸocﬁ__RxMëad©a
 *
	gmesßge
);

126 
size_t
 
	g¥Ÿocﬁ__rx_mëad©a__∑ck


127 (c⁄° 
PrŸocﬁ__RxMëad©a
 *
	gmesßge
,

128 
uöt8_t
 *
	gout
);

129 
size_t
 
	g¥Ÿocﬁ__rx_mëad©a__∑ck_to_buf„r


130 (c⁄° 
PrŸocﬁ__RxMëad©a
 *
	gmesßge
,

131 
PrŸobufCBuf„r
 *
	gbuf„r
);

132 
PrŸocﬁ__RxMëad©a
 *

133 
	g¥Ÿocﬁ__rx_mëad©a__u≈ack


134 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

135 
size_t
 
	gÀn
,

136 c⁄° 
uöt8_t
 *
	gd©a
);

137 
	g¥Ÿocﬁ__rx_mëad©a__‰ì_u≈acked


138 (
PrŸocﬁ__RxMëad©a
 *
	gmesßge
,

139 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
);

141 
	g¥Ÿocﬁ__tx_c⁄figuøti⁄__öô


142 (
PrŸocﬁ__TxC⁄figuøti⁄
 *
	gmesßge
);

143 
size_t
 
	g¥Ÿocﬁ__tx_c⁄figuøti⁄__gë_∑cked_size


144 (c⁄° 
PrŸocﬁ__TxC⁄figuøti⁄
 *
	gmesßge
);

145 
size_t
 
	g¥Ÿocﬁ__tx_c⁄figuøti⁄__∑ck


146 (c⁄° 
PrŸocﬁ__TxC⁄figuøti⁄
 *
	gmesßge
,

147 
uöt8_t
 *
	gout
);

148 
size_t
 
	g¥Ÿocﬁ__tx_c⁄figuøti⁄__∑ck_to_buf„r


149 (c⁄° 
PrŸocﬁ__TxC⁄figuøti⁄
 *
	gmesßge
,

150 
PrŸobufCBuf„r
 *
	gbuf„r
);

151 
PrŸocﬁ__TxC⁄figuøti⁄
 *

152 
	g¥Ÿocﬁ__tx_c⁄figuøti⁄__u≈ack


153 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

154 
size_t
 
	gÀn
,

155 c⁄° 
uöt8_t
 *
	gd©a
);

156 
	g¥Ÿocﬁ__tx_c⁄figuøti⁄__‰ì_u≈acked


157 (
PrŸocﬁ__TxC⁄figuøti⁄
 *
	gmesßge
,

158 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
);

160 
	g¥Ÿocﬁ__a˘iv©i⁄_mëad©a__öô


161 (
PrŸocﬁ__A˘iv©i⁄Mëad©a
 *
	gmesßge
);

162 
size_t
 
	g¥Ÿocﬁ__a˘iv©i⁄_mëad©a__gë_∑cked_size


163 (c⁄° 
PrŸocﬁ__A˘iv©i⁄Mëad©a
 *
	gmesßge
);

164 
size_t
 
	g¥Ÿocﬁ__a˘iv©i⁄_mëad©a__∑ck


165 (c⁄° 
PrŸocﬁ__A˘iv©i⁄Mëad©a
 *
	gmesßge
,

166 
uöt8_t
 *
	gout
);

167 
size_t
 
	g¥Ÿocﬁ__a˘iv©i⁄_mëad©a__∑ck_to_buf„r


168 (c⁄° 
PrŸocﬁ__A˘iv©i⁄Mëad©a
 *
	gmesßge
,

169 
PrŸobufCBuf„r
 *
	gbuf„r
);

170 
PrŸocﬁ__A˘iv©i⁄Mëad©a
 *

171 
	g¥Ÿocﬁ__a˘iv©i⁄_mëad©a__u≈ack


172 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

173 
size_t
 
	gÀn
,

174 c⁄° 
uöt8_t
 *
	gd©a
);

175 
	g¥Ÿocﬁ__a˘iv©i⁄_mëad©a__‰ì_u≈acked


176 (
PrŸocﬁ__A˘iv©i⁄Mëad©a
 *
	gmesßge
,

177 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
);

180 (*
	tPrŸocﬁ__Mesßge_Closuª
)

181 (c⁄° 
	tPrŸocﬁ__Mesßge
 *
	tmesßge
,

182 *
	t˛osuª_d©a
);

183 (*
	tPrŸocﬁ__RxMëad©a_Closuª
)

184 (c⁄° 
	tPrŸocﬁ__RxMëad©a
 *
	tmesßge
,

185 *
	t˛osuª_d©a
);

186 (*
	tPrŸocﬁ__TxC⁄figuøti⁄_Closuª
)

187 (c⁄° 
	tPrŸocﬁ__TxC⁄figuøti⁄
 *
	tmesßge
,

188 *
	t˛osuª_d©a
);

189 (*
	tPrŸocﬁ__A˘iv©i⁄Mëad©a_Closuª
)

190 (c⁄° 
	tPrŸocﬁ__A˘iv©i⁄Mëad©a
 *
	tmesßge
,

191 *
	t˛osuª_d©a
);

198 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
¥Ÿocﬁ__mesßge__des¸ùt‹
;

199 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
¥Ÿocﬁ__rx_mëad©a__des¸ùt‹
;

200 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
¥Ÿocﬁ__tx_c⁄figuøti⁄__des¸ùt‹
;

201 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
¥Ÿocﬁ__a˘iv©i⁄_mëad©a__des¸ùt‹
;

203 
PROTOBUF_C__END_DECLS


	@libttn/router.pb-c.c

5 #i‚de‡
PROTOBUF_C__NO_DEPRECATED


6 
	#PROTOBUF_C__NO_DEPRECATED


	)

9 
	~"rouãr.pb-c.h
"

10 
	grouãr__subs¸ibe_ªque°__öô


11 (
Rouãr__Subs¸ibeReque°
 *
	gmesßge
)

13 
Rouãr__Subs¸ibeReque°
 
	göô_vÆue
 = 
ROUTER__SUBSCRIBE_REQUEST__INIT
;

14 *
	gmesßge
 = 
öô_vÆue
;

16 
size_t
 
	grouãr__subs¸ibe_ªque°__gë_∑cked_size


17 (c⁄° 
Rouãr__Subs¸ibeReque°
 *
	gmesßge
)

19 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
rouãr__subs¸ibe_ªque°__des¸ùt‹
);

20  
¥Ÿobuf_c_mesßge_gë_∑cked_size
 ((c⁄° 
PrŸobufCMesßge
*)(
mesßge
));

22 
size_t
 
	grouãr__subs¸ibe_ªque°__∑ck


23 (c⁄° 
Rouãr__Subs¸ibeReque°
 *
	gmesßge
,

24 
uöt8_t
 *
	gout
)

26 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
rouãr__subs¸ibe_ªque°__des¸ùt‹
);

27  
¥Ÿobuf_c_mesßge_∑ck
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
out
);

29 
size_t
 
	grouãr__subs¸ibe_ªque°__∑ck_to_buf„r


30 (c⁄° 
Rouãr__Subs¸ibeReque°
 *
	gmesßge
,

31 
PrŸobufCBuf„r
 *
	gbuf„r
)

33 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
rouãr__subs¸ibe_ªque°__des¸ùt‹
);

34  
¥Ÿobuf_c_mesßge_∑ck_to_buf„r
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
buf„r
);

36 
Rouãr__Subs¸ibeReque°
 *

37 
	grouãr__subs¸ibe_ªque°__u≈ack


38 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

39 
size_t
 
	gÀn
,

40 c⁄° 
uöt8_t
 *
	gd©a
)

42  (
	gRouãr__Subs¸ibeReque°
 *)

43 
¥Ÿobuf_c_mesßge_u≈ack
 (&
rouãr__subs¸ibe_ªque°__des¸ùt‹
,

44 
Æloˇt‹
, 
Àn
, 
d©a
);

46 
	grouãr__subs¸ibe_ªque°__‰ì_u≈acked


47 (
Rouãr__Subs¸ibeReque°
 *
	gmesßge
,

48 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
)

50 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
rouãr__subs¸ibe_ªque°__des¸ùt‹
);

51 
¥Ÿobuf_c_mesßge_‰ì_u≈acked
 ((
PrŸobufCMesßge
*)
mesßge
, 
Æloˇt‹
);

53 
	grouãr__u∂ök_mesßge__öô


54 (
Rouãr__U∂ökMesßge
 *
	gmesßge
)

56 
Rouãr__U∂ökMesßge
 
	göô_vÆue
 = 
ROUTER__UPLINK_MESSAGE__INIT
;

57 *
	gmesßge
 = 
öô_vÆue
;

59 
size_t
 
	grouãr__u∂ök_mesßge__gë_∑cked_size


60 (c⁄° 
Rouãr__U∂ökMesßge
 *
	gmesßge
)

62 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
rouãr__u∂ök_mesßge__des¸ùt‹
);

63  
¥Ÿobuf_c_mesßge_gë_∑cked_size
 ((c⁄° 
PrŸobufCMesßge
*)(
mesßge
));

65 
size_t
 
	grouãr__u∂ök_mesßge__∑ck


66 (c⁄° 
Rouãr__U∂ökMesßge
 *
	gmesßge
,

67 
uöt8_t
 *
	gout
)

69 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
rouãr__u∂ök_mesßge__des¸ùt‹
);

70  
¥Ÿobuf_c_mesßge_∑ck
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
out
);

72 
size_t
 
	grouãr__u∂ök_mesßge__∑ck_to_buf„r


73 (c⁄° 
Rouãr__U∂ökMesßge
 *
	gmesßge
,

74 
PrŸobufCBuf„r
 *
	gbuf„r
)

76 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
rouãr__u∂ök_mesßge__des¸ùt‹
);

77  
¥Ÿobuf_c_mesßge_∑ck_to_buf„r
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
buf„r
);

79 
Rouãr__U∂ökMesßge
 *

80 
	grouãr__u∂ök_mesßge__u≈ack


81 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

82 
size_t
 
	gÀn
,

83 c⁄° 
uöt8_t
 *
	gd©a
)

85  (
	gRouãr__U∂ökMesßge
 *)

86 
¥Ÿobuf_c_mesßge_u≈ack
 (&
rouãr__u∂ök_mesßge__des¸ùt‹
,

87 
Æloˇt‹
, 
Àn
, 
d©a
);

89 
	grouãr__u∂ök_mesßge__‰ì_u≈acked


90 (
Rouãr__U∂ökMesßge
 *
	gmesßge
,

91 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
)

93 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
rouãr__u∂ök_mesßge__des¸ùt‹
);

94 
¥Ÿobuf_c_mesßge_‰ì_u≈acked
 ((
PrŸobufCMesßge
*)
mesßge
, 
Æloˇt‹
);

96 
	grouãr__dow∆ök_mesßge__öô


97 (
Rouãr__Dow∆ökMesßge
 *
	gmesßge
)

99 
Rouãr__Dow∆ökMesßge
 
	göô_vÆue
 = 
ROUTER__DOWNLINK_MESSAGE__INIT
;

100 *
	gmesßge
 = 
öô_vÆue
;

102 
size_t
 
	grouãr__dow∆ök_mesßge__gë_∑cked_size


103 (c⁄° 
Rouãr__Dow∆ökMesßge
 *
	gmesßge
)

105 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
rouãr__dow∆ök_mesßge__des¸ùt‹
);

106  
¥Ÿobuf_c_mesßge_gë_∑cked_size
 ((c⁄° 
PrŸobufCMesßge
*)(
mesßge
));

108 
size_t
 
	grouãr__dow∆ök_mesßge__∑ck


109 (c⁄° 
Rouãr__Dow∆ökMesßge
 *
	gmesßge
,

110 
uöt8_t
 *
	gout
)

112 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
rouãr__dow∆ök_mesßge__des¸ùt‹
);

113  
¥Ÿobuf_c_mesßge_∑ck
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
out
);

115 
size_t
 
	grouãr__dow∆ök_mesßge__∑ck_to_buf„r


116 (c⁄° 
Rouãr__Dow∆ökMesßge
 *
	gmesßge
,

117 
PrŸobufCBuf„r
 *
	gbuf„r
)

119 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
rouãr__dow∆ök_mesßge__des¸ùt‹
);

120  
¥Ÿobuf_c_mesßge_∑ck_to_buf„r
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
buf„r
);

122 
Rouãr__Dow∆ökMesßge
 *

123 
	grouãr__dow∆ök_mesßge__u≈ack


124 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

125 
size_t
 
	gÀn
,

126 c⁄° 
uöt8_t
 *
	gd©a
)

128  (
	gRouãr__Dow∆ökMesßge
 *)

129 
¥Ÿobuf_c_mesßge_u≈ack
 (&
rouãr__dow∆ök_mesßge__des¸ùt‹
,

130 
Æloˇt‹
, 
Àn
, 
d©a
);

132 
	grouãr__dow∆ök_mesßge__‰ì_u≈acked


133 (
Rouãr__Dow∆ökMesßge
 *
	gmesßge
,

134 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
)

136 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
rouãr__dow∆ök_mesßge__des¸ùt‹
);

137 
¥Ÿobuf_c_mesßge_‰ì_u≈acked
 ((
PrŸobufCMesßge
*)
mesßge
, 
Æloˇt‹
);

139 
	grouãr__devi˚_a˘iv©i⁄_ªque°__öô


140 (
Rouãr__Devi˚A˘iv©i⁄Reque°
 *
	gmesßge
)

142 
Rouãr__Devi˚A˘iv©i⁄Reque°
 
	göô_vÆue
 = 
ROUTER__DEVICE_ACTIVATION_REQUEST__INIT
;

143 *
	gmesßge
 = 
öô_vÆue
;

145 
size_t
 
	grouãr__devi˚_a˘iv©i⁄_ªque°__gë_∑cked_size


146 (c⁄° 
Rouãr__Devi˚A˘iv©i⁄Reque°
 *
	gmesßge
)

148 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
rouãr__devi˚_a˘iv©i⁄_ªque°__des¸ùt‹
);

149  
¥Ÿobuf_c_mesßge_gë_∑cked_size
 ((c⁄° 
PrŸobufCMesßge
*)(
mesßge
));

151 
size_t
 
	grouãr__devi˚_a˘iv©i⁄_ªque°__∑ck


152 (c⁄° 
Rouãr__Devi˚A˘iv©i⁄Reque°
 *
	gmesßge
,

153 
uöt8_t
 *
	gout
)

155 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
rouãr__devi˚_a˘iv©i⁄_ªque°__des¸ùt‹
);

156  
¥Ÿobuf_c_mesßge_∑ck
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
out
);

158 
size_t
 
	grouãr__devi˚_a˘iv©i⁄_ªque°__∑ck_to_buf„r


159 (c⁄° 
Rouãr__Devi˚A˘iv©i⁄Reque°
 *
	gmesßge
,

160 
PrŸobufCBuf„r
 *
	gbuf„r
)

162 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
rouãr__devi˚_a˘iv©i⁄_ªque°__des¸ùt‹
);

163  
¥Ÿobuf_c_mesßge_∑ck_to_buf„r
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
buf„r
);

165 
Rouãr__Devi˚A˘iv©i⁄Reque°
 *

166 
	grouãr__devi˚_a˘iv©i⁄_ªque°__u≈ack


167 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

168 
size_t
 
	gÀn
,

169 c⁄° 
uöt8_t
 *
	gd©a
)

171  (
	gRouãr__Devi˚A˘iv©i⁄Reque°
 *)

172 
¥Ÿobuf_c_mesßge_u≈ack
 (&
rouãr__devi˚_a˘iv©i⁄_ªque°__des¸ùt‹
,

173 
Æloˇt‹
, 
Àn
, 
d©a
);

175 
	grouãr__devi˚_a˘iv©i⁄_ªque°__‰ì_u≈acked


176 (
Rouãr__Devi˚A˘iv©i⁄Reque°
 *
	gmesßge
,

177 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
)

179 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
rouãr__devi˚_a˘iv©i⁄_ªque°__des¸ùt‹
);

180 
¥Ÿobuf_c_mesßge_‰ì_u≈acked
 ((
PrŸobufCMesßge
*)
mesßge
, 
Æloˇt‹
);

182 
	grouãr__devi˚_a˘iv©i⁄_ª•⁄£__öô


183 (
Rouãr__Devi˚A˘iv©i⁄Re•⁄£
 *
	gmesßge
)

185 
Rouãr__Devi˚A˘iv©i⁄Re•⁄£
 
	göô_vÆue
 = 
ROUTER__DEVICE_ACTIVATION_RESPONSE__INIT
;

186 *
	gmesßge
 = 
öô_vÆue
;

188 
size_t
 
	grouãr__devi˚_a˘iv©i⁄_ª•⁄£__gë_∑cked_size


189 (c⁄° 
Rouãr__Devi˚A˘iv©i⁄Re•⁄£
 *
	gmesßge
)

191 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
rouãr__devi˚_a˘iv©i⁄_ª•⁄£__des¸ùt‹
);

192  
¥Ÿobuf_c_mesßge_gë_∑cked_size
 ((c⁄° 
PrŸobufCMesßge
*)(
mesßge
));

194 
size_t
 
	grouãr__devi˚_a˘iv©i⁄_ª•⁄£__∑ck


195 (c⁄° 
Rouãr__Devi˚A˘iv©i⁄Re•⁄£
 *
	gmesßge
,

196 
uöt8_t
 *
	gout
)

198 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
rouãr__devi˚_a˘iv©i⁄_ª•⁄£__des¸ùt‹
);

199  
¥Ÿobuf_c_mesßge_∑ck
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
out
);

201 
size_t
 
	grouãr__devi˚_a˘iv©i⁄_ª•⁄£__∑ck_to_buf„r


202 (c⁄° 
Rouãr__Devi˚A˘iv©i⁄Re•⁄£
 *
	gmesßge
,

203 
PrŸobufCBuf„r
 *
	gbuf„r
)

205 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
rouãr__devi˚_a˘iv©i⁄_ª•⁄£__des¸ùt‹
);

206  
¥Ÿobuf_c_mesßge_∑ck_to_buf„r
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
buf„r
);

208 
Rouãr__Devi˚A˘iv©i⁄Re•⁄£
 *

209 
	grouãr__devi˚_a˘iv©i⁄_ª•⁄£__u≈ack


210 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

211 
size_t
 
	gÀn
,

212 c⁄° 
uöt8_t
 *
	gd©a
)

214  (
	gRouãr__Devi˚A˘iv©i⁄Re•⁄£
 *)

215 
¥Ÿobuf_c_mesßge_u≈ack
 (&
rouãr__devi˚_a˘iv©i⁄_ª•⁄£__des¸ùt‹
,

216 
Æloˇt‹
, 
Àn
, 
d©a
);

218 
	grouãr__devi˚_a˘iv©i⁄_ª•⁄£__‰ì_u≈acked


219 (
Rouãr__Devi˚A˘iv©i⁄Re•⁄£
 *
	gmesßge
,

220 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
)

222 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
rouãr__devi˚_a˘iv©i⁄_ª•⁄£__des¸ùt‹
);

223 
¥Ÿobuf_c_mesßge_‰ì_u≈acked
 ((
PrŸobufCMesßge
*)
mesßge
, 
Æloˇt‹
);

225 
	grouãr__g©eway_°©us_ªque°__öô


226 (
Rouãr__G©ewaySètusReque°
 *
	gmesßge
)

228 
Rouãr__G©ewaySètusReque°
 
	göô_vÆue
 = 
ROUTER__GATEWAY_STATUS_REQUEST__INIT
;

229 *
	gmesßge
 = 
öô_vÆue
;

231 
size_t
 
	grouãr__g©eway_°©us_ªque°__gë_∑cked_size


232 (c⁄° 
Rouãr__G©ewaySètusReque°
 *
	gmesßge
)

234 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
rouãr__g©eway_°©us_ªque°__des¸ùt‹
);

235  
¥Ÿobuf_c_mesßge_gë_∑cked_size
 ((c⁄° 
PrŸobufCMesßge
*)(
mesßge
));

237 
size_t
 
	grouãr__g©eway_°©us_ªque°__∑ck


238 (c⁄° 
Rouãr__G©ewaySètusReque°
 *
	gmesßge
,

239 
uöt8_t
 *
	gout
)

241 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
rouãr__g©eway_°©us_ªque°__des¸ùt‹
);

242  
¥Ÿobuf_c_mesßge_∑ck
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
out
);

244 
size_t
 
	grouãr__g©eway_°©us_ªque°__∑ck_to_buf„r


245 (c⁄° 
Rouãr__G©ewaySètusReque°
 *
	gmesßge
,

246 
PrŸobufCBuf„r
 *
	gbuf„r
)

248 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
rouãr__g©eway_°©us_ªque°__des¸ùt‹
);

249  
¥Ÿobuf_c_mesßge_∑ck_to_buf„r
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
buf„r
);

251 
Rouãr__G©ewaySètusReque°
 *

252 
	grouãr__g©eway_°©us_ªque°__u≈ack


253 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

254 
size_t
 
	gÀn
,

255 c⁄° 
uöt8_t
 *
	gd©a
)

257  (
	gRouãr__G©ewaySètusReque°
 *)

258 
¥Ÿobuf_c_mesßge_u≈ack
 (&
rouãr__g©eway_°©us_ªque°__des¸ùt‹
,

259 
Æloˇt‹
, 
Àn
, 
d©a
);

261 
	grouãr__g©eway_°©us_ªque°__‰ì_u≈acked


262 (
Rouãr__G©ewaySètusReque°
 *
	gmesßge
,

263 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
)

265 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
rouãr__g©eway_°©us_ªque°__des¸ùt‹
);

266 
¥Ÿobuf_c_mesßge_‰ì_u≈acked
 ((
PrŸobufCMesßge
*)
mesßge
, 
Æloˇt‹
);

268 
	grouãr__g©eway_°©us_ª•⁄£__öô


269 (
Rouãr__G©ewaySètusRe•⁄£
 *
	gmesßge
)

271 
Rouãr__G©ewaySètusRe•⁄£
 
	göô_vÆue
 = 
ROUTER__GATEWAY_STATUS_RESPONSE__INIT
;

272 *
	gmesßge
 = 
öô_vÆue
;

274 
size_t
 
	grouãr__g©eway_°©us_ª•⁄£__gë_∑cked_size


275 (c⁄° 
Rouãr__G©ewaySètusRe•⁄£
 *
	gmesßge
)

277 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
rouãr__g©eway_°©us_ª•⁄£__des¸ùt‹
);

278  
¥Ÿobuf_c_mesßge_gë_∑cked_size
 ((c⁄° 
PrŸobufCMesßge
*)(
mesßge
));

280 
size_t
 
	grouãr__g©eway_°©us_ª•⁄£__∑ck


281 (c⁄° 
Rouãr__G©ewaySètusRe•⁄£
 *
	gmesßge
,

282 
uöt8_t
 *
	gout
)

284 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
rouãr__g©eway_°©us_ª•⁄£__des¸ùt‹
);

285  
¥Ÿobuf_c_mesßge_∑ck
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
out
);

287 
size_t
 
	grouãr__g©eway_°©us_ª•⁄£__∑ck_to_buf„r


288 (c⁄° 
Rouãr__G©ewaySètusRe•⁄£
 *
	gmesßge
,

289 
PrŸobufCBuf„r
 *
	gbuf„r
)

291 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
rouãr__g©eway_°©us_ª•⁄£__des¸ùt‹
);

292  
¥Ÿobuf_c_mesßge_∑ck_to_buf„r
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
buf„r
);

294 
Rouãr__G©ewaySètusRe•⁄£
 *

295 
	grouãr__g©eway_°©us_ª•⁄£__u≈ack


296 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

297 
size_t
 
	gÀn
,

298 c⁄° 
uöt8_t
 *
	gd©a
)

300  (
	gRouãr__G©ewaySètusRe•⁄£
 *)

301 
¥Ÿobuf_c_mesßge_u≈ack
 (&
rouãr__g©eway_°©us_ª•⁄£__des¸ùt‹
,

302 
Æloˇt‹
, 
Àn
, 
d©a
);

304 
	grouãr__g©eway_°©us_ª•⁄£__‰ì_u≈acked


305 (
Rouãr__G©ewaySètusRe•⁄£
 *
	gmesßge
,

306 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
)

308 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
rouãr__g©eway_°©us_ª•⁄£__des¸ùt‹
);

309 
¥Ÿobuf_c_mesßge_‰ì_u≈acked
 ((
PrŸobufCMesßge
*)
mesßge
, 
Æloˇt‹
);

311 
	grouãr__°©us_ªque°__öô


312 (
Rouãr__SètusReque°
 *
	gmesßge
)

314 
Rouãr__SètusReque°
 
	göô_vÆue
 = 
ROUTER__STATUS_REQUEST__INIT
;

315 *
	gmesßge
 = 
öô_vÆue
;

317 
size_t
 
	grouãr__°©us_ªque°__gë_∑cked_size


318 (c⁄° 
Rouãr__SètusReque°
 *
	gmesßge
)

320 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
rouãr__°©us_ªque°__des¸ùt‹
);

321  
¥Ÿobuf_c_mesßge_gë_∑cked_size
 ((c⁄° 
PrŸobufCMesßge
*)(
mesßge
));

323 
size_t
 
	grouãr__°©us_ªque°__∑ck


324 (c⁄° 
Rouãr__SètusReque°
 *
	gmesßge
,

325 
uöt8_t
 *
	gout
)

327 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
rouãr__°©us_ªque°__des¸ùt‹
);

328  
¥Ÿobuf_c_mesßge_∑ck
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
out
);

330 
size_t
 
	grouãr__°©us_ªque°__∑ck_to_buf„r


331 (c⁄° 
Rouãr__SètusReque°
 *
	gmesßge
,

332 
PrŸobufCBuf„r
 *
	gbuf„r
)

334 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
rouãr__°©us_ªque°__des¸ùt‹
);

335  
¥Ÿobuf_c_mesßge_∑ck_to_buf„r
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
buf„r
);

337 
Rouãr__SètusReque°
 *

338 
	grouãr__°©us_ªque°__u≈ack


339 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

340 
size_t
 
	gÀn
,

341 c⁄° 
uöt8_t
 *
	gd©a
)

343  (
	gRouãr__SètusReque°
 *)

344 
¥Ÿobuf_c_mesßge_u≈ack
 (&
rouãr__°©us_ªque°__des¸ùt‹
,

345 
Æloˇt‹
, 
Àn
, 
d©a
);

347 
	grouãr__°©us_ªque°__‰ì_u≈acked


348 (
Rouãr__SètusReque°
 *
	gmesßge
,

349 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
)

351 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
rouãr__°©us_ªque°__des¸ùt‹
);

352 
¥Ÿobuf_c_mesßge_‰ì_u≈acked
 ((
PrŸobufCMesßge
*)
mesßge
, 
Æloˇt‹
);

354 
	grouãr__°©us__öô


355 (
Rouãr__Sètus
 *
	gmesßge
)

357 
Rouãr__Sètus
 
	göô_vÆue
 = 
ROUTER__STATUS__INIT
;

358 *
	gmesßge
 = 
öô_vÆue
;

360 
size_t
 
	grouãr__°©us__gë_∑cked_size


361 (c⁄° 
Rouãr__Sètus
 *
	gmesßge
)

363 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
rouãr__°©us__des¸ùt‹
);

364  
¥Ÿobuf_c_mesßge_gë_∑cked_size
 ((c⁄° 
PrŸobufCMesßge
*)(
mesßge
));

366 
size_t
 
	grouãr__°©us__∑ck


367 (c⁄° 
Rouãr__Sètus
 *
	gmesßge
,

368 
uöt8_t
 *
	gout
)

370 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
rouãr__°©us__des¸ùt‹
);

371  
¥Ÿobuf_c_mesßge_∑ck
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
out
);

373 
size_t
 
	grouãr__°©us__∑ck_to_buf„r


374 (c⁄° 
Rouãr__Sètus
 *
	gmesßge
,

375 
PrŸobufCBuf„r
 *
	gbuf„r
)

377 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
rouãr__°©us__des¸ùt‹
);

378  
¥Ÿobuf_c_mesßge_∑ck_to_buf„r
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
buf„r
);

380 
Rouãr__Sètus
 *

381 
	grouãr__°©us__u≈ack


382 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

383 
size_t
 
	gÀn
,

384 c⁄° 
uöt8_t
 *
	gd©a
)

386  (
	gRouãr__Sètus
 *)

387 
¥Ÿobuf_c_mesßge_u≈ack
 (&
rouãr__°©us__des¸ùt‹
,

388 
Æloˇt‹
, 
Àn
, 
d©a
);

390 
	grouãr__°©us__‰ì_u≈acked


391 (
Rouãr__Sètus
 *
	gmesßge
,

392 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
)

394 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
rouãr__°©us__des¸ùt‹
);

395 
¥Ÿobuf_c_mesßge_‰ì_u≈acked
 ((
PrŸobufCMesßge
*)
mesßge
, 
Æloˇt‹
);

397 
	#rouãr__subs¸ibe_ªque°__fõld_des¸ùt‹s
 
NULL


	)

398 
	#rouãr__subs¸ibe_ªque°__fõld_ödi˚s_by_«me
 
NULL


	)

399 
	#rouãr__subs¸ibe_ªque°__numbî_ønges
 
NULL


	)

400 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	grouãr__subs¸ibe_ªque°__des¸ùt‹
 =

402 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

407 (
Rouãr__Subs¸ibeReque°
),

409 
rouãr__subs¸ibe_ªque°__fõld_des¸ùt‹s
,

410 
rouãr__subs¸ibe_ªque°__fõld_ödi˚s_by_«me
,

411 0, 
rouãr__subs¸ibe_ªque°__numbî_ønges
,

412 (
PrŸobufCMesßgeInô
Ë
rouãr__subs¸ibe_ªque°__öô
,

413 
NULL
,NULL,NULL

415 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	grouãr__u∂ök_mesßge__fõld_des¸ùt‹s
[5] =

420 
PROTOBUF_C_LABEL_OPTIONAL
,

421 
PROTOBUF_C_TYPE_BYTES
,

422 
off£tof
(
Rouãr__U∂ökMesßge
, 
has_∑ylﬂd
),

423 
off£tof
(
Rouãr__U∂ökMesßge
, 
∑ylﬂd
),

424 
NULL
,

425 
NULL
,

427 0,
NULL
,NULL

432 
PROTOBUF_C_LABEL_OPTIONAL
,

433 
PROTOBUF_C_TYPE_MESSAGE
,

435 
off£tof
(
Rouãr__U∂ökMesßge
, 
mesßge
),

436 &
¥Ÿocﬁ__mesßge__des¸ùt‹
,

437 
NULL
,

439 0,
NULL
,NULL

444 
PROTOBUF_C_LABEL_OPTIONAL
,

445 
PROTOBUF_C_TYPE_MESSAGE
,

447 
off£tof
(
Rouãr__U∂ökMesßge
, 
¥Ÿocﬁ_mëad©a
),

448 &
¥Ÿocﬁ__rx_mëad©a__des¸ùt‹
,

449 
NULL
,

451 0,
NULL
,NULL

456 
PROTOBUF_C_LABEL_OPTIONAL
,

457 
PROTOBUF_C_TYPE_MESSAGE
,

459 
off£tof
(
Rouãr__U∂ökMesßge
, 
g©eway_mëad©a
),

460 &
g©eway__rx_mëad©a__des¸ùt‹
,

461 
NULL
,

463 0,
NULL
,NULL

468 
PROTOBUF_C_LABEL_OPTIONAL
,

469 
PROTOBUF_C_TYPE_MESSAGE
,

471 
off£tof
(
Rouãr__U∂ökMesßge
, 
åa˚
),

472 &
åa˚__åa˚__des¸ùt‹
,

473 
NULL
,

475 0,
NULL
,NULL

478 c⁄° 
	grouãr__u∂ök_mesßge__fõld_ödi˚s_by_«me
[] = {

485 c⁄° 
PrŸobufCI¡R™ge
 
	grouãr__u∂ök_mesßge__numbî_ønges
[3 + 1] =

492 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	grouãr__u∂ök_mesßge__des¸ùt‹
 =

494 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

499 (
Rouãr__U∂ökMesßge
),

501 
rouãr__u∂ök_mesßge__fõld_des¸ùt‹s
,

502 
rouãr__u∂ök_mesßge__fõld_ödi˚s_by_«me
,

503 3, 
rouãr__u∂ök_mesßge__numbî_ønges
,

504 (
PrŸobufCMesßgeInô
Ë
rouãr__u∂ök_mesßge__öô
,

505 
NULL
,NULL,NULL

507 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	grouãr__dow∆ök_mesßge__fõld_des¸ùt‹s
[5] =

512 
PROTOBUF_C_LABEL_OPTIONAL
,

513 
PROTOBUF_C_TYPE_BYTES
,

514 
off£tof
(
Rouãr__Dow∆ökMesßge
, 
has_∑ylﬂd
),

515 
off£tof
(
Rouãr__Dow∆ökMesßge
, 
∑ylﬂd
),

516 
NULL
,

517 
NULL
,

519 0,
NULL
,NULL

524 
PROTOBUF_C_LABEL_OPTIONAL
,

525 
PROTOBUF_C_TYPE_MESSAGE
,

527 
off£tof
(
Rouãr__Dow∆ökMesßge
, 
mesßge
),

528 &
¥Ÿocﬁ__mesßge__des¸ùt‹
,

529 
NULL
,

531 0,
NULL
,NULL

536 
PROTOBUF_C_LABEL_OPTIONAL
,

537 
PROTOBUF_C_TYPE_MESSAGE
,

539 
off£tof
(
Rouãr__Dow∆ökMesßge
, 
¥Ÿocﬁ_c⁄figuøti⁄
),

540 &
¥Ÿocﬁ__tx_c⁄figuøti⁄__des¸ùt‹
,

541 
NULL
,

543 0,
NULL
,NULL

548 
PROTOBUF_C_LABEL_OPTIONAL
,

549 
PROTOBUF_C_TYPE_MESSAGE
,

551 
off£tof
(
Rouãr__Dow∆ökMesßge
, 
g©eway_c⁄figuøti⁄
),

552 &
g©eway__tx_c⁄figuøti⁄__des¸ùt‹
,

553 
NULL
,

555 0,
NULL
,NULL

560 
PROTOBUF_C_LABEL_OPTIONAL
,

561 
PROTOBUF_C_TYPE_MESSAGE
,

563 
off£tof
(
Rouãr__Dow∆ökMesßge
, 
åa˚
),

564 &
åa˚__åa˚__des¸ùt‹
,

565 
NULL
,

567 0,
NULL
,NULL

570 c⁄° 
	grouãr__dow∆ök_mesßge__fõld_ödi˚s_by_«me
[] = {

577 c⁄° 
PrŸobufCI¡R™ge
 
	grouãr__dow∆ök_mesßge__numbî_ønges
[3 + 1] =

584 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	grouãr__dow∆ök_mesßge__des¸ùt‹
 =

586 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

591 (
Rouãr__Dow∆ökMesßge
),

593 
rouãr__dow∆ök_mesßge__fõld_des¸ùt‹s
,

594 
rouãr__dow∆ök_mesßge__fõld_ödi˚s_by_«me
,

595 3, 
rouãr__dow∆ök_mesßge__numbî_ønges
,

596 (
PrŸobufCMesßgeInô
Ë
rouãr__dow∆ök_mesßge__öô
,

597 
NULL
,NULL,NULL

599 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	grouãr__devi˚_a˘iv©i⁄_ªque°__fõld_des¸ùt‹s
[8] =

604 
PROTOBUF_C_LABEL_OPTIONAL
,

605 
PROTOBUF_C_TYPE_BYTES
,

606 
off£tof
(
Rouãr__Devi˚A˘iv©i⁄Reque°
, 
has_∑ylﬂd
),

607 
off£tof
(
Rouãr__Devi˚A˘iv©i⁄Reque°
, 
∑ylﬂd
),

608 
NULL
,

609 
NULL
,

611 0,
NULL
,NULL

616 
PROTOBUF_C_LABEL_OPTIONAL
,

617 
PROTOBUF_C_TYPE_MESSAGE
,

619 
off£tof
(
Rouãr__Devi˚A˘iv©i⁄Reque°
, 
mesßge
),

620 &
¥Ÿocﬁ__mesßge__des¸ùt‹
,

621 
NULL
,

623 0,
NULL
,NULL

628 
PROTOBUF_C_LABEL_OPTIONAL
,

629 
PROTOBUF_C_TYPE_BYTES
,

630 
off£tof
(
Rouãr__Devi˚A˘iv©i⁄Reque°
, 
has_dev_eui
),

631 
off£tof
(
Rouãr__Devi˚A˘iv©i⁄Reque°
, 
dev_eui
),

632 
NULL
,

633 
NULL
,

635 0,
NULL
,NULL

640 
PROTOBUF_C_LABEL_OPTIONAL
,

641 
PROTOBUF_C_TYPE_BYTES
,

642 
off£tof
(
Rouãr__Devi˚A˘iv©i⁄Reque°
, 
has_≠p_eui
),

643 
off£tof
(
Rouãr__Devi˚A˘iv©i⁄Reque°
, 
≠p_eui
),

644 
NULL
,

645 
NULL
,

647 0,
NULL
,NULL

652 
PROTOBUF_C_LABEL_OPTIONAL
,

653 
PROTOBUF_C_TYPE_MESSAGE
,

655 
off£tof
(
Rouãr__Devi˚A˘iv©i⁄Reque°
, 
¥Ÿocﬁ_mëad©a
),

656 &
¥Ÿocﬁ__rx_mëad©a__des¸ùt‹
,

657 
NULL
,

659 0,
NULL
,NULL

664 
PROTOBUF_C_LABEL_OPTIONAL
,

665 
PROTOBUF_C_TYPE_MESSAGE
,

667 
off£tof
(
Rouãr__Devi˚A˘iv©i⁄Reque°
, 
g©eway_mëad©a
),

668 &
g©eway__rx_mëad©a__des¸ùt‹
,

669 
NULL
,

671 0,
NULL
,NULL

676 
PROTOBUF_C_LABEL_OPTIONAL
,

677 
PROTOBUF_C_TYPE_MESSAGE
,

679 
off£tof
(
Rouãr__Devi˚A˘iv©i⁄Reque°
, 
a˘iv©i⁄_mëad©a
),

680 &
¥Ÿocﬁ__a˘iv©i⁄_mëad©a__des¸ùt‹
,

681 
NULL
,

683 0,
NULL
,NULL

688 
PROTOBUF_C_LABEL_OPTIONAL
,

689 
PROTOBUF_C_TYPE_MESSAGE
,

691 
off£tof
(
Rouãr__Devi˚A˘iv©i⁄Reque°
, 
åa˚
),

692 &
åa˚__åa˚__des¸ùt‹
,

693 
NULL
,

695 0,
NULL
,NULL

698 c⁄° 
	grouãr__devi˚_a˘iv©i⁄_ªque°__fõld_ödi˚s_by_«me
[] = {

708 c⁄° 
PrŸobufCI¡R™ge
 
	grouãr__devi˚_a˘iv©i⁄_ªque°__numbî_ønges
[4 + 1] =

716 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	grouãr__devi˚_a˘iv©i⁄_ªque°__des¸ùt‹
 =

718 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

723 (
Rouãr__Devi˚A˘iv©i⁄Reque°
),

725 
rouãr__devi˚_a˘iv©i⁄_ªque°__fõld_des¸ùt‹s
,

726 
rouãr__devi˚_a˘iv©i⁄_ªque°__fõld_ödi˚s_by_«me
,

727 4, 
rouãr__devi˚_a˘iv©i⁄_ªque°__numbî_ønges
,

728 (
PrŸobufCMesßgeInô
Ë
rouãr__devi˚_a˘iv©i⁄_ªque°__öô
,

729 
NULL
,NULL,NULL

731 
	#rouãr__devi˚_a˘iv©i⁄_ª•⁄£__fõld_des¸ùt‹s
 
NULL


	)

732 
	#rouãr__devi˚_a˘iv©i⁄_ª•⁄£__fõld_ödi˚s_by_«me
 
NULL


	)

733 
	#rouãr__devi˚_a˘iv©i⁄_ª•⁄£__numbî_ønges
 
NULL


	)

734 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	grouãr__devi˚_a˘iv©i⁄_ª•⁄£__des¸ùt‹
 =

736 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

741 (
Rouãr__Devi˚A˘iv©i⁄Re•⁄£
),

743 
rouãr__devi˚_a˘iv©i⁄_ª•⁄£__fõld_des¸ùt‹s
,

744 
rouãr__devi˚_a˘iv©i⁄_ª•⁄£__fõld_ödi˚s_by_«me
,

745 0, 
rouãr__devi˚_a˘iv©i⁄_ª•⁄£__numbî_ønges
,

746 (
PrŸobufCMesßgeInô
Ë
rouãr__devi˚_a˘iv©i⁄_ª•⁄£__öô
,

747 
NULL
,NULL,NULL

749 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	grouãr__g©eway_°©us_ªque°__fõld_des¸ùt‹s
[1] =

754 
PROTOBUF_C_LABEL_OPTIONAL
,

755 
PROTOBUF_C_TYPE_STRING
,

757 
off£tof
(
Rouãr__G©ewaySètusReque°
, 
g©eway_id
),

758 
NULL
,

759 
NULL
,

761 0,
NULL
,NULL

764 c⁄° 
	grouãr__g©eway_°©us_ªque°__fõld_ödi˚s_by_«me
[] = {

767 c⁄° 
PrŸobufCI¡R™ge
 
	grouãr__g©eway_°©us_ªque°__numbî_ønges
[1 + 1] =

772 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	grouãr__g©eway_°©us_ªque°__des¸ùt‹
 =

774 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

779 (
Rouãr__G©ewaySètusReque°
),

781 
rouãr__g©eway_°©us_ªque°__fõld_des¸ùt‹s
,

782 
rouãr__g©eway_°©us_ªque°__fõld_ödi˚s_by_«me
,

783 1, 
rouãr__g©eway_°©us_ªque°__numbî_ønges
,

784 (
PrŸobufCMesßgeInô
Ë
rouãr__g©eway_°©us_ªque°__öô
,

785 
NULL
,NULL,NULL

787 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	grouãr__g©eway_°©us_ª•⁄£__fõld_des¸ùt‹s
[2] =

792 
PROTOBUF_C_LABEL_OPTIONAL
,

793 
PROTOBUF_C_TYPE_INT64
,

794 
off£tof
(
Rouãr__G©ewaySètusRe•⁄£
, 
has_œ°_£í
),

795 
off£tof
(
Rouãr__G©ewaySètusRe•⁄£
, 
œ°_£í
),

796 
NULL
,

797 
NULL
,

799 0,
NULL
,NULL

804 
PROTOBUF_C_LABEL_OPTIONAL
,

805 
PROTOBUF_C_TYPE_MESSAGE
,

807 
off£tof
(
Rouãr__G©ewaySètusRe•⁄£
, 
°©us
),

808 &
g©eway__°©us__des¸ùt‹
,

809 
NULL
,

811 0,
NULL
,NULL

814 c⁄° 
	grouãr__g©eway_°©us_ª•⁄£__fõld_ödi˚s_by_«me
[] = {

818 c⁄° 
PrŸobufCI¡R™ge
 
	grouãr__g©eway_°©us_ª•⁄£__numbî_ønges
[1 + 1] =

823 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	grouãr__g©eway_°©us_ª•⁄£__des¸ùt‹
 =

825 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

830 (
Rouãr__G©ewaySètusRe•⁄£
),

832 
rouãr__g©eway_°©us_ª•⁄£__fõld_des¸ùt‹s
,

833 
rouãr__g©eway_°©us_ª•⁄£__fõld_ödi˚s_by_«me
,

834 1, 
rouãr__g©eway_°©us_ª•⁄£__numbî_ønges
,

835 (
PrŸobufCMesßgeInô
Ë
rouãr__g©eway_°©us_ª•⁄£__öô
,

836 
NULL
,NULL,NULL

838 
	#rouãr__°©us_ªque°__fõld_des¸ùt‹s
 
NULL


	)

839 
	#rouãr__°©us_ªque°__fõld_ödi˚s_by_«me
 
NULL


	)

840 
	#rouãr__°©us_ªque°__numbî_ønges
 
NULL


	)

841 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	grouãr__°©us_ªque°__des¸ùt‹
 =

843 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

848 (
Rouãr__SètusReque°
),

850 
rouãr__°©us_ªque°__fõld_des¸ùt‹s
,

851 
rouãr__°©us_ªque°__fõld_ödi˚s_by_«me
,

852 0, 
rouãr__°©us_ªque°__numbî_ønges
,

853 (
PrŸobufCMesßgeInô
Ë
rouãr__°©us_ªque°__öô
,

854 
NULL
,NULL,NULL

856 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	grouãr__°©us__fõld_des¸ùt‹s
[8] =

861 
PROTOBUF_C_LABEL_OPTIONAL
,

862 
PROTOBUF_C_TYPE_MESSAGE
,

864 
off£tof
(
Rouãr__Sètus
, 
sy°em
),

865 &
≠i__sy°em_°©s__des¸ùt‹
,

866 
NULL
,

868 0,
NULL
,NULL

873 
PROTOBUF_C_LABEL_OPTIONAL
,

874 
PROTOBUF_C_TYPE_MESSAGE
,

876 
off£tof
(
Rouãr__Sètus
, 
comp⁄ít
),

877 &
≠i__comp⁄ít_°©s__des¸ùt‹
,

878 
NULL
,

880 0,
NULL
,NULL

885 
PROTOBUF_C_LABEL_OPTIONAL
,

886 
PROTOBUF_C_TYPE_MESSAGE
,

888 
off£tof
(
Rouãr__Sètus
, 
g©eway_°©us
),

889 &
≠i__øãs__des¸ùt‹
,

890 
NULL
,

892 0,
NULL
,NULL

897 
PROTOBUF_C_LABEL_OPTIONAL
,

898 
PROTOBUF_C_TYPE_MESSAGE
,

900 
off£tof
(
Rouãr__Sètus
, 
u∂ök
),

901 &
≠i__øãs__des¸ùt‹
,

902 
NULL
,

904 0,
NULL
,NULL

909 
PROTOBUF_C_LABEL_OPTIONAL
,

910 
PROTOBUF_C_TYPE_MESSAGE
,

912 
off£tof
(
Rouãr__Sètus
, 
dow∆ök
),

913 &
≠i__øãs__des¸ùt‹
,

914 
NULL
,

916 0,
NULL
,NULL

921 
PROTOBUF_C_LABEL_OPTIONAL
,

922 
PROTOBUF_C_TYPE_MESSAGE
,

924 
off£tof
(
Rouãr__Sètus
, 
a˘iv©i⁄s
),

925 &
≠i__øãs__des¸ùt‹
,

926 
NULL
,

928 0,
NULL
,NULL

933 
PROTOBUF_C_LABEL_OPTIONAL
,

934 
PROTOBUF_C_TYPE_UINT32
,

935 
off£tof
(
Rouãr__Sètus
, 
has_c⁄√˘ed_g©eways
),

936 
off£tof
(
Rouãr__Sètus
, 
c⁄√˘ed_g©eways
),

937 
NULL
,

938 
NULL
,

940 0,
NULL
,NULL

945 
PROTOBUF_C_LABEL_OPTIONAL
,

946 
PROTOBUF_C_TYPE_UINT32
,

947 
off£tof
(
Rouãr__Sètus
, 
has_c⁄√˘ed_brokîs
),

948 
off£tof
(
Rouãr__Sètus
, 
c⁄√˘ed_brokîs
),

949 
NULL
,

950 
NULL
,

952 0,
NULL
,NULL

955 c⁄° 
	grouãr__°©us__fõld_ödi˚s_by_«me
[] = {

965 c⁄° 
PrŸobufCI¡R™ge
 
	grouãr__°©us__numbî_ønges
[3 + 1] =

972 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	grouãr__°©us__des¸ùt‹
 =

974 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

979 (
Rouãr__Sètus
),

981 
rouãr__°©us__fõld_des¸ùt‹s
,

982 
rouãr__°©us__fõld_ödi˚s_by_«me
,

983 3, 
rouãr__°©us__numbî_ønges
,

984 (
PrŸobufCMesßgeInô
Ë
rouãr__°©us__öô
,

985 
NULL
,NULL,NULL

987 c⁄° 
PrŸobufCMëhodDes¸ùt‹
 
	grouãr__rouãr__mëhod_des¸ùt‹s
[4] =

989 { "G©ewaySètus", &
g©eway__°©us__des¸ùt‹
, &
googÀ__¥Ÿobuf__em±y__des¸ùt‹
 },

990 { "U∂ök", &
rouãr__u∂ök_mesßge__des¸ùt‹
, &
googÀ__¥Ÿobuf__em±y__des¸ùt‹
 },

991 { "Subs¸ibe", &
rouãr__subs¸ibe_ªque°__des¸ùt‹
, &
rouãr__dow∆ök_mesßge__des¸ùt‹
 },

992 { "A˘iv©e", &
rouãr__devi˚_a˘iv©i⁄_ªque°__des¸ùt‹
, &
rouãr__devi˚_a˘iv©i⁄_ª•⁄£__des¸ùt‹
 },

994 c⁄° 
	grouãr__rouãr__mëhod_ödi˚s_by_«me
[] = {

1000 c⁄° 
PrŸobufCSîvi˚Des¸ùt‹
 
	grouãr__rouãr__des¸ùt‹
 =

1002 
PROTOBUF_C__SERVICE_DESCRIPTOR_MAGIC
,

1008 
rouãr__rouãr__mëhod_des¸ùt‹s
,

1009 
rouãr__rouãr__mëhod_ödi˚s_by_«me


1011 
	$rouãr__rouãr__g©eway_°©us
(
PrŸobufCSîvi˚
 *
£rvi˚
,

1012 c⁄° 
G©eway__Sètus
 *
öput
,

1013 
GoogÀ__PrŸobuf__Em±y_Closuª
 
˛osuª
,

1014 *
˛osuª_d©a
)

1016 
	`as£π
(
£rvi˚
->
des¸ùt‹
 =&
rouãr__rouãr__des¸ùt‹
);

1017 
£rvi˚
->
	`övoke
(£rvi˚, 0, (c⁄° 
PrŸobufCMesßge
 *Ë
öput
, (
PrŸobufCClosuª
Ë
˛osuª
, 
˛osuª_d©a
);

1018 
	}
}

1019 
	$rouãr__rouãr__u∂ök
(
PrŸobufCSîvi˚
 *
£rvi˚
,

1020 c⁄° 
Rouãr__U∂ökMesßge
 *
öput
,

1021 
GoogÀ__PrŸobuf__Em±y_Closuª
 
˛osuª
,

1022 *
˛osuª_d©a
)

1024 
	`as£π
(
£rvi˚
->
des¸ùt‹
 =&
rouãr__rouãr__des¸ùt‹
);

1025 
£rvi˚
->
	`övoke
(£rvi˚, 1, (c⁄° 
PrŸobufCMesßge
 *Ë
öput
, (
PrŸobufCClosuª
Ë
˛osuª
, 
˛osuª_d©a
);

1026 
	}
}

1027 
	$rouãr__rouãr__subs¸ibe
(
PrŸobufCSîvi˚
 *
£rvi˚
,

1028 c⁄° 
Rouãr__Subs¸ibeReque°
 *
öput
,

1029 
Rouãr__Dow∆ökMesßge_Closuª
 
˛osuª
,

1030 *
˛osuª_d©a
)

1032 
	`as£π
(
£rvi˚
->
des¸ùt‹
 =&
rouãr__rouãr__des¸ùt‹
);

1033 
£rvi˚
->
	`övoke
(£rvi˚, 2, (c⁄° 
PrŸobufCMesßge
 *Ë
öput
, (
PrŸobufCClosuª
Ë
˛osuª
, 
˛osuª_d©a
);

1034 
	}
}

1035 
	$rouãr__rouãr__a˘iv©e
(
PrŸobufCSîvi˚
 *
£rvi˚
,

1036 c⁄° 
Rouãr__Devi˚A˘iv©i⁄Reque°
 *
öput
,

1037 
Rouãr__Devi˚A˘iv©i⁄Re•⁄£_Closuª
 
˛osuª
,

1038 *
˛osuª_d©a
)

1040 
	`as£π
(
£rvi˚
->
des¸ùt‹
 =&
rouãr__rouãr__des¸ùt‹
);

1041 
£rvi˚
->
	`övoke
(£rvi˚, 3, (c⁄° 
PrŸobufCMesßge
 *Ë
öput
, (
PrŸobufCClosuª
Ë
˛osuª
, 
˛osuª_d©a
);

1042 
	}
}

1043 
	$rouãr__rouãr__öô
 (
Rouãr__Rouãr_Sîvi˚
 *
£rvi˚
,

1044 
Rouãr__Rouãr_Sîvi˚De°roy
 
de°roy
)

1046 
	`¥Ÿobuf_c_£rvi˚_gíî©ed_öô
 (&
£rvi˚
->
ba£
,

1047 &
rouãr__rouãr__des¸ùt‹
,

1048 (
PrŸobufCSîvi˚De°roy
Ë
de°roy
);

1049 
	}
}

1050 c⁄° 
PrŸobufCMëhodDes¸ùt‹
 
	grouãr__rouãr_m™agî__mëhod_des¸ùt‹s
[2] =

1052 { "G©ewaySètus", &
rouãr__g©eway_°©us_ªque°__des¸ùt‹
, &
rouãr__g©eway_°©us_ª•⁄£__des¸ùt‹
 },

1053 { "GëSètus", &
rouãr__°©us_ªque°__des¸ùt‹
, &
rouãr__°©us__des¸ùt‹
 },

1055 c⁄° 
	grouãr__rouãr_m™agî__mëhod_ödi˚s_by_«me
[] = {

1059 c⁄° 
PrŸobufCSîvi˚Des¸ùt‹
 
	grouãr__rouãr_m™agî__des¸ùt‹
 =

1061 
PROTOBUF_C__SERVICE_DESCRIPTOR_MAGIC
,

1067 
rouãr__rouãr_m™agî__mëhod_des¸ùt‹s
,

1068 
rouãr__rouãr_m™agî__mëhod_ödi˚s_by_«me


1070 
	$rouãr__rouãr_m™agî__g©eway_°©us
(
PrŸobufCSîvi˚
 *
£rvi˚
,

1071 c⁄° 
Rouãr__G©ewaySètusReque°
 *
öput
,

1072 
Rouãr__G©ewaySètusRe•⁄£_Closuª
 
˛osuª
,

1073 *
˛osuª_d©a
)

1075 
	`as£π
(
£rvi˚
->
des¸ùt‹
 =&
rouãr__rouãr_m™agî__des¸ùt‹
);

1076 
£rvi˚
->
	`övoke
(£rvi˚, 0, (c⁄° 
PrŸobufCMesßge
 *Ë
öput
, (
PrŸobufCClosuª
Ë
˛osuª
, 
˛osuª_d©a
);

1077 
	}
}

1078 
	$rouãr__rouãr_m™agî__gë_°©us
(
PrŸobufCSîvi˚
 *
£rvi˚
,

1079 c⁄° 
Rouãr__SètusReque°
 *
öput
,

1080 
Rouãr__Sètus_Closuª
 
˛osuª
,

1081 *
˛osuª_d©a
)

1083 
	`as£π
(
£rvi˚
->
des¸ùt‹
 =&
rouãr__rouãr_m™agî__des¸ùt‹
);

1084 
£rvi˚
->
	`övoke
(£rvi˚, 1, (c⁄° 
PrŸobufCMesßge
 *Ë
öput
, (
PrŸobufCClosuª
Ë
˛osuª
, 
˛osuª_d©a
);

1085 
	}
}

1086 
	$rouãr__rouãr_m™agî__öô
 (
Rouãr__RouãrM™agî_Sîvi˚
 *
£rvi˚
,

1087 
Rouãr__RouãrM™agî_Sîvi˚De°roy
 
de°roy
)

1089 
	`¥Ÿobuf_c_£rvi˚_gíî©ed_öô
 (&
£rvi˚
->
ba£
,

1090 &
rouãr__rouãr_m™agî__des¸ùt‹
,

1091 (
PrŸobufCSîvi˚De°roy
Ë
de°roy
);

1092 
	}
}

	@libttn/router.pb-c.h

4 #i‚de‡
PROTOBUF_C_gôhub_2ecom_2fTheThögsNëw‹k_2·ä_2Ápi_2‰ouãr_2‰ouãr_2ïrŸo__INCLUDED


5 
	#PROTOBUF_C_gôhub_2ecom_2fTheThögsNëw‹k_2·ä_2Ápi_2‰ouãr_2‰ouãr_2ïrŸo__INCLUDED


	)

7 
	~<¥Ÿobuf-c/¥Ÿobuf-c.h
>

9 
	gPROTOBUF_C__BEGIN_DECLS


11 #i‡
PROTOBUF_C_VERSION_NUMBER
 < 1000000

12 #îr‹ 
This
 
fûe
 
was
 
gíî©ed
 
by
 
a
 
√wî
 
vîsi⁄
 
of
 
¥Ÿoc
-
c
 
which
 
is
 
öcom∑tibÀ
 
wôh
 
your
 
lib¥Ÿobuf
-¯
hódîs
. 
PÀa£
 
upd©e
 your headers.

13 #ñi‡1002001 < 
PROTOBUF_C_MIN_COMPILER_VERSION


14 #îr‹ 
This
 
fûe
 
was
 
gíî©ed
 
by
 
™
 
ﬁdî
 
vîsi⁄
 
of
 
¥Ÿoc
-
c
 
which
 
is
 
öcom∑tibÀ
 
wôh
 
your
 
lib¥Ÿobuf
-¯
hódîs
. 
PÀa£
 
ªgíî©e
 
this
 fûêwôh 
a
 
√wî
 version ofÖrotoc-c.

17 
	~"em±y.pb-c.h
"

18 
	~"gogo.pb-c.h
"

19 
	~"≠i.pb-c.h
"

20 
	~"¥Ÿocﬁ.pb-c.h
"

21 
	~"g©eway.pb-c.h
"

22 
	~"åa˚.pb-c.h
"

24 
_Rouãr__Subs¸ibeReque°
 
	tRouãr__Subs¸ibeReque°
;

25 
_Rouãr__U∂ökMesßge
 
	tRouãr__U∂ökMesßge
;

26 
_Rouãr__Dow∆ökMesßge
 
	tRouãr__Dow∆ökMesßge
;

27 
_Rouãr__Devi˚A˘iv©i⁄Reque°
 
	tRouãr__Devi˚A˘iv©i⁄Reque°
;

28 
_Rouãr__Devi˚A˘iv©i⁄Re•⁄£
 
	tRouãr__Devi˚A˘iv©i⁄Re•⁄£
;

29 
_Rouãr__G©ewaySètusReque°
 
	tRouãr__G©ewaySètusReque°
;

30 
_Rouãr__G©ewaySètusRe•⁄£
 
	tRouãr__G©ewaySètusRe•⁄£
;

31 
_Rouãr__SètusReque°
 
	tRouãr__SètusReque°
;

32 
_Rouãr__Sètus
 
	tRouãr__Sètus
;

40 
	s_Rouãr__Subs¸ibeReque°


42 
PrŸobufCMesßge
 
	mba£
;

44 
	#ROUTER__SUBSCRIBE_REQUEST__INIT
 \

45 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
rouãr__subs¸ibe_ªque°__des¸ùt‹
) \

46 }

	)

49 
	s_Rouãr__U∂ökMesßge


51 
PrŸobufCMesßge
 
	mba£
;

52 
¥Ÿobuf_c_boﬁón
 
	mhas_∑ylﬂd
;

53 
PrŸobufCBö¨yD©a
 
	m∑ylﬂd
;

54 
PrŸocﬁ__Mesßge
 *
	mmesßge
;

55 
PrŸocﬁ__RxMëad©a
 *
	m¥Ÿocﬁ_mëad©a
;

56 
G©eway__RxMëad©a
 *
	mg©eway_mëad©a
;

57 
Tø˚__Tø˚
 *
	måa˚
;

59 
	#ROUTER__UPLINK_MESSAGE__INIT
 \

60 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
rouãr__u∂ök_mesßge__des¸ùt‹
) \

61 , 0,{0,
NULL
}, NULL, NULL, NULL, NULL }

	)

64 
	s_Rouãr__Dow∆ökMesßge


66 
PrŸobufCMesßge
 
	mba£
;

67 
¥Ÿobuf_c_boﬁón
 
	mhas_∑ylﬂd
;

68 
PrŸobufCBö¨yD©a
 
	m∑ylﬂd
;

69 
PrŸocﬁ__Mesßge
 *
	mmesßge
;

70 
PrŸocﬁ__TxC⁄figuøti⁄
 *
	m¥Ÿocﬁ_c⁄figuøti⁄
;

71 
G©eway__TxC⁄figuøti⁄
 *
	mg©eway_c⁄figuøti⁄
;

72 
Tø˚__Tø˚
 *
	måa˚
;

74 
	#ROUTER__DOWNLINK_MESSAGE__INIT
 \

75 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
rouãr__dow∆ök_mesßge__des¸ùt‹
) \

76 , 0,{0,
NULL
}, NULL, NULL, NULL, NULL }

	)

79 
	s_Rouãr__Devi˚A˘iv©i⁄Reque°


81 
PrŸobufCMesßge
 
	mba£
;

82 
¥Ÿobuf_c_boﬁón
 
	mhas_∑ylﬂd
;

83 
PrŸobufCBö¨yD©a
 
	m∑ylﬂd
;

84 
PrŸocﬁ__Mesßge
 *
	mmesßge
;

85 
¥Ÿobuf_c_boﬁón
 
	mhas_dev_eui
;

86 
PrŸobufCBö¨yD©a
 
	mdev_eui
;

87 
¥Ÿobuf_c_boﬁón
 
	mhas_≠p_eui
;

88 
PrŸobufCBö¨yD©a
 
	m≠p_eui
;

89 
PrŸocﬁ__RxMëad©a
 *
	m¥Ÿocﬁ_mëad©a
;

90 
G©eway__RxMëad©a
 *
	mg©eway_mëad©a
;

91 
PrŸocﬁ__A˘iv©i⁄Mëad©a
 *
	ma˘iv©i⁄_mëad©a
;

92 
Tø˚__Tø˚
 *
	måa˚
;

94 
	#ROUTER__DEVICE_ACTIVATION_REQUEST__INIT
 \

95 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
rouãr__devi˚_a˘iv©i⁄_ªque°__des¸ùt‹
) \

96 , 0,{0,
NULL
}, NULL, 0,{0,NULL}, 0,{0,NULL}, NULL, NULL, NULL, NULL }

	)

99 
	s_Rouãr__Devi˚A˘iv©i⁄Re•⁄£


101 
PrŸobufCMesßge
 
	mba£
;

103 
	#ROUTER__DEVICE_ACTIVATION_RESPONSE__INIT
 \

104 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
rouãr__devi˚_a˘iv©i⁄_ª•⁄£__des¸ùt‹
) \

105 }

	)

112 
	s_Rouãr__G©ewaySètusReque°


114 
PrŸobufCMesßge
 
	mba£
;

115 *
	mg©eway_id
;

117 
	#ROUTER__GATEWAY_STATUS_REQUEST__INIT
 \

118 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
rouãr__g©eway_°©us_ªque°__des¸ùt‹
) \

119 , 
NULL
 }

	)

122 
	s_Rouãr__G©ewaySètusRe•⁄£


124 
PrŸobufCMesßge
 
	mba£
;

125 
¥Ÿobuf_c_boﬁón
 
	mhas_œ°_£í
;

126 
öt64_t
 
	mœ°_£í
;

127 
G©eway__Sètus
 *
	m°©us
;

129 
	#ROUTER__GATEWAY_STATUS_RESPONSE__INIT
 \

130 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
rouãr__g©eway_°©us_ª•⁄£__des¸ùt‹
) \

131 , 0,0, 
NULL
 }

	)

137 
	s_Rouãr__SètusReque°


139 
PrŸobufCMesßge
 
	mba£
;

141 
	#ROUTER__STATUS_REQUEST__INIT
 \

142 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
rouãr__°©us_ªque°__des¸ùt‹
) \

143 }

	)

149 
	s_Rouãr__Sètus


151 
PrŸobufCMesßge
 
	mba£
;

152 
Api__Sy°emSèts
 *
	msy°em
;

153 
Api__Comp⁄ítSèts
 *
	mcomp⁄ít
;

154 
Api__R©es
 *
	mg©eway_°©us
;

155 
Api__R©es
 *
	mu∂ök
;

156 
Api__R©es
 *
	mdow∆ök
;

157 
Api__R©es
 *
	ma˘iv©i⁄s
;

161 
¥Ÿobuf_c_boﬁón
 
	mhas_c⁄√˘ed_g©eways
;

162 
uöt32_t
 
	mc⁄√˘ed_g©eways
;

163 
¥Ÿobuf_c_boﬁón
 
	mhas_c⁄√˘ed_brokîs
;

164 
uöt32_t
 
	mc⁄√˘ed_brokîs
;

166 
	#ROUTER__STATUS__INIT
 \

167 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
rouãr__°©us__des¸ùt‹
) \

168 , 
NULL
, NULL, NULL, NULL, NULL, NULL, 0,0, 0,0 }

	)

172 
	grouãr__subs¸ibe_ªque°__öô


173 (
Rouãr__Subs¸ibeReque°
 *
	gmesßge
);

174 
size_t
 
	grouãr__subs¸ibe_ªque°__gë_∑cked_size


175 (c⁄° 
Rouãr__Subs¸ibeReque°
 *
	gmesßge
);

176 
size_t
 
	grouãr__subs¸ibe_ªque°__∑ck


177 (c⁄° 
Rouãr__Subs¸ibeReque°
 *
	gmesßge
,

178 
uöt8_t
 *
	gout
);

179 
size_t
 
	grouãr__subs¸ibe_ªque°__∑ck_to_buf„r


180 (c⁄° 
Rouãr__Subs¸ibeReque°
 *
	gmesßge
,

181 
PrŸobufCBuf„r
 *
	gbuf„r
);

182 
Rouãr__Subs¸ibeReque°
 *

183 
	grouãr__subs¸ibe_ªque°__u≈ack


184 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

185 
size_t
 
	gÀn
,

186 c⁄° 
uöt8_t
 *
	gd©a
);

187 
	grouãr__subs¸ibe_ªque°__‰ì_u≈acked


188 (
Rouãr__Subs¸ibeReque°
 *
	gmesßge
,

189 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
);

191 
	grouãr__u∂ök_mesßge__öô


192 (
Rouãr__U∂ökMesßge
 *
	gmesßge
);

193 
size_t
 
	grouãr__u∂ök_mesßge__gë_∑cked_size


194 (c⁄° 
Rouãr__U∂ökMesßge
 *
	gmesßge
);

195 
size_t
 
	grouãr__u∂ök_mesßge__∑ck


196 (c⁄° 
Rouãr__U∂ökMesßge
 *
	gmesßge
,

197 
uöt8_t
 *
	gout
);

198 
size_t
 
	grouãr__u∂ök_mesßge__∑ck_to_buf„r


199 (c⁄° 
Rouãr__U∂ökMesßge
 *
	gmesßge
,

200 
PrŸobufCBuf„r
 *
	gbuf„r
);

201 
Rouãr__U∂ökMesßge
 *

202 
	grouãr__u∂ök_mesßge__u≈ack


203 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

204 
size_t
 
	gÀn
,

205 c⁄° 
uöt8_t
 *
	gd©a
);

206 
	grouãr__u∂ök_mesßge__‰ì_u≈acked


207 (
Rouãr__U∂ökMesßge
 *
	gmesßge
,

208 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
);

210 
	grouãr__dow∆ök_mesßge__öô


211 (
Rouãr__Dow∆ökMesßge
 *
	gmesßge
);

212 
size_t
 
	grouãr__dow∆ök_mesßge__gë_∑cked_size


213 (c⁄° 
Rouãr__Dow∆ökMesßge
 *
	gmesßge
);

214 
size_t
 
	grouãr__dow∆ök_mesßge__∑ck


215 (c⁄° 
Rouãr__Dow∆ökMesßge
 *
	gmesßge
,

216 
uöt8_t
 *
	gout
);

217 
size_t
 
	grouãr__dow∆ök_mesßge__∑ck_to_buf„r


218 (c⁄° 
Rouãr__Dow∆ökMesßge
 *
	gmesßge
,

219 
PrŸobufCBuf„r
 *
	gbuf„r
);

220 
Rouãr__Dow∆ökMesßge
 *

221 
	grouãr__dow∆ök_mesßge__u≈ack


222 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

223 
size_t
 
	gÀn
,

224 c⁄° 
uöt8_t
 *
	gd©a
);

225 
	grouãr__dow∆ök_mesßge__‰ì_u≈acked


226 (
Rouãr__Dow∆ökMesßge
 *
	gmesßge
,

227 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
);

229 
	grouãr__devi˚_a˘iv©i⁄_ªque°__öô


230 (
Rouãr__Devi˚A˘iv©i⁄Reque°
 *
	gmesßge
);

231 
size_t
 
	grouãr__devi˚_a˘iv©i⁄_ªque°__gë_∑cked_size


232 (c⁄° 
Rouãr__Devi˚A˘iv©i⁄Reque°
 *
	gmesßge
);

233 
size_t
 
	grouãr__devi˚_a˘iv©i⁄_ªque°__∑ck


234 (c⁄° 
Rouãr__Devi˚A˘iv©i⁄Reque°
 *
	gmesßge
,

235 
uöt8_t
 *
	gout
);

236 
size_t
 
	grouãr__devi˚_a˘iv©i⁄_ªque°__∑ck_to_buf„r


237 (c⁄° 
Rouãr__Devi˚A˘iv©i⁄Reque°
 *
	gmesßge
,

238 
PrŸobufCBuf„r
 *
	gbuf„r
);

239 
Rouãr__Devi˚A˘iv©i⁄Reque°
 *

240 
	grouãr__devi˚_a˘iv©i⁄_ªque°__u≈ack


241 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

242 
size_t
 
	gÀn
,

243 c⁄° 
uöt8_t
 *
	gd©a
);

244 
	grouãr__devi˚_a˘iv©i⁄_ªque°__‰ì_u≈acked


245 (
Rouãr__Devi˚A˘iv©i⁄Reque°
 *
	gmesßge
,

246 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
);

248 
	grouãr__devi˚_a˘iv©i⁄_ª•⁄£__öô


249 (
Rouãr__Devi˚A˘iv©i⁄Re•⁄£
 *
	gmesßge
);

250 
size_t
 
	grouãr__devi˚_a˘iv©i⁄_ª•⁄£__gë_∑cked_size


251 (c⁄° 
Rouãr__Devi˚A˘iv©i⁄Re•⁄£
 *
	gmesßge
);

252 
size_t
 
	grouãr__devi˚_a˘iv©i⁄_ª•⁄£__∑ck


253 (c⁄° 
Rouãr__Devi˚A˘iv©i⁄Re•⁄£
 *
	gmesßge
,

254 
uöt8_t
 *
	gout
);

255 
size_t
 
	grouãr__devi˚_a˘iv©i⁄_ª•⁄£__∑ck_to_buf„r


256 (c⁄° 
Rouãr__Devi˚A˘iv©i⁄Re•⁄£
 *
	gmesßge
,

257 
PrŸobufCBuf„r
 *
	gbuf„r
);

258 
Rouãr__Devi˚A˘iv©i⁄Re•⁄£
 *

259 
	grouãr__devi˚_a˘iv©i⁄_ª•⁄£__u≈ack


260 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

261 
size_t
 
	gÀn
,

262 c⁄° 
uöt8_t
 *
	gd©a
);

263 
	grouãr__devi˚_a˘iv©i⁄_ª•⁄£__‰ì_u≈acked


264 (
Rouãr__Devi˚A˘iv©i⁄Re•⁄£
 *
	gmesßge
,

265 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
);

267 
	grouãr__g©eway_°©us_ªque°__öô


268 (
Rouãr__G©ewaySètusReque°
 *
	gmesßge
);

269 
size_t
 
	grouãr__g©eway_°©us_ªque°__gë_∑cked_size


270 (c⁄° 
Rouãr__G©ewaySètusReque°
 *
	gmesßge
);

271 
size_t
 
	grouãr__g©eway_°©us_ªque°__∑ck


272 (c⁄° 
Rouãr__G©ewaySètusReque°
 *
	gmesßge
,

273 
uöt8_t
 *
	gout
);

274 
size_t
 
	grouãr__g©eway_°©us_ªque°__∑ck_to_buf„r


275 (c⁄° 
Rouãr__G©ewaySètusReque°
 *
	gmesßge
,

276 
PrŸobufCBuf„r
 *
	gbuf„r
);

277 
Rouãr__G©ewaySètusReque°
 *

278 
	grouãr__g©eway_°©us_ªque°__u≈ack


279 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

280 
size_t
 
	gÀn
,

281 c⁄° 
uöt8_t
 *
	gd©a
);

282 
	grouãr__g©eway_°©us_ªque°__‰ì_u≈acked


283 (
Rouãr__G©ewaySètusReque°
 *
	gmesßge
,

284 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
);

286 
	grouãr__g©eway_°©us_ª•⁄£__öô


287 (
Rouãr__G©ewaySètusRe•⁄£
 *
	gmesßge
);

288 
size_t
 
	grouãr__g©eway_°©us_ª•⁄£__gë_∑cked_size


289 (c⁄° 
Rouãr__G©ewaySètusRe•⁄£
 *
	gmesßge
);

290 
size_t
 
	grouãr__g©eway_°©us_ª•⁄£__∑ck


291 (c⁄° 
Rouãr__G©ewaySètusRe•⁄£
 *
	gmesßge
,

292 
uöt8_t
 *
	gout
);

293 
size_t
 
	grouãr__g©eway_°©us_ª•⁄£__∑ck_to_buf„r


294 (c⁄° 
Rouãr__G©ewaySètusRe•⁄£
 *
	gmesßge
,

295 
PrŸobufCBuf„r
 *
	gbuf„r
);

296 
Rouãr__G©ewaySètusRe•⁄£
 *

297 
	grouãr__g©eway_°©us_ª•⁄£__u≈ack


298 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

299 
size_t
 
	gÀn
,

300 c⁄° 
uöt8_t
 *
	gd©a
);

301 
	grouãr__g©eway_°©us_ª•⁄£__‰ì_u≈acked


302 (
Rouãr__G©ewaySètusRe•⁄£
 *
	gmesßge
,

303 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
);

305 
	grouãr__°©us_ªque°__öô


306 (
Rouãr__SètusReque°
 *
	gmesßge
);

307 
size_t
 
	grouãr__°©us_ªque°__gë_∑cked_size


308 (c⁄° 
Rouãr__SètusReque°
 *
	gmesßge
);

309 
size_t
 
	grouãr__°©us_ªque°__∑ck


310 (c⁄° 
Rouãr__SètusReque°
 *
	gmesßge
,

311 
uöt8_t
 *
	gout
);

312 
size_t
 
	grouãr__°©us_ªque°__∑ck_to_buf„r


313 (c⁄° 
Rouãr__SètusReque°
 *
	gmesßge
,

314 
PrŸobufCBuf„r
 *
	gbuf„r
);

315 
Rouãr__SètusReque°
 *

316 
	grouãr__°©us_ªque°__u≈ack


317 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

318 
size_t
 
	gÀn
,

319 c⁄° 
uöt8_t
 *
	gd©a
);

320 
	grouãr__°©us_ªque°__‰ì_u≈acked


321 (
Rouãr__SètusReque°
 *
	gmesßge
,

322 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
);

324 
	grouãr__°©us__öô


325 (
Rouãr__Sètus
 *
	gmesßge
);

326 
size_t
 
	grouãr__°©us__gë_∑cked_size


327 (c⁄° 
Rouãr__Sètus
 *
	gmesßge
);

328 
size_t
 
	grouãr__°©us__∑ck


329 (c⁄° 
Rouãr__Sètus
 *
	gmesßge
,

330 
uöt8_t
 *
	gout
);

331 
size_t
 
	grouãr__°©us__∑ck_to_buf„r


332 (c⁄° 
Rouãr__Sètus
 *
	gmesßge
,

333 
PrŸobufCBuf„r
 *
	gbuf„r
);

334 
Rouãr__Sètus
 *

335 
	grouãr__°©us__u≈ack


336 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

337 
size_t
 
	gÀn
,

338 c⁄° 
uöt8_t
 *
	gd©a
);

339 
	grouãr__°©us__‰ì_u≈acked


340 (
Rouãr__Sètus
 *
	gmesßge
,

341 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
);

344 (*
	tRouãr__Subs¸ibeReque°_Closuª
)

345 (c⁄° 
	tRouãr__Subs¸ibeReque°
 *
	tmesßge
,

346 *
	t˛osuª_d©a
);

347 (*
	tRouãr__U∂ökMesßge_Closuª
)

348 (c⁄° 
	tRouãr__U∂ökMesßge
 *
	tmesßge
,

349 *
	t˛osuª_d©a
);

350 (*
	tRouãr__Dow∆ökMesßge_Closuª
)

351 (c⁄° 
	tRouãr__Dow∆ökMesßge
 *
	tmesßge
,

352 *
	t˛osuª_d©a
);

353 (*
	tRouãr__Devi˚A˘iv©i⁄Reque°_Closuª
)

354 (c⁄° 
	tRouãr__Devi˚A˘iv©i⁄Reque°
 *
	tmesßge
,

355 *
	t˛osuª_d©a
);

356 (*
	tRouãr__Devi˚A˘iv©i⁄Re•⁄£_Closuª
)

357 (c⁄° 
	tRouãr__Devi˚A˘iv©i⁄Re•⁄£
 *
	tmesßge
,

358 *
	t˛osuª_d©a
);

359 (*
	tRouãr__G©ewaySètusReque°_Closuª
)

360 (c⁄° 
	tRouãr__G©ewaySètusReque°
 *
	tmesßge
,

361 *
	t˛osuª_d©a
);

362 (*
	tRouãr__G©ewaySètusRe•⁄£_Closuª
)

363 (c⁄° 
	tRouãr__G©ewaySètusRe•⁄£
 *
	tmesßge
,

364 *
	t˛osuª_d©a
);

365 (*
	tRouãr__SètusReque°_Closuª
)

366 (c⁄° 
	tRouãr__SètusReque°
 *
	tmesßge
,

367 *
	t˛osuª_d©a
);

368 (*
	tRouãr__Sètus_Closuª
)

369 (c⁄° 
	tRouãr__Sètus
 *
	tmesßge
,

370 *
	t˛osuª_d©a
);

374 
_Rouãr__Rouãr_Sîvi˚
 
	tRouãr__Rouãr_Sîvi˚
;

375 
	s_Rouãr__Rouãr_Sîvi˚


377 
PrŸobufCSîvi˚
 
ba£
;

378 (*
g©eway_°©us
)(
Rouãr__Rouãr_Sîvi˚
 *
£rvi˚
,

379 c⁄° 
G©eway__Sètus
 *
öput
,

380 
GoogÀ__PrŸobuf__Em±y_Closuª
 
˛osuª
,

381 *
˛osuª_d©a
);

382 (*
u∂ök
)(
Rouãr__Rouãr_Sîvi˚
 *
£rvi˚
,

383 c⁄° 
Rouãr__U∂ökMesßge
 *
öput
,

384 
GoogÀ__PrŸobuf__Em±y_Closuª
 
˛osuª
,

385 *
˛osuª_d©a
);

386 (*
subs¸ibe
)(
Rouãr__Rouãr_Sîvi˚
 *
£rvi˚
,

387 c⁄° 
Rouãr__Subs¸ibeReque°
 *
öput
,

388 
Rouãr__Dow∆ökMesßge_Closuª
 
˛osuª
,

389 *
˛osuª_d©a
);

390 (*
a˘iv©e
)(
Rouãr__Rouãr_Sîvi˚
 *
£rvi˚
,

391 c⁄° 
Rouãr__Devi˚A˘iv©i⁄Reque°
 *
öput
,

392 
Rouãr__Devi˚A˘iv©i⁄Re•⁄£_Closuª
 
˛osuª
,

393 *
˛osuª_d©a
);

395 (*
	tRouãr__Rouãr_Sîvi˚De°roy
)(
	tRouãr__Rouãr_Sîvi˚
 *);

396 
	`rouãr__rouãr__öô
 (
Rouãr__Rouãr_Sîvi˚
 *
£rvi˚
,

397 
Rouãr__Rouãr_Sîvi˚De°roy
 
de°roy
);

398 
	#ROUTER__ROUTER__BASE_INIT
 \

399 { &
rouãr__rouãr__des¸ùt‹
, 
¥Ÿobuf_c_£rvi˚_övoke_öã∫Æ
, 
NULL
 
	}

	)
}

400 
	#ROUTER__ROUTER__INIT
(
fun˘i⁄_¥efix__
) \

401 { 
ROUTER__ROUTER__BASE_INIT
,\

402 
fun˘i⁄_¥efix__
 ## 
g©eway_°©us
,\

403 
fun˘i⁄_¥efix__
 ## 
u∂ök
,\

404 
fun˘i⁄_¥efix__
 ## 
subs¸ibe
,\

405 
fun˘i⁄_¥efix__
 ## 
a˘iv©e
 }

	)

406 
rouãr__rouãr__g©eway_°©us
(
PrŸobufCSîvi˚
 *
£rvi˚
,

407 c⁄° 
G©eway__Sètus
 *
öput
,

408 
GoogÀ__PrŸobuf__Em±y_Closuª
 
˛osuª
,

409 *
˛osuª_d©a
);

410 
rouãr__rouãr__u∂ök
(
PrŸobufCSîvi˚
 *
£rvi˚
,

411 c⁄° 
Rouãr__U∂ökMesßge
 *
öput
,

412 
GoogÀ__PrŸobuf__Em±y_Closuª
 
˛osuª
,

413 *
˛osuª_d©a
);

414 
rouãr__rouãr__subs¸ibe
(
PrŸobufCSîvi˚
 *
£rvi˚
,

415 c⁄° 
Rouãr__Subs¸ibeReque°
 *
öput
,

416 
Rouãr__Dow∆ökMesßge_Closuª
 
˛osuª
,

417 *
˛osuª_d©a
);

418 
rouãr__rouãr__a˘iv©e
(
PrŸobufCSîvi˚
 *
£rvi˚
,

419 c⁄° 
Rouãr__Devi˚A˘iv©i⁄Reque°
 *
öput
,

420 
Rouãr__Devi˚A˘iv©i⁄Re•⁄£_Closuª
 
˛osuª
,

421 *
˛osuª_d©a
);

422 
_Rouãr__RouãrM™agî_Sîvi˚
 
	tRouãr__RouãrM™agî_Sîvi˚
;

423 
	s_Rouãr__RouãrM™agî_Sîvi˚


425 
PrŸobufCSîvi˚
 
	mba£
;

426 (*
	mg©eway_°©us
)(
Rouãr__RouãrM™agî_Sîvi˚
 *
	m£rvi˚
,

427 c⁄° 
Rouãr__G©ewaySètusReque°
 *
	möput
,

428 
Rouãr__G©ewaySètusRe•⁄£_Closuª
 
	m˛osuª
,

429 *
	m˛osuª_d©a
);

430 (*
	mgë_°©us
)(
Rouãr__RouãrM™agî_Sîvi˚
 *
	m£rvi˚
,

431 c⁄° 
Rouãr__SètusReque°
 *
	möput
,

432 
Rouãr__Sètus_Closuª
 
	m˛osuª
,

433 *
	m˛osuª_d©a
);

435 (*
	tRouãr__RouãrM™agî_Sîvi˚De°roy
)(
	tRouãr__RouãrM™agî_Sîvi˚
 *);

436 
	`rouãr__rouãr_m™agî__öô
 (
Rouãr__RouãrM™agî_Sîvi˚
 *
£rvi˚
,

437 
Rouãr__RouãrM™agî_Sîvi˚De°roy
 
de°roy
);

438 
	#ROUTER__ROUTER_MANAGER__BASE_INIT
 \

439 { &
rouãr__rouãr_m™agî__des¸ùt‹
, 
¥Ÿobuf_c_£rvi˚_övoke_öã∫Æ
, 
NULL
 
	}

	)
}

440 
	#ROUTER__ROUTER_MANAGER__INIT
(
fun˘i⁄_¥efix__
) \

441 { 
ROUTER__ROUTER_MANAGER__BASE_INIT
,\

442 
fun˘i⁄_¥efix__
 ## 
g©eway_°©us
,\

443 
fun˘i⁄_¥efix__
 ## 
gë_°©us
 }

	)

444 
rouãr__rouãr_m™agî__g©eway_°©us
(
PrŸobufCSîvi˚
 *
£rvi˚
,

445 c⁄° 
Rouãr__G©ewaySètusReque°
 *
öput
,

446 
Rouãr__G©ewaySètusRe•⁄£_Closuª
 
˛osuª
,

447 *
˛osuª_d©a
);

448 
rouãr__rouãr_m™agî__gë_°©us
(
PrŸobufCSîvi˚
 *
£rvi˚
,

449 c⁄° 
Rouãr__SètusReque°
 *
öput
,

450 
Rouãr__Sètus_Closuª
 
˛osuª
,

451 *
˛osuª_d©a
);

455 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
rouãr__subs¸ibe_ªque°__des¸ùt‹
;

456 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
rouãr__u∂ök_mesßge__des¸ùt‹
;

457 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
rouãr__dow∆ök_mesßge__des¸ùt‹
;

458 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
rouãr__devi˚_a˘iv©i⁄_ªque°__des¸ùt‹
;

459 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
rouãr__devi˚_a˘iv©i⁄_ª•⁄£__des¸ùt‹
;

460 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
rouãr__g©eway_°©us_ªque°__des¸ùt‹
;

461 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
rouãr__g©eway_°©us_ª•⁄£__des¸ùt‹
;

462 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
rouãr__°©us_ªque°__des¸ùt‹
;

463 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
rouãr__°©us__des¸ùt‹
;

464 c⁄° 
PrŸobufCSîvi˚Des¸ùt‹
 
rouãr__rouãr__des¸ùt‹
;

465 c⁄° 
PrŸobufCSîvi˚Des¸ùt‹
 
rouãr__rouãr_m™agî__des¸ùt‹
;

467 
	gPROTOBUF_C__END_DECLS


	@libttn/session.h

4 #i‡!
deföed
(
__TTN_GW_SESSION_H_
)

5 
	#__TTN_GW_SESSION_H_


	)

7 
	~<MQTTClõ¡.h
>

9 
	sSessi⁄
 {

10 
Nëw‹k
 
	m√tw‹k
;

11 
MQTTClõ¡
 
	m˛õ¡
;

12 
TTNDow∆ökH™dÀr
 
	mdow∆ök_h™dÀr
;

13 *
	mcb_¨g
;

14 *
	mªad_buf„r
;

15 *
	m£nd_buf„r
;

16 *
	mid
;

17 *
	mkey
;

18 *
	mdow∆ök_t›ic
;

	@libttn/test/test.c

4 
	~<°dio.h
>

5 
	~<sig«l.h
>

6 
	~<°döt.h
>

7 
	~<uni°d.h
>

8 
	~<°dlib.h
>

9 
	~<time.h
>

10 
	~"c⁄√˘‹.h
"

12 
	gru¬ög
 = 1;

14 
	$°›
(
sig
) {

15 
	`sig«l
(
SIGINT
, 
NULL
);

16 
ru¬ög
 = 0;

17 
	}
}

19 
	$¥öt_dow∆ök
(
Rouãr__Dow∆ökMesßge
 *
msg
, *
¨g
) {

20 i‡(
msg
->
has_∑ylﬂd
) {

21 
	`¥ötf
("down: havê%zu byã†dow∆ök\n", 
msg
->
∑ylﬂd
.
Àn
);

22 
msg
->
¥Ÿocﬁ_c⁄figuøti⁄
->
¥Ÿocﬁ_ˇ£
) {

23 
PROTOCOL__TX_CONFIGURATION__PROTOCOL_LORAWAN
: {

24 
L‹aw™__TxC⁄figuøti⁄
 *
l‹a
 = 
msg
->
¥Ÿocﬁ_c⁄figuøti⁄
->
l‹aw™
;

25 
	`¥ötf
("down: modulation: %d, dataÑate: %s, bitÑate: %d, codingÑate: "

27 
l‹a
->
moduœti⁄
,Ü‹a->
d©a_øã
,Ü‹a->
bô_øã
,

28 
l‹a
->
codög_øã
,Ü‹a->
f_˙t
);

30 
G©eway__TxC⁄figuøti⁄
 *
gtw
 = 
msg
->
g©eway_c⁄figuøti⁄
;

31 
	`¥ötf
("down:Åimestamp: %d,Ñf chain: %d, frequency: %lu,Öower: %d, "

33 
gtw
->
time°amp
, gtw->
rf_chaö
, gtw->
‰equícy
, gtw->
powî
,

34 
gtw
->
pﬁ¨iz©i⁄_övîsi⁄
, gtw->
‰equícy_devüti⁄
);

39 
	`¥ötf
("down: invalidÖrotocol %d\n",

40 
msg
->
¥Ÿocﬁ_c⁄figuøti⁄
->
¥Ÿocﬁ_ˇ£
);

44 
	}
}

46 
	$maö
(
¨gc
, **
¨gv
) {

47 
	`§™d
(
	`time
(
NULL
));

49 
	`sig«l
(
SIGINT
, 
°›
);

50 
	`sig«l
(
SIGTERM
, 
°›
);

53 
TTN
 *
ân
;

54 
	`ângwc_öô
(&
ân
, "døgöo-g©eway-ân-0001", &
¥öt_dow∆ök
, 
NULL
);

55 i‡(!
ân
) {

56 
	`¥ötf
("failedÅo initialize TTN gateway\n");

61 
	`¥ötf
("connecting...\n");

62 
îr
 = 
	`ângwc_c⁄√˘
(
ân
, "bridge.eu.thethings.network", 1883, "ttn-account-v2.O9GwnfvD6tIWyIxBCXgiCt33e8iI-c-9aV3sm_sFjVQbYnLR5OtgH0IkTUtpwh3_t3I2_gEPsX7oNCXnNZ7Shg");

63 i‡(
îr
 != 0) {

64 
	`¥ötf
("c⁄√˘ faûed: %d\n", 
îr
);

65 
	`ângwc_˛ónup
(
ân
);

66  
îr
;

68 
	`¥ötf
("connected\n");

71 
i
 = 0;

72 
ru¬ög
) {

74 
G©eway__Sètus
 
°©us
 = 
GATEWAY__STATUS__INIT
;

75 
°©us
.
has_time
 = 1;

76 
°©us
.
time
 = ++
i
;

77 
îr
 = 
	`ângwc_£nd_°©us
(
ân
, &
°©us
);

78 i‡(
îr
)

79 
	`¥ötf
("°©us: síd faûed: %d\n", 
îr
);

81 
	`¥ötf
("°©us: síàwôhÅimê%d\n", 
i
);

85 
buf
[] = { 0x40, 0xe5, 0x17, 0x01, 0x26, 0x00, 0x05, 0x00, 0x01, 0x03, 0x62, 0x60,0x98, 0xe2, 0x57, 0x1d, 0x3d, 0x23, 0xc5, 0x6f, 0xca, 0xee, 0xa8, 0xe2 };

86 
Rouãr__U∂ökMesßge
 
up
 = 
ROUTER__UPLINK_MESSAGE__INIT
;

87 
up
.
has_∑ylﬂd
 = 1;

88 
up
.
∑ylﬂd
.
Àn
 = (
buf
);

89 
up
.
∑ylﬂd
.
d©a
 = 
buf
;

92 
PrŸocﬁ__RxMëad©a
 
¥Ÿocﬁ
 = 
PROTOCOL__RX_METADATA__INIT
;

93 
¥Ÿocﬁ
.
¥Ÿocﬁ_ˇ£
 = 
PROTOCOL__RX_METADATA__PROTOCOL_LORAWAN
;

94 
L‹aw™__Mëad©a
 
l‹aw™
 = 
LORAWAN__METADATA__INIT
;

95 
l‹aw™
.
has_moduœti⁄
 = 1;

96 
l‹aw™
.
moduœti⁄
 = 
LORAWAN__MODULATION__LORA
;

97 
l‹aw™
.
d©a_øã
 = "SF9BW250";

98 
l‹aw™
.
codög_øã
 = "4/5";

99 
l‹aw™
.
has_f_˙t
 = 1;

100 
l‹aw™
.
f_˙t
 = 
i
;

101 
¥Ÿocﬁ
.
l‹aw™
 = &lorawan;

102 
up
.
¥Ÿocﬁ_mëad©a
 = &
¥Ÿocﬁ
;

105 
G©eway__RxMëad©a
 
g©eway
 = 
GATEWAY__RX_METADATA__INIT
;

106 
g©eway
.
has_time°amp
 = 1;

107 
g©eway
.
time°amp
 = 10000 + 
i
 * 100;

108 
g©eway
.
has_rf_chaö
 = 1;

109 
g©eway
.
rf_chaö
 = 5;

110 
g©eway
.
has_‰equícy
 = 1;

111 
g©eway
.
‰equícy
 = 868000000;

112 
up
.
g©eway_mëad©a
 = &
g©eway
;

115 
îr
 = 
	`ângwc_£nd_u∂ök
(
ân
, &
up
);

116 i‡(
îr
)

117 
	`¥ötf
("up: síd faûed: %d\n", 
îr
);

119 
	`¥ötf
("up: síàwôhÅime°am∞%d\n", 
i
);

121 
	`¶ìp
(
	`ønd
() % 20);

124 
	`¥ötf
("disconnecting\n");

125 
	`ângwc_disc⁄√˘
(
ân
);

126 
	`ângwc_˛ónup
(
ân
);

129 
	}
}

	@libttn/trace.pb-c.c

5 #i‚de‡
PROTOBUF_C__NO_DEPRECATED


6 
	#PROTOBUF_C__NO_DEPRECATED


	)

9 
	~"åa˚.pb-c.h
"

10 
	gåa˚__åa˚__mëad©a_íåy__öô


11 (
Tø˚__Tø˚__Mëad©aE¡ry
 *
	gmesßge
)

13 
Tø˚__Tø˚__Mëad©aE¡ry
 
	göô_vÆue
 = 
TRACE__TRACE__METADATA_ENTRY__INIT
;

14 *
	gmesßge
 = 
öô_vÆue
;

16 
	gåa˚__åa˚__öô


17 (
Tø˚__Tø˚
 *
	gmesßge
)

19 
Tø˚__Tø˚
 
	göô_vÆue
 = 
TRACE__TRACE__INIT
;

20 *
	gmesßge
 = 
öô_vÆue
;

22 
size_t
 
	gåa˚__åa˚__gë_∑cked_size


23 (c⁄° 
Tø˚__Tø˚
 *
	gmesßge
)

25 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
åa˚__åa˚__des¸ùt‹
);

26  
¥Ÿobuf_c_mesßge_gë_∑cked_size
 ((c⁄° 
PrŸobufCMesßge
*)(
mesßge
));

28 
size_t
 
	gåa˚__åa˚__∑ck


29 (c⁄° 
Tø˚__Tø˚
 *
	gmesßge
,

30 
uöt8_t
 *
	gout
)

32 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
åa˚__åa˚__des¸ùt‹
);

33  
¥Ÿobuf_c_mesßge_∑ck
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
out
);

35 
size_t
 
	gåa˚__åa˚__∑ck_to_buf„r


36 (c⁄° 
Tø˚__Tø˚
 *
	gmesßge
,

37 
PrŸobufCBuf„r
 *
	gbuf„r
)

39 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
åa˚__åa˚__des¸ùt‹
);

40  
¥Ÿobuf_c_mesßge_∑ck_to_buf„r
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
buf„r
);

42 
Tø˚__Tø˚
 *

43 
	gåa˚__åa˚__u≈ack


44 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

45 
size_t
 
	gÀn
,

46 c⁄° 
uöt8_t
 *
	gd©a
)

48  (
	gTø˚__Tø˚
 *)

49 
¥Ÿobuf_c_mesßge_u≈ack
 (&
åa˚__åa˚__des¸ùt‹
,

50 
Æloˇt‹
, 
Àn
, 
d©a
);

52 
	gåa˚__åa˚__‰ì_u≈acked


53 (
Tø˚__Tø˚
 *
	gmesßge
,

54 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
)

56 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
åa˚__åa˚__des¸ùt‹
);

57 
¥Ÿobuf_c_mesßge_‰ì_u≈acked
 ((
PrŸobufCMesßge
*)
mesßge
, 
Æloˇt‹
);

59 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	gåa˚__åa˚__mëad©a_íåy__fõld_des¸ùt‹s
[2] =

64 
PROTOBUF_C_LABEL_OPTIONAL
,

65 
PROTOBUF_C_TYPE_STRING
,

67 
off£tof
(
Tø˚__Tø˚__Mëad©aE¡ry
, 
key
),

68 
NULL
,

69 
NULL
,

71 0,
NULL
,NULL

76 
PROTOBUF_C_LABEL_OPTIONAL
,

77 
PROTOBUF_C_TYPE_STRING
,

79 
off£tof
(
Tø˚__Tø˚__Mëad©aE¡ry
, 
vÆue
),

80 
NULL
,

81 
NULL
,

83 0,
NULL
,NULL

86 c⁄° 
	gåa˚__åa˚__mëad©a_íåy__fõld_ödi˚s_by_«me
[] = {

90 c⁄° 
PrŸobufCI¡R™ge
 
	gåa˚__åa˚__mëad©a_íåy__numbî_ønges
[1 + 1] =

95 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	gåa˚__åa˚__mëad©a_íåy__des¸ùt‹
 =

97 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

102 (
Tø˚__Tø˚__Mëad©aE¡ry
),

104 
åa˚__åa˚__mëad©a_íåy__fõld_des¸ùt‹s
,

105 
åa˚__åa˚__mëad©a_íåy__fõld_ödi˚s_by_«me
,

106 1, 
åa˚__åa˚__mëad©a_íåy__numbî_ønges
,

107 (
PrŸobufCMesßgeInô
Ë
åa˚__åa˚__mëad©a_íåy__öô
,

108 
NULL
,NULL,NULL

110 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	gåa˚__åa˚__fõld_des¸ùt‹s
[7] =

115 
PROTOBUF_C_LABEL_OPTIONAL
,

116 
PROTOBUF_C_TYPE_STRING
,

118 
off£tof
(
Tø˚__Tø˚
, 
id
),

119 
NULL
,

120 
NULL
,

122 0,
NULL
,NULL

127 
PROTOBUF_C_LABEL_OPTIONAL
,

128 
PROTOBUF_C_TYPE_INT64
,

129 
off£tof
(
Tø˚__Tø˚
, 
has_time
),

130 
off£tof
(
Tø˚__Tø˚
, 
time
),

131 
NULL
,

132 
NULL
,

134 0,
NULL
,NULL

139 
PROTOBUF_C_LABEL_OPTIONAL
,

140 
PROTOBUF_C_TYPE_STRING
,

142 
off£tof
(
Tø˚__Tø˚
, 
£rvi˚_id
),

143 
NULL
,

144 
NULL
,

146 0,
NULL
,NULL

151 
PROTOBUF_C_LABEL_OPTIONAL
,

152 
PROTOBUF_C_TYPE_STRING
,

154 
off£tof
(
Tø˚__Tø˚
, 
£rvi˚_«me
),

155 
NULL
,

156 
NULL
,

158 0,
NULL
,NULL

163 
PROTOBUF_C_LABEL_OPTIONAL
,

164 
PROTOBUF_C_TYPE_STRING
,

166 
off£tof
(
Tø˚__Tø˚
, 
evít
),

167 
NULL
,

168 
NULL
,

170 0,
NULL
,NULL

175 
PROTOBUF_C_LABEL_REPEATED
,

176 
PROTOBUF_C_TYPE_MESSAGE
,

177 
off£tof
(
Tø˚__Tø˚
, 
n_mëad©a
),

178 
off£tof
(
Tø˚__Tø˚
, 
mëad©a
),

179 &
åa˚__åa˚__mëad©a_íåy__des¸ùt‹
,

180 
NULL
,

182 0,
NULL
,NULL

187 
PROTOBUF_C_LABEL_REPEATED
,

188 
PROTOBUF_C_TYPE_MESSAGE
,

189 
off£tof
(
Tø˚__Tø˚
, 
n_∑ª¡s
),

190 
off£tof
(
Tø˚__Tø˚
, 
∑ª¡s
),

191 &
åa˚__åa˚__des¸ùt‹
,

192 
NULL
,

194 0,
NULL
,NULL

197 c⁄° 
	gåa˚__åa˚__fõld_ödi˚s_by_«me
[] = {

206 c⁄° 
PrŸobufCI¡R™ge
 
	gåa˚__åa˚__numbî_ønges
[2 + 1] =

212 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	gåa˚__åa˚__des¸ùt‹
 =

214 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

219 (
Tø˚__Tø˚
),

221 
åa˚__åa˚__fõld_des¸ùt‹s
,

222 
åa˚__åa˚__fõld_ödi˚s_by_«me
,

223 2, 
åa˚__åa˚__numbî_ønges
,

224 (
PrŸobufCMesßgeInô
Ë
åa˚__åa˚__öô
,

225 
NULL
,NULL,NULL

	@libttn/trace.pb-c.h

4 #i‚de‡
PROTOBUF_C_gôhub_2ecom_2fTheThögsNëw‹k_2·ä_2Ápi_2·ø˚_2·ø˚_2ïrŸo__INCLUDED


5 
	#PROTOBUF_C_gôhub_2ecom_2fTheThögsNëw‹k_2·ä_2Ápi_2·ø˚_2·ø˚_2ïrŸo__INCLUDED


	)

7 
	~<¥Ÿobuf-c/¥Ÿobuf-c.h
>

9 
	gPROTOBUF_C__BEGIN_DECLS


11 #i‡
PROTOBUF_C_VERSION_NUMBER
 < 1000000

12 #îr‹ 
This
 
fûe
 
was
 
gíî©ed
 
by
 
a
 
√wî
 
vîsi⁄
 
of
 
¥Ÿoc
-
c
 
which
 
is
 
öcom∑tibÀ
 
wôh
 
your
 
lib¥Ÿobuf
-¯
hódîs
. 
PÀa£
 
upd©e
 your headers.

13 #ñi‡1002001 < 
PROTOBUF_C_MIN_COMPILER_VERSION


14 #îr‹ 
This
 
fûe
 
was
 
gíî©ed
 
by
 
™
 
ﬁdî
 
vîsi⁄
 
of
 
¥Ÿoc
-
c
 
which
 
is
 
öcom∑tibÀ
 
wôh
 
your
 
lib¥Ÿobuf
-¯
hódîs
. 
PÀa£
 
ªgíî©e
 
this
 fûêwôh 
a
 
√wî
 version ofÖrotoc-c.

18 
_Tø˚__Tø˚
 
	tTø˚__Tø˚
;

19 
_Tø˚__Tø˚__Mëad©aE¡ry
 
	tTø˚__Tø˚__Mëad©aE¡ry
;

27 
	s_Tø˚__Tø˚__Mëad©aE¡ry


29 
PrŸobufCMesßge
 
	mba£
;

30 *
	mkey
;

31 *
	mvÆue
;

33 
	#TRACE__TRACE__METADATA_ENTRY__INIT
 \

34 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
åa˚__åa˚__mëad©a_íåy__des¸ùt‹
) \

35 , 
NULL
, NULL }

	)

41 
	s_Tø˚__Tø˚


43 
PrŸobufCMesßge
 
	mba£
;

47 *
	mid
;

51 
¥Ÿobuf_c_boﬁón
 
	mhas_time
;

52 
öt64_t
 
	mtime
;

56 *
	m£rvi˚_id
;

60 *
	m£rvi˚_«me
;

64 *
	mevít
;

68 
size_t
 
	mn_mëad©a
;

69 
Tø˚__Tø˚__Mëad©aE¡ry
 **
	mmëad©a
;

73 
size_t
 
	mn_∑ª¡s
;

74 
Tø˚__Tø˚
 **
	m∑ª¡s
;

76 
	#TRACE__TRACE__INIT
 \

77 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
åa˚__åa˚__des¸ùt‹
) \

78 , 
NULL
, 0,0, NULL, NULL, NULL, 0,NULL, 0,NULL }

	)

82 
	gåa˚__åa˚__mëad©a_íåy__öô


83 (
Tø˚__Tø˚__Mëad©aE¡ry
 *
	gmesßge
);

85 
	gåa˚__åa˚__öô


86 (
Tø˚__Tø˚
 *
	gmesßge
);

87 
size_t
 
	gåa˚__åa˚__gë_∑cked_size


88 (c⁄° 
Tø˚__Tø˚
 *
	gmesßge
);

89 
size_t
 
	gåa˚__åa˚__∑ck


90 (c⁄° 
Tø˚__Tø˚
 *
	gmesßge
,

91 
uöt8_t
 *
	gout
);

92 
size_t
 
	gåa˚__åa˚__∑ck_to_buf„r


93 (c⁄° 
Tø˚__Tø˚
 *
	gmesßge
,

94 
PrŸobufCBuf„r
 *
	gbuf„r
);

95 
Tø˚__Tø˚
 *

96 
	gåa˚__åa˚__u≈ack


97 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

98 
size_t
 
	gÀn
,

99 c⁄° 
uöt8_t
 *
	gd©a
);

100 
	gåa˚__åa˚__‰ì_u≈acked


101 (
Tø˚__Tø˚
 *
	gmesßge
,

102 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
);

105 (*
	tTø˚__Tø˚__Mëad©aE¡ry_Closuª
)

106 (c⁄° 
	tTø˚__Tø˚__Mëad©aE¡ry
 *
	tmesßge
,

107 *
	t˛osuª_d©a
);

108 (*
	tTø˚__Tø˚_Closuª
)

109 (c⁄° 
	tTø˚__Tø˚
 *
	tmesßge
,

110 *
	t˛osuª_d©a
);

117 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
åa˚__åa˚__des¸ùt‹
;

118 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
åa˚__åa˚__mëad©a_íåy__des¸ùt‹
;

120 
PROTOBUF_C__END_DECLS


	@libttn/types.pb-c.c

5 #i‚de‡
PROTOBUF_C__NO_DEPRECATED


6 
	#PROTOBUF_C__NO_DEPRECATED


	)

9 
	~"ty≥s.pb-c.h
"

10 
	gty≥s__c⁄√˘_mesßge__öô


11 (
Ty≥s__C⁄√˘Mesßge
 *
	gmesßge
)

13 
Ty≥s__C⁄√˘Mesßge
 
	göô_vÆue
 = 
TYPES__CONNECT_MESSAGE__INIT
;

14 *
	gmesßge
 = 
öô_vÆue
;

16 
size_t
 
	gty≥s__c⁄√˘_mesßge__gë_∑cked_size


17 (c⁄° 
Ty≥s__C⁄√˘Mesßge
 *
	gmesßge
)

19 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
ty≥s__c⁄√˘_mesßge__des¸ùt‹
);

20  
¥Ÿobuf_c_mesßge_gë_∑cked_size
 ((c⁄° 
PrŸobufCMesßge
*)(
mesßge
));

22 
size_t
 
	gty≥s__c⁄√˘_mesßge__∑ck


23 (c⁄° 
Ty≥s__C⁄√˘Mesßge
 *
	gmesßge
,

24 
uöt8_t
 *
	gout
)

26 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
ty≥s__c⁄√˘_mesßge__des¸ùt‹
);

27  
¥Ÿobuf_c_mesßge_∑ck
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
out
);

29 
size_t
 
	gty≥s__c⁄√˘_mesßge__∑ck_to_buf„r


30 (c⁄° 
Ty≥s__C⁄√˘Mesßge
 *
	gmesßge
,

31 
PrŸobufCBuf„r
 *
	gbuf„r
)

33 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
ty≥s__c⁄√˘_mesßge__des¸ùt‹
);

34  
¥Ÿobuf_c_mesßge_∑ck_to_buf„r
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
buf„r
);

36 
Ty≥s__C⁄√˘Mesßge
 *

37 
	gty≥s__c⁄√˘_mesßge__u≈ack


38 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

39 
size_t
 
	gÀn
,

40 c⁄° 
uöt8_t
 *
	gd©a
)

42  (
	gTy≥s__C⁄√˘Mesßge
 *)

43 
¥Ÿobuf_c_mesßge_u≈ack
 (&
ty≥s__c⁄√˘_mesßge__des¸ùt‹
,

44 
Æloˇt‹
, 
Àn
, 
d©a
);

46 
	gty≥s__c⁄√˘_mesßge__‰ì_u≈acked


47 (
Ty≥s__C⁄√˘Mesßge
 *
	gmesßge
,

48 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
)

50 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
ty≥s__c⁄√˘_mesßge__des¸ùt‹
);

51 
¥Ÿobuf_c_mesßge_‰ì_u≈acked
 ((
PrŸobufCMesßge
*)
mesßge
, 
Æloˇt‹
);

53 
	gty≥s__disc⁄√˘_mesßge__öô


54 (
Ty≥s__Disc⁄√˘Mesßge
 *
	gmesßge
)

56 
Ty≥s__Disc⁄√˘Mesßge
 
	göô_vÆue
 = 
TYPES__DISCONNECT_MESSAGE__INIT
;

57 *
	gmesßge
 = 
öô_vÆue
;

59 
size_t
 
	gty≥s__disc⁄√˘_mesßge__gë_∑cked_size


60 (c⁄° 
Ty≥s__Disc⁄√˘Mesßge
 *
	gmesßge
)

62 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
ty≥s__disc⁄√˘_mesßge__des¸ùt‹
);

63  
¥Ÿobuf_c_mesßge_gë_∑cked_size
 ((c⁄° 
PrŸobufCMesßge
*)(
mesßge
));

65 
size_t
 
	gty≥s__disc⁄√˘_mesßge__∑ck


66 (c⁄° 
Ty≥s__Disc⁄√˘Mesßge
 *
	gmesßge
,

67 
uöt8_t
 *
	gout
)

69 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
ty≥s__disc⁄√˘_mesßge__des¸ùt‹
);

70  
¥Ÿobuf_c_mesßge_∑ck
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
out
);

72 
size_t
 
	gty≥s__disc⁄√˘_mesßge__∑ck_to_buf„r


73 (c⁄° 
Ty≥s__Disc⁄√˘Mesßge
 *
	gmesßge
,

74 
PrŸobufCBuf„r
 *
	gbuf„r
)

76 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
ty≥s__disc⁄√˘_mesßge__des¸ùt‹
);

77  
¥Ÿobuf_c_mesßge_∑ck_to_buf„r
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
buf„r
);

79 
Ty≥s__Disc⁄√˘Mesßge
 *

80 
	gty≥s__disc⁄√˘_mesßge__u≈ack


81 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

82 
size_t
 
	gÀn
,

83 c⁄° 
uöt8_t
 *
	gd©a
)

85  (
	gTy≥s__Disc⁄√˘Mesßge
 *)

86 
¥Ÿobuf_c_mesßge_u≈ack
 (&
ty≥s__disc⁄√˘_mesßge__des¸ùt‹
,

87 
Æloˇt‹
, 
Àn
, 
d©a
);

89 
	gty≥s__disc⁄√˘_mesßge__‰ì_u≈acked


90 (
Ty≥s__Disc⁄√˘Mesßge
 *
	gmesßge
,

91 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
)

93 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
ty≥s__disc⁄√˘_mesßge__des¸ùt‹
);

94 
¥Ÿobuf_c_mesßge_‰ì_u≈acked
 ((
PrŸobufCMesßge
*)
mesßge
, 
Æloˇt‹
);

96 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	gty≥s__c⁄√˘_mesßge__fõld_des¸ùt‹s
[2] =

101 
PROTOBUF_C_LABEL_OPTIONAL
,

102 
PROTOBUF_C_TYPE_STRING
,

104 
off£tof
(
Ty≥s__C⁄√˘Mesßge
, 
id
),

105 
NULL
,

106 
NULL
,

108 0,
NULL
,NULL

113 
PROTOBUF_C_LABEL_OPTIONAL
,

114 
PROTOBUF_C_TYPE_STRING
,

116 
off£tof
(
Ty≥s__C⁄√˘Mesßge
, 
key
),

117 
NULL
,

118 
NULL
,

120 0,
NULL
,NULL

123 c⁄° 
	gty≥s__c⁄√˘_mesßge__fõld_ödi˚s_by_«me
[] = {

127 c⁄° 
PrŸobufCI¡R™ge
 
	gty≥s__c⁄√˘_mesßge__numbî_ønges
[2 + 1] =

133 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	gty≥s__c⁄√˘_mesßge__des¸ùt‹
 =

135 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

140 (
Ty≥s__C⁄√˘Mesßge
),

142 
ty≥s__c⁄√˘_mesßge__fõld_des¸ùt‹s
,

143 
ty≥s__c⁄√˘_mesßge__fõld_ödi˚s_by_«me
,

144 2, 
ty≥s__c⁄√˘_mesßge__numbî_ønges
,

145 (
PrŸobufCMesßgeInô
Ë
ty≥s__c⁄√˘_mesßge__öô
,

146 
NULL
,NULL,NULL

148 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	gty≥s__disc⁄√˘_mesßge__fõld_des¸ùt‹s
[2] =

153 
PROTOBUF_C_LABEL_OPTIONAL
,

154 
PROTOBUF_C_TYPE_STRING
,

156 
off£tof
(
Ty≥s__Disc⁄√˘Mesßge
, 
id
),

157 
NULL
,

158 
NULL
,

160 0,
NULL
,NULL

165 
PROTOBUF_C_LABEL_OPTIONAL
,

166 
PROTOBUF_C_TYPE_STRING
,

168 
off£tof
(
Ty≥s__Disc⁄√˘Mesßge
, 
key
),

169 
NULL
,

170 
NULL
,

172 0,
NULL
,NULL

175 c⁄° 
	gty≥s__disc⁄√˘_mesßge__fõld_ödi˚s_by_«me
[] = {

179 c⁄° 
PrŸobufCI¡R™ge
 
	gty≥s__disc⁄√˘_mesßge__numbî_ønges
[2 + 1] =

185 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	gty≥s__disc⁄√˘_mesßge__des¸ùt‹
 =

187 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

192 (
Ty≥s__Disc⁄√˘Mesßge
),

194 
ty≥s__disc⁄√˘_mesßge__fõld_des¸ùt‹s
,

195 
ty≥s__disc⁄√˘_mesßge__fõld_ödi˚s_by_«me
,

196 2, 
ty≥s__disc⁄√˘_mesßge__numbî_ønges
,

197 (
PrŸobufCMesßgeInô
Ë
ty≥s__disc⁄√˘_mesßge__öô
,

198 
NULL
,NULL,NULL

	@libttn/types.pb-c.h

4 #i‚de‡
PROTOBUF_C_gôhub_2ecom_2fTheThögsNëw‹k_2fg©eway_2dc⁄√˘‹_2dbridge_2·y≥s_2·y≥s_2ïrŸo__INCLUDED


5 
	#PROTOBUF_C_gôhub_2ecom_2fTheThögsNëw‹k_2fg©eway_2dc⁄√˘‹_2dbridge_2·y≥s_2·y≥s_2ïrŸo__INCLUDED


	)

7 
	~<¥Ÿobuf-c/¥Ÿobuf-c.h
>

9 
	gPROTOBUF_C__BEGIN_DECLS


11 #i‡
PROTOBUF_C_VERSION_NUMBER
 < 1000000

12 #îr‹ 
This
 
fûe
 
was
 
gíî©ed
 
by
 
a
 
√wî
 
vîsi⁄
 
of
 
¥Ÿoc
-
c
 
which
 
is
 
öcom∑tibÀ
 
wôh
 
your
 
lib¥Ÿobuf
-¯
hódîs
. 
PÀa£
 
upd©e
 your headers.

13 #ñi‡1002001 < 
PROTOBUF_C_MIN_COMPILER_VERSION


14 #îr‹ 
This
 
fûe
 
was
 
gíî©ed
 
by
 
™
 
ﬁdî
 
vîsi⁄
 
of
 
¥Ÿoc
-
c
 
which
 
is
 
öcom∑tibÀ
 
wôh
 
your
 
lib¥Ÿobuf
-¯
hódîs
. 
PÀa£
 
ªgíî©e
 
this
 fûêwôh 
a
 
√wî
 version ofÖrotoc-c.

17 
	~"gogo.pb-c.h
"

19 
_Ty≥s__C⁄√˘Mesßge
 
	tTy≥s__C⁄√˘Mesßge
;

20 
_Ty≥s__Disc⁄√˘Mesßge
 
	tTy≥s__Disc⁄√˘Mesßge
;

28 
	s_Ty≥s__C⁄√˘Mesßge


30 
PrŸobufCMesßge
 
	mba£
;

31 *
	mid
;

32 *
	mkey
;

34 
	#TYPES__CONNECT_MESSAGE__INIT
 \

35 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
ty≥s__c⁄√˘_mesßge__des¸ùt‹
) \

36 , 
NULL
, NULL }

	)

39 
	s_Ty≥s__Disc⁄√˘Mesßge


41 
PrŸobufCMesßge
 
	mba£
;

42 *
	mid
;

43 *
	mkey
;

45 
	#TYPES__DISCONNECT_MESSAGE__INIT
 \

46 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
ty≥s__disc⁄√˘_mesßge__des¸ùt‹
) \

47 , 
NULL
, NULL }

	)

51 
	gty≥s__c⁄√˘_mesßge__öô


52 (
Ty≥s__C⁄√˘Mesßge
 *
	gmesßge
);

53 
size_t
 
	gty≥s__c⁄√˘_mesßge__gë_∑cked_size


54 (c⁄° 
Ty≥s__C⁄√˘Mesßge
 *
	gmesßge
);

55 
size_t
 
	gty≥s__c⁄√˘_mesßge__∑ck


56 (c⁄° 
Ty≥s__C⁄√˘Mesßge
 *
	gmesßge
,

57 
uöt8_t
 *
	gout
);

58 
size_t
 
	gty≥s__c⁄√˘_mesßge__∑ck_to_buf„r


59 (c⁄° 
Ty≥s__C⁄√˘Mesßge
 *
	gmesßge
,

60 
PrŸobufCBuf„r
 *
	gbuf„r
);

61 
Ty≥s__C⁄√˘Mesßge
 *

62 
	gty≥s__c⁄√˘_mesßge__u≈ack


63 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

64 
size_t
 
	gÀn
,

65 c⁄° 
uöt8_t
 *
	gd©a
);

66 
	gty≥s__c⁄√˘_mesßge__‰ì_u≈acked


67 (
Ty≥s__C⁄√˘Mesßge
 *
	gmesßge
,

68 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
);

70 
	gty≥s__disc⁄√˘_mesßge__öô


71 (
Ty≥s__Disc⁄√˘Mesßge
 *
	gmesßge
);

72 
size_t
 
	gty≥s__disc⁄√˘_mesßge__gë_∑cked_size


73 (c⁄° 
Ty≥s__Disc⁄√˘Mesßge
 *
	gmesßge
);

74 
size_t
 
	gty≥s__disc⁄√˘_mesßge__∑ck


75 (c⁄° 
Ty≥s__Disc⁄√˘Mesßge
 *
	gmesßge
,

76 
uöt8_t
 *
	gout
);

77 
size_t
 
	gty≥s__disc⁄√˘_mesßge__∑ck_to_buf„r


78 (c⁄° 
Ty≥s__Disc⁄√˘Mesßge
 *
	gmesßge
,

79 
PrŸobufCBuf„r
 *
	gbuf„r
);

80 
Ty≥s__Disc⁄√˘Mesßge
 *

81 
	gty≥s__disc⁄√˘_mesßge__u≈ack


82 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

83 
size_t
 
	gÀn
,

84 c⁄° 
uöt8_t
 *
	gd©a
);

85 
	gty≥s__disc⁄√˘_mesßge__‰ì_u≈acked


86 (
Ty≥s__Disc⁄√˘Mesßge
 *
	gmesßge
,

87 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
);

90 (*
	tTy≥s__C⁄√˘Mesßge_Closuª
)

91 (c⁄° 
	tTy≥s__C⁄√˘Mesßge
 *
	tmesßge
,

92 *
	t˛osuª_d©a
);

93 (*
	tTy≥s__Disc⁄√˘Mesßge_Closuª
)

94 (c⁄° 
	tTy≥s__Disc⁄√˘Mesßge
 *
	tmesßge
,

95 *
	t˛osuª_d©a
);

102 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
ty≥s__c⁄√˘_mesßge__des¸ùt‹
;

103 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
ty≥s__disc⁄√˘_mesßge__des¸ùt‹
;

105 
PROTOBUF_C__END_DECLS


	@tools/payload_tools/payload_crc.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°döt.h
>

4 
	~<°rög.h
>

9 
ußge
();

10 
uöt16_t
 
sx1302_l‹a_∑ylﬂd_¸c
(c⁄° 
uöt8_t
 * 
d©a
, uöt8_à
size
);

11 
ªmove_•a˚s
(*
°r
);

16 
	$maö
(
¨gc
, ** 
¨gv
)

18 
j
;

19 
uöt8_t
 
∑ylﬂd
[255];

20 
uöt8_t
 
∑ylﬂd_size
;

21 
uöt16_t
 
¸c
;

22 
hex°r
[1024];

24 i‡(
¨gc
 < 2) {

25 
	`ußge
();

30 
	`mem˝y
(
hex°r
, 
¨gv
[1], 
	`°æí
(argv[1]));

31 
hex°r
[
	`°æí
(
¨gv
[1])] = '\0';

32 
	`¥ötf
("I≈uàhex såög: %s\n", 
hex°r
);

35 
	`ªmove_•a˚s
(
hex°r
);

36 
hex°r
[
	`°æí
(hexstr)] = '\0';

37 
	`¥ötf
("Removög s∑˚s: %s\n", 
hex°r
);

40 
∑ylﬂd_size
 = 
	`°æí
(
hex°r
) / 2;

41 
j
 = 0; j < 
∑ylﬂd_size
; j++) {

42 
	`ssˇnf
(
hex°r
 + 2*
j
, "%02hhx", &
∑ylﬂd
[j]);

46 
¸c
 = 
	`sx1302_l‹a_∑ylﬂd_¸c
(
∑ylﬂd
, 
∑ylﬂd_size
);

47 
	`¥ötf
("Paylﬂd CRC_16: %04X\n", 
¸c
);

50 
	}
}

54 
	$ußge
() {

55 
	`¥ötf
("MissingÖayload hex string\n");

56 
	}
}

60 
	$ªmove_•a˚s
(*
°r
)

63 
cou¡
 = 0;

67 
i
 = 0; 
°r
[i]; i++) {

68 i‡(
°r
[
i
] != ' ') {

69 
°r
[
cou¡
++] = så[
i
];

72 
°r
[
cou¡
] = '\0';

73 
	}
}

77 
	$l‹a_¸c16
(c⁄° 
d©a
, *
¸c
) {

78 
√xt
 = 0;

79 
√xt
 = (((
d©a
>>0)&1Ë^ ((*
¸c
>>12)&1) ^ ((*crc>> 8)&1) ) ;

80 
√xt
 +((((
d©a
>>1)&1Ë^ ((*
¸c
>>13)&1) ^ ((*crc>> 9)&1) )<<1 ) ;

81 
√xt
 +((((
d©a
>>2)&1Ë^ ((*
¸c
>>14)&1) ^ ((*crc>>10)&1) )<<2 ) ;

82 
√xt
 +((((
d©a
>>3)&1Ë^ ((*
¸c
>>15)&1) ^ ((*crc>>11)&1) )<<3 ) ;

83 
√xt
 +((((
d©a
>>4)&1Ë^ ((*
¸c
>>12)&1) )<<4 ) ;

84 
√xt
 +((((
d©a
>>5)&1Ë^ ((*
¸c
>>13)&1) ^ ((*crc>>12)&1) ^ ((*crc>> 8)&1))<<5 ) ;

85 
√xt
 +((((
d©a
>>6)&1Ë^ ((*
¸c
>>14)&1) ^ ((*crc>>13)&1) ^ ((*crc>> 9)&1))<<6 ) ;

86 
√xt
 +((((
d©a
>>7)&1Ë^ ((*
¸c
>>15)&1) ^ ((*crc>>14)&1) ^ ((*crc>>10)&1))<<7 ) ;

87 
√xt
 +((((*
¸c
>>0)&1) ^ ((*crc>>15)&1) ^ ((*crc>>11)&1) )<<8 ) ;

88 
√xt
 +((((*
¸c
>>1)&1) ^ ((*crc>>12)&1) )<<9 ) ;

89 
√xt
 +((((*
¸c
>>2)&1) ^ ((*crc>>13)&1) )<<10) ;

90 
√xt
 +((((*
¸c
>>3)&1) ^ ((*crc>>14)&1) )<<11) ;

91 
√xt
 +((((*
¸c
>>4)&1) ^ ((*crc>>15)&1) ^ ((*crc>>12)&1) ^ ((*crc>> 8)&1))<<12) ;

92 
√xt
 +((((*
¸c
>>5)&1) ^ ((*crc>>13)&1) ^ ((*crc>> 9)&1) )<<13) ;

93 
√xt
 +((((*
¸c
>>6)&1) ^ ((*crc>>14)&1) ^ ((*crc>>10)&1) )<<14) ;

94 
√xt
 +((((*
¸c
>>7)&1) ^ ((*crc>>15)&1) ^ ((*crc>>11)&1) )<<15) ;

95 (*
¸c
Ë
√xt
;

96 
	}
}

100 
uöt16_t
 
	$sx1302_l‹a_∑ylﬂd_¸c
(c⁄° 
uöt8_t
 * 
d©a
, uöt8_à
size
) {

101 
i
;

102 
¸c
 = 0;

104 
i
 = 0; i < 
size
; i++) {

105 
	`l‹a_¸c16
(
d©a
[
i
], &
¸c
);

109  (
uöt16_t
)
¸c
;

110 
	}
}

	@tools/payload_tools/payload_diff.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°döt.h
>

4 
	~<°rög.h
>

9 
	#TAKE_N_BITS_FROM
(
b
, 
p
, 
n
Ë(((bË>> (p)Ë& ((1 << (n)Ë- 1))

	)

14 
ußge
();

15 
ªmove_•a˚s
(*
°r
);

20 
	$maö
(
¨gc
, ** 
¨gv
)

22 
i
, 
j
;

23 
uöt8_t
 
∑ylﬂd_a
[255];

24 
uöt8_t
 
∑ylﬂd_b
[255];

25 
uöt8_t
 
∑ylﬂd_diff
[255];

26 
uöt8_t
 
∑ylﬂd_size
;

27 
hex°r
[1024];

28 
uöt16_t
 
nb_bôs_diff
 = 0;

30 i‡(
¨gc
 < 3) {

31 
	`ußge
();

35 i‡(
	`°æí
(
¨gv
[1]) != strlen(argv[2])) {

36 
	`¥ötf
("ERROR:Öayloads A & B must have same size\n");

41 
	`mem˝y
(
hex°r
, 
¨gv
[1], 
	`°æí
(argv[1]));

42 
hex°r
[
	`°æí
(
¨gv
[1])] = '\0';

43 
	`¥ötf
("I≈uàhex såög: %s\n", 
hex°r
);

46 
	`ªmove_•a˚s
(
hex°r
);

47 
hex°r
[
	`°æí
(hexstr)] = '\0';

48 
	`¥ötf
("Removög s∑˚s: %s\n", 
hex°r
);

51 
∑ylﬂd_size
 = 
	`°æí
(
hex°r
) / 2;

52 
j
 = 0; j < 
∑ylﬂd_size
; j++) {

53 
	`ssˇnf
(
hex°r
 + 2*
j
, "%02hhx", &
∑ylﬂd_a
[j]);

57 
	`mem˝y
(
hex°r
, 
¨gv
[2], 
	`°æí
(argv[2]));

58 
hex°r
[
	`°æí
(
¨gv
[2])] = '\0';

59 
	`¥ötf
("I≈uàhex såög: %s\n", 
hex°r
);

62 
	`ªmove_•a˚s
(
hex°r
);

63 
hex°r
[
	`°æí
(hexstr)] = '\0';

64 
	`¥ötf
("Removög s∑˚s: %s\n", 
hex°r
);

67 
j
 = 0; j < 
∑ylﬂd_size
; j++) {

68 
	`ssˇnf
(
hex°r
 + 2*
j
, "%02hhx", &
∑ylﬂd_b
[j]);

72 
	`¥ötf
("Diff: ");

73 
j
 = 0; j < 
∑ylﬂd_size
; j++) {

74 
∑ylﬂd_diff
[
j
] = 
∑ylﬂd_a
[j] ^ 
∑ylﬂd_b
[j];

75 
	`¥ötf
("%02X ", 
∑ylﬂd_diff
[
j
]);

77 
	`¥ötf
("\n");

79 
j
 = 0; j < 
∑ylﬂd_size
; j++) {

80 
i
 = 7; i >= 0; i--) {

81 
	`¥ötf
("%u", 
	`TAKE_N_BITS_FROM
(
∑ylﬂd_diff
[
j
], 
i
, 1));

82 i‡(
	`TAKE_N_BITS_FROM
(
∑ylﬂd_diff
[
j
], 
i
, 1) == 1) {

83 
nb_bôs_diff
 += 1;

86 
	`¥ötf
(" ");

88 
	`¥ötf
("\n");

89 
	`¥ötf
("%u bô†Êù≥d\n", 
nb_bôs_diff
);

92 
	}
}

96 
	$ußge
() {

97 
	`¥ötf
("MissingÖayload hex strings forá & b\n");

98 
	}
}

102 
	$ªmove_•a˚s
(*
°r
)

105 
cou¡
 = 0;

109 
i
 = 0; 
°r
[i]; i++) {

110 i‡(
°r
[
i
] != ' ') {

111 
°r
[
cou¡
++] = så[
i
];

114 
°r
[
cou¡
] = '\0';

115 
	}
}

	@tools/payload_tools/payload_gen.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°döt.h
>

4 
	~<°rög.h
>

6 
	~"töymt32.h
"

11 
ußge
();

12 
ªmove_•a˚s
(*
°r
);

17 
	$maö
(
¨gc
, ** 
¨gv
)

19 
j
;

20 
uöt8_t
 
dev_id
[4];

21 
uöt8_t
 
∑ylﬂd
[255];

22 
uöt8_t
 
∑ylﬂd_size
;

23 
∑ckë_˙t
;

24 
töymt32_t
 
töymt
;

25 
hex°r
[32];

27 i‡(
¨gc
 < 4) {

28 
	`ußge
();

33 
	`mem˝y
(
hex°r
, 
¨gv
[1], 
	`°æí
(argv[1]));

34 
hex°r
[
	`°æí
(
¨gv
[1])] = '\0';

37 
	`ªmove_•a˚s
(
hex°r
);

38 
hex°r
[
	`°æí
(hexstr)] = '\0';

39 
	`¥ötf
("Dev_id: %s\n", 
hex°r
);

42 
∑ylﬂd_size
 = 
	`°æí
(
hex°r
) / 2;

43 
j
 = 0; j < 4; j++) {

44 
	`ssˇnf
(
hex°r
 + 2*
j
, "%02hhx", &
dev_id
[j]);

48 
∑ckë_˙t
 = 
	`©oi
(
¨gv
[2]);

51 
∑ylﬂd_size
 = (
uöt8_t
)
	`©oi
(
¨gv
[3]);

54 
töymt
.
m©1
 = 0x8f7011ee;

55 
töymt
.
m©2
 = 0xfc78ff1f;

56 
töymt
.
tm©
 = 0x3793fdff;

57 
	`töymt32_öô
(&
töymt
, 
∑ckë_˙t
);

60 
∑ylﬂd
[0] = 
dev_id
[0];

61 
∑ylﬂd
[1] = 
dev_id
[1];

62 
∑ylﬂd
[2] = 
dev_id
[2];

63 
∑ylﬂd
[3] = 
dev_id
[3];

64 
∑ylﬂd
[4] = (
uöt8_t
)(
∑ckë_˙t
 >> 24);

65 
∑ylﬂd
[5] = (
uöt8_t
)(
∑ckë_˙t
 >> 16);

66 
∑ylﬂd
[6] = (
uöt8_t
)(
∑ckë_˙t
 >> 8);

67 
∑ylﬂd
[7] = (
uöt8_t
)(
∑ckë_˙t
 >> 0);

68 
j
 = 8; j < 
∑ylﬂd_size
; j++) {

69 
∑ylﬂd
[
j
] = (
uöt8_t
)
	`töymt32_gíî©e_uöt32
(&
töymt
);

71 
j
 = 0; j < 
∑ylﬂd_size
; j++) {

72 
	`¥ötf
("%02X ", 
∑ylﬂd
[
j
]);

74 
	`¥ötf
("\n");

77 
∑ckë_˙t
 = 0;Öacket_cnt < 10;Öacket_cnt++) {

78 
	`töymt32_öô
(&
töymt
, ()
∑ckë_˙t
);

79 
∑ylﬂd
[0] = 0xCA;

80 
∑ylﬂd
[1] = 0xFE;

81 
∑ylﬂd
[2] = 0x12;

82 
∑ylﬂd
[3] = 0x34;

83 
∑ylﬂd
[4] = (
uöt8_t
)(
∑ckë_˙t
 >> 24);

84 
∑ylﬂd
[5] = (
uöt8_t
)(
∑ckë_˙t
 >> 16);

85 
∑ylﬂd
[6] = (
uöt8_t
)(
∑ckë_˙t
 >> 8);

86 
∑ylﬂd
[7] = (
uöt8_t
)(
∑ckë_˙t
 >> 0);

87 
j
 = 8; j < 16; j++) {

88 
∑ylﬂd
[
j
] = (
uöt8_t
)
	`töymt32_gíî©e_uöt32
(&
töymt
);

90 
j
 = 0; j < 16; j++) {

91 
	`¥ötf
("%02X ", 
∑ylﬂd
[
j
]);

93 
	`¥ötf
("\n");

98 
	}
}

102 
	$ußge
() {

103 
	`¥ötf
("MissingÖarameters: ./payload_gen dev_idÖkt_cntÖkt_size\n");

104 
	`¥ötf
(" dev_id: hex string for 4-bytes dev_id\n");

105 
	`¥ötf
("Ökt_cnt: unsigned int usedÅo initializeÅheÖseudo-random generator\n");

106 
	`¥ötf
("Ökt_size:Öaylaod size in bytes [0..255]\n");

107 
	}
}

111 
	$ªmove_•a˚s
(*
°r
)

114 
cou¡
 = 0;

118 
i
 = 0; 
°r
[i]; i++) {

119 i‡(
°r
[
i
] != ' ') {

120 
°r
[
cou¡
++] = så[
i
];

123 
°r
[
cou¡
] = '\0';

124 
	}
}

	@util_chip_id/src/chip_id.c

21 #i‡
__STDC_VERSION__
 >= 199901L

22 
	#_XOPEN_SOURCE
 600

	)

24 
	#_XOPEN_SOURCE
 500

	)

27 
	~<°döt.h
>

28 
	~<°dio.h
>

29 
	~<°dlib.h
>

30 
	~<öây≥s.h
>

31 
	~<°rög.h
>

32 
	~<uni°d.h
>

33 
	~<m©h.h
>

34 
	~<sig«l.h
>

35 
	~<gë›t.h
>

37 
	~"l‹agw_hÆ.h
"

38 
	~"l‹agw_ªg.h
"

39 
	~"l‹agw_aux.h
"

44 
	#RAND_RANGE
(
mö
, 
max
Ë(
	`ønd
(Ë% (max + 1 - möË+ mö)

	)

49 
	#LINUXDEV_PATH_DEFAULT
 "/dev/•idev0.0"

	)

51 
	#DEFAULT_CLK_SRC
 0

	)

52 
	#DEFAULT_FREQ_HZ
 868500000U

	)

61 
	$ußge
() {

62 
	`¥ötf
("Libøry vîsi⁄ inf‹m©i⁄: %s\n", 
	`lgw_vîsi⁄_öfo
());

63 
	`¥ötf
("Available options:\n");

64 
	`¥ötf
(" -hÖrintÅhis help\n");

65 
	`¥ötf
(" -d [path] PathÅhe spidev file (ex: /dev/spidev0.0)\n");

66 
	`¥ötf
(" -k <uint> Concentrator clock source (Radio A or Radio B) [0..1]\n");

67 
	`¥ötf
(" -r <uint> RadioÅype (1255, 1257, 1250)\n");

68 
	}
}

73 
	$maö
(
¨gc
, **
¨gv
)

75 
i
, 
x
;

76 
¨g_u
;

77 
uöt8_t
 
˛ocksour˚
 = 0;

78 
lgw_ødio_ty≥_t
 
ødio_ty≥
 = 
LGW_RADIO_TYPE_SX1250
;

80 
lgw_c⁄f_bﬂrd_s
 
bﬂrdc⁄f
;

81 
lgw_c⁄f_rxrf_s
 
rfc⁄f
;

82 
uöt64_t
 
eui
;

85 c⁄° 
•idev_∑th_deÁu…
[] = 
LINUXDEV_PATH_DEFAULT
;

86 c⁄° * 
•idev_∑th
 = 
•idev_∑th_deÁu…
;

89 
›ti⁄_ödex
 = 0;

90 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

95 (
i
 = 
	`gë›t_l⁄g
 (
¨gc
, 
¨gv
, "hd:k:r:", 
l⁄g_›ti⁄s
, &
›ti⁄_ödex
)) != -1) {

96 
i
) {

98 
	`ußge
();

103 
•idev_∑th
 = 
›èrg
;

107 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

108 i‡((
i
 !1Ë|| ((
¨g_u
 != 1255) && (arg_u != 1257) && (arg_u != 1250))) {

109 
	`¥ötf
("ERROR:árgumentÖarsing of -rárgument. Use -hÅoÖrint help\n");

110  
EXIT_FAILURE
;

112 
¨g_u
) {

114 
ødio_ty≥
 = 
LGW_RADIO_TYPE_SX1255
;

117 
ødio_ty≥
 = 
LGW_RADIO_TYPE_SX1257
;

120 
ødio_ty≥
 = 
LGW_RADIO_TYPE_SX1250
;

127 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

128 i‡((
i
 !1Ë|| (
¨g_u
 > 1)) {

129 
	`¥ötf
("ERROR:árgumentÖarsing of -kárgument. Use -hÅoÖrint help\n");

130  
EXIT_FAILURE
;

132 
˛ocksour˚
 = (
uöt8_t
)
¨g_u
;

137 
	`¥ötf
("ERROR:árgumentÖarsing\n");

138 
	`ußge
();

144 i‡(
	`sy°em
("./reset_lgw.sh start") != 0) {

145 
	`¥ötf
("ERROR: failedÅoÑeset SX1302, check yourÑeset_lgw.sh script\n");

146 
	`exô
(
EXIT_FAILURE
);

150 
	`mem£t
(&
bﬂrdc⁄f
, 0,  boardconf);

151 
bﬂrdc⁄f
.
l‹aw™_public
 = 
åue
;

152 
bﬂrdc⁄f
.
˛k§c
 = 
˛ocksour˚
;

153 
bﬂrdc⁄f
.
fuŒ_du∂ex
 = 
Ál£
;

154 
	`°∫˝y
(
bﬂrdc⁄f
.
•idev_∑th
, spidev_path,  boardconf.spidev_path);

155 
bﬂrdc⁄f
.
•idev_∑th
[ boardconf.spidev_path - 1] = '\0';

156 i‡(
	`lgw_bﬂrd_£tc⁄f
(&
bﬂrdc⁄f
Ë!
LGW_HAL_SUCCESS
) {

157 
	`¥ötf
("ERROR: failedÅo configure board\n");

158  
EXIT_FAILURE
;

161 
	`mem£t
(&
rfc⁄f
, 0, Ñfconf);

162 
rfc⁄f
.
íabÀ
 = 
åue
;

163 
rfc⁄f
.
‰eq_hz
 = 868500000;

164 
rfc⁄f
.
ty≥
 = 
ødio_ty≥
;

165 
rfc⁄f
.
tx_íabÀ
 = 
Ál£
;

166 
rfc⁄f
.
sögÀ_öput_mode
 = 
Ál£
;

167 i‡(
	`lgw_rxrf_£tc⁄f
(0, &
rfc⁄f
Ë!
LGW_HAL_SUCCESS
) {

168 
	`¥ötf
("ERROR: failedÅo configureÑxrf 0\n");

169  
EXIT_FAILURE
;

172 
	`mem£t
(&
rfc⁄f
, 0, Ñfconf);

173 
rfc⁄f
.
íabÀ
 = (
˛ocksour˚
 =1Ë? 
åue
 : 
Ál£
;

174 
rfc⁄f
.
‰eq_hz
 = 868500000;

175 
rfc⁄f
.
ty≥
 = 
ødio_ty≥
;

176 
rfc⁄f
.
tx_íabÀ
 = 
Ál£
;

177 
rfc⁄f
.
sögÀ_öput_mode
 = 
Ál£
;

178 i‡(
	`lgw_rxrf_£tc⁄f
(1, &
rfc⁄f
Ë!
LGW_HAL_SUCCESS
) {

179 
	`¥ötf
("ERROR: failedÅo configureÑxrf 1\n");

180  
EXIT_FAILURE
;

183 
x
 = 
	`lgw_°¨t
();

184 i‡(
x
 != 0) {

185 
	`¥ötf
("ERROR: failedÅo startÅhe gateway\n");

186  
EXIT_FAILURE
;

190 
x
 = 
	`lgw_gë_eui
(&
eui
);

191 i‡(
x
 !
LGW_HAL_SUCCESS
) {

192 
	`¥ötf
("ERROR: failedÅo get concentrator EUI\n");

194 
	`¥ötf
("\nINFO: c⁄˚¡øt‹ EUI: 0x%016" 
PRIx64
 "\n\n", 
eui
);

198 
x
 = 
	`lgw_°›
();

199 i‡(
x
 != 0) {

200 
	`¥ötf
("ERROR: failedÅo stopÅhe gateway\n");

201  
EXIT_FAILURE
;

205 i‡(
	`sy°em
("./reset_lgw.sh stop") != 0) {

206 
	`¥ötf
("ERROR: failedÅoÑeset SX1302, check yourÑeset_lgw.sh script\n");

207 
	`exô
(
EXIT_FAILURE
);

211 
	}
}

	@/usr/include/arpa/inet.h

18 #i‚de‡
_ARPA_INET_H


19 
	#_ARPA_INET_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<√töë/ö.h
>

25 #i‚de‡
__sockÀn_t_deföed


26 
__sockÀn_t
 
	tsockÀn_t
;

27 
	#__sockÀn_t_deföed


	)

30 
__BEGIN_DECLS


34 
ö_addr_t
 
	$öë_addr
 (c⁄° *
__˝
Ë
__THROW
;

37 
ö_addr_t
 
	$öë_ aof
 (
ö_addr
 
__ö
Ë
__THROW
;

41 
ö_addr
 
	$öë_makóddr
 (
ö_addr_t
 
__√t
, in_addr_à
__ho°
)

42 
__THROW
;

45 
ö_addr_t
 
	$öë_√tof
 (
ö_addr
 
__ö
Ë
__THROW
;

49 
ö_addr_t
 
	$öë_√tw‹k
 (c⁄° *
__˝
Ë
__THROW
;

53 *
	$öë_¡ﬂ
 (
ö_addr
 
__ö
Ë
__THROW
;

58 
	$öë_±⁄
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

59 *
__ª°ri˘
 
__buf
Ë
__THROW
;

64 c⁄° *
	$öë_¡›
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

65 *
__ª°ri˘
 
__buf
, 
sockÀn_t
 
__Àn
)

66 
__THROW
;

70 #ifde‡
__USE_MISC


73 
	$öë_©⁄
 (c⁄° *
__˝
, 
ö_addr
 *
__öp
Ë
__THROW
;

77 *
	$öë_√è
 (
ö_addr_t
 
__√t
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

82 *
	$öë_√t_¡›
 (
__af
, c⁄° *
__˝
, 
__bôs
,

83 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

88 
	$öë_√t_±⁄
 (
__af
, c⁄° *
__˝
,

89 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

94 
	$öë_nßp_addr
 (c⁄° *
__˝
,

95 *
__buf
, 
__Àn
Ë
__THROW
;

99 *
	$öë_nßp_¡ﬂ
 (
__Àn
, c⁄° *
__˝
,

100 *
__buf
Ë
__THROW
;

103 
__END_DECLS


	@/usr/include/assert.h

22 #ifdef 
_ASSERT_H


24 #unde‡
_ASSERT_H


25 #unde‡
as£π


26 #unde‡
__ASSERT_VOID_CAST


28 #ifdef 
__USE_GNU


29 #unde‡
as£π_≥º‹


34 
	#_ASSERT_H
 1

	)

35 
	~<„©uªs.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

38 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

40 
	#__ASSERT_VOID_CAST
 ()

	)

48 #ifdef 
NDEBUG


50 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

58 #ifdef 
__USE_GNU


59 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

64 #i‚de‡
_ASSERT_H_DECLS


65 
	#_ASSERT_H_DECLS


	)

66 
__BEGIN_DECLS


69 
	$__as£π_Áû
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
,

70 
__löe
, c⁄° *
__fun˘i⁄
)

71 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

74 
	$__as£π_≥º‹_Áû
 (
__î∫um
, c⁄° *
__fûe
,

75 
__löe
, c⁄° *
__fun˘i⁄
)

76 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

81 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

82 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

85 
__END_DECLS


88 
	#as£π
(
ex¥
) \

89 ((
ex¥
) \

90 ? 
	`__ASSERT_VOID_CAST
 (0) \

91 : 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

93 #ifdef 
__USE_GNU


94 
	#as£π_≥º‹
(
î∫um
) \

95 (!(
î∫um
) \

96 ? 
	`__ASSERT_VOID_CAST
 (0) \

97 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

105 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

106 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

108 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

109 
	#__ASSERT_FUNCTION
 
__func__


	)

111 
	#__ASSERT_FUNCTION
 ((c⁄° *Ë0)

	)

118 #i‡
deföed
 
__USE_ISOC11
 && !deföed 
__˝lu•lus


119 #unde‡
°©ic_as£π


120 
	#°©ic_as£π
 
_Sètic_as£π


	)

	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

104 
__BEGIN_NAMESPACE_STD


110 
__ex˘y≥
 (
iß um
);

111 
__ex˘y≥
 (
ißÕha
);

112 
__ex˘y≥
 (
is˙ål
);

113 
__ex˘y≥
 (
isdigô
);

114 
__ex˘y≥
 (
i¶owî
);

115 
__ex˘y≥
 (
isgøph
);

116 
__ex˘y≥
 (
i•röt
);

117 
__ex˘y≥
 (
i•un˘
);

118 
__ex˘y≥
 (
is•a˚
);

119 
__ex˘y≥
 (
isuµî
);

120 
__ex˘y≥
 (
isxdigô
);

124 
	$tﬁowî
 (
__c
Ë
__THROW
;

127 
	$touµî
 (
__c
Ë
__THROW
;

129 
__END_NAMESPACE_STD


133 #ifdef 
__USE_ISOC99


134 
__BEGIN_NAMESPACE_C99


136 
	`__ex˘y≥
 (
isbœnk
);

138 
__END_NAMESPACE_C99


141 #ifde‡
__USE_GNU


143 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

146 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


150 
	$ißscii
 (
__c
Ë
__THROW
;

154 
	$tﬂscii
 (
__c
Ë
__THROW
;

158 
	`__ex˘y≥
 (
_touµî
);

159 
	`__ex˘y≥
 (
_tﬁowî
);

163 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

164 (
__exãnsi⁄__
 \

165 ({ 
__ªs
; \

166 i‡( (
c
) > 1) \

168 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

170 
__c
 = (
c
); \

171 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

174 
__ªs
 = 
f
 
¨gs
; \

177 
__ªs
 = (
a
)[(Ë(
c
)]; \

178 
__ªs
; 
	}
}))

	)

180 #i‡!
deföed
 
__NO_CTYPE


181 #ifde‡
__is˘y≥_f


182 
	$__is˘y≥_f
 (
Ænum
)

183 
	$__is˘y≥_f
 (
Æpha
)

184 
	$__is˘y≥_f
 (
˙ål
)

185 
	$__is˘y≥_f
 (
digô
)

186 
	$__is˘y≥_f
 (
lowî
)

187 
	$__is˘y≥_f
 (
gøph
)

188 
	$__is˘y≥_f
 (
¥öt
)

189 
	$__is˘y≥_f
 (
pun˘
)

190 
	$__is˘y≥_f
 (
•a˚
)

191 
	$__is˘y≥_f
 (
uµî
)

192 
	$__is˘y≥_f
 (
xdigô
)

193 #ifde‡
__USE_ISOC99


194 
	$__is˘y≥_f
 (
bœnk
)

196 #ñi‡
deföed
 
__is˘y≥


197 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

198 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

199 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

200 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

201 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

202 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

203 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

204 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

205 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

206 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

207 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

208 #ifde‡
__USE_ISOC99


209 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

213 #ifde‡
__USE_EXTERN_INLINES


214 
__exã∫_ölöe
 

215 
	`__NTH
 (
	$tﬁowî
 (
__c
))

217  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

218 
	}
}

220 
__exã∫_ölöe
 

221 
__NTH
 (
	$touµî
 (
__c
))

223  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

224 
	}
}

227 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


228 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

229 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

232 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


233 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

234 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

236 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

237 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

243 #ifde‡
__USE_XOPEN2K8


257 
	~<xloˇÀ.h
>

261 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

262 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

264 
	#__ex˘y≥_l
(
«me
) \

265 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

271 
__ex˘y≥_l
 (
iß um_l
);

272 
__ex˘y≥_l
 (
ißÕha_l
);

273 
__ex˘y≥_l
 (
is˙ål_l
);

274 
__ex˘y≥_l
 (
isdigô_l
);

275 
__ex˘y≥_l
 (
i¶owî_l
);

276 
__ex˘y≥_l
 (
isgøph_l
);

277 
__ex˘y≥_l
 (
i•röt_l
);

278 
__ex˘y≥_l
 (
i•un˘_l
);

279 
__ex˘y≥_l
 (
is•a˚_l
);

280 
__ex˘y≥_l
 (
isuµî_l
);

281 
__ex˘y≥_l
 (
isxdigô_l
);

283 
__ex˘y≥_l
 (
isbœnk_l
);

287 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

288 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

291 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


295 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

296 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

297 
	#__touµî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

299 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

300 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

304 #i‚de‡
__NO_CTYPE


305 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

306 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

307 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

308 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

309 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

310 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

311 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

312 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

313 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

314 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

315 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

317 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

319 #ifde‡
__USE_MISC


320 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

321 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

324 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

325 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

326 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

327 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

328 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

329 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

330 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

331 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

332 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

333 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

334 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

336 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

338 #ifde‡
__USE_MISC


339 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

340 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

347 
__END_DECLS


	@/usr/include/dirent.h

22 #i‚def 
_DIRENT_H


23 
	#_DIRENT_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifde‡
__USE_XOPEN


32 #i‚de‡
__öo_t_deföed


33 #i‚de‡
__USE_FILE_OFFSET64


34 
__öo_t
 
	töo_t
;

36 
__öo64_t
 
	töo_t
;

38 
	#__öo_t_deföed


	)

40 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


41 
__öo64_t
 
	töo64_t
;

42 
	#__öo64_t_deföed


	)

61 
	~<bôs/dúít.h
>

63 #i‡
deföed
 
__USE_MISC
 && !deföed 
d_fûío


64 
	#d_öo
 
d_fûío


	)

81 #ifde‡
_DIRENT_HAVE_D_NAMLEN


82 
	#_D_EXACT_NAMLEN
(
d
Ë((d)->
d_«mÀn
)

	)

83 
	#_D_ALLOC_NAMLEN
(
d
Ë(
	`_D_EXACT_NAMLEN
 (dË+ 1)

	)

85 
	#_D_EXACT_NAMLEN
(
d
Ë(
	`°æí
 ((d)->
d_«me
))

	)

86 #ifde‡
_DIRENT_HAVE_D_RECLEN


87 
	#_D_ALLOC_NAMLEN
(
d
Ë(((*Ë(dË+ (d)->
d_ª˛í
Ë- &(d)->
d_«me
[0])

	)

89 
	#_D_ALLOC_NAMLEN
(
d
Ë( (d)->
d_«me
 > 1 ?  (d)->d_name : \

90 
	`_D_EXACT_NAMLEN
 (
d
Ë+ 1)

	)

95 #ifde‡
__USE_MISC


99 
	mDT_UNKNOWN
 = 0,

100 
	#DT_UNKNOWN
 
DT_UNKNOWN


	)

101 
	mDT_FIFO
 = 1,

102 
	#DT_FIFO
 
DT_FIFO


	)

103 
	mDT_CHR
 = 2,

104 
	#DT_CHR
 
DT_CHR


	)

105 
	mDT_DIR
 = 4,

106 
	#DT_DIR
 
DT_DIR


	)

107 
	mDT_BLK
 = 6,

108 
	#DT_BLK
 
DT_BLK


	)

109 
	mDT_REG
 = 8,

110 
	#DT_REG
 
DT_REG


	)

111 
	mDT_LNK
 = 10,

112 
	#DT_LNK
 
DT_LNK


	)

113 
	mDT_SOCK
 = 12,

114 
	#DT_SOCK
 
DT_SOCK


	)

115 
	mDT_WHT
 = 14

116 
	#DT_WHT
 
DT_WHT


	)

120 
	#IFTODT
(
mode
Ë(((modeË& 0170000Ë>> 12)

	)

121 
	#DTTOIF
(
dúty≥
Ë((dúty≥Ë<< 12)

	)

127 
__dú°ªam
 
	tDIR
;

134 
DIR
 *
	$›ídú
 (c⁄° *
__«me
Ë
	`__n⁄nuŒ
 ((1));

136 #ifde‡
__USE_XOPEN2K8


141 
DIR
 *
	`fd›ídú
 (
__fd
);

149 
	$˛o£dú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

161 #i‚de‡
__USE_FILE_OFFSET64


162 
dúít
 *
	$ªaddú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

164 #ifde‡
__REDIRECT


165 
dúít
 *
	`__REDIRECT
 (
ªaddú
, (
DIR
 *
__dúp
), 
ªaddú64
)

166 
	`__n⁄nuŒ
 ((1));

168 
	#ªaddú
 
ªaddú64


	)

172 #ifde‡
__USE_LARGEFILE64


173 
dúít64
 *
	$ªaddú64
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

176 #ifde‡
__USE_POSIX


182 #i‚de‡
__USE_FILE_OFFSET64


183 
	$ªaddú_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

184 
dúít
 *
__ª°ri˘
 
__íåy
,

185 
dúít
 **
__ª°ri˘
 
__ªsu…
)

186 
	`__n⁄nuŒ
 ((1, 2, 3));

188 #ifde‡
__REDIRECT


189 
	`__REDIRECT
 (
ªaddú_r
,

190 (
DIR
 *
__ª°ri˘
 
__dúp
,

191 
dúít
 *
__ª°ri˘
 
__íåy
,

192 
dúít
 **
__ª°ri˘
 
__ªsu…
),

193 
ªaddú64_r
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

195 
	#ªaddú_r
 
ªaddú64_r


	)

199 #ifde‡
__USE_LARGEFILE64


200 
	$ªaddú64_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

201 
dúít64
 *
__ª°ri˘
 
__íåy
,

202 
dúít64
 **
__ª°ri˘
 
__ªsu…
)

203 
	`__n⁄nuŒ
 ((1, 2, 3));

208 
	$ªwöddú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

210 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


211 
	~<bôs/ty≥s.h
>

214 
	$£ekdú
 (
DIR
 *
__dúp
, 
__pos
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
	$ãŒdú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

220 #ifde‡
__USE_XOPEN2K8


223 
	$dúfd
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 #i‡
deföed
 
__OPTIMIZE__
 && deföed 
_DIR_dúfd


226 
	#dúfd
(
dúp
Ë
	`_DIR_dúfd
 (dúp)

	)

229 #ifde‡
__USE_MISC


230 #i‚de‡
MAXNAMLEN


232 
	~<bôs/posix1_lim.h
>

235 #ifde‡
NAME_MAX


236 
	#MAXNAMLEN
 
NAME_MAX


	)

238 
	#MAXNAMLEN
 255

	)

243 
	#__√ed_size_t


	)

244 
	~<°ddef.h
>

253 #i‚de‡
__USE_FILE_OFFSET64


254 
	$sˇndú
 (c⁄° *
__ª°ri˘
 
__dú
,

255 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

256 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

257 (*
__cmp
Ë(c⁄° 
dúít
 **,

258 c⁄° 
dúít
 **))

259 
	`__n⁄nuŒ
 ((1, 2));

261 #ifde‡
__REDIRECT


262 
	`__REDIRECT
 (
sˇndú
,

263 (c⁄° *
__ª°ri˘
 
__dú
,

264 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

265 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

266 (*
__cmp
Ë(c⁄° 
dúít
 **,

267 c⁄° 
dúít
 **)),

268 
sˇndú64
Ë
	`__n⁄nuŒ
 ((1, 2));

270 
	#sˇndú
 
sˇndú64


	)

274 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


277 
	$sˇndú64
 (c⁄° *
__ª°ri˘
 
__dú
,

278 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

279 (*
__£À˘‹
Ë(c⁄° 
dúít64
 *),

280 (*
__cmp
Ë(c⁄° 
dúít64
 **,

281 c⁄° 
dúít64
 **))

282 
	`__n⁄nuŒ
 ((1, 2));

285 #ifde‡
__USE_GNU


291 #i‚de‡
__USE_FILE_OFFSET64


292 
	$sˇndú©
 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

293 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

294 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

295 (*
__cmp
Ë(c⁄° 
dúít
 **,

296 c⁄° 
dúít
 **))

297 
	`__n⁄nuŒ
 ((2, 3));

299 #ifde‡
__REDIRECT


300 
	`__REDIRECT
 (
sˇndú©
,

301 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

302 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

303 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

304 (*
__cmp
Ë(c⁄° 
dúít
 **,

305 c⁄° 
dúít
 **)),

306 
sˇndú©64
Ë
	`__n⁄nuŒ
 ((2, 3));

308 
	#sˇndú©
 
sˇndú©64


	)

314 
	$sˇndú©64
 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

315 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

316 (*
__£À˘‹
Ë(c⁄° 
dúít64
 *),

317 (*
__cmp
Ë(c⁄° 
dúít64
 **,

318 c⁄° 
dúít64
 **))

319 
	`__n⁄nuŒ
 ((2, 3));

323 #i‚de‡
__USE_FILE_OFFSET64


324 
	$Æphas‹t
 (c⁄° 
dúít
 **
__e1
,

325 c⁄° 
dúít
 **
__e2
)

326 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

328 #ifde‡
__REDIRECT


329 
	`__REDIRECT_NTH
 (
Æphas‹t
,

330 (c⁄° 
dúít
 **
__e1
,

331 c⁄° 
dúít
 **
__e2
),

332 
Æphas‹t64
Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

334 
	#Æphas‹t
 
Æphas‹t64


	)

338 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


339 
	$Æphas‹t64
 (c⁄° 
dúít64
 **
__e1
,

340 c⁄° 
dúít64
 **
__e2
)

341 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

346 #ifde‡
__USE_MISC


351 #i‚de‡
__USE_FILE_OFFSET64


352 
__ssize_t
 
	$gëdúíåõs
 (
__fd
, *
__ª°ri˘
 
__buf
,

353 
size_t
 
__nbyãs
,

354 
__off_t
 *
__ª°ri˘
 
__ba£p
)

355 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

357 #ifde‡
__REDIRECT


358 
__ssize_t
 
	`__REDIRECT_NTH
 (
gëdúíåõs
,

359 (
__fd
, *
__ª°ri˘
 
__buf
,

360 
size_t
 
__nbyãs
,

361 
__off64_t
 *
__ª°ri˘
 
__ba£p
),

362 
gëdúíåõs64
Ë
	`__n⁄nuŒ
 ((2, 4));

364 
	#gëdúíåõs
 
gëdúíåõs64


	)

368 #ifde‡
__USE_LARGEFILE64


369 
__ssize_t
 
	$gëdúíåõs64
 (
__fd
, *
__ª°ri˘
 
__buf
,

370 
size_t
 
__nbyãs
,

371 
__off64_t
 *
__ª°ri˘
 
__ba£p
)

372 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

376 #ifde‡
__USE_GNU


378 #i‚de‡
__USE_FILE_OFFSET64


379 
	$vîsi⁄s‹t
 (c⁄° 
dúít
 **
__e1
,

380 c⁄° 
dúít
 **
__e2
)

381 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

383 #ifde‡
__REDIRECT


384 
	`__REDIRECT_NTH
 (
vîsi⁄s‹t
,

385 (c⁄° 
dúít
 **
__e1
,

386 c⁄° 
dúít
 **
__e2
),

387 
vîsi⁄s‹t64
)

388 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

390 
	#vîsi⁄s‹t
 
vîsi⁄s‹t64


	)

394 #ifde‡
__USE_LARGEFILE64


395 
	$vîsi⁄s‹t64
 (c⁄° 
dúít64
 **
__e1
,

396 c⁄° 
dúít64
 **
__e2
)

397 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

401 
__END_DECLS


	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


26 #i‚def 
__√ed_Em©h


27 
	#_ERRNO_H
 1

	)

28 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


35 
	~<bôs/î∫o.h
>

36 #unde‡
__√ed_Em©h


38 #ifdef 
_ERRNO_H


45 #i‚def 
î∫o


46 
î∫o
;

49 #ifde‡
__USE_GNU


54 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

58 
	g__END_DECLS


66 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


67 #i‚de‡
__îr‹_t_deföed


68 
	tîr‹_t
;

69 
	#__îr‹_t_deföed
 1

	)

71 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

39 #ifde‡
__O_TMPFILE


40 
	#__OPEN_NEEDS_MODE
(
oÊag
) \

41 (((
oÊag
Ë& 
O_CREAT
Ë!0 || ((oÊagË& 
__O_TMPFILE
Ë=__O_TMPFILE)

	)

43 
	#__OPEN_NEEDS_MODE
(
oÊag
Ë(((oÊagË& 
O_CREAT
Ë!0)

	)

49 #i‚de‡
__mode_t_deföed


50 
__mode_t
 
	tmode_t
;

51 
	#__mode_t_deföed


	)

54 #i‚de‡
__off_t_deföed


55 #i‚de‡
__USE_FILE_OFFSET64


56 
__off_t
 
	toff_t
;

58 
__off64_t
 
	toff_t
;

60 
	#__off_t_deföed


	)

63 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


64 
__off64_t
 
	toff64_t
;

65 
	#__off64_t_deföed


	)

68 #i‚de‡
__pid_t_deföed


69 
__pid_t
 
	tpid_t
;

70 
	#__pid_t_deföed


	)

74 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


75 
	#__√ed_time•ec


	)

76 
	~<time.h
>

77 
	~<bôs/°©.h
>

79 
	#S_IFMT
 
__S_IFMT


	)

80 
	#S_IFDIR
 
__S_IFDIR


	)

81 
	#S_IFCHR
 
__S_IFCHR


	)

82 
	#S_IFBLK
 
__S_IFBLK


	)

83 
	#S_IFREG
 
__S_IFREG


	)

84 #ifde‡
__S_IFIFO


85 
	#S_IFIFO
 
__S_IFIFO


	)

87 #ifde‡
__S_IFLNK


88 
	#S_IFLNK
 
__S_IFLNK


	)

90 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


91 
	#S_IFSOCK
 
__S_IFSOCK


	)

96 
	#S_ISUID
 
__S_ISUID


	)

97 
	#S_ISGID
 
__S_ISGID


	)

99 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


101 
	#S_ISVTX
 
__S_ISVTX


	)

104 
	#S_IRUSR
 
__S_IREAD


	)

105 
	#S_IWUSR
 
__S_IWRITE


	)

106 
	#S_IXUSR
 
__S_IEXEC


	)

108 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

110 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

111 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

112 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

114 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

116 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

117 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

118 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

120 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

123 #ifdef 
__USE_MISC


124 #i‚de‡
R_OK


127 
	#R_OK
 4

	)

128 
	#W_OK
 2

	)

129 
	#X_OK
 1

	)

130 
	#F_OK
 0

	)

135 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


136 
	#SEEK_SET
 0

	)

137 
	#SEEK_CUR
 1

	)

138 
	#SEEK_END
 2

	)

146 
f˙é
 (
__fd
, 
__cmd
, ...);

155 #i‚de‡
__USE_FILE_OFFSET64


156 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

158 #ifde‡
__REDIRECT


159 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

160 
	`__n⁄nuŒ
 ((1));

162 
	#›í
 
›í64


	)

165 #ifde‡
__USE_LARGEFILE64


166 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

169 #ifde‡
__USE_ATFILE


179 #i‚de‡
__USE_FILE_OFFSET64


180 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

181 
	`__n⁄nuŒ
 ((2));

183 #ifde‡
__REDIRECT


184 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

185 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

187 
	#›í©
 
›í©64


	)

190 #ifde‡
__USE_LARGEFILE64


191 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

192 
	`__n⁄nuŒ
 ((2));

201 #i‚de‡
__USE_FILE_OFFSET64


202 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

204 #ifde‡
__REDIRECT


205 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

206 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

208 
	#¸ót
 
¸ót64


	)

211 #ifde‡
__USE_LARGEFILE64


212 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

215 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

216 && !
deföed
 
__USE_POSIX
))

225 
	#F_ULOCK
 0

	)

226 
	#F_LOCK
 1

	)

227 
	#F_TLOCK
 2

	)

228 
	#F_TEST
 3

	)

230 #i‚de‡
__USE_FILE_OFFSET64


231 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

233 #ifde‡
__REDIRECT


234 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

236 
	#lockf
 
lockf64


	)

239 #ifde‡
__USE_LARGEFILE64


240 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

244 #ifde‡
__USE_XOPEN2K


247 #i‚de‡
__USE_FILE_OFFSET64


248 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

249 
__advi£
Ë
__THROW
;

251 #ifde‡
__REDIRECT_NTH


252 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

253 
__off64_t
 
__Àn
, 
__advi£
),

254 
posix_Ádvi£64
);

256 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

259 #ifde‡
__USE_LARGEFILE64


260 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

261 
__advi£
Ë
__THROW
;

269 #i‚de‡
__USE_FILE_OFFSET64


270 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

272 #ifde‡
__REDIRECT


273 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

274 
__off64_t
 
__Àn
),

275 
posix_ÁŒoˇã64
);

277 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

280 #ifde‡
__USE_LARGEFILE64


281 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

287 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

288 && 
deföed
 
__va_¨g_∑ck_Àn


289 
	~<bôs/f˙é2.h
>

292 
__END_DECLS


	@/usr/include/getopt.h

19 #i‚de‡
_GETOPT_H


21 #i‚de‡
__√ed_gë›t


22 
	#_GETOPT_H
 1

	)

32 #i‡!
deföed
 
__GNU_LIBRARY__


33 
	~<˘y≥.h
>

36 #i‚de‡
__THROW


37 #i‚de‡
__GNUC_PREREQ


38 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

40 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

41 
	#__THROW
 
	`throw
 ()

	)

43 
	#__THROW


	)

47 #ifdef 
__˝lu•lus


57 *
›èrg
;

71 
›töd
;

76 
›ãº
;

80 
›t›t
;

82 #i‚de‡
__√ed_gë›t


104 
	s›ti⁄


106 c⁄° *
	g«me
;

109 
	ghas_¨g
;

110 *
	gÊag
;

111 
	gvÆ
;

116 
	#no_¨gumít
 0

	)

117 
	#ªquúed_¨gumít
 1

	)

118 
	#›ti⁄Æ_¨gumít
 2

	)

146 #ifde‡
__GNU_LIBRARY__


150 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

151 
__THROW
;

153 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

154 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


158 #ifde‡
__REDIRECT


159 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

160 c⁄° *
__sh‹t›ts
),

161 
__posix_gë›t
);

163 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

164 c⁄° *
__sh‹t›ts
Ë
__THROW
;

165 
	#gë›t
 
__posix_gë›t


	)

169 
gë›t
 ();

172 #i‚de‡
__√ed_gë›t


173 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

174 c⁄° *
__sh‹t›ts
,

175 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

176 
__THROW
;

177 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

178 c⁄° *
__sh‹t›ts
,

179 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

180 
__THROW
;

184 #ifdef 
__˝lu•lus


189 #unde‡
__√ed_gë›t


	@/usr/include/inttypes.h

22 #i‚de‡
_INTTYPES_H


23 
	#_INTTYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<°döt.h
>

30 #i‚de‡
____gwch¨_t_deföed


31 #ifde‡
__˝lu•lus


32 
	#__gwch¨_t
 
wch¨_t


	)

33 #ñi‡
deföed
 
__WCHAR_TYPE__


34 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

36 
	#__√ed_wch¨_t


	)

37 
	~<°ddef.h
>

38 
wch¨_t
 
	t__gwch¨_t
;

40 
	#____gwch¨_t_deföed
 1

	)

43 #i‡
__WORDSIZE
 == 64

44 
	#__PRI64_PREFIX
 "l"

	)

45 
	#__PRIPTR_PREFIX
 "l"

	)

47 
	#__PRI64_PREFIX
 "Œ"

	)

48 
	#__PRIPTR_PREFIX


	)

54 
	#PRId8
 "d"

	)

55 
	#PRId16
 "d"

	)

56 
	#PRId32
 "d"

	)

57 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

59 
	#PRIdLEAST8
 "d"

	)

60 
	#PRIdLEAST16
 "d"

	)

61 
	#PRIdLEAST32
 "d"

	)

62 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

64 
	#PRIdFAST8
 "d"

	)

65 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

66 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

67 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIi8
 "i"

	)

71 
	#PRIi16
 "i"

	)

72 
	#PRIi32
 "i"

	)

73 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

75 
	#PRIiLEAST8
 "i"

	)

76 
	#PRIiLEAST16
 "i"

	)

77 
	#PRIiLEAST32
 "i"

	)

78 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

80 
	#PRIiFAST8
 "i"

	)

81 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

82 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

83 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIo8
 "o"

	)

87 
	#PRIo16
 "o"

	)

88 
	#PRIo32
 "o"

	)

89 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

91 
	#PRIoLEAST8
 "o"

	)

92 
	#PRIoLEAST16
 "o"

	)

93 
	#PRIoLEAST32
 "o"

	)

94 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

96 
	#PRIoFAST8
 "o"

	)

97 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

98 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

99 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIu8
 "u"

	)

103 
	#PRIu16
 "u"

	)

104 
	#PRIu32
 "u"

	)

105 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

107 
	#PRIuLEAST8
 "u"

	)

108 
	#PRIuLEAST16
 "u"

	)

109 
	#PRIuLEAST32
 "u"

	)

110 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

112 
	#PRIuFAST8
 "u"

	)

113 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

114 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

115 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIx8
 "x"

	)

119 
	#PRIx16
 "x"

	)

120 
	#PRIx32
 "x"

	)

121 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

123 
	#PRIxLEAST8
 "x"

	)

124 
	#PRIxLEAST16
 "x"

	)

125 
	#PRIxLEAST32
 "x"

	)

126 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

128 
	#PRIxFAST8
 "x"

	)

129 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

130 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

131 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIX8
 "X"

	)

135 
	#PRIX16
 "X"

	)

136 
	#PRIX32
 "X"

	)

137 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

139 
	#PRIXLEAST8
 "X"

	)

140 
	#PRIXLEAST16
 "X"

	)

141 
	#PRIXLEAST32
 "X"

	)

142 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

144 
	#PRIXFAST8
 "X"

	)

145 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

146 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

147 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

151 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

152 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

153 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

154 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

155 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

156 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

160 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

161 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

162 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

163 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

164 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

165 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

171 
	#SCNd8
 "hhd"

	)

172 
	#SCNd16
 "hd"

	)

173 
	#SCNd32
 "d"

	)

174 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

176 
	#SCNdLEAST8
 "hhd"

	)

177 
	#SCNdLEAST16
 "hd"

	)

178 
	#SCNdLEAST32
 "d"

	)

179 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

181 
	#SCNdFAST8
 "hhd"

	)

182 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

183 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

184 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNi8
 "hhi"

	)

188 
	#SCNi16
 "hi"

	)

189 
	#SCNi32
 "i"

	)

190 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

192 
	#SCNiLEAST8
 "hhi"

	)

193 
	#SCNiLEAST16
 "hi"

	)

194 
	#SCNiLEAST32
 "i"

	)

195 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

197 
	#SCNiFAST8
 "hhi"

	)

198 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

199 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

200 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNu8
 "hhu"

	)

204 
	#SCNu16
 "hu"

	)

205 
	#SCNu32
 "u"

	)

206 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

208 
	#SCNuLEAST8
 "hhu"

	)

209 
	#SCNuLEAST16
 "hu"

	)

210 
	#SCNuLEAST32
 "u"

	)

211 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

213 
	#SCNuFAST8
 "hhu"

	)

214 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

215 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

216 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNo8
 "hho"

	)

220 
	#SCNo16
 "ho"

	)

221 
	#SCNo32
 "o"

	)

222 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

224 
	#SCNoLEAST8
 "hho"

	)

225 
	#SCNoLEAST16
 "ho"

	)

226 
	#SCNoLEAST32
 "o"

	)

227 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

229 
	#SCNoFAST8
 "hho"

	)

230 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

231 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

232 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNx8
 "hhx"

	)

236 
	#SCNx16
 "hx"

	)

237 
	#SCNx32
 "x"

	)

238 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

240 
	#SCNxLEAST8
 "hhx"

	)

241 
	#SCNxLEAST16
 "hx"

	)

242 
	#SCNxLEAST32
 "x"

	)

243 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

245 
	#SCNxFAST8
 "hhx"

	)

246 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

247 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

248 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

252 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

253 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

254 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

255 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

256 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

259 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

260 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

261 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

262 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

263 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

266 
	g__BEGIN_DECLS


268 #i‡
__WORDSIZE
 == 64

273 
	mquŸ
;

274 
	mªm
;

275 } 
	timaxdiv_t
;

282 
__exãnsi⁄__
 
	mquŸ
;

283 
__exãnsi⁄__
 
	mªm
;

284 } 
	timaxdiv_t
;

290 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

293 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

294 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

297 
ötmax_t
 
	$°πoimax
 (c⁄° *
__ª°ri˘
 
__≈å
,

298 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

301 
uötmax_t
 
	$°πoumax
 (c⁄° *
__ª°ri˘
 
__≈å
,

302 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

305 
ötmax_t
 
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

306 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

307 
__THROW
;

310 
uötmax_t
 
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

311 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

312 
__THROW
;

314 #ifde‡
__USE_EXTERN_INLINES


316 #i‡
__WORDSIZE
 == 64

318 
	$__°πﬁ_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

319 **
__ª°ri˘
 
__íd±r
,

320 
__ba£
, 
__group
)

321 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

323 
__exã∫_ölöe
 
ötmax_t


324 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

325 
ba£
))

327  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

328 
	}
}

330 
	$__°πoul_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 ** 
__ª°ri˘
 
__íd±r
,

332 
__ba£
, 
__group
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

335 
__exã∫_ölöe
 
uötmax_t


336 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

337 
ba£
))

339  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

340 
	}
}

342 
	$__wc°ﬁ_öã∫Æ
 (c⁄° 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

343 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

344 
__ba£
, 
__group
)

345 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

347 
__exã∫_ölöe
 
ötmax_t


348 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

349 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

351  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

352 
	}
}

354 
	$__wc°oul_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

355 
__ª°ri˘
 
__≈å
,

356 
__gwch¨_t
 **

357 
__ª°ri˘
 
__íd±r
,

358 
__ba£
, 
__group
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

361 
__exã∫_ölöe
 
uötmax_t


362 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

363 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

365  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

366 
	}
}

370 
__exãnsi⁄__


371 
	$__°πﬁl_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

372 **
__ª°ri˘
 
__íd±r
,

373 
__ba£
, 
__group
)

374 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

376 
__exã∫_ölöe
 
ötmax_t


377 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

378 
ba£
))

380  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

381 
	}
}

383 
__exãnsi⁄__


384 
	$__°πouŒ_öã∫Æ
 (const *

385 
__ª°ri˘
 
__≈å
,

387 
__ª°ri˘
 
__íd±r
,

388 
__ba£
,

389 
__group
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

392 
__exã∫_ölöe
 
uötmax_t


393 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

394 
ba£
))

396  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

397 
	}
}

399 
__exãnsi⁄__


400 
	$__wc°ﬁl_öã∫Æ
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

401 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

402 
__ba£
, 
__group
)

403 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

405 
__exã∫_ölöe
 
ötmax_t


406 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

407 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

409  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

410 
	}
}

413 
__exãnsi⁄__


414 
	$__wc°ouŒ_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

415 
__ª°ri˘
 
__≈å
,

416 
__gwch¨_t
 **

417 
__ª°ri˘
 
__íd±r
,

418 
__ba£
,

419 
__group
)

420 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

422 
__exã∫_ölöe
 
uötmax_t


423 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

424 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

426  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

427 
	}
}

432 
	g__END_DECLS


	@/usr/include/limits.h

22 #i‚de‡
_LIBC_LIMITS_H_


23 
	#_LIBC_LIMITS_H_
 1

	)

25 
	~<„©uªs.h
>

31 
	#MB_LEN_MAX
 16

	)

36 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

41 #i‚de‡
_LIMITS_H


42 
	#_LIMITS_H
 1

	)

44 
	~<bôs/w‹dsize.h
>

53 
	#CHAR_BIT
 8

	)

56 
	#SCHAR_MIN
 (-128)

	)

57 
	#SCHAR_MAX
 127

	)

60 
	#UCHAR_MAX
 255

	)

63 #ifde‡
__CHAR_UNSIGNED__


64 
	#CHAR_MIN
 0

	)

65 
	#CHAR_MAX
 
UCHAR_MAX


	)

67 
	#CHAR_MIN
 
SCHAR_MIN


	)

68 
	#CHAR_MAX
 
SCHAR_MAX


	)

72 
	#SHRT_MIN
 (-32768)

	)

73 
	#SHRT_MAX
 32767

	)

76 
	#USHRT_MAX
 65535

	)

79 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

80 
	#INT_MAX
 2147483647

	)

83 
	#UINT_MAX
 4294967295U

	)

86 #i‡
__WORDSIZE
 == 64

87 
	#LONG_MAX
 9223372036854775807L

	)

89 
	#LONG_MAX
 2147483647L

	)

91 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

94 #i‡
__WORDSIZE
 == 64

95 
	#ULONG_MAX
 18446744073709551615UL

	)

97 
	#ULONG_MAX
 4294967295UL

	)

100 #ifde‡
__USE_ISOC99


103 
	#LLONG_MAX
 9223372036854775807LL

	)

104 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

107 
	#ULLONG_MAX
 18446744073709551615ULL

	)

121 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


123 #ö˛ude_√xà<
limôs
.
h
>

129 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


130 #i‚de‡
LLONG_MIN


131 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

133 #i‚de‡
LLONG_MAX


134 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

136 #i‚de‡
ULLONG_MAX


137 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

141 #ifdef 
__USE_POSIX


143 
	~<bôs/posix1_lim.h
>

146 #ifdef 
__USE_POSIX2


147 
	~<bôs/posix2_lim.h
>

150 #ifdef 
__USE_XOPEN


151 
	~<bôs/x›í_lim.h
>

	@/usr/include/linux/i2c-dev.h

23 #i‚de‡
_LINUX_I2C_DEV_H


24 
	#_LINUX_I2C_DEV_H


	)

26 
	~<löux/ty≥s.h
>

35 
	#I2C_RETRIES
 0x0701

	)

37 
	#I2C_TIMEOUT
 0x0702

	)

42 
	#I2C_SLAVE
 0x0703

	)

43 
	#I2C_SLAVE_FORCE
 0x0706

	)

45 
	#I2C_TENBIT
 0x0704

	)

47 
	#I2C_FUNCS
 0x0705

	)

49 
	#I2C_RDWR
 0x0707

	)

51 
	#I2C_PEC
 0x0708

	)

52 
	#I2C_SMBUS
 0x0720

	)

56 
	si2c_smbus_io˘l_d©a
 {

57 
__u8
 
	mªad_wrôe
;

58 
__u8
 
	mcomm™d
;

59 
__u32
 
	msize
;

60 
i2c_smbus_d©a
 *
	md©a
;

64 
	si2c_rdwr_io˘l_d©a
 {

65 
i2c_msg
 *
	mmsgs
;

66 
__u32
 
	mnmsgs
;

69 
	#I2C_RDWR_IOCTL_MAX_MSGS
 42

	)

71 
	#I2C_RDRW_IOCTL_MAX_MSGS
 
I2C_RDWR_IOCTL_MAX_MSGS


	)

	@/usr/include/linux/i2c.h

27 #i‚de‡
_LINUX_I2C_H


28 
	#_LINUX_I2C_H


	)

30 
	~<löux/ty≥s.h
>

68 
	si2c_msg
 {

69 
__u16
 
	maddr
;

70 
__u16
 
	mÊags
;

71 
	#I2C_M_TEN
 0x0010

	)

72 
	#I2C_M_RD
 0x0001

	)

73 
	#I2C_M_STOP
 0x8000

	)

74 
	#I2C_M_NOSTART
 0x4000

	)

75 
	#I2C_M_REV_DIR_ADDR
 0x2000

	)

76 
	#I2C_M_IGNORE_NAK
 0x1000

	)

77 
	#I2C_M_NO_RD_ACK
 0x0800

	)

78 
	#I2C_M_RECV_LEN
 0x0400

	)

79 
__u16
 
	mÀn
;

80 
__u8
 *
	mbuf
;

85 
	#I2C_FUNC_I2C
 0x00000001

	)

86 
	#I2C_FUNC_10BIT_ADDR
 0x00000002

	)

87 
	#I2C_FUNC_PROTOCOL_MANGLING
 0x00000004

	)

88 
	#I2C_FUNC_SMBUS_PEC
 0x00000008

	)

89 
	#I2C_FUNC_NOSTART
 0x00000010

	)

90 
	#I2C_FUNC_SLAVE
 0x00000020

	)

91 
	#I2C_FUNC_SMBUS_BLOCK_PROC_CALL
 0x00008000

	)

92 
	#I2C_FUNC_SMBUS_QUICK
 0x00010000

	)

93 
	#I2C_FUNC_SMBUS_READ_BYTE
 0x00020000

	)

94 
	#I2C_FUNC_SMBUS_WRITE_BYTE
 0x00040000

	)

95 
	#I2C_FUNC_SMBUS_READ_BYTE_DATA
 0x00080000

	)

96 
	#I2C_FUNC_SMBUS_WRITE_BYTE_DATA
 0x00100000

	)

97 
	#I2C_FUNC_SMBUS_READ_WORD_DATA
 0x00200000

	)

98 
	#I2C_FUNC_SMBUS_WRITE_WORD_DATA
 0x00400000

	)

99 
	#I2C_FUNC_SMBUS_PROC_CALL
 0x00800000

	)

100 
	#I2C_FUNC_SMBUS_READ_BLOCK_DATA
 0x01000000

	)

101 
	#I2C_FUNC_SMBUS_WRITE_BLOCK_DATA
 0x02000000

	)

102 
	#I2C_FUNC_SMBUS_READ_I2C_BLOCK
 0x04000000

	)

103 
	#I2C_FUNC_SMBUS_WRITE_I2C_BLOCK
 0x08000000

	)

105 
	#I2C_FUNC_SMBUS_BYTE
 (
I2C_FUNC_SMBUS_READ_BYTE
 | \

106 
I2C_FUNC_SMBUS_WRITE_BYTE
)

	)

107 
	#I2C_FUNC_SMBUS_BYTE_DATA
 (
I2C_FUNC_SMBUS_READ_BYTE_DATA
 | \

108 
I2C_FUNC_SMBUS_WRITE_BYTE_DATA
)

	)

109 
	#I2C_FUNC_SMBUS_WORD_DATA
 (
I2C_FUNC_SMBUS_READ_WORD_DATA
 | \

110 
I2C_FUNC_SMBUS_WRITE_WORD_DATA
)

	)

111 
	#I2C_FUNC_SMBUS_BLOCK_DATA
 (
I2C_FUNC_SMBUS_READ_BLOCK_DATA
 | \

112 
I2C_FUNC_SMBUS_WRITE_BLOCK_DATA
)

	)

113 
	#I2C_FUNC_SMBUS_I2C_BLOCK
 (
I2C_FUNC_SMBUS_READ_I2C_BLOCK
 | \

114 
I2C_FUNC_SMBUS_WRITE_I2C_BLOCK
)

	)

116 
	#I2C_FUNC_SMBUS_EMUL
 (
I2C_FUNC_SMBUS_QUICK
 | \

117 
I2C_FUNC_SMBUS_BYTE
 | \

118 
I2C_FUNC_SMBUS_BYTE_DATA
 | \

119 
I2C_FUNC_SMBUS_WORD_DATA
 | \

120 
I2C_FUNC_SMBUS_PROC_CALL
 | \

121 
I2C_FUNC_SMBUS_WRITE_BLOCK_DATA
 | \

122 
I2C_FUNC_SMBUS_I2C_BLOCK
 | \

123 
I2C_FUNC_SMBUS_PEC
)

	)

128 
	#I2C_SMBUS_BLOCK_MAX
 32

	)

129 
	ui2c_smbus_d©a
 {

130 
__u8
 
	mbyã
;

131 
__u16
 
	mw‹d
;

132 
__u8
 
	mblock
[
I2C_SMBUS_BLOCK_MAX
 + 2];

137 
	#I2C_SMBUS_READ
 1

	)

138 
	#I2C_SMBUS_WRITE
 0

	)

142 
	#I2C_SMBUS_QUICK
 0

	)

143 
	#I2C_SMBUS_BYTE
 1

	)

144 
	#I2C_SMBUS_BYTE_DATA
 2

	)

145 
	#I2C_SMBUS_WORD_DATA
 3

	)

146 
	#I2C_SMBUS_PROC_CALL
 4

	)

147 
	#I2C_SMBUS_BLOCK_DATA
 5

	)

148 
	#I2C_SMBUS_I2C_BLOCK_BROKEN
 6

	)

149 
	#I2C_SMBUS_BLOCK_PROC_CALL
 7

	)

150 
	#I2C_SMBUS_I2C_BLOCK_DATA
 8

	)

	@/usr/include/linux/spi/spidev.h

22 #i‚de‡
SPIDEV_H


23 
	#SPIDEV_H


	)

25 
	~<löux/ty≥s.h
>

26 
	~<löux/io˘l.h
>

32 
	#SPI_CPHA
 0x01

	)

33 
	#SPI_CPOL
 0x02

	)

35 
	#SPI_MODE_0
 (0|0)

	)

36 
	#SPI_MODE_1
 (0|
SPI_CPHA
)

	)

37 
	#SPI_MODE_2
 (
SPI_CPOL
|0)

	)

38 
	#SPI_MODE_3
 (
SPI_CPOL
|
SPI_CPHA
)

	)

40 
	#SPI_CS_HIGH
 0x04

	)

41 
	#SPI_LSB_FIRST
 0x08

	)

42 
	#SPI_3WIRE
 0x10

	)

43 
	#SPI_LOOP
 0x20

	)

44 
	#SPI_NO_CS
 0x40

	)

45 
	#SPI_READY
 0x80

	)

46 
	#SPI_TX_DUAL
 0x100

	)

47 
	#SPI_TX_QUAD
 0x200

	)

48 
	#SPI_RX_DUAL
 0x400

	)

49 
	#SPI_RX_QUAD
 0x800

	)

55 
	#SPI_IOC_MAGIC
 'k'

	)

90 
	s•i_ioc_å™s„r
 {

91 
__u64
 
	mtx_buf
;

92 
__u64
 
	mrx_buf
;

94 
__u32
 
	mÀn
;

95 
__u32
 
	m•ìd_hz
;

97 
__u16
 
	mdñay_u£cs
;

98 
__u8
 
	mbôs_≥r_w‹d
;

99 
__u8
 
	mcs_ch™ge
;

100 
__u8
 
	mtx_nbôs
;

101 
__u8
 
	mrx_nbôs
;

102 
__u16
 
	m∑d
;

114 
	#SPI_MSGSIZE
(
N
) \

115 ((((
N
)*( (
•i_ioc_å™s„r
))Ë< (1 << 
_IOC_SIZEBITS
)) \

116 ? ((
N
)*( (
•i_ioc_å™s„r
))Ë: 0)

	)

117 
	#SPI_IOC_MESSAGE
(
N
Ë
	`_IOW
(
SPI_IOC_MAGIC
, 0, [
	`SPI_MSGSIZE
(N)])

	)

121 
	#SPI_IOC_RD_MODE
 
	`_IOR
(
SPI_IOC_MAGIC
, 1, 
__u8
)

	)

122 
	#SPI_IOC_WR_MODE
 
	`_IOW
(
SPI_IOC_MAGIC
, 1, 
__u8
)

	)

125 
	#SPI_IOC_RD_LSB_FIRST
 
	`_IOR
(
SPI_IOC_MAGIC
, 2, 
__u8
)

	)

126 
	#SPI_IOC_WR_LSB_FIRST
 
	`_IOW
(
SPI_IOC_MAGIC
, 2, 
__u8
)

	)

129 
	#SPI_IOC_RD_BITS_PER_WORD
 
	`_IOR
(
SPI_IOC_MAGIC
, 3, 
__u8
)

	)

130 
	#SPI_IOC_WR_BITS_PER_WORD
 
	`_IOW
(
SPI_IOC_MAGIC
, 3, 
__u8
)

	)

133 
	#SPI_IOC_RD_MAX_SPEED_HZ
 
	`_IOR
(
SPI_IOC_MAGIC
, 4, 
__u32
)

	)

134 
	#SPI_IOC_WR_MAX_SPEED_HZ
 
	`_IOW
(
SPI_IOC_MAGIC
, 4, 
__u32
)

	)

137 
	#SPI_IOC_RD_MODE32
 
	`_IOR
(
SPI_IOC_MAGIC
, 5, 
__u32
)

	)

138 
	#SPI_IOC_WR_MODE32
 
	`_IOW
(
SPI_IOC_MAGIC
, 5, 
__u32
)

	)

	@/usr/include/math.h

23 #i‚def 
_MATH_H


24 
	#_MATH_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/m©h-ve˘‹.h
>

35 
	~<bôs/huge_vÆ.h
>

36 #ifde‡
__USE_ISOC99


37 
	~<bôs/huge_vÆf.h
>

38 
	~<bôs/huge_vÆl.h
>

41 
	~<bôs/öf.h
>

44 
	~<bôs/«n.h
>

48 
	~<bôs/m©hdef.h
>

55 
	#__SIMD_DECL
(
fun˘i⁄
Ë
	`__CONCAT
 (
__DECL_SIMD_
, fun˘i⁄)

	)

57 
	#__MATHCALL_VEC
(
fun˘i⁄
, 
suffix
, 
¨gs
) \

58 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

59 
	`__MATHCALL
 (
fun˘i⁄
, 
suffix
, 
¨gs
)

	)

61 
	#__MATHDECL_VEC
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

62 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

63 
	`__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
)

	)

65 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

66 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

67 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

68 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

69 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

70 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

71 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

72 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

73 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

74 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

75 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

76 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

78 
	#_MdoubÀ_
 

	)

79 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

80 
	#__MATH_DECLARING_DOUBLE
 1

	)

81 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_STD


	)

82 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_STD


	)

83 
	~<bôs/m©hˇŒs.h
>

84 #unde‡
_MdoubÀ_


85 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


86 #unde‡
_MdoubÀ_END_NAMESPACE


87 #unde‡
__MATH_PRECNAME


88 #unde‡
__MATH_DECLARING_DOUBLE


90 #ifde‡
__USE_ISOC99


96 #i‚de‡
_MÊﬂt_


97 
	#_MÊﬂt_
 

	)

99 
	#_MdoubÀ_
 
_MÊﬂt_


	)

100 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

101 
	#__MATH_DECLARING_DOUBLE
 0

	)

102 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

103 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

104 
	~<bôs/m©hˇŒs.h
>

105 #unde‡
_MdoubÀ_


106 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


107 #unde‡
_MdoubÀ_END_NAMESPACE


108 #unde‡
__MATH_PRECNAME


109 #unde‡
__MATH_DECLARING_DOUBLE


111 #i‡!(
deföed
 
__NO_LONG_DOUBLE_MATH
 && deföed 
_LIBC
) \

112 || 
deföed
 
__LDBL_COMPAT
 \

113 || 
deföed
 
_LIBC_TEST


114 #ifde‡
__LDBL_COMPAT


116 #ifde‡
__USE_ISOC99


117 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

118 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

119 #ifde‡
__REDIRECT_NTH


120 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

121 
__∆dbl_√xâow¨df
)

122 
	`__©åibuã__
 ((
__c⁄°__
));

123 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

124 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

125 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

126 (
__x
, 
__y
),

127 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

131 #unde‡
__MATHDECL_1


132 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

133 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

134 
¨gs
, 
Æüs
)

	)

135 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

136 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

142 #i‚de‡
_Ml⁄g_doubÀ_


143 
	#_Ml⁄g_doubÀ_
 

	)

145 
	#_MdoubÀ_
 
_Ml⁄g_doubÀ_


	)

146 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

147 
	#__MATH_DECLARING_DOUBLE
 0

	)

148 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

149 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

150 
	#__MATH_DECLARE_LDOUBLE
 1

	)

151 
	~<bôs/m©hˇŒs.h
>

152 #unde‡
_MdoubÀ_


153 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


154 #unde‡
_MdoubÀ_END_NAMESPACE


155 #unde‡
__MATH_PRECNAME


156 #unde‡
__MATH_DECLARING_DOUBLE


161 #unde‡
__MATHDECL_1


162 #unde‡
__MATHDECL


163 #unde‡
__MATHCALL


166 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


168 
signgam
;

173 #ifde‡
__USE_ISOC99


211 
FP_NAN
 =

212 
	#FP_NAN
 0

	)

213 
FP_NAN
,

214 
FP_INFINITE
 =

215 
	#FP_INFINITE
 1

	)

216 
FP_INFINITE
,

217 
FP_ZERO
 =

218 
	#FP_ZERO
 2

	)

219 
FP_ZERO
,

220 
FP_SUBNORMAL
 =

221 
	#FP_SUBNORMAL
 3

	)

222 
FP_SUBNORMAL
,

223 
FP_NORMAL
 =

224 
	#FP_NORMAL
 4

	)

225 
FP_NORMAL


233 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__
 \

234 && !
deföed
 
__OPTIMIZE_SIZE__


235 
	#Â˛assify
(
x
Ë
	`__buûtö_Â˛assify
 (
FP_NAN
, 
FP_INFINITE
, \

236 
FP_NORMAL
, 
FP_SUBNORMAL
, 
FP_ZERO
, 
x
)

	)

237 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


238 
	#Â˛assify
(
x
) \

239 ( (
x
Ë= (Ë? 
	`__Â˛assifyf
 (xË: 
	`__Â˛assify
 (x))

	)

241 
	#Â˛assify
(
x
) \

242 ( (
x
) ==  () \

243 ? 
	`__Â˛assifyf
 (
x
) \

244 :  (
x
) ==  () \

245 ? 
	`__Â˛assify
 (
x
Ë: 
	`__Â˛assifyl
 (x))

	)

249 #i‡
	`__GNUC_PREREQ
 (4,0)

250 
	#signbô
(
x
) \

251 ( (
x
) ==  () \

252 ? 
	`__buûtö_signbôf
 (
x
) \

253 :  (
x
) ==  () \

254 ? 
	`__buûtö_signbô
 (
x
Ë: 
	`__buûtö_signbôl
 (x))

	)

256 #ifde‡
__NO_LONG_DOUBLE_MATH


257 
	#signbô
(
x
) \

258 ( (
x
Ë= (Ë? 
	`__signbôf
 (xË: 
	`__signbô
 (x))

	)

260 
	#signbô
(
x
) \

261 ( (
x
) ==  () \

262 ? 
	`__signbôf
 (
x
) \

263 :  (
x
) ==  () \

264 ? 
	`__signbô
 (
x
Ë: 
	`__signbôl
 (x))

	)

269 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


270 
	#isföôe
(
x
Ë
	`__buûtö_isföôe
 (x)

	)

271 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


272 
	#isföôe
(
x
) \

273 ( (
x
Ë= (Ë? 
	`__föôef
 (xË: 
	`__föôe
 (x))

	)

275 
	#isföôe
(
x
) \

276 ( (
x
) ==  () \

277 ? 
	`__föôef
 (
x
) \

278 :  (
x
) ==  () \

279 ? 
	`__föôe
 (
x
Ë: 
	`__föôñ
 (x))

	)

283 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


284 
	#i¢‹mÆ
(
x
Ë
	`__buûtö_i¢‹mÆ
 (x)

	)

286 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

291 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


292 
	#i¢™
(
x
Ë
	`__buûtö_i¢™
 (x)

	)

293 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


294 
	#i¢™
(
x
) \

295 ( (
x
Ë= (Ë? 
	`__i¢™f
 (xË: 
	`__i¢™
 (x))

	)

297 
	#i¢™
(
x
) \

298 ( (
x
) ==  () \

299 ? 
	`__i¢™f
 (
x
) \

300 :  (
x
) ==  () \

301 ? 
	`__i¢™
 (
x
Ë: 
	`__i¢™l
 (x))

	)

305 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


306 
	#isöf
(
x
Ë
	`__buûtö_isöf_sign
 (x)

	)

307 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


308 
	#isöf
(
x
) \

309 ( (
x
Ë= (Ë? 
	`__isöff
 (xË: 
	`__isöf
 (x))

	)

311 
	#isöf
(
x
) \

312 ( (
x
) ==  () \

313 ? 
	`__isöff
 (
x
) \

314 :  (
x
) ==  () \

315 ? 
	`__isöf
 (
x
Ë: 
	`__isöÊ
 (x))

	)

319 
	#MATH_ERRNO
 1

	)

320 
	#MATH_ERREXCEPT
 2

	)

325 #i‚de‡
__FAST_MATH__


326 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

331 #ifde‡
__USE_GNU


333 #ifde‡
__NO_LONG_DOUBLE_MATH


334 
	#issig«lög
(
x
) \

335 ( (
x
Ë= (Ë? 
	`__issig«lögf
 (xË: 
	`__issig«lög
 (x))

	)

337 
	#issig«lög
(
x
) \

338 ( (
x
) ==  () \

339 ? 
	`__issig«lögf
 (
x
) \

340 :  (
x
) ==  () \

341 ? 
	`__issig«lög
 (
x
Ë: 
	`__issig«lögl
 (x))

	)

345 #ifdef 
__USE_MISC


349 
_IEEE_
 = -1,

350 
_SVID_
,

351 
_XOPEN_
,

352 
_POSIX_
,

353 
_ISOC_


354 } 
	t_LIB_VERSION_TYPE
;

359 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

363 #ifde‡
__USE_MISC


369 #ifde‡
__˝lu•lus


370 
__ex˚±i⁄


372 
ex˚±i⁄


375 
ty≥
;

376 *
«me
;

377 
¨g1
;

378 
¨g2
;

379 
ªtvÆ
;

380 
	}
};

382 #ifde‡
__˝lu•lus


383 
	$m©hîr
 (
__ex˚±i⁄
 *
__exc
Ë
	`throw
 ();

385 
	`m©hîr
 (
ex˚±i⁄
 *
__exc
);

388 
	#X_TLOSS
 1.41484755040568800000e+16

	)

391 
	#DOMAIN
 1

	)

392 
	#SING
 2

	)

393 
	#OVERFLOW
 3

	)

394 
	#UNDERFLOW
 4

	)

395 
	#TLOSS
 5

	)

396 
	#PLOSS
 6

	)

399 
	#HUGE
 3.40282347e+38F

	)

403 #ifde‡
__USE_XOPEN


405 
	#MAXFLOAT
 3.40282347e+38F

	)

412 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


413 
	#M_E
 2.7182818284590452354

	)

414 
	#M_LOG2E
 1.4426950408889634074

	)

415 
	#M_LOG10E
 0.43429448190325182765

	)

416 
	#M_LN2
 0.69314718055994530942

	)

417 
	#M_LN10
 2.30258509299404568402

	)

418 
	#M_PI
 3.14159265358979323846

	)

419 
	#M_PI_2
 1.57079632679489661923

	)

420 
	#M_PI_4
 0.78539816339744830962

	)

421 
	#M_1_PI
 0.31830988618379067154

	)

422 
	#M_2_PI
 0.63661977236758134308

	)

423 
	#M_2_SQRTPI
 1.12837916709551257390

	)

424 
	#M_SQRT2
 1.41421356237309504880

	)

425 
	#M_SQRT1_2
 0.70710678118654752440

	)

431 #ifde‡
__USE_GNU


432 
	#M_El
 2.718281828459045235360287471352662498L

	)

433 
	#M_LOG2El
 1.442695040888963407359924681001892137L

	)

434 
	#M_LOG10El
 0.434294481903251827651128918916605082L

	)

435 
	#M_LN2l
 0.693147180559945309417232121458176568L

	)

436 
	#M_LN10l
 2.302585092994045684017991454684364208L

	)

437 
	#M_PIl
 3.141592653589793238462643383279502884L

	)

438 
	#M_PI_2l
 1.570796326794896619231321691639751442L

	)

439 
	#M_PI_4l
 0.785398163397448309615660845819875721L

	)

440 
	#M_1_PIl
 0.318309886183790671537767526745028724L

	)

441 
	#M_2_PIl
 0.636619772367581343075535053490057448L

	)

442 
	#M_2_SQRTPIl
 1.128379167095512573896158903121545172L

	)

443 
	#M_SQRT2l
 1.414213562373095048801688724209698079L

	)

444 
	#M_SQRT1_2l
 0.707106781186547524400844362104849039L

	)

451 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


452 
	#__NO_MATH_INLINES
 1

	)

455 #i‡
deföed
 
__USE_ISOC99
 && 
	`__GNUC_PREREQ
(2,97)

462 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

463 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

464 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

465 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

466 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

467 
	#isun‹dîed
(
u
, 
v
Ë
	`__buûtö_isun‹dîed
(u, v)

	)

471 #ifde‡
__USE_EXTERN_INLINES


472 
	~<bôs/m©hölöe.h
>

477 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0

478 
	~<bôs/m©h-föôe.h
>

481 #ifde‡
__USE_ISOC99


485 #i‚de‡
isgª©î


486 
	#isgª©î
(
x
, 
y
) \

487 (
__exãnsi⁄__
 \

488 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

489 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; 
	}
}))

	)

493 #i‚de‡
isgª©îequÆ


494 
	#isgª©îequÆ
(
x
, 
y
) \

495 (
__exãnsi⁄__
 \

496 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

497 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

501 #i‚de‡
i¶ess


502 
	#i¶ess
(
x
, 
y
) \

503 (
__exãnsi⁄__
 \

504 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

505 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

509 #i‚de‡
i¶es£quÆ


510 
	#i¶es£quÆ
(
x
, 
y
) \

511 (
__exãnsi⁄__
 \

512 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

513 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

517 #i‚de‡
i¶essgª©î


518 
	#i¶essgª©î
(
x
, 
y
) \

519 (
__exãnsi⁄__
 \

520 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

521 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& (__x < __y || __y < __x); }))

	)

525 #i‚de‡
isun‹dîed


526 
	#isun‹dîed
(
u
, 
v
) \

527 (
__exãnsi⁄__
 \

528 ({ 
	`__ty≥of__
(
u
Ë
__u
 = (u); __ty≥of__(
v
Ë
__v
 = (v); \

529 
	`Â˛assify
 (
__u
Ë=
FP_NAN
 || fp˛assify (
__v
Ë=FP_NAN; }))

	)

534 
	g__END_DECLS


	@/usr/include/memory.h

22 #i‚def 
_MEMORY_H


23 
	#_MEMORY_H
 1

	)

25 
	~<„©uªs.h
>

28 #i‚def 
_STRING_H


29 
	~<°rög.h
>

	@/usr/include/netdb.h

22 #i‚def 
_NETDB_H


23 
	#_NETDB_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<√töë/ö.h
>

28 
	~<°döt.h
>

29 #ifde‡
__USE_MISC


32 
	~<Ωc/√tdb.h
>

35 #ifde‡
__USE_GNU


36 
	#__√ed_sigevít_t


	)

37 
	~<bôs/sigöfo.h
>

38 
	#__√ed_time•ec


	)

39 
	~<time.h
>

42 
	~<bôs/√tdb.h
>

45 
	#_PATH_HEQUIV
 "/ëc/ho°s.equiv"

	)

46 
	#_PATH_HOSTS
 "/ëc/ho°s"

	)

47 
	#_PATH_NETWORKS
 "/ëc/√tw‹ks"

	)

48 
	#_PATH_NSSWITCH_CONF
 "/ëc/nsswôch.c⁄f"

	)

49 
	#_PATH_PROTOCOLS
 "/ëc/¥Ÿocﬁs"

	)

50 
	#_PATH_SERVICES
 "/ëc/£rvi˚s"

	)

53 
	g__BEGIN_DECLS


55 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


58 
	#h_î∫o
 (*
	`__h_î∫o_loˇti⁄
 ())

	)

61 *
	$__h_î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

65 
	#HOST_NOT_FOUND
 1

	)

66 
	#TRY_AGAIN
 2

	)

68 
	#NO_RECOVERY
 3

	)

70 
	#NO_DATA
 4

	)

73 #ifde‡
__USE_MISC


74 
	#NETDB_INTERNAL
 -1

	)

75 
	#NETDB_SUCCESS
 0

	)

76 
	#NO_ADDRESS
 
NO_DATA


	)

79 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_XOPEN_EXTENDED


81 
	#IPPORT_RESERVED
 1024

	)

84 #ifde‡
__USE_GNU


86 
	#SCOPE_DELIMITER
 '%'

	)

89 #ifde‡
__USE_MISC


92 
	$hîr‹
 (c⁄° *
__°r
Ë
__THROW
;

95 c⁄° *
	$h°ªº‹
 (
__îr_num
Ë
__THROW
;

100 
	sho°ít


102 *
h_«me
;

103 **
h_Æü£s
;

104 
h_addπy≥
;

105 
h_Àngth
;

106 **
h_addr_li°
;

107 #ifde‡
__USE_MISC


108 
	#h_addr
 
h_addr_li°
[0]

	)

117 
	`£tho°ít
 (
__°ay_›í
);

123 
	`ídho°ít
 ();

130 
ho°ít
 *
	`gëho°ít
 ();

137 
ho°ít
 *
	`gëho°byaddr
 (c⁄° *
__addr
, 
__sockÀn_t
 
__Àn
,

138 
__ty≥
);

144 
ho°ít
 *
	`gëho°by«me
 (c⁄° *
__«me
);

146 #ifde‡
__USE_MISC


155 
ho°ít
 *
	`gëho°by«me2
 (c⁄° *
__«me
, 
__af
);

167 
	`gëho°ít_r
 (
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

168 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

169 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

170 *
__ª°ri˘
 
__h_î∫›
);

172 
	`gëho°byaddr_r
 (c⁄° *
__ª°ri˘
 
__addr
, 
__sockÀn_t
 
__Àn
,

173 
__ty≥
,

174 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

175 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

176 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

177 *
__ª°ri˘
 
__h_î∫›
);

179 
	`gëho°by«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

180 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

181 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

182 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

183 *
__ª°ri˘
 
__h_î∫›
);

185 
	`gëho°by«me2_r
 (c⁄° *
__ª°ri˘
 
__«me
, 
__af
,

186 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

187 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

188 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

189 *
__ª°ri˘
 
__h_î∫›
);

198 
	`£äëít
 (
__°ay_›í
);

204 
	`íd√ã¡
 ();

211 
√ã¡
 *
	`gë√ã¡
 ();

218 
√ã¡
 *
	`gë√tbyaddr
 (
uöt32_t
 
__√t
, 
__ty≥
);

224 
√ã¡
 *
	`gë√tby«me
 (c⁄° *
__«me
);

226 #ifdef 
__USE_MISC


237 
	`gë√ã¡_r
 (
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

238 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

239 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

240 *
__ª°ri˘
 
__h_î∫›
);

242 
	`gë√tbyaddr_r
 (
uöt32_t
 
__√t
, 
__ty≥
,

243 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

244 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

245 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

246 *
__ª°ri˘
 
__h_î∫›
);

248 
	`gë√tby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

249 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

250 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

251 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

252 *
__ª°ri˘
 
__h_î∫›
);

257 
	s£rvít


259 *
s_«me
;

260 **
s_Æü£s
;

261 
s_p‹t
;

262 *
s_¥Ÿo
;

270 
	`£t£rvít
 (
__°ay_›í
);

276 
	`íd£rvít
 ();

283 
£rvít
 *
	`gë£rvít
 ();

290 
£rvít
 *
	`gë£rvby«me
 (c⁄° *
__«me
, c⁄° *
__¥Ÿo
);

297 
£rvít
 *
	`gë£rvbyp‹t
 (
__p‹t
, c⁄° *
__¥Ÿo
);

300 #ifdef 
__USE_MISC


308 
	`gë£rvít_r
 (
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

309 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

310 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

312 
	`gë£rvby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

313 c⁄° *
__ª°ri˘
 
__¥Ÿo
,

314 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

315 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

316 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

318 
	`gë£rvbyp‹t_r
 (
__p‹t
, c⁄° *
__ª°ri˘
 
__¥Ÿo
,

319 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

320 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

321 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

326 
	s¥Ÿ€¡


328 *
p_«me
;

329 **
p_Æü£s
;

330 
p_¥Ÿo
;

338 
	`£çrŸ€¡
 (
__°ay_›í
);

344 
	`íd¥Ÿ€¡
 ();

351 
¥Ÿ€¡
 *
	`gë¥Ÿ€¡
 ();

357 
¥Ÿ€¡
 *
	`gë¥Ÿoby«me
 (c⁄° *
__«me
);

363 
¥Ÿ€¡
 *
	`gë¥Ÿobynumbî
 (
__¥Ÿo
);

366 #ifdef 
__USE_MISC


374 
	`gë¥Ÿ€¡_r
 (
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

375 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

376 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

378 
	`gë¥Ÿoby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

379 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

380 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

381 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

383 
	`gë¥Ÿobynumbî_r
 (
__¥Ÿo
,

384 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

385 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

386 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

395 
	`£äëgª¡
 (c⁄° *
__√tgroup
);

403 
	`íd√tgª¡
 ();

412 
	`gë√tgª¡
 (**
__ª°ri˘
 
__ho°p
,

413 **
__ª°ri˘
 
__u£Ω
,

414 **
__ª°ri˘
 
__domaöp
);

423 
	`ö√tgr
 (c⁄° *
__√tgroup
, c⁄° *
__ho°
,

424 c⁄° *
__u£r
, c⁄° *
__domaö
);

432 
	`gë√tgª¡_r
 (**
__ª°ri˘
 
__ho°p
,

433 **
__ª°ri˘
 
__u£Ω
,

434 **
__ª°ri˘
 
__domaöp
,

435 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
);

439 #ifde‡
__USE_MISC


451 
	`rcmd
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

452 c⁄° *
__ª°ri˘
 
__locu£r
,

453 c⁄° *
__ª°ri˘
 
__ªmu£r
,

454 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

463 
	`rcmd_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

464 c⁄° *
__ª°ri˘
 
__locu£r
,

465 c⁄° *
__ª°ri˘
 
__ªmu£r
,

466 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

467 
ß_Ámûy_t
 
__af
);

479 
	`ªxec
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

480 c⁄° *
__ª°ri˘
 
__«me
,

481 c⁄° *
__ª°ri˘
 
__∑ss
,

482 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

491 
	`ªxec_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

492 c⁄° *
__ª°ri˘
 
__«me
,

493 c⁄° *
__ª°ri˘
 
__∑ss
,

494 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

495 
ß_Ámûy_t
 
__af
);

505 
	`ru£rok
 (c⁄° *
__rho°
, 
__su£r
,

506 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
);

515 
	`ru£rok_af
 (c⁄° *
__rho°
, 
__su£r
,

516 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
,

517 
ß_Ámûy_t
 
__af
);

528 
	`úu£rok
 (
uöt32_t
 
__øddr
, 
__su£r
,

529 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
);

539 
	`úu£rok_af
 (c⁄° *
__øddr
, 
__su£r
,

540 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
,

541 
ß_Ámûy_t
 
__af
);

551 
	`ºesvp‹t
 (*
__Æp‹t
);

560 
	`ºesvp‹t_af
 (*
__Æp‹t
, 
ß_Ámûy_t
 
__af
);

565 #ifde‡
__USE_XOPEN2K


567 
	saddröfo


569 
ai_Êags
;

570 
ai_Ámûy
;

571 
ai_sockty≥
;

572 
ai_¥Ÿocﬁ
;

573 
sockÀn_t
 
ai_addæí
;

574 
sockaddr
 *
ai_addr
;

575 *
ai_ˇn⁄«me
;

576 
addröfo
 *
ai_√xt
;

579 #ifde‡
__USE_GNU


581 
	sgaicb


583 c⁄° *
¨_«me
;

584 c⁄° *
¨_£rvi˚
;

585 c⁄° 
addröfo
 *
¨_ªque°
;

586 
addröfo
 *
¨_ªsu…
;

588 
__ªtu∫
;

589 
__glibc_ª£rved
[5];

593 
	#GAI_WAIT
 0

	)

594 
	#GAI_NOWAIT
 1

	)

598 
	#AI_PASSIVE
 0x0001

	)

599 
	#AI_CANONNAME
 0x0002

	)

600 
	#AI_NUMERICHOST
 0x0004

	)

601 
	#AI_V4MAPPED
 0x0008

	)

602 
	#AI_ALL
 0x0010

	)

603 
	#AI_ADDRCONFIG
 0x0020

	)

605 #ifde‡
__USE_GNU


606 
	#AI_IDN
 0x0040

	)

609 
	#AI_CANONIDN
 0x0080

	)

610 
	#AI_IDN_ALLOW_UNASSIGNED
 0x0100

	)

612 
	#AI_IDN_USE_STD3_ASCII_RULES
 0x0200

	)

615 
	#AI_NUMERICSERV
 0x0400

	)

618 
	#EAI_BADFLAGS
 -1

	)

619 
	#EAI_NONAME
 -2

	)

620 
	#EAI_AGAIN
 -3

	)

621 
	#EAI_FAIL
 -4

	)

622 
	#EAI_FAMILY
 -6

	)

623 
	#EAI_SOCKTYPE
 -7

	)

624 
	#EAI_SERVICE
 -8

	)

625 
	#EAI_MEMORY
 -10

	)

626 
	#EAI_SYSTEM
 -11

	)

627 
	#EAI_OVERFLOW
 -12

	)

628 #ifde‡
__USE_GNU


629 
	#EAI_NODATA
 -5

	)

630 
	#EAI_ADDRFAMILY
 -9

	)

631 
	#EAI_INPROGRESS
 -100

	)

632 
	#EAI_CANCELED
 -101

	)

633 
	#EAI_NOTCANCELED
 -102

	)

634 
	#EAI_ALLDONE
 -103

	)

635 
	#EAI_INTR
 -104

	)

636 
	#EAI_IDN_ENCODE
 -105

	)

639 #ifde‡
__USE_MISC


640 
	#NI_MAXHOST
 1025

	)

641 
	#NI_MAXSERV
 32

	)

644 
	#NI_NUMERICHOST
 1

	)

645 
	#NI_NUMERICSERV
 2

	)

646 
	#NI_NOFQDN
 4

	)

647 
	#NI_NAMEREQD
 8

	)

648 
	#NI_DGRAM
 16

	)

649 #ifde‡
__USE_GNU


650 
	#NI_IDN
 32

	)

651 
	#NI_IDN_ALLOW_UNASSIGNED
 64

	)

653 
	#NI_IDN_USE_STD3_ASCII_RULES
 128

	)

662 
	`gëaddröfo
 (c⁄° *
__ª°ri˘
 
__«me
,

663 c⁄° *
__ª°ri˘
 
__£rvi˚
,

664 c⁄° 
addröfo
 *
__ª°ri˘
 
__ªq
,

665 
addröfo
 **
__ª°ri˘
 
__∑i
);

668 
	$‰ìaddröfo
 (
addröfo
 *
__ai
Ë
__THROW
;

671 c⁄° *
	$gai_°ªº‹
 (
__ecode
Ë
__THROW
;

677 
	`gë«meöfo
 (c⁄° 
sockaddr
 *
__ª°ri˘
 
__ß
,

678 
sockÀn_t
 
__ßÀn
, *
__ª°ri˘
 
__ho°
,

679 
sockÀn_t
 
__ho°Àn
, *
__ª°ri˘
 
__£rv
,

680 
sockÀn_t
 
__£rvÀn
, 
__Êags
);

683 #ifde‡
__USE_GNU


692 
	`gëaddröfo_a
 (
__mode
, 
gaicb
 *
__li°
[
__ª°ri˘_¨r
],

693 
__ít
, 
sigevít
 *
__ª°ri˘
 
__sig
);

703 
	`gai_su•íd
 (c⁄° 
gaicb
 *c⁄° 
__li°
[], 
__ít
,

704 c⁄° 
time•ec
 *
__timeout
);

707 
	$gai_îr‹
 (
gaicb
 *
__ªq
Ë
__THROW
;

710 
	$gai_ˇn˚l
 (
gaicb
 *
__gaicbp
Ë
__THROW
;

713 
__END_DECLS


	@/usr/include/netinet/in.h

18 #i‚def 
_NETINET_IN_H


19 
	#_NETINET_IN_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<°döt.h
>

23 
	~<sys/sockë.h
>

24 
	~<bôs/ty≥s.h
>

27 
__BEGIN_DECLS


30 
uöt32_t
 
	tö_addr_t
;

31 
	sö_addr


33 
ö_addr_t
 
	ms_addr
;

37 
	~<bôs/ö.h
>

42 
	mIPPROTO_IP
 = 0,

43 
	#IPPROTO_IP
 
IPPROTO_IP


	)

44 
	mIPPROTO_ICMP
 = 1,

45 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

46 
	mIPPROTO_IGMP
 = 2,

47 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

48 
	mIPPROTO_IPIP
 = 4,

49 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

50 
	mIPPROTO_TCP
 = 6,

51 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

52 
	mIPPROTO_EGP
 = 8,

53 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

54 
	mIPPROTO_PUP
 = 12,

55 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

56 
	mIPPROTO_UDP
 = 17,

57 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

58 
	mIPPROTO_IDP
 = 22,

59 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

60 
	mIPPROTO_TP
 = 29,

61 
	#IPPROTO_TP
 
IPPROTO_TP


	)

62 
	mIPPROTO_DCCP
 = 33,

63 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

64 
	mIPPROTO_IPV6
 = 41,

65 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

66 
	mIPPROTO_RSVP
 = 46,

67 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

68 
	mIPPROTO_GRE
 = 47,

69 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

70 
	mIPPROTO_ESP
 = 50,

71 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

72 
	mIPPROTO_AH
 = 51,

73 
	#IPPROTO_AH
 
IPPROTO_AH


	)

74 
	mIPPROTO_MTP
 = 92,

75 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

76 
	mIPPROTO_BEETPH
 = 94,

77 
	#IPPROTO_BEETPH
 
IPPROTO_BEETPH


	)

78 
	mIPPROTO_ENCAP
 = 98,

79 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

80 
	mIPPROTO_PIM
 = 103,

81 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

82 
	mIPPROTO_COMP
 = 108,

83 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

84 
	mIPPROTO_SCTP
 = 132,

85 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

86 
	mIPPROTO_UDPLITE
 = 136,

87 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

88 
	mIPPROTO_MPLS
 = 137,

89 
	#IPPROTO_MPLS
 
IPPROTO_MPLS


	)

90 
	mIPPROTO_RAW
 = 255,

91 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

92 
	mIPPROTO_MAX


98 #i‚de‡
__USE_KERNEL_IPV6_DEFS


101 
	mIPPROTO_HOPOPTS
 = 0,

102 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

103 
	mIPPROTO_ROUTING
 = 43,

104 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

105 
	mIPPROTO_FRAGMENT
 = 44,

106 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

107 
	mIPPROTO_ICMPV6
 = 58,

108 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

109 
	mIPPROTO_NONE
 = 59,

110 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

111 
	mIPPROTO_DSTOPTS
 = 60,

112 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

113 
	mIPPROTO_MH
 = 135

114 
	#IPPROTO_MH
 
IPPROTO_MH


	)

119 
uöt16_t
 
	tö_p‹t_t
;

124 
	mIPPORT_ECHO
 = 7,

125 
	mIPPORT_DISCARD
 = 9,

126 
	mIPPORT_SYSTAT
 = 11,

127 
	mIPPORT_DAYTIME
 = 13,

128 
	mIPPORT_NETSTAT
 = 15,

129 
	mIPPORT_FTP
 = 21,

130 
	mIPPORT_TELNET
 = 23,

131 
	mIPPORT_SMTP
 = 25,

132 
	mIPPORT_TIMESERVER
 = 37,

133 
	mIPPORT_NAMESERVER
 = 42,

134 
	mIPPORT_WHOIS
 = 43,

135 
	mIPPORT_MTP
 = 57,

137 
	mIPPORT_TFTP
 = 69,

138 
	mIPPORT_RJE
 = 77,

139 
	mIPPORT_FINGER
 = 79,

140 
	mIPPORT_TTYLINK
 = 87,

141 
	mIPPORT_SUPDUP
 = 95,

144 
	mIPPORT_EXECSERVER
 = 512,

145 
	mIPPORT_LOGINSERVER
 = 513,

146 
	mIPPORT_CMDSERVER
 = 514,

147 
	mIPPORT_EFSSERVER
 = 520,

150 
	mIPPORT_BIFFUDP
 = 512,

151 
	mIPPORT_WHOSERVER
 = 513,

152 
	mIPPORT_ROUTESERVER
 = 520,

155 
	mIPPORT_RESERVED
 = 1024,

158 
	mIPPORT_USERRESERVED
 = 5000

166 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

167 
	#IN_CLASSA_NET
 0xff000000

	)

168 
	#IN_CLASSA_NSHIFT
 24

	)

169 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

170 
	#IN_CLASSA_MAX
 128

	)

172 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

173 
	#IN_CLASSB_NET
 0xffff0000

	)

174 
	#IN_CLASSB_NSHIFT
 16

	)

175 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

176 
	#IN_CLASSB_MAX
 65536

	)

178 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

179 
	#IN_CLASSC_NET
 0xffffff00

	)

180 
	#IN_CLASSC_NSHIFT
 8

	)

181 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

183 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

184 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

186 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

187 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

190 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

192 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

194 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

197 
	#IN_LOOPBACKNET
 127

	)

199 #i‚de‡
INADDR_LOOPBACK


200 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

204 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

205 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

206 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

207 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

209 #i‚de‡
__USE_KERNEL_IPV6_DEFS


211 
	sö6_addr


215 
uöt8_t
 
	m__u6_addr8
[16];

216 #ifde‡
__USE_MISC


217 
uöt16_t
 
	m__u6_addr16
[8];

218 
uöt32_t
 
	m__u6_addr32
[4];

220 } 
	m__ö6_u
;

221 
	#s6_addr
 
__ö6_u
.
__u6_addr8


	)

222 #ifde‡
__USE_MISC


223 
	#s6_addr16
 
__ö6_u
.
__u6_addr16


	)

224 
	#s6_addr32
 
__ö6_u
.
__u6_addr32


	)

229 c⁄° 
ö6_addr
 
ö6addr_™y
;

230 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

231 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

232 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

234 
	#INET_ADDRSTRLEN
 16

	)

235 
	#INET6_ADDRSTRLEN
 46

	)

239 
	ssockaddr_ö


241 
__SOCKADDR_COMMON
 (
sö_
);

242 
ö_p‹t_t
 
	msö_p‹t
;

243 
ö_addr
 
	msö_addr
;

246 
	msö_zîo
[ (
sockaddr
) -

247 
__SOCKADDR_COMMON_SIZE
 -

248  (
ö_p‹t_t
) -

249  (
ö_addr
)];

252 #i‚de‡
__USE_KERNEL_IPV6_DEFS


254 
	ssockaddr_ö6


256 
__SOCKADDR_COMMON
 (
sö6_
);

257 
ö_p‹t_t
 
	msö6_p‹t
;

258 
uöt32_t
 
	msö6_Êowöfo
;

259 
ö6_addr
 
	msö6_addr
;

260 
uöt32_t
 
	msö6_sc›e_id
;

264 #ifde‡
__USE_MISC


266 
	sù_mªq


269 
ö_addr
 
	mimr_mu…üddr
;

272 
ö_addr
 
	mimr_öãrÁ˚
;

275 
	sù_mªq_sour˚


278 
ö_addr
 
	mimr_mu…üddr
;

281 
ö_addr
 
	mimr_öãrÁ˚
;

284 
ö_addr
 
	mimr_sour˚addr
;

288 #i‚de‡
__USE_KERNEL_IPV6_DEFS


290 
	sùv6_mªq


293 
ö6_addr
 
	mùv6mr_mu…üddr
;

296 
	mùv6mr_öãrÁ˚
;

300 #ifde‡
__USE_MISC


302 
	sgroup_ªq


305 
uöt32_t
 
	mgr_öãrÁ˚
;

308 
sockaddr_°‹age
 
	mgr_group
;

311 
	sgroup_sour˚_ªq


314 
uöt32_t
 
	mg§_öãrÁ˚
;

317 
sockaddr_°‹age
 
	mg§_group
;

320 
sockaddr_°‹age
 
	mg§_sour˚
;

325 
	sù_msfûãr


328 
ö_addr
 
	mimsf_mu…üddr
;

331 
ö_addr
 
	mimsf_öãrÁ˚
;

334 
uöt32_t
 
	mimsf_fmode
;

337 
uöt32_t
 
	mimsf_num§c
;

339 
ö_addr
 
	mimsf_¶i°
[1];

342 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

343 -  (
ö_addr
) \

344 + (
num§c
Ë*  (
ö_addr
))

	)

346 
	sgroup_fûãr


349 
uöt32_t
 
	mgf_öãrÁ˚
;

352 
sockaddr_°‹age
 
	mgf_group
;

355 
uöt32_t
 
	mgf_fmode
;

358 
uöt32_t
 
	mgf_num§c
;

360 
sockaddr_°‹age
 
	mgf_¶i°
[1];

363 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

364 -  (
sockaddr_°‹age
) \

365 + ((
num§c
) \

366 *  (
sockaddr_°‹age
)))

	)

376 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

377 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

378 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

379 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

380 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

381 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

382 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

384 
	~<ídün.h
>

387 
	~<bôs/byãsw≠.h
>

389 #ifde‡
__OPTIMIZE__


393 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


396 
	#¡ohl
(
x
Ë(x)

	)

397 
	#¡ohs
(
x
Ë(x)

	)

398 
	#ht⁄l
(
x
Ë(x)

	)

399 
	#ht⁄s
(
x
Ë(x)

	)

401 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


402 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

403 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

404 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

405 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

410 #ifde‡
__GNUC__


411 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

412 (
__exãnsi⁄__
 \

413 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

414 
__a
->
s6_addr32
[0] == 0 \

415 && 
__a
->
s6_addr32
[1] == 0 \

416 && 
__a
->
s6_addr32
[2] == 0 \

417 && 
__a
->
s6_addr32
[3] =0; 
	}
}))

	)

419 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

420 (
__exãnsi⁄__
 \

421 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

422 
__a
->
s6_addr32
[0] == 0 \

423 && 
__a
->
s6_addr32
[1] == 0 \

424 && 
__a
->
s6_addr32
[2] == 0 \

425 && 
__a
->
s6_addr32
[3] =
	`ht⁄l
 (1); }))

	)

427 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

428 (
__exãnsi⁄__
 \

429 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

430 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„800000); }))

	)

432 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

433 (
__exãnsi⁄__
 \

434 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

435 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„c00000); }))

	)

437 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

438 (
__exãnsi⁄__
 \

439 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

440 
__a
->
s6_addr32
[0] == 0 \

441 && 
__a
->
s6_addr32
[1] == 0 \

442 && 
__a
->
s6_addr32
[2] =
	`ht⁄l
 (0xffff); }))

	)

444 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

445 (
__exãnsi⁄__
 \

446 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

447 
__a
->
s6_addr32
[0] == 0 \

448 && 
__a
->
s6_addr32
[1] == 0 \

449 && 
__a
->
s6_addr32
[2] == 0 \

450 && 
	`¡ohl
 (
__a
->
s6_addr32
[3]Ë> 1; }))

	)

452 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

453 (
__exãnsi⁄__
 \

454 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

455 c⁄° 
ö6_addr
 *
__b
 = (c⁄° ö6_add∏*Ë(
b
); \

456 
__a
->
s6_addr32
[0] =
__b
->s6_addr32[0] \

457 && 
__a
->
s6_addr32
[1] =
__b
->s6_addr32[1] \

458 && 
__a
->
s6_addr32
[2] =
__b
->s6_addr32[2] \

459 && 
__a
->
s6_addr32
[3] =
__b
->s6_addr32[3]; }))

	)

461 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

462 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

463 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

464 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

465 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =0)

	)

467 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

468 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

469 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

470 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

471 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

473 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

474 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

475 =
	`ht⁄l
 (0x„800000))

	)

477 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

478 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

479 =
	`ht⁄l
 (0x„c00000))

	)

481 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

482 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

483 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

484 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

486 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

487 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

488 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

489 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0) \

490 && (
	`¡ohl
 (((c⁄° 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

492 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

493 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] =((c⁄° uöt32_à*Ë(
b
))[0]) \

494 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] =((c⁄° uöt32_à*Ë(
b
))[1]) \

495 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =((c⁄° uöt32_à*Ë(
b
))[2]) \

496 && (((c⁄° 
uöt32_t
 *Ë(
a
))[3] =((c⁄° uöt32_à*Ë(
b
))[3]))

	)

499 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((c⁄° 
uöt8_t
 *Ë◊))[0] =0xff)

	)

501 #ifde‡
__USE_MISC


503 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

506 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

507 
__THROW
;

511 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

512 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

513 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

515 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

516 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

517 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

519 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

520 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

521 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

523 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

524 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

525 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

527 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

528 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

529 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

532 #ifde‡
__USE_GNU


533 
cmsghdr
;

535 #i‚de‡
__USE_KERNEL_IPV6_DEFS


537 
	sö6_pktöfo


539 
ö6_addr
 
ùi6_addr
;

540 
ùi6_ifödex
;

544 
	sù6_mtuöfo


546 
sockaddr_ö6
 
ù6m_addr
;

547 
uöt32_t
 
ù6m_mtu
;

552 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

553 
__THROW
 
__©åibuã_dïªˇãd__
;

554 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

555 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

556 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

557 c⁄° 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

558 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

559 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

560 
__mu…x
, 
__∂usy
)

561 
__THROW
 
__©åibuã_dïªˇãd__
;

562 
	$öë6_›ti⁄_√xt
 (c⁄° 
cmsghdr
 *
__cmsg
,

563 
uöt8_t
 **
__çåp
)

564 
__THROW
 
__©åibuã_dïªˇãd__
;

565 
	$öë6_›ti⁄_föd
 (c⁄° 
cmsghdr
 *
__cmsg
,

566 
uöt8_t
 **
__çåp
, 
__ty≥
)

567 
__THROW
 
__©åibuã_dïªˇãd__
;

571 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

572 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

573 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

574 **
__d©abuÂ
Ë
__THROW
;

575 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

576 
__THROW
;

577 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

578 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

579 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

580 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

581 **
__d©abuÂ
Ë
__THROW
;

582 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

583 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

584 **
__d©abuÂ
Ë
__THROW
;

585 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

586 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

590 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

591 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

592 
__£gmíts
Ë
__THROW
;

593 
	$öë6_πh_add
 (*
__bp
, c⁄° 
ö6_addr
 *
__addr
Ë
__THROW
;

594 
	$öë6_πh_ªvî£
 (c⁄° *
__ö
, *
__out
Ë
__THROW
;

595 
	$öë6_πh_£gmíts
 (c⁄° *
__bp
Ë
__THROW
;

596 
ö6_addr
 *
	$öë6_πh_gëaddr
 (c⁄° *
__bp
, 
__ödex
)

597 
__THROW
;

603 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

604 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

605 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

606 
__THROW
;

609 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

610 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

611 
uöt32_t
 
__num§c
,

612 c⁄° 
ö_addr
 *
__¶i°
)

613 
__THROW
;

617 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

618 c⁄° 
sockaddr
 *
__group
,

619 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

620 
uöt32_t
 *
__num§c
,

621 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

624 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

625 c⁄° 
sockaddr
 *
__group
,

626 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

627 
uöt32_t
 
__num§c
,

628 c⁄° 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

631 
__END_DECLS


	@/usr/include/netinet/tcp.h

32 #i‚de‡
_NETINET_TCP_H


33 
	#_NETINET_TCP_H
 1

	)

35 
	~<„©uªs.h
>

40 
	#TCP_NODELAY
 1

	)

41 
	#TCP_MAXSEG
 2

	)

42 
	#TCP_CORK
 3

	)

43 
	#TCP_KEEPIDLE
 4

	)

44 
	#TCP_KEEPINTVL
 5

	)

45 
	#TCP_KEEPCNT
 6

	)

46 
	#TCP_SYNCNT
 7

	)

47 
	#TCP_LINGER2
 8

	)

48 
	#TCP_DEFER_ACCEPT
 9

	)

49 
	#TCP_WINDOW_CLAMP
 10

	)

50 
	#TCP_INFO
 11

	)

51 
	#TCP_QUICKACK
 12

	)

52 
	#TCP_CONGESTION
 13

	)

53 
	#TCP_MD5SIG
 14

	)

54 
	#TCP_COOKIE_TRANSACTIONS
 15

	)

55 
	#TCP_THIN_LINEAR_TIMEOUTS
 16

	)

56 
	#TCP_THIN_DUPACK
 17

	)

57 
	#TCP_USER_TIMEOUT
 18

	)

58 
	#TCP_REPAIR
 19

	)

59 
	#TCP_REPAIR_QUEUE
 20

	)

60 
	#TCP_QUEUE_SEQ
 21

	)

61 
	#TCP_REPAIR_OPTIONS
 22

	)

62 
	#TCP_FASTOPEN
 23

	)

63 
	#TCP_TIMESTAMP
 24

	)

64 
	#TCP_NOTSENT_LOWAT
 25

	)

66 
	#TCP_CC_INFO
 26

	)

68 
	#TCP_SAVE_SYN
 27

	)

70 
	#TCP_SAVED_SYN
 28

	)

73 #ifde‡
__USE_MISC


74 
	~<sys/ty≥s.h
>

75 
	~<sys/sockë.h
>

77 
u_öt32_t
 
	tt˝_£q
;

82 
	st˝hdr


84 
__exãnsi⁄__
 union

88 
u_öt16_t
 
	mth_•‹t
;

89 
u_öt16_t
 
	mth_dp‹t
;

90 
t˝_£q
 
	mth_£q
;

91 
t˝_£q
 
	mth_ack
;

92 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


93 
u_öt8_t
 
	mth_x2
:4;

94 
u_öt8_t
 
	mth_off
:4;

96 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


97 
u_öt8_t
 
	mth_off
:4;

98 
u_öt8_t
 
	mth_x2
:4;

100 
u_öt8_t
 
	mth_Êags
;

101 
	#TH_FIN
 0x01

	)

102 
	#TH_SYN
 0x02

	)

103 
	#TH_RST
 0x04

	)

104 
	#TH_PUSH
 0x08

	)

105 
	#TH_ACK
 0x10

	)

106 
	#TH_URG
 0x20

	)

107 
u_öt16_t
 
	mth_wö
;

108 
u_öt16_t
 
	mth_sum
;

109 
u_öt16_t
 
	mth_uΩ
;

113 
u_öt16_t
 
	msour˚
;

114 
u_öt16_t
 
	mde°
;

115 
u_öt32_t
 
	m£q
;

116 
u_öt32_t
 
	mack_£q
;

117 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


118 
u_öt16_t
 
	mªs1
:4;

119 
u_öt16_t
 
	mdoff
:4;

120 
u_öt16_t
 
	mfö
:1;

121 
u_öt16_t
 
	msyn
:1;

122 
u_öt16_t
 
	mr°
:1;

123 
u_öt16_t
 
	mpsh
:1;

124 
u_öt16_t
 
	mack
:1;

125 
u_öt16_t
 
	murg
:1;

126 
u_öt16_t
 
	mªs2
:2;

127 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


128 
u_öt16_t
 
	mdoff
:4;

129 
u_öt16_t
 
	mªs1
:4;

130 
u_öt16_t
 
	mªs2
:2;

131 
u_öt16_t
 
	murg
:1;

132 
u_öt16_t
 
	mack
:1;

133 
u_öt16_t
 
	mpsh
:1;

134 
u_öt16_t
 
	mr°
:1;

135 
u_öt16_t
 
	msyn
:1;

136 
u_öt16_t
 
	mfö
:1;

140 
u_öt16_t
 
	mwödow
;

141 
u_öt16_t
 
	mcheck
;

142 
u_öt16_t
 
	murg_±r
;

149 
	mTCP_ESTABLISHED
 = 1,

150 
	mTCP_SYN_SENT
,

151 
	mTCP_SYN_RECV
,

152 
	mTCP_FIN_WAIT1
,

153 
	mTCP_FIN_WAIT2
,

154 
	mTCP_TIME_WAIT
,

155 
	mTCP_CLOSE
,

156 
	mTCP_CLOSE_WAIT
,

157 
	mTCP_LAST_ACK
,

158 
	mTCP_LISTEN
,

159 
	mTCP_CLOSING


162 
	#TCPOPT_EOL
 0

	)

163 
	#TCPOPT_NOP
 1

	)

164 
	#TCPOPT_MAXSEG
 2

	)

165 
	#TCPOLEN_MAXSEG
 4

	)

166 
	#TCPOPT_WINDOW
 3

	)

167 
	#TCPOLEN_WINDOW
 3

	)

168 
	#TCPOPT_SACK_PERMITTED
 4

	)

169 
	#TCPOLEN_SACK_PERMITTED
 2

	)

170 
	#TCPOPT_SACK
 5

	)

171 
	#TCPOPT_TIMESTAMP
 8

	)

172 
	#TCPOLEN_TIMESTAMP
 10

	)

173 
	#TCPOLEN_TSTAMP_APPA
 (
TCPOLEN_TIMESTAMP
+2Ë

	)

175 
	#TCPOPT_TSTAMP_HDR
 \

176 (
TCPOPT_NOP
<<24|TCPOPT_NOP<<16|
TCPOPT_TIMESTAMP
<<8|
TCPOLEN_TIMESTAMP
)

	)

184 
	#TCP_MSS
 512

	)

186 
	#TCP_MAXWIN
 65535

	)

188 
	#TCP_MAX_WINSHIFT
 14

	)

190 
	#SOL_TCP
 6

	)

193 
	#TCPI_OPT_TIMESTAMPS
 1

	)

194 
	#TCPI_OPT_SACK
 2

	)

195 
	#TCPI_OPT_WSCALE
 4

	)

196 
	#TCPI_OPT_ECN
 8

	)

197 
	#TCPI_OPT_ECN_SEEN
 16

	)

198 
	#TCPI_OPT_SYN_DATA
 32

	)

201 
	et˝_ˇ_°©e


203 
	mTCP_CA_O≥n
 = 0,

204 
	mTCP_CA_Dis‹dî
 = 1,

205 
	mTCP_CA_CWR
 = 2,

206 
	mTCP_CA_Recovîy
 = 3,

207 
	mTCP_CA_Loss
 = 4

210 
	st˝_öfo


212 
u_öt8_t
 
	mt˝i_°©e
;

213 
u_öt8_t
 
	mt˝i_ˇ_°©e
;

214 
u_öt8_t
 
	mt˝i_ªå™smôs
;

215 
u_öt8_t
 
	mt˝i_¥obes
;

216 
u_öt8_t
 
	mt˝i_backoff
;

217 
u_öt8_t
 
	mt˝i_›ti⁄s
;

218 
u_öt8_t
 
	mt˝i_¢d_wsˇÀ
 : 4, 
	mt˝i_rcv_wsˇÀ
 : 4;

220 
u_öt32_t
 
	mt˝i_πo
;

221 
u_öt32_t
 
	mt˝i_©o
;

222 
u_öt32_t
 
	mt˝i_¢d_mss
;

223 
u_öt32_t
 
	mt˝i_rcv_mss
;

225 
u_öt32_t
 
	mt˝i_u«cked
;

226 
u_öt32_t
 
	mt˝i_ßcked
;

227 
u_öt32_t
 
	mt˝i_lo°
;

228 
u_öt32_t
 
	mt˝i_ªå™s
;

229 
u_öt32_t
 
	mt˝i_Áckës
;

232 
u_öt32_t
 
	mt˝i_œ°_d©a_£¡
;

233 
u_öt32_t
 
	mt˝i_œ°_ack_£¡
;

234 
u_öt32_t
 
	mt˝i_œ°_d©a_ªcv
;

235 
u_öt32_t
 
	mt˝i_œ°_ack_ªcv
;

238 
u_öt32_t
 
	mt˝i_pmtu
;

239 
u_öt32_t
 
	mt˝i_rcv_s°hªsh
;

240 
u_öt32_t
 
	mt˝i_πt
;

241 
u_öt32_t
 
	mt˝i_πtv¨
;

242 
u_öt32_t
 
	mt˝i_¢d_s°hªsh
;

243 
u_öt32_t
 
	mt˝i_¢d_cwnd
;

244 
u_öt32_t
 
	mt˝i_advmss
;

245 
u_öt32_t
 
	mt˝i_ª‹dîög
;

247 
u_öt32_t
 
	mt˝i_rcv_πt
;

248 
u_öt32_t
 
	mt˝i_rcv_•a˚
;

250 
u_öt32_t
 
	mt˝i_tŸÆ_ªå™s
;

255 
	#TCP_MD5SIG_MAXKEYLEN
 80

	)

257 
	st˝_md5sig


259 
sockaddr_°‹age
 
	mt˝m_addr
;

260 
u_öt16_t
 
	m__t˝m_∑d1
;

261 
u_öt16_t
 
	mt˝m_keyÀn
;

262 
u_öt32_t
 
	m__t˝m_∑d2
;

263 
u_öt8_t
 
	mt˝m_key
[
TCP_MD5SIG_MAXKEYLEN
];

267 
	st˝_ª∑ú_›t


269 
u_öt32_t
 
	m›t_code
;

270 
u_öt32_t
 
	m›t_vÆ
;

276 
	mTCP_NO_QUEUE
,

277 
	mTCP_RECV_QUEUE
,

278 
	mTCP_SEND_QUEUE
,

279 
	mTCP_QUEUES_NR
,

283 
	#TCP_COOKIE_MIN
 8

	)

284 
	#TCP_COOKIE_MAX
 16

	)

285 
	#TCP_COOKIE_PAIR_SIZE
 (2*
TCP_COOKIE_MAX
)

	)

288 
	#TCP_COOKIE_IN_ALWAYS
 (1 << 0Ë

	)

289 
	#TCP_COOKIE_OUT_NEVER
 (1 << 1Ë

	)

293 
	#TCP_S_DATA_IN
 (1 << 2Ë

	)

294 
	#TCP_S_DATA_OUT
 (1 << 3Ë

	)

296 
	#TCP_MSS_DEFAULT
 536U

	)

297 
	#TCP_MSS_DESIRED
 1220U

	)

299 
	st˝_cookõ_å™ß˘i⁄s


301 
u_öt16_t
 
	mt˝˘_Êags
;

302 
u_öt8_t
 
	m__t˝˘_∑d1
;

303 
u_öt8_t
 
	mt˝˘_cookõ_desúed
;

304 
u_öt16_t
 
	mt˝˘_s_d©a_desúed
;

305 
u_öt16_t
 
	mt˝˘_u£d
;

306 
u_öt8_t
 
	mt˝˘_vÆue
[
TCP_MSS_DEFAULT
];

	@/usr/include/pthread.h

18 #i‚de‡
_PTHREAD_H


19 
	#_PTHREAD_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<ídün.h
>

23 
	~<sched.h
>

24 
	~<time.h
>

26 
	~<bôs/±hªadty≥s.h
>

27 
	~<bôs/£tjmp.h
>

28 
	~<bôs/w‹dsize.h
>

34 
	mPTHREAD_CREATE_JOINABLE
,

35 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

36 
	mPTHREAD_CREATE_DETACHED


37 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

44 
	mPTHREAD_MUTEX_TIMED_NP
,

45 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

46 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

47 
	mPTHREAD_MUTEX_ADAPTIVE_NP


48 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


50 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

51 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

52 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

53 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


55 #ifde‡
__USE_GNU


57 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


62 #ifde‡
__USE_XOPEN2K


66 
	mPTHREAD_MUTEX_STALLED
,

67 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

68 
	mPTHREAD_MUTEX_ROBUST
,

69 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


74 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


78 
	mPTHREAD_PRIO_NONE
,

79 
	mPTHREAD_PRIO_INHERIT
,

80 
	mPTHREAD_PRIO_PROTECT


85 #ifde‡
__PTHREAD_MUTEX_HAVE_PREV


86 
	#PTHREAD_MUTEX_INITIALIZER
 \

87 { { 0, 0, 0, 0, 0, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

88 #ifde‡
__USE_GNU


89 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

90 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

91 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

92 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

93 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

94 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

98 
	#PTHREAD_MUTEX_INITIALIZER
 \

99 { { 0, 0, 0, 0, 0, { 
__PTHREAD_SPINS
 } } }

	)

100 #ifde‡
__USE_GNU


101 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

102 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

103 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

104 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

105 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

113 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


116 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

117 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

118 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

119 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


125 #i‚de‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


126 #i‡
__WORDSIZE
 == 64

127 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

132 
	#PTHREAD_RWLOCK_INITIALIZER
 \

133 { { 0, 0, 0, 0, 0, 0, 0, 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, 0 } }

	)

134 #ifde‡
__USE_GNU


135 #ifde‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


136 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

137 { { 0, 0, 0, 0, 0, 0, 0, 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, \

138 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

140 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


141 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

142 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

143 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, 0 } }

	)

145 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

146 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

147 0 } }

	)

157 
	mPTHREAD_INHERIT_SCHED
,

158 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

159 
	mPTHREAD_EXPLICIT_SCHED


160 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

167 
	mPTHREAD_SCOPE_SYSTEM
,

168 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

169 
	mPTHREAD_SCOPE_PROCESS


170 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

177 
	mPTHREAD_PROCESS_PRIVATE
,

178 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

179 
	mPTHREAD_PROCESS_SHARED


180 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

186 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

190 
	s_±hªad_˛ónup_buf„r


192 (*
	m__routöe
) (*);

193 *
	m__¨g
;

194 
	m__ˇn˚…y≥
;

195 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

201 
	mPTHREAD_CANCEL_ENABLE
,

202 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

203 
	mPTHREAD_CANCEL_DISABLE


204 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

208 
	mPTHREAD_CANCEL_DEFERRED
,

209 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

210 
	mPTHREAD_CANCEL_ASYNCHRONOUS


211 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

213 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

217 
	#PTHREAD_ONCE_INIT
 0

	)

220 #ifde‡
__USE_XOPEN2K


224 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

228 
__BEGIN_DECLS


233 
	$±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

234 c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

235 *(*
__°¨t_routöe
) (*),

236 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 3));

242 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

250 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

252 #ifde‡
__USE_GNU


255 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

263 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

264 c⁄° 
time•ec
 *
__ab°ime
);

271 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

275 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

278 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
)

279 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

287 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

290 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

291 
__THROW
 
	`__n⁄nuŒ
 ((1));

294 
	$±hªad_©å_gëdëach°©e
 (c⁄° 
±hªad_©å_t
 *
__©å
,

295 *
__dëach°©e
)

296 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

299 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

300 
__dëach°©e
)

301 
__THROW
 
	`__n⁄nuŒ
 ((1));

305 
	$±hªad_©å_gëgu¨dsize
 (c⁄° 
±hªad_©å_t
 *
__©å
,

306 
size_t
 *
__gu¨dsize
)

307 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

310 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

311 
size_t
 
__gu¨dsize
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1));

316 
	$±hªad_©å_gësched∑øm
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

317 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

318 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

321 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

322 c⁄° 
sched_∑øm
 *
__ª°ri˘


323 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

326 
	$±hªad_©å_gëschedpﬁicy
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


327 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

328 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

331 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

332 
__THROW
 
	`__n⁄nuŒ
 ((1));

335 
	$±hªad_©å_gëöhîôsched
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


336 
__©å
, *
__ª°ri˘
 
__öhîô
)

337 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

340 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

341 
__öhîô
)

342 
__THROW
 
	`__n⁄nuŒ
 ((1));

346 
	$±hªad_©å_gësc›e
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

347 *
__ª°ri˘
 
__sc›e
)

348 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

351 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

352 
__THROW
 
	`__n⁄nuŒ
 ((1));

355 
	$±hªad_©å_gë°ackaddr
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


356 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

357 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

363 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

364 *
__°ackaddr
)

365 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

368 
	$±hªad_©å_gë°acksize
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


369 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

370 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

375 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

376 
size_t
 
__°acksize
)

377 
__THROW
 
	`__n⁄nuŒ
 ((1));

379 #ifde‡
__USE_XOPEN2K


381 
	$±hªad_©å_gë°ack
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

382 **
__ª°ri˘
 
__°ackaddr
,

383 
size_t
 *
__ª°ri˘
 
__°acksize
)

384 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

389 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

390 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 #ifde‡
__USE_GNU


396 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

397 
size_t
 
__˝u£tsize
,

398 c⁄° 
˝u_£t_t
 *
__˝u£t
)

399 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

403 
	$±hªad_©å_gëafföôy_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
,

404 
size_t
 
__˝u£tsize
,

405 
˝u_£t_t
 *
__˝u£t
)

406 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

409 
	$±hªad_gë©å_deÁu…_≈
 (
±hªad_©å_t
 *
__©å
)

410 
__THROW
 
	`__n⁄nuŒ
 ((1));

414 
	$±hªad_£èâr_deÁu…_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
)

415 
__THROW
 
	`__n⁄nuŒ
 ((1));

420 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

421 
__THROW
 
	`__n⁄nuŒ
 ((2));

429 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

430 c⁄° 
sched_∑øm
 *
__∑øm
)

431 
__THROW
 
	`__n⁄nuŒ
 ((3));

434 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

435 *
__ª°ri˘
 
__pﬁicy
,

436 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

437 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

440 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

441 
__THROW
;

444 #ifde‡
__USE_GNU


446 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

447 
size_t
 
__buÊí
)

448 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, c⁄° *
__«me
)

452 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 #ifde‡
__USE_UNIX98


458 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

461 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

464 #ifde‡
__USE_GNU


469 
	$±hªad_yõld
 (Ë
__THROW
;

474 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

475 c⁄° 
˝u_£t_t
 *
__˝u£t
)

476 
__THROW
 
	`__n⁄nuŒ
 ((3));

479 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

480 
˝u_£t_t
 *
__˝u£t
)

481 
__THROW
 
	`__n⁄nuŒ
 ((3));

494 
	$±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

495 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

506 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

510 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

513 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

518 
	`±hªad_ã°ˇn˚l
 ();

527 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

528 
__mask_was_ßved
;

529 } 
__ˇn˚l_jmp_buf
[1];

530 *
__∑d
[4];

531 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

534 #i‚de‡
__˛ónup_f˘_©åibuã


535 
	#__˛ónup_f˘_©åibuã


	)

540 
	s__±hªad_˛ónup_‰ame


542 (*
__ˇn˚l_routöe
) (*);

543 *
__ˇn˚l_¨g
;

544 
__do_ô
;

545 
__ˇn˚l_ty≥
;

548 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


549 #ifde‡
__˝lu•lus


551 ˛as†
	c__±hªad_˛ónup_˛ass


553 (*
__ˇn˚l_routöe
) (*);

554 *
__ˇn˚l_¨g
;

555 
__do_ô
;

556 
__ˇn˚l_ty≥
;

558 
public
:

559 
	$__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

560 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

561 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

562 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

563 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

564 &
__ˇn˚l_ty≥
); 
	}
}

565 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

575 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

577 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

581 
	#±hªad_˛ónup_p›
(
execuã
) \

582 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

583 } 0)

	)

585 #ifde‡
__USE_GNU


589 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

591 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

592 
__˛‰ame
.
	`__de„r
 ()

	)

597 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

598 
__˛‰ame
.
	`__ª°‹e
 (); \

599 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

600 } 0)

	)

607 
__exã∫_ölöe
 

608 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

610 i‡(
__‰ame
->
__do_ô
)

611 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

612 
	}
}

621 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

623 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

624 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

625 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

626 .
__do_ô
 = 1 };

	)

630 
	#±hªad_˛ónup_p›
(
execuã
) \

631 
__˛‰ame
.
__do_ô
 = (
execuã
); \

632 } 0)

	)

634 #ifde‡
__USE_GNU


638 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

640 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

641 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

642 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

643 .
__do_ô
 = 1 }; \

644 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

645 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

650 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

651 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

652 
__˛‰ame
.
__do_ô
 = (
execuã
); \

653 } 0)

	)

664 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

666 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

667 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

668 *
__ˇn˚l_¨g
 = (
¨g
); \

669 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

670 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

671 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

673 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

674 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

678 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

679 dÿ{

	)

680 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

681 
__˛ónup_f˘_©åibuã
;

685 
	#±hªad_˛ónup_p›
(
execuã
) \

688 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

689 i‡(
execuã
) \

690 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

691 } 0)

	)

692 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

693 
__˛ónup_f˘_©åibuã
;

695 #ifde‡
__USE_GNU


699 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

701 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

702 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

703 *
__ˇn˚l_¨g
 = (
¨g
); \

704 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

705 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

706 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

708 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

709 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

713 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

714 dÿ{

	)

715 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

716 
__˛ónup_f˘_©åibuã
;

721 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

724 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

725 i‡(
execuã
) \

726 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

727 
	}
} 0)

	)

728 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

729 
__˛ónup_f˘_©åibuã
;

733 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

734 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

735 #i‚de‡
SHARED


736 
	`__©åibuã__
 ((
__wók__
))

742 
__jmp_buf_èg
;

743 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROWNL
;

749 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

750 c⁄° 
±hªad_muãx©å_t
 *
__muãx©å
)

751 
__THROW
 
	`__n⁄nuŒ
 ((1));

754 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

755 
__THROW
 
	`__n⁄nuŒ
 ((1));

758 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

759 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

762 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

763 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

765 #ifde‡
__USE_XOPEN2K


767 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

768 c⁄° 
time•ec
 *
__ª°ri˘


769 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

773 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

774 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

778 
	$±hªad_muãx_gë¥io˚ûög
 (c⁄° 
±hªad_muãx_t
 *

779 
__ª°ri˘
 
__muãx
,

780 *
__ª°ri˘
 
__¥io˚ûög
)

781 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

785 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

786 
__¥io˚ûög
,

787 *
__ª°ri˘
 
__ﬁd_˚ûög
)

788 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

791 #ifde‡
__USE_XOPEN2K8


793 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

794 
__THROW
 
	`__n⁄nuŒ
 ((1));

795 #ifde‡
__USE_GNU


796 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

797 
__THROW
 
	`__n⁄nuŒ
 ((1));

806 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

807 
__THROW
 
	`__n⁄nuŒ
 ((1));

810 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

811 
__THROW
 
	`__n⁄nuŒ
 ((1));

814 
	$±hªad_muãx©å_gëpsh¨ed
 (c⁄° 
±hªad_muãx©å_t
 *

815 
__ª°ri˘
 
__©å
,

816 *
__ª°ri˘
 
__psh¨ed
)

817 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

820 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

821 
__psh¨ed
)

822 
__THROW
 
	`__n⁄nuŒ
 ((1));

824 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


826 
	$±hªad_muãx©å_gëty≥
 (c⁄° 
±hªad_muãx©å_t
 *
__ª°ri˘


827 
__©å
, *
__ª°ri˘
 
__köd
)

828 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

833 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

834 
__THROW
 
	`__n⁄nuŒ
 ((1));

838 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (c⁄° 
±hªad_muãx©å_t
 *

839 
__ª°ri˘
 
__©å
,

840 *
__ª°ri˘
 
__¥Ÿocﬁ
)

841 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

845 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

846 
__¥Ÿocﬁ
)

847 
__THROW
 
	`__n⁄nuŒ
 ((1));

850 
	$±hªad_muãx©å_gë¥io˚ûög
 (c⁄° 
±hªad_muãx©å_t
 *

851 
__ª°ri˘
 
__©å
,

852 *
__ª°ri˘
 
__¥io˚ûög
)

853 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

857 
__¥io˚ûög
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1));

860 #ifde‡
__USE_XOPEN2K


862 
	$±hªad_muãx©å_gërobu°
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

863 *
__robu°√ss
)

864 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

865 #ifde‡
__USE_GNU


866 
	$±hªad_muãx©å_gërobu°_≈
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

867 *
__robu°√ss
)

868 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

872 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

873 
__robu°√ss
)

874 
__THROW
 
	`__n⁄nuŒ
 ((1));

875 #ifde‡
__USE_GNU


876 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

877 
__robu°√ss
)

878 
__THROW
 
	`__n⁄nuŒ
 ((1));

883 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


888 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

889 c⁄° 
±hªad_rwlock©å_t
 *
__ª°ri˘


890 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

893 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

894 
__THROW
 
	`__n⁄nuŒ
 ((1));

897 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

898 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

901 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

902 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

904 #ifde‡
__USE_XOPEN2K


906 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

907 c⁄° 
time•ec
 *
__ª°ri˘


908 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

912 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

913 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

916 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

917 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

919 #ifde‡
__USE_XOPEN2K


921 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

922 c⁄° 
time•ec
 *
__ª°ri˘


923 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

927 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

928 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

934 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

935 
__THROW
 
	`__n⁄nuŒ
 ((1));

938 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

939 
__THROW
 
	`__n⁄nuŒ
 ((1));

942 
	$±hªad_rwlock©å_gëpsh¨ed
 (c⁄° 
±hªad_rwlock©å_t
 *

943 
__ª°ri˘
 
__©å
,

944 *
__ª°ri˘
 
__psh¨ed
)

945 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

948 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

949 
__psh¨ed
)

950 
__THROW
 
	`__n⁄nuŒ
 ((1));

953 
	$±hªad_rwlock©å_gëköd_≈
 (c⁄° 
±hªad_rwlock©å_t
 *

954 
__ª°ri˘
 
__©å
,

955 *
__ª°ri˘
 
__¥ef
)

956 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

959 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

960 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

968 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

969 c⁄° 
±hªad_c⁄d©å_t
 *
__ª°ri˘
 
__c⁄d_©å
)

970 
__THROW
 
	`__n⁄nuŒ
 ((1));

973 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

974 
__THROW
 
	`__n⁄nuŒ
 ((1));

977 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

978 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

981 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

982 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

989 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

990 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

991 
	`__n⁄nuŒ
 ((1, 2));

1000 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1001 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

1002 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

1003 
	`__n⁄nuŒ
 ((1, 2, 3));

1008 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

1009 
__THROW
 
	`__n⁄nuŒ
 ((1));

1012 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

1013 
__THROW
 
	`__n⁄nuŒ
 ((1));

1016 
	$±hªad_c⁄d©å_gëpsh¨ed
 (c⁄° 
±hªad_c⁄d©å_t
 *

1017 
__ª°ri˘
 
__©å
,

1018 *
__ª°ri˘
 
__psh¨ed
)

1019 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1022 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1023 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1025 #ifde‡
__USE_XOPEN2K


1027 
	$±hªad_c⁄d©å_gë˛ock
 (c⁄° 
±hªad_c⁄d©å_t
 *

1028 
__ª°ri˘
 
__©å
,

1029 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1030 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1033 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1034 
__˛ockid_t
 
__˛ock_id
)

1035 
__THROW
 
	`__n⁄nuŒ
 ((1));

1039 #ifde‡
__USE_XOPEN2K


1044 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1045 
__THROW
 
	`__n⁄nuŒ
 ((1));

1048 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1049 
__THROW
 
	`__n⁄nuŒ
 ((1));

1052 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1053 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1056 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1057 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1060 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1061 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1068 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1069 c⁄° 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1070 
__©å
, 
__cou¡
)

1071 
__THROW
 
	`__n⁄nuŒ
 ((1));

1074 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1075 
__THROW
 
	`__n⁄nuŒ
 ((1));

1078 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1079 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1083 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1084 
__THROW
 
	`__n⁄nuŒ
 ((1));

1087 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1088 
__THROW
 
	`__n⁄nuŒ
 ((1));

1091 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (c⁄° 
±hªad_b¨rõøâr_t
 *

1092 
__ª°ri˘
 
__©å
,

1093 *
__ª°ri˘
 
__psh¨ed
)

1094 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1097 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1098 
__psh¨ed
)

1099 
__THROW
 
	`__n⁄nuŒ
 ((1));

1111 
	$±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1112 (*
__de°r_fun˘i⁄
) (*))

1113 
__THROW
 
	`__n⁄nuŒ
 ((1));

1116 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1119 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1122 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1123 c⁄° *
__poöãr
Ë
__THROW
 ;

1126 #ifde‡
__USE_XOPEN2K


1128 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1129 
__˛ockid_t
 *
__˛ock_id
)

1130 
__THROW
 
	`__n⁄nuŒ
 ((2));

1145 
	$±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1146 (*
__∑ª¡
) (),

1147 (*
__chûd
Ë()Ë
__THROW
;

1150 #ifde‡
__USE_EXTERN_INLINES


1152 
__exã∫_ölöe
 

1153 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1155  
__thªad1
 =
__thªad2
;

1156 
	}
}

1159 
	g__END_DECLS


	@/usr/include/semaphore.h

18 #i‚de‡
_SEMAPHORE_H


19 
	#_SEMAPHORE_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sys/ty≥s.h
>

23 #ifde‡
__USE_XOPEN2K


24 
	#__√ed_time•ec


	)

25 
	~<time.h
>

29 
	~<bôs/£m≠h‹e.h
>

32 
__BEGIN_DECLS


36 
	$£m_öô
 (
£m_t
 *
__£m
, 
__psh¨ed
, 
__vÆue
)

37 
__THROW
;

39 
	$£m_de°roy
 (
£m_t
 *
__£m
Ë
__THROW
;

42 
£m_t
 *
	$£m_›í
 (c⁄° *
__«me
, 
__oÊag
, ...Ë
__THROW
;

45 
	$£m_˛o£
 (
£m_t
 *
__£m
Ë
__THROW
;

48 
	$£m_u∆ök
 (c⁄° *
__«me
Ë
__THROW
;

54 
	`£m_waô
 (
£m_t
 *
__£m
);

56 #ifde‡
__USE_XOPEN2K


61 
	`£m_timedwaô
 (
£m_t
 *
__ª°ri˘
 
__£m
,

62 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
);

66 
	$£m_åywaô
 (
£m_t
 *
__£m
Ë
__THROWNL
;

69 
	$£m_po°
 (
£m_t
 *
__£m
Ë
__THROWNL
;

72 
	$£m_gëvÆue
 (
£m_t
 *
__ª°ri˘
 
__£m
, *__ª°ri˘ 
__svÆ
)

73 
__THROW
;

76 
__END_DECLS


	@/usr/include/signal.h

22 #i‚def 
_SIGNAL_H


24 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


25 
	#_SIGNAL_H


	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	~<bôs/sig£t.h
>

36 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


37 #i‚de‡
__sig_©omic_t_deföed


38 
	#__sig_©omic_t_deföed


	)

39 
__BEGIN_NAMESPACE_STD


40 
__sig_©omic_t
 
	tsig_©omic_t
;

41 
	g__END_NAMESPACE_STD


43 #unde‡
__√ed_sig_©omic_t


46 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

47 #i‚de‡
__sig£t_t_deföed


48 
	#__sig£t_t_deföed


	)

49 
__sig£t_t
 
	tsig£t_t
;

51 #unde‡
__√ed_sig£t_t


54 #ifde‡
_SIGNAL_H


56 
	~<bôs/ty≥s.h
>

57 
	~<bôs/signum.h
>

59 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


60 #i‚de‡
__pid_t_deföed


61 
__pid_t
 
	tpid_t
;

62 
	#__pid_t_deföed


	)

64 #ifde‡
__USE_XOPEN


66 #i‚de‡
__uid_t_deföed


67 
__uid_t
 
	tuid_t
;

68 
	#__uid_t_deföed


	)

72 #ifde‡
__USE_POSIX199309


74 
	#__√ed_time•ec


	)

75 
	~<time.h
>

78 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


80 
	~<bôs/sigöfo.h
>

85 (*
	t__sigh™dÀr_t
) ();

90 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

91 
__THROW
;

92 #ifde‡
__USE_GNU


93 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

94 
__THROW
;

100 
__BEGIN_NAMESPACE_STD


101 #ifde‡
__USE_MISC


102 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

103 
__THROW
;

106 #ifde‡
__REDIRECT_NTH


107 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

108 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

109 
__sysv_sig«l
);

111 
	#sig«l
 
__sysv_sig«l


	)

114 
__END_NAMESPACE_STD


116 #ifde‡
__USE_XOPEN


119 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

120 
__THROW
;

126 #ifde‡
__USE_POSIX


127 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

130 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


134 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

137 
__BEGIN_NAMESPACE_STD


139 
	$øi£
 (
__sig
Ë
__THROW
;

140 
__END_NAMESPACE_STD


142 #ifde‡
__USE_MISC


144 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

145 
__THROW
;

146 
	$gsig«l
 (
__sig
Ë
__THROW
;

149 #ifde‡
__USE_XOPEN2K8


151 
	`psig«l
 (
__sig
, c⁄° *
__s
);

154 
	`psigöfo
 (c⁄° 
sigöfo_t
 *
__pöfo
, c⁄° *
__s
);

166 #ifde‡
__USE_XOPEN


167 #ifde‡
__GNUC__


168 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

170 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

172 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

177 #ifde‡
__USE_MISC


184 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

187 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

190 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

193 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

197 #ifde‡
__USE_MISC


198 
	#NSIG
 
_NSIG


	)

201 #ifde‡
__USE_GNU


202 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

206 #ifde‡
__USE_MISC


207 
__sigh™dÀr_t
 
	tsig_t
;

210 #ifde‡
__USE_POSIX


213 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

216 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

219 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

222 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigismembî
 (c⁄° 
sig£t_t
 *
__£t
, 
__signo
)

226 
__THROW
 
	`__n⁄nuŒ
 ((1));

228 #ifde‡
__USE_GNU


230 
	$sigi£m±y£t
 (c⁄° 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

233 
	$sig™d£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

234 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

237 
	$sig‹£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

238 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

243 
	~<bôs/siga˘i⁄.h
>

246 
	$sig¥ocmask
 (
__how
, c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

247 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

254 
	$sigsu•íd
 (c⁄° 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

257 
	$siga˘i⁄
 (
__sig
, c⁄° 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

258 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

261 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

268 
	$sigwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

269 
	`__n⁄nuŒ
 ((1, 2));

271 #ifde‡
__USE_POSIX199309


276 
	$sigwaôöfo
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

277 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

284 
	$sigtimedwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

285 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

286 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

287 
	`__n⁄nuŒ
 ((1));

291 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, c⁄° 
sigvÆ
 
__vÆ
)

292 
__THROW
;

297 #ifde‡
__USE_MISC


301 c⁄° *c⁄° 
_sys_sigli°
[
_NSIG
];

302 c⁄° *c⁄° 
sys_sigli°
[
_NSIG
];

306 
	~<bôs/sigc⁄ãxt.h
>

309 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

314 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


315 
	#__√ed_size_t


	)

316 
	~<°ddef.h
>

321 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

323 
	~<bôs/sig°ack.h
>

324 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


326 
	~<sys/uc⁄ãxt.h
>

332 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

333 
__THROW
 
__©åibuã_dïªˇãd__
;

337 
	$sigÆt°ack
 (c⁄° 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

338 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

342 #ifde‡
__USE_XOPEN_EXTENDED


346 
	$sighﬁd
 (
__sig
Ë
__THROW
;

349 
	$sigªl£
 (
__sig
Ë
__THROW
;

352 
	$sigign‹e
 (
__sig
Ë
__THROW
;

355 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

358 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


361 
	~<bôs/±hªadty≥s.h
>

362 
	~<bôs/sigthªad.h
>

369 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

371 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

375 
__END_DECLS


	@/usr/include/sqlite3.h

33 #i‚de‡
_SQLITE3_H_


34 
	#_SQLITE3_H_


	)

35 
	~<°d¨g.h
>

40 #ifde‡
__˝lu•lus


48 #i‚de‡
SQLITE_EXTERN


49 
	#SQLITE_EXTERN
 

	)

51 #i‚de‡
SQLITE_API


52 
	#SQLITE_API


	)

54 #i‚de‡
SQLITE_CDECL


55 
	#SQLITE_CDECL


	)

57 #i‚de‡
SQLITE_STDCALL


58 
	#SQLITE_STDCALL


	)

74 
	#SQLITE_DEPRECATED


	)

75 
	#SQLITE_EXPERIMENTAL


	)

80 #ifde‡
SQLITE_VERSION


81 #unde‡
SQLITE_VERSION


83 #ifde‡
SQLITE_VERSION_NUMBER


84 #unde‡
SQLITE_VERSION_NUMBER


114 
	#SQLITE_VERSION
 "3.11.0"

	)

115 
	#SQLITE_VERSION_NUMBER
 3011000

	)

116 
	#SQLITE_SOURCE_ID
 "2016-02-15 17:29:24 3d862f207e3adc00f78066799ac5a8c282430a5f"

	)

148 
SQLITE_API
 
SQLITE_EXTERN
 c⁄° 
sqlôe3_vîsi⁄
[];

149 
SQLITE_API
 c⁄° *
SQLITE_STDCALL
 
sqlôe3_libvîsi⁄
();

150 
SQLITE_API
 c⁄° *
SQLITE_STDCALL
 
sqlôe3_sour˚id
();

151 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_libvîsi⁄_numbî
();

175 #i‚de‡
SQLITE_OMIT_COMPILEOPTION_DIAGS


176 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_compûe›ti⁄_u£d
(c⁄° *
zO±Name
);

177 
SQLITE_API
 c⁄° *
SQLITE_STDCALL
 
sqlôe3_compûe›ti⁄_gë
(
N
);

216 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_thªadß„
();

232 
sqlôe3
 
	tsqlôe3
;

250 #ifde‡
SQLITE_INT64_TYPE


251 
SQLITE_INT64_TYPE
 
	tsqlôe_öt64
;

252 
	tSQLITE_INT64_TYPE
 
	tsqlôe_uöt64
;

253 #ñi‡
deföed
(
_MSC_VER
Ë|| deföed(
__BORLANDC__
)

254 
__öt64
 
	tsqlôe_öt64
;

255 
	t__öt64
 
	tsqlôe_uöt64
;

257 
	tsqlôe_öt64
;

258 
	tsqlôe_uöt64
;

260 
sqlôe_öt64
 
	tsqlôe3_öt64
;

261 
sqlôe_uöt64
 
	tsqlôe3_uöt64
;

267 #ifde‡
SQLITE_OMIT_FLOATING_POINT


268 
sqlôe3_öt64


	)

313 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_˛o£
(
sqlôe3
*);

314 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_˛o£_v2
(
sqlôe3
*);

321 (*
sqlôe3_ˇŒback
)(*,,**, **);

385 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_exec
(

386 
sqlôe3
*,

387 c⁄° *
sql
,

388 (*
ˇŒback
)(*,,**,**),

390 **
îrmsg


404 
	#SQLITE_OK
 0

	)

406 
	#SQLITE_ERROR
 1

	)

407 
	#SQLITE_INTERNAL
 2

	)

408 
	#SQLITE_PERM
 3

	)

409 
	#SQLITE_ABORT
 4

	)

410 
	#SQLITE_BUSY
 5

	)

411 
	#SQLITE_LOCKED
 6

	)

412 
	#SQLITE_NOMEM
 7

	)

413 
	#SQLITE_READONLY
 8

	)

414 
	#SQLITE_INTERRUPT
 9

	)

415 
	#SQLITE_IOERR
 10

	)

416 
	#SQLITE_CORRUPT
 11

	)

417 
	#SQLITE_NOTFOUND
 12

	)

418 
	#SQLITE_FULL
 13

	)

419 
	#SQLITE_CANTOPEN
 14

	)

420 
	#SQLITE_PROTOCOL
 15

	)

421 
	#SQLITE_EMPTY
 16

	)

422 
	#SQLITE_SCHEMA
 17

	)

423 
	#SQLITE_TOOBIG
 18

	)

424 
	#SQLITE_CONSTRAINT
 19

	)

425 
	#SQLITE_MISMATCH
 20

	)

426 
	#SQLITE_MISUSE
 21

	)

427 
	#SQLITE_NOLFS
 22

	)

428 
	#SQLITE_AUTH
 23

	)

429 
	#SQLITE_FORMAT
 24

	)

430 
	#SQLITE_RANGE
 25

	)

431 
	#SQLITE_NOTADB
 26

	)

432 
	#SQLITE_NOTICE
 27

	)

433 
	#SQLITE_WARNING
 28

	)

434 
	#SQLITE_ROW
 100

	)

435 
	#SQLITE_DONE
 101

	)

454 
	#SQLITE_IOERR_READ
 (
SQLITE_IOERR
 | (1<<8))

	)

455 
	#SQLITE_IOERR_SHORT_READ
 (
SQLITE_IOERR
 | (2<<8))

	)

456 
	#SQLITE_IOERR_WRITE
 (
SQLITE_IOERR
 | (3<<8))

	)

457 
	#SQLITE_IOERR_FSYNC
 (
SQLITE_IOERR
 | (4<<8))

	)

458 
	#SQLITE_IOERR_DIR_FSYNC
 (
SQLITE_IOERR
 | (5<<8))

	)

459 
	#SQLITE_IOERR_TRUNCATE
 (
SQLITE_IOERR
 | (6<<8))

	)

460 
	#SQLITE_IOERR_FSTAT
 (
SQLITE_IOERR
 | (7<<8))

	)

461 
	#SQLITE_IOERR_UNLOCK
 (
SQLITE_IOERR
 | (8<<8))

	)

462 
	#SQLITE_IOERR_RDLOCK
 (
SQLITE_IOERR
 | (9<<8))

	)

463 
	#SQLITE_IOERR_DELETE
 (
SQLITE_IOERR
 | (10<<8))

	)

464 
	#SQLITE_IOERR_BLOCKED
 (
SQLITE_IOERR
 | (11<<8))

	)

465 
	#SQLITE_IOERR_NOMEM
 (
SQLITE_IOERR
 | (12<<8))

	)

466 
	#SQLITE_IOERR_ACCESS
 (
SQLITE_IOERR
 | (13<<8))

	)

467 
	#SQLITE_IOERR_CHECKRESERVEDLOCK
 (
SQLITE_IOERR
 | (14<<8))

	)

468 
	#SQLITE_IOERR_LOCK
 (
SQLITE_IOERR
 | (15<<8))

	)

469 
	#SQLITE_IOERR_CLOSE
 (
SQLITE_IOERR
 | (16<<8))

	)

470 
	#SQLITE_IOERR_DIR_CLOSE
 (
SQLITE_IOERR
 | (17<<8))

	)

471 
	#SQLITE_IOERR_SHMOPEN
 (
SQLITE_IOERR
 | (18<<8))

	)

472 
	#SQLITE_IOERR_SHMSIZE
 (
SQLITE_IOERR
 | (19<<8))

	)

473 
	#SQLITE_IOERR_SHMLOCK
 (
SQLITE_IOERR
 | (20<<8))

	)

474 
	#SQLITE_IOERR_SHMMAP
 (
SQLITE_IOERR
 | (21<<8))

	)

475 
	#SQLITE_IOERR_SEEK
 (
SQLITE_IOERR
 | (22<<8))

	)

476 
	#SQLITE_IOERR_DELETE_NOENT
 (
SQLITE_IOERR
 | (23<<8))

	)

477 
	#SQLITE_IOERR_MMAP
 (
SQLITE_IOERR
 | (24<<8))

	)

478 
	#SQLITE_IOERR_GETTEMPPATH
 (
SQLITE_IOERR
 | (25<<8))

	)

479 
	#SQLITE_IOERR_CONVPATH
 (
SQLITE_IOERR
 | (26<<8))

	)

480 
	#SQLITE_IOERR_VNODE
 (
SQLITE_IOERR
 | (27<<8))

	)

481 
	#SQLITE_IOERR_AUTH
 (
SQLITE_IOERR
 | (28<<8))

	)

482 
	#SQLITE_LOCKED_SHAREDCACHE
 (
SQLITE_LOCKED
 | (1<<8))

	)

483 
	#SQLITE_BUSY_RECOVERY
 (
SQLITE_BUSY
 | (1<<8))

	)

484 
	#SQLITE_BUSY_SNAPSHOT
 (
SQLITE_BUSY
 | (2<<8))

	)

485 
	#SQLITE_CANTOPEN_NOTEMPDIR
 (
SQLITE_CANTOPEN
 | (1<<8))

	)

486 
	#SQLITE_CANTOPEN_ISDIR
 (
SQLITE_CANTOPEN
 | (2<<8))

	)

487 
	#SQLITE_CANTOPEN_FULLPATH
 (
SQLITE_CANTOPEN
 | (3<<8))

	)

488 
	#SQLITE_CANTOPEN_CONVPATH
 (
SQLITE_CANTOPEN
 | (4<<8))

	)

489 
	#SQLITE_CORRUPT_VTAB
 (
SQLITE_CORRUPT
 | (1<<8))

	)

490 
	#SQLITE_READONLY_RECOVERY
 (
SQLITE_READONLY
 | (1<<8))

	)

491 
	#SQLITE_READONLY_CANTLOCK
 (
SQLITE_READONLY
 | (2<<8))

	)

492 
	#SQLITE_READONLY_ROLLBACK
 (
SQLITE_READONLY
 | (3<<8))

	)

493 
	#SQLITE_READONLY_DBMOVED
 (
SQLITE_READONLY
 | (4<<8))

	)

494 
	#SQLITE_ABORT_ROLLBACK
 (
SQLITE_ABORT
 | (2<<8))

	)

495 
	#SQLITE_CONSTRAINT_CHECK
 (
SQLITE_CONSTRAINT
 | (1<<8))

	)

496 
	#SQLITE_CONSTRAINT_COMMITHOOK
 (
SQLITE_CONSTRAINT
 | (2<<8))

	)

497 
	#SQLITE_CONSTRAINT_FOREIGNKEY
 (
SQLITE_CONSTRAINT
 | (3<<8))

	)

498 
	#SQLITE_CONSTRAINT_FUNCTION
 (
SQLITE_CONSTRAINT
 | (4<<8))

	)

499 
	#SQLITE_CONSTRAINT_NOTNULL
 (
SQLITE_CONSTRAINT
 | (5<<8))

	)

500 
	#SQLITE_CONSTRAINT_PRIMARYKEY
 (
SQLITE_CONSTRAINT
 | (6<<8))

	)

501 
	#SQLITE_CONSTRAINT_TRIGGER
 (
SQLITE_CONSTRAINT
 | (7<<8))

	)

502 
	#SQLITE_CONSTRAINT_UNIQUE
 (
SQLITE_CONSTRAINT
 | (8<<8))

	)

503 
	#SQLITE_CONSTRAINT_VTAB
 (
SQLITE_CONSTRAINT
 | (9<<8))

	)

504 
	#SQLITE_CONSTRAINT_ROWID
 (
SQLITE_CONSTRAINT
 |(10<<8))

	)

505 
	#SQLITE_NOTICE_RECOVER_WAL
 (
SQLITE_NOTICE
 | (1<<8))

	)

506 
	#SQLITE_NOTICE_RECOVER_ROLLBACK
 (
SQLITE_NOTICE
 | (2<<8))

	)

507 
	#SQLITE_WARNING_AUTOINDEX
 (
SQLITE_WARNING
 | (1<<8))

	)

508 
	#SQLITE_AUTH_USER
 (
SQLITE_AUTH
 | (1<<8))

	)

517 
	#SQLITE_OPEN_READONLY
 0x00000001

	)

518 
	#SQLITE_OPEN_READWRITE
 0x00000002

	)

519 
	#SQLITE_OPEN_CREATE
 0x00000004

	)

520 
	#SQLITE_OPEN_DELETEONCLOSE
 0x00000008

	)

521 
	#SQLITE_OPEN_EXCLUSIVE
 0x00000010

	)

522 
	#SQLITE_OPEN_AUTOPROXY
 0x00000020

	)

523 
	#SQLITE_OPEN_URI
 0x00000040

	)

524 
	#SQLITE_OPEN_MEMORY
 0x00000080

	)

525 
	#SQLITE_OPEN_MAIN_DB
 0x00000100

	)

526 
	#SQLITE_OPEN_TEMP_DB
 0x00000200

	)

527 
	#SQLITE_OPEN_TRANSIENT_DB
 0x00000400

	)

528 
	#SQLITE_OPEN_MAIN_JOURNAL
 0x00000800

	)

529 
	#SQLITE_OPEN_TEMP_JOURNAL
 0x00001000

	)

530 
	#SQLITE_OPEN_SUBJOURNAL
 0x00002000

	)

531 
	#SQLITE_OPEN_MASTER_JOURNAL
 0x00004000

	)

532 
	#SQLITE_OPEN_NOMUTEX
 0x00008000

	)

533 
	#SQLITE_OPEN_FULLMUTEX
 0x00010000

	)

534 
	#SQLITE_OPEN_SHAREDCACHE
 0x00020000

	)

535 
	#SQLITE_OPEN_PRIVATECACHE
 0x00040000

	)

536 
	#SQLITE_OPEN_WAL
 0x00080000

	)

568 
	#SQLITE_IOCAP_ATOMIC
 0x00000001

	)

569 
	#SQLITE_IOCAP_ATOMIC512
 0x00000002

	)

570 
	#SQLITE_IOCAP_ATOMIC1K
 0x00000004

	)

571 
	#SQLITE_IOCAP_ATOMIC2K
 0x00000008

	)

572 
	#SQLITE_IOCAP_ATOMIC4K
 0x00000010

	)

573 
	#SQLITE_IOCAP_ATOMIC8K
 0x00000020

	)

574 
	#SQLITE_IOCAP_ATOMIC16K
 0x00000040

	)

575 
	#SQLITE_IOCAP_ATOMIC32K
 0x00000080

	)

576 
	#SQLITE_IOCAP_ATOMIC64K
 0x00000100

	)

577 
	#SQLITE_IOCAP_SAFE_APPEND
 0x00000200

	)

578 
	#SQLITE_IOCAP_SEQUENTIAL
 0x00000400

	)

579 
	#SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN
 0x00000800

	)

580 
	#SQLITE_IOCAP_POWERSAFE_OVERWRITE
 0x00001000

	)

581 
	#SQLITE_IOCAP_IMMUTABLE
 0x00002000

	)

590 
	#SQLITE_LOCK_NONE
 0

	)

591 
	#SQLITE_LOCK_SHARED
 1

	)

592 
	#SQLITE_LOCK_RESERVED
 2

	)

593 
	#SQLITE_LOCK_PENDING
 3

	)

594 
	#SQLITE_LOCK_EXCLUSIVE
 4

	)

622 
	#SQLITE_SYNC_NORMAL
 0x00002

	)

623 
	#SQLITE_SYNC_FULL
 0x00003

	)

624 
	#SQLITE_SYNC_DATAONLY
 0x00010

	)

637 
sqlôe3_fûe
 
	tsqlôe3_fûe
;

638 
	ssqlôe3_fûe
 {

639 c⁄° 
sqlôe3_io_mëhods
 *
pMëhods
;

732 
sqlôe3_io_mëhods
 
	tsqlôe3_io_mëhods
;

733 
	ssqlôe3_io_mëhods
 {

734 
iVîsi⁄
;

735 (*
xClo£
)(
sqlôe3_fûe
*);

736 (*
xRód
)(
sqlôe3_fûe
*, *, 
iAmt
, 
sqlôe3_öt64
 
iOf°
);

737 (*
xWrôe
)(
sqlôe3_fûe
*, c⁄° *, 
iAmt
, 
sqlôe3_öt64
 
iOf°
);

738 (*
xTrunˇã
)(
sqlôe3_fûe
*, 
sqlôe3_öt64
 
size
);

739 (*
xSync
)(
sqlôe3_fûe
*, 
Êags
);

740 (*
xFûeSize
)(
sqlôe3_fûe
*, 
sqlôe3_öt64
 *
pSize
);

741 (*
xLock
)(
sqlôe3_fûe
*, );

742 (*
xU∆ock
)(
sqlôe3_fûe
*, );

743 (*
xCheckRe£rvedLock
)(
sqlôe3_fûe
*, *
pResOut
);

744 (*
xFûeC⁄åﬁ
)(
sqlôe3_fûe
*, 
›
, *
pArg
);

745 (*
xSe˘‹Size
)(
sqlôe3_fûe
*);

746 (*
xDevi˚Ch¨a˘îi°ics
)(
sqlôe3_fûe
*);

748 (*
xShmM≠
)(
sqlôe3_fûe
*, 
iPg
, 
pgsz
, , volatile**);

749 (*
xShmLock
)(
sqlôe3_fûe
*, 
off£t
, 
n
, 
Êags
);

750 (*
xShmB¨rõr
)(
sqlôe3_fûe
*);

751 (*
xShmUnm≠
)(
sqlôe3_fûe
*, 
dñëeFœg
);

753 (*
xFëch
)(
sqlôe3_fûe
*, 
sqlôe3_öt64
 
iOf°
, 
iAmt
, **
µ
);

754 (*
xUn„tch
)(
sqlôe3_fûe
*, 
sqlôe3_öt64
 
iOf°
, *
p
);

992 
	#SQLITE_FCNTL_LOCKSTATE
 1

	)

993 
	#SQLITE_FCNTL_GET_LOCKPROXYFILE
 2

	)

994 
	#SQLITE_FCNTL_SET_LOCKPROXYFILE
 3

	)

995 
	#SQLITE_FCNTL_LAST_ERRNO
 4

	)

996 
	#SQLITE_FCNTL_SIZE_HINT
 5

	)

997 
	#SQLITE_FCNTL_CHUNK_SIZE
 6

	)

998 
	#SQLITE_FCNTL_FILE_POINTER
 7

	)

999 
	#SQLITE_FCNTL_SYNC_OMITTED
 8

	)

1000 
	#SQLITE_FCNTL_WIN32_AV_RETRY
 9

	)

1001 
	#SQLITE_FCNTL_PERSIST_WAL
 10

	)

1002 
	#SQLITE_FCNTL_OVERWRITE
 11

	)

1003 
	#SQLITE_FCNTL_VFSNAME
 12

	)

1004 
	#SQLITE_FCNTL_POWERSAFE_OVERWRITE
 13

	)

1005 
	#SQLITE_FCNTL_PRAGMA
 14

	)

1006 
	#SQLITE_FCNTL_BUSYHANDLER
 15

	)

1007 
	#SQLITE_FCNTL_TEMPFILENAME
 16

	)

1008 
	#SQLITE_FCNTL_MMAP_SIZE
 18

	)

1009 
	#SQLITE_FCNTL_TRACE
 19

	)

1010 
	#SQLITE_FCNTL_HAS_MOVED
 20

	)

1011 
	#SQLITE_FCNTL_SYNC
 21

	)

1012 
	#SQLITE_FCNTL_COMMIT_PHASETWO
 22

	)

1013 
	#SQLITE_FCNTL_WIN32_SET_HANDLE
 23

	)

1014 
	#SQLITE_FCNTL_WAL_BLOCK
 24

	)

1015 
	#SQLITE_FCNTL_ZIPVFS
 25

	)

1016 
	#SQLITE_FCNTL_RBU
 26

	)

1017 
	#SQLITE_FCNTL_VFS_POINTER
 27

	)

1018 
	#SQLITE_FCNTL_JOURNAL_POINTER
 28

	)

1021 
	#SQLITE_GET_LOCKPROXYFILE
 
SQLITE_FCNTL_GET_LOCKPROXYFILE


	)

1022 
	#SQLITE_SET_LOCKPROXYFILE
 
SQLITE_FCNTL_SET_LOCKPROXYFILE


	)

1023 
	#SQLITE_LAST_ERRNO
 
SQLITE_FCNTL_LAST_ERRNO


	)

1036 
sqlôe3_muãx
 
	tsqlôe3_muãx
;

1195 
sqlôe3_vfs
 
	tsqlôe3_vfs
;

1196 (*
sqlôe3_sysˇŒ_±r
)();

1197 
	ssqlôe3_vfs
 {

1198 
iVîsi⁄
;

1199 
szOsFûe
;

1200 
mxP©h«me
;

1201 
sqlôe3_vfs
 *
pNext
;

1202 c⁄° *
zName
;

1203 *
pAµD©a
;

1204 (*
xO≥n
)(
sqlôe3_vfs
*, c⁄° *
zName
, 
sqlôe3_fûe
*,

1205 
Êags
, *
pOutFœgs
);

1206 (*
xDñëe
)(
sqlôe3_vfs
*, c⁄° *
zName
, 
syncDú
);

1207 (*
xAc˚ss
)(
sqlôe3_vfs
*, c⁄° *
zName
, 
Êags
, *
pResOut
);

1208 (*
xFuŒP©h«me
)(
sqlôe3_vfs
*, c⁄° *
zName
, 
nOut
, *
zOut
);

1209 *(*
xDlO≥n
)(
sqlôe3_vfs
*, c⁄° *
zFûíame
);

1210 (*
xDlEº‹
)(
sqlôe3_vfs
*, 
nByã
, *
zEºMsg
);

1211 (*(*
xDlSym
)(
sqlôe3_vfs
*,*, c⁄° *
zSymbﬁ
))();

1212 (*
xDlClo£
)(
sqlôe3_vfs
*, *);

1213 (*
xR™dom√ss
)(
sqlôe3_vfs
*, 
nByã
, *
zOut
);

1214 (*
xSÀï
)(
sqlôe3_vfs
*, 
mi¸o£c⁄ds
);

1215 (*
xCuºítTime
)(
sqlôe3_vfs
*, *);

1216 (*
xGëLa°Eº‹
)(
sqlôe3_vfs
*, , *);

1221 (*
xCuºítTimeI¡64
)(
sqlôe3_vfs
*, 
sqlôe3_öt64
*);

1226 (*
xSëSy°emCÆl
)(
sqlôe3_vfs
*, c⁄° *
zName
, 
sqlôe3_sysˇŒ_±r
);

1227 
sqlôe3_sysˇŒ_±r
 (*
xGëSy°emCÆl
)(
sqlôe3_vfs
*, c⁄° *
zName
);

1228 c⁄° *(*
xNextSy°emCÆl
)(
sqlôe3_vfs
*, c⁄° *
zName
);

1256 
	#SQLITE_ACCESS_EXISTS
 0

	)

1257 
	#SQLITE_ACCESS_READWRITE
 1

	)

1258 
	#SQLITE_ACCESS_READ
 2

	)

1282 
	#SQLITE_SHM_UNLOCK
 1

	)

1283 
	#SQLITE_SHM_LOCK
 2

	)

1284 
	#SQLITE_SHM_SHARED
 4

	)

1285 
	#SQLITE_SHM_EXCLUSIVE
 8

	)

1295 
	#SQLITE_SHM_NLOCK
 8

	)

1373 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_öôülize
();

1374 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_shutdown
();

1375 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_os_öô
();

1376 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_os_íd
();

1409 
SQLITE_API
 
SQLITE_CDECL
 
sqlôe3_c⁄fig
(, ...);

1428 
SQLITE_API
 
SQLITE_CDECL
 
sqlôe3_db_c⁄fig
(
sqlôe3
*, 
›
, ...);

1493 
sqlôe3_mem_mëhods
 
	tsqlôe3_mem_mëhods
;

1494 
	ssqlôe3_mem_mëhods
 {

1495 *(*
xMÆloc
)();

1496 (*
xFªe
)(*);

1497 *(*
xRóŒoc
)(*,);

1498 (*
xSize
)(*);

1499 (*
xRoundup
)();

1500 (*
xInô
)(*);

1501 (*
xShutdown
)(*);

1502 *
pAµD©a
;

1825 
	#SQLITE_CONFIG_SINGLETHREAD
 1

	)

1826 
	#SQLITE_CONFIG_MULTITHREAD
 2

	)

1827 
	#SQLITE_CONFIG_SERIALIZED
 3

	)

1828 
	#SQLITE_CONFIG_MALLOC
 4

	)

1829 
	#SQLITE_CONFIG_GETMALLOC
 5

	)

1830 
	#SQLITE_CONFIG_SCRATCH
 6

	)

1831 
	#SQLITE_CONFIG_PAGECACHE
 7

	)

1832 
	#SQLITE_CONFIG_HEAP
 8

	)

1833 
	#SQLITE_CONFIG_MEMSTATUS
 9

	)

1834 
	#SQLITE_CONFIG_MUTEX
 10

	)

1835 
	#SQLITE_CONFIG_GETMUTEX
 11

	)

1837 
	#SQLITE_CONFIG_LOOKASIDE
 13

	)

1838 
	#SQLITE_CONFIG_PCACHE
 14

	)

1839 
	#SQLITE_CONFIG_GETPCACHE
 15

	)

1840 
	#SQLITE_CONFIG_LOG
 16

	)

1841 
	#SQLITE_CONFIG_URI
 17

	)

1842 
	#SQLITE_CONFIG_PCACHE2
 18

	)

1843 
	#SQLITE_CONFIG_GETPCACHE2
 19

	)

1844 
	#SQLITE_CONFIG_COVERING_INDEX_SCAN
 20

	)

1845 
	#SQLITE_CONFIG_SQLLOG
 21

	)

1846 
	#SQLITE_CONFIG_MMAP_SIZE
 22

	)

1847 
	#SQLITE_CONFIG_WIN32_HEAPSIZE
 23

	)

1848 
	#SQLITE_CONFIG_PCACHE_HDRSZ
 24

	)

1849 
	#SQLITE_CONFIG_PMASZ
 25

	)

1909 
	#SQLITE_DBCONFIG_LOOKASIDE
 1001

	)

1910 
	#SQLITE_DBCONFIG_ENABLE_FKEY
 1002

	)

1911 
	#SQLITE_DBCONFIG_ENABLE_TRIGGER
 1003

	)

1922 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_exãnded_ªsu…_codes
(
sqlôe3
*, 
⁄off
);

1974 
SQLITE_API
 
sqlôe3_öt64
 
SQLITE_STDCALL
 
sqlôe3_œ°_ö£π_rowid
(
sqlôe3
*);

2027 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_ch™ges
(
sqlôe3
*);

2051 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_tŸÆ_ch™ges
(
sqlôe3
*);

2091 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_öãºu±
(
sqlôe3
*);

2126 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_com∂ëe
(c⁄° *
sql
);

2127 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_com∂ëe16
(c⁄° *
sql
);

2188 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_busy_h™dÀr
(
sqlôe3
*, (*)(*,), *);

2211 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_busy_timeout
(
sqlôe3
*, 
ms
);

2286 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_gë_èbÀ
(

2287 
sqlôe3
 *
db
,

2288 c⁄° *
zSql
,

2289 ***
∑zResu…
,

2290 *
≤Row
,

2291 *
≤Cﬁumn
,

2292 **
pzEºmsg


2294 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_‰ì_èbÀ
(**
ªsu…
);

2400 
SQLITE_API
 *
SQLITE_CDECL
 
sqlôe3_m¥ötf
(const *,...);

2401 
SQLITE_API
 *
SQLITE_STDCALL
 
sqlôe3_vm¥ötf
(c⁄° *, 
va_li°
);

2402 
SQLITE_API
 *
SQLITE_CDECL
 
sqlôe3_¢¥ötf
(,*,const *, ...);

2403 
SQLITE_API
 *
SQLITE_STDCALL
 
sqlôe3_v¢¥ötf
(,*,c⁄° *, 
va_li°
);

2493 
SQLITE_API
 *
SQLITE_STDCALL
 
sqlôe3_mÆloc
();

2494 
SQLITE_API
 *
SQLITE_STDCALL
 
sqlôe3_mÆloc64
(
sqlôe3_uöt64
);

2495 
SQLITE_API
 *
SQLITE_STDCALL
 
sqlôe3_ªÆloc
(*, );

2496 
SQLITE_API
 *
SQLITE_STDCALL
 
sqlôe3_ªÆloc64
(*, 
sqlôe3_uöt64
);

2497 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_‰ì
(*);

2498 
SQLITE_API
 
sqlôe3_uöt64
 
SQLITE_STDCALL
 
sqlôe3_msize
(*);

2523 
SQLITE_API
 
sqlôe3_öt64
 
SQLITE_STDCALL
 
sqlôe3_mem‹y_u£d
();

2524 
SQLITE_API
 
sqlôe3_öt64
 
SQLITE_STDCALL
 
sqlôe3_mem‹y_highw©î
(
ª£tFœg
);

2547 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_øndom√ss
(
N
, *
P
);

2630 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_£t_auth‹izî
(

2631 
sqlôe3
*,

2632 (*
xAuth
)(*,,const *,const *,const *,const *),

2633 *
pU£rD©a


2648 
	#SQLITE_DENY
 1

	)

2649 
	#SQLITE_IGNORE
 2

	)

2671 
	#SQLITE_CREATE_INDEX
 1

	)

2672 
	#SQLITE_CREATE_TABLE
 2

	)

2673 
	#SQLITE_CREATE_TEMP_INDEX
 3

	)

2674 
	#SQLITE_CREATE_TEMP_TABLE
 4

	)

2675 
	#SQLITE_CREATE_TEMP_TRIGGER
 5

	)

2676 
	#SQLITE_CREATE_TEMP_VIEW
 6

	)

2677 
	#SQLITE_CREATE_TRIGGER
 7

	)

2678 
	#SQLITE_CREATE_VIEW
 8

	)

2679 
	#SQLITE_DELETE
 9

	)

2680 
	#SQLITE_DROP_INDEX
 10

	)

2681 
	#SQLITE_DROP_TABLE
 11

	)

2682 
	#SQLITE_DROP_TEMP_INDEX
 12

	)

2683 
	#SQLITE_DROP_TEMP_TABLE
 13

	)

2684 
	#SQLITE_DROP_TEMP_TRIGGER
 14

	)

2685 
	#SQLITE_DROP_TEMP_VIEW
 15

	)

2686 
	#SQLITE_DROP_TRIGGER
 16

	)

2687 
	#SQLITE_DROP_VIEW
 17

	)

2688 
	#SQLITE_INSERT
 18

	)

2689 
	#SQLITE_PRAGMA
 19

	)

2690 
	#SQLITE_READ
 20

	)

2691 
	#SQLITE_SELECT
 21

	)

2692 
	#SQLITE_TRANSACTION
 22

	)

2693 
	#SQLITE_UPDATE
 23

	)

2694 
	#SQLITE_ATTACH
 24

	)

2695 
	#SQLITE_DETACH
 25

	)

2696 
	#SQLITE_ALTER_TABLE
 26

	)

2697 
	#SQLITE_REINDEX
 27

	)

2698 
	#SQLITE_ANALYZE
 28

	)

2699 
	#SQLITE_CREATE_VTABLE
 29

	)

2700 
	#SQLITE_DROP_VTABLE
 30

	)

2701 
	#SQLITE_FUNCTION
 31

	)

2702 
	#SQLITE_SAVEPOINT
 32

	)

2703 
	#SQLITE_COPY
 0

	)

2704 
	#SQLITE_RECURSIVE
 33

	)

2735 
SQLITE_API
 *
SQLITE_STDCALL
 
sqlôe3_åa˚
(
sqlôe3
*, (*
xTø˚
)(*,const *), *);

2736 
SQLITE_API
 
SQLITE_EXPERIMENTAL
 *
SQLITE_STDCALL
 
sqlôe3_¥ofûe
(
sqlôe3
*,

2737 (*
xProfûe
)(*,c⁄° *,
sqlôe3_uöt64
), *);

2771 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_¥ogªss_h™dÀr
(
sqlôe3
*, , (*)(*), *);

3000 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_›í
(

3001 c⁄° *
fûíame
,

3002 
sqlôe3
 **
µDb


3004 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_›í16
(

3005 c⁄° *
fûíame
,

3006 
sqlôe3
 **
µDb


3008 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_›í_v2
(

3009 c⁄° *
fûíame
,

3010 
sqlôe3
 **
µDb
,

3011 
Êags
,

3012 c⁄° *
zVfs


3054 
SQLITE_API
 c⁄° *
SQLITE_STDCALL
 
sqlôe3_uri_∑ømëî
(c⁄° *
zFûíame
, c⁄° *
zP¨am
);

3055 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_uri_boﬁón
(c⁄° *
zFûe
, c⁄° *
zP¨am
, 
bDeÁu…
);

3056 
SQLITE_API
 
sqlôe3_öt64
 
SQLITE_STDCALL
 
sqlôe3_uri_öt64
(const *, const *, sqlite3_int64);

3100 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_îrcode
(
sqlôe3
 *
db
);

3101 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_exãnded_îrcode
(
sqlôe3
 *
db
);

3102 
SQLITE_API
 c⁄° *
SQLITE_STDCALL
 
sqlôe3_îrmsg
(
sqlôe3
*);

3103 
SQLITE_API
 c⁄° *
SQLITE_STDCALL
 
sqlôe3_îrmsg16
(
sqlôe3
*);

3104 
SQLITE_API
 c⁄° *
SQLITE_STDCALL
 
sqlôe3_îr°r
();

3130 
sqlôe3_°mt
 
	tsqlôe3_°mt
;

3172 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_limô
(
sqlôe3
*, 
id
, 
√wVÆ
);

3230 
	#SQLITE_LIMIT_LENGTH
 0

	)

3231 
	#SQLITE_LIMIT_SQL_LENGTH
 1

	)

3232 
	#SQLITE_LIMIT_COLUMN
 2

	)

3233 
	#SQLITE_LIMIT_EXPR_DEPTH
 3

	)

3234 
	#SQLITE_LIMIT_COMPOUND_SELECT
 4

	)

3235 
	#SQLITE_LIMIT_VDBE_OP
 5

	)

3236 
	#SQLITE_LIMIT_FUNCTION_ARG
 6

	)

3237 
	#SQLITE_LIMIT_ATTACHED
 7

	)

3238 
	#SQLITE_LIMIT_LIKE_PATTERN_LENGTH
 8

	)

3239 
	#SQLITE_LIMIT_VARIABLE_NUMBER
 9

	)

3240 
	#SQLITE_LIMIT_TRIGGER_DEPTH
 10

	)

3241 
	#SQLITE_LIMIT_WORKER_THREADS
 11

	)

3324 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_¥ï¨e
(

3325 
sqlôe3
 *
db
,

3326 c⁄° *
zSql
,

3327 
nByã
,

3328 
sqlôe3_°mt
 **
µStmt
,

3329 c⁄° **
pzTaû


3331 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_¥ï¨e_v2
(

3332 
sqlôe3
 *
db
,

3333 c⁄° *
zSql
,

3334 
nByã
,

3335 
sqlôe3_°mt
 **
µStmt
,

3336 c⁄° **
pzTaû


3338 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_¥ï¨e16
(

3339 
sqlôe3
 *
db
,

3340 c⁄° *
zSql
,

3341 
nByã
,

3342 
sqlôe3_°mt
 **
µStmt
,

3343 c⁄° **
pzTaû


3345 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_¥ï¨e16_v2
(

3346 
sqlôe3
 *
db
,

3347 c⁄° *
zSql
,

3348 
nByã
,

3349 
sqlôe3_°mt
 **
µStmt
,

3350 c⁄° **
pzTaû


3361 
SQLITE_API
 c⁄° *
SQLITE_STDCALL
 
sqlôe3_sql
(
sqlôe3_°mt
 *
pStmt
);

3393 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_°mt_ªad⁄ly
(
sqlôe3_°mt
 *
pStmt
);

3414 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_°mt_busy
(
sqlôe3_°mt
*);

3455 
Mem
 
	tsqlôe3_vÆue
;

3469 
sqlôe3_c⁄ãxt
 
	tsqlôe3_c⁄ãxt
;

3578 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_böd_blob
(
sqlôe3_°mt
*, , c⁄° *, 
n
, (*)(*));

3579 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_böd_blob64
(
sqlôe3_°mt
*, , c⁄° *, 
sqlôe3_uöt64
,

3581 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_böd_doubÀ
(
sqlôe3_°mt
*, , );

3582 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_böd_öt
(
sqlôe3_°mt
*, , );

3583 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_böd_öt64
(
sqlôe3_°mt
*, , 
sqlôe3_öt64
);

3584 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_böd_nuŒ
(
sqlôe3_°mt
*, );

3585 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_böd_ãxt
(
sqlôe3_°mt
*,,const *,,(*)(*));

3586 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_böd_ãxt16
(
sqlôe3_°mt
*, , const *, , (*)(*));

3587 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_böd_ãxt64
(
sqlôe3_°mt
*, , c⁄° *, 
sqlôe3_uöt64
,

3588 (*)(*), 
ícodög
);

3589 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_böd_vÆue
(
sqlôe3_°mt
*, , c⁄° 
sqlôe3_vÆue
*);

3590 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_böd_zîoblob
(
sqlôe3_°mt
*, , 
n
);

3591 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_böd_zîoblob64
(
sqlôe3_°mt
*, , 
sqlôe3_uöt64
);

3612 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_böd_∑ømëî_cou¡
(
sqlôe3_°mt
*);

3640 
SQLITE_API
 c⁄° *
SQLITE_STDCALL
 
sqlôe3_böd_∑ømëî_«me
(
sqlôe3_°mt
*, );

3657 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_böd_∑ømëî_ödex
(
sqlôe3_°mt
*, c⁄° *
zName
);

3667 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_˛ór_bödögs
(
sqlôe3_°mt
*);

3679 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_cﬁumn_cou¡
(
sqlôe3_°mt
 *
pStmt
);

3708 
SQLITE_API
 c⁄° *
SQLITE_STDCALL
 
sqlôe3_cﬁumn_«me
(
sqlôe3_°mt
*, 
N
);

3709 
SQLITE_API
 c⁄° *
SQLITE_STDCALL
 
sqlôe3_cﬁumn_«me16
(
sqlôe3_°mt
*, 
N
);

3757 
SQLITE_API
 c⁄° *
SQLITE_STDCALL
 
sqlôe3_cﬁumn_d©aba£_«me
(
sqlôe3_°mt
*,);

3758 
SQLITE_API
 c⁄° *
SQLITE_STDCALL
 
sqlôe3_cﬁumn_d©aba£_«me16
(
sqlôe3_°mt
*,);

3759 
SQLITE_API
 c⁄° *
SQLITE_STDCALL
 
sqlôe3_cﬁumn_èbÀ_«me
(
sqlôe3_°mt
*,);

3760 
SQLITE_API
 c⁄° *
SQLITE_STDCALL
 
sqlôe3_cﬁumn_èbÀ_«me16
(
sqlôe3_°mt
*,);

3761 
SQLITE_API
 c⁄° *
SQLITE_STDCALL
 
sqlôe3_cﬁumn_‹igö_«me
(
sqlôe3_°mt
*,);

3762 
SQLITE_API
 c⁄° *
SQLITE_STDCALL
 
sqlôe3_cﬁumn_‹igö_«me16
(
sqlôe3_°mt
*,);

3794 
SQLITE_API
 c⁄° *
SQLITE_STDCALL
 
sqlôe3_cﬁumn_de˛ty≥
(
sqlôe3_°mt
*,);

3795 
SQLITE_API
 c⁄° *
SQLITE_STDCALL
 
sqlôe3_cﬁumn_de˛ty≥16
(
sqlôe3_°mt
*,);

3875 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_°ï
(
sqlôe3_°mt
*);

3896 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_d©a_cou¡
(
sqlôe3_°mt
 *
pStmt
);

3919 
	#SQLITE_INTEGER
 1

	)

3920 
	#SQLITE_FLOAT
 2

	)

3921 
	#SQLITE_BLOB
 4

	)

3922 
	#SQLITE_NULL
 5

	)

3923 #ifde‡
SQLITE_TEXT


3924 #unde‡
SQLITE_TEXT


3926 
	#SQLITE_TEXT
 3

	)

3928 
	#SQLITE3_TEXT
 3

	)

4086 
SQLITE_API
 c⁄° *
SQLITE_STDCALL
 
sqlôe3_cﬁumn_blob
(
sqlôe3_°mt
*, 
iCﬁ
);

4087 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_cﬁumn_byãs
(
sqlôe3_°mt
*, 
iCﬁ
);

4088 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_cﬁumn_byãs16
(
sqlôe3_°mt
*, 
iCﬁ
);

4089 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_cﬁumn_doubÀ
(
sqlôe3_°mt
*, 
iCﬁ
);

4090 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_cﬁumn_öt
(
sqlôe3_°mt
*, 
iCﬁ
);

4091 
SQLITE_API
 
sqlôe3_öt64
 
SQLITE_STDCALL
 
sqlôe3_cﬁumn_öt64
(
sqlôe3_°mt
*, 
iCﬁ
);

4092 
SQLITE_API
 c⁄° *
SQLITE_STDCALL
 
sqlôe3_cﬁumn_ãxt
(
sqlôe3_°mt
*, 
iCﬁ
);

4093 
SQLITE_API
 c⁄° *
SQLITE_STDCALL
 
sqlôe3_cﬁumn_ãxt16
(
sqlôe3_°mt
*, 
iCﬁ
);

4094 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_cﬁumn_ty≥
(
sqlôe3_°mt
*, 
iCﬁ
);

4095 
SQLITE_API
 
sqlôe3_vÆue
 *
SQLITE_STDCALL
 
sqlôe3_cﬁumn_vÆue
(
sqlôe3_°mt
*, 
iCﬁ
);

4123 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_föÆize
(
sqlôe3_°mt
 *
pStmt
);

4150 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_ª£t
(
sqlôe3_°mt
 *
pStmt
);

4250 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_¸óã_fun˘i⁄
(

4251 
sqlôe3
 *
db
,

4252 c⁄° *
zFun˘i⁄Name
,

4253 
nArg
,

4254 
eTextRï
,

4255 *
pAµ
,

4256 (*
xFunc
)(
sqlôe3_c⁄ãxt
*,,
sqlôe3_vÆue
**),

4257 (*
xSãp
)(
sqlôe3_c⁄ãxt
*,,
sqlôe3_vÆue
**),

4258 (*
xFöÆ
)(
sqlôe3_c⁄ãxt
*)

4260 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_¸óã_fun˘i⁄16
(

4261 
sqlôe3
 *
db
,

4262 c⁄° *
zFun˘i⁄Name
,

4263 
nArg
,

4264 
eTextRï
,

4265 *
pAµ
,

4266 (*
xFunc
)(
sqlôe3_c⁄ãxt
*,,
sqlôe3_vÆue
**),

4267 (*
xSãp
)(
sqlôe3_c⁄ãxt
*,,
sqlôe3_vÆue
**),

4268 (*
xFöÆ
)(
sqlôe3_c⁄ãxt
*)

4270 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_¸óã_fun˘i⁄_v2
(

4271 
sqlôe3
 *
db
,

4272 c⁄° *
zFun˘i⁄Name
,

4273 
nArg
,

4274 
eTextRï
,

4275 *
pAµ
,

4276 (*
xFunc
)(
sqlôe3_c⁄ãxt
*,,
sqlôe3_vÆue
**),

4277 (*
xSãp
)(
sqlôe3_c⁄ãxt
*,,
sqlôe3_vÆue
**),

4278 (*
xFöÆ
)(
sqlôe3_c⁄ãxt
*),

4279 (*
xDe°roy
)(*)

4288 
	#SQLITE_UTF8
 1

	)

4289 
	#SQLITE_UTF16LE
 2

	)

4290 
	#SQLITE_UTF16BE
 3

	)

4291 
	#SQLITE_UTF16
 4

	)

4292 
	#SQLITE_ANY
 5

	)

4293 
	#SQLITE_UTF16_ALIGNED
 8

	)

4303 
	#SQLITE_DETERMINISTIC
 0x800

	)

4315 #i‚de‡
SQLITE_OMIT_DEPRECATED


4316 
SQLITE_API
 
SQLITE_DEPRECATED
 
SQLITE_STDCALL
 
sqlôe3_aggªg©e_cou¡
(
sqlôe3_c⁄ãxt
*);

4317 
SQLITE_API
 
SQLITE_DEPRECATED
 
SQLITE_STDCALL
 
sqlôe3_expúed
(
sqlôe3_°mt
*);

4318 
SQLITE_API
 
SQLITE_DEPRECATED
 
SQLITE_STDCALL
 
sqlôe3_å™s„r_bödögs
(
sqlôe3_°mt
*, sqlite3_stmt*);

4319 
SQLITE_API
 
SQLITE_DEPRECATED
 
SQLITE_STDCALL
 
sqlôe3_globÆ_ªcovî
();

4320 
SQLITE_API
 
SQLITE_DEPRECATED
 
SQLITE_STDCALL
 
sqlôe3_thªad_˛ónup
();

4321 
SQLITE_API
 
SQLITE_DEPRECATED
 
SQLITE_STDCALL
 
sqlôe3_mem‹y_Æ¨m
((*)(*,
sqlôe3_öt64
,),

4322 *,
sqlôe3_öt64
);

4371 
SQLITE_API
 c⁄° *
SQLITE_STDCALL
 
sqlôe3_vÆue_blob
(
sqlôe3_vÆue
*);

4372 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_vÆue_byãs
(
sqlôe3_vÆue
*);

4373 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_vÆue_byãs16
(
sqlôe3_vÆue
*);

4374 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_vÆue_doubÀ
(
sqlôe3_vÆue
*);

4375 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_vÆue_öt
(
sqlôe3_vÆue
*);

4376 
SQLITE_API
 
sqlôe3_öt64
 
SQLITE_STDCALL
 
sqlôe3_vÆue_öt64
(
sqlôe3_vÆue
*);

4377 
SQLITE_API
 c⁄° *
SQLITE_STDCALL
 
sqlôe3_vÆue_ãxt
(
sqlôe3_vÆue
*);

4378 
SQLITE_API
 c⁄° *
SQLITE_STDCALL
 
sqlôe3_vÆue_ãxt16
(
sqlôe3_vÆue
*);

4379 
SQLITE_API
 c⁄° *
SQLITE_STDCALL
 
sqlôe3_vÆue_ãxt16À
(
sqlôe3_vÆue
*);

4380 
SQLITE_API
 c⁄° *
SQLITE_STDCALL
 
sqlôe3_vÆue_ãxt16be
(
sqlôe3_vÆue
*);

4381 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_vÆue_ty≥
(
sqlôe3_vÆue
*);

4382 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_vÆue_numîic_ty≥
(
sqlôe3_vÆue
*);

4398 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_vÆue_subty≥
(
sqlôe3_vÆue
*);

4414 
SQLITE_API
 
sqlôe3_vÆue
 *
SQLITE_STDCALL
 
sqlôe3_vÆue_dup
(const sqlite3_value*);

4415 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_vÆue_‰ì
(
sqlôe3_vÆue
*);

4460 
SQLITE_API
 *
SQLITE_STDCALL
 
sqlôe3_aggªg©e_c⁄ãxt
(
sqlôe3_c⁄ãxt
*, 
nByãs
);

4475 
SQLITE_API
 *
SQLITE_STDCALL
 
sqlôe3_u£r_d©a
(
sqlôe3_c⁄ãxt
*);

4487 
SQLITE_API
 
sqlôe3
 *
SQLITE_STDCALL
 
sqlôe3_c⁄ãxt_db_h™dÀ
(
sqlôe3_c⁄ãxt
*);

4540 
SQLITE_API
 *
SQLITE_STDCALL
 
sqlôe3_gë_auxd©a
(
sqlôe3_c⁄ãxt
*, 
N
);

4541 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_£t_auxd©a
(
sqlôe3_c⁄ãxt
*, 
N
, *, (*)(*));

4558 (*
sqlôe3_de°ru˘‹_ty≥
)(*);

4559 
	#SQLITE_STATIC
 ((
sqlôe3_de°ru˘‹_ty≥
)0)

	)

4560 
	#SQLITE_TRANSIENT
 ((
sqlôe3_de°ru˘‹_ty≥
)-1)

	)

4677 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_ªsu…_blob
(
sqlôe3_c⁄ãxt
*, const *, , (*)(*));

4678 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_ªsu…_blob64
(
sqlôe3_c⁄ãxt
*,const *,

4679 
sqlôe3_uöt64
,(*)(*));

4680 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_ªsu…_doubÀ
(
sqlôe3_c⁄ãxt
*, );

4681 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_ªsu…_îr‹
(
sqlôe3_c⁄ãxt
*, const *, );

4682 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_ªsu…_îr‹16
(
sqlôe3_c⁄ãxt
*, const *, );

4683 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_ªsu…_îr‹_toobig
(
sqlôe3_c⁄ãxt
*);

4684 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_ªsu…_îr‹_nomem
(
sqlôe3_c⁄ãxt
*);

4685 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_ªsu…_îr‹_code
(
sqlôe3_c⁄ãxt
*, );

4686 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_ªsu…_öt
(
sqlôe3_c⁄ãxt
*, );

4687 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_ªsu…_öt64
(
sqlôe3_c⁄ãxt
*, 
sqlôe3_öt64
);

4688 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_ªsu…_nuŒ
(
sqlôe3_c⁄ãxt
*);

4689 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_ªsu…_ãxt
(
sqlôe3_c⁄ãxt
*, const *, , (*)(*));

4690 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_ªsu…_ãxt64
(
sqlôe3_c⁄ãxt
*, c⁄° *,
sqlôe3_uöt64
,

4691 (*)(*), 
ícodög
);

4692 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_ªsu…_ãxt16
(
sqlôe3_c⁄ãxt
*, const *, , (*)(*));

4693 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_ªsu…_ãxt16À
(
sqlôe3_c⁄ãxt
*, const *, ,(*)(*));

4694 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_ªsu…_ãxt16be
(
sqlôe3_c⁄ãxt
*, const *, ,(*)(*));

4695 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_ªsu…_vÆue
(
sqlôe3_c⁄ãxt
*, 
sqlôe3_vÆue
*);

4696 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_ªsu…_zîoblob
(
sqlôe3_c⁄ãxt
*, 
n
);

4697 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_ªsu…_zîoblob64
(
sqlôe3_c⁄ãxt
*, 
sqlôe3_uöt64
 
n
);

4712 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_ªsu…_subty≥
(
sqlôe3_c⁄ãxt
*,);

4794 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_¸óã_cﬁœti⁄
(

4795 
sqlôe3
*,

4796 c⁄° *
zName
,

4797 
eTextRï
,

4798 *
pArg
,

4799 (*
xCom∑ª
)(*,,const *,,const *)

4801 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_¸óã_cﬁœti⁄_v2
(

4802 
sqlôe3
*,

4803 c⁄° *
zName
,

4804 
eTextRï
,

4805 *
pArg
,

4806 (*
xCom∑ª
)(*,,const *,,const *),

4807 (*
xDe°roy
)(*)

4809 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_¸óã_cﬁœti⁄16
(

4810 
sqlôe3
*,

4811 c⁄° *
zName
,

4812 
eTextRï
,

4813 *
pArg
,

4814 (*
xCom∑ª
)(*,,const *,,const *)

4844 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_cﬁœti⁄_√eded
(

4845 
sqlôe3
*,

4847 (*)(*,
sqlôe3
*,
eTextRï
,const *)

4849 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_cﬁœti⁄_√eded16
(

4850 
sqlôe3
*,

4852 (*)(*,
sqlôe3
*,
eTextRï
,const *)

4855 #ifde‡
SQLITE_HAS_CODEC


4863 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_key
(

4864 
sqlôe3
 *
db
,

4865 c⁄° *
pKey
, 
nKey


4867 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_key_v2
(

4868 
sqlôe3
 *
db
,

4869 c⁄° *
zDbName
,

4870 c⁄° *
pKey
, 
nKey


4881 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_ªkey
(

4882 
sqlôe3
 *
db
,

4883 c⁄° *
pKey
, 
nKey


4885 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_ªkey_v2
(

4886 
sqlôe3
 *
db
,

4887 c⁄° *
zDbName
,

4888 c⁄° *
pKey
, 
nKey


4895 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_a˘iv©e_£e
(

4896 c⁄° *
zPassPhø£


4900 #ifde‡
SQLITE_ENABLE_CEROD


4905 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_a˘iv©e_˚rod
(

4906 c⁄° *
zPassPhø£


4927 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_¶ìp
();

4985 
SQLITE_API
 
SQLITE_EXTERN
 *
sqlôe3_ãmp_dúe˘‹y
;

5022 
SQLITE_API
 
SQLITE_EXTERN
 *
sqlôe3_d©a_dúe˘‹y
;

5046 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_gë_autocommô
(
sqlôe3
*);

5059 
SQLITE_API
 
sqlôe3
 *
SQLITE_STDCALL
 
sqlôe3_db_h™dÀ
(
sqlôe3_°mt
*);

5076 
SQLITE_API
 c⁄° *
SQLITE_STDCALL
 
sqlôe3_db_fûíame
(
sqlôe3
 *
db
, c⁄° *
zDbName
);

5086 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_db_ªad⁄ly
(
sqlôe3
 *
db
, c⁄° *
zDbName
);

5102 
SQLITE_API
 
sqlôe3_°mt
 *
SQLITE_STDCALL
 
sqlôe3_√xt_°mt
(
sqlôe3
 *
pDb
, sqlôe3_°mà*
pStmt
);

5151 
SQLITE_API
 *
SQLITE_STDCALL
 
sqlôe3_commô_hook
(
sqlôe3
*, (*)(*), *);

5152 
SQLITE_API
 *
SQLITE_STDCALL
 
sqlôe3_rﬁlback_hook
(
sqlôe3
*, (*)(*), *);

5203 
SQLITE_API
 *
SQLITE_STDCALL
 
sqlôe3_upd©e_hook
(

5204 
sqlôe3
*,

5205 (*)(*,,c⁄° *,c⁄° *,
sqlôe3_öt64
),

5243 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_íabÀ_sh¨ed_ˇche
();

5259 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_ªÀa£_mem‹y
();

5273 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_db_ªÀa£_mem‹y
(
sqlôe3
*);

5325 
SQLITE_API
 
sqlôe3_öt64
 
SQLITE_STDCALL
 
sqlôe3_so·_hóp_limô64
(sqlôe3_öt64 
N
);

5336 
SQLITE_API
 
SQLITE_DEPRECATED
 
SQLITE_STDCALL
 
sqlôe3_so·_hóp_limô
(
N
);

5406 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_èbÀ_cﬁumn_mëad©a
(

5407 
sqlôe3
 *
db
,

5408 c⁄° *
zDbName
,

5409 c⁄° *
zTabÀName
,

5410 c⁄° *
zCﬁumnName
,

5411 c⁄° **
pzD©aTy≥
,

5412 c⁄° **
pzCﬁlSeq
,

5413 *
pNŸNuŒ
,

5414 *
pPrim¨yKey
,

5415 *
pAutoöc


5453 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_lﬂd_exãnsi⁄
(

5454 
sqlôe3
 *
db
,

5455 c⁄° *
zFûe
,

5456 c⁄° *
zProc
,

5457 **
pzEºMsg


5474 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_íabÀ_lﬂd_exãnsi⁄
(
sqlôe3
 *
db
, 
⁄off
);

5512 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_auto_exãnsi⁄
((*
xE¡ryPoöt
)());

5524 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_ˇn˚l_auto_exãnsi⁄
((*
xE¡ryPoöt
)());

5532 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_ª£t_auto_exãnsi⁄
();

5546 
sqlôe3_vèb
 
	tsqlôe3_vèb
;

5547 
sqlôe3_ödex_öfo
 
	tsqlôe3_ödex_öfo
;

5548 
sqlôe3_vèb_curs‹
 
	tsqlôe3_vèb_curs‹
;

5549 
sqlôe3_moduÀ
 
	tsqlôe3_moduÀ
;

5567 
	ssqlôe3_moduÀ
 {

5568 
iVîsi⁄
;

5569 (*
xCª©e
)(
sqlôe3
*, *
pAux
,

5570 
¨gc
, c⁄° *c⁄°*
¨gv
,

5571 
sqlôe3_vèb
 **
µVTab
, **);

5572 (*
xC⁄√˘
)(
sqlôe3
*, *
pAux
,

5573 
¨gc
, c⁄° *c⁄°*
¨gv
,

5574 
sqlôe3_vèb
 **
µVTab
, **);

5575 (*
xBe°Index
)(
sqlôe3_vèb
 *
pVTab
, 
sqlôe3_ödex_öfo
*);

5576 (*
xDisc⁄√˘
)(
sqlôe3_vèb
 *
pVTab
);

5577 (*
xDe°roy
)(
sqlôe3_vèb
 *
pVTab
);

5578 (*
xO≥n
)(
sqlôe3_vèb
 *
pVTab
, 
sqlôe3_vèb_curs‹
 **
µCurs‹
);

5579 (*
xClo£
)(
sqlôe3_vèb_curs‹
*);

5580 (*
xFûãr
)(
sqlôe3_vèb_curs‹
*, 
idxNum
, c⁄° *
idxSå
,

5581 
¨gc
, 
sqlôe3_vÆue
 **
¨gv
);

5582 (*
xNext
)(
sqlôe3_vèb_curs‹
*);

5583 (*
xEof
)(
sqlôe3_vèb_curs‹
*);

5584 (*
xCﬁumn
)(
sqlôe3_vèb_curs‹
*, 
sqlôe3_c⁄ãxt
*, );

5585 (*
xRowid
)(
sqlôe3_vèb_curs‹
*, 
sqlôe3_öt64
 *
pRowid
);

5586 (*
xUpd©e
)(
sqlôe3_vèb
 *, , 
sqlôe3_vÆue
 **, 
sqlôe3_öt64
 *);

5587 (*
xBegö
)(
sqlôe3_vèb
 *
pVTab
);

5588 (*
xSync
)(
sqlôe3_vèb
 *
pVTab
);

5589 (*
xCommô
)(
sqlôe3_vèb
 *
pVTab
);

5590 (*
xRﬁlback
)(
sqlôe3_vèb
 *
pVTab
);

5591 (*
xFödFun˘i⁄
)(
sqlôe3_vèb
 *
pVèb
, 
nArg
, c⁄° *
zName
,

5592 (**
pxFunc
)(
sqlôe3_c⁄ãxt
*,,
sqlôe3_vÆue
**),

5593 **
µArg
);

5594 (*
xRíame
)(
sqlôe3_vèb
 *
pVèb
, c⁄° *
zNew
);

5597 (*
xSavïoöt
)(
sqlôe3_vèb
 *
pVTab
, );

5598 (*
xRñó£
)(
sqlôe3_vèb
 *
pVTab
, );

5599 (*
xRﬁlbackTo
)(
sqlôe3_vèb
 *
pVTab
, );

5696 
	ssqlôe3_ödex_öfo
 {

5698 
nC⁄°øöt
;

5699 
	ssqlôe3_ödex_c⁄°øöt
 {

5700 
iCﬁumn
;

5701 
›
;

5702 
ußbÀ
;

5703 
iTîmOff£t
;

5704 } *
aC⁄°øöt
;

5705 
nOrdîBy
;

5706 
	ssqlôe3_ödex_‹dîby
 {

5707 
iCﬁumn
;

5708 
desc
;

5709 } *
aOrdîBy
;

5711 
	ssqlôe3_ödex_c⁄°øöt_ußge
 {

5712 
¨gvIndex
;

5713 
omô
;

5714 } *
aC⁄°øötUßge
;

5715 
idxNum
;

5716 *
idxSå
;

5717 
√edToFªeIdxSå
;

5718 
‹dîByC⁄sumed
;

5719 
e°im©edCo°
;

5721 
sqlôe3_öt64
 
e°im©edRows
;

5723 
idxFœgs
;

5725 
sqlôe3_uöt64
 
cﬁU£d
;

5731 
	#SQLITE_INDEX_SCAN_UNIQUE
 1

	)

5741 
	#SQLITE_INDEX_CONSTRAINT_EQ
 2

	)

5742 
	#SQLITE_INDEX_CONSTRAINT_GT
 4

	)

5743 
	#SQLITE_INDEX_CONSTRAINT_LE
 8

	)

5744 
	#SQLITE_INDEX_CONSTRAINT_LT
 16

	)

5745 
	#SQLITE_INDEX_CONSTRAINT_GE
 32

	)

5746 
	#SQLITE_INDEX_CONSTRAINT_MATCH
 64

	)

5747 
	#SQLITE_INDEX_CONSTRAINT_LIKE
 65

	)

5748 
	#SQLITE_INDEX_CONSTRAINT_GLOB
 66

	)

5749 
	#SQLITE_INDEX_CONSTRAINT_REGEXP
 67

	)

5777 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_¸óã_moduÀ
(

5778 
sqlôe3
 *
db
,

5779 c⁄° *
zName
,

5780 c⁄° 
sqlôe3_moduÀ
 *
p
,

5781 *
pClõ¡D©a


5783 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_¸óã_moduÀ_v2
(

5784 
sqlôe3
 *
db
,

5785 c⁄° *
zName
,

5786 c⁄° 
sqlôe3_moduÀ
 *
p
,

5787 *
pClõ¡D©a
,

5788 (*
xDe°roy
)(*)

5809 
	ssqlôe3_vèb
 {

5810 c⁄° 
sqlôe3_moduÀ
 *
pModuÀ
;

5811 
nRef
;

5812 *
zEºMsg
;

5833 
	ssqlôe3_vèb_curs‹
 {

5834 
sqlôe3_vèb
 *
pVèb
;

5846 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_de˛¨e_vèb
(
sqlôe3
*, c⁄° *
zSQL
);

5865 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_ovîlﬂd_fun˘i⁄
(
sqlôe3
*, c⁄° *
zFuncName
, 
nArg
);

5889 
sqlôe3_blob
 
	tsqlôe3_blob
;

5964 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_blob_›í
(

5965 
sqlôe3
*,

5966 c⁄° *
zDb
,

5967 c⁄° *
zTabÀ
,

5968 c⁄° *
zCﬁumn
,

5969 
sqlôe3_öt64
 
iRow
,

5970 
Êags
,

5971 
sqlôe3_blob
 **
µBlob


5997 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_blob_ª›í
(
sqlôe3_blob
 *, 
sqlôe3_öt64
);

6020 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_blob_˛o£
(
sqlôe3_blob
 *);

6036 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_blob_byãs
(
sqlôe3_blob
 *);

6065 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_blob_ªad
(
sqlôe3_blob
 *, *
Z
, 
N
, 
iOff£t
);

6107 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_blob_wrôe
(
sqlôe3_blob
 *, c⁄° *
z
, 
n
, 
iOff£t
);

6138 
SQLITE_API
 
sqlôe3_vfs
 *
SQLITE_STDCALL
 
sqlôe3_vfs_föd
(c⁄° *
zVfsName
);

6139 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_vfs_ªgi°î
(
sqlôe3_vfs
*, 
makeDÊt
);

6140 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_vfs_uƒegi°î
(
sqlôe3_vfs
*);

6256 
SQLITE_API
 
sqlôe3_muãx
 *
SQLITE_STDCALL
 
sqlôe3_muãx_Æloc
();

6257 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_muãx_‰ì
(
sqlôe3_muãx
*);

6258 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_muãx_íãr
(
sqlôe3_muãx
*);

6259 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_muãx_åy
(
sqlôe3_muãx
*);

6260 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_muãx_Àave
(
sqlôe3_muãx
*);

6327 
sqlôe3_muãx_mëhods
 
	tsqlôe3_muãx_mëhods
;

6328 
	ssqlôe3_muãx_mëhods
 {

6329 (*
xMuãxInô
)();

6330 (*
xMuãxEnd
)();

6331 
sqlôe3_muãx
 *(*
xMuãxAŒoc
)();

6332 (*
xMuãxFªe
)(
sqlôe3_muãx
 *);

6333 (*
xMuãxE¡î
)(
sqlôe3_muãx
 *);

6334 (*
xMuãxTry
)(
sqlôe3_muãx
 *);

6335 (*
xMuãxLóve
)(
sqlôe3_muãx
 *);

6336 (*
xMuãxHñd
)(
sqlôe3_muãx
 *);

6337 (*
xMuãxNŸhñd
)(
sqlôe3_muãx
 *);

6369 #i‚de‡
NDEBUG


6370 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_muãx_hñd
(
sqlôe3_muãx
*);

6371 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_muãx_nŸhñd
(
sqlôe3_muãx
*);

6384 
	#SQLITE_MUTEX_FAST
 0

	)

6385 
	#SQLITE_MUTEX_RECURSIVE
 1

	)

6386 
	#SQLITE_MUTEX_STATIC_MASTER
 2

	)

6387 
	#SQLITE_MUTEX_STATIC_MEM
 3

	)

6388 
	#SQLITE_MUTEX_STATIC_MEM2
 4

	)

6389 
	#SQLITE_MUTEX_STATIC_OPEN
 4

	)

6390 
	#SQLITE_MUTEX_STATIC_PRNG
 5

	)

6391 
	#SQLITE_MUTEX_STATIC_LRU
 6

	)

6392 
	#SQLITE_MUTEX_STATIC_LRU2
 7

	)

6393 
	#SQLITE_MUTEX_STATIC_PMEM
 7

	)

6394 
	#SQLITE_MUTEX_STATIC_APP1
 8

	)

6395 
	#SQLITE_MUTEX_STATIC_APP2
 9

	)

6396 
	#SQLITE_MUTEX_STATIC_APP3
 10

	)

6397 
	#SQLITE_MUTEX_STATIC_VFS1
 11

	)

6398 
	#SQLITE_MUTEX_STATIC_VFS2
 12

	)

6399 
	#SQLITE_MUTEX_STATIC_VFS3
 13

	)

6411 
SQLITE_API
 
sqlôe3_muãx
 *
SQLITE_STDCALL
 
sqlôe3_db_muãx
(
sqlôe3
*);

6446 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_fûe_c⁄åﬁ
(
sqlôe3
*, c⁄° *
zDbName
, 
›
, *);

6465 
SQLITE_API
 
SQLITE_CDECL
 
sqlôe3_ã°_c⁄åﬁ
(
›
, ...);

6478 
	#SQLITE_TESTCTRL_FIRST
 5

	)

6479 
	#SQLITE_TESTCTRL_PRNG_SAVE
 5

	)

6480 
	#SQLITE_TESTCTRL_PRNG_RESTORE
 6

	)

6481 
	#SQLITE_TESTCTRL_PRNG_RESET
 7

	)

6482 
	#SQLITE_TESTCTRL_BITVEC_TEST
 8

	)

6483 
	#SQLITE_TESTCTRL_FAULT_INSTALL
 9

	)

6484 
	#SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS
 10

	)

6485 
	#SQLITE_TESTCTRL_PENDING_BYTE
 11

	)

6486 
	#SQLITE_TESTCTRL_ASSERT
 12

	)

6487 
	#SQLITE_TESTCTRL_ALWAYS
 13

	)

6488 
	#SQLITE_TESTCTRL_RESERVE
 14

	)

6489 
	#SQLITE_TESTCTRL_OPTIMIZATIONS
 15

	)

6490 
	#SQLITE_TESTCTRL_ISKEYWORD
 16

	)

6491 
	#SQLITE_TESTCTRL_SCRATCHMALLOC
 17

	)

6492 
	#SQLITE_TESTCTRL_LOCALTIME_FAULT
 18

	)

6493 
	#SQLITE_TESTCTRL_EXPLAIN_STMT
 19

	)

6494 
	#SQLITE_TESTCTRL_NEVER_CORRUPT
 20

	)

6495 
	#SQLITE_TESTCTRL_VDBE_COVERAGE
 21

	)

6496 
	#SQLITE_TESTCTRL_BYTEORDER
 22

	)

6497 
	#SQLITE_TESTCTRL_ISINIT
 23

	)

6498 
	#SQLITE_TESTCTRL_SORTER_MMAP
 24

	)

6499 
	#SQLITE_TESTCTRL_IMPOSTER
 25

	)

6500 
	#SQLITE_TESTCTRL_LAST
 25

	)

6528 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_°©us
(
›
, *
pCuºít
, *
pHighw©î
, 
ª£tFœg
);

6529 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_°©us64
(

6530 
›
,

6531 
sqlôe3_öt64
 *
pCuºít
,

6532 
sqlôe3_öt64
 *
pHighw©î
,

6533 
ª£tFœg


6620 
	#SQLITE_STATUS_MEMORY_USED
 0

	)

6621 
	#SQLITE_STATUS_PAGECACHE_USED
 1

	)

6622 
	#SQLITE_STATUS_PAGECACHE_OVERFLOW
 2

	)

6623 
	#SQLITE_STATUS_SCRATCH_USED
 3

	)

6624 
	#SQLITE_STATUS_SCRATCH_OVERFLOW
 4

	)

6625 
	#SQLITE_STATUS_MALLOC_SIZE
 5

	)

6626 
	#SQLITE_STATUS_PARSER_STACK
 6

	)

6627 
	#SQLITE_STATUS_PAGECACHE_SIZE
 7

	)

6628 
	#SQLITE_STATUS_SCRATCH_SIZE
 8

	)

6629 
	#SQLITE_STATUS_MALLOC_COUNT
 9

	)

6654 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_db_°©us
(
sqlôe3
*, 
›
, *
pCur
, *
pHiwå
, 
ª£tFlg
);

6746 
	#SQLITE_DBSTATUS_LOOKASIDE_USED
 0

	)

6747 
	#SQLITE_DBSTATUS_CACHE_USED
 1

	)

6748 
	#SQLITE_DBSTATUS_SCHEMA_USED
 2

	)

6749 
	#SQLITE_DBSTATUS_STMT_USED
 3

	)

6750 
	#SQLITE_DBSTATUS_LOOKASIDE_HIT
 4

	)

6751 
	#SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE
 5

	)

6752 
	#SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL
 6

	)

6753 
	#SQLITE_DBSTATUS_CACHE_HIT
 7

	)

6754 
	#SQLITE_DBSTATUS_CACHE_MISS
 8

	)

6755 
	#SQLITE_DBSTATUS_CACHE_WRITE
 9

	)

6756 
	#SQLITE_DBSTATUS_DEFERRED_FKS
 10

	)

6757 
	#SQLITE_DBSTATUS_MAX
 10

	)

6784 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_°mt_°©us
(
sqlôe3_°mt
*, 
›
,
ª£tFlg
);

6823 
	#SQLITE_STMTSTATUS_FULLSCAN_STEP
 1

	)

6824 
	#SQLITE_STMTSTATUS_SORT
 2

	)

6825 
	#SQLITE_STMTSTATUS_AUTOINDEX
 3

	)

6826 
	#SQLITE_STMTSTATUS_VM_STEP
 4

	)

6839 
sqlôe3_pˇche
 
	tsqlôe3_pˇche
;

6851 
sqlôe3_pˇche_∑ge
 
	tsqlôe3_pˇche_∑ge
;

6852 
	ssqlôe3_pˇche_∑ge
 {

6853 *
pBuf
;

6854 *
pExåa
;

7016 
sqlôe3_pˇche_mëhods2
 
	tsqlôe3_pˇche_mëhods2
;

7017 
	ssqlôe3_pˇche_mëhods2
 {

7018 
iVîsi⁄
;

7019 *
pArg
;

7020 (*
xInô
)(*);

7021 (*
xShutdown
)(*);

7022 
sqlôe3_pˇche
 *(*
xCª©e
)(
szPage
, 
szExåa
, 
bPurgóbÀ
);

7023 (*
xCachesize
)(
sqlôe3_pˇche
*, 
nCachesize
);

7024 (*
xPagecou¡
)(
sqlôe3_pˇche
*);

7025 
sqlôe3_pˇche_∑ge
 *(*
xFëch
)(
sqlôe3_pˇche
*, 
key
, 
¸óãFœg
);

7026 (*
xU≈ö
)(
sqlôe3_pˇche
*, 
sqlôe3_pˇche_∑ge
*, 
disˇrd
);

7027 (*
xRekey
)(
sqlôe3_pˇche
*, 
sqlôe3_pˇche_∑ge
*,

7028 
ﬁdKey
, 
√wKey
);

7029 (*
xTrunˇã
)(
sqlôe3_pˇche
*, 
iLimô
);

7030 (*
xDe°roy
)(
sqlôe3_pˇche
*);

7031 (*
xShrök
)(
sqlôe3_pˇche
*);

7039 
sqlôe3_pˇche_mëhods
 
	tsqlôe3_pˇche_mëhods
;

7040 
	ssqlôe3_pˇche_mëhods
 {

7041 *
pArg
;

7042 (*
xInô
)(*);

7043 (*
xShutdown
)(*);

7044 
sqlôe3_pˇche
 *(*
xCª©e
)(
szPage
, 
bPurgóbÀ
);

7045 (*
xCachesize
)(
sqlôe3_pˇche
*, 
nCachesize
);

7046 (*
xPagecou¡
)(
sqlôe3_pˇche
*);

7047 *(*
xFëch
)(
sqlôe3_pˇche
*, 
key
, 
¸óãFœg
);

7048 (*
xU≈ö
)(
sqlôe3_pˇche
*, *, 
disˇrd
);

7049 (*
xRekey
)(
sqlôe3_pˇche
*, *, 
ﬁdKey
, 
√wKey
);

7050 (*
xTrunˇã
)(
sqlôe3_pˇche
*, 
iLimô
);

7051 (*
xDe°roy
)(
sqlôe3_pˇche
*);

7065 
sqlôe3_backup
 
	tsqlôe3_backup
;

7253 
SQLITE_API
 
sqlôe3_backup
 *
SQLITE_STDCALL
 
sqlôe3_backup_öô
(

7254 
sqlôe3
 *
pDe°
,

7255 c⁄° *
zDe°Name
,

7256 
sqlôe3
 *
pSour˚
,

7257 c⁄° *
zSour˚Name


7259 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_backup_°ï
(
sqlôe3_backup
 *
p
, 
nPage
);

7260 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_backup_föish
(
sqlôe3_backup
 *
p
);

7261 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_backup_ªmaöög
(
sqlôe3_backup
 *
p
);

7262 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_backup_∑gecou¡
(
sqlôe3_backup
 *
p
);

7379 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_u∆ock_nŸify
(

7380 
sqlôe3
 *
pBlocked
,

7381 (*
xNŸify
)(**
≠Arg
, 
nArg
),

7382 *
pNŸifyArg


7394 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_°ricmp
(const *, const *);

7395 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_°∫icmp
(const *, const *, );

7412 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_°rglob
(c⁄° *
zGlob
, c⁄° *
zSå
);

7435 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_°æike
(c⁄° *
zGlob
, c⁄° *
zSå
, 
cEsc
);

7458 
SQLITE_API
 
SQLITE_CDECL
 
sqlôe3_log
(
iEºCode
, c⁄° *
zF‹m©
, ...);

7494 
SQLITE_API
 *
SQLITE_STDCALL
 
sqlôe3_wÆ_hook
(

7495 
sqlôe3
*,

7496 (*)(*,
sqlôe3
*,const *,),

7529 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_wÆ_autocheckpoöt
(
sqlôe3
 *
db
, 
N
);

7551 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_wÆ_checkpoöt
(
sqlôe3
 *
db
, c⁄° *
zDb
);

7645 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_wÆ_checkpoöt_v2
(

7646 
sqlôe3
 *
db
,

7647 c⁄° *
zDb
,

7648 
eMode
,

7649 *
≤Log
,

7650 *
≤Ck±


7662 
	#SQLITE_CHECKPOINT_PASSIVE
 0

	)

7663 
	#SQLITE_CHECKPOINT_FULL
 1

	)

7664 
	#SQLITE_CHECKPOINT_RESTART
 2

	)

7665 
	#SQLITE_CHECKPOINT_TRUNCATE
 3

	)

7681 
SQLITE_API
 
SQLITE_CDECL
 
sqlôe3_vèb_c⁄fig
(
sqlôe3
*, 
›
, ...);

7722 
	#SQLITE_VTAB_CONSTRAINT_SUPPORT
 1

	)

7734 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_vèb_⁄_c⁄Êi˘
(
sqlôe3
 *);

7748 
	#SQLITE_ROLLBACK
 1

	)

7750 
	#SQLITE_FAIL
 3

	)

7752 
	#SQLITE_REPLACE
 5

	)

7801 
	#SQLITE_SCANSTAT_NLOOP
 0

	)

7802 
	#SQLITE_SCANSTAT_NVISIT
 1

	)

7803 
	#SQLITE_SCANSTAT_EST
 2

	)

7804 
	#SQLITE_SCANSTAT_NAME
 3

	)

7805 
	#SQLITE_SCANSTAT_EXPLAIN
 4

	)

7806 
	#SQLITE_SCANSTAT_SELECTID
 5

	)

7839 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_°mt_sˇn°©us
(

7840 
sqlôe3_°mt
 *
pStmt
,

7841 
idx
,

7842 
iSˇnSètusOp
,

7843 *
pOut


7855 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_°mt_sˇn°©us_ª£t
(
sqlôe3_°mt
*);

7887 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_db_ˇcheÊush
(
sqlôe3
*);

7915 
sqlôe3_¢≠shŸ
 
	tsqlôe3_¢≠shŸ
;

7937 
SQLITE_API
 
SQLITE_EXPERIMENTAL
 
SQLITE_STDCALL
 
sqlôe3_¢≠shŸ_gë
(

7938 
sqlôe3
 *
db
,

7939 c⁄° *
zSchema
,

7940 
sqlôe3_¢≠shŸ
 **
µS«pshŸ


7962 
SQLITE_API
 
SQLITE_EXPERIMENTAL
 
SQLITE_STDCALL
 
sqlôe3_¢≠shŸ_›í
(

7963 
sqlôe3
 *
db
,

7964 c⁄° *
zSchema
,

7965 
sqlôe3_¢≠shŸ
 *
pS«pshŸ


7979 
SQLITE_API
 
SQLITE_EXPERIMENTAL
 
SQLITE_STDCALL
 
sqlôe3_¢≠shŸ_‰ì
(
sqlôe3_¢≠shŸ
*);

7985 #ifde‡
SQLITE_OMIT_FLOATING_POINT


7989 #ifde‡
__˝lu•lus


8007 #i‚de‡
_SQLITE3RTREE_H_


8008 
	#_SQLITE3RTREE_H_


	)

8011 #ifde‡
__˝lu•lus


8015 
sqlôe3_πªe_geomëry
 
	tsqlôe3_πªe_geomëry
;

8016 
sqlôe3_πªe_quîy_öfo
 
	tsqlôe3_πªe_quîy_öfo
;

8021 #ifde‡
SQLITE_RTREE_INT_ONLY


8022 
sqlôe3_öt64
 
	tsqlôe3_πªe_dbl
;

8024 
	tsqlôe3_πªe_dbl
;

8033 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_πªe_geomëry_ˇŒback
(

8034 
sqlôe3
 *
db
,

8035 c⁄° *
zGeom
,

8036 (*
xGeom
)(
sqlôe3_πªe_geomëry
*, , 
sqlôe3_πªe_dbl
*,*),

8037 *
pC⁄ãxt


8045 
	ssqlôe3_πªe_geomëry
 {

8046 *
pC⁄ãxt
;

8047 
nP¨am
;

8048 
sqlôe3_πªe_dbl
 *
aP¨am
;

8049 *
pU£r
;

8050 (*
xDñU£r
)(*);

8059 
SQLITE_API
 
SQLITE_STDCALL
 
sqlôe3_πªe_quîy_ˇŒback
(

8060 
sqlôe3
 *
db
,

8061 c⁄° *
zQuîyFunc
,

8062 (*
xQuîyFunc
)(
sqlôe3_πªe_quîy_öfo
*),

8063 *
pC⁄ãxt
,

8064 (*
xDe°ru˘‹
)(*)

8077 
	ssqlôe3_πªe_quîy_öfo
 {

8078 *
pC⁄ãxt
;

8079 
nP¨am
;

8080 
sqlôe3_πªe_dbl
 *
aP¨am
;

8081 *
pU£r
;

8082 (*
xDñU£r
)(*);

8083 
sqlôe3_πªe_dbl
 *
aCo‹d
;

8084 *
™Queue
;

8085 
nCo‹d
;

8086 
iLevñ
;

8087 
mxLevñ
;

8088 
sqlôe3_öt64
 
iRowid
;

8089 
sqlôe3_πªe_dbl
 
rP¨ítSc‹e
;

8090 
eP¨ítWôhö
;

8091 
eWôhö
;

8092 
sqlôe3_πªe_dbl
 
rSc‹e
;

8094 
sqlôe3_vÆue
 **
≠SqlP¨am
;

8100 
	#NOT_WITHIN
 0

	)

8101 
	#PARTLY_WITHIN
 1

	)

8102 
	#FULLY_WITHIN
 2

	)

8105 #ifde‡
__˝lu•lus


8131 #i‚de‡
_FTS5_H


8132 
	#_FTS5_H


	)

8135 #ifde‡
__˝lu•lus


8146 
Fts5Exãnsi⁄Api
 
	tFts5Exãnsi⁄Api
;

8147 
Fts5C⁄ãxt
 
	tFts5C⁄ãxt
;

8148 
Fts5Phø£Iãr
 
	tFts5Phø£Iãr
;

8150 (*
·s5_exãnsi⁄_fun˘i⁄
)(

8151 c⁄° 
	tFts5Exãnsi⁄Api
 *
	tpApi
,

8152 
	tFts5C⁄ãxt
 *
	tpFts
,

8153 
	tsqlôe3_c⁄ãxt
 *
	tpCtx
,

8154 
	tnVÆ
,

8155 
	tsqlôe3_vÆue
 **
	t≠VÆ


8158 
	sFts5Phø£Iãr
 {

8159 c⁄° *
a
;

8160 c⁄° *
b
;

8376 
	sFts5Exãnsi⁄Api
 {

8377 
iVîsi⁄
;

8379 *(*
xU£rD©a
)(
Fts5C⁄ãxt
*);

8381 (*
xCﬁumnCou¡
)(
Fts5C⁄ãxt
*);

8382 (*
xRowCou¡
)(
Fts5C⁄ãxt
*, 
sqlôe3_öt64
 *
≤Row
);

8383 (*
xCﬁumnTŸÆSize
)(
Fts5C⁄ãxt
*, 
iCﬁ
, 
sqlôe3_öt64
 *
≤Tokí
);

8385 (*
xTokíize
)(
Fts5C⁄ãxt
*,

8386 c⁄° *
pText
, 
nText
,

8387 *
pCtx
,

8388 (*
xTokí
)(*, , const *, , , )

8391 (*
xPhø£Cou¡
)(
Fts5C⁄ãxt
*);

8392 (*
xPhø£Size
)(
Fts5C⁄ãxt
*, 
iPhø£
);

8394 (*
xIn°Cou¡
)(
Fts5C⁄ãxt
*, *
≤In°
);

8395 (*
xIn°
)(
Fts5C⁄ãxt
*, 
iIdx
, *
piPhø£
, *
piCﬁ
, *
piOff
);

8397 
sqlôe3_öt64
 (*
xRowid
)(
Fts5C⁄ãxt
*);

8398 (*
xCﬁumnText
)(
Fts5C⁄ãxt
*, 
iCﬁ
, c⁄° **
pz
, *
≤
);

8399 (*
xCﬁumnSize
)(
Fts5C⁄ãxt
*, 
iCﬁ
, *
≤Tokí
);

8401 (*
xQuîyPhø£
)(
Fts5C⁄ãxt
*, 
iPhø£
, *
pU£rD©a
,

8402 (*)(c⁄° 
Fts5Exãnsi⁄Api
*,
Fts5C⁄ãxt
*,*)

8404 (*
xSëAuxd©a
)(
Fts5C⁄ãxt
*, *
pAux
, (*
xDñëe
)(*));

8405 *(*
xGëAuxd©a
)(
Fts5C⁄ãxt
*, 
bCÀ¨
);

8407 (*
xPhø£Fú°
)(
Fts5C⁄ãxt
*, 
iPhø£
, 
Fts5Phø£Iãr
*, *, *);

8408 (*
xPhø£Next
)(
Fts5C⁄ãxt
*, 
Fts5Phø£Iãr
*, *
piCﬁ
, *
piOff
);

8410 (*
xPhø£Fú°Cﬁumn
)(
Fts5C⁄ãxt
*, 
iPhø£
, 
Fts5Phø£Iãr
*, *);

8411 (*
xPhø£NextCﬁumn
)(
Fts5C⁄ãxt
*, 
Fts5Phø£Iãr
*, *
piCﬁ
);

8610 
Fts5Tokíizî
 
	tFts5Tokíizî
;

8611 
·s5_tokíizî
 
	t·s5_tokíizî
;

8612 
	s·s5_tokíizî
 {

8613 (*
xCª©e
)(*, c⁄° **
azArg
, 
nArg
, 
Fts5Tokíizî
 **
µOut
);

8614 (*
xDñëe
)(
Fts5Tokíizî
*);

8615 (*
xTokíize
)(
Fts5Tokíizî
*,

8616 *
pCtx
,

8617 
Êags
,

8618 c⁄° *
pText
, 
nText
,

8619 (*
xTokí
)(

8620 *
pCtx
,

8621 
tÊags
,

8622 c⁄° *
pTokí
,

8623 
nTokí
,

8624 
iSèπ
,

8625 
iEnd


8631 
	#FTS5_TOKENIZE_QUERY
 0x0001

	)

8632 
	#FTS5_TOKENIZE_PREFIX
 0x0002

	)

8633 
	#FTS5_TOKENIZE_DOCUMENT
 0x0004

	)

8634 
	#FTS5_TOKENIZE_AUX
 0x0008

	)

8638 
	#FTS5_TOKEN_COLOCATED
 0x0001

	)

8647 
·s5_≠i
 
	t·s5_≠i
;

8648 
	s·s5_≠i
 {

8649 
iVîsi⁄
;

8652 (*
xCª©eTokíizî
)(

8653 
·s5_≠i
 *
pApi
,

8654 c⁄° *
zName
,

8655 *
pC⁄ãxt
,

8656 
·s5_tokíizî
 *
pTokíizî
,

8657 (*
xDe°roy
)(*)

8661 (*
xFödTokíizî
)(

8662 
·s5_≠i
 *
pApi
,

8663 c⁄° *
zName
,

8664 **
µC⁄ãxt
,

8665 
·s5_tokíizî
 *
pTokíizî


8669 (*
xCª©eFun˘i⁄
)(

8670 
·s5_≠i
 *
pApi
,

8671 c⁄° *
zName
,

8672 *
pC⁄ãxt
,

8673 
·s5_exãnsi⁄_fun˘i⁄
 
xFun˘i⁄
,

8674 (*
xDe°roy
)(*)

8682 #ifde‡
__˝lu•lus


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/wch¨.h
>

27 
	~<bôs/w‹dsize.h
>

34 #i‚de‡
__öt8_t_deföed


35 
	#__öt8_t_deföed


	)

36 sig√d 
	töt8_t
;

37 
	töt16_t
;

38 
	töt32_t
;

39 #i‡
__WORDSIZE
 == 64

40 
	töt64_t
;

42 
__exãnsi⁄__


43 
	töt64_t
;

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 #i‚de‡
__uöt32_t_deföed


51 
	tuöt32_t
;

52 
	#__uöt32_t_deföed


	)

54 #i‡
__WORDSIZE
 == 64

55 
	tuöt64_t
;

57 
__exãnsi⁄__


58 
	tuöt64_t
;

65 sig√d 
	töt_Àa°8_t
;

66 
	töt_Àa°16_t
;

67 
	töt_Àa°32_t
;

68 #i‡
__WORDSIZE
 == 64

69 
	töt_Àa°64_t
;

71 
__exãnsi⁄__


72 
	töt_Àa°64_t
;

76 
	tuöt_Àa°8_t
;

77 
	tuöt_Àa°16_t
;

78 
	tuöt_Àa°32_t
;

79 #i‡
__WORDSIZE
 == 64

80 
	tuöt_Àa°64_t
;

82 
__exãnsi⁄__


83 
	tuöt_Àa°64_t
;

90 sig√d 
	töt_Á°8_t
;

91 #i‡
__WORDSIZE
 == 64

92 
	töt_Á°16_t
;

93 
	töt_Á°32_t
;

94 
	töt_Á°64_t
;

96 
	töt_Á°16_t
;

97 
	töt_Á°32_t
;

98 
__exãnsi⁄__


99 
	töt_Á°64_t
;

103 
	tuöt_Á°8_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tuöt_Á°16_t
;

106 
	tuöt_Á°32_t
;

107 
	tuöt_Á°64_t
;

109 
	tuöt_Á°16_t
;

110 
	tuöt_Á°32_t
;

111 
__exãnsi⁄__


112 
	tuöt_Á°64_t
;

117 #i‡
__WORDSIZE
 == 64

118 #i‚de‡
__öçå_t_deföed


119 
	töçå_t
;

120 
	#__öçå_t_deföed


	)

122 
	tuöçå_t
;

124 #i‚de‡
__öçå_t_deföed


125 
	töçå_t
;

126 
	#__öçå_t_deföed


	)

128 
	tuöçå_t
;

133 #i‡
__WORDSIZE
 == 64

134 
	tötmax_t
;

135 
	tuötmax_t
;

137 
__exãnsi⁄__


138 
	tötmax_t
;

139 
__exãnsi⁄__


140 
	tuötmax_t
;

144 #i‡
__WORDSIZE
 == 64

145 
	#__INT64_C
(
c
Ë¯## 
L


	)

146 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

148 
	#__INT64_C
(
c
Ë¯## 
LL


	)

149 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

155 
	#INT8_MIN
 (-128)

	)

156 
	#INT16_MIN
 (-32767-1)

	)

157 
	#INT32_MIN
 (-2147483647-1)

	)

158 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

160 
	#INT8_MAX
 (127)

	)

161 
	#INT16_MAX
 (32767)

	)

162 
	#INT32_MAX
 (2147483647)

	)

163 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

166 
	#UINT8_MAX
 (255)

	)

167 
	#UINT16_MAX
 (65535)

	)

168 
	#UINT32_MAX
 (4294967295U)

	)

169 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

173 
	#INT_LEAST8_MIN
 (-128)

	)

174 
	#INT_LEAST16_MIN
 (-32767-1)

	)

175 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

176 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

178 
	#INT_LEAST8_MAX
 (127)

	)

179 
	#INT_LEAST16_MAX
 (32767)

	)

180 
	#INT_LEAST32_MAX
 (2147483647)

	)

181 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

184 
	#UINT_LEAST8_MAX
 (255)

	)

185 
	#UINT_LEAST16_MAX
 (65535)

	)

186 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

187 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

191 
	#INT_FAST8_MIN
 (-128)

	)

192 #i‡
__WORDSIZE
 == 64

193 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

194 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

196 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

197 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

199 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

201 
	#INT_FAST8_MAX
 (127)

	)

202 #i‡
__WORDSIZE
 == 64

203 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

204 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

206 
	#INT_FAST16_MAX
 (2147483647)

	)

207 
	#INT_FAST32_MAX
 (2147483647)

	)

209 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINT_FAST8_MAX
 (255)

	)

213 #i‡
__WORDSIZE
 == 64

214 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

215 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

217 
	#UINT_FAST16_MAX
 (4294967295U)

	)

218 
	#UINT_FAST32_MAX
 (4294967295U)

	)

220 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

224 #i‡
__WORDSIZE
 == 64

225 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

226 
	#INTPTR_MAX
 (9223372036854775807L)

	)

227 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

229 
	#INTPTR_MIN
 (-2147483647-1)

	)

230 
	#INTPTR_MAX
 (2147483647)

	)

231 
	#UINTPTR_MAX
 (4294967295U)

	)

236 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

238 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

241 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

247 #i‡
__WORDSIZE
 == 64

248 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

249 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

251 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

252 
	#PTRDIFF_MAX
 (2147483647)

	)

256 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

257 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

260 #i‡
__WORDSIZE
 == 64

261 
	#SIZE_MAX
 (18446744073709551615UL)

	)

263 #ifde‡
__WORDSIZE32_SIZE_ULONG


264 
	#SIZE_MAX
 (4294967295UL)

	)

266 
	#SIZE_MAX
 (4294967295U)

	)

271 #i‚de‡
WCHAR_MIN


273 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

274 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

278 
	#WINT_MIN
 (0u)

	)

279 
	#WINT_MAX
 (4294967295u)

	)

282 
	#INT8_C
(
c
Ë
	)
c

283 
	#INT16_C
(
c
Ë
	)
c

284 
	#INT32_C
(
c
Ë
	)
c

285 #i‡
__WORDSIZE
 == 64

286 
	#INT64_C
(
c
Ë¯## 
L


	)

288 
	#INT64_C
(
c
Ë¯## 
LL


	)

292 
	#UINT8_C
(
c
Ë
	)
c

293 
	#UINT16_C
(
c
Ë
	)
c

294 
	#UINT32_C
(
c
Ë¯## 
U


	)

295 #i‡
__WORDSIZE
 == 64

296 
	#UINT64_C
(
c
Ë¯## 
UL


	)

298 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

302 #i‡
__WORDSIZE
 == 64

303 
	#INTMAX_C
(
c
Ë¯## 
L


	)

304 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

306 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

307 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


25 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


26 
	#_STDIO_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	#__√ed_FILE


	)

37 
	#__√ed___FILE


	)

41 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
	g_IO_FILE
;

46 
__BEGIN_NAMESPACE_STD


48 
_IO_FILE
 
	tFILE
;

49 
	g__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_POSIX
 \

51 || 
deföed
 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

52 || 
deföed
 
__USE_POSIX2


53 
	$__USING_NAMESPACE_STD
(
FILE
)

56 
	#__FILE_deföed
 1

	)

58 #unde‡
__√ed_FILE


61 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


64 
_IO_FILE
 
	t__FILE
;

66 
	#____FILE_deföed
 1

	)

68 #unde‡
__√ed___FILE


71 #ifdef 
_STDIO_H


72 
	#_STDIO_USES_IOSTREAM


	)

74 
	~<libio.h
>

76 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


77 #ifde‡
__GNUC__


78 #i‚de‡
_VA_LIST_DEFINED


79 
_G_va_li°
 
	tva_li°
;

80 
	#_VA_LIST_DEFINED


	)

83 
	~<°d¨g.h
>

87 #ifde‡
__USE_XOPEN2K8


88 #i‚de‡
__off_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__off_t
 
	toff_t
;

92 
__off64_t
 
	toff_t
;

94 
	#__off_t_deföed


	)

96 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


97 
__off64_t
 
	toff64_t
;

98 
	#__off64_t_deföed


	)

101 #i‚de‡
__ssize_t_deföed


102 
__ssize_t
 
	tssize_t
;

103 
	#__ssize_t_deföed


	)

108 
__BEGIN_NAMESPACE_STD


109 #i‚de‡
__USE_FILE_OFFSET64


110 
_G_Âos_t
 
	tÂos_t
;

112 
_G_Âos64_t
 
	tÂos_t
;

114 
__END_NAMESPACE_STD


115 #ifde‡
__USE_LARGEFILE64


116 
_G_Âos64_t
 
	tÂos64_t
;

120 
	#_IOFBF
 0

	)

121 
	#_IOLBF
 1

	)

122 
	#_IONBF
 2

	)

126 #i‚de‡
BUFSIZ


127 
	#BUFSIZ
 
_IO_BUFSIZ


	)

133 #i‚de‡
EOF


134 
	#EOF
 (-1)

	)

140 
	#SEEK_SET
 0

	)

141 
	#SEEK_CUR
 1

	)

142 
	#SEEK_END
 2

	)

143 #ifde‡
__USE_GNU


144 
	#SEEK_DATA
 3

	)

145 
	#SEEK_HOLE
 4

	)

149 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


151 
	#P_tmpdú
 "/tmp"

	)

164 
	~<bôs/°dio_lim.h
>

168 
_IO_FILE
 *
°dö
;

169 
_IO_FILE
 *
°dout
;

170 
_IO_FILE
 *
°dîr
;

172 
	#°dö
 
°dö


	)

173 
	#°dout
 
°dout


	)

174 
	#°dîr
 
°dîr


	)

176 
__BEGIN_NAMESPACE_STD


178 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

180 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

181 
__END_NAMESPACE_STD


183 #ifde‡
__USE_ATFILE


185 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

186 c⁄° *
__√w
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


194 #i‚de‡
__USE_FILE_OFFSET64


195 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

197 #ifde‡
__REDIRECT


198 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

200 
	#tmpfûe
 
tmpfûe64


	)

204 #ifde‡
__USE_LARGEFILE64


205 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

209 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

210 
__END_NAMESPACE_STD


212 #ifde‡
__USE_MISC


215 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

219 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


227 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

228 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

232 
__BEGIN_NAMESPACE_STD


237 
	`f˛o£
 (
FILE
 *
__°ªam
);

242 
	`fÊush
 (
FILE
 *
__°ªam
);

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_MISC


252 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

255 #ifde‡
__USE_GNU


262 
	`f˛o£Æl
 ();

266 
__BEGIN_NAMESPACE_STD


267 #i‚de‡
__USE_FILE_OFFSET64


272 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

273 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

278 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

279 c⁄° *
__ª°ri˘
 
__modes
,

280 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

282 #ifde‡
__REDIRECT


283 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

284 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

285 
__wur
;

286 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

287 c⁄° *
__ª°ri˘
 
__modes
,

288 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

289 
__wur
;

291 
	#f›í
 
f›í64


	)

292 
	#‰e›í
 
‰e›í64


	)

295 
__END_NAMESPACE_STD


296 #ifde‡
__USE_LARGEFILE64


297 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

298 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

299 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

300 c⁄° *
__ª°ri˘
 
__modes
,

301 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

304 #ifdef 
__USE_POSIX


306 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

309 #ifdef 
__USE_GNU


312 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

313 c⁄° *
__ª°ri˘
 
__modes
,

314 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

317 #ifde‡
__USE_XOPEN2K8


319 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

320 
__THROW
 
__wur
;

325 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

329 
__BEGIN_NAMESPACE_STD


332 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

336 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

337 
__modes
, 
size_t
 
__n
Ë
__THROW
;

338 
__END_NAMESPACE_STD


340 #ifdef 
__USE_MISC


343 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

344 
size_t
 
__size
Ë
__THROW
;

347 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

351 
__BEGIN_NAMESPACE_STD


356 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

357 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

362 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

364 
	$•rötf
 (*
__ª°ri˘
 
__s
,

365 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

371 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

372 
_G_va_li°
 
__¨g
);

377 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

379 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

380 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

381 
__END_NAMESPACE_STD


383 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


384 
__BEGIN_NAMESPACE_C99


386 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

387 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

388 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

390 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

391 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

392 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

393 
__END_NAMESPACE_C99


396 #ifde‡
__USE_GNU


399 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

400 
_G_va_li°
 
__¨g
)

401 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

402 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

403 c⁄° *
__ª°ri˘
 
__fmt
, ...)

404 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

405 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

406 c⁄° *
__ª°ri˘
 
__fmt
, ...)

407 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

410 #ifde‡
__USE_XOPEN2K8


412 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

413 
_G_va_li°
 
__¨g
)

414 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

415 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

420 
__BEGIN_NAMESPACE_STD


425 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

426 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

431 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

434 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

436 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

437 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

438 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

439 #ifde‡
__REDIRECT


443 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

444 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

445 
__isoc99_fsˇnf
Ë
__wur
;

446 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_sˇnf
Ë
__wur
;

448 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

449 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

450 
__isoc99_ssˇnf
);

452 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

454 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

455 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

456 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

457 
	#fsˇnf
 
__isoc99_fsˇnf


	)

458 
	#sˇnf
 
__isoc99_sˇnf


	)

459 
	#ssˇnf
 
__isoc99_ssˇnf


	)

463 
__END_NAMESPACE_STD


465 #ifdef 
__USE_ISOC99


466 
__BEGIN_NAMESPACE_C99


471 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

472 
_G_va_li°
 
__¨g
)

473 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

479 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

480 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

483 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

484 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

485 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

487 #i‡!
deföed
 
__USE_GNU
 \

488 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

489 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

490 #ifde‡
__REDIRECT


494 
	`__REDIRECT
 (
vfsˇnf
,

495 (
FILE
 *
__ª°ri˘
 
__s
,

496 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

497 
__isoc99_vfsˇnf
)

498 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

499 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

500 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

501 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

502 
	`__REDIRECT_NTH
 (
vssˇnf
,

503 (c⁄° *
__ª°ri˘
 
__s
,

504 c⁄° *
__ª°ri˘
 
__f‹m©
,

505 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

506 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

508 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

509 c⁄° *
__ª°ri˘
 
__f‹m©
,

510 
_G_va_li°
 
__¨g
Ë
__wur
;

511 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

514 c⁄° *
__ª°ri˘
 
__f‹m©
,

515 
_G_va_li°
 
__¨g
Ë
__THROW
;

516 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

517 
	#vsˇnf
 
__isoc99_vsˇnf


	)

518 
	#vssˇnf
 
__isoc99_vssˇnf


	)

522 
__END_NAMESPACE_C99


526 
__BEGIN_NAMESPACE_STD


531 
	`fgëc
 (
FILE
 *
__°ªam
);

532 
	`gëc
 (
FILE
 *
__°ªam
);

538 
	`gëch¨
 ();

539 
__END_NAMESPACE_STD


543 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

545 #ifde‡
__USE_POSIX


550 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

551 
	`gëch¨_u∆ocked
 ();

554 #ifde‡
__USE_MISC


561 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

565 
__BEGIN_NAMESPACE_STD


573 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

574 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putch¨
 (
__c
);

581 
__END_NAMESPACE_STD


585 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

587 #ifde‡
__USE_MISC


594 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

597 #ifde‡
__USE_POSIX


602 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 
	`putch¨_u∆ocked
 (
__c
);

607 #i‡
deföed
 
__USE_MISC
 \

608 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

610 
	`gëw
 (
FILE
 *
__°ªam
);

613 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

617 
__BEGIN_NAMESPACE_STD


622 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

623 
__wur
;

625 #i‡!
deföed
 
__USE_ISOC11
 \

626 || (
deföed
 
__˝lu•lus
 && __cplusplus <= 201103L)

638 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

640 
__END_NAMESPACE_STD


642 #ifde‡
__USE_GNU


649 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

650 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

654 #ifdef 
__USE_XOPEN2K8


665 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

668 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

669 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

670 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

678 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

679 
size_t
 *
__ª°ri˘
 
__n
,

680 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

684 
__BEGIN_NAMESPACE_STD


689 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

695 
	`puts
 (c⁄° *
__s
);

702 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

709 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

710 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

715 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

716 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

717 
__END_NAMESPACE_STD


719 #ifde‡
__USE_GNU


726 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

727 
FILE
 *
__ª°ri˘
 
__°ªam
);

730 #ifde‡
__USE_MISC


737 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

738 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

739 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

740 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

744 
__BEGIN_NAMESPACE_STD


749 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

754 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

759 
	`ªwöd
 (
FILE
 *
__°ªam
);

760 
__END_NAMESPACE_STD


767 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


768 #i‚de‡
__USE_FILE_OFFSET64


773 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

778 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

780 #ifde‡
__REDIRECT


781 
	`__REDIRECT
 (
f£eko
,

782 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

783 
f£eko64
);

784 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

786 
	#f£eko
 
f£eko64


	)

787 
	#·ñlo
 
·ñlo64


	)

792 
__BEGIN_NAMESPACE_STD


793 #i‚de‡
__USE_FILE_OFFSET64


798 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

803 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

805 #ifde‡
__REDIRECT


806 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

807 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

808 
	`__REDIRECT
 (
f£ços
,

809 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

811 
	#fgëpos
 
fgëpos64


	)

812 
	#f£ços
 
f£ços64


	)

815 
__END_NAMESPACE_STD


817 #ifde‡
__USE_LARGEFILE64


818 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

819 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

820 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

821 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

824 
__BEGIN_NAMESPACE_STD


826 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

828 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

831 
__END_NAMESPACE_STD


833 #ifde‡
__USE_MISC


835 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

836 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

837 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

841 
__BEGIN_NAMESPACE_STD


846 
	`≥º‹
 (c⁄° *
__s
);

847 
__END_NAMESPACE_STD


853 
	~<bôs/sys_îæi°.h
>

856 #ifdef 
__USE_POSIX


858 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

861 #ifde‡
__USE_MISC


863 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

867 #ifde‡
__USE_POSIX2


872 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

878 
	`p˛o£
 (
FILE
 *
__°ªam
);

882 #ifdef 
__USE_POSIX


884 *
	$˘îmid
 (*
__s
Ë
__THROW
;

888 #ifde‡
__USE_XOPEN


890 *
	`cu£rid
 (*
__s
);

894 #ifdef 
__USE_GNU


895 
ob°ack
;

898 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

899 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

900 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

901 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

902 c⁄° *
__ª°ri˘
 
__f‹m©
,

903 
_G_va_li°
 
__¨gs
)

904 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

908 #ifde‡
__USE_POSIX


912 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

916 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

919 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

922 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


926 
	#__√ed_gë›t


	)

927 
	~<gë›t.h
>

932 #ifde‡
__USE_EXTERN_INLINES


933 
	~<bôs/°dio.h
>

935 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


936 
	~<bôs/°dio2.h
>

938 #ifde‡
__LDBL_COMPAT


939 
	~<bôs/°dio-ldbl.h
>

942 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

44 #ifde‡
__USE_MISC


49 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


50 
	#__WAIT_INT
(
°©us
) \

51 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

52 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

54 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

62 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


63 
	#__WAIT_STATUS
 *

	)

64 
	#__WAIT_STATUS_DEFN
 *

	)

69 
waô
 *
	m__u±r
;

70 *
	m__ùå
;

71 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

78 
	#__WAIT_STATUS
 *

	)

79 
	#__WAIT_STATUS_DEFN
 *

	)

84 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifde‡
__WIFCONTINUED


91 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

95 
__BEGIN_NAMESPACE_STD


99 
	mquŸ
;

100 
	mªm
;

101 } 
	tdiv_t
;

104 #i‚de‡
__ldiv_t_deföed


107 
	mquŸ
;

108 
	mªm
;

109 } 
	tldiv_t
;

110 
	#__ldiv_t_deföed
 1

	)

112 
	g__END_NAMESPACE_STD


114 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


115 
__BEGIN_NAMESPACE_C99


117 
__exãnsi⁄__
 struct

119 
	mquŸ
;

120 
	mªm
;

121 } 
	tŒdiv_t
;

122 
	#__Œdiv_t_deföed
 1

	)

123 
	g__END_NAMESPACE_C99


128 
	#RAND_MAX
 2147483647

	)

133 
	#EXIT_FAILURE
 1

	)

134 
	#EXIT_SUCCESS
 0

	)

138 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

139 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

142 
__BEGIN_NAMESPACE_STD


144 
	$©of
 (c⁄° *
__≈å
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

147 
	$©oi
 (c⁄° *
__≈å
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

150 
	$©ﬁ
 (c⁄° *
__≈å
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

152 
__END_NAMESPACE_STD


154 #ifde‡
__USE_ISOC99


155 
__BEGIN_NAMESPACE_C99


157 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

158 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

159 
__END_NAMESPACE_C99


162 
__BEGIN_NAMESPACE_STD


164 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

173 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

175 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

184 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

185 
__THROW
 
	`__n⁄nuŒ
 ((1));

187 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

190 
__END_NAMESPACE_STD


192 #ifde‡
__USE_MISC


194 
__exãnsi⁄__


195 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

196 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

197 
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
__exãnsi⁄__


200 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 #ifde‡
__USE_ISOC99


206 
__BEGIN_NAMESPACE_C99


208 
__exãnsi⁄__


209 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

210 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

211 
__THROW
 
	`__n⁄nuŒ
 ((1));

213 
__exãnsi⁄__


214 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

215 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
__END_NAMESPACE_C99


221 #ifde‡
__USE_GNU


235 
	~<xloˇÀ.h
>

239 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

240 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

241 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

243 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

244 **
__ª°ri˘
 
__íd±r
,

245 
__ba£
, 
__loˇÀ_t
 
__loc
)

246 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

248 
__exãnsi⁄__


249 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

250 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

251 
__loˇÀ_t
 
__loc
)

252 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

254 
__exãnsi⁄__


255 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

256 **
__ª°ri˘
 
__íd±r
,

257 
__ba£
, 
__loˇÀ_t
 
__loc
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

260 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

261 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

264 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

265 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

266 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

268 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

269 **
__ª°ri˘
 
__íd±r
,

270 
__loˇÀ_t
 
__loc
)

271 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

275 #ifde‡
__USE_EXTERN_INLINES


276 
__BEGIN_NAMESPACE_STD


277 
__exã∫_ölöe
 

278 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

280  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

281 
	}
}

282 
__exã∫_ölöe
 

283 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

285  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

286 
	}
}

287 
	g__END_NAMESPACE_STD


289 #ifde‡
__USE_ISOC99


290 
__BEGIN_NAMESPACE_C99


291 
__exãnsi⁄__
 
__exã∫_ölöe
 

292 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

294  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

295 
	}
}

296 
	g__END_NAMESPACE_C99


301 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


305 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

308 
	$a64l
 (c⁄° *
__s
)

309 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

313 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


314 
	~<sys/ty≥s.h
>

321 
	$øndom
 (Ë
__THROW
;

324 
	$§™dom
 (
__£ed
Ë
__THROW
;

330 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

331 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

335 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

338 #ifde‡
__USE_MISC


343 
	søndom_d©a


345 
öt32_t
 *
Âå
;

346 
öt32_t
 *
Ωå
;

347 
öt32_t
 *
°©e
;

348 
ønd_ty≥
;

349 
ønd_deg
;

350 
ønd_£p
;

351 
öt32_t
 *
íd_±r
;

354 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

355 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

357 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

360 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

361 
size_t
 
__°©ñí
,

362 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

363 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

365 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

366 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

367 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

372 
__BEGIN_NAMESPACE_STD


374 
	$ønd
 (Ë
__THROW
;

376 
	$§™d
 (
__£ed
Ë
__THROW
;

377 
__END_NAMESPACE_STD


379 #ifde‡
__USE_POSIX


381 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

385 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


389 
	$dønd48
 (Ë
__THROW
;

390 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 
	$Ã™d48
 (Ë
__THROW
;

394 
	$ƒ™d48
 (
__xsubi
[3])

395 
__THROW
 
	`__n⁄nuŒ
 ((1));

398 
	$mønd48
 (Ë
__THROW
;

399 
	$jønd48
 (
__xsubi
[3])

400 
__THROW
 
	`__n⁄nuŒ
 ((1));

403 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

404 *
	$£ed48
 (
__£ed16v
[3])

405 
__THROW
 
	`__n⁄nuŒ
 ((1));

406 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

408 #ifde‡
__USE_MISC


412 
	sdønd48_d©a


414 
__x
[3];

415 
__ﬁd_x
[3];

416 
__c
;

417 
__öô
;

418 
__exãnsi⁄__
 
__a
;

423 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

424 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

425 
	$î™d48_r
 (
__xsubi
[3],

426 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

427 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

431 *
__ª°ri˘
 
__ªsu…
)

432 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

433 
	$ƒ™d48_r
 (
__xsubi
[3],

434 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

435 *
__ª°ri˘
 
__ªsu…
)

436 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

439 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

442 
	$jønd48_r
 (
__xsubi
[3],

443 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

444 *
__ª°ri˘
 
__ªsu…
)

445 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

448 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

449 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$£ed48_r
 (
__£ed16v
[3],

452 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$lc⁄g48_r
 (
__∑øm
[7],

455 
dønd48_d©a
 *
__buf„r
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

462 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


463 
	#__mÆloc_™d_ˇŒoc_deföed


	)

464 
__BEGIN_NAMESPACE_STD


466 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

468 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

469 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

470 
__END_NAMESPACE_STD


473 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


474 
__BEGIN_NAMESPACE_STD


480 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

481 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

483 
	$‰ì
 (*
__±r
Ë
__THROW
;

484 
__END_NAMESPACE_STD


486 #ifdef 
__USE_MISC


488 
	$c‰ì
 (*
__±r
Ë
__THROW
;

491 #ifde‡
__USE_MISC


492 
	~<Æloˇ.h
>

495 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

496 || 
deföed
 
__USE_MISC


498 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

501 #ifde‡
__USE_XOPEN2K


503 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

504 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

507 #ifde‡
__USE_ISOC11


509 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

510 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

513 
__BEGIN_NAMESPACE_STD


515 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

519 
	$©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

521 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


523 #ifde‡
__˝lu•lus


524 "C++" 
	$©_quick_exô
 ((*
__func
) ())

525 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

527 
	$©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

530 
__END_NAMESPACE_STD


532 #ifdef 
__USE_MISC


535 
	$⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

536 
__THROW
 
	`__n⁄nuŒ
 ((1));

539 
__BEGIN_NAMESPACE_STD


543 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

545 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


549 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

551 
__END_NAMESPACE_STD


553 #ifde‡
__USE_ISOC99


554 
__BEGIN_NAMESPACE_C99


557 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

558 
__END_NAMESPACE_C99


562 
__BEGIN_NAMESPACE_STD


564 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

565 
__END_NAMESPACE_STD


567 #ifde‡
__USE_GNU


570 *
	$£cuª_gëív
 (c⁄° *
__«me
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

574 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


578 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

581 #ifde‡
__USE_XOPEN2K


584 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

585 
__THROW
 
	`__n⁄nuŒ
 ((2));

588 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #ifdef 
__USE_MISC


595 
	$˛óªnv
 (Ë
__THROW
;

599 #i‡
deföed
 
__USE_MISC
 \

600 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

609 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


618 #i‚de‡
__USE_FILE_OFFSET64


619 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

621 #ifde‡
__REDIRECT


622 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

623 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

625 
	#mk°emp
 
mk°emp64


	)

628 #ifde‡
__USE_LARGEFILE64


629 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

633 #ifde‡
__USE_MISC


640 #i‚de‡
__USE_FILE_OFFSET64


641 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

643 #ifde‡
__REDIRECT


644 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

645 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

647 
	#mk°emps
 
mk°emps64


	)

650 #ifde‡
__USE_LARGEFILE64


651 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

652 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

656 #ifde‡
__USE_XOPEN2K8


662 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

665 #ifde‡
__USE_GNU


672 #i‚de‡
__USE_FILE_OFFSET64


673 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

675 #ifde‡
__REDIRECT


676 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

677 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

679 
	#mko°emp
 
mko°emp64


	)

682 #ifde‡
__USE_LARGEFILE64


683 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

692 #i‚de‡
__USE_FILE_OFFSET64


693 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

694 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

696 #ifde‡
__REDIRECT


697 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

698 
__Êags
), 
mko°emps64
)

699 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

701 
	#mko°emps
 
mko°emps64


	)

704 #ifde‡
__USE_LARGEFILE64


705 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

706 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

711 
__BEGIN_NAMESPACE_STD


716 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

717 
__END_NAMESPACE_STD


720 #ifdef 
__USE_GNU


723 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

724 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

727 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


733 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

734 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

739 #i‚de‡
__COMPAR_FN_T


740 
	#__COMPAR_FN_T


	)

741 (*
	t__com∑r_‚_t
) (const *, const *);

743 #ifdef 
__USE_GNU


744 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

747 #ifde‡
__USE_GNU


748 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

751 
__BEGIN_NAMESPACE_STD


754 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

755 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

756 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

758 #ifde‡
__USE_EXTERN_INLINES


759 
	~<bôs/°dlib-b£¨ch.h
>

764 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

766 #ifde‡
__USE_GNU


767 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

768 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

769 
	`__n⁄nuŒ
 ((1, 4));

774 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

775 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

776 
__END_NAMESPACE_STD


778 #ifde‡
__USE_ISOC99


779 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

780 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

784 
__BEGIN_NAMESPACE_STD


788 
div_t
 
	$div
 (
__numî
, 
__díom
)

789 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

790 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

791 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

792 
__END_NAMESPACE_STD


794 #ifde‡
__USE_ISOC99


795 
__BEGIN_NAMESPACE_C99


796 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

797 
__díom
)

798 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

799 
__END_NAMESPACE_C99


803 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

804 || 
deföed
 
__USE_MISC


811 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

812 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

817 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

818 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

823 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

824 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

827 #ifde‡
__USE_MISC


829 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

833 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

834 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

835 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

836 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

841 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

844 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

845 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

846 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

848 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

849 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

850 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

851 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

852 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

853 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

854 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

855 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

859 
__BEGIN_NAMESPACE_STD


862 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

865 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

866 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

869 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

873 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

874 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

876 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

877 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

878 
__THROW
;

879 
__END_NAMESPACE_STD


882 #ifde‡
__USE_MISC


887 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

891 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


898 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

899 *c⁄° *
__ª°ri˘
 
__tokís
,

900 **
__ª°ri˘
 
__vÆuï
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

905 #ifde‡
__USE_XOPEN


907 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

913 #ifde‡
__USE_XOPEN2KXSI


915 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

918 #ifde‡
__USE_XOPEN


923 
	$gø¡±
 (
__fd
Ë
__THROW
;

927 
	$u∆ock±
 (
__fd
Ë
__THROW
;

932 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

935 #ifde‡
__USE_GNU


939 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

940 
__THROW
 
	`__n⁄nuŒ
 ((2));

943 
	`gë±
 ();

946 #ifde‡
__USE_MISC


950 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

951 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 
	~<bôs/°dlib-Êﬂt.h
>

957 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


958 
	~<bôs/°dlib.h
>

960 #ifde‡
__LDBL_COMPAT


961 
	~<bôs/°dlib-ldbl.h
>

965 #unde‡
__√ed_mÆloc_™d_ˇŒoc


967 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


30 
	#__√ed_size_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

35 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

36 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

40 
__BEGIN_NAMESPACE_STD


42 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

43 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

46 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

47 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

48 
__END_NAMESPACE_STD


53 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


54 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

55 
__c
, 
size_t
 
__n
)

56 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

60 
__BEGIN_NAMESPACE_STD


62 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

65 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

66 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

69 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


72 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

73 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

74 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

75 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 #ifde‡
__OPTIMIZE__


78 
__exã∫_Æways_ölöe
 *

79 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


81  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

84 
__exã∫_Æways_ölöe
 const *

85 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


87  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

90 
	}
}

92 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

93 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

95 
__END_NAMESPACE_STD


97 #ifde‡
__USE_GNU


100 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


101 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

102 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

103 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

104 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

107 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

111 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


112 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

113 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

123 
__BEGIN_NAMESPACE_STD


125 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

128 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

129 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

133 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

137 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

141 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

151 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
 
	`__n⁄nuŒ
 ((2));

153 
__END_NAMESPACE_STD


155 #ifde‡
__USE_XOPEN2K8


159 
	~<xloˇÀ.h
>

162 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

163 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

165 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

166 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

169 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


171 *
	$°rdup
 (c⁄° *
__s
)

172 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

178 #i‡
deföed
 
__USE_XOPEN2K8


179 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

180 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

183 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


185 
	#°rdu∑
(
s
) \

186 (
__exãnsi⁄__
 \

188 c⁄° *
__ﬁd
 = (
s
); \

189 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

190 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

191 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

192 
	}
}))

	)

195 
	#°∫du∑
(
s
, 
n
) \

196 (
__exãnsi⁄__
 \

198 c⁄° *
__ﬁd
 = (
s
); \

199 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

200 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

201 
__√w
[
__Àn
] = '\0'; \

202 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

203 }))

	)

206 
	g__BEGIN_NAMESPACE_STD


208 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


211 *
°rchr
 (*
__s
, 
__c
)

212 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

213 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

214 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

216 #ifde‡
__OPTIMIZE__


217 
__exã∫_Æways_ölöe
 *

218 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


220  
__buûtö_°rchr
 (
__s
, 
__c
);

223 
__exã∫_Æways_ölöe
 const *

224 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


226  
__buûtö_°rchr
 (
__s
, 
__c
);

231 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

232 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

235 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


238 *
	`°ºchr
 (*
__s
, 
__c
)

239 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

240 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

241 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

243 #ifde‡
__OPTIMIZE__


244 
__exã∫_Æways_ölöe
 *

245 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


247  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

250 
__exã∫_Æways_ölöe
 const *

251 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


253  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

256 
	}
}

258 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

259 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

261 
__END_NAMESPACE_STD


263 #ifde‡
__USE_GNU


266 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


267 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

268 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

269 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

270 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

272 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

273 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

277 
__BEGIN_NAMESPACE_STD


280 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

281 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

284 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

287 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


290 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

291 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

292 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

293 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

295 #ifde‡
__OPTIMIZE__


296 
__exã∫_Æways_ölöe
 *

297 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


299  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

302 
__exã∫_Æways_ölöe
 const *

303 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


305  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

308 
	}
}

310 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

311 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

314 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


317 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

318 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

319 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

320 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

322 #ifde‡
__OPTIMIZE__


323 
__exã∫_Æways_ölöe
 *

324 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


326  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

329 
__exã∫_Æways_ölöe
 const *

330 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


332  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

335 
	}
}

337 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

338 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

343 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

344 
__THROW
 
	`__n⁄nuŒ
 ((2));

345 
__END_NAMESPACE_STD


349 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

350 c⁄° *
__ª°ri˘
 
__dñim
,

351 **
__ª°ri˘
 
__ßve_±r
)

352 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

353 #ifde‡
__USE_POSIX


354 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

355 **
__ª°ri˘
 
__ßve_±r
)

356 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

359 #ifde‡
__USE_GNU


361 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


362 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

363 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

364 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

365 c⁄° *
__√edÀ
)

366 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

368 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

369 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 #ifde‡
__USE_GNU


377 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

378 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

379 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

383 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

384 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

385 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

386 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

387 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

388 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

392 
__BEGIN_NAMESPACE_STD


394 
size_t
 
	$°æí
 (c⁄° *
__s
)

395 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

396 
__END_NAMESPACE_STD


398 #ifdef 
__USE_XOPEN2K8


401 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

402 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

406 
__BEGIN_NAMESPACE_STD


408 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

409 
__END_NAMESPACE_STD


410 #ifde‡
__USE_XOPEN2K


418 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


421 #ifde‡
__REDIRECT_NTH


422 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

423 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

424 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

426 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

427 
__THROW
 
	`__n⁄nuŒ
 ((2));

428 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

433 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

434 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

438 #ifde‡
__USE_XOPEN2K8


440 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

446 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

448 #ifde‡
__USE_MISC


450 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

451 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

457 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

458 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

461 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


464 *
	`ödex
 (*
__s
, 
__c
)

465 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

466 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

467 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

469 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


470 
__exã∫_Æways_ölöe
 *

471 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


473  
	`__buûtö_ödex
 (
__s
, 
__c
);

476 
__exã∫_Æways_ölöe
 const *

477 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


479  
	`__buûtö_ödex
 (
__s
, 
__c
);

482 
	}
}

484 *
	$ödex
 (c⁄° *
__s
, 
__c
)

485 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

489 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


492 *
	`rödex
 (*
__s
, 
__c
)

493 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

495 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

497 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


498 
__exã∫_Æways_ölöe
 *

499 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


501  
	`__buûtö_rödex
 (
__s
, 
__c
);

504 
__exã∫_Æways_ölöe
 const *

505 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


507  
	`__buûtö_rödex
 (
__s
, 
__c
);

510 
	}
}

512 *
	$rödex
 (c⁄° *
__s
, 
__c
)

513 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

518 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

522 #ifdef 
__USE_GNU


523 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

524 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

525 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

530 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

533 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

534 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

537 #ifdef 
__USE_GNU


540 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

541 
__loˇÀ_t
 
__loc
)

542 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

544 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

545 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

546 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

549 #ifdef 
__USE_MISC


552 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

553 c⁄° *
__ª°ri˘
 
__dñim
)

554 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 #ifdef 
__USE_XOPEN2K8


559 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

562 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

563 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

565 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

570 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

572 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

573 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

577 #ifdef 
__USE_GNU


579 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

580 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

583 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

586 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

588 #i‚de‡
ba£«me


593 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


594 "C++" *
	$ba£«me
 (*
__fûíame
)

595 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

596 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

597 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

599 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

605 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

606 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

607 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


627 
	~<bôs/°rög.h
>

630 
	~<bôs/°rög2.h
>

633 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


635 
	~<bôs/°rög3.h
>

639 #i‡
deföed
 
__USE_GNU
 && deföed 
__OPTIMIZE__
 \

640 && 
deföed
 
__exã∫_Æways_ölöe
 && 
	$__GNUC_PREREQ
 (3,2)

641 #i‡!
deföed
 
_FORCE_INLINES
 && !deföed 
_HAVE_STRING_ARCH_memp˝y


643 #unde‡
memp˝y


644 #unde‡
__memp˝y


645 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y_ölöe
 (de°, src,Ç)

	)

646 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y_ölöe
 (de°, src,Ç)

	)

648 
__exã∫_Æways_ölöe
 *

649 
	$__memp˝y_ölöe
 (*
__ª°ri˘
 
__de°
,

650 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

652  (*Ë
	`mem˝y
 (
__de°
, 
__§c
, 
__n
) + __n;

653 
	}
}

658 
	g__END_DECLS


	@/usr/include/strings.h

18 #i‚def 
_STRINGS_H


19 
	#_STRINGS_H
 1

	)

24 #i‡!
deföed
 
_STRING_H
 || !deföed 
__USE_MISC


26 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

31 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

32 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

35 
	g__BEGIN_DECLS


37 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


39 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

40 
__THROW
 
__©åibuã_puª__
;

43 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
Ë
__THROW
;

46 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
;

49 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


52 *
	`ödex
 (*
__s
, 
__c
)

53 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

54 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

55 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

57 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRING_H_PROTO


58 
__exã∫_Æways_ölöe
 *

59 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


61  
	`__buûtö_ödex
 (
__s
, 
__c
);

64 
__exã∫_Æways_ölöe
 const *

65 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


67  
	`__buûtö_ödex
 (
__s
, 
__c
);

70 
	}
}

72 *
	$ödex
 (c⁄° *
__s
, 
__c
)

73 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


80 *
	`rödex
 (*
__s
, 
__c
)

81 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

82 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

83 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

85 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRING_H_PROTO


86 
__exã∫_Æways_ölöe
 *

87 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


89  
	`__buûtö_rödex
 (
__s
, 
__c
);

92 
__exã∫_Æways_ölöe
 const *

93 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


95  
	`__buûtö_rödex
 (
__s
, 
__c
);

98 
	}
}

100 *
	$rödex
 (c⁄° *
__s
, 
__c
)

101 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

105 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8
 || deföed 
__USE_XOPEN2K8XSI


108 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((const));

112 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

113 
__THROW
 
__©åibuã_puª__
;

116 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

117 
__THROW
 
__©åibuã_puª__
;

119 #ifdef 
__USE_XOPEN2K8


123 
	~<xloˇÀ.h
>

127 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__loc
)

128 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

130 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

131 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

132 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

135 
__END_DECLS


	@/usr/include/sys/ioctl.h

18 #i‚def 
_SYS_IOCTL_H


19 
	#_SYS_IOCTL_H
 1

	)

21 
	~<„©uªs.h
>

23 
	g__BEGIN_DECLS


26 
	~<bôs/io˘ls.h
>

29 
	~<bôs/io˘l-ty≥s.h
>

36 
	~<sys/âydeÁu…s.h
>

41 
	$io˘l
 (
__fd
, 
__ªque°
, ...Ë
__THROW
;

43 
__END_DECLS


	@/usr/include/sys/param.h

19 #i‚de‡
_SYS_PARAM_H


20 
	#_SYS_PARAM_H
 1

	)

22 
	#__√ed_NULL


	)

23 
	~<°ddef.h
>

25 
	~<sys/ty≥s.h
>

26 
	~<limôs.h
>

27 
	~<ídün.h
>

28 
	~<sig«l.h
>

31 
	~<bôs/∑øm.h
>

36 
	#NBBY
 
CHAR_BIT


	)

38 #i‡!
deföed
 
NGROUPS
 && deföed 
NGROUPS_MAX


39 
	#NGROUPS
 
NGROUPS_MAX


	)

41 #i‡!
deföed
 
MAXSYMLINKS
 && deföed 
SYMLOOP_MAX


42 
	#MAXSYMLINKS
 
SYMLOOP_MAX


	)

44 #i‡!
deföed
 
CANBSIZ
 && deföed 
MAX_CANON


45 
	#CANBSIZ
 
MAX_CANON


	)

47 #i‡!
deföed
 
MAXPATHLEN
 && deföed 
PATH_MAX


48 
	#MAXPATHLEN
 
PATH_MAX


	)

50 #i‡!
deföed
 
NOFILE
 && deföed 
OPEN_MAX


51 
	#NOFILE
 
OPEN_MAX


	)

53 #i‡!
deföed
 
MAXHOSTNAMELEN
 && deföed 
HOST_NAME_MAX


54 
	#MAXHOSTNAMELEN
 
HOST_NAME_MAX


	)

56 #i‚de‡
NCARGS


57 #ifde‡
ARG_MAX


58 
	#NCARGS
 
ARG_MAX


	)

62 
	#NCARGS
 
INT_MAX


	)

68 #i‚de‡
NOGROUP


69 
	#NOGROUP
 65535

	)

71 #i‚de‡
NODEV


72 
	#NODEV
 ((
dev_t
Ë-1Ë

	)

77 #i‚de‡
DEV_BSIZE


78 
	#DEV_BSIZE
 512

	)

83 
	#£tbô
(
a
,
i
Ë(◊)[(i)/
NBBY
] |1<<((i)%NBBY))

	)

84 
	#˛rbô
(
a
,
i
Ë(◊)[(i)/
NBBY
] &~(1<<((i)%NBBY)))

	)

85 
	#is£t
(
a
,
i
Ë(◊)[(i)/
NBBY
] & (1<<((i)%NBBY)))

	)

86 
	#is˛r
(
a
,
i
Ë((◊)[(i)/
NBBY
] & (1<<((i)%NBBY))Ë=0)

	)

89 #i‚de‡
howm™y


90 
	#howm™y
(
x
, 
y
Ë(((xË+ ((yË- 1)Ë/ (y))

	)

92 #ifde‡
__GNUC__


93 
	#roundup
(
x
, 
y
Ë(
	`__buûtö_c⁄°™t_p
 (yË&& 
	`powîof2
 (y) \

94 ? (((
x
Ë+ (
y
) - 1) & ~((y) - 1)) \

95 : ((((
x
Ë+ ((
y
Ë- 1)Ë/ (y)Ë* (y)))

	)

97 
	#roundup
(
x
, 
y
Ë((((xË+ ((yË- 1)Ë/ (y)Ë* (y))

	)

99 
	#powîof2
(
x
Ë((((xË- 1Ë& (x)Ë=0)

	)

102 
	#MIN
(
a
,
b
Ë((◊)<(b))?◊):(b))

	)

103 
	#MAX
(
a
,
b
Ë((◊)>(b))?◊):(b))

	)

	@/usr/include/sys/select.h

21 #i‚de‡
_SYS_SELECT_H


22 
	#_SYS_SELECT_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

30 
	~<bôs/£À˘.h
>

33 
	~<bôs/sig£t.h
>

35 #i‚de‡
__sig£t_t_deföed


36 
	#__sig£t_t_deföed


	)

37 
__sig£t_t
 
	tsig£t_t
;

41 
	#__√ed_time_t


	)

42 
	#__√ed_time•ec


	)

43 
	~<time.h
>

44 
	#__√ed_timevÆ


	)

45 
	~<bôs/time.h
>

47 #i‚de‡
__su£c⁄ds_t_deföed


48 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

49 
	#__su£c⁄ds_t_deföed


	)

54 
	t__fd_mask
;

57 #unde‡
__NFDBITS


59 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

60 
	#__FD_ELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

61 
	#__FD_MASK
(
d
Ë((
__fd_mask
Ë(1UL << ((dË% 
__NFDBITS
)))

	)

68 #ifde‡
__USE_XOPEN


69 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

70 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

72 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

75 } 
	tfd_£t
;

78 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

80 #ifde‡
__USE_MISC


82 
__fd_mask
 
	tfd_mask
;

85 
	#NFDBITS
 
__NFDBITS


	)

90 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

91 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

92 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

93 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

96 
__BEGIN_DECLS


106 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

107 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

108 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

109 
timevÆ
 *
__ª°ri˘
 
__timeout
);

111 #ifde‡
__USE_XOPEN2K


118 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

119 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

120 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

121 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

122 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

127 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__GNUC__


128 
	~<bôs/£À˘2.h
>

131 
	g__END_DECLS


	@/usr/include/sys/socket.h

19 #i‚def 
_SYS_SOCKET_H


20 
	#_SYS_SOCKET_H
 1

	)

22 
	~<„©uªs.h
>

24 
	g__BEGIN_DECLS


26 
	~<sys/uio.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

29 #ifde‡
__USE_GNU


31 
	~<bôs/sig£t.h
>

38 
	~<bôs/sockë.h
>

40 #ifde‡
__USE_MISC


43 
	sosockaddr


45 
	mß_Ámûy
;

46 
	mß_d©a
[14];

54 
	mSHUT_RD
 = 0,

55 
	#SHUT_RD
 
SHUT_RD


	)

56 
	mSHUT_WR
,

57 
	#SHUT_WR
 
SHUT_WR


	)

58 
	mSHUT_RDWR


59 
	#SHUT_RDWR
 
SHUT_RDWR


	)

68 #i‡
deföed
 
__˝lu•lus
 || !
__GNUC_PREREQ
 (2, 7Ë|| !deföed 
__USE_GNU


69 
	#__SOCKADDR_ARG
 
sockaddr
 *
__ª°ri˘


	)

70 
	#__CONST_SOCKADDR_ARG
 c⁄° 
sockaddr
 *

	)

74 
	#__SOCKADDR_ALLTYPES
 \

75 
	`__SOCKADDR_ONETYPE
 (
sockaddr
) \

76 
	`__SOCKADDR_ONETYPE
 (
sockaddr_©
) \

77 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ax25
) \

78 
	`__SOCKADDR_ONETYPE
 (
sockaddr_dl
) \

79 
	`__SOCKADDR_ONETYPE
 (
sockaddr_e⁄
) \

80 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö
) \

81 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö6
) \

82 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö¨p
) \

83 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ùx
) \

84 
	`__SOCKADDR_ONETYPE
 (
sockaddr_iso
) \

85 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ns
) \

86 
	`__SOCKADDR_ONETYPE
 (
sockaddr_un
) \

87 
	`__SOCKADDR_ONETYPE
 (
sockaddr_x25
)

	)

89 
	#__SOCKADDR_ONETYPE
(
ty≥
Ëty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

90 uni⁄ { 
	m__SOCKADDR_ALLTYPES


91 } 
	t__SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

92 #unde‡
__SOCKADDR_ONETYPE


93 
	#__SOCKADDR_ONETYPE
(
ty≥
Ëc⁄° ty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

94 uni⁄ { 
	m__SOCKADDR_ALLTYPES


95 } 
	t__CONST_SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

96 #unde‡
__SOCKADDR_ONETYPE


99 #ifde‡
__USE_GNU


101 
	smmsghdr


103 
msghdr
 
	mmsg_hdr
;

104 
	mmsg_Àn
;

113 
	$sockë
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
Ë
__THROW
;

119 
	$sockë∑ú
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
,

120 
__fds
[2]Ë
__THROW
;

123 
	$böd
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
)

124 
__THROW
;

127 
	$gësock«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

128 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

137 
	`c⁄√˘
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
);

141 
	$gë≥î«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

142 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

149 
ssize_t
 
	`£nd
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
, 
__Êags
);

156 
ssize_t
 
	`ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
);

163 
ssize_t
 
	`£ndto
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

164 
__Êags
, 
__CONST_SOCKADDR_ARG
 
__addr
,

165 
sockÀn_t
 
__addr_Àn
);

174 
ssize_t
 
	`ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

175 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

176 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

184 
ssize_t
 
	`£ndmsg
 (
__fd
, c⁄° 
msghdr
 *
__mesßge
,

185 
__Êags
);

187 #ifde‡
__USE_GNU


193 
	`£ndmmsg
 (
__fd
, 
mmsghdr
 *
__vmesßges
,

194 
__vÀn
, 
__Êags
);

202 
ssize_t
 
	`ªcvmsg
 (
__fd
, 
msghdr
 *
__mesßge
, 
__Êags
);

204 #ifde‡
__USE_GNU


210 
	`ªcvmmsg
 (
__fd
, 
mmsghdr
 *
__vmesßges
,

211 
__vÀn
, 
__Êags
,

212 
time•ec
 *
__tmo
);

219 
	$gësock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

220 *
__ª°ri˘
 
__›tvÆ
,

221 
sockÀn_t
 *
__ª°ri˘
 
__›éí
Ë
__THROW
;

226 
	$£tsock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

227 c⁄° *
__›tvÆ
, 
sockÀn_t
 
__›éí
Ë
__THROW
;

233 
	$li°í
 (
__fd
, 
__n
Ë
__THROW
;

243 
	`ac˚±
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

244 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

246 #ifde‡
__USE_GNU


251 
	`ac˚±4
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

252 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
, 
__Êags
);

261 
	$shutdown
 (
__fd
, 
__how
Ë
__THROW
;

264 #ifde‡
__USE_XOPEN2K


266 
	$sock©m¨k
 (
__fd
Ë
__THROW
;

270 #ifde‡
__USE_MISC


274 
	$isfdty≥
 (
__fd
, 
__fdty≥
Ë
__THROW
;

279 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


280 
	~<bôs/sockë2.h
>

283 
__END_DECLS


	@/usr/include/sys/stat.h

22 #i‚def 
_SYS_STAT_H


23 
	#_SYS_STAT_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K
 || deföed 
__USE_ATFILE


30 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


31 
	#__√ed_time_t


	)

33 #ifde‡
__USE_ATFILE


34 
	#__√ed_time•ec


	)

36 
	~<time.h
>

39 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


42 #i‚de‡
__dev_t_deföed


43 
__dev_t
 
	tdev_t
;

44 
	#__dev_t_deföed


	)

47 #i‚de‡
__gid_t_deföed


48 
__gid_t
 
	tgid_t
;

49 
	#__gid_t_deföed


	)

52 #i‚de‡
__öo_t_deföed


53 #i‚de‡
__USE_FILE_OFFSET64


54 
__öo_t
 
	töo_t
;

56 
__öo64_t
 
	töo_t
;

58 
	#__öo_t_deföed


	)

61 #i‚de‡
__mode_t_deföed


62 
__mode_t
 
	tmode_t
;

63 
	#__mode_t_deföed


	)

66 #i‚de‡
__∆ök_t_deföed


67 
__∆ök_t
 
	t∆ök_t
;

68 
	#__∆ök_t_deföed


	)

71 #i‚de‡
__off_t_deföed


72 #i‚de‡
__USE_FILE_OFFSET64


73 
__off_t
 
	toff_t
;

75 
__off64_t
 
	toff_t
;

77 
	#__off_t_deföed


	)

80 #i‚de‡
__uid_t_deföed


81 
__uid_t
 
	tuid_t
;

82 
	#__uid_t_deföed


	)

86 #ifde‡
__USE_UNIX98


87 #i‚de‡
__blk˙t_t_deföed


88 #i‚de‡
__USE_FILE_OFFSET64


89 
__blk˙t_t
 
	tblk˙t_t
;

91 
__blk˙t64_t
 
	tblk˙t_t
;

93 
	#__blk˙t_t_deföed


	)

96 #i‚de‡
__blksize_t_deföed


97 
__blksize_t
 
	tblksize_t
;

98 
	#__blksize_t_deföed


	)

102 
	g__BEGIN_DECLS


104 
	~<bôs/°©.h
>

106 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


107 
	#S_IFMT
 
__S_IFMT


	)

108 
	#S_IFDIR
 
__S_IFDIR


	)

109 
	#S_IFCHR
 
__S_IFCHR


	)

110 
	#S_IFBLK
 
__S_IFBLK


	)

111 
	#S_IFREG
 
__S_IFREG


	)

112 #ifde‡
__S_IFIFO


113 
	#S_IFIFO
 
__S_IFIFO


	)

115 #ifde‡
__S_IFLNK


116 
	#S_IFLNK
 
__S_IFLNK


	)

118 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_UNIX98
) \

119 && 
deföed
 
	g__S_IFSOCK


120 
	#S_IFSOCK
 
__S_IFSOCK


	)

126 
	#__S_ISTYPE
(
mode
, 
mask
Ë(((modeË& 
__S_IFMT
Ë=(mask))

	)

128 
	#S_ISDIR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFDIR
)

	)

129 
	#S_ISCHR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFCHR
)

	)

130 
	#S_ISBLK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFBLK
)

	)

131 
	#S_ISREG
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFREG
)

	)

132 #ifde‡
__S_IFIFO


133 
	#S_ISFIFO
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFIFO
)

	)

135 #ifde‡
__S_IFLNK


136 
	#S_ISLNK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFLNK
)

	)

139 #i‡
deföed
 
__USE_MISC
 && !deföed 
__S_IFLNK


140 
	#S_ISLNK
(
mode
Ë0

	)

143 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K
) \

144 && 
deföed
 
	g__S_IFSOCK


145 
	#S_ISSOCK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFSOCK
)

	)

146 #ñi‡
deföed
 
__USE_XOPEN2K


147 
	#S_ISSOCK
(
mode
Ë0

	)

154 #ifdef 
__USE_POSIX199309


155 
	#S_TYPEISMQ
(
buf
Ë
	`__S_TYPEISMQ
(buf)

	)

156 
	#S_TYPEISSEM
(
buf
Ë
	`__S_TYPEISSEM
(buf)

	)

157 
	#S_TYPEISSHM
(
buf
Ë
	`__S_TYPEISSHM
(buf)

	)

163 
	#S_ISUID
 
__S_ISUID


	)

164 
	#S_ISGID
 
__S_ISGID


	)

166 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


168 
	#S_ISVTX
 
__S_ISVTX


	)

171 
	#S_IRUSR
 
__S_IREAD


	)

172 
	#S_IWUSR
 
__S_IWRITE


	)

173 
	#S_IXUSR
 
__S_IEXEC


	)

175 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

177 #ifde‡
__USE_MISC


178 
	#S_IREAD
 
S_IRUSR


	)

179 
	#S_IWRITE
 
S_IWUSR


	)

180 
	#S_IEXEC
 
S_IXUSR


	)

183 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

184 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

185 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

187 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

189 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

190 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

191 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

193 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

196 #ifdef 
__USE_MISC


198 
	#ACCESSPERMS
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
Ë

	)

199 
	#ALLPERMS
 (
S_ISUID
|
S_ISGID
|
S_ISVTX
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

200 
	#DEFFILEMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

202 
	#S_BLKSIZE
 512

	)

206 #i‚de‡
__USE_FILE_OFFSET64


208 
	$°©
 (c⁄° *
__ª°ri˘
 
__fûe
,

209 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

213 
	$f°©
 (
__fd
, 
°©
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

215 #ifde‡
__REDIRECT_NTH


216 
	`__REDIRECT_NTH
 (
°©
, (c⁄° *
__ª°ri˘
 
__fûe
,

217 
°©
 *
__ª°ri˘
 
__buf
), 
°©64
)

218 
	`__n⁄nuŒ
 ((1, 2));

219 
	`__REDIRECT_NTH
 (
f°©
, (
__fd
, 
°©
 *
__buf
), 
f°©64
)

220 
	`__n⁄nuŒ
 ((2));

222 
	#°©
 
°©64


	)

223 
	#f°©
 
f°©64


	)

226 #ifde‡
__USE_LARGEFILE64


227 
	$°©64
 (c⁄° *
__ª°ri˘
 
__fûe
,

228 
°©64
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

229 
	$f°©64
 (
__fd
, 
°©64
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

232 #ifde‡
__USE_ATFILE


236 #i‚de‡
__USE_FILE_OFFSET64


237 
	$f°©©
 (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

238 
°©
 *
__ª°ri˘
 
__buf
, 
__Êag
)

239 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

241 #ifde‡
__REDIRECT_NTH


242 
	`__REDIRECT_NTH
 (
f°©©
, (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

243 
°©
 *
__ª°ri˘
 
__buf
,

244 
__Êag
),

245 
f°©©64
Ë
	`__n⁄nuŒ
 ((2, 3));

247 
	#f°©©
 
f°©©64


	)

251 #ifde‡
__USE_LARGEFILE64


252 
	$f°©©64
 (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

253 
°©64
 *
__ª°ri˘
 
__buf
, 
__Êag
)

254 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

258 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


259 #i‚de‡
__USE_FILE_OFFSET64


262 
	$l°©
 (c⁄° *
__ª°ri˘
 
__fûe
,

263 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

265 #ifde‡
__REDIRECT_NTH


266 
	`__REDIRECT_NTH
 (
l°©
,

267 (c⁄° *
__ª°ri˘
 
__fûe
,

268 
°©
 *
__ª°ri˘
 
__buf
), 
l°©64
)

269 
	`__n⁄nuŒ
 ((1, 2));

271 
	#l°©
 
l°©64


	)

274 #ifde‡
__USE_LARGEFILE64


275 
	$l°©64
 (c⁄° *
__ª°ri˘
 
__fûe
,

276 
°©64
 *
__ª°ri˘
 
__buf
)

277 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

283 
	$chmod
 (c⁄° *
__fûe
, 
__mode_t
 
__mode
)

284 
__THROW
 
	`__n⁄nuŒ
 ((1));

286 #ifde‡
__USE_MISC


290 
	$lchmod
 (c⁄° *
__fûe
, 
__mode_t
 
__mode
)

291 
__THROW
 
	`__n⁄nuŒ
 ((1));

295 #ifde‡
__USE_POSIX


296 
	$fchmod
 (
__fd
, 
__mode_t
 
__mode
Ë
__THROW
;

299 #ifde‡
__USE_ATFILE


302 
	$fchmod©
 (
__fd
, c⁄° *
__fûe
, 
__mode_t
 
__mode
,

303 
__Êag
)

304 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

311 
__mode_t
 
	$umask
 (
__mode_t
 
__mask
Ë
__THROW
;

313 #ifdef 
__USE_GNU


316 
__mode_t
 
	$gëumask
 (Ë
__THROW
;

320 
	$mkdú
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
)

321 
__THROW
 
	`__n⁄nuŒ
 ((1));

323 #ifde‡
__USE_ATFILE


327 
	$mkdú©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
)

328 
__THROW
 
	`__n⁄nuŒ
 ((2));

334 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


335 
	$mknod
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
)

336 
__THROW
 
	`__n⁄nuŒ
 ((1));

338 #ifde‡
__USE_ATFILE


342 
	$mknod©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

343 
__dev_t
 
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

349 
	$mkfifo
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
)

350 
__THROW
 
	`__n⁄nuŒ
 ((1));

352 #ifde‡
__USE_ATFILE


356 
	$mkfifﬂt
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2));

360 #ifde‡
__USE_ATFILE


363 
	$utimíßt
 (
__fd
, c⁄° *
__∑th
,

364 c⁄° 
time•ec
 
__times
[2],

365 
__Êags
)

366 
__THROW
 
	`__n⁄nuŒ
 ((2));

369 #ifde‡
__USE_XOPEN2K8


371 
	$futimís
 (
__fd
, c⁄° 
time•ec
 
__times
[2]Ë
__THROW
;

389 #i‚de‡
_STAT_VER


390 
	#_STAT_VER
 0

	)

392 #i‚de‡
_MKNOD_VER


393 
	#_MKNOD_VER
 0

	)

397 #i‚de‡
__USE_FILE_OFFSET64


398 
	$__fx°©
 (
__vî
, 
__fûdes
, 
°©
 *
__°©_buf
)

399 
__THROW
 
	`__n⁄nuŒ
 ((3));

400 
	$__x°©
 (
__vî
, c⁄° *
__fûíame
,

401 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

402 
	$__lx°©
 (
__vî
, c⁄° *
__fûíame
,

403 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

404 
	$__fx°©©
 (
__vî
, 
__fûdes
, c⁄° *
__fûíame
,

405 
°©
 *
__°©_buf
, 
__Êag
)

406 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

408 #ifde‡
__REDIRECT_NTH


409 
	`__REDIRECT_NTH
 (
__fx°©
, (
__vî
, 
__fûdes
,

410 
°©
 *
__°©_buf
), 
__fx°©64
)

411 
	`__n⁄nuŒ
 ((3));

412 
	`__REDIRECT_NTH
 (
__x°©
, (
__vî
, c⁄° *
__fûíame
,

413 
°©
 *
__°©_buf
), 
__x°©64
)

414 
	`__n⁄nuŒ
 ((2, 3));

415 
	`__REDIRECT_NTH
 (
__lx°©
, (
__vî
, c⁄° *
__fûíame
,

416 
°©
 *
__°©_buf
), 
__lx°©64
)

417 
	`__n⁄nuŒ
 ((2, 3));

418 
	`__REDIRECT_NTH
 (
__fx°©©
, (
__vî
, 
__fûdes
,

419 c⁄° *
__fûíame
,

420 
°©
 *
__°©_buf
, 
__Êag
),

421 
__fx°©©64
Ë
	`__n⁄nuŒ
 ((3, 4));

424 
	#__fx°©
 
__fx°©64


	)

425 
	#__x°©
 
__x°©64


	)

426 
	#__lx°©
 
__lx°©64


	)

430 #ifde‡
__USE_LARGEFILE64


431 
	$__fx°©64
 (
__vî
, 
__fûdes
, 
°©64
 *
__°©_buf
)

432 
__THROW
 
	`__n⁄nuŒ
 ((3));

433 
	$__x°©64
 (
__vî
, c⁄° *
__fûíame
,

434 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

435 
	$__lx°©64
 (
__vî
, c⁄° *
__fûíame
,

436 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

437 
	$__fx°©©64
 (
__vî
, 
__fûdes
, c⁄° *
__fûíame
,

438 
°©64
 *
__°©_buf
, 
__Êag
)

439 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

441 
	$__xmknod
 (
__vî
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

442 
__dev_t
 *
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

444 
	$__xmknod©
 (
__vî
, 
__fd
, c⁄° *
__∑th
,

445 
__mode_t
 
__mode
, 
__dev_t
 *
__dev
)

446 
__THROW
 
	`__n⁄nuŒ
 ((3, 5));

448 #ifde‡
__USE_EXTERN_INLINES


451 
__exã∫_ölöe
 

452 
	`__NTH
 (
	$°©
 (c⁄° *
__∑th
, 
°©
 *
__°©buf
))

454  
	`__x°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

455 
	}
}

457 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


458 
__exã∫_ölöe
 

459 
__NTH
 (
	$l°©
 (c⁄° *
__∑th
, 
°©
 *
__°©buf
))

461  
	`__lx°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

462 
	}
}

465 
__exã∫_ölöe
 

466 
__NTH
 (
	$f°©
 (
__fd
, 
°©
 *
__°©buf
))

468  
	`__fx°©
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

469 
	}
}

471 #ifde‡
__USE_ATFILE


472 
__exã∫_ölöe
 

473 
__NTH
 (
	$f°©©
 (
__fd
, c⁄° *
__fûíame
, 
°©
 *
__°©buf
,

474 
__Êag
))

476  
	`__fx°©©
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

477 
	}
}

480 #ifde‡
__USE_MISC


481 
__exã∫_ölöe
 

482 
__NTH
 (
	$mknod
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
))

484  
	`__xmknod
 (
_MKNOD_VER
, 
__∑th
, 
__mode
, &
__dev
);

485 
	}
}

488 #ifde‡
__USE_ATFILE


489 
__exã∫_ölöe
 

490 
__NTH
 (
	$mknod©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

491 
__dev_t
 
__dev
))

493  
	`__xmknod©
 (
_MKNOD_VER
, 
__fd
, 
__∑th
, 
__mode
, &
__dev
);

494 
	}
}

497 #i‡
deföed
 
__USE_LARGEFILE64
 \

498 && (! 
deföed
 
	g__USE_FILE_OFFSET64
 \

499 || (
deföed
 
	g__REDIRECT_NTH
 && deföed 
	g__OPTIMIZE__
))

500 
__exã∫_ölöe
 

501 
__NTH
 (
	$°©64
 (c⁄° *
__∑th
, 
°©64
 *
__°©buf
))

503  
	`__x°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

504 
	}
}

506 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


507 
__exã∫_ölöe
 

508 
__NTH
 (
	$l°©64
 (c⁄° *
__∑th
, 
°©64
 *
__°©buf
))

510  
	`__lx°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

511 
	}
}

514 
__exã∫_ölöe
 

515 
__NTH
 (
	$f°©64
 (
__fd
, 
°©64
 *
__°©buf
))

517  
	`__fx°©64
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

518 
	}
}

520 #ifde‡
__USE_ATFILE


521 
__exã∫_ölöe
 

522 
__NTH
 (
	$f°©©64
 (
__fd
, c⁄° *
__fûíame
, 
°©64
 *
__°©buf
,

523 
__Êag
))

525  
	`__fx°©©64
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

526 
	}
}

533 
	g__END_DECLS


	@/usr/include/sys/time.h

18 #i‚de‡
_SYS_TIME_H


19 
	#_SYS_TIME_H
 1

	)

21 
	~<„©uªs.h
>

23 
	~<bôs/ty≥s.h
>

24 
	#__√ed_time_t


	)

25 
	~<time.h
>

26 
	#__√ed_timevÆ


	)

27 
	~<bôs/time.h
>

29 
	~<sys/£À˘.h
>

31 #i‚de‡
__su£c⁄ds_t_deföed


32 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

33 
	#__su£c⁄ds_t_deföed


	)

37 
	g__BEGIN_DECLS


39 #ifde‡
__USE_GNU


41 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) { \

42 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

43 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
 * 1000; \

44 }

	)

45 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) { \

46 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

47 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000; \

48 }

	)

52 #ifde‡
__USE_MISC


55 
	stimez⁄e


57 
	mtz_möuãswe°
;

58 
	mtz_d°time
;

61 
timez⁄e
 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

63 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

71 
	$gëtimeofday
 (
timevÆ
 *
__ª°ri˘
 
__tv
,

72 
__timez⁄e_±r_t
 
__tz
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

74 #ifde‡
__USE_MISC


77 
	$£âimeofday
 (c⁄° 
timevÆ
 *
__tv
,

78 c⁄° 
timez⁄e
 *
__tz
)

79 
__THROW
;

85 
	$adjtime
 (c⁄° 
timevÆ
 *
__dñè
,

86 
timevÆ
 *
__ﬁddñè
Ë
__THROW
;

91 
	e__ôimî_which


94 
ITIMER_REAL
 = 0,

95 
	#ITIMER_REAL
 
ITIMER_REAL


	)

97 
ITIMER_VIRTUAL
 = 1,

98 
	#ITIMER_VIRTUAL
 
ITIMER_VIRTUAL


	)

101 
ITIMER_PROF
 = 2

102 
	#ITIMER_PROF
 
ITIMER_PROF


	)

107 
	sôimîvÆ


110 
timevÆ
 
ô_öãrvÆ
;

112 
timevÆ
 
ô_vÆue
;

115 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


118 
__ôimî_which
 
	t__ôimî_which_t
;

120 
	t__ôimî_which_t
;

125 
	$gëôimî
 (
__ôimî_which_t
 
__which
,

126 
ôimîvÆ
 *
__vÆue
Ë
__THROW
;

131 
	$£tôimî
 (
__ôimî_which_t
 
__which
,

132 c⁄° 
ôimîvÆ
 *
__ª°ri˘
 
__√w
,

133 
ôimîvÆ
 *
__ª°ri˘
 
__ﬁd
Ë
__THROW
;

138 
	$utimes
 (c⁄° *
__fûe
, c⁄° 
timevÆ
 
__tvp
[2])

139 
__THROW
 
	`__n⁄nuŒ
 ((1));

141 #ifde‡
__USE_MISC


143 
	$lutimes
 (c⁄° *
__fûe
, c⁄° 
timevÆ
 
__tvp
[2])

144 
__THROW
 
	`__n⁄nuŒ
 ((1));

147 
	$futimes
 (
__fd
, c⁄° 
timevÆ
 
__tvp
[2]Ë
__THROW
;

150 #ifde‡
__USE_GNU


154 
	$futimeßt
 (
__fd
, c⁄° *
__fûe
,

155 c⁄° 
timevÆ
 
__tvp
[2]Ë
__THROW
;

159 #ifde‡
__USE_MISC


162 
	#timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

163 
	#timî˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0)

	)

164 
	#timîcmp
(
a
, 
b
, 
CMP
) \

165 (((
a
)->
tv_£c
 =(
b
)->tv_sec) ? \

166 ((
a
)->
tv_u£c
 
	`CMP
 (
b
)->tv_usec) : \

167 ((
a
)->
tv_£c
 
	`CMP
 (
b
)->tv_£c))

	)

168 
	#timîadd
(
a
, 
b
, 
ªsu…
) \

170 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯+ (
b
)->tv_sec; \

171 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯+ (
b
)->tv_usec; \

172 i‡((
ªsu…
)->
tv_u£c
 >= 1000000) \

174 ++(
ªsu…
)->
tv_£c
; \

175 (
ªsu…
)->
tv_u£c
 -= 1000000; \

177 
	}
} 0)

	)

178 
	#timîsub
(
a
, 
b
, 
ªsu…
) \

180 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯- (
b
)->tv_sec; \

181 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯- (
b
)->tv_usec; \

182 i‡((
ªsu…
)->
tv_u£c
 < 0) { \

183 --(
ªsu…
)->
tv_£c
; \

184 (
ªsu…
)->
tv_u£c
 += 1000000; \

186 } 0)

	)

189 
	g__END_DECLS


	@/usr/include/sys/types.h

22 #i‚def 
_SYS_TYPES_H


23 
	#_SYS_TYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifdef 
__USE_MISC


32 #i‚de‡
__u_ch¨_deföed


33 
__u_ch¨
 
	tu_ch¨
;

34 
__u_sh‹t
 
	tu_sh‹t
;

35 
__u_öt
 
	tu_öt
;

36 
__u_l⁄g
 
	tu_l⁄g
;

37 
__quad_t
 
	tquad_t
;

38 
__u_quad_t
 
	tu_quad_t
;

39 
__fsid_t
 
	tfsid_t
;

40 
	#__u_ch¨_deföed


	)

44 
__loff_t
 
	tloff_t
;

46 #i‚de‡
__öo_t_deföed


47 #i‚de‡
__USE_FILE_OFFSET64


48 
__öo_t
 
	töo_t
;

50 
__öo64_t
 
	töo_t
;

52 
	#__öo_t_deföed


	)

54 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


55 
__öo64_t
 
	töo64_t
;

56 
	#__öo64_t_deföed


	)

59 #i‚de‡
__dev_t_deföed


60 
__dev_t
 
	tdev_t
;

61 
	#__dev_t_deföed


	)

64 #i‚de‡
__gid_t_deföed


65 
__gid_t
 
	tgid_t
;

66 
	#__gid_t_deföed


	)

69 #i‚de‡
__mode_t_deföed


70 
__mode_t
 
	tmode_t
;

71 
	#__mode_t_deföed


	)

74 #i‚de‡
__∆ök_t_deföed


75 
__∆ök_t
 
	t∆ök_t
;

76 
	#__∆ök_t_deföed


	)

79 #i‚de‡
__uid_t_deföed


80 
__uid_t
 
	tuid_t
;

81 
	#__uid_t_deföed


	)

84 #i‚de‡
__off_t_deföed


85 #i‚de‡
__USE_FILE_OFFSET64


86 
__off_t
 
	toff_t
;

88 
__off64_t
 
	toff_t
;

90 
	#__off_t_deföed


	)

92 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


93 
__off64_t
 
	toff64_t
;

94 
	#__off64_t_deföed


	)

97 #i‚de‡
__pid_t_deföed


98 
__pid_t
 
	tpid_t
;

99 
	#__pid_t_deföed


	)

102 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

103 && !
deföed
 
__id_t_deföed


104 
__id_t
 
	tid_t
;

105 
	#__id_t_deföed


	)

108 #i‚de‡
__ssize_t_deföed


109 
__ssize_t
 
	tssize_t
;

110 
	#__ssize_t_deföed


	)

113 #ifdef 
__USE_MISC


114 #i‚de‡
__daddr_t_deföed


115 
__daddr_t
 
	tdaddr_t
;

116 
__ˇddr_t
 
	tˇddr_t
;

117 
	#__daddr_t_deföed


	)

121 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


122 
__key_t
 
	tkey_t
;

123 
	#__key_t_deföed


	)

126 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


127 
	#__√ed_˛ock_t


	)

129 
	#__√ed_time_t


	)

130 
	#__√ed_timî_t


	)

131 
	#__√ed_˛ockid_t


	)

132 
	~<time.h
>

134 #ifde‡
__USE_XOPEN


135 #i‚de‡
__u£c⁄ds_t_deföed


136 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

137 
	#__u£c⁄ds_t_deföed


	)

139 #i‚de‡
__su£c⁄ds_t_deföed


140 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

141 
	#__su£c⁄ds_t_deföed


	)

145 
	#__√ed_size_t


	)

146 
	~<°ddef.h
>

148 #ifde‡
__USE_MISC


150 
	tul⁄g
;

151 
	tush‹t
;

152 
	tuöt
;

157 #i‡!
__GNUC_PREREQ
 (2, 7)

160 #i‚de‡
__öt8_t_deföed


161 
	#__öt8_t_deföed


	)

162 
	töt8_t
;

163 
	töt16_t
;

164 
	töt32_t
;

165 #i‡
__WORDSIZE
 == 64

166 
	töt64_t
;

168 
__exãnsi⁄__
 
	töt64_t
;

173 
	tu_öt8_t
;

174 
	tu_öt16_t
;

175 
	tu_öt32_t
;

176 #i‡
__WORDSIZE
 == 64

177 
	tu_öt64_t
;

179 
__exãnsi⁄__
 
	tu_öt64_t
;

182 
	tªgi°î_t
;

187 
	#__ötN_t
(
N
, 
MODE
) \

188 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

189 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

190 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

192 #i‚de‡
	t__öt8_t_deföed


193 
	t__öt8_t_deföed


	)

194 
	t__ötN_t
 (8, 
	t__QI__
);

195 
__ötN_t
 (16, 
__HI__
);

196 
__ötN_t
 (32, 
__SI__
);

197 
__ötN_t
 (64, 
__DI__
);

200 
__u_ötN_t
 (8, 
__QI__
);

201 
__u_ötN_t
 (16, 
__HI__
);

202 
__u_ötN_t
 (32, 
__SI__
);

203 
__u_ötN_t
 (64, 
__DI__
);

205 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

211 
	#__BIT_TYPES_DEFINED__
 1

	)

214 #ifdef 
__USE_MISC


216 
	~<ídün.h
>

219 
	~<sys/£À˘.h
>

222 
	~<sys/sysma¸os.h
>

226 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

227 && !
deföed
 
__blksize_t_deföed


228 
__blksize_t
 
	tblksize_t
;

229 
	#__blksize_t_deföed


	)

233 #i‚de‡
__USE_FILE_OFFSET64


234 #i‚de‡
__blk˙t_t_deföed


235 
__blk˙t_t
 
	tblk˙t_t
;

236 
	#__blk˙t_t_deföed


	)

238 #i‚de‡
__fsblk˙t_t_deföed


239 
__fsblk˙t_t
 
	tfsblk˙t_t
;

240 
	#__fsblk˙t_t_deföed


	)

242 #i‚de‡
__fsfû˙t_t_deföed


243 
__fsfû˙t_t
 
	tfsfû˙t_t
;

244 
	#__fsfû˙t_t_deföed


	)

247 #i‚de‡
__blk˙t_t_deföed


248 
__blk˙t64_t
 
	tblk˙t_t
;

249 
	#__blk˙t_t_deföed


	)

251 #i‚de‡
__fsblk˙t_t_deföed


252 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

253 
	#__fsblk˙t_t_deföed


	)

255 #i‚de‡
__fsfû˙t_t_deföed


256 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

257 
	#__fsfû˙t_t_deföed


	)

261 #ifde‡
__USE_LARGEFILE64


262 
__blk˙t64_t
 
	tblk˙t64_t
;

263 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

264 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

269 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


270 
	~<bôs/±hªadty≥s.h
>

273 
	g__END_DECLS


	@/usr/include/termios.h

22 #i‚def 
_TERMIOS_H


23 
	#_TERMIOS_H
 1

	)

25 
	~<„©uªs.h
>

26 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


28 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__pid_t_deföed


30 
__pid_t
 
	tpid_t
;

31 
	#__pid_t_deföed


	)

35 
	g__BEGIN_DECLS


39 
	~<bôs/ãrmios.h
>

41 #ifde‡
__USE_MISC


44 
	#CCEQ
(
vÆ
, 
c
Ë((cË=(vÆË&& (vÆË!
_POSIX_VDISABLE
)

	)

48 
•ìd_t
 
	$cfgëo•ìd
 (c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

51 
•ìd_t
 
	$cfgëi•ìd
 (c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

54 
	$cf£to•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

57 
	$cf£ti•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

59 #ifdef 
__USE_MISC


61 
	$cf£t•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

66 
	$tcgë©å
 (
__fd
, 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

70 
	$tc£èâr
 (
__fd
, 
__›ti⁄Æ_a˘i⁄s
,

71 c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

74 #ifdef 
__USE_MISC


76 
	$cfmakîaw
 (
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

80 
	$tc£ndbªak
 (
__fd
, 
__duøti⁄
Ë
__THROW
;

86 
	`tcdøö
 (
__fd
);

90 
	$tcÊush
 (
__fd
, 
__queue_£À˘‹
Ë
__THROW
;

94 
	$tcÊow
 (
__fd
, 
__a˘i⁄
Ë
__THROW
;

97 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


99 
__pid_t
 
	$tcgësid
 (
__fd
Ë
__THROW
;

103 #ifde‡
__USE_MISC


104 
	~<sys/âydeÁu…s.h
>

107 
__END_DECLS


	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #ifde‡
__USE_POSIX


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_MISC


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #ifde‡
__USE_POSIX


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_POSIX


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_MISC


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

70 
	#_POSIX2_C_VERSION
 
__POSIX2_THIS_VERSION


	)

74 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

78 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

82 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

86 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

89 #ifde‡
__USE_XOPEN2K8


90 
	#_XOPEN_VERSION
 700

	)

91 #ñi‡
deföed
 
__USE_XOPEN2K


92 
	#_XOPEN_VERSION
 600

	)

93 #ñi‡
deföed
 
__USE_UNIX98


94 
	#_XOPEN_VERSION
 500

	)

96 
	#_XOPEN_VERSION
 4

	)

100 
	#_XOPEN_XCU_VERSION
 4

	)

103 
	#_XOPEN_XPG2
 1

	)

104 
	#_XOPEN_XPG3
 1

	)

105 
	#_XOPEN_XPG4
 1

	)

108 
	#_XOPEN_UNIX
 1

	)

111 
	#_XOPEN_CRYPT
 1

	)

115 
	#_XOPEN_ENH_I18N
 1

	)

118 
	#_XOPEN_LEGACY
 1

	)

205 
	~<bôs/posix_›t.h
>

208 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


209 
	~<bôs/ívú⁄míts.h
>

213 
	#STDIN_FILENO
 0

	)

214 
	#STDOUT_FILENO
 1

	)

215 
	#STDERR_FILENO
 2

	)

220 
	~<bôs/ty≥s.h
>

222 #i‚def 
__ssize_t_deföed


223 
__ssize_t
 
	tssize_t
;

224 
	#__ssize_t_deföed


	)

227 
	#__√ed_size_t


	)

228 
	#__√ed_NULL


	)

229 
	~<°ddef.h
>

231 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


234 #i‚de‡
__gid_t_deföed


235 
__gid_t
 
	tgid_t
;

236 
	#__gid_t_deföed


	)

239 #i‚de‡
__uid_t_deföed


240 
__uid_t
 
	tuid_t
;

241 
	#__uid_t_deföed


	)

244 #i‚de‡
__off_t_deföed


245 #i‚de‡
__USE_FILE_OFFSET64


246 
__off_t
 
	toff_t
;

248 
__off64_t
 
	toff_t
;

250 
	#__off_t_deföed


	)

252 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


253 
__off64_t
 
	toff64_t
;

254 
	#__off64_t_deföed


	)

257 #i‚de‡
__u£c⁄ds_t_deföed


258 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

259 
	#__u£c⁄ds_t_deföed


	)

262 #i‚de‡
__pid_t_deföed


263 
__pid_t
 
	tpid_t
;

264 
	#__pid_t_deföed


	)

268 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


269 #i‚de‡
__öçå_t_deföed


270 
__öçå_t
 
	töçå_t
;

271 
	#__öçå_t_deföed


	)

275 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


276 #i‚de‡
__sockÀn_t_deföed


277 
__sockÀn_t
 
	tsockÀn_t
;

278 
	#__sockÀn_t_deföed


	)

284 
	#R_OK
 4

	)

285 
	#W_OK
 2

	)

286 
	#X_OK
 1

	)

287 
	#F_OK
 0

	)

290 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

292 #ifde‡
__USE_GNU


295 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

296 
__THROW
 
	`__n⁄nuŒ
 ((1));

299 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

300 
__THROW
 
	`__n⁄nuŒ
 ((1));

303 #ifde‡
__USE_ATFILE


307 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

308 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

313 #i‚def 
_STDIO_H


314 
	#SEEK_SET
 0

	)

315 
	#SEEK_CUR
 1

	)

316 
	#SEEK_END
 2

	)

317 #ifde‡
__USE_GNU


318 
	#SEEK_DATA
 3

	)

319 
	#SEEK_HOLE
 4

	)

323 #i‡
deföed
 
__USE_MISC
 && !deföed 
L_SET


325 
	#L_SET
 
SEEK_SET


	)

326 
	#L_INCR
 
SEEK_CUR


	)

327 
	#L_XTND
 
SEEK_END


	)

336 #i‚de‡
__USE_FILE_OFFSET64


337 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

339 #ifde‡
__REDIRECT_NTH


340 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

341 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

342 
l£ek64
);

344 
	#l£ek
 
l£ek64


	)

347 #ifde‡
__USE_LARGEFILE64


348 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

349 
__THROW
;

356 
	`˛o£
 (
__fd
);

363 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

369 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

371 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


372 #i‚de‡
__USE_FILE_OFFSET64


379 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

380 
__off_t
 
__off£t
Ë
__wur
;

387 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

388 
__off_t
 
__off£t
Ë
__wur
;

390 #ifde‡
__REDIRECT


391 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

392 
__off64_t
 
__off£t
),

393 
¥ód64
Ë
__wur
;

394 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

395 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

396 
pwrôe64
Ë
__wur
;

398 
	#¥ód
 
¥ód64


	)

399 
	#pwrôe
 
pwrôe64


	)

403 #ifde‡
__USE_LARGEFILE64


407 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

408 
__off64_t
 
__off£t
Ë
__wur
;

411 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

412 
__off64_t
 
__off£t
Ë
__wur
;

420 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

422 #ifde‡
__USE_GNU


425 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

435 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

447 
	`¶ìp
 (
__£c⁄ds
);

449 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

450 || 
deföed
 
__USE_MISC


455 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

456 
__THROW
;

463 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

472 
	`∑u£
 ();

476 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

477 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

479 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


481 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

486 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

487 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

491 #ifde‡
__USE_ATFILE


494 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

495 
__gid_t
 
__group
, 
__Êag
)

496 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

500 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

502 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


504 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

514 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

516 #ifdef 
__USE_GNU


520 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

523 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

524 || 
deföed
 
__USE_MISC


528 *
	$gëwd
 (*
__buf
)

529 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

534 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

537 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

539 #ifde‡
__USE_GNU


542 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

546 **
__ívú⁄
;

547 #ifde‡
__USE_GNU


548 **
ívú⁄
;

554 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

555 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 #ifde‡
__USE_XOPEN2K8


560 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

561 
__THROW
 
	`__n⁄nuŒ
 ((2));

566 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

567 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

577 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

581 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

582 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

588 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

590 #ifde‡
__USE_GNU


593 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

594 *c⁄° 
__ívp
[])

595 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

599 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


601 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

606 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

612 
	~<bôs/c⁄‚ame.h
>

615 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

616 
__THROW
 
	`__n⁄nuŒ
 ((1));

619 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

622 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

624 #ifdef 
__USE_POSIX2


626 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

631 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

637 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

640 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

641 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


642 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

649 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

651 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


663 
	$£çgΩ
 (Ë
__THROW
;

670 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

672 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


674 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

678 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

681 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

687 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

692 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

694 #ifdef 
__USE_GNU


696 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

703 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

705 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


708 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

711 #ifde‡
__USE_XOPEN2K


713 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

720 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

722 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


725 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

728 #ifde‡
__USE_XOPEN2K


730 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

733 #ifde‡
__USE_GNU


736 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

737 
__THROW
;

741 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

742 
__THROW
;

746 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

747 
__THROW
 
__wur
;

751 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

752 
__THROW
 
__wur
;

759 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

761 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

762 || 
deföed
 
__USE_MISC


767 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

773 *
	$ây«me
 (
__fd
Ë
__THROW
;

777 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

778 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

782 
	$ißây
 (
__fd
Ë
__THROW
;

784 #i‡
deföed
 
__USE_MISC
 \

785 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

788 
	$ây¶Ÿ
 (Ë
__THROW
;

793 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

794 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

796 #ifde‡
__USE_ATFILE


799 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

800 c⁄° *
__to
, 
__Êags
)

801 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

804 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


806 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

807 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

812 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

813 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

814 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

817 #ifde‡
__USE_ATFILE


819 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

820 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

823 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

824 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

825 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

829 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

831 #ifde‡
__USE_ATFILE


833 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

834 
__THROW
 
	`__n⁄nuŒ
 ((2));

838 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

842 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

845 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

852 *
	`gëlogö
 ();

853 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


860 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

863 #ifdef 
__USE_MISC


865 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

869 #ifdef 
__USE_POSIX2


873 
	#__√ed_gë›t


	)

874 
	~<gë›t.h
>

878 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


882 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

886 #i‡
deföed
 
__USE_MISC


889 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

890 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

894 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

900 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

902 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

903 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

909 
	$vh™gup
 (Ë
__THROW
;

912 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

920 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

921 
size_t
 
__off£t
, 
__sˇÀ
)

922 
__THROW
 
	`__n⁄nuŒ
 ((1));

928 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

932 *
	$gëu£rshñl
 (Ë
__THROW
;

933 
	$ídu£rshñl
 (Ë
__THROW
;

934 
	$£tu£rshñl
 (Ë
__THROW
;

940 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

944 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

947 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

951 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

959 
	`fsync
 (
__fd
);

962 #ifde‡
__USE_GNU


965 
	$syncfs
 (
__fd
Ë
__THROW
;

969 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


972 
	`gëho°id
 ();

975 
	$sync
 (Ë
__THROW
;

978 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K


981 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

986 
	$gëdèbÀsize
 (Ë
__THROW
;

992 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


995 #i‚de‡
__USE_FILE_OFFSET64


996 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

997 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

999 #ifde‡
__REDIRECT_NTH


1000 
	`__REDIRECT_NTH
 (
åunˇã
,

1001 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

1002 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1004 
	#åunˇã
 
åunˇã64


	)

1007 #ifde‡
__USE_LARGEFILE64


1008 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1009 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1014 #i‡
deföed
 
__USE_POSIX199309
 \

1015 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1018 #i‚de‡
__USE_FILE_OFFSET64


1019 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1021 #ifde‡
__REDIRECT_NTH


1022 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1023 
·runˇã64
Ë
__wur
;

1025 
	#·runˇã
 
·runˇã64


	)

1028 #ifde‡
__USE_LARGEFILE64


1029 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1035 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1036 || 
deföed
 
__USE_MISC


1040 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1046 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1050 #ifde‡
__USE_MISC


1061 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1066 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1078 
	#F_ULOCK
 0

	)

1079 
	#F_LOCK
 1

	)

1080 
	#F_TLOCK
 2

	)

1081 
	#F_TEST
 3

	)

1083 #i‚de‡
__USE_FILE_OFFSET64


1084 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1086 #ifde‡
__REDIRECT


1087 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1088 
lockf64
Ë
__wur
;

1090 
	#lockf
 
lockf64


	)

1093 #ifde‡
__USE_LARGEFILE64


1094 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1099 #ifde‡
__USE_GNU


1104 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1105 (
__exãnsi⁄__
 \

1106 ({ 
__ªsu…
; \

1107 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1108 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1109 
__ªsu…
; 
	}
}))

	)

1112 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1115 
fd©async
 (
__fûdes
);

1121 #ifdef 
__USE_XOPEN


1123 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1124 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1128 
	$í¸y±
 (*
__glibc_block
, 
__edÊag
)

1129 
__THROW
 
	`__n⁄nuŒ
 ((1));

1136 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1137 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1143 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1145 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1150 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1151 
	~<bôs/uni°d.h
>

1154 
__END_DECLS


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/bits/byteswap.h

19 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


23 #i‚de‡
_BITS_BYTESWAP_H


24 
	#_BITS_BYTESWAP_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

35 
	~<bôs/byãsw≠-16.h
>

38 
	#__bsw≠_c⁄°™t_32
(
x
) \

39 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

40 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

42 #ifde‡
__GNUC__


43 #i‡
__GNUC_PREREQ
 (4, 3)

44 
__ölöe
 

45 
	$__bsw≠_32
 (
__bsx
)

47  
	`__buûtö_bsw≠32
 (
__bsx
);

48 
	}
}

49 #ñi‡
__GNUC__
 >= 2

50 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

51 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

52 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

53 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

54 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

55 || 
deföed
 
	g__amdÁm10__
)

58 
	#__bsw≠_32
(
x
) \

59 (
__exãnsi⁄__
 \

60 ({ 
__v
, 
__x
 = (
x
); \

61 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

62 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

64 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

65 
__v
; }))

	)

67 
	#__bsw≠_32
(
x
) \

68 (
__exãnsi⁄__
 \

69 ({ 
__v
, 
__x
 = (
x
); \

70 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

71 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

73 
	`__asm__
 ("rorw $8, %w0;" \

76 : "Ù" (
__v
) \

77 : "0" (
__x
) \

79 
__v
; }))

	)

82 
	#__bsw≠_32
(
x
) \

83 (
__exãnsi⁄__
 \

84 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

87 
__ölöe
 

88 
	$__bsw≠_32
 (
__bsx
)

90  
	`__bsw≠_c⁄°™t_32
 (
__bsx
);

91 
	}
}

95 #i‡
__GNUC_PREREQ
 (2, 0)

97 
	#__bsw≠_c⁄°™t_64
(
x
) \

98 (
	`__exãnsi⁄__
 ((((
x
) & 0xff00000000000000ull) >> 56) \

99 | (((
x
) & 0x00ff000000000000ull) >> 40) \

100 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

101 | (((
x
) & 0x000000ff00000000ull) >> 8) \

102 | (((
x
) & 0x00000000ff000000ull) << 8) \

103 | (((
x
) & 0x0000000000ff0000ull) << 24) \

104 | (((
x
) & 0x000000000000ff00ull) << 40) \

105 | (((
x
Ë& 0x00000000000000ffuŒË<< 56)))

	)

107 #i‡
__GNUC_PREREQ
 (4, 3)

108 
__ölöe
 
__uöt64_t


109 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

111  
	`__buûtö_bsw≠64
 (
__bsx
);

112 
	}
}

113 #ñi‡
__WORDSIZE
 == 64

114 
	#__bsw≠_64
(
x
) \

115 (
__exãnsi⁄__
 \

116 ({ 
__uöt64_t
 
__v
, 
__x
 = (
x
); \

117 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

118 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

120 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

121 
__v
; }))

	)

123 
	#__bsw≠_64
(
x
) \

124 (
__exãnsi⁄__
 \

125 ({ uni⁄ { 
__exãnsi⁄__
 
__uöt64_t
 
__Œ
; \

126 
__l
[2]; } 
__w
, 
__r
; \

127 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

128 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

131 
__w
.
__Œ
 = (
x
); \

132 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

133 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

135 
__r
.
__Œ
; }))

	)

138 
	#__bsw≠_c⁄°™t_64
(
x
) \

139 ((((
x
) & 0xff00000000000000ull) >> 56) \

140 | (((
x
) & 0x00ff000000000000ull) >> 40) \

141 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

142 | (((
x
) & 0x000000ff00000000ull) >> 8) \

143 | (((
x
) & 0x00000000ff000000ull) << 8) \

144 | (((
x
) & 0x0000000000ff0000ull) << 24) \

145 | (((
x
) & 0x000000000000ff00ull) << 40) \

146 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

148 
__ölöe
 
__uöt64_t


149 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

151  
	`__bsw≠_c⁄°™t_64
 (
__bsx
);

152 
	}
}

	@/usr/include/bits/confname.h

19 #i‚de‡
_UNISTD_H


26 
	m_PC_LINK_MAX
,

27 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

28 
	m_PC_MAX_CANON
,

29 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

30 
	m_PC_MAX_INPUT
,

31 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

32 
	m_PC_NAME_MAX
,

33 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

34 
	m_PC_PATH_MAX
,

35 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

36 
	m_PC_PIPE_BUF
,

37 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

38 
	m_PC_CHOWN_RESTRICTED
,

39 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

40 
	m_PC_NO_TRUNC
,

41 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

42 
	m_PC_VDISABLE
,

43 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

44 
	m_PC_SYNC_IO
,

45 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

46 
	m_PC_ASYNC_IO
,

47 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

48 
	m_PC_PRIO_IO
,

49 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

50 
	m_PC_SOCK_MAXBUF
,

51 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

52 
	m_PC_FILESIZEBITS
,

53 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

54 
	m_PC_REC_INCR_XFER_SIZE
,

55 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

56 
	m_PC_REC_MAX_XFER_SIZE
,

57 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

58 
	m_PC_REC_MIN_XFER_SIZE
,

59 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

60 
	m_PC_REC_XFER_ALIGN
,

61 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

62 
	m_PC_ALLOC_SIZE_MIN
,

63 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

64 
	m_PC_SYMLINK_MAX
,

65 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

66 
	m_PC_2_SYMLINKS


67 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

73 
	m_SC_ARG_MAX
,

74 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

75 
	m_SC_CHILD_MAX
,

76 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

77 
	m_SC_CLK_TCK
,

78 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

79 
	m_SC_NGROUPS_MAX
,

80 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

81 
	m_SC_OPEN_MAX
,

82 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

83 
	m_SC_STREAM_MAX
,

84 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

85 
	m_SC_TZNAME_MAX
,

86 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

87 
	m_SC_JOB_CONTROL
,

88 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

89 
	m_SC_SAVED_IDS
,

90 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

91 
	m_SC_REALTIME_SIGNALS
,

92 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

93 
	m_SC_PRIORITY_SCHEDULING
,

94 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

95 
	m_SC_TIMERS
,

96 
	#_SC_TIMERS
 
_SC_TIMERS


	)

97 
	m_SC_ASYNCHRONOUS_IO
,

98 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

99 
	m_SC_PRIORITIZED_IO
,

100 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

101 
	m_SC_SYNCHRONIZED_IO
,

102 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

103 
	m_SC_FSYNC
,

104 
	#_SC_FSYNC
 
_SC_FSYNC


	)

105 
	m_SC_MAPPED_FILES
,

106 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

107 
	m_SC_MEMLOCK
,

108 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

109 
	m_SC_MEMLOCK_RANGE
,

110 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

111 
	m_SC_MEMORY_PROTECTION
,

112 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

113 
	m_SC_MESSAGE_PASSING
,

114 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

115 
	m_SC_SEMAPHORES
,

116 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

117 
	m_SC_SHARED_MEMORY_OBJECTS
,

118 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

119 
	m_SC_AIO_LISTIO_MAX
,

120 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

121 
	m_SC_AIO_MAX
,

122 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

123 
	m_SC_AIO_PRIO_DELTA_MAX
,

124 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

125 
	m_SC_DELAYTIMER_MAX
,

126 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

127 
	m_SC_MQ_OPEN_MAX
,

128 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

129 
	m_SC_MQ_PRIO_MAX
,

130 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

131 
	m_SC_VERSION
,

132 
	#_SC_VERSION
 
_SC_VERSION


	)

133 
	m_SC_PAGESIZE
,

134 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

135 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

136 
	m_SC_RTSIG_MAX
,

137 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

138 
	m_SC_SEM_NSEMS_MAX
,

139 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

140 
	m_SC_SEM_VALUE_MAX
,

141 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

142 
	m_SC_SIGQUEUE_MAX
,

143 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

144 
	m_SC_TIMER_MAX
,

145 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

149 
	m_SC_BC_BASE_MAX
,

150 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

151 
	m_SC_BC_DIM_MAX
,

152 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

153 
	m_SC_BC_SCALE_MAX
,

154 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

155 
	m_SC_BC_STRING_MAX
,

156 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

157 
	m_SC_COLL_WEIGHTS_MAX
,

158 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

159 
	m_SC_EQUIV_CLASS_MAX
,

160 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

161 
	m_SC_EXPR_NEST_MAX
,

162 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

163 
	m_SC_LINE_MAX
,

164 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

165 
	m_SC_RE_DUP_MAX
,

166 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

167 
	m_SC_CHARCLASS_NAME_MAX
,

168 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

170 
	m_SC_2_VERSION
,

171 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

172 
	m_SC_2_C_BIND
,

173 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

174 
	m_SC_2_C_DEV
,

175 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

176 
	m_SC_2_FORT_DEV
,

177 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

178 
	m_SC_2_FORT_RUN
,

179 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

180 
	m_SC_2_SW_DEV
,

181 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

182 
	m_SC_2_LOCALEDEF
,

183 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

185 
	m_SC_PII
,

186 
	#_SC_PII
 
_SC_PII


	)

187 
	m_SC_PII_XTI
,

188 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

189 
	m_SC_PII_SOCKET
,

190 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

191 
	m_SC_PII_INTERNET
,

192 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

193 
	m_SC_PII_OSI
,

194 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

195 
	m_SC_POLL
,

196 
	#_SC_POLL
 
_SC_POLL


	)

197 
	m_SC_SELECT
,

198 
	#_SC_SELECT
 
_SC_SELECT


	)

199 
	m_SC_UIO_MAXIOV
,

200 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

201 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

202 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

203 
	m_SC_PII_INTERNET_STREAM
,

204 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

205 
	m_SC_PII_INTERNET_DGRAM
,

206 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

207 
	m_SC_PII_OSI_COTS
,

208 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

209 
	m_SC_PII_OSI_CLTS
,

210 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

211 
	m_SC_PII_OSI_M
,

212 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

213 
	m_SC_T_IOV_MAX
,

214 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

217 
	m_SC_THREADS
,

218 
	#_SC_THREADS
 
_SC_THREADS


	)

219 
	m_SC_THREAD_SAFE_FUNCTIONS
,

220 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

221 
	m_SC_GETGR_R_SIZE_MAX
,

222 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

223 
	m_SC_GETPW_R_SIZE_MAX
,

224 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

225 
	m_SC_LOGIN_NAME_MAX
,

226 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

227 
	m_SC_TTY_NAME_MAX
,

228 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

229 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

230 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

231 
	m_SC_THREAD_KEYS_MAX
,

232 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

233 
	m_SC_THREAD_STACK_MIN
,

234 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

235 
	m_SC_THREAD_THREADS_MAX
,

236 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

237 
	m_SC_THREAD_ATTR_STACKADDR
,

238 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

239 
	m_SC_THREAD_ATTR_STACKSIZE
,

240 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

241 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

242 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

243 
	m_SC_THREAD_PRIO_INHERIT
,

244 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

245 
	m_SC_THREAD_PRIO_PROTECT
,

246 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

247 
	m_SC_THREAD_PROCESS_SHARED
,

248 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

250 
	m_SC_NPROCESSORS_CONF
,

251 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

252 
	m_SC_NPROCESSORS_ONLN
,

253 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

254 
	m_SC_PHYS_PAGES
,

255 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

256 
	m_SC_AVPHYS_PAGES
,

257 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

258 
	m_SC_ATEXIT_MAX
,

259 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

260 
	m_SC_PASS_MAX
,

261 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

263 
	m_SC_XOPEN_VERSION
,

264 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

265 
	m_SC_XOPEN_XCU_VERSION
,

266 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

267 
	m_SC_XOPEN_UNIX
,

268 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

269 
	m_SC_XOPEN_CRYPT
,

270 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

271 
	m_SC_XOPEN_ENH_I18N
,

272 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

273 
	m_SC_XOPEN_SHM
,

274 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

276 
	m_SC_2_CHAR_TERM
,

277 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

278 
	m_SC_2_C_VERSION
,

279 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

280 
	m_SC_2_UPE
,

281 
	#_SC_2_UPE
 
_SC_2_UPE


	)

283 
	m_SC_XOPEN_XPG2
,

284 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

285 
	m_SC_XOPEN_XPG3
,

286 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

287 
	m_SC_XOPEN_XPG4
,

288 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

290 
	m_SC_CHAR_BIT
,

291 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

292 
	m_SC_CHAR_MAX
,

293 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

294 
	m_SC_CHAR_MIN
,

295 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

296 
	m_SC_INT_MAX
,

297 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

298 
	m_SC_INT_MIN
,

299 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

300 
	m_SC_LONG_BIT
,

301 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

302 
	m_SC_WORD_BIT
,

303 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

304 
	m_SC_MB_LEN_MAX
,

305 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

306 
	m_SC_NZERO
,

307 
	#_SC_NZERO
 
_SC_NZERO


	)

308 
	m_SC_SSIZE_MAX
,

309 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

310 
	m_SC_SCHAR_MAX
,

311 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

312 
	m_SC_SCHAR_MIN
,

313 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

314 
	m_SC_SHRT_MAX
,

315 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

316 
	m_SC_SHRT_MIN
,

317 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

318 
	m_SC_UCHAR_MAX
,

319 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

320 
	m_SC_UINT_MAX
,

321 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

322 
	m_SC_ULONG_MAX
,

323 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

324 
	m_SC_USHRT_MAX
,

325 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

327 
	m_SC_NL_ARGMAX
,

328 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

329 
	m_SC_NL_LANGMAX
,

330 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

331 
	m_SC_NL_MSGMAX
,

332 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

333 
	m_SC_NL_NMAX
,

334 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

335 
	m_SC_NL_SETMAX
,

336 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

337 
	m_SC_NL_TEXTMAX
,

338 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

340 
	m_SC_XBS5_ILP32_OFF32
,

341 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

342 
	m_SC_XBS5_ILP32_OFFBIG
,

343 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

344 
	m_SC_XBS5_LP64_OFF64
,

345 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

346 
	m_SC_XBS5_LPBIG_OFFBIG
,

347 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

349 
	m_SC_XOPEN_LEGACY
,

350 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

351 
	m_SC_XOPEN_REALTIME
,

352 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

353 
	m_SC_XOPEN_REALTIME_THREADS
,

354 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

356 
	m_SC_ADVISORY_INFO
,

357 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

358 
	m_SC_BARRIERS
,

359 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

360 
	m_SC_BASE
,

361 
	#_SC_BASE
 
_SC_BASE


	)

362 
	m_SC_C_LANG_SUPPORT
,

363 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

364 
	m_SC_C_LANG_SUPPORT_R
,

365 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

366 
	m_SC_CLOCK_SELECTION
,

367 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

368 
	m_SC_CPUTIME
,

369 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

370 
	m_SC_THREAD_CPUTIME
,

371 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

372 
	m_SC_DEVICE_IO
,

373 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

374 
	m_SC_DEVICE_SPECIFIC
,

375 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

376 
	m_SC_DEVICE_SPECIFIC_R
,

377 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

378 
	m_SC_FD_MGMT
,

379 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

380 
	m_SC_FIFO
,

381 
	#_SC_FIFO
 
_SC_FIFO


	)

382 
	m_SC_PIPE
,

383 
	#_SC_PIPE
 
_SC_PIPE


	)

384 
	m_SC_FILE_ATTRIBUTES
,

385 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

386 
	m_SC_FILE_LOCKING
,

387 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

388 
	m_SC_FILE_SYSTEM
,

389 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

390 
	m_SC_MONOTONIC_CLOCK
,

391 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

392 
	m_SC_MULTI_PROCESS
,

393 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

394 
	m_SC_SINGLE_PROCESS
,

395 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

396 
	m_SC_NETWORKING
,

397 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

398 
	m_SC_READER_WRITER_LOCKS
,

399 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

400 
	m_SC_SPIN_LOCKS
,

401 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

402 
	m_SC_REGEXP
,

403 
	#_SC_REGEXP
 
_SC_REGEXP


	)

404 
	m_SC_REGEX_VERSION
,

405 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

406 
	m_SC_SHELL
,

407 
	#_SC_SHELL
 
_SC_SHELL


	)

408 
	m_SC_SIGNALS
,

409 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

410 
	m_SC_SPAWN
,

411 
	#_SC_SPAWN
 
_SC_SPAWN


	)

412 
	m_SC_SPORADIC_SERVER
,

413 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

414 
	m_SC_THREAD_SPORADIC_SERVER
,

415 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

416 
	m_SC_SYSTEM_DATABASE
,

417 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

418 
	m_SC_SYSTEM_DATABASE_R
,

419 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

420 
	m_SC_TIMEOUTS
,

421 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

422 
	m_SC_TYPED_MEMORY_OBJECTS
,

423 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

424 
	m_SC_USER_GROUPS
,

425 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

426 
	m_SC_USER_GROUPS_R
,

427 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

428 
	m_SC_2_PBS
,

429 
	#_SC_2_PBS
 
_SC_2_PBS


	)

430 
	m_SC_2_PBS_ACCOUNTING
,

431 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

432 
	m_SC_2_PBS_LOCATE
,

433 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

434 
	m_SC_2_PBS_MESSAGE
,

435 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

436 
	m_SC_2_PBS_TRACK
,

437 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

438 
	m_SC_SYMLOOP_MAX
,

439 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

440 
	m_SC_STREAMS
,

441 
	#_SC_STREAMS
 
_SC_STREAMS


	)

442 
	m_SC_2_PBS_CHECKPOINT
,

443 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

445 
	m_SC_V6_ILP32_OFF32
,

446 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

447 
	m_SC_V6_ILP32_OFFBIG
,

448 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

449 
	m_SC_V6_LP64_OFF64
,

450 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

451 
	m_SC_V6_LPBIG_OFFBIG
,

452 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

454 
	m_SC_HOST_NAME_MAX
,

455 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

456 
	m_SC_TRACE
,

457 
	#_SC_TRACE
 
_SC_TRACE


	)

458 
	m_SC_TRACE_EVENT_FILTER
,

459 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

460 
	m_SC_TRACE_INHERIT
,

461 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

462 
	m_SC_TRACE_LOG
,

463 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

465 
	m_SC_LEVEL1_ICACHE_SIZE
,

466 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

467 
	m_SC_LEVEL1_ICACHE_ASSOC
,

468 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

469 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

470 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

471 
	m_SC_LEVEL1_DCACHE_SIZE
,

472 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

473 
	m_SC_LEVEL1_DCACHE_ASSOC
,

474 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

475 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

476 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

477 
	m_SC_LEVEL2_CACHE_SIZE
,

478 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

479 
	m_SC_LEVEL2_CACHE_ASSOC
,

480 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

481 
	m_SC_LEVEL2_CACHE_LINESIZE
,

482 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

483 
	m_SC_LEVEL3_CACHE_SIZE
,

484 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

485 
	m_SC_LEVEL3_CACHE_ASSOC
,

486 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

487 
	m_SC_LEVEL3_CACHE_LINESIZE
,

488 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

489 
	m_SC_LEVEL4_CACHE_SIZE
,

490 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

491 
	m_SC_LEVEL4_CACHE_ASSOC
,

492 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

493 
	m_SC_LEVEL4_CACHE_LINESIZE
,

494 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

497 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

498 
	#_SC_IPV6
 
_SC_IPV6


	)

499 
	m_SC_RAW_SOCKETS
,

500 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

502 
	m_SC_V7_ILP32_OFF32
,

503 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

504 
	m_SC_V7_ILP32_OFFBIG
,

505 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

506 
	m_SC_V7_LP64_OFF64
,

507 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

508 
	m_SC_V7_LPBIG_OFFBIG
,

509 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

511 
	m_SC_SS_REPL_MAX
,

512 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

514 
	m_SC_TRACE_EVENT_NAME_MAX
,

515 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

516 
	m_SC_TRACE_NAME_MAX
,

517 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

518 
	m_SC_TRACE_SYS_MAX
,

519 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

520 
	m_SC_TRACE_USER_EVENT_MAX
,

521 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

523 
	m_SC_XOPEN_STREAMS
,

524 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

526 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

527 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

528 
	m_SC_THREAD_ROBUST_PRIO_PROTECT


529 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

535 
	m_CS_PATH
,

536 
	#_CS_PATH
 
_CS_PATH


	)

538 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

539 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

540 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

542 
	m_CS_GNU_LIBC_VERSION
,

543 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

544 
	m_CS_GNU_LIBPTHREAD_VERSION
,

545 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

547 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

548 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

549 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

551 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

552 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

553 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

555 
	m_CS_LFS_CFLAGS
 = 1000,

556 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

557 
	m_CS_LFS_LDFLAGS
,

558 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

559 
	m_CS_LFS_LIBS
,

560 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

561 
	m_CS_LFS_LINTFLAGS
,

562 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

563 
	m_CS_LFS64_CFLAGS
,

564 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

565 
	m_CS_LFS64_LDFLAGS
,

566 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

567 
	m_CS_LFS64_LIBS
,

568 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

569 
	m_CS_LFS64_LINTFLAGS
,

570 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

572 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

573 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

574 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

575 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

576 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

577 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

578 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

579 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

580 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

581 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

582 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

583 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

584 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

585 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

586 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

587 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

588 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

589 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

590 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

591 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

592 
	m_CS_XBS5_LP64_OFF64_LIBS
,

593 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

594 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

595 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

596 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

597 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

598 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

599 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

600 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

601 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

602 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

603 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

605 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

606 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

607 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

608 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

609 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

610 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

611 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

612 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

613 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

614 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

615 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

616 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

617 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

618 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

619 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

620 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

621 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

622 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

623 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

624 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

625 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

626 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

627 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

628 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

629 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

630 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

631 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

632 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

633 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

634 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

635 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

636 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

638 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

639 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

640 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

641 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

642 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

643 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

644 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

645 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

646 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

647 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

648 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

649 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

650 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

651 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

652 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

653 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

654 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

655 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

656 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

657 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

658 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

659 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

660 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

661 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

662 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

663 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

664 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

665 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

666 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

667 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

668 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
,

669 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

671 
	m_CS_V6_ENV
,

672 
	#_CS_V6_ENV
 
_CS_V6_ENV


	)

673 
	m_CS_V7_ENV


674 
	#_CS_V7_ENV
 
_CS_V7_ENV


	)

	@/usr/include/bits/dirent.h

18 #i‚de‡
_DIRENT_H


22 
	sdúít


24 #i‚de‡
__USE_FILE_OFFSET64


25 
__öo_t
 
	md_öo
;

26 
__off_t
 
	md_off
;

28 
__öo64_t
 
	md_öo
;

29 
__off64_t
 
	md_off
;

31 
	md_ª˛í
;

32 
	md_ty≥
;

33 
	md_«me
[256];

36 #ifde‡
__USE_LARGEFILE64


37 
	sdúít64


39 
__öo64_t
 
	md_öo
;

40 
__off64_t
 
	md_off
;

41 
	md_ª˛í
;

42 
	md_ty≥
;

43 
	md_«me
[256];

47 
	#d_fûío
 
d_öo


	)

49 #unde‡
_DIRENT_HAVE_D_NAMLEN


50 
	#_DIRENT_HAVE_D_RECLEN


	)

51 
	#_DIRENT_HAVE_D_OFF


	)

52 
	#_DIRENT_HAVE_D_TYPE


	)

54 #i‡
deföed
 
__OFF_T_MATCHES_OFF64_T
 && deföed 
__INO_T_MATCHES_INO64_T


56 
	#_DIRENT_MATCHES_DIRENT64
 1

	)

	@/usr/include/bits/environments.h

18 #i‚de‡
_UNISTD_H


22 
	~<bôs/w‹dsize.h
>

42 #i‡
__WORDSIZE
 == 64

56 
	#_POSIX_V7_LPBIG_OFFBIG
 -1

	)

57 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

58 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

61 
	#_POSIX_V7_LP64_OFF64
 1

	)

62 
	#_POSIX_V6_LP64_OFF64
 1

	)

63 
	#_XBS5_LP64_OFF64
 1

	)

69 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

70 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

71 
	#_XBS5_ILP32_OFFBIG
 1

	)

73 #i‚de‡
__x86_64__


75 
	#_POSIX_V7_ILP32_OFF32
 1

	)

76 
	#_POSIX_V6_ILP32_OFF32
 1

	)

77 
	#_XBS5_ILP32_OFF32
 1

	)

95 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

96 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

97 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


98 
	#__ILP32_OFFBIG_CFLAGS
 "-mx32"

	)

99 
	#__ILP32_OFFBIG_LDFLAGS
 "-mx32"

	)

101 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

102 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

104 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

105 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/errno.h

19 #ifde‡
_ERRNO_H


21 #unde‡
EDOM


22 #unde‡
EILSEQ


23 #unde‡
ERANGE


24 
	~<löux/î∫o.h
>

27 
	#ENOTSUP
 
EOPNOTSUPP


	)

30 #i‚de‡
ECANCELED


31 
	#ECANCELED
 125

	)

35 #i‚de‡
EOWNERDEAD


36 
	#EOWNERDEAD
 130

	)

37 
	#ENOTRECOVERABLE
 131

	)

40 #i‚de‡
ERFKILL


41 
	#ERFKILL
 132

	)

44 #i‚de‡
EHWPOISON


45 
	#EHWPOISON
 133

	)

48 #i‚de‡
__ASSEMBLER__


50 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

52 #i‡!
deföed
 
_LIBC
 || deföed 
_LIBC_REENTRANT


54 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

59 #i‡!
deföed
 
_ERRNO_H
 && deföed 
__√ed_Em©h


63 
	#EDOM
 33

	)

64 
	#EILSEQ
 84

	)

65 
	#ERANGE
 34

	)

	@/usr/include/bits/fcntl.h

19 #i‚de‡
_FCNTL_H


23 #ifde‡
__x86_64__


24 
	#__O_LARGEFILE
 0

	)

27 #ifde‡
__x86_64__


29 
	#F_GETLK64
 5

	)

30 
	#F_SETLK64
 6

	)

31 
	#F_SETLKW64
 7

	)

35 
	sÊock


37 
	ml_ty≥
;

38 
	ml_whí˚
;

39 #i‚de‡
__USE_FILE_OFFSET64


40 
__off_t
 
	ml_°¨t
;

41 
__off_t
 
	ml_Àn
;

43 
__off64_t
 
	ml_°¨t
;

44 
__off64_t
 
	ml_Àn
;

46 
__pid_t
 
	ml_pid
;

49 #ifde‡
__USE_LARGEFILE64


50 
	sÊock64


52 
	ml_ty≥
;

53 
	ml_whí˚
;

54 
__off64_t
 
	ml_°¨t
;

55 
__off64_t
 
	ml_Àn
;

56 
__pid_t
 
	ml_pid
;

61 
	~<bôs/f˙é-löux.h
>

	@/usr/include/bits/fcntl2.h

19 #i‚def 
_FCNTL_H


25 #i‚de‡
__USE_FILE_OFFSET64


26 
	$__›í_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

27 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

28 
›í
Ë
	`__n⁄nuŒ
 ((1));

30 
	`__REDIRECT
 (
__›í_2
, (c⁄° *
__∑th
, 
__oÊag
),

31 
__›í64_2
Ë
	`__n⁄nuŒ
 ((1));

32 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

33 
›í64
Ë
	`__n⁄nuŒ
 ((1));

35 
	`__îr‹de˛
 (
__›í_too_m™y_¨gs
,

37 
	`__îr‹de˛
 (
__›í_missög_mode
,

40 
__f‹tify_fun˘i⁄
 

41 
	$›í
 (c⁄° *
__∑th
, 
__oÊag
, ...)

43 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

44 
	`__›í_too_m™y_¨gs
 ();

46 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

48 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

50 
	`__›í_missög_mode
 ();

51  
	`__›í_2
 (
__∑th
, 
__oÊag
);

53  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

56 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

57  
	`__›í_2
 (
__∑th
, 
__oÊag
);

59  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

60 
	}
}

63 #ifde‡
__USE_LARGEFILE64


64 
	$__›í64_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

65 
	`__REDIRECT
 (
__›í64_Æüs
, (c⁄° *
__∑th
, 
__oÊag
,

66 ...), 
›í64
Ë
	`__n⁄nuŒ
 ((1));

67 
	`__îr‹de˛
 (
__›í64_too_m™y_¨gs
,

69 
	`__îr‹de˛
 (
__›í64_missög_mode
,

72 
__f‹tify_fun˘i⁄
 

73 
	$›í64
 (c⁄° *
__∑th
, 
__oÊag
, ...)

75 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

76 
	`__›í64_too_m™y_¨gs
 ();

78 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

80 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

82 
	`__›í64_missög_mode
 ();

83  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

85  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

88 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

89  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

91  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

92 
	}
}

96 #ifde‡
__USE_ATFILE


97 #i‚de‡
__USE_FILE_OFFSET64


98 
	$__›í©_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

99 
	`__n⁄nuŒ
 ((2));

100 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

101 
__oÊag
, ...), 
›í©
)

102 
	`__n⁄nuŒ
 ((2));

104 
	`__REDIRECT
 (
__›í©_2
, (
__fd
, c⁄° *
__∑th
,

105 
__oÊag
), 
__›í©64_2
)

106 
	`__n⁄nuŒ
 ((2));

107 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

108 
__oÊag
, ...), 
›í©64
)

109 
	`__n⁄nuŒ
 ((2));

111 
	`__îr‹de˛
 (
__›í©_too_m™y_¨gs
,

113 
	`__îr‹de˛
 (
__›í©_missög_mode
,

116 
__f‹tify_fun˘i⁄
 

117 
	$›í©
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

119 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

120 
	`__›í©_too_m™y_¨gs
 ();

122 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

124 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

126 
	`__›í©_missög_mode
 ();

127  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

129  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

132 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

133  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

135  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

136 
	}
}

139 #ifde‡
__USE_LARGEFILE64


140 
	$__›í©64_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

141 
	`__n⁄nuŒ
 ((2));

142 
	`__REDIRECT
 (
__›í©64_Æüs
, (
__fd
, c⁄° *
__∑th
,

143 
__oÊag
, ...), 
›í©64
)

144 
	`__n⁄nuŒ
 ((2));

145 
	`__îr‹de˛
 (
__›í©64_too_m™y_¨gs
,

147 
	`__îr‹de˛
 (
__›í©64_missög_mode
,

150 
__f‹tify_fun˘i⁄
 

151 
	$›í©64
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

153 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

154 
	`__›í©64_too_m™y_¨gs
 ();

156 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

158 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

160 
	`__›í©64_missög_mode
 ();

161  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

163  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

166 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

167  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

169  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

170 
	}
}

	@/usr/include/bits/huge_val.h

20 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

27 
	#HUGE_VAL
 (
	`__buûtö_huge_vÆ
())

	)

28 #ñi‡
__GNUC_PREREQ
(2,96)

29 
	#HUGE_VAL
 (
__exãnsi⁄__
 0x1.0
p2047
)

	)

30 #ñi‡
deföed
 
__GNUC__


32 
	#HUGE_VAL
 \

33 (
__exãnsi⁄__
 \

34 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__DI__
))); 
__d
; }) \

35 { 
__l
: 0x7ff0000000000000ULL }).
__d
)

	)

39 
	~<ídün.h
>

41 uni⁄ { 
	m__c
[8]; 
	m__d
; } 
	t__huge_vÆ_t
;

43 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


44 
	#__HUGE_VAL_byãs
 { 0x7f, 0xf0, 0, 0, 0, 0, 0, 0 }

	)

46 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


47 
	#__HUGE_VAL_byãs
 { 0, 0, 0, 0, 0, 0, 0xf0, 0x7‡}

	)

50 
__huge_vÆ_t
 
	g__huge_vÆ
 = { 
__HUGE_VAL_byãs
 };

51 
	#HUGE_VAL
 (
__huge_vÆ
.
__d
)

	)

	@/usr/include/bits/huge_valf.h

20 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

27 
	#HUGE_VALF
 (
	`__buûtö_huge_vÆf
())

	)

28 #ñi‡
__GNUC_PREREQ
(2,96)

29 
	#HUGE_VALF
 (
__exãnsi⁄__
 0x1.0
p255f
)

	)

30 #ñi‡
deföed
 
__GNUC__


32 
	#HUGE_VALF
 \

33 (
__exãnsi⁄__
 \

34 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__SI__
))); 
__d
; }) \

35 { 
__l
: 0x7f800000UL }).
__d
)

	)

39 uni⁄ { 
	m__c
[4]; 
	m__f
; } 
	t__huge_vÆf_t
;

41 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


42 
	#__HUGE_VALF_byãs
 { 0x7f, 0x80, 0, 0 }

	)

44 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


45 
	#__HUGE_VALF_byãs
 { 0, 0, 0x80, 0x7‡}

	)

48 
__huge_vÆf_t
 
	g__huge_vÆf
 = { 
__HUGE_VALF_byãs
 };

49 
	#HUGE_VALF
 (
__huge_vÆf
.
__f
)

	)

	@/usr/include/bits/huge_vall.h

20 #i‚de‡
_MATH_H


24 #i‡
__GNUC_PREREQ
(3,3)

25 
	#HUGE_VALL
 (
	`__buûtö_huge_vÆl
())

	)

26 #ñi‡
__GNUC_PREREQ
(2,96)

27 
	#HUGE_VALL
 (
__exãnsi⁄__
 0x1.0
p32767L
)

	)

30 
	#__HUGE_VALL_byãs
 { 0, 0, 0, 0, 0, 0, 0, 0x80, 0xff, 0x7f, 0, 0 }

	)

32 
	#__huge_vÆl_t
 uni⁄ { 
__c
[12]; 
__ld
; }

	)

33 #ifde‡
__GNUC__


34 
	#HUGE_VALL
 (
__exãnsi⁄__
 \

35 ((
__huge_vÆl_t
Ë{ 
__c
: 
__HUGE_VALL_byãs
 }).
__ld
)

	)

37 
__huge_vÆl_t
 
	g__huge_vÆl
 = { 
__HUGE_VALL_byãs
 };

38 
	#HUGE_VALL
 (
__huge_vÆl
.
__ld
)

	)

	@/usr/include/bits/in.h

20 #i‚de‡
_NETINET_IN_H


29 #i‡
deföed
 
_UAPI_LINUX_IN6_H
 || deföed 
_UAPI_IPV6_H


33 
	#__USE_KERNEL_IPV6_DEFS


	)

39 
	#IP_OPTIONS
 4

	)

40 
	#IP_HDRINCL
 3

	)

41 
	#IP_TOS
 1

	)

42 
	#IP_TTL
 2

	)

43 
	#IP_RECVOPTS
 6

	)

45 
	#IP_RECVRETOPTS
 
IP_RETOPTS


	)

46 
	#IP_RETOPTS
 7

	)

47 
	#IP_MULTICAST_IF
 32

	)

48 
	#IP_MULTICAST_TTL
 33

	)

49 
	#IP_MULTICAST_LOOP
 34

	)

50 
	#IP_ADD_MEMBERSHIP
 35

	)

51 
	#IP_DROP_MEMBERSHIP
 36

	)

52 
	#IP_UNBLOCK_SOURCE
 37

	)

53 
	#IP_BLOCK_SOURCE
 38

	)

54 
	#IP_ADD_SOURCE_MEMBERSHIP
 39

	)

55 
	#IP_DROP_SOURCE_MEMBERSHIP
 40

	)

56 
	#IP_MSFILTER
 41

	)

57 #ifde‡
__USE_MISC


58 
	#MCAST_JOIN_GROUP
 42

	)

59 
	#MCAST_BLOCK_SOURCE
 43

	)

60 
	#MCAST_UNBLOCK_SOURCE
 44

	)

61 
	#MCAST_LEAVE_GROUP
 45

	)

62 
	#MCAST_JOIN_SOURCE_GROUP
 46

	)

63 
	#MCAST_LEAVE_SOURCE_GROUP
 47

	)

64 
	#MCAST_MSFILTER
 48

	)

65 
	#IP_MULTICAST_ALL
 49

	)

66 
	#IP_UNICAST_IF
 50

	)

68 
	#MCAST_EXCLUDE
 0

	)

69 
	#MCAST_INCLUDE
 1

	)

72 
	#IP_ROUTER_ALERT
 5

	)

73 
	#IP_PKTINFO
 8

	)

74 
	#IP_PKTOPTIONS
 9

	)

75 
	#IP_PMTUDISC
 10

	)

76 
	#IP_MTU_DISCOVER
 10

	)

77 
	#IP_RECVERR
 11

	)

78 
	#IP_RECVTTL
 12

	)

79 
	#IP_RECVTOS
 13

	)

80 
	#IP_MTU
 14

	)

81 
	#IP_FREEBIND
 15

	)

82 
	#IP_IPSEC_POLICY
 16

	)

83 
	#IP_XFRM_POLICY
 17

	)

84 
	#IP_PASSSEC
 18

	)

85 
	#IP_TRANSPARENT
 19

	)

86 
	#IP_MULTICAST_ALL
 49

	)

89 
	#IP_ORIGDSTADDR
 20

	)

90 
	#IP_RECVORIGDSTADDR
 
IP_ORIGDSTADDR


	)

92 
	#IP_MINTTL
 21

	)

93 
	#IP_NODEFRAG
 22

	)

94 
	#IP_CHECKSUM
 23

	)

95 
	#IP_BIND_ADDRESS_NO_PORT
 24

	)

98 
	#IP_PMTUDISC_DONT
 0

	)

99 
	#IP_PMTUDISC_WANT
 1

	)

100 
	#IP_PMTUDISC_DO
 2

	)

101 
	#IP_PMTUDISC_PROBE
 3

	)

105 
	#IP_PMTUDISC_INTERFACE
 4

	)

107 
	#IP_PMTUDISC_OMIT
 5

	)

109 
	#IP_MULTICAST_IF
 32

	)

110 
	#IP_MULTICAST_TTL
 33

	)

111 
	#IP_MULTICAST_LOOP
 34

	)

112 
	#IP_ADD_MEMBERSHIP
 35

	)

113 
	#IP_DROP_MEMBERSHIP
 36

	)

114 
	#IP_UNBLOCK_SOURCE
 37

	)

115 
	#IP_BLOCK_SOURCE
 38

	)

116 
	#IP_ADD_SOURCE_MEMBERSHIP
 39

	)

117 
	#IP_DROP_SOURCE_MEMBERSHIP
 40

	)

118 
	#IP_MSFILTER
 41

	)

119 
	#IP_MULTICAST_ALL
 49

	)

120 
	#IP_UNICAST_IF
 50

	)

123 
	#SOL_IP
 0

	)

125 
	#IP_DEFAULT_MULTICAST_TTL
 1

	)

126 
	#IP_DEFAULT_MULTICAST_LOOP
 1

	)

127 
	#IP_MAX_MEMBERSHIPS
 20

	)

129 #ifde‡
__USE_MISC


133 
	sù_›ts


135 
ö_addr
 
	mù_d°
;

136 
	mù_›ts
[40];

140 
	sù_mªqn


142 
ö_addr
 
	mimr_mu…üddr
;

143 
ö_addr
 
	mimr_addªss
;

144 
	mimr_ifödex
;

148 
	sö_pktöfo


150 
	mùi_ifödex
;

151 
ö_addr
 
	mùi_•ec_d°
;

152 
ö_addr
 
	mùi_addr
;

159 
	#IPV6_ADDRFORM
 1

	)

160 
	#IPV6_2292PKTINFO
 2

	)

161 
	#IPV6_2292HOPOPTS
 3

	)

162 
	#IPV6_2292DSTOPTS
 4

	)

163 
	#IPV6_2292RTHDR
 5

	)

164 
	#IPV6_2292PKTOPTIONS
 6

	)

165 
	#IPV6_CHECKSUM
 7

	)

166 
	#IPV6_2292HOPLIMIT
 8

	)

168 
	#SCM_SRCRT
 
IPV6_RXSRCRT


	)

170 
	#IPV6_NEXTHOP
 9

	)

171 
	#IPV6_AUTHHDR
 10

	)

172 
	#IPV6_UNICAST_HOPS
 16

	)

173 
	#IPV6_MULTICAST_IF
 17

	)

174 
	#IPV6_MULTICAST_HOPS
 18

	)

175 
	#IPV6_MULTICAST_LOOP
 19

	)

176 
	#IPV6_JOIN_GROUP
 20

	)

177 
	#IPV6_LEAVE_GROUP
 21

	)

178 
	#IPV6_ROUTER_ALERT
 22

	)

179 
	#IPV6_MTU_DISCOVER
 23

	)

180 
	#IPV6_MTU
 24

	)

181 
	#IPV6_RECVERR
 25

	)

182 
	#IPV6_V6ONLY
 26

	)

183 
	#IPV6_JOIN_ANYCAST
 27

	)

184 
	#IPV6_LEAVE_ANYCAST
 28

	)

185 
	#IPV6_IPSEC_POLICY
 34

	)

186 
	#IPV6_XFRM_POLICY
 35

	)

189 
	#IPV6_RECVPKTINFO
 49

	)

190 
	#IPV6_PKTINFO
 50

	)

191 
	#IPV6_RECVHOPLIMIT
 51

	)

192 
	#IPV6_HOPLIMIT
 52

	)

193 
	#IPV6_RECVHOPOPTS
 53

	)

194 
	#IPV6_HOPOPTS
 54

	)

195 
	#IPV6_RTHDRDSTOPTS
 55

	)

196 
	#IPV6_RECVRTHDR
 56

	)

197 
	#IPV6_RTHDR
 57

	)

198 
	#IPV6_RECVDSTOPTS
 58

	)

199 
	#IPV6_DSTOPTS
 59

	)

200 
	#IPV6_RECVPATHMTU
 60

	)

201 
	#IPV6_PATHMTU
 61

	)

202 
	#IPV6_DONTFRAG
 62

	)

205 
	#IPV6_RECVTCLASS
 66

	)

206 
	#IPV6_TCLASS
 67

	)

209 
	#IPV6_ADD_MEMBERSHIP
 
IPV6_JOIN_GROUP


	)

210 
	#IPV6_DROP_MEMBERSHIP
 
IPV6_LEAVE_GROUP


	)

211 
	#IPV6_RXHOPOPTS
 
IPV6_HOPOPTS


	)

212 
	#IPV6_RXDSTOPTS
 
IPV6_DSTOPTS


	)

215 
	#IPV6_PMTUDISC_DONT
 0

	)

216 
	#IPV6_PMTUDISC_WANT
 1

	)

217 
	#IPV6_PMTUDISC_DO
 2

	)

218 
	#IPV6_PMTUDISC_PROBE
 3

	)

219 
	#IPV6_PMTUDISC_INTERFACE
 4

	)

220 
	#IPV6_PMTUDISC_OMIT
 5

	)

223 
	#SOL_IPV6
 41

	)

224 
	#SOL_ICMPV6
 58

	)

227 
	#IPV6_RTHDR_LOOSE
 0

	)

228 
	#IPV6_RTHDR_STRICT
 1

	)

230 
	#IPV6_RTHDR_TYPE_0
 0

	)

	@/usr/include/bits/inf.h

19 #i‚de‡
_MATH_H


25 #i‡
__GNUC_PREREQ
(3,3)

26 
	#INFINITY
 (
	`__buûtö_öff
())

	)

28 
	#INFINITY
 
HUGE_VALF


	)

	@/usr/include/bits/ioctl-types.h

19 #i‚de‡
_SYS_IOCTL_H


24 
	~<asm/io˘ls.h
>

27 
	swösize


29 
	mws_row
;

30 
	mws_cﬁ
;

31 
	mws_xpixñ
;

32 
	mws_ypixñ
;

35 
	#NCC
 8

	)

36 
	sãrmio


38 
	mc_iÊag
;

39 
	mc_oÊag
;

40 
	mc_cÊag
;

41 
	mc_lÊag
;

42 
	mc_löe
;

43 
	mc_cc
[
NCC
];

47 
	#TIOCM_LE
 0x001

	)

48 
	#TIOCM_DTR
 0x002

	)

49 
	#TIOCM_RTS
 0x004

	)

50 
	#TIOCM_ST
 0x008

	)

51 
	#TIOCM_SR
 0x010

	)

52 
	#TIOCM_CTS
 0x020

	)

53 
	#TIOCM_CAR
 0x040

	)

54 
	#TIOCM_RNG
 0x080

	)

55 
	#TIOCM_DSR
 0x100

	)

56 
	#TIOCM_CD
 
TIOCM_CAR


	)

57 
	#TIOCM_RI
 
TIOCM_RNG


	)

62 
	#N_TTY
 0

	)

63 
	#N_SLIP
 1

	)

64 
	#N_MOUSE
 2

	)

65 
	#N_PPP
 3

	)

66 
	#N_STRIP
 4

	)

67 
	#N_AX25
 5

	)

68 
	#N_X25
 6

	)

69 
	#N_6PACK
 7

	)

70 
	#N_MASC
 8

	)

71 
	#N_R3964
 9

	)

72 
	#N_PROFIBUS_FDL
 10

	)

73 
	#N_IRDA
 11

	)

74 
	#N_SMSBLOCK
 12

	)

75 
	#N_HDLC
 13

	)

76 
	#N_SYNC_PPP
 14

	)

77 
	#N_HCI
 15

	)

	@/usr/include/bits/ioctls.h

18 #i‚de‡
_SYS_IOCTL_H


23 
	~<asm/io˘ls.h
>

26 
	#SIOCADDRT
 0x890B

	)

27 
	#SIOCDELRT
 0x890C

	)

28 
	#SIOCRTMSG
 0x890D

	)

31 
	#SIOCGIFNAME
 0x8910

	)

32 
	#SIOCSIFLINK
 0x8911

	)

33 
	#SIOCGIFCONF
 0x8912

	)

34 
	#SIOCGIFFLAGS
 0x8913

	)

35 
	#SIOCSIFFLAGS
 0x8914

	)

36 
	#SIOCGIFADDR
 0x8915

	)

37 
	#SIOCSIFADDR
 0x8916

	)

38 
	#SIOCGIFDSTADDR
 0x8917

	)

39 
	#SIOCSIFDSTADDR
 0x8918

	)

40 
	#SIOCGIFBRDADDR
 0x8919

	)

41 
	#SIOCSIFBRDADDR
 0x891®

	)

42 
	#SIOCGIFNETMASK
 0x891b

	)

43 
	#SIOCSIFNETMASK
 0x891¯

	)

44 
	#SIOCGIFMETRIC
 0x891d

	)

45 
	#SIOCSIFMETRIC
 0x891ê

	)

46 
	#SIOCGIFMEM
 0x891‡

	)

47 
	#SIOCSIFMEM
 0x8920

	)

48 
	#SIOCGIFMTU
 0x8921

	)

49 
	#SIOCSIFMTU
 0x8922

	)

50 
	#SIOCSIFNAME
 0x8923

	)

51 
	#SIOCSIFHWADDR
 0x8924

	)

52 
	#SIOCGIFENCAP
 0x8925

	)

53 
	#SIOCSIFENCAP
 0x8926

	)

54 
	#SIOCGIFHWADDR
 0x8927

	)

55 
	#SIOCGIFSLAVE
 0x8929

	)

56 
	#SIOCSIFSLAVE
 0x8930

	)

57 
	#SIOCADDMULTI
 0x8931

	)

58 
	#SIOCDELMULTI
 0x8932

	)

59 
	#SIOCGIFINDEX
 0x8933

	)

60 
	#SIOGIFINDEX
 
SIOCGIFINDEX


	)

61 
	#SIOCSIFPFLAGS
 0x8934

	)

62 
	#SIOCGIFPFLAGS
 0x8935

	)

63 
	#SIOCDIFADDR
 0x8936

	)

64 
	#SIOCSIFHWBROADCAST
 0x8937

	)

65 
	#SIOCGIFCOUNT
 0x8938

	)

67 
	#SIOCGIFBR
 0x8940

	)

68 
	#SIOCSIFBR
 0x8941

	)

70 
	#SIOCGIFTXQLEN
 0x8942

	)

71 
	#SIOCSIFTXQLEN
 0x8943

	)

76 
	#SIOCDARP
 0x8953

	)

77 
	#SIOCGARP
 0x8954

	)

78 
	#SIOCSARP
 0x8955

	)

81 
	#SIOCDRARP
 0x8960

	)

82 
	#SIOCGRARP
 0x8961

	)

83 
	#SIOCSRARP
 0x8962

	)

87 
	#SIOCGIFMAP
 0x8970

	)

88 
	#SIOCSIFMAP
 0x8971

	)

92 
	#SIOCADDDLCI
 0x8980

	)

93 
	#SIOCDELDLCI
 0x8981

	)

102 
	#SIOCDEVPRIVATE
 0x89F0

	)

108 
	#SIOCPROTOPRIVATE
 0x89E0

	)

	@/usr/include/bits/math-finite.h

19 #i‚de‡
_MATH_H


24 
__REDIRECT_NTH
 (
acos
, (), 
__acos_föôe
);

25 #ifde‡
__USE_ISOC99


26 
__REDIRECT_NTH
 (
acosf
, (), 
__acosf_föôe
);

27 #ifde‡
__MATH_DECLARE_LDOUBLE


28 #ifde‡
__NO_LONG_DOUBLE_MATH


29 
__REDIRECT_NTH
 (
aco¶
, (), 
__acos_föôe
);

31 
__REDIRECT_NTH
 (
aco¶
, (), 
__aco¶_föôe
);

36 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


38 
__REDIRECT_NTH
 (
acosh
, (), 
__acosh_föôe
);

40 #ifde‡
__USE_ISOC99


41 
__REDIRECT_NTH
 (
acoshf
, (), 
__acoshf_föôe
);

42 #ifde‡
__MATH_DECLARE_LDOUBLE


43 #ifde‡
__NO_LONG_DOUBLE_MATH


44 
__REDIRECT_NTH
 (
acoshl
, (), 
__acosh_föôe
);

46 
__REDIRECT_NTH
 (
acoshl
, (), 
__acoshl_föôe
);

52 
__REDIRECT_NTH
 (
asö
, (), 
__asö_föôe
);

53 #ifde‡
__USE_ISOC99


54 
__REDIRECT_NTH
 (
asöf
, (), 
__asöf_föôe
);

55 #ifde‡
__MATH_DECLARE_LDOUBLE


56 #ifde‡
__NO_LONG_DOUBLE_MATH


57 
__REDIRECT_NTH
 (
asöl
, (), 
__asö_föôe
);

59 
__REDIRECT_NTH
 (
asöl
, (), 
__asöl_föôe
);

65 
__REDIRECT_NTH
 (
©™2
, (, ), 
__©™2_föôe
);

66 #ifde‡
__USE_ISOC99


67 
__REDIRECT_NTH
 (
©™2f
, (, ), 
__©™2f_föôe
);

68 #ifde‡
__MATH_DECLARE_LDOUBLE


69 #ifde‡
__NO_LONG_DOUBLE_MATH


70 
__REDIRECT_NTH
 (
©™2l
, (, ),

71 
__©™2_föôe
);

73 
__REDIRECT_NTH
 (
©™2l
, (, ),

74 
__©™2l_föôe
);

79 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


81 
__REDIRECT_NTH
 (
©™h
, (), 
__©™h_föôe
);

83 #ifde‡
__USE_ISOC99


84 
__REDIRECT_NTH
 (
©™hf
, (), 
__©™hf_föôe
);

85 #ifde‡
__MATH_DECLARE_LDOUBLE


86 #ifde‡
__NO_LONG_DOUBLE_MATH


87 
__REDIRECT_NTH
 (
©™hl
, (), 
__©™h_föôe
);

89 
__REDIRECT_NTH
 (
©™hl
, (), 
__©™hl_föôe
);

95 
__REDIRECT_NTH
 (
cosh
, (), 
__cosh_föôe
);

96 #ifde‡
__USE_ISOC99


97 
__REDIRECT_NTH
 (
coshf
, (), 
__coshf_föôe
);

98 #ifde‡
__MATH_DECLARE_LDOUBLE


99 #ifde‡
__NO_LONG_DOUBLE_MATH


100 
__REDIRECT_NTH
 (
coshl
, (), 
__cosh_föôe
);

102 
__REDIRECT_NTH
 (
coshl
, (), 
__coshl_föôe
);

108 
__REDIRECT_NTH
 (
exp
, (), 
__exp_föôe
);

109 #ifde‡
__USE_ISOC99


110 
__REDIRECT_NTH
 (
expf
, (), 
__expf_föôe
);

111 #ifde‡
__MATH_DECLARE_LDOUBLE


112 #ifde‡
__NO_LONG_DOUBLE_MATH


113 
__REDIRECT_NTH
 (
ex∂
, (), 
__exp_föôe
);

115 
__REDIRECT_NTH
 (
ex∂
, (), 
__ex∂_föôe
);

120 #ifde‡
__USE_GNU


122 
__REDIRECT_NTH
 (
exp10
, (), 
__exp10_föôe
);

123 
__REDIRECT_NTH
 (
exp10f
, (), 
__exp10f_föôe
);

124 #ifde‡
__MATH_DECLARE_LDOUBLE


125 #ifde‡
__NO_LONG_DOUBLE_MATH


126 
__REDIRECT_NTH
 (
exp10l
, (), 
__exp10_föôe
);

128 
__REDIRECT_NTH
 (
exp10l
, (), 
__exp10l_föôe
);

133 
__REDIRECT_NTH
 (
pow10
, (), 
__exp10_föôe
);

134 
__REDIRECT_NTH
 (
pow10f
, (), 
__exp10f_föôe
);

135 #ifde‡
__MATH_DECLARE_LDOUBLE


136 #ifde‡
__NO_LONG_DOUBLE_MATH


137 
__REDIRECT_NTH
 (
pow10l
, (), 
__exp10_föôe
);

139 
__REDIRECT_NTH
 (
pow10l
, (), 
__exp10l_föôe
);

144 #ifde‡
__USE_ISOC99


146 
__REDIRECT_NTH
 (
exp2
, (), 
__exp2_föôe
);

147 
__REDIRECT_NTH
 (
exp2f
, (), 
__exp2f_föôe
);

148 #ifde‡
__MATH_DECLARE_LDOUBLE


149 #ifde‡
__NO_LONG_DOUBLE_MATH


150 
__REDIRECT_NTH
 (
exp2l
, (), 
__exp2_föôe
);

152 
__REDIRECT_NTH
 (
exp2l
, (), 
__exp2l_föôe
);

158 
__REDIRECT_NTH
 (
fmod
, (, ), 
__fmod_föôe
);

159 #ifde‡
__USE_ISOC99


160 
__REDIRECT_NTH
 (
fmodf
, (, ), 
__fmodf_föôe
);

161 #ifde‡
__MATH_DECLARE_LDOUBLE


162 #ifde‡
__NO_LONG_DOUBLE_MATH


163 
__REDIRECT_NTH
 (
fmodl
, (, ),

164 
__fmod_föôe
);

166 
__REDIRECT_NTH
 (
fmodl
, (, ),

167 
__fmodl_föôe
);

172 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_ISOC99


174 
__REDIRECT_NTH
 (
hypŸ
, (, ), 
__hypŸ_föôe
);

176 #ifde‡
__USE_ISOC99


177 
__REDIRECT_NTH
 (
hypŸf
, (, ), 
__hypŸf_föôe
);

178 #ifde‡
__MATH_DECLARE_LDOUBLE


179 #ifde‡
__NO_LONG_DOUBLE_MATH


180 
__REDIRECT_NTH
 (
hypŸl
, (, ),

181 
__hypŸ_föôe
);

183 
__REDIRECT_NTH
 (
hypŸl
, (, ),

184 
__hypŸl_föôe
);

189 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


191 
__REDIRECT_NTH
 (
j0
, (), 
__j0_föôe
);

193 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_ISOC99


194 
__REDIRECT_NTH
 (
j0f
, (), 
__j0f_föôe
);

195 #ifde‡
__MATH_DECLARE_LDOUBLE


196 #ifde‡
__NO_LONG_DOUBLE_MATH


197 
__REDIRECT_NTH
 (
j0l
, (), 
__j0_föôe
);

199 
__REDIRECT_NTH
 (
j0l
, (), 
__j0l_föôe
);

204 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


206 
__REDIRECT_NTH
 (
y0
, (), 
__y0_föôe
);

208 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_ISOC99


209 
__REDIRECT_NTH
 (
y0f
, (), 
__y0f_föôe
);

210 #ifde‡
__MATH_DECLARE_LDOUBLE


211 #ifde‡
__NO_LONG_DOUBLE_MATH


212 
__REDIRECT_NTH
 (
y0l
, (), 
__y0_föôe
);

214 
__REDIRECT_NTH
 (
y0l
, (), 
__y0l_föôe
);

219 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


221 
__REDIRECT_NTH
 (
j1
, (), 
__j1_föôe
);

223 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_ISOC99


224 
__REDIRECT_NTH
 (
j1f
, (), 
__j1f_föôe
);

225 #ifde‡
__MATH_DECLARE_LDOUBLE


226 #ifde‡
__NO_LONG_DOUBLE_MATH


227 
__REDIRECT_NTH
 (
j1l
, (), 
__j1_föôe
);

229 
__REDIRECT_NTH
 (
j1l
, (), 
__j1l_föôe
);

234 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


236 
__REDIRECT_NTH
 (
y1
, (), 
__y1_föôe
);

238 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_ISOC99


239 
__REDIRECT_NTH
 (
y1f
, (), 
__y1f_föôe
);

240 #ifde‡
__MATH_DECLARE_LDOUBLE


241 #ifde‡
__NO_LONG_DOUBLE_MATH


242 
__REDIRECT_NTH
 (
y1l
, (), 
__y1_föôe
);

244 
__REDIRECT_NTH
 (
y1l
, (), 
__y1l_föôe
);

249 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


251 
__REDIRECT_NTH
 (
jn
, (, ), 
__jn_föôe
);

253 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_ISOC99


254 
__REDIRECT_NTH
 (
jnf
, (, ), 
__jnf_föôe
);

255 #ifde‡
__MATH_DECLARE_LDOUBLE


256 #ifde‡
__NO_LONG_DOUBLE_MATH


257 
__REDIRECT_NTH
 (
j∆
, (, ), 
__jn_föôe
);

259 
__REDIRECT_NTH
 (
j∆
, (, ), 
__j∆_föôe
);

264 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


266 
__REDIRECT_NTH
 (
yn
, (, ), 
__yn_föôe
);

268 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_ISOC99


269 
__REDIRECT_NTH
 (
ynf
, (, ), 
__ynf_föôe
);

270 #ifde‡
__MATH_DECLARE_LDOUBLE


271 #ifde‡
__NO_LONG_DOUBLE_MATH


272 
__REDIRECT_NTH
 (
y∆
, (, ), 
__yn_föôe
);

274 
__REDIRECT_NTH
 (
y∆
, (, ), 
__y∆_föôe
);

279 #ifde‡
__USE_MISC


281 
__REDIRECT_NTH
 (
lgamma_r
, (, *), 
__lgamma_r_föôe
);

282 #ifde‡
__USE_ISOC99


283 
__REDIRECT_NTH
 (
lgammaf_r
, (, *), 
__lgammaf_r_föôe
);

284 #ifde‡
__MATH_DECLARE_LDOUBLE


285 #ifde‡
__NO_LONG_DOUBLE_MATH


286 
__REDIRECT_NTH
 (
lgammÆ_r
, (, *),

287 
__lgamma_r_föôe
);

289 
__REDIRECT_NTH
 (
lgammÆ_r
, (, *),

290 
__lgammÆ_r_föôe
);

296 
__lgamma_r_föôe
 (, *);

297 
__lgammaf_r_föôe
 (, *);

298 #ifde‡
__NO_LONG_DOUBLE_MATH


299 
__REDIRECT_NTH
 (
__lgammÆ_r_föôe
, (, *),

300 
__lgamma_r_föôe
);

302 
__lgammÆ_r_föôe
 (, *);

305 #i‡((
deföed
 
__USE_XOPEN
 || deföed 
__USE_ISOC99
) \

306 && 
deföed
 
	g__exã∫_Æways_ölöe
)

308 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgamma
 (
__d
))

310 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


311  
	`__lgamma_r_föôe
 (
__d
, &
signgam
);

313 
__loˇl_signgam
 = 0;

314  
	`__lgamma_r_föôe
 (
__d
, &
__loˇl_signgam
);

316 
	}
}

318 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__exã∫_Æways_ölöe


319 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgammaf
 (
__d
))

321 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


322  
	`__lgammaf_r_föôe
 (
__d
, &
signgam
);

324 
__loˇl_signgam
 = 0;

325  
	`__lgammaf_r_föôe
 (
__d
, &
__loˇl_signgam
);

327 
	}
}

328 #ifde‡
__MATH_DECLARE_LDOUBLE


329 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgammÆ
 (
__d
))

331 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


332  
	`__lgammÆ_r_föôe
 (
__d
, &
signgam
);

334 
__loˇl_signgam
 = 0;

335  
	`__lgammÆ_r_föôe
 (
__d
, &
__loˇl_signgam
);

337 
	}
}

341 #i‡((
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)) \

342 && 
deföed
 
	g__exã∫_Æways_ölöe
)

344 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gamma
 (
__d
))

346  
	`__lgamma_r_föôe
 (
__d
, &
signgam
);

347 
	}
}

348 #ifde‡
__USE_ISOC99


349 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gammaf
 (
__d
))

351  
	`__lgammaf_r_föôe
 (
__d
, &
signgam
);

352 
	}
}

353 #ifde‡
__MATH_DECLARE_LDOUBLE


354 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gammÆ
 (
__d
))

356  
	`__lgammÆ_r_föôe
 (
__d
, &
signgam
);

357 
	}
}

363 
__REDIRECT_NTH
 (
log
, (), 
__log_föôe
);

364 #ifde‡
__USE_ISOC99


365 
__REDIRECT_NTH
 (
logf
, (), 
__logf_föôe
);

366 #ifde‡
__MATH_DECLARE_LDOUBLE


367 #ifde‡
__NO_LONG_DOUBLE_MATH


368 
__REDIRECT_NTH
 (
logl
, (), 
__log_föôe
);

370 
__REDIRECT_NTH
 (
logl
, (), 
__logl_föôe
);

376 
__REDIRECT_NTH
 (
log10
, (), 
__log10_föôe
);

377 #ifde‡
__USE_ISOC99


378 
__REDIRECT_NTH
 (
log10f
, (), 
__log10f_föôe
);

379 #ifde‡
__MATH_DECLARE_LDOUBLE


380 #ifde‡
__NO_LONG_DOUBLE_MATH


381 
__REDIRECT_NTH
 (
log10l
, (), 
__log10_föôe
);

383 
__REDIRECT_NTH
 (
log10l
, (), 
__log10l_föôe
);

388 #ifde‡
__USE_ISOC99


390 
__REDIRECT_NTH
 (
log2
, (), 
__log2_föôe
);

391 
__REDIRECT_NTH
 (
log2f
, (), 
__log2f_föôe
);

392 #ifde‡
__MATH_DECLARE_LDOUBLE


393 #ifde‡
__NO_LONG_DOUBLE_MATH


394 
__REDIRECT_NTH
 (
log2l
, (), 
__log2_föôe
);

396 
__REDIRECT_NTH
 (
log2l
, (), 
__log2l_föôe
);

402 
__REDIRECT_NTH
 (
pow
, (, ), 
__pow_föôe
);

403 #ifde‡
__USE_ISOC99


404 
__REDIRECT_NTH
 (
powf
, (, ), 
__powf_föôe
);

405 #ifde‡
__MATH_DECLARE_LDOUBLE


406 #ifde‡
__NO_LONG_DOUBLE_MATH


407 
__REDIRECT_NTH
 (
powl
, (, ),

408 
__pow_föôe
);

410 
__REDIRECT_NTH
 (
powl
, (, ),

411 
__powl_föôe
);

416 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


418 
__REDIRECT_NTH
 (
ªmaödî
, (, ), 
__ªmaödî_föôe
);

420 #ifde‡
__USE_ISOC99


421 
__REDIRECT_NTH
 (
ªmaödîf
, (, ), 
__ªmaödîf_föôe
);

422 #ifde‡
__MATH_DECLARE_LDOUBLE


423 #ifde‡
__NO_LONG_DOUBLE_MATH


424 
__REDIRECT_NTH
 (
ªmaödîl
, (, ),

425 
__ªmaödî_föôe
);

427 
__REDIRECT_NTH
 (
ªmaödîl
, (, ),

428 
__ªmaödîl_föôe
);

433 #i‡(
deföed
 
__USE_MISC
 \

434 || (
deföed
 
	g__USE_XOPEN_EXTENDED
 && !deföed 
	g__USE_XOPEN2K8
))

436 
__REDIRECT_NTH
 (
sˇlb
, (, ), 
__sˇlb_föôe
);

438 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_ISOC99


439 
__REDIRECT_NTH
 (
sˇlbf
, (, ), 
__sˇlbf_föôe
);

440 #ifde‡
__MATH_DECLARE_LDOUBLE


441 #ifde‡
__NO_LONG_DOUBLE_MATH


442 
__REDIRECT_NTH
 (
sˇlbl
, (, ),

443 
__sˇlb_föôe
);

445 
__REDIRECT_NTH
 (
sˇlbl
, (, ),

446 
__sˇlbl_föôe
);

452 
__REDIRECT_NTH
 (
söh
, (), 
__söh_föôe
);

453 #ifde‡
__USE_ISOC99


454 
__REDIRECT_NTH
 (
söhf
, (), 
__söhf_föôe
);

455 #ifde‡
__MATH_DECLARE_LDOUBLE


456 #ifde‡
__NO_LONG_DOUBLE_MATH


457 
__REDIRECT_NTH
 (
söhl
, (), 
__söh_föôe
);

459 
__REDIRECT_NTH
 (
söhl
, (), 
__söhl_föôe
);

465 
__REDIRECT_NTH
 (
sqπ
, (), 
__sqπ_föôe
);

466 #ifde‡
__USE_ISOC99


467 
__REDIRECT_NTH
 (
sqπf
, (), 
__sqπf_föôe
);

468 #ifde‡
__MATH_DECLARE_LDOUBLE


469 #ifde‡
__NO_LONG_DOUBLE_MATH


470 
__REDIRECT_NTH
 (
sqπl
, (), 
__sqπ_föôe
);

472 
__REDIRECT_NTH
 (
sqπl
, (), 
__sqπl_föôe
);

477 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__exã∫_Æways_ölöe


479 
__gamma_r_föôe
 (, *);

480 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgamma
 (
__d
))

482 
__loˇl_signgam
 = 0;

483 
__ªs
 = 
	`__gamma_r_föôe
 (
__d
, &
__loˇl_signgam
);

484  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

485 
	}
}

486 
__gammaf_r_föôe
 (, *);

487 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgammaf
 (
__d
))

489 
__loˇl_signgam
 = 0;

490 
__ªs
 = 
	`__gammaf_r_föôe
 (
__d
, &
__loˇl_signgam
);

491  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

492 
	}
}

493 #ifde‡
__MATH_DECLARE_LDOUBLE


494 
__gammÆ_r_föôe
 (, *);

495 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgammÆ
 (
__d
))

497 
__loˇl_signgam
 = 0;

498 #ifde‡
__NO_LONG_DOUBLE_MATH


499 
__ªs
 = 
	`__gamma_r_föôe
 (
__d
, &
__loˇl_signgam
);

501 
__ªs
 = 
	`__gammÆ_r_föôe
 (
__d
, &
__loˇl_signgam
);

503  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

504 
	}
}

	@/usr/include/bits/math-vector.h

19 #i‚de‡
_MATH_H


25 
	~<bôs/libm-simd-de˛-°ubs.h
>

27 #i‡
deföed
 
__x86_64__
 && deföed 
__FAST_MATH__


28 #i‡
deföed
 
_OPENMP
 && _OPENMP >= 201307

30 
	#__DECL_SIMD_x86_64
 
	`_Pøgma
 ("om∞de˛¨êsimdÇŸöbønch")

	)

31 #ñi‡
__GNUC_PREREQ
 (6,0)

33 
	#__DECL_SIMD_x86_64
 
	`__©åibuã__
 ((
	`__simd__
 ("nŸöbønch")))

	)

36 #ifde‡
__DECL_SIMD_x86_64


37 #unde‡
__DECL_SIMD_cos


38 
	#__DECL_SIMD_cos
 
__DECL_SIMD_x86_64


	)

39 #unde‡
__DECL_SIMD_cosf


40 
	#__DECL_SIMD_cosf
 
__DECL_SIMD_x86_64


	)

41 #unde‡
__DECL_SIMD_sö


42 
	#__DECL_SIMD_sö
 
__DECL_SIMD_x86_64


	)

43 #unde‡
__DECL_SIMD_söf


44 
	#__DECL_SIMD_söf
 
__DECL_SIMD_x86_64


	)

45 #unde‡
__DECL_SIMD_söcos


46 
	#__DECL_SIMD_söcos
 
__DECL_SIMD_x86_64


	)

47 #unde‡
__DECL_SIMD_söcosf


48 
	#__DECL_SIMD_söcosf
 
__DECL_SIMD_x86_64


	)

49 #unde‡
__DECL_SIMD_log


50 
	#__DECL_SIMD_log
 
__DECL_SIMD_x86_64


	)

51 #unde‡
__DECL_SIMD_logf


52 
	#__DECL_SIMD_logf
 
__DECL_SIMD_x86_64


	)

53 #unde‡
__DECL_SIMD_exp


54 
	#__DECL_SIMD_exp
 
__DECL_SIMD_x86_64


	)

55 #unde‡
__DECL_SIMD_expf


56 
	#__DECL_SIMD_expf
 
__DECL_SIMD_x86_64


	)

57 #unde‡
__DECL_SIMD_pow


58 
	#__DECL_SIMD_pow
 
__DECL_SIMD_x86_64


	)

59 #unde‡
__DECL_SIMD_powf


60 
	#__DECL_SIMD_powf
 
__DECL_SIMD_x86_64


	)

	@/usr/include/bits/mathcalls.h

45 #i‚de‡
_MATH_H


52 
_MdoubÀ_BEGIN_NAMESPACE


54 
__MATHCALL
 (
acos
,, (
_MdoubÀ_
 
__x
));

56 
__MATHCALL
 (
asö
,, (
_MdoubÀ_
 
__x
));

58 
__MATHCALL
 (
©™
,, (
_MdoubÀ_
 
__x
));

60 
__MATHCALL
 (
©™2
,, (
_MdoubÀ_
 
__y
, _MdoubÀ_ 
__x
));

63 
__MATHCALL_VEC
 (
cos
,, (
_MdoubÀ_
 
__x
));

65 
__MATHCALL_VEC
 (
sö
,, (
_MdoubÀ_
 
__x
));

67 
__MATHCALL
 (
èn
,, (
_MdoubÀ_
 
__x
));

72 
__MATHCALL
 (
cosh
,, (
_MdoubÀ_
 
__x
));

74 
__MATHCALL
 (
söh
,, (
_MdoubÀ_
 
__x
));

76 
__MATHCALL
 (
ènh
,, (
_MdoubÀ_
 
__x
));

77 
	g_MdoubÀ_END_NAMESPACE


79 #ifde‡
__USE_GNU


81 
__MATHDECL_VEC
 (,
söcos
,,

82 (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__söx
, _MdoubÀ_ *
__cosx
));

85 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


86 
__BEGIN_NAMESPACE_C99


88 
__MATHCALL
 (
acosh
,, (
_MdoubÀ_
 
__x
));

90 
__MATHCALL
 (
asöh
,, (
_MdoubÀ_
 
__x
));

92 
__MATHCALL
 (
©™h
,, (
_MdoubÀ_
 
__x
));

93 
	g__END_NAMESPACE_C99


98 
_MdoubÀ_BEGIN_NAMESPACE


100 
__MATHCALL_VEC
 (
exp
,, (
_MdoubÀ_
 
__x
));

103 
__MATHCALL
 (
‰exp
,, (
_MdoubÀ_
 
__x
, *
__exp⁄ít
));

106 
__MATHCALL
 (
ldexp
,, (
_MdoubÀ_
 
__x
, 
__exp⁄ít
));

109 
__MATHCALL_VEC
 (
log
,, (
_MdoubÀ_
 
__x
));

112 
__MATHCALL
 (
log10
,, (
_MdoubÀ_
 
__x
));

115 
__MATHCALL
 (
modf
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__ùå
)Ë
__n⁄nuŒ
 ((2));

116 
	g_MdoubÀ_END_NAMESPACE


118 #ifde‡
__USE_GNU


120 
__MATHCALL
 (
exp10
,, (
_MdoubÀ_
 
__x
));

122 
__MATHCALL
 (
pow10
,, (
_MdoubÀ_
 
__x
));

125 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


126 
__BEGIN_NAMESPACE_C99


128 
__MATHCALL
 (
expm1
,, (
_MdoubÀ_
 
__x
));

131 
__MATHCALL
 (
log1p
,, (
_MdoubÀ_
 
__x
));

134 
__MATHCALL
 (
logb
,, (
_MdoubÀ_
 
__x
));

135 
	g__END_NAMESPACE_C99


138 #ifde‡
__USE_ISOC99


139 
__BEGIN_NAMESPACE_C99


141 
__MATHCALL
 (
exp2
,, (
_MdoubÀ_
 
__x
));

144 
__MATHCALL
 (
log2
,, (
_MdoubÀ_
 
__x
));

145 
	g__END_NAMESPACE_C99


151 
_MdoubÀ_BEGIN_NAMESPACE


153 
__MATHCALL_VEC
 (
pow
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

156 
__MATHCALL
 (
sqπ
,, (
_MdoubÀ_
 
__x
));

157 
	g_MdoubÀ_END_NAMESPACE


159 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_ISOC99


160 
__BEGIN_NAMESPACE_C99


162 
__MATHCALL
 (
hypŸ
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

163 
	g__END_NAMESPACE_C99


166 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


167 
__BEGIN_NAMESPACE_C99


169 
__MATHCALL
 (
cbπ
,, (
_MdoubÀ_
 
__x
));

170 
	g__END_NAMESPACE_C99


176 
_MdoubÀ_BEGIN_NAMESPACE


178 
__MATHCALLX
 (
˚û
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

181 
__MATHCALLX
 (
Ábs
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

184 
__MATHCALLX
 (
Êo‹
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

187 
__MATHCALL
 (
fmod
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

192 
__MATHDECL_1
 (,
__isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

195 
__MATHDECL_1
 (,
__föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

196 
	g_MdoubÀ_END_NAMESPACE


198 #ifde‡
__USE_MISC


199 #i‡(!
deföed
 
__˝lu•lus
 \

200 || 
	g__˝lu•lus
 < 201103L \

201 || 
	g__MATH_DECLARING_DOUBLE
 == 0)

204 
__MATHDECL_1
 (,
isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

208 
__MATHDECL_1
 (,
föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

211 
__MATHCALL
 (
dªm
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

215 
__MATHCALL
 (
signifiˇnd
,, (
_MdoubÀ_
 
__x
));

218 #ifde‡
__USE_ISOC99


219 
__BEGIN_NAMESPACE_C99


221 
__MATHCALLX
 (
c›ysign
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

222 
	g__END_NAMESPACE_C99


225 #ifde‡
__USE_ISOC99


226 
__BEGIN_NAMESPACE_C99


228 
__MATHCALLX
 (
«n
,, (c⁄° *
__ègb
), (
__c⁄°__
));

229 
	g__END_NAMESPACE_C99


234 
__MATHDECL_1
 (,
__i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

236 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

237 #i‡(!
deföed
 
__˝lu•lus
 \

238 || 
	g__˝lu•lus
 < 201103L \

239 || 
	g__MATH_DECLARING_DOUBLE
 == 0)

241 
__MATHDECL_1
 (,
i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

245 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && 
__MATH_DECLARING_DOUBLE
)

247 
__MATHCALL
 (
j0
,, (
_MdoubÀ_
));

248 
__MATHCALL
 (
j1
,, (
_MdoubÀ_
));

249 
__MATHCALL
 (
jn
,, (, 
_MdoubÀ_
));

250 
__MATHCALL
 (
y0
,, (
_MdoubÀ_
));

251 
__MATHCALL
 (
y1
,, (
_MdoubÀ_
));

252 
__MATHCALL
 (
yn
,, (, 
_MdoubÀ_
));

256 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_ISOC99


257 
__BEGIN_NAMESPACE_C99


259 
__MATHCALL
 (
îf
,, (
_MdoubÀ_
));

260 
__MATHCALL
 (
îfc
,, (
_MdoubÀ_
));

261 
__MATHCALL
 (
lgamma
,, (
_MdoubÀ_
));

262 
	g__END_NAMESPACE_C99


265 #ifde‡
__USE_ISOC99


266 
__BEGIN_NAMESPACE_C99


268 
__MATHCALL
 (
tgamma
,, (
_MdoubÀ_
));

269 
	g__END_NAMESPACE_C99


272 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

274 
__MATHCALL
 (
gamma
,, (
_MdoubÀ_
));

277 #ifde‡
__USE_MISC


281 
__MATHCALL
 (
lgamma
,
_r
, (
_MdoubÀ_
, *
__signgamp
));

285 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


286 
__BEGIN_NAMESPACE_C99


289 
__MATHCALL
 (
röt
,, (
_MdoubÀ_
 
__x
));

292 
__MATHCALLX
 (
√xè·î
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

293 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__LDBL_COMPAT


294 
__MATHCALLX
 (
√xâow¨d
,, (
_MdoubÀ_
 
__x
, 
__y
), (
__c⁄°__
));

298 
__MATHCALL
 (
ªmaödî
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

300 #ifde‡
__USE_ISOC99


302 
__MATHCALL
 (
sˇlbn
,, (
_MdoubÀ_
 
__x
, 
__n
));

306 
__MATHDECL
 (,
ûogb
,, (
_MdoubÀ_
 
__x
));

309 #ifde‡
__USE_ISOC99


311 
__MATHCALL
 (
sˇlb 
,, (
_MdoubÀ_
 
__x
, 
__n
));

315 
__MATHCALL
 (
√¨byöt
,, (
_MdoubÀ_
 
__x
));

319 
__MATHCALLX
 (
round
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

323 
__MATHCALLX
 (
åunc
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

328 
__MATHCALL
 (
ªmquo
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, *
__quo
));

335 
__MATHDECL
 (,
Ãöt
,, (
_MdoubÀ_
 
__x
));

336 
__exãnsi⁄__


337 
__MATHDECL
 (,
Œröt
,, (
_MdoubÀ_
 
__x
));

341 
__MATHDECL
 (,
Ãound
,, (
_MdoubÀ_
 
__x
));

342 
__exãnsi⁄__


343 
__MATHDECL
 (,
Œround
,, (
_MdoubÀ_
 
__x
));

347 
__MATHCALL
 (
fdim
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

350 
__MATHCALLX
 (
fmax
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

353 
__MATHCALLX
 (
fmö
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

357 
__MATHDECL_1
 (, 
__Â˛assify
,, (
_MdoubÀ_
 
__vÆue
))

358 
__©åibuã__
 ((
__c⁄°__
));

361 
__MATHDECL_1
 (, 
__signbô
,, (
_MdoubÀ_
 
__vÆue
))

362 
__©åibuã__
 ((
__c⁄°__
));

366 
__MATHCALL
 (
fma
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, _MdoubÀ_ 
__z
));

369 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


370 
	g__END_NAMESPACE_C99


373 #ifde‡
__USE_GNU


375 
__MATHDECL_1
 (, 
__issig«lög
,, (
_MdoubÀ_
 
__vÆue
))

376 
__©åibuã__
 ((
__c⁄°__
));

379 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

380 && 
	g__MATH_DECLARING_DOUBLE
 \

381 && !
deföed
 
	g__USE_XOPEN2K8
)

383 
__MATHCALL
 (
sˇlb
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__n
));

	@/usr/include/bits/mathdef.h

18 #i‡!
deföed
 
_MATH_H
 && !deföed 
_COMPLEX_H


22 #i‡
deföed
 
__USE_ISOC99
 && deföed 
_MATH_H
 && !deföed 
_MATH_H_MATHDEF


23 
	#_MATH_H_MATHDEF
 1

	)

25 #i‡
deföed
 
__x86_64__
 || (deföed 
__FLT_EVAL_METHOD__
 && __FLT_EVAL_METHOD__ == 0)

28 
	tÊﬂt_t
;

29 
	tdoubÀ_t
;

35 
	tÊﬂt_t
;

37 
	tdoubÀ_t
;

42 
	#FP_ILOGB0
 (-2147483647 - 1)

	)

43 
	#FP_ILOGBNAN
 (-2147483647 - 1)

	)

47 #ifde‡
__FP_FAST_FMA


48 
	#FP_FAST_FMA
 1

	)

51 #ifde‡
__FP_FAST_FMAF


52 
	#FP_FAST_FMAF
 1

	)

55 #ifde‡
__FP_FAST_FMAL


56 
	#FP_FAST_FMAL
 1

	)

	@/usr/include/bits/mathinline.h

19 #i‚de‡
_MATH_H


23 #i‚de‡
__exã∫_Æways_ölöe


24 
	#__MATH_INLINE
 
__ölöe


	)

26 
	#__MATH_INLINE
 
__exã∫_Æways_ölöe


	)

30 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__
 && __GNUC__ >= 2

32 #i‡!
__GNUC_PREREQ
 (2,97)

37 #unde‡
isgª©î


38 #unde‡
isgª©îequÆ


39 #unde‡
i¶ess


40 #unde‡
i¶es£quÆ


41 #unde‡
i¶essgª©î


42 #unde‡
isun‹dîed


43 #ifde‡
__i686__


46 
	#isgª©î
(
x
, 
y
) \

47 ({ 
__ªsu…
; \

48 
	`__asm__
 ("fucomip %%st(1), %%st; seta %%al" \

49 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

50 
__ªsu…
; })

	)

51 
	#isgª©îequÆ
(
x
, 
y
) \

52 ({ 
__ªsu…
; \

53 
	`__asm__
 ("fucomip %%st(1), %%st; setae %%al" \

54 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

55 
__ªsu…
; })

	)

57 
	#i¶ess
(
x
, 
y
) \

58 ({ 
__ªsu…
; \

59 
	`__asm__
 ("fucomip %%st(1), %%st; seta %%al" \

60 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st"); \

61 
__ªsu…
; })

	)

63 
	#i¶es£quÆ
(
x
, 
y
) \

64 ({ 
__ªsu…
; \

65 
	`__asm__
 ("fucomip %%st(1), %%st; setae %%al" \

66 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st"); \

67 
__ªsu…
; })

	)

69 
	#i¶essgª©î
(
x
, 
y
) \

70 ({ 
__ªsu…
; \

71 
	`__asm__
 ("fucomip %%st(1), %%st; setne %%al" \

72 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

73 
__ªsu…
; })

	)

75 
	#isun‹dîed
(
x
, 
y
) \

76 ({ 
__ªsu…
; \

77 
	`__asm__
 ("fucomip %%st(1), %%st; setp %%al" \

78 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

79 
__ªsu…
; })

	)

82 
	#isgª©î
(
x
, 
y
) \

83 ({ 
__ªsu…
; \

84 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x45, %%ah; setz %%al" \

85 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

86 
__ªsu…
; })

	)

88 
	#isgª©îequÆ
(
x
, 
y
) \

89 ({ 
__ªsu…
; \

90 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x05, %%ah; setz %%al" \

91 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

92 
__ªsu…
; })

	)

94 
	#i¶ess
(
x
, 
y
) \

95 ({ 
__ªsu…
; \

96 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x45, %%ah; setz %%al" \

97 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st", "st(1)"); \

98 
__ªsu…
; })

	)

100 
	#i¶es£quÆ
(
x
, 
y
) \

101 ({ 
__ªsu…
; \

102 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x05, %%ah; setz %%al" \

103 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st", "st(1)"); \

104 
__ªsu…
; })

	)

106 
	#i¶essgª©î
(
x
, 
y
) \

107 ({ 
__ªsu…
; \

108 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x44, %%ah; setz %%al" \

109 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

110 
__ªsu…
; })

	)

112 
	#isun‹dîed
(
x
, 
y
) \

113 ({ 
__ªsu…
; \

114 
	`__asm__
 ("fucompp; fnstsw; sahf; setp %%al" \

115 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

116 
__ªsu…
; })

	)

122 #i‡
__GNUC_PREREQ
 (2, 8)

123 
__BEGIN_NAMESPACE_C99


126 
__MATH_INLINE
 

127 
__NTH
 (
	$__signbôf
 (
__x
))

129 #ifde‡
__SSE2_MATH__


130 
__m
;

131 
	`__asm
 ("pmovmskb %1, %0" : "Ù" (
__m
Ë: "x" (
__x
));

132  (
__m
 & 0x8) != 0;

134 
__exãnsi⁄__
 uni⁄ { 
__f
; 
__i
; } 
__u
 = { __f: 
__x
 };

135  
__u
.
__i
 < 0;

137 
	}
}

138 
__MATH_INLINE
 

139 
__NTH
 (
	$__signbô
 (
__x
))

141 #ifde‡
__SSE2_MATH__


142 
__m
;

143 
	`__asm
 ("pmovmskb %1, %0" : "Ù" (
__m
Ë: "x" (
__x
));

144  (
__m
 & 0x80) != 0;

146 
__exãnsi⁄__
 uni⁄ { 
__d
; 
__i
[2]; } 
__u
 = { __d: 
__x
 };

147  
__u
.
__i
[1] < 0;

149 
	}
}

150 
__MATH_INLINE
 

151 
__NTH
 (
	$__signbôl
 (
__x
))

153 
__exãnsi⁄__
 uni⁄ { 
__l
; 
__i
[3]; } 
__u
 = { __l: 
__x
 };

154  (
__u
.
__i
[2] & 0x8000) != 0;

155 
	}
}

157 
	g__END_NAMESPACE_C99


164 #i‡
__GNUC_PREREQ
 (2, 8)

165 #i‡!
__GNUC_PREREQ
 (3, 4Ë&& !
deföed
 
__NO_MATH_INLINES
 \

166 && 
deföed
 
	g__OPTIMIZE__


170 #ifde‡
__USE_ISOC99


171 
	g__BEGIN_NAMESPACE_C99


174 #ifde‡
__SSE_MATH__


175 
__MATH_INLINE
 

176 
__NTH
 (
	$Ãötf
 (
__x
))

178 
__ªs
;

183 
__asm
 
	`__vﬁ©ûe__
 ("cvtss2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

184  
__ªs
;

185 
	}
}

187 #ifde‡
__SSE2_MATH__


188 
__MATH_INLINE
 

189 
__NTH
 (
	$Ãöt
 (
__x
))

191 
__ªs
;

196 
__asm
 
	`__vﬁ©ûe__
 ("cvtsd2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

197  
__ªs
;

198 
	}
}

200 #ifde‡
__x86_64__


201 
__exãnsi⁄__


202 
__MATH_INLINE
 

203 
__NTH
 (
	$Œrötf
 (
__x
))

205 
__ªs
;

210 
__asm
 
	`__vﬁ©ûe__
 ("cvtss2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

211  
__ªs
;

212 
	}
}

213 
__exãnsi⁄__


214 
__MATH_INLINE
 

215 
__NTH
 (
	$Œröt
 (
__x
))

217 
__ªs
;

222 
__asm
 
	`__vﬁ©ûe__
 ("cvtsd2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

223  
__ªs
;

224 
	}
}

227 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0 \

228 && 
deföed
 
__SSE2_MATH__


230 
__MATH_INLINE
 

231 
__NTH
 (
	$fmaxf
 (
__x
, 
__y
))

233 #ifde‡
__AVX__


234 
__ªs
;

235 
	`__asm
 ("vmaxs†%2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

236  
__ªs
;

238 
	`__asm
 ("maxs†%1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

239  
__x
;

241 
	}
}

242 
__MATH_INLINE
 

243 
__NTH
 (
	$fmax
 (
__x
, 
__y
))

245 #ifde‡
__AVX__


246 
__ªs
;

247 
	`__asm
 ("vmaxsd %2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

248  
__ªs
;

250 
	`__asm
 ("maxsd %1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

251  
__x
;

253 
	}
}

256 
__MATH_INLINE
 

257 
__NTH
 (
	$fmöf
 (
__x
, 
__y
))

259 #ifde‡
__AVX__


260 
__ªs
;

261 
	`__asm
 ("vmös†%2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

262  
__ªs
;

264 
	`__asm
 ("mös†%1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

265  
__x
;

267 
	}
}

268 
__MATH_INLINE
 

269 
__NTH
 (
	$fmö
 (
__x
, 
__y
))

271 #ifde‡
__AVX__


272 
__ªs
;

273 
	`__asm
 ("vmösd %2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

274  
__ªs
;

276 
	`__asm
 ("mösd %1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

277  
__x
;

279 
	}
}

282 
	g__END_NAMESPACE_C99


285 #i‡
deföed
 
__SSE4_1__
 && deföed 
__SSE2_MATH__


286 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


287 
__BEGIN_NAMESPACE_C99


290 
__MATH_INLINE
 

291 
__NTH
 (
	$röt
 (
__x
))

293 
__ªs
;

298 
__asm
 
	`__vﬁ©ûe__
 ("roundsd $4, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

299  
__ªs
;

300 
	}
}

301 
__MATH_INLINE
 

302 
__NTH
 (
	$rötf
 (
__x
))

304 
__ªs
;

309 
__asm
 
	`__vﬁ©ûe__
 ("rounds†$4, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

310  
__ªs
;

311 
	}
}

313 #ifde‡
__USE_ISOC99


315 
__MATH_INLINE
 

316 
__NTH
 (
	$√¨byöt
 (
__x
))

318 
__ªs
;

323 
__asm
 
	`__vﬁ©ûe__
 ("roundsd $0xc, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

324  
__ªs
;

325 
	}
}

326 
__MATH_INLINE
 

327 
__NTH
 (
	$√¨byötf
 (
__x
))

329 
__ªs
;

334 
__asm
 
	`__vﬁ©ûe__
 ("rounds†$0xc, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

335  
__ªs
;

336 
	}
}

339 
	g__END_NAMESPACE_C99


342 
__BEGIN_NAMESPACE_STD


344 
__MATH_INLINE
 

345 
__NTH
 (
	$˚û
 (
__x
))

347 
__ªs
;

348 
	`__asm
 ("roundsd $2, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

349  
__ªs
;

350 
	}
}

351 
__END_NAMESPACE_STD


353 
__BEGIN_NAMESPACE_C99


354 
__MATH_INLINE
 

355 
__NTH
 (
	$˚ûf
 (
__x
))

357 
__ªs
;

358 
	`__asm
 ("rounds†$2, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

359  
__ªs
;

360 
	}
}

361 
__END_NAMESPACE_C99


363 
__BEGIN_NAMESPACE_STD


365 
__MATH_INLINE
 

366 
__NTH
 (
	$Êo‹
 (
__x
))

368 
__ªs
;

369 
	`__asm
 ("roundsd $1, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

370  
__ªs
;

371 
	}
}

372 
__END_NAMESPACE_STD


374 
__BEGIN_NAMESPACE_C99


375 
__MATH_INLINE
 

376 
__NTH
 (
	$Êo‹f
 (
__x
))

378 
__ªs
;

379 
	`__asm
 ("rounds†$1, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

380  
__ªs
;

381 
	}
}

382 
	g__END_NAMESPACE_C99


390 #i‡!
deföed
 
__SSE2_MATH__
 && !deföed 
__x86_64__


391 #i‡((!
deföed
 
__NO_MATH_INLINES
 || deföed 
__LIBC_INTERNAL_MATH_INLINES
) \

392 && 
deföed
 
	g__OPTIMIZE__
)

396 #unde‡
m©h_îrh™dlög


405 #ifde‡
__USE_ISOC99


406 
	#__ölöe_m©h›
(
func
, 
›
) \

407 
	`__ölöe_m©h›_
 (, 
func
, 
›
) \

408 
	`__ölöe_m©h›_
 (, 
	`__CONCAT
(
func
,
f
), 
›
) \

409 
	`__ölöe_m©h›_
 (, 
	`__CONCAT
(
func
,
l
), 
›
)

	)

410 
	#__ölöe_m©h›NP
(
func
, 
›
) \

411 
	`__ölöe_m©h›NP_
 (, 
func
, 
›
) \

412 
	`__ölöe_m©h›NP_
 (, 
	`__CONCAT
(
func
,
f
), 
›
) \

413 
	`__ölöe_m©h›NP_
 (, 
	`__CONCAT
(
func
,
l
), 
›
)

	)

415 
	#__ölöe_m©h›
(
func
, 
›
) \

416 
	`__ölöe_m©h›_
 (, 
func
, 
›
)

	)

417 
	#__ölöe_m©h›NP
(
func
, 
›
) \

418 
	`__ölöe_m©h›NP_
 (, 
func
, 
›
)

	)

421 
	#__ölöe_m©h›_
(
Êﬂt_ty≥
, 
func
, 
›
) \

422 
	`__ölöe_m©h›_de˛_
 (
Êﬂt_ty≥
, 
func
, 
›
, "0" (
__x
))

	)

423 
	#__ölöe_m©h›NP_
(
Êﬂt_ty≥
, 
func
, 
›
) \

424 
	`__ölöe_m©h›_de˛NP_
 (
Êﬂt_ty≥
, 
func
, 
›
, "0" (
__x
))

	)

427 #ifde‡
__USE_ISOC99


428 
	#__ölöe_m©h›_de˛
(
func
, 
›
, 
∑øms
...) \

429 
	`__ölöe_m©h›_de˛_
 (, 
func
, 
›
, 
∑øms
) \

430 
	`__ölöe_m©h›_de˛_
 (, 
	`__CONCAT
(
func
,
f
), 
›
, 
∑øms
) \

431 
	`__ölöe_m©h›_de˛_
 (, 
	`__CONCAT
(
func
,
l
), 
›
, 
∑øms
)

	)

432 
	#__ölöe_m©h›_de˛NP
(
func
, 
›
, 
∑øms
...) \

433 
	`__ölöe_m©h›_de˛NP_
 (, 
func
, 
›
, 
∑øms
) \

434 
	`__ölöe_m©h›_de˛NP_
 (, 
	`__CONCAT
(
func
,
f
), 
›
, 
∑øms
) \

435 
	`__ölöe_m©h›_de˛NP_
 (, 
	`__CONCAT
(
func
,
l
), 
›
, 
∑øms
)

	)

437 
	#__ölöe_m©h›_de˛
(
func
, 
›
, 
∑øms
...) \

438 
	`__ölöe_m©h›_de˛_
 (, 
func
, 
›
, 
∑øms
)

	)

439 
	#__ölöe_m©h›_de˛NP
(
func
, 
›
, 
∑øms
...) \

440 
	`__ölöe_m©h›_de˛NP_
 (, 
func
, 
›
, 
∑øms
)

	)

443 
	#__ölöe_m©h›_de˛_
(
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
...) \

444 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥Ë
__THROW
; \

445 
	`__ölöe_m©h›_de˛NP_
 (
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
)

	)

447 
	#__ölöe_m©h›_de˛NP_
(
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
...) \

448 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
__x
)) \

450 
Êﬂt_ty≥
 
__ªsu…
; \

451 
__asm
 
	`__vﬁ©ûe__
 (
›
 : "Ò" (
__ªsu…
Ë: 
∑øms
); \

452  
__ªsu…
; \

453 }

	)

456 #ifde‡
__USE_ISOC99


457 
	#__ölöe_m©hcode
(
func
, 
¨g
, 
code
) \

458 
	`__ölöe_m©hcode_
 (, 
func
, 
¨g
, 
code
) \

459 
	`__ölöe_m©hcode_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g
, 
code
) \

460 
	`__ölöe_m©hcode_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g
, 
code
)

	)

461 
	#__ölöe_m©hcodeNP
(
func
, 
¨g
, 
code
) \

462 
	`__ölöe_m©hcodeNP_
 (, 
func
, 
¨g
, 
code
) \

463 
	`__ölöe_m©hcodeNP_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g
, 
code
) \

464 
	`__ölöe_m©hcodeNP_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g
, 
code
)

	)

465 
	#__ölöe_m©hcode2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

466 
	`__ölöe_m©hcode2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
) \

467 
	`__ölöe_m©hcode2_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
code
) \

468 
	`__ölöe_m©hcode2_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
code
)

	)

469 
	#__ölöe_m©hcodeNP2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

470 
	`__ölöe_m©hcodeNP2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
) \

471 
	`__ölöe_m©hcodeNP2_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
code
) \

472 
	`__ölöe_m©hcodeNP2_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
code
)

	)

473 
	#__ölöe_m©hcode3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

474 
	`__ölöe_m©hcode3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

475 
	`__ölöe_m©hcode3_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

476 
	`__ölöe_m©hcode3_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

477 
	#__ölöe_m©hcodeNP3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

478 
	`__ölöe_m©hcodeNP3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

479 
	`__ölöe_m©hcodeNP3_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

480 
	`__ölöe_m©hcodeNP3_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

482 
	#__ölöe_m©hcode
(
func
, 
¨g
, 
code
) \

483 
	`__ölöe_m©hcode_
 (, 
func
, (
¨g
), 
code
)

	)

484 
	#__ölöe_m©hcodeNP
(
func
, 
¨g
, 
code
) \

485 
	`__ölöe_m©hcodeNP_
 (, 
func
, (
¨g
), 
code
)

	)

486 
	#__ölöe_m©hcode2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

487 
	`__ölöe_m©hcode2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

488 
	#__ölöe_m©hcodeNP2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

489 
	`__ölöe_m©hcodeNP2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

490 
	#__ölöe_m©hcode3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

491 
	`__ölöe_m©hcode3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

492 
	#__ölöe_m©hcodeNP3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

493 
	`__ölöe_m©hcodeNP3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

496 
	#__ölöe_m©hcode_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
) \

497 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥Ë
__THROW
; \

498 
	`__ölöe_m©hcodeNP_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
)

	)

500 
	#__ölöe_m©hcodeNP_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
) \

501 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g
)) \

503 
code
; \

504 }

	)

507 
	#__ölöe_m©hcode2_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
) \

508 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥, flﬂt_ty≥Ë
__THROW
; \

509 
	`__ölöe_m©hcodeNP2_
 (
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

511 
	#__ölöe_m©hcodeNP2_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
) \

512 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g1
, flﬂt_ty≥ 
¨g2
)) \

514 
code
; \

515 }

	)

517 
	#__ölöe_m©hcode3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

518 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥, flﬂt_ty≥, flﬂt_ty≥Ë
__THROW
; \

519 
	`__ölöe_m©hcodeNP3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

521 
	#__ölöe_m©hcodeNP3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

522 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g1
, flﬂt_ty≥ 
¨g2
, \

523 
Êﬂt_ty≥
 
¨g3
)) \

525 
code
; \

526 }

	)

530 #i‡!
deföed
 
__NO_MATH_INLINES
 && deföed 
__OPTIMIZE__


534 #ifde‡
__FAST_MATH__


535 #ifde‡
__USE_GNU


536 
	#__söcos_code
 \

537 
__co§
; \

538 
__sör
; \

539 
__swtmp
; \

540 
__asm
 
__vﬁ©ûe__
 \

555 : "Ò" (
__co§
), "=u" (
__sör
), "˜" (
__swtmp
Ë: "0" (
__x
)); \

556 *
__söx
 = 
__sör
; \

557 *
__cosx
 = 
__co§


	)

559 
__MATH_INLINE
 

560 
__NTH
 (
	$__söcos
 (
__x
, *
__söx
, *
__cosx
))

562 
__söcos_code
;

563 
	}
}

565 
__MATH_INLINE
 

566 
__NTH
 (
	$__söcosf
 (
__x
, *
__söx
, *
__cosx
))

568 
__söcos_code
;

569 
	}
}

571 
__MATH_INLINE
 

572 
__NTH
 (
	$__söco¶
 (
__x
, *
__söx
, *
__cosx
))

574 
__söcos_code
;

575 
	}
}

582 #i‡
__GNUC_PREREQ
 (3, 5)

583 
	#__expm1_code
 \

584 
__ãmp
; \

585 
__ãmp
 = 
	`__buûtö_expm1l
 (
__x
); \

586  
__ãmp
 ? __ãm∞: 
__x


	)

588 
	#__expm1_code
 \

589 
__vÆue
; \

590 
__exp⁄ít
; \

591 
__ãmp
; \

592 
__asm
 
__vﬁ©ûe__
 \

601 : "Ò" (
__vÆue
), "=u" (
__exp⁄ít
Ë: "0" (
__x
)); \

602 
__asm
 
__vﬁ©ûe__
 \

604 : "Ò" (
__ãmp
Ë: "0" (1.0), "u" (
__exp⁄ít
)); \

605 
__ãmp
 -= 1.0; \

606 
__ãmp
 +
__vÆue
; \

607  
__ãmp
 ? __ãm∞: 
__x


	)

609 
	$__ölöe_m©hcodeNP_
 (, 
__expm1l
, 
__x
, 
__expm1_code
)

611 #i‡
	`__GNUC_PREREQ
 (3, 4)

612 
	`__ölöe_m©hcodeNP_
 (, 
__ex∂
, 
__x
,  
	$__buûtö_ex∂
 (
__x
))

614 
	#__exp_code
 \

615 
__vÆue
; \

616 
__exp⁄ít
; \

617 
__asm
 
__vﬁ©ûe__
 \

625 : "Ò" (
__vÆue
), "=u" (
__exp⁄ít
Ë: "0" (
__x
)); \

626 
__vÆue
 += 1.0; \

627 
__asm
 
__vﬁ©ûe__
 \

629 : "Ò" (
__vÆue
Ë: "0" (__vÆue), "u" (
__exp⁄ít
)); \

630  
__vÆue


	)

631 
	$__ölöe_m©hcodeNP
 (
exp
, 
__x
, 
__exp_code
)

632 
	$__ölöe_m©hcodeNP_
 (, 
__ex∂
, 
__x
, 
__exp_code
)

636 #i‡!
	`__GNUC_PREREQ
 (3, 5)

637 
	`__ölöe_m©hcodeNP
 (
èn
, 
__x
, \

638 
__vÆue
; \

639 
__vÆue2
 
	`__©åibuã__
 ((
__unu£d__
)); \

640 
__asm
 
__vﬁ©ûe__
 \

642 : "Ò" (
__vÆue2
), "=u" (
__vÆue
Ë: "0" (
__x
)); \

643  
__vÆue
)

648 #i‡
	`__GNUC_PREREQ
 (3, 4)

649 
	`__ölöe_m©hcodeNP2_
 (, 
__©™2l
, 
__y
, 
__x
,

650  
	$__buûtö_©™2l
 (
__y
, 
__x
))

652 
	#__©™2_code
 \

653 
__vÆue
; \

654 
__asm
 
__vﬁ©ûe__
 \

656 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" (
__y
) : "st(1)"); \

657  
__vÆue


	)

658 #ifde‡
__FAST_MATH__


659 
	$__ölöe_m©hcodeNP2
 (
©™2
, 
__y
, 
__x
, 
__©™2_code
)

661 
	$__ölöe_m©hcodeNP2_
 (, 
__©™2l
, 
__y
, 
__x
, 
__©™2_code
)

665 #i‡
deföed
 
__FAST_MATH__
 && !
	`__GNUC_PREREQ
 (3, 5)

666 
	`__ölöe_m©hcodeNP2
 (
fmod
, 
__x
, 
__y
, \

667 
__vÆue
; \

668 
__asm
 
__vﬁ©ûe__
 \

673 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" (
__y
) : "ax", "cc"); \

674  
__vÆue
)

678 #ifde‡
__FAST_MATH__


679 #i‡!
	`__GNUC_PREREQ
 (3,3)

680 
	`__ölöe_m©h›NP
 (
sqπ
, "fsqrt")

681 
	`__ölöe_m©h›NP_
 (, 
__sqπl
, "fsqrt")

682 
	#__libc_sqπl
(
n
Ë
	`__sqπl
 (n)

	)

684 
	#__libc_sqπl
(
n
Ë
	`__buûtö_sqπl
 (n)

	)

688 #i‡
	`__GNUC_PREREQ
 (2, 8)

689 
	`__ölöe_m©hcodeNP_
 (, 
Ábs
, 
__x
,  
	$__buûtö_Ábs
 (
__x
))

690 #ifde‡
__USE_ISOC99


691 
	`__ölöe_m©hcodeNP_
 (, 
Ábsf
, 
__x
,  
	$__buûtö_Ábsf
 (
__x
))

692 
	`__ölöe_m©hcodeNP_
 (, 
Áb¶
, 
__x
,  
	$__buûtö_Áb¶
 (
__x
))

694 
	`__ölöe_m©hcodeNP_
 (, 
__Áb¶
, 
__x
,  
	$__buûtö_Áb¶
 (
__x
))

696 
	`__ölöe_m©h›
 (
Ábs
, "fabs")

697 
	`__ölöe_m©h›_
 (, 
__Áb¶
, "fabs")

700 #ifde‡
__FAST_MATH__


701 #i‡!
	`__GNUC_PREREQ
 (3, 4)

703 
	`__ölöe_m©h›NP
 (
sö
, "fsin")

705 
	`__ölöe_m©h›NP
 (
cos
, "fcos")

707 
	`__ölöe_m©h›_de˛NP
 (
log
, "Êd 2; fxch; fyl2x", "0" (
__x
) : "st(1)")

710 #i‡!
	`__GNUC_PREREQ
 (3, 5)

711 
	`__ölöe_m©h›_de˛NP
 (
log10
, "Êdlg2; fxch; fyl2x", "0" (
__x
) : "st(1)")

713 
	`__ölöe_m©hcodeNP
 (
asö
, 
__x
,  
	`__©™2l
 (__x, 
	`__libc_sqπl
 (1.0 - __x * __x)))

714 
	`__ölöe_m©hcodeNP
 (
acos
, 
__x
,  
	`__©™2l
 (
	`__libc_sqπl
 (1.0 - __x * __x), __x))

717 #i‡!
	`__GNUC_PREREQ
 (3, 4)

718 
	`__ölöe_m©h›_de˛NP
 (
©™
, "Êd1; f∑èn", "0" (
__x
) : "st(1)")

722 
	`__ölöe_m©hcode_
 (, 
__sgn1l
, 
__x
, \

723 
__exãnsi⁄__
 uni⁄ { 
__xld
; 
__xi
[3]; } 
__n
 = \

724 { 
__xld
: 
__x
 
	}
}; \

725 
	g__n
.
	g__xi
[2] = (
__n
.
__xi
[2] & 0x8000) | 0x3fff; \

726 
	g__n
.
	g__xi
[1] = 0x80000000; \

727 
	g__n
.
	g__xi
[0] = 0; \

728  
	g__n
.
	g__xld
)

731 #ifde‡
__FAST_MATH__


733 
__ölöe_m©hcodeNP
 (
söh
, 
__x
, \

734 
__exm1
 = 
__expm1l
 (
__Áb¶
 (
__x
)); \

735  0.5 * (
__exm1
 / (__exm1 + 1.0Ë+ __exm1Ë* 
	$__sgn1l
 (
__x
))

737 
	`__ölöe_m©hcodeNP
 (
cosh
, 
__x
, \

738 
__ex
 = 
	`__ex∂
 (
__x
); \

739  0.5 * (
__ex
 + 1.0 / __ex))

741 
	`__ölöe_m©hcodeNP
 (
ènh
, 
__x
, \

742 
__exm1
 = 
	`__expm1l
 (-
	`__Áb¶
 (
__x
 + __x)); \

743  
__exm1
 / (__exm1 + 2.0Ë* 
	`__sgn1l
 (-
__x
))

746 
	`__ölöe_m©hcodeNP
 (
Êo‹
, 
__x
, \

747 
__vÆue
; \

748 
__ign‹e
; \

749 
__cw
; \

750 
__cwtmp
; \

751 
__asm
 
	`__vﬁ©ûe
 ("fnstcw %3\n\t" \

759 : "Ò" (
__vÆue
), "=&q" (
__ign‹e
), "=m" (
__cwtmp
), \

760 "=m" (
__cw
) \

761 : "0" (
__x
)); \

762  
__vÆue
)

764 
	`__ölöe_m©hcodeNP
 (
˚û
, 
__x
, \

765 
__vÆue
; \

766 
__ign‹e
; \

767 
__cw
; \

768 
__cwtmp
; \

769 
__asm
 
	`__vﬁ©ûe
 ("fnstcw %3\n\t" \

777 : "Ò" (
__vÆue
), "=&q" (
__ign‹e
), "=m" (
__cwtmp
), \

778 "=m" (
__cw
) \

779 : "0" (
__x
)); \

780  
__vÆue
)

782 #ifde‡
__FAST_MATH__


783 
	#__ldexp_code
 \

784 
__vÆue
; \

785 
__asm
 
__vﬁ©ûe__
 \

787 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" ((Ë
__y
)); \

788  
__vÆue


	)

790 
__MATH_INLINE
 

791 
	`__NTH
 (
	$ldexp
 (
__x
, 
__y
))

793 
__ldexp_code
;

794 
	}
}

799 #ifde‡
__USE_ISOC99


801 #ifde‡
__FAST_MATH__


802 
	$__ölöe_m©hcodeNP
 (
expm1
, 
__x
, 
__expm1_code
)

806 
	#__M_SQRT2
 1.41421356237309504880L

	)

808 #i‡!
	`__GNUC_PREREQ
 (3, 5)

809 
	`__ölöe_m©hcodeNP
 (
log1p
, 
__x
, \

810 
__vÆue
; \

811 i‡(
	`__Áb¶
 (
__x
Ë>1.0 - 0.5 * 
__M_SQRT2
) \

812 
__vÆue
 = 
	`logl
 (1.0 + 
__x
); \

814 
__asm
 
__vﬁ©ûe__
 \

818 : "Ò" (
__vÆue
Ë: "0" (
__x
) : "st(1)"); \

819  
__vÆue
)

824 
	`__ölöe_m©hcodeNP
 (
asöh
, 
__x
, \

825 
__y
 = 
	`__Áb¶
 (
__x
); \

826  (
	`log1∂
 (
__y
 * __y / (
	`__libc_sqπl
 (__y * __y + 1.0) + 1.0) + __y) \

827 * 
	$__sgn1l
 (
__x
)))

829 
	`__ölöe_m©hcodeNP
 (
acosh
, 
__x
, \

830  
	`logl
 (
__x
 + 
	`__libc_sqπl
 (__x - 1.0) * __libc_sqrtl (__x + 1.0)))

832 
	`__ölöe_m©hcodeNP
 (
©™h
, 
__x
, \

833 
__y
 = 
	`__Áb¶
 (
__x
); \

834  -0.5 * 
	`log1∂
 (-(
__y
 + __yË/ (1.0 + __y)Ë* 
	$__sgn1l
 (
__x
))

837 
	`__ölöe_m©hcodeNP2
 (
hypŸ
, 
__x
, 
__y
,

838  
	`__libc_sqπl
 (
__x
 * __x + 
__y
 * __y))

840 #i‡!
	`__GNUC_PREREQ
 (3, 5)

841 
	`__ölöe_m©hcodeNP
(
logb
, 
__x
, \

842 
__vÆue
; \

843 
__junk
; \

844 
__asm
 
__vﬁ©ûe__
 \

846 : "Ò" (
__junk
), "=u" (
__vÆue
Ë: "0" (
__x
)); \

847  
__vÆue
)

853 #ifde‡
__USE_ISOC99


854 #ifde‡
__FAST_MATH__


856 #i‡!
	`__GNUC_PREREQ
 (3, 5)

857 
	`__ölöe_m©h›_de˛NP
 (
log2
, "Êd1; fxch; fyl2x", "0" (
__x
) : "st(1)")

860 
__MATH_INLINE
 

861 
	`__NTH
 (
	$ldexpf
 (
__x
, 
__y
))

863 
__ldexp_code
;

864 
	}
}

866 
__MATH_INLINE
 

867 
__NTH
 (
	$ldex∂
 (
__x
, 
__y
))

869 
__ldexp_code
;

870 
	}
}

872 
__ölöe_m©h›NP
 (
röt
, "frndint")

875 
	#__Ãöt_code
 \

876 
__Ãöåes
; \

877 
__asm__
 
__vﬁ©ûe__
 \

879 : "=m" (
__Ãöåes
Ë: "t" (
__x
) : "st"); \

880  
__Ãöåes


	)

881 
__MATH_INLINE
 

882 
__NTH
 (
	$Ãötf
 (
__x
))

884 
__Ãöt_code
;

885 
	}
}

886 
__MATH_INLINE
 

887 
__NTH
 (
	$Ãöt
 (
__x
))

889 
__Ãöt_code
;

890 
	}
}

891 
__MATH_INLINE
 

892 
__NTH
 (
	$Ãöé
 (
__x
))

894 
__Ãöt_code
;

895 
	}
}

896 #unde‡
__Ãöt_code


898 
	#__Œröt_code
 \

899 
__Œröåes
; \

900 
__asm__
 
__vﬁ©ûe__
 \

902 : "=m" (
__Œröåes
Ë: "t" (
__x
) : "st"); \

903  
__Œröåes


	)

904 
__exãnsi⁄__


905 
__MATH_INLINE
 

906 
__NTH
 (
	$Œrötf
 (
__x
))

908 
__Œröt_code
;

909 
	}
}

910 
__exãnsi⁄__


911 
__MATH_INLINE
 

912 
__NTH
 (
	$Œröt
 (
__x
))

914 
__Œröt_code
;

915 
	}
}

916 
__exãnsi⁄__


917 
__MATH_INLINE
 

918 
__NTH
 (
	$Œröé
 (
__x
))

920 
__Œröt_code
;

921 
	}
}

922 #unde‡
__Œröt_code


927 #ifde‡
__USE_MISC


929 #i‡
deföed
 
__FAST_MATH__
 && !
__GNUC_PREREQ
 (3, 5)

930 
__ölöe_m©hcodeNP2
 (
dªm
, 
__x
, 
__y
, \

931 
__vÆue
; \

932 
__˛obbîed
; \

933 
__asm
 
__vﬁ©ûe__
 \

938 : "Ò" (
__vÆue
), "=&a" (
__˛obbîed
Ë: "0" (
__x
), "u" (
__y
) : "cc"); \

939  
__vÆue
)

944 
__MATH_INLINE
 

945 
__NTH
 (
	$__föôe
 (
__x
))

947  (
__exãnsi⁄__


948 (((((uni⁄ { 
__d
; 
__i
[2]; }Ë{__d: 
__x
}).__i[1]

950 
	}
}

955 #unde‡
__©™2_code


956 #ifde‡
__FAST_MATH__


957 #unde‡
__expm1_code


958 #unde‡
__exp_code


959 #unde‡
__söcos_code


966 #ifde‡
__LIBC_INTERNAL_MATH_INLINES


967 
__ölöe_m©h›
 (
__õì754_sqπ
, "fsqrt")

968 
__ölöe_m©hcode2_
 (, 
__õì754_©™2l
, 
__y
, 
__x
,

969 
__vÆue
;

970 
__asm
 
__vﬁ©ûe__
 ("fpatan\n\t"

971 : "Ò" (
__vÆue
)

972 : "0" (
__x
), "u" (
__y
) : "st(1)");

973  
__vÆue
;)

	@/usr/include/bits/nan.h

19 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

28 
	#NAN
 (
	`__buûtö_«nf
 (""))

	)

30 #ñi‡
deföed
 
__GNUC__


32 
	#NAN
 \

33 (
__exãnsi⁄__
 \

34 ((uni⁄ { 
__l
 
	`__©åibuã__
 ((
	`__mode__
 (
__SI__
))); 
__d
; }) \

35 { 
__l
: 0x7fc00000UL }).
__d
)

	)

39 
	~<ídün.h
>

41 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


42 
	#__q«n_byãs
 { 0x7f, 0xc0, 0, 0 }

	)

44 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


45 
	#__q«n_byãs
 { 0, 0, 0xc0, 0x7‡}

	)

48 uni⁄ { 
	m__c
[4]; 
	m__d
; } 
__q«n_uni⁄


49 
__©åibuã__
 ((
__unu£d__
)Ë{ 
__q«n_byãs
 };

50 
	#NAN
 (
__q«n_uni⁄
.
__d
)

	)

	@/usr/include/bits/netdb.h

18 #i‚de‡
_NETDB_H


26 
	s√ã¡


28 *
	mn_«me
;

29 **
	mn_Æü£s
;

30 
	mn_addπy≥
;

31 
uöt32_t
 
	mn_√t
;

	@/usr/include/bits/param.h

19 #i‚de‡
_SYS_PARAM_H


23 #i‚de‡
ARG_MAX


24 
	#__undef_ARG_MAX


	)

27 
	~<löux/limôs.h
>

28 
	~<löux/∑øm.h
>

31 #ifde‡
__undef_ARG_MAX


32 #unde‡
ARG_MAX


33 #unde‡
__undef_ARG_MAX


36 
	#MAXSYMLINKS
 20

	)

41 
	#NOFILE
 256

	)

42 
	#NCARGS
 131072

	)

	@/usr/include/bits/posix1_lim.h

24 #i‚def 
_BITS_POSIX1_LIM_H


25 
	#_BITS_POSIX1_LIM_H
 1

	)

31 
	#_POSIX_AIO_LISTIO_MAX
 2

	)

34 
	#_POSIX_AIO_MAX
 1

	)

37 
	#_POSIX_ARG_MAX
 4096

	)

40 #ifde‡
__USE_XOPEN2K


41 
	#_POSIX_CHILD_MAX
 25

	)

43 
	#_POSIX_CHILD_MAX
 6

	)

47 
	#_POSIX_DELAYTIMER_MAX
 32

	)

51 
	#_POSIX_HOST_NAME_MAX
 255

	)

54 
	#_POSIX_LINK_MAX
 8

	)

57 
	#_POSIX_LOGIN_NAME_MAX
 9

	)

60 
	#_POSIX_MAX_CANON
 255

	)

64 
	#_POSIX_MAX_INPUT
 255

	)

67 
	#_POSIX_MQ_OPEN_MAX
 8

	)

70 
	#_POSIX_MQ_PRIO_MAX
 32

	)

73 
	#_POSIX_NAME_MAX
 14

	)

76 #ifde‡
__USE_XOPEN2K


77 
	#_POSIX_NGROUPS_MAX
 8

	)

79 
	#_POSIX_NGROUPS_MAX
 0

	)

83 #ifde‡
__USE_XOPEN2K


84 
	#_POSIX_OPEN_MAX
 20

	)

86 
	#_POSIX_OPEN_MAX
 16

	)

89 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


92 
	#_POSIX_FD_SETSIZE
 
_POSIX_OPEN_MAX


	)

96 
	#_POSIX_PATH_MAX
 256

	)

99 
	#_POSIX_PIPE_BUF
 512

	)

103 
	#_POSIX_RE_DUP_MAX
 255

	)

106 
	#_POSIX_RTSIG_MAX
 8

	)

109 
	#_POSIX_SEM_NSEMS_MAX
 256

	)

112 
	#_POSIX_SEM_VALUE_MAX
 32767

	)

115 
	#_POSIX_SIGQUEUE_MAX
 32

	)

118 
	#_POSIX_SSIZE_MAX
 32767

	)

121 
	#_POSIX_STREAM_MAX
 8

	)

124 
	#_POSIX_SYMLINK_MAX
 255

	)

128 
	#_POSIX_SYMLOOP_MAX
 8

	)

131 
	#_POSIX_TIMER_MAX
 32

	)

134 
	#_POSIX_TTY_NAME_MAX
 9

	)

137 #ifde‡
__USE_XOPEN2K


138 
	#_POSIX_TZNAME_MAX
 6

	)

140 
	#_POSIX_TZNAME_MAX
 3

	)

143 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


145 
	#_POSIX_QLIMIT
 1

	)

149 
	#_POSIX_HIWAT
 
_POSIX_PIPE_BUF


	)

152 
	#_POSIX_UIO_MAXIOV
 16

	)

156 
	#_POSIX_CLOCKRES_MIN
 20000000

	)

160 
	~<bôs/loˇl_lim.h
>

163 #i‚def 
SSIZE_MAX


164 
	#SSIZE_MAX
 
LONG_MAX


	)

171 #i‚def 
NGROUPS_MAX


172 
	#NGROUPS_MAX
 8

	)

	@/usr/include/bits/posix2_lim.h

22 #i‚def 
_BITS_POSIX2_LIM_H


23 
	#_BITS_POSIX2_LIM_H
 1

	)

27 
	#_POSIX2_BC_BASE_MAX
 99

	)

30 
	#_POSIX2_BC_DIM_MAX
 2048

	)

33 
	#_POSIX2_BC_SCALE_MAX
 99

	)

36 
	#_POSIX2_BC_STRING_MAX
 1000

	)

40 
	#_POSIX2_COLL_WEIGHTS_MAX
 2

	)

44 
	#_POSIX2_EXPR_NEST_MAX
 32

	)

47 
	#_POSIX2_LINE_MAX
 2048

	)

51 
	#_POSIX2_RE_DUP_MAX
 255

	)

55 
	#_POSIX2_CHARCLASS_NAME_MAX
 14

	)

62 #i‚def 
BC_BASE_MAX


63 
	#BC_BASE_MAX
 
_POSIX2_BC_BASE_MAX


	)

65 #i‚def 
BC_DIM_MAX


66 
	#BC_DIM_MAX
 
_POSIX2_BC_DIM_MAX


	)

68 #i‚def 
BC_SCALE_MAX


69 
	#BC_SCALE_MAX
 
_POSIX2_BC_SCALE_MAX


	)

71 #i‚def 
BC_STRING_MAX


72 
	#BC_STRING_MAX
 
_POSIX2_BC_STRING_MAX


	)

74 #i‚def 
COLL_WEIGHTS_MAX


75 
	#COLL_WEIGHTS_MAX
 255

	)

77 #i‚def 
EXPR_NEST_MAX


78 
	#EXPR_NEST_MAX
 
_POSIX2_EXPR_NEST_MAX


	)

80 #i‚def 
LINE_MAX


81 
	#LINE_MAX
 
_POSIX2_LINE_MAX


	)

83 #i‚def 
CHARCLASS_NAME_MAX


84 
	#CHARCLASS_NAME_MAX
 2048

	)

88 
	#RE_DUP_MAX
 (0x7fff)

	)

	@/usr/include/bits/posix_opt.h

19 #i‚def 
_BITS_POSIX_OPT_H


20 
	#_BITS_POSIX_OPT_H
 1

	)

23 
	#_POSIX_JOB_CONTROL
 1

	)

26 
	#_POSIX_SAVED_IDS
 1

	)

29 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

32 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

35 
	#_POSIX_FSYNC
 200809L

	)

38 
	#_POSIX_MAPPED_FILES
 200809L

	)

41 
	#_POSIX_MEMLOCK
 200809L

	)

44 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

47 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

50 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

54 
	#_POSIX_VDISABLE
 '\0'

	)

57 
	#_POSIX_NO_TRUNC
 1

	)

60 
	#_XOPEN_REALTIME
 1

	)

63 
	#_XOPEN_REALTIME_THREADS
 1

	)

66 
	#_XOPEN_SHM
 1

	)

69 
	#_POSIX_THREADS
 200809L

	)

72 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

73 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

76 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

79 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

82 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

85 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

89 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

91 #ifde‡
__USE_XOPEN2K8


93 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

96 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

100 
	#_POSIX_SEMAPHORES
 200809L

	)

103 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

106 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

107 
	#_POSIX_ASYNC_IO
 1

	)

109 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

111 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

114 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

117 
	#_LFS_LARGEFILE
 1

	)

118 
	#_LFS64_LARGEFILE
 1

	)

119 
	#_LFS64_STDIO
 1

	)

122 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

125 
	#_POSIX_CPUTIME
 0

	)

128 
	#_POSIX_THREAD_CPUTIME
 0

	)

131 
	#_POSIX_REGEXP
 1

	)

134 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

137 
	#_POSIX_SHELL
 1

	)

140 
	#_POSIX_TIMEOUTS
 200809L

	)

143 
	#_POSIX_SPIN_LOCKS
 200809L

	)

146 
	#_POSIX_SPAWN
 200809L

	)

149 
	#_POSIX_TIMERS
 200809L

	)

152 
	#_POSIX_BARRIERS
 200809L

	)

155 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

158 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

161 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

164 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

167 
	#_POSIX_ADVISORY_INFO
 200809L

	)

170 
	#_POSIX_IPV6
 200809L

	)

173 
	#_POSIX_RAW_SOCKETS
 200809L

	)

176 
	#_POSIX2_CHAR_TERM
 200809L

	)

179 
	#_POSIX_SPORADIC_SERVER
 -1

	)

180 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

183 
	#_POSIX_TRACE
 -1

	)

184 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

185 
	#_POSIX_TRACE_INHERIT
 -1

	)

186 
	#_POSIX_TRACE_LOG
 -1

	)

189 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

	@/usr/include/bits/pthreadtypes.h

18 #i‚de‡
_BITS_PTHREADTYPES_H


19 
	#_BITS_PTHREADTYPES_H
 1

	)

21 
	~<bôs/w‹dsize.h
>

23 #ifde‡
__x86_64__


24 #i‡
__WORDSIZE
 == 64

25 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

26 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

27 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

28 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

29 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

30 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

31 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

32 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

33 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

35 
	#__SIZEOF_PTHREAD_ATTR_T
 32

	)

36 
	#__SIZEOF_PTHREAD_MUTEX_T
 32

	)

37 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

38 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

39 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

40 
	#__SIZEOF_PTHREAD_RWLOCK_T
 44

	)

41 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

42 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

43 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

46 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

47 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

48 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

49 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

50 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

51 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

52 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

53 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

54 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

60 
	t±hªad_t
;

63 
	u±hªad_©å_t


65 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

66 
	m__Æign
;

68 #i‚de‡
__have_±hªad_©å_t


69 
±hªad_©å_t
 
	t±hªad_©å_t
;

70 
	#__have_±hªad_©å_t
 1

	)

74 #ifde‡
__x86_64__


75 
	s__±hªad_öã∫Æ_li°


77 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

78 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

79 } 
	t__±hªad_li°_t
;

81 
	s__±hªad_öã∫Æ_¶i°


83 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

84 } 
	t__±hªad_¶i°_t
;

92 
	s__±hªad_muãx_s


94 
	m__lock
;

95 
	m__cou¡
;

96 
	m__ow√r
;

97 #ifde‡
__x86_64__


98 
	m__nu£rs
;

102 
	m__köd
;

103 #ifde‡
__x86_64__


104 
	m__•ös
;

105 
	m__ñisi⁄
;

106 
__±hªad_li°_t
 
	m__li°
;

107 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

109 
	#__PTHREAD_SPINS
 0, 0

	)

111 
	m__nu£rs
;

112 
__exãnsi⁄__
 union

116 
	m__e•ös
;

117 
	m__ñisi⁄
;

118 
	#__•ös
 
__ñisi⁄_d©a
.
__e•ös


	)

119 
	#__ñisi⁄
 
__ñisi⁄_d©a
.
__ñisi⁄


	)

120 
	#__PTHREAD_SPINS
 { 0, 0 }

	)

121 } 
	m__ñisi⁄_d©a
;

122 
__±hªad_¶i°_t
 
	m__li°
;

125 } 
	m__d©a
;

126 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

127 
	m__Æign
;

128 } 
	t±hªad_muãx_t
;

132 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

133 
	m__Æign
;

134 } 
	t±hªad_muãx©å_t
;

143 
	m__lock
;

144 
	m__fuãx
;

145 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

146 
__exãnsi⁄__
 
	m__wakeup_£q
;

147 
__exãnsi⁄__
 
	m__wokí_£q
;

148 *
	m__muãx
;

149 
	m__nwaôîs
;

150 
	m__brﬂdˇ°_£q
;

151 } 
	m__d©a
;

152 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

153 
__exãnsi⁄__
 
	m__Æign
;

154 } 
	t±hªad_c⁄d_t
;

158 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

159 
	m__Æign
;

160 } 
	t±hªad_c⁄d©å_t
;

164 
	t±hªad_key_t
;

168 
	t±hªad_⁄˚_t
;

171 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


176 #ifde‡
__x86_64__


179 
	m__lock
;

180 
	m__ƒ_ªadîs
;

181 
	m__ªadîs_wakeup
;

182 
	m__wrôî_wakeup
;

183 
	m__ƒ_ªadîs_queued
;

184 
	m__ƒ_wrôîs_queued
;

185 
	m__wrôî
;

186 
	m__sh¨ed
;

187 sig√d 
	m__rwñisi⁄
;

188 #ifde‡ 
__ILP32__


189 
	m__∑d1
[3];

190 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0, { 0, 0, 0 }

	)

192 
	m__∑d1
[7];

193 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0, { 0, 0, 0, 0, 0, 0, 0 }

	)

195 
	m__∑d2
;

198 
	m__Êags
;

199 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

200 } 
	m__d©a
;

204 
	m__lock
;

205 
	m__ƒ_ªadîs
;

206 
	m__ªadîs_wakeup
;

207 
	m__wrôî_wakeup
;

208 
	m__ƒ_ªadîs_queued
;

209 
	m__ƒ_wrôîs_queued
;

212 
	m__Êags
;

213 
	m__sh¨ed
;

214 sig√d 
	m__rwñisi⁄
;

215 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0

	)

216 
	m__∑d2
;

217 
	m__wrôî
;

218 } 
	m__d©a
;

220 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

221 
	m__Æign
;

222 } 
	t±hªad_rwlock_t
;

226 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

227 
	m__Æign
;

228 } 
	t±hªad_rwlock©å_t
;

232 #ifde‡
__USE_XOPEN2K


234 vﬁ©ûê
	t±hªad_•ölock_t
;

241 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

242 
	m__Æign
;

243 } 
	t±hªad_b¨rõr_t
;

247 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

248 
	m__Æign
;

249 } 
	t±hªad_b¨rõøâr_t
;

253 #i‚de‡
__x86_64__


255 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/select.h

18 #i‚de‡
_SYS_SELECT_H


22 
	~<bôs/w‹dsize.h
>

25 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

27 #i‡
__WORDSIZE
 == 64

28 
	#__FD_ZERO_STOS
 "°osq"

	)

30 
	#__FD_ZERO_STOS
 "°o¶"

	)

33 
	#__FD_ZERO
(
fd•
) \

35 
__d0
, 
__d1
; \

36 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

37 : "=c" (
__d0
), "=D" (
__d1
) \

38 : "a" (0), "0" ( (
fd_£t
) \

39 /  (
__fd_mask
)), \

40 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

42 } 0)

	)

48 
	#__FD_ZERO
(
£t
) \

50 
__i
; \

51 
fd_£t
 *
__¨r
 = (
£t
); \

52 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

53 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

54 } 0)

	)

58 
	#__FD_SET
(
d
, 
£t
) \

59 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] |
	`__FD_MASK
 (d)))

	)

60 
	#__FD_CLR
(
d
, 
£t
) \

61 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] &~
	`__FD_MASK
 (d)))

	)

62 
	#__FD_ISSET
(
d
, 
£t
) \

63 ((
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] & 
	`__FD_MASK
 (d)Ë!0)

	)

	@/usr/include/bits/select2.h

19 #i‚de‡
_SYS_SELECT_H


24 
__fdñt_chk
 (
__d
);

25 
	$__fdñt_w¨n
 (
__d
)

26 
	`__w¨«âr
 ("bit outside of fd_set selected");

27 #unde‡
__FD_ELT


28 
	#__FD_ELT
(
d
) \

29 
__exãnsi⁄__
 \

30 ({ 
__d
 = (
d
); \

31 (
	`__buûtö_c⁄°™t_p
 (
__d
) \

32 ? (0 <
__d
 && __d < 
__FD_SETSIZE
 \

33 ? (
__d
 / 
__NFDBITS
) \

34 : 
	`__fdñt_w¨n
 (
__d
)) \

35 : 
	`__fdñt_chk
 (
__d
)); 
	}
})

	)

	@/usr/include/bits/semaphore.h

19 #i‚de‡
_SEMAPHORE_H


23 
	~<bôs/w‹dsize.h
>

25 #i‡
__WORDSIZE
 == 64

26 
	#__SIZEOF_SEM_T
 32

	)

28 
	#__SIZEOF_SEM_T
 16

	)

33 
	#SEM_FAILED
 ((
£m_t
 *Ë0)

	)

38 
	m__size
[
__SIZEOF_SEM_T
];

39 
	m__Æign
;

40 } 
	t£m_t
;

	@/usr/include/bits/setjmp.h

19 #i‚de‡
_BITS_SETJMP_H


20 
	#_BITS_SETJMP_H
 1

	)

22 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


26 
	~<bôs/w‹dsize.h
>

28 #i‚de‡
_ASM


30 #i‡
__WORDSIZE
 == 64

31 
	t__jmp_buf
[8];

32 #ñi‡
deföed
 
__x86_64__


33 
__exãnsi⁄__
 
	t__jmp_buf
[8];

35 
	t__jmp_buf
[6];

	@/usr/include/bits/sigaction.h

19 #i‚de‡
_SIGNAL_H


24 
	ssiga˘i⁄


27 #ifde‡
__USE_POSIX199309


31 
__sigh™dÀr_t
 
	mß_h™dÀr
;

33 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

35 
	m__siga˘i⁄_h™dÀr
;

36 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

37 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

39 
__sigh™dÀr_t
 
	mß_h™dÀr
;

43 
__sig£t_t
 
	mß_mask
;

46 
	mß_Êags
;

49 (*
	mß_ª°‹î
) ();

53 
	#SA_NOCLDSTOP
 1

	)

54 
	#SA_NOCLDWAIT
 2

	)

55 
	#SA_SIGINFO
 4

	)

57 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC


58 
	#SA_ONSTACK
 0x08000000

	)

60 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


61 
	#SA_RESTART
 0x10000000

	)

62 
	#SA_NODEFER
 0x40000000

	)

64 
	#SA_RESETHAND
 0x80000000

	)

66 #ifde‡
__USE_MISC


67 
	#SA_INTERRUPT
 0x20000000

	)

70 
	#SA_NOMASK
 
SA_NODEFER


	)

71 
	#SA_ONESHOT
 
SA_RESETHAND


	)

72 
	#SA_STACK
 
SA_ONSTACK


	)

76 
	#SIG_BLOCK
 0

	)

77 
	#SIG_UNBLOCK
 1

	)

78 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

18 #i‚de‡
_BITS_SIGCONTEXT_H


19 
	#_BITS_SIGCONTEXT_H
 1

	)

21 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


25 
	#FP_XSTATE_MAGIC1
 0x46505853U

	)

26 
	#FP_XSTATE_MAGIC2
 0x46505845U

	)

27 
	#FP_XSTATE_MAGIC2_SIZE
 (
FP_XSTATE_MAGIC2
)

	)

29 
	s_Âx_sw_byãs


31 
__uöt32_t
 
	mmagic1
;

32 
__uöt32_t
 
	mexãnded_size
;

33 
__uöt64_t
 
	mx°©e_bv
;

34 
__uöt32_t
 
	mx°©e_size
;

35 
__uöt32_t
 
	m∑ddög
[7];

38 
	s_Âªg


40 
	msignifiˇnd
[4];

41 
	mexp⁄ít
;

44 
	s_Âxªg


46 
	msignifiˇnd
[4];

47 
	mexp⁄ít
;

48 
	m∑ddög
[3];

51 
	s_xmmªg


53 
__uöt32_t
 
	mñemít
[4];

58 #i‚de‡
__x86_64__


60 
	s_Â°©e


63 
__uöt32_t
 
	mcw
;

64 
__uöt32_t
 
	msw
;

65 
__uöt32_t
 
	mèg
;

66 
__uöt32_t
 
	mùoff
;

67 
__uöt32_t
 
	mcs£l
;

68 
__uöt32_t
 
	md©aoff
;

69 
__uöt32_t
 
	md©a£l
;

70 
_Âªg
 
	m_°
[8];

71 
	m°©us
;

72 
	mmagic
;

75 
__uöt32_t
 
	m_fx§_ív
[6];

76 
__uöt32_t
 
	mmxc§
;

77 
__uöt32_t
 
	mª£rved
;

78 
_Âxªg
 
	m_fx§_°
[8];

79 
_xmmªg
 
	m_xmm
[8];

80 
__uöt32_t
 
	m∑ddög
[56];

83 #i‚de‡
sigc⁄ãxt_°ru˘


88 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

91 
	#X86_FXSR_MAGIC
 0x0000

	)

93 
	ssigc⁄ãxt


95 
	mgs
, 
	m__gsh
;

96 
	mfs
, 
	m__fsh
;

97 
	mes
, 
	m__esh
;

98 
	mds
, 
	m__dsh
;

99 
	medi
;

100 
	mesi
;

101 
	mebp
;

102 
	me•
;

103 
	mebx
;

104 
	medx
;

105 
	mecx
;

106 
	móx
;

107 
	må≠no
;

108 
	mîr
;

109 
	meù
;

110 
	mcs
, 
	m__csh
;

111 
	meÊags
;

112 
	me•_©_sig«l
;

113 
	mss
, 
	m__ssh
;

114 
_Â°©e
 * 
	mÂ°©e
;

115 
	mﬁdmask
;

116 
	m¸2
;

121 
	s_Â°©e


124 
__uöt16_t
 
	mcwd
;

125 
__uöt16_t
 
	mswd
;

126 
__uöt16_t
 
	m·w
;

127 
__uöt16_t
 
	mf›
;

128 
__uöt64_t
 
	mrù
;

129 
__uöt64_t
 
	mrdp
;

130 
__uöt32_t
 
	mmxc§
;

131 
__uöt32_t
 
	mmx¸_mask
;

132 
_Âxªg
 
	m_°
[8];

133 
_xmmªg
 
	m_xmm
[16];

134 
__uöt32_t
 
	m∑ddög
[24];

137 
	ssigc⁄ãxt


139 
__uöt64_t
 
	mr8
;

140 
__uöt64_t
 
	mr9
;

141 
__uöt64_t
 
	mr10
;

142 
__uöt64_t
 
	mr11
;

143 
__uöt64_t
 
	mr12
;

144 
__uöt64_t
 
	mr13
;

145 
__uöt64_t
 
	mr14
;

146 
__uöt64_t
 
	mr15
;

147 
__uöt64_t
 
	mrdi
;

148 
__uöt64_t
 
	mrsi
;

149 
__uöt64_t
 
	mrbp
;

150 
__uöt64_t
 
	mrbx
;

151 
__uöt64_t
 
	mrdx
;

152 
__uöt64_t
 
	møx
;

153 
__uöt64_t
 
	mrcx
;

154 
__uöt64_t
 
	mr•
;

155 
__uöt64_t
 
	mrù
;

156 
__uöt64_t
 
	meÊags
;

157 
	mcs
;

158 
	mgs
;

159 
	mfs
;

160 
	m__∑d0
;

161 
__uöt64_t
 
	mîr
;

162 
__uöt64_t
 
	må≠no
;

163 
__uöt64_t
 
	mﬁdmask
;

164 
__uöt64_t
 
	m¸2
;

165 
__exãnsi⁄__
 union

167 
_Â°©e
 * 
	mÂ°©e
;

168 
__uöt64_t
 
	m__Â°©e_w‹d
;

170 
__uöt64_t
 
	m__ª£rved1
 [8];

175 
	s_xßve_hdr


177 
__uöt64_t
 
	mx°©e_bv
;

178 
__uöt64_t
 
	mª£rved1
[2];

179 
__uöt64_t
 
	mª£rved2
[5];

182 
	s_ymmh_°©e


184 
__uöt32_t
 
	mymmh_•a˚
[64];

187 
	s_x°©e


189 
_Â°©e
 
	mÂ°©e
;

190 
_xßve_hdr
 
	mx°©e_hdr
;

191 
_ymmh_°©e
 
	mymmh
;

	@/usr/include/bits/siginfo.h

19 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
__√ed_sigöfo_t
 \

20 && !
deföed
 
	g__√ed_sigevít_t


24 
	~<bôs/w‹dsize.h
>

26 #i‡(!
deföed
 
__have_sigvÆ_t
 \

27 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
 \

28 || 
deföed
 
	g__√ed_sigevít_t
))

29 
	#__have_sigvÆ_t
 1

	)

32 
	usigvÆ


34 
	msivÆ_öt
;

35 *
	msivÆ_±r
;

36 } 
	tsigvÆ_t
;

39 #i‡(!
deföed
 
__have_sigöfo_t
 \

40 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
))

41 
	#__have_sigöfo_t
 1

	)

43 
	#__SI_MAX_SIZE
 128

	)

44 #i‡
__WORDSIZE
 == 64

45 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

47 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

50 #i‡
deföed
 
__x86_64__
 && 
__WORDSIZE
 == 32

55 
__˛ock_t
 
	t__©åibuã__
 ((
	t__Æig√d__
 (4))Ë
	t__sigchld_˛ock_t
;

56 
	#__SI_ALIGNMENT
 
	`__©åibuã__
 ((
	`__Æig√d__
 (8)))

	)

58 
__˛ock_t
 
	t__sigchld_˛ock_t
;

59 
	#__SI_ALIGNMENT


	)

64 
si_signo
;

65 
si_î∫o
;

67 
si_code
;

71 
_∑d
[
__SI_PAD_SIZE
];

76 
__pid_t
 
si_pid
;

77 
__uid_t
 
si_uid
;

78 } 
_kûl
;

83 
si_tid
;

84 
si_ovîrun
;

85 
sigvÆ_t
 
si_sigvÆ
;

86 } 
_timî
;

91 
__pid_t
 
si_pid
;

92 
__uid_t
 
si_uid
;

93 
sigvÆ_t
 
si_sigvÆ
;

94 } 
_π
;

99 
__pid_t
 
si_pid
;

100 
__uid_t
 
si_uid
;

101 
si_°©us
;

102 
__sigchld_˛ock_t
 
si_utime
;

103 
__sigchld_˛ock_t
 
si_°ime
;

104 } 
_sigchld
;

109 *
si_addr
;

110 
si_addr_lsb
;

113 *
_lowî
;

114 *
_uµî
;

115 } 
si_addr_bnd
;

116 } 
_sigÁu…
;

121 
si_b™d
;

122 
si_fd
;

123 } 
_sigpﬁl
;

128 *
_ˇŒ_addr
;

129 
_sysˇŒ
;

130 
_¨ch
;

131 } 
_sigsys
;

132 } 
_sifõlds
;

133 } 
	tsigöfo_t
 
	t__SI_ALIGNMENT
;

137 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

138 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

139 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

140 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

141 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

142 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

143 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

144 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

145 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

146 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

147 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

148 
	#si_addr_lsb
 
_sifõlds
.
_sigÁu…
.
si_addr_lsb


	)

149 
	#si_lowî
 
_sifõlds
.
_sigÁu…
.
si_addr_bnd
.
_lowî


	)

150 
	#si_uµî
 
_sifõlds
.
_sigÁu…
.
si_addr_bnd
.
_uµî


	)

151 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

152 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

153 
	#si_ˇŒ_addr
 
_sifõlds
.
_sigsys
.
_ˇŒ_addr


	)

154 
	#si_sysˇŒ
 
_sifõlds
.
_sigsys
.
_sysˇŒ


	)

155 
	#si_¨ch
 
_sifõlds
.
_sigsys
.
_¨ch


	)

162 
SI_ASYNCNL
 = -60,

163 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

164 
SI_TKILL
 = -6,

165 
	#SI_TKILL
 
SI_TKILL


	)

166 
SI_SIGIO
,

167 
	#SI_SIGIO
 
SI_SIGIO


	)

168 
SI_ASYNCIO
,

169 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

170 
SI_MESGQ
,

171 
	#SI_MESGQ
 
SI_MESGQ


	)

172 
SI_TIMER
,

173 
	#SI_TIMER
 
SI_TIMER


	)

174 
SI_QUEUE
,

175 
	#SI_QUEUE
 
SI_QUEUE


	)

176 
SI_USER
,

177 
	#SI_USER
 
SI_USER


	)

178 
SI_KERNEL
 = 0x80

179 
	#SI_KERNEL
 
SI_KERNEL


	)

183 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


187 
ILL_ILLOPC
 = 1,

188 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

189 
ILL_ILLOPN
,

190 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

191 
ILL_ILLADR
,

192 
	#ILL_ILLADR
 
ILL_ILLADR


	)

193 
ILL_ILLTRP
,

194 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

195 
ILL_PRVOPC
,

196 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

197 
ILL_PRVREG
,

198 
	#ILL_PRVREG
 
ILL_PRVREG


	)

199 
ILL_COPROC
,

200 
	#ILL_COPROC
 
ILL_COPROC


	)

201 
ILL_BADSTK


202 
	#ILL_BADSTK
 
ILL_BADSTK


	)

208 
FPE_INTDIV
 = 1,

209 
	#FPE_INTDIV
 
FPE_INTDIV


	)

210 
FPE_INTOVF
,

211 
	#FPE_INTOVF
 
FPE_INTOVF


	)

212 
FPE_FLTDIV
,

213 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

214 
FPE_FLTOVF
,

215 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

216 
FPE_FLTUND
,

217 
	#FPE_FLTUND
 
FPE_FLTUND


	)

218 
FPE_FLTRES
,

219 
	#FPE_FLTRES
 
FPE_FLTRES


	)

220 
FPE_FLTINV
,

221 
	#FPE_FLTINV
 
FPE_FLTINV


	)

222 
FPE_FLTSUB


223 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

229 
SEGV_MAPERR
 = 1,

230 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

231 
SEGV_ACCERR


232 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

238 
BUS_ADRALN
 = 1,

239 
	#BUS_ADRALN
 
BUS_ADRALN


	)

240 
BUS_ADRERR
,

241 
	#BUS_ADRERR
 
BUS_ADRERR


	)

242 
BUS_OBJERR
,

243 
	#BUS_OBJERR
 
BUS_OBJERR


	)

244 
BUS_MCEERR_AR
,

245 
	#BUS_MCEERR_AR
 
BUS_MCEERR_AR


	)

246 
BUS_MCEERR_AO


247 
	#BUS_MCEERR_AO
 
BUS_MCEERR_AO


	)

251 #ifde‡
__USE_XOPEN_EXTENDED


255 
TRAP_BRKPT
 = 1,

256 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

257 
TRAP_TRACE


258 
	#TRAP_TRACE
 
TRAP_TRACE


	)

262 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


266 
CLD_EXITED
 = 1,

267 
	#CLD_EXITED
 
CLD_EXITED


	)

268 
CLD_KILLED
,

269 
	#CLD_KILLED
 
CLD_KILLED


	)

270 
CLD_DUMPED
,

271 
	#CLD_DUMPED
 
CLD_DUMPED


	)

272 
CLD_TRAPPED
,

273 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

274 
CLD_STOPPED
,

275 
	#CLD_STOPPED
 
CLD_STOPPED


	)

276 
CLD_CONTINUED


277 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

283 
POLL_IN
 = 1,

284 
	#POLL_IN
 
POLL_IN


	)

285 
POLL_OUT
,

286 
	#POLL_OUT
 
POLL_OUT


	)

287 
POLL_MSG
,

288 
	#POLL_MSG
 
POLL_MSG


	)

289 
POLL_ERR
,

290 
	#POLL_ERR
 
POLL_ERR


	)

291 
POLL_PRI
,

292 
	#POLL_PRI
 
POLL_PRI


	)

293 
POLL_HUP


294 
	#POLL_HUP
 
POLL_HUP


	)

298 #unde‡
__√ed_sigöfo_t


302 #i‡(
deföed
 
_SIGNAL_H
 || deföed 
__√ed_sigevít_t
) \

303 && !
deföed
 
__have_sigevít_t


304 
	#__have_sigevít_t
 1

	)

307 
	#__SIGEV_MAX_SIZE
 64

	)

308 #i‡
__WORDSIZE
 == 64

309 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

311 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

315 #i‚de‡
__have_±hªad_©å_t


316 
±hªad_©å_t
 
	t±hªad_©å_t
;

317 
	#__have_±hªad_©å_t
 1

	)

320 
	ssigevít


322 
sigvÆ_t
 
sigev_vÆue
;

323 
sigev_signo
;

324 
sigev_nŸify
;

328 
_∑d
[
__SIGEV_PAD_SIZE
];

332 
__pid_t
 
_tid
;

336 (*
_fun˘i⁄
Ë(
sigvÆ_t
);

337 
±hªad_©å_t
 *
_©åibuã
;

338 } 
_sigev_thªad
;

339 } 
_sigev_un
;

340 } 
	tsigevít_t
;

343 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

344 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

349 
SIGEV_SIGNAL
 = 0,

350 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

351 
SIGEV_NONE
,

352 
	#SIGEV_NONE
 
SIGEV_NONE


	)

353 
SIGEV_THREAD
,

354 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

356 
SIGEV_THREAD_ID
 = 4

357 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/signum.h

19 #ifdef 
_SIGNAL_H


22 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

23 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

24 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

26 #ifde‡
__USE_UNIX98


27 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

32 
	#SIGHUP
 1

	)

33 
	#SIGINT
 2

	)

34 
	#SIGQUIT
 3

	)

35 
	#SIGILL
 4

	)

36 
	#SIGTRAP
 5

	)

37 
	#SIGABRT
 6

	)

38 
	#SIGIOT
 6

	)

39 
	#SIGBUS
 7

	)

40 
	#SIGFPE
 8

	)

41 
	#SIGKILL
 9

	)

42 
	#SIGUSR1
 10

	)

43 
	#SIGSEGV
 11

	)

44 
	#SIGUSR2
 12

	)

45 
	#SIGPIPE
 13

	)

46 
	#SIGALRM
 14

	)

47 
	#SIGTERM
 15

	)

48 
	#SIGSTKFLT
 16

	)

49 
	#SIGCLD
 
SIGCHLD


	)

50 
	#SIGCHLD
 17

	)

51 
	#SIGCONT
 18

	)

52 
	#SIGSTOP
 19

	)

53 
	#SIGTSTP
 20

	)

54 
	#SIGTTIN
 21

	)

55 
	#SIGTTOU
 22

	)

56 
	#SIGURG
 23

	)

57 
	#SIGXCPU
 24

	)

58 
	#SIGXFSZ
 25

	)

59 
	#SIGVTALRM
 26

	)

60 
	#SIGPROF
 27

	)

61 
	#SIGWINCH
 28

	)

62 
	#SIGPOLL
 
SIGIO


	)

63 
	#SIGIO
 29

	)

64 
	#SIGPWR
 30

	)

65 
	#SIGSYS
 31

	)

66 
	#SIGUNUSED
 31

	)

68 
	#_NSIG
 65

	)

71 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

72 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

76 
	#__SIGRTMIN
 32

	)

77 
	#__SIGRTMAX
 (
_NSIG
 - 1)

	)

	@/usr/include/bits/sigset.h

19 #i‚def 
_SIGSET_H_ty≥s


20 
	#_SIGSET_H_ty≥s
 1

	)

22 
	t__sig_©omic_t
;

26 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

29 
	m__vÆ
[
_SIGSET_NWORDS
];

30 } 
	t__sig£t_t
;

41 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


42 
	#_SIGSET_H_‚s
 1

	)

44 #i‚de‡
_EXTERN_INLINE


45 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

49 
	#__sigmask
(
sig
) \

50 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

53 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

55 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

56 
	#__sigem±y£t
(
£t
) \

57 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

58 
sig£t_t
 *
__£t
 = (
£t
); \

59 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

60 0; }))

	)

61 
	#__sigfûl£t
(
£t
) \

62 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

63 
sig£t_t
 *
__£t
 = (
£t
); \

64 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

65 0; }))

	)

67 #ifde‡
__USE_GNU


71 
	#__sigi£m±y£t
(
£t
) \

72 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

73 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

74 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

75 !
__ªt
 && --
__˙t
 >= 0) \

76 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

77 
__ªt
 =0; }))

	)

78 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

79 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

80 
sig£t_t
 *
__de°
 = (
de°
); \

81 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

82 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

83 --
__˙t
 >= 0) \

84 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

85 & 
__right
->
__vÆ
[
__˙t
]); \

86 0; }))

	)

87 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

88 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

89 
sig£t_t
 *
__de°
 = (
de°
); \

90 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

91 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

92 --
__˙t
 >= 0) \

93 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

94 | 
__right
->
__vÆ
[
__˙t
]); \

95 0; }))

	)

102 
__sigismembî
 (c⁄° 
__sig£t_t
 *, );

103 
__sigadd£t
 (
__sig£t_t
 *, );

104 
__sigdñ£t
 (
__sig£t_t
 *, );

106 #ifde‡
__USE_EXTERN_INLINES


107 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

108 
_EXTERN_INLINE
 \

109 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

111 
__mask
 = 
	`__sigmask
 (
__sig
); \

112 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

113  
BODY
; \

114 }

	)

116 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
) ? 1 : 0, const)

117 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

118 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

120 #unde‡
__SIGSETFN


	@/usr/include/bits/sigstack.h

19 #i‚de‡
_SIGNAL_H


25 
	ssig°ack


27 *
	mss_•
;

28 
	mss_⁄°ack
;

35 
	mSS_ONSTACK
 = 1,

36 
	#SS_ONSTACK
 
SS_ONSTACK


	)

37 
	mSS_DISABLE


38 
	#SS_DISABLE
 
SS_DISABLE


	)

42 
	#MINSIGSTKSZ
 2048

	)

45 
	#SIGSTKSZ
 8192

	)

49 
	ssigÆt°ack


51 *
	mss_•
;

52 
	mss_Êags
;

53 
size_t
 
	mss_size
;

54 } 
	t°ack_t
;

	@/usr/include/bits/sigthread.h

19 #i‚de‡
_BITS_SIGTHREAD_H


20 
	#_BITS_SIGTHREAD_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


30 
	$±hªad_sigmask
 (
__how
,

31 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

32 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

35 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

37 #ifde‡
__USE_GNU


39 
	$±hªad_sigqueue
 (
±hªad_t
 
__thªadid
, 
__signo
,

40 c⁄° 
sigvÆ
 
__vÆue
Ë
__THROW
;

	@/usr/include/bits/socket.h

19 #i‚de‡
__BITS_SOCKET_H


20 
	#__BITS_SOCKET_H


	)

22 #i‚de‡
_SYS_SOCKET_H


26 
	#__√ed_size_t


	)

27 
	~<°ddef.h
>

29 
	~<sys/ty≥s.h
>

32 #i‚de‡
__sockÀn_t_deföed


33 
__sockÀn_t
 
	tsockÀn_t
;

34 
	#__sockÀn_t_deföed


	)

38 
	~<bôs/sockë_ty≥.h
>

41 
	#PF_UNSPEC
 0

	)

42 
	#PF_LOCAL
 1

	)

43 
	#PF_UNIX
 
PF_LOCAL


	)

44 
	#PF_FILE
 
PF_LOCAL


	)

45 
	#PF_INET
 2

	)

46 
	#PF_AX25
 3

	)

47 
	#PF_IPX
 4

	)

48 
	#PF_APPLETALK
 5

	)

49 
	#PF_NETROM
 6

	)

50 
	#PF_BRIDGE
 7

	)

51 
	#PF_ATMPVC
 8

	)

52 
	#PF_X25
 9

	)

53 
	#PF_INET6
 10

	)

54 
	#PF_ROSE
 11

	)

55 
	#PF_DEC√t
 12

	)

56 
	#PF_NETBEUI
 13

	)

57 
	#PF_SECURITY
 14

	)

58 
	#PF_KEY
 15

	)

59 
	#PF_NETLINK
 16

	)

60 
	#PF_ROUTE
 
PF_NETLINK


	)

61 
	#PF_PACKET
 17

	)

62 
	#PF_ASH
 18

	)

63 
	#PF_ECONET
 19

	)

64 
	#PF_ATMSVC
 20

	)

65 
	#PF_RDS
 21

	)

66 
	#PF_SNA
 22

	)

67 
	#PF_IRDA
 23

	)

68 
	#PF_PPPOX
 24

	)

69 
	#PF_WANPIPE
 25

	)

70 
	#PF_LLC
 26

	)

71 
	#PF_IB
 27

	)

72 
	#PF_MPLS
 28

	)

73 
	#PF_CAN
 29

	)

74 
	#PF_TIPC
 30

	)

75 
	#PF_BLUETOOTH
 31

	)

76 
	#PF_IUCV
 32

	)

77 
	#PF_RXRPC
 33

	)

78 
	#PF_ISDN
 34

	)

79 
	#PF_PHONET
 35

	)

80 
	#PF_IEEE802154
 36

	)

81 
	#PF_CAIF
 37

	)

82 
	#PF_ALG
 38

	)

83 
	#PF_NFC
 39

	)

84 
	#PF_VSOCK
 40

	)

85 
	#PF_MAX
 41

	)

88 
	#AF_UNSPEC
 
PF_UNSPEC


	)

89 
	#AF_LOCAL
 
PF_LOCAL


	)

90 
	#AF_UNIX
 
PF_UNIX


	)

91 
	#AF_FILE
 
PF_FILE


	)

92 
	#AF_INET
 
PF_INET


	)

93 
	#AF_AX25
 
PF_AX25


	)

94 
	#AF_IPX
 
PF_IPX


	)

95 
	#AF_APPLETALK
 
PF_APPLETALK


	)

96 
	#AF_NETROM
 
PF_NETROM


	)

97 
	#AF_BRIDGE
 
PF_BRIDGE


	)

98 
	#AF_ATMPVC
 
PF_ATMPVC


	)

99 
	#AF_X25
 
PF_X25


	)

100 
	#AF_INET6
 
PF_INET6


	)

101 
	#AF_ROSE
 
PF_ROSE


	)

102 
	#AF_DEC√t
 
PF_DEC√t


	)

103 
	#AF_NETBEUI
 
PF_NETBEUI


	)

104 
	#AF_SECURITY
 
PF_SECURITY


	)

105 
	#AF_KEY
 
PF_KEY


	)

106 
	#AF_NETLINK
 
PF_NETLINK


	)

107 
	#AF_ROUTE
 
PF_ROUTE


	)

108 
	#AF_PACKET
 
PF_PACKET


	)

109 
	#AF_ASH
 
PF_ASH


	)

110 
	#AF_ECONET
 
PF_ECONET


	)

111 
	#AF_ATMSVC
 
PF_ATMSVC


	)

112 
	#AF_RDS
 
PF_RDS


	)

113 
	#AF_SNA
 
PF_SNA


	)

114 
	#AF_IRDA
 
PF_IRDA


	)

115 
	#AF_PPPOX
 
PF_PPPOX


	)

116 
	#AF_WANPIPE
 
PF_WANPIPE


	)

117 
	#AF_LLC
 
PF_LLC


	)

118 
	#AF_IB
 
PF_IB


	)

119 
	#AF_MPLS
 
PF_MPLS


	)

120 
	#AF_CAN
 
PF_CAN


	)

121 
	#AF_TIPC
 
PF_TIPC


	)

122 
	#AF_BLUETOOTH
 
PF_BLUETOOTH


	)

123 
	#AF_IUCV
 
PF_IUCV


	)

124 
	#AF_RXRPC
 
PF_RXRPC


	)

125 
	#AF_ISDN
 
PF_ISDN


	)

126 
	#AF_PHONET
 
PF_PHONET


	)

127 
	#AF_IEEE802154
 
PF_IEEE802154


	)

128 
	#AF_CAIF
 
PF_CAIF


	)

129 
	#AF_ALG
 
PF_ALG


	)

130 
	#AF_NFC
 
PF_NFC


	)

131 
	#AF_VSOCK
 
PF_VSOCK


	)

132 
	#AF_MAX
 
PF_MAX


	)

138 
	#SOL_RAW
 255

	)

139 
	#SOL_DECNET
 261

	)

140 
	#SOL_X25
 262

	)

141 
	#SOL_PACKET
 263

	)

142 
	#SOL_ATM
 264

	)

143 
	#SOL_AAL
 265

	)

144 
	#SOL_IRDA
 266

	)

147 
	#SOMAXCONN
 128

	)

150 
	~<bôs/sockaddr.h
>

153 
	ssockaddr


155 
__SOCKADDR_COMMON
 (
ß_
);

156 
	mß_d©a
[14];

162 
	#__ss_Æig¡y≥
 

	)

163 
	#_SS_PADSIZE
 \

164 (
_SS_SIZE
 - 
__SOCKADDR_COMMON_SIZE
 -  (
__ss_Æig¡y≥
))

	)

166 
	ssockaddr_°‹age


168 
__SOCKADDR_COMMON
 (
ss_
);

169 
	m__ss_∑ddög
[
_SS_PADSIZE
];

170 
__ss_Æig¡y≥
 
	m__ss_Æign
;

177 
	mMSG_OOB
 = 0x01,

178 
	#MSG_OOB
 
MSG_OOB


	)

179 
	mMSG_PEEK
 = 0x02,

180 
	#MSG_PEEK
 
MSG_PEEK


	)

181 
	mMSG_DONTROUTE
 = 0x04,

182 
	#MSG_DONTROUTE
 
MSG_DONTROUTE


	)

183 #ifde‡
__USE_GNU


185 
	mMSG_TRYHARD
 = 
MSG_DONTROUTE
,

186 
	#MSG_TRYHARD
 
MSG_DONTROUTE


	)

188 
	mMSG_CTRUNC
 = 0x08,

189 
	#MSG_CTRUNC
 
MSG_CTRUNC


	)

190 
	mMSG_PROXY
 = 0x10,

191 
	#MSG_PROXY
 
MSG_PROXY


	)

192 
	mMSG_TRUNC
 = 0x20,

193 
	#MSG_TRUNC
 
MSG_TRUNC


	)

194 
	mMSG_DONTWAIT
 = 0x40,

195 
	#MSG_DONTWAIT
 
MSG_DONTWAIT


	)

196 
	mMSG_EOR
 = 0x80,

197 
	#MSG_EOR
 
MSG_EOR


	)

198 
	mMSG_WAITALL
 = 0x100,

199 
	#MSG_WAITALL
 
MSG_WAITALL


	)

200 
	mMSG_FIN
 = 0x200,

201 
	#MSG_FIN
 
MSG_FIN


	)

202 
	mMSG_SYN
 = 0x400,

203 
	#MSG_SYN
 
MSG_SYN


	)

204 
	mMSG_CONFIRM
 = 0x800,

205 
	#MSG_CONFIRM
 
MSG_CONFIRM


	)

206 
	mMSG_RST
 = 0x1000,

207 
	#MSG_RST
 
MSG_RST


	)

208 
	mMSG_ERRQUEUE
 = 0x2000,

209 
	#MSG_ERRQUEUE
 
MSG_ERRQUEUE


	)

210 
	mMSG_NOSIGNAL
 = 0x4000,

211 
	#MSG_NOSIGNAL
 
MSG_NOSIGNAL


	)

212 
	mMSG_MORE
 = 0x8000,

213 
	#MSG_MORE
 
MSG_MORE


	)

214 
	mMSG_WAITFORONE
 = 0x10000,

215 
	#MSG_WAITFORONE
 
MSG_WAITFORONE


	)

216 
	mMSG_FASTOPEN
 = 0x20000000,

217 
	#MSG_FASTOPEN
 
MSG_FASTOPEN


	)

219 
	mMSG_CMSG_CLOEXEC
 = 0x40000000

222 
	#MSG_CMSG_CLOEXEC
 
MSG_CMSG_CLOEXEC


	)

228 
	smsghdr


230 *
	mmsg_«me
;

231 
sockÀn_t
 
	mmsg_«mñí
;

233 
iovec
 *
	mmsg_iov
;

234 
size_t
 
	mmsg_iovÀn
;

236 *
	mmsg_c⁄åﬁ
;

237 
size_t
 
	mmsg_c⁄åﬁÀn
;

242 
	mmsg_Êags
;

246 
	scmsghdr


248 
size_t
 
	mcmsg_Àn
;

253 
	mcmsg_Àvñ
;

254 
	mcmsg_ty≥
;

255 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

256 
__exãnsi⁄__
 
__cmsg_d©a
 
	m__Êex¨r
;

261 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

262 
	#CMSG_DATA
(
cmsg
Ë((cmsg)->
__cmsg_d©a
)

	)

264 
	#CMSG_DATA
(
cmsg
Ë((*Ë((
cmsghdr
 *Ë(cmsgË+ 1))

	)

266 
	#CMSG_NXTHDR
(
mhdr
, 
cmsg
Ë
	`__cmsg_nxthdr
 (mhdr, cmsg)

	)

267 
	#CMSG_FIRSTHDR
(
mhdr
) \

268 ((
size_t
Ë(
mhdr
)->
msg_c⁄åﬁÀn
 > (
cmsghdr
) \

269 ? (
cmsghdr
 *Ë(
mhdr
)->
msg_c⁄åﬁ
 : (cmsghd∏*Ë0)

	)

270 
	#CMSG_ALIGN
(
Àn
Ë((÷íË+  (
size_t
) - 1) \

271 & (
size_t
Ë~( (size_tË- 1))

	)

272 
	#CMSG_SPACE
(
Àn
Ë(
	`CMSG_ALIGN
 (len) \

273 + 
	`CMSG_ALIGN
 ( (
cmsghdr
)))

	)

274 
	#CMSG_LEN
(
Àn
Ë(
	`CMSG_ALIGN
 ( (
cmsghdr
)Ë+ (Àn))

	)

276 
cmsghdr
 *
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
,

277 
cmsghdr
 *
__cmsg
Ë
__THROW
;

278 #ifde‡
__USE_EXTERN_INLINES


279 #i‚de‡
_EXTERN_INLINE


280 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

282 
_EXTERN_INLINE
 
cmsghdr
 *

283 
	`__NTH
 (
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
, 
cmsghdr
 *
__cmsg
))

285 i‡((
size_t
Ë
__cmsg
->
cmsg_Àn
 <  (
cmsghdr
))

287  (
cmsghdr
 *) 0;

289 
__cmsg
 = (
cmsghdr
 *) ((*) __cmsg

290 + 
	`CMSG_ALIGN
 (
__cmsg
->
cmsg_Àn
));

291 i‡((*Ë(
__cmsg
 + 1Ë> ((*Ë
__mhdr
->
msg_c⁄åﬁ


292 + 
__mhdr
->
msg_c⁄åﬁÀn
)

293 || ((*Ë
__cmsg
 + 
	`CMSG_ALIGN
 (__cmsg->
cmsg_Àn
)

294 > ((*Ë
__mhdr
->
msg_c⁄åﬁ
 + __mhdr->
msg_c⁄åﬁÀn
)))

296  (
cmsghdr
 *) 0;

297  
__cmsg
;

298 
	}
}

305 
	mSCM_RIGHTS
 = 0x01

306 
	#SCM_RIGHTS
 
SCM_RIGHTS


	)

307 #ifde‡
__USE_GNU


308 , 
	mSCM_CREDENTIALS
 = 0x02

309 
	#SCM_CREDENTIALS
 
SCM_CREDENTIALS


	)

313 #ifde‡
__USE_GNU


315 
	su¸ed


317 
pid_t
 
	mpid
;

318 
uid_t
 
	muid
;

319 
gid_t
 
	mgid
;

324 #i‚de‡
__USE_MISC


325 #i‚de‡
FIOGETOWN


326 
	#__SYS_SOCKET_H_undef_FIOGETOWN


	)

328 #i‚de‡
FIOSETOWN


329 
	#__SYS_SOCKET_H_undef_FIOSETOWN


	)

331 #i‚de‡
SIOCATMARK


332 
	#__SYS_SOCKET_H_undef_SIOCATMARK


	)

334 #i‚de‡
SIOCGPGRP


335 
	#__SYS_SOCKET_H_undef_SIOCGPGRP


	)

337 #i‚de‡
SIOCGSTAMP


338 
	#__SYS_SOCKET_H_undef_SIOCGSTAMP


	)

340 #i‚de‡
SIOCGSTAMPNS


341 
	#__SYS_SOCKET_H_undef_SIOCGSTAMPNS


	)

343 #i‚de‡
SIOCSPGRP


344 
	#__SYS_SOCKET_H_undef_SIOCSPGRP


	)

349 
	~<asm/sockë.h
>

351 #i‚de‡
__USE_MISC


352 #ifde‡
__SYS_SOCKET_H_undef_FIOGETOWN


353 #unde‡
__SYS_SOCKET_H_undef_FIOGETOWN


354 #unde‡
FIOGETOWN


356 #ifde‡
__SYS_SOCKET_H_undef_FIOSETOWN


357 #unde‡
__SYS_SOCKET_H_undef_FIOSETOWN


358 #unde‡
FIOSETOWN


360 #ifde‡
__SYS_SOCKET_H_undef_SIOCATMARK


361 #unde‡
__SYS_SOCKET_H_undef_SIOCATMARK


362 #unde‡
SIOCATMARK


364 #ifde‡
__SYS_SOCKET_H_undef_SIOCGPGRP


365 #unde‡
__SYS_SOCKET_H_undef_SIOCGPGRP


366 #unde‡
SIOCGPGRP


368 #ifde‡
__SYS_SOCKET_H_undef_SIOCGSTAMP


369 #unde‡
__SYS_SOCKET_H_undef_SIOCGSTAMP


370 #unde‡
SIOCGSTAMP


372 #ifde‡
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


373 #unde‡
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


374 #unde‡
SIOCGSTAMPNS


376 #ifde‡
__SYS_SOCKET_H_undef_SIOCSPGRP


377 #unde‡
__SYS_SOCKET_H_undef_SIOCSPGRP


378 #unde‡
SIOCSPGRP


383 
	slögî


385 
	ml_⁄off
;

386 
	ml_lögî
;

	@/usr/include/bits/socket2.h

19 #i‚de‡
_SYS_SOCKET_H


23 
ssize_t
 
__ªcv_chk
 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

24 
__Êags
);

25 
ssize_t
 
__REDIRECT
 (
__ªcv_Æüs
, (
__fd
, *
__buf
, 
size_t
 
__n
,

26 
__Êags
), 
ªcv
);

27 
ssize_t
 
__REDIRECT
 (
__ªcv_chk_w¨n
,

28 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

29 
__Êags
), 
__ªcv_chk
)

30 
__w¨«âr
 ("recv called with biggerÜengthÅhan size of destination "

33 
__f‹tify_fun˘i⁄
 
ssize_t


34 
	$ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
)

36 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

38 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

39  
	`__ªcv_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
);

41 i‡(
__n
 > 
	`__bos0
 (
__buf
))

42  
	`__ªcv_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
);

44  
	`__ªcv_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
);

45 
	}
}

47 
ssize_t
 
__ªcv‰om_chk
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

48 
size_t
 
__buÊí
, 
__Êags
,

49 
__SOCKADDR_ARG
 
__addr
,

50 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

51 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_Æüs
,

52 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

53 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

54 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
ªcv‰om
);

55 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_chk_w¨n
,

56 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

57 
size_t
 
__buÊí
, 
__Êags
,

58 
__SOCKADDR_ARG
 
__addr
,

59 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
__ªcv‰om_chk
)

60 
__w¨«âr
 ("recvfrom called with biggerÜengthÅhan size of "

63 
__f‹tify_fun˘i⁄
 
ssize_t


64 
	$ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
, 
__Êags
,

65 
__SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
)

67 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

69 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

70  
	`__ªcv‰om_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
,

71 
__addr
, 
__addr_Àn
);

72 i‡(
__n
 > 
	`__bos0
 (
__buf
))

73  
	`__ªcv‰om_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
,

74 
__addr
, 
__addr_Àn
);

76  
	`__ªcv‰om_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
, 
__addr
, 
__addr_Àn
);

77 
	}
}

	@/usr/include/bits/stat.h

18 #i‡!
deföed
 
_SYS_STAT_H
 && !deföed 
_FCNTL_H


22 #i‚de‡
_BITS_STAT_H


23 
	#_BITS_STAT_H
 1

	)

26 #i‚de‡
__x86_64__


27 
	#_STAT_VER_LINUX_OLD
 1

	)

28 
	#_STAT_VER_KERNEL
 1

	)

29 
	#_STAT_VER_SVR4
 2

	)

30 
	#_STAT_VER_LINUX
 3

	)

33 
	#_MKNOD_VER_LINUX
 1

	)

34 
	#_MKNOD_VER_SVR4
 2

	)

35 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

37 
	#_STAT_VER_KERNEL
 0

	)

38 
	#_STAT_VER_LINUX
 1

	)

41 
	#_MKNOD_VER_LINUX
 0

	)

44 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

46 
	s°©


48 
__dev_t
 
	m°_dev
;

49 #i‚de‡
__x86_64__


50 
	m__∑d1
;

52 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


53 
__öo_t
 
	m°_öo
;

55 
__öo_t
 
	m__°_öo
;

57 #i‚de‡
__x86_64__


58 
__mode_t
 
	m°_mode
;

59 
__∆ök_t
 
	m°_∆ök
;

61 
__∆ök_t
 
	m°_∆ök
;

62 
__mode_t
 
	m°_mode
;

64 
__uid_t
 
	m°_uid
;

65 
__gid_t
 
	m°_gid
;

66 #ifde‡
__x86_64__


67 
	m__∑d0
;

69 
__dev_t
 
	m°_rdev
;

70 #i‚de‡
__x86_64__


71 
	m__∑d2
;

73 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


74 
__off_t
 
	m°_size
;

76 
__off64_t
 
	m°_size
;

78 
__blksize_t
 
	m°_blksize
;

79 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


80 
__blk˙t_t
 
	m°_blocks
;

82 
__blk˙t64_t
 
	m°_blocks
;

84 #ifde‡
__USE_XOPEN2K8


91 
time•ec
 
	m°_©im
;

92 
time•ec
 
	m°_mtim
;

93 
time•ec
 
	m°_˘im
;

94 
	#°_©ime
 
°_©im
.
tv_£c


	)

95 
	#°_mtime
 
°_mtim
.
tv_£c


	)

96 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

98 
__time_t
 
	m°_©ime
;

99 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

100 
__time_t
 
	m°_mtime
;

101 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

102 
__time_t
 
	m°_˘ime
;

103 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

105 #ifde‡
__x86_64__


106 
__sysˇŒ_¶⁄g_t
 
	m__glibc_ª£rved
[3];

108 #i‚de‡
__USE_FILE_OFFSET64


109 
	m__glibc_ª£rved4
;

110 
	m__glibc_ª£rved5
;

112 
__öo64_t
 
	m°_öo
;

117 #ifde‡
__USE_LARGEFILE64


119 
	s°©64


121 
__dev_t
 
	m°_dev
;

122 #ifde‡
__x86_64__


123 
__öo64_t
 
	m°_öo
;

124 
__∆ök_t
 
	m°_∆ök
;

125 
__mode_t
 
	m°_mode
;

127 
	m__∑d1
;

128 
__öo_t
 
	m__°_öo
;

129 
__mode_t
 
	m°_mode
;

130 
__∆ök_t
 
	m°_∆ök
;

132 
__uid_t
 
	m°_uid
;

133 
__gid_t
 
	m°_gid
;

134 #ifde‡
__x86_64__


135 
	m__∑d0
;

136 
__dev_t
 
	m°_rdev
;

137 
__off_t
 
	m°_size
;

139 
__dev_t
 
	m°_rdev
;

140 
	m__∑d2
;

141 
__off64_t
 
	m°_size
;

143 
__blksize_t
 
	m°_blksize
;

144 
__blk˙t64_t
 
	m°_blocks
;

145 #ifde‡
__USE_XOPEN2K8


152 
time•ec
 
	m°_©im
;

153 
time•ec
 
	m°_mtim
;

154 
time•ec
 
	m°_˘im
;

156 
__time_t
 
	m°_©ime
;

157 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

158 
__time_t
 
	m°_mtime
;

159 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

160 
__time_t
 
	m°_˘ime
;

161 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

163 #ifde‡
__x86_64__


164 
__sysˇŒ_¶⁄g_t
 
	m__glibc_ª£rved
[3];

166 
__öo64_t
 
	m°_öo
;

172 
	#_STATBUF_ST_BLKSIZE


	)

173 
	#_STATBUF_ST_RDEV


	)

175 
	#_STATBUF_ST_NSEC


	)

179 
	#__S_IFMT
 0170000

	)

182 
	#__S_IFDIR
 0040000

	)

183 
	#__S_IFCHR
 0020000

	)

184 
	#__S_IFBLK
 0060000

	)

185 
	#__S_IFREG
 0100000

	)

186 
	#__S_IFIFO
 0010000

	)

187 
	#__S_IFLNK
 0120000

	)

188 
	#__S_IFSOCK
 0140000

	)

192 
	#__S_TYPEISMQ
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

193 
	#__S_TYPEISSEM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

194 
	#__S_TYPEISSHM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

198 
	#__S_ISUID
 04000

	)

199 
	#__S_ISGID
 02000

	)

200 
	#__S_ISVTX
 01000

	)

201 
	#__S_IREAD
 0400

	)

202 
	#__S_IWRITE
 0200

	)

203 
	#__S_IEXEC
 0100

	)

205 #ifde‡
__USE_ATFILE


206 
	#UTIME_NOW
 ((1»<< 30Ë- 1l)

	)

207 
	#UTIME_OMIT
 ((1»<< 30Ë- 2l)

	)

	@/usr/include/bits/stdio-ldbl.h

19 #i‚de‡
_STDIO_H


23 
__BEGIN_NAMESPACE_STD


24 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

25 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

26 
	$__LDBL_REDIR_DECL
 (
•rötf
)

27 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

28 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

29 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

30 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

31 && !
deföed
 
__REDIRECT
 \

32 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

33 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

34 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

37 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

39 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

41 
__END_NAMESPACE_STD


43 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


44 
__BEGIN_NAMESPACE_C99


45 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

46 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

47 
__END_NAMESPACE_C99


50 #ifdef 
__USE_ISOC99


51 
__BEGIN_NAMESPACE_C99


52 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

53 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

54 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

55 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

58 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

59 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

60 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

62 
__END_NAMESPACE_C99


65 #ifde‡
__USE_XOPEN2K8


66 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

67 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

70 #ifde‡
__USE_GNU


71 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

72 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

73 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

74 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

75 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

78 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


79 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

80 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

81 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


82 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

83 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

85 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

88 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

89 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

90 #ifde‡
__USE_XOPEN2K8


91 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

94 #ifde‡
__USE_GNU


95 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

96 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

97 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

98 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

19 #i‚de‡
_STDIO_H


23 #i‚de‡
__exã∫_ölöe


24 
	#__STDIO_INLINE
 
ölöe


	)

26 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

30 #ifde‡
__USE_EXTERN_INLINES


33 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
)

35 
__STDIO_INLINE
 

36 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

38  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

39 
	}
}

43 
__STDIO_INLINE
 

44 
	$gëch¨
 ()

46  
	`_IO_gëc
 (
°dö
);

47 
	}
}

50 #ifde‡
__USE_MISC


52 
__STDIO_INLINE
 

53 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

55  
	`_IO_gëc_u∆ocked
 (
__Â
);

56 
	}
}

60 #ifde‡
__USE_POSIX


62 
__STDIO_INLINE
 

63 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

65  
	`_IO_gëc_u∆ocked
 (
__Â
);

66 
	}
}

69 
__STDIO_INLINE
 

70 
	$gëch¨_u∆ocked
 ()

72  
	`_IO_gëc_u∆ocked
 (
°dö
);

73 
	}
}

78 
__STDIO_INLINE
 

79 
	$putch¨
 (
__c
)

81  
	`_IO_putc
 (
__c
, 
°dout
);

82 
	}
}

85 #ifde‡
__USE_MISC


87 
__STDIO_INLINE
 

88 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

90  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

91 
	}
}

95 #ifde‡
__USE_POSIX


97 
__STDIO_INLINE
 

98 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

100  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

101 
	}
}

104 
__STDIO_INLINE
 

105 
	$putch¨_u∆ocked
 (
__c
)

107  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

108 
	}
}

112 #ifdef 
__USE_GNU


114 
__STDIO_INLINE
 
_IO_ssize_t


115 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

117  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

118 
	}
}

122 #ifde‡
__USE_MISC


124 
__STDIO_INLINE
 

125 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

127  
	`_IO_„of_u∆ocked
 (
__°ªam
);

128 
	}
}

131 
__STDIO_INLINE
 

132 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

134  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

135 
	}
}

141 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

142 && !
deföed
 
	g__˝lu•lus


144 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

145 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

146 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

147 && (
size_t
Ë(
size
) != 0) \

148 ? ({ *
__±r
 = (*Ë(
±r
); \

149 
FILE
 *
__°ªam
 = (
°ªam
); \

150 
size_t
 
__˙t
; \

151 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

152 
__˙t
 > 0; --__cnt) \

154 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

155 i‡(
__c
 =
EOF
) \

157 *
__±r
++ = 
__c
; \

159 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

160 / (
size_t
Ë(
size
); }) \

161 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

162 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

164 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

165 (Ë(
n
), (
size_t
) 0) \

166 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

168 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

169 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

170 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

171 && (
size_t
Ë(
size
) != 0) \

172 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

173 
FILE
 *
__°ªam
 = (
°ªam
); \

174 
size_t
 
__˙t
; \

175 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

176 
__˙t
 > 0; --__cnt) \

177 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

179 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

180 / (
size_t
Ë(
size
); }) \

181 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

182 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

184 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

185 (Ë(
n
), (
size_t
) 0) \

186 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

190 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

19 #i‚de‡
_STDIO_H


23 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

24 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

25 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

26 c⁄° *
__ª°ri˘
 
__f‹m©
,

27 
_G_va_li°
 
__≠
Ë
__THROW
;

29 #ifde‡
__va_¨g_∑ck


30 
__f‹tify_fun˘i⁄
 

31 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
, ...))

33  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

34 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

35 
	}
}

36 #ñi‡!
deföed
 
__˝lu•lus


37 
	#•rötf
(
°r
, ...) \

38 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

39 
__VA_ARGS__
)

	)

42 
__f‹tify_fun˘i⁄
 

43 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
,

44 
_G_va_li°
 
__≠
))

46  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

47 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

48 
	}
}

50 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


52 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

53 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

54 ...Ë
__THROW
;

55 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

56 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

57 
_G_va_li°
 
__≠
Ë
__THROW
;

59 #ifde‡
__va_¨g_∑ck


60 
__f‹tify_fun˘i⁄
 

61 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

62 c⁄° *
__ª°ri˘
 
__fmt
, ...))

64  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

65 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

66 
	}
}

67 #ñi‡!
deföed
 
__˝lu•lus


68 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

69 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

70 
__VA_ARGS__
)

	)

73 
__f‹tify_fun˘i⁄
 

74 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

75 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

77  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

78 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

79 
	}
}

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

85 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

86 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

87 
__¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

88 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

89 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

90 
__v¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

91 
_G_va_li°
 
__≠
);

93 #ifde‡
__va_¨g_∑ck


94 
__f‹tify_fun˘i⁄
 

95 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° *__ª°ri˘ 
__fmt
, ...)

97  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

98 
	`__va_¨g_∑ck
 ());

99 
	}
}

101 
__f‹tify_fun˘i⁄
 

102 
	$¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, ...)

104  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

105 
	}
}

106 #ñi‡!
deföed
 
__˝lu•lus


107 
	#¥ötf
(...) \

108 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

109 
	#Ârötf
(
°ªam
, ...) \

110 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

113 
__f‹tify_fun˘i⁄
 

114 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

116 #ifde‡
__USE_EXTERN_INLINES


117  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

119  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

121 
	}
}

123 
__f‹tify_fun˘i⁄
 

124 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

125 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

127  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

128 
	}
}

130 #ifde‡
__USE_XOPEN2K8


131 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, c⁄° *
__ª°ri˘
 
__fmt
,

132 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

133 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

134 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

135 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

137 #ifde‡
__va_¨g_∑ck


138 
__f‹tify_fun˘i⁄
 

139 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

141  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

142 
	`__va_¨g_∑ck
 ());

143 
	}
}

144 #ñi‡!
deföed
 
__˝lu•lus


145 
	#d¥ötf
(
fd
, ...) \

146 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

149 
__f‹tify_fun˘i⁄
 

150 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

152  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

153 
	}
}

156 #ifde‡
__USE_GNU


158 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

159 c⁄° *
__ª°ri˘
 
__fmt
, ...)

160 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

161 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

162 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

163 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

164 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

165 
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

167 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

168 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

169 
__Êag
,

170 c⁄° *
__ª°ri˘
 
__f‹m©
,

171 
_G_va_li°
 
__¨gs
)

172 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

174 #ifde‡
__va_¨g_∑ck


175 
__f‹tify_fun˘i⁄
 

176 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
, ...))

178  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

179 
	`__va_¨g_∑ck
 ());

180 
	}
}

182 
__f‹tify_fun˘i⁄
 

183 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

186  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

187 
	`__va_¨g_∑ck
 ());

188 
	}
}

190 
__f‹tify_fun˘i⁄
 

191 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

192 c⁄° *
__ª°ri˘
 
__fmt
, ...))

194  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

195 
	`__va_¨g_∑ck
 ());

196 
	}
}

197 #ñi‡!
deföed
 
__˝lu•lus


198 
	#a•rötf
(
±r
, ...) \

199 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

200 
	#__a•rötf
(
±r
, ...) \

201 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

202 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

203 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

206 
__f‹tify_fun˘i⁄
 

207 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

208 
_G_va_li°
 
__≠
))

210  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

211 
	}
}

213 
__f‹tify_fun˘i⁄
 

214 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

215 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

217  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

218 
__≠
);

219 
	}
}

225 #i‡!
deföed
 
__USE_ISOC11
 \

226 || (
deföed
 
	g__˝lu•lus
 && __˝lu•lu†<201103L && !deföed 
__USE_GNU
)

227 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

228 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

229 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

232 
__f‹tify_fun˘i⁄
 
__wur
 *

233 
	$gës
 (*
__°r
)

235 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

236  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

237  
	`__gës_w¨n
 (
__°r
);

238 
	}
}

241 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

242 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

243 *
	`__REDIRECT
 (
__fgës_Æüs
,

244 (*
__ª°ri˘
 
__s
, 
__n
,

245 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

246 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

247 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

248 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

249 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

252 
__f‹tify_fun˘i⁄
 
__wur
 *

253 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

255 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

257 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

258  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

260 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

261  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

263  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

264 
	}
}

266 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

267 
size_t
 
__size
, size_à
__n
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

269 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

270 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

271 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

272 
‰ód
Ë
__wur
;

273 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

274 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

275 
size_t
 
__size
, size_à
__n
,

276 
FILE
 *
__ª°ri˘
 
__°ªam
),

277 
__‰ód_chk
)

278 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

281 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


282 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

283 
FILE
 *
__ª°ri˘
 
__°ªam
)

285 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

287 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

288 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

289 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

290  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

292 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

293  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

295  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

296 
	}
}

298 #ifde‡
__USE_GNU


299 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

300 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

301 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

302 (*
__ª°ri˘
 
__s
, 
__n
,

303 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

304 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

305 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

306 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

307 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

310 
__f‹tify_fun˘i⁄
 
__wur
 *

311 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

313 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

315 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

316  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

318 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

319  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

321  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

322 
	}
}

325 #ifde‡
__USE_MISC


326 #unde‡
‰ód_u∆ocked


327 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

330 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

331 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

332 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

333 
‰ód_u∆ocked
Ë
__wur
;

334 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

335 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

336 
size_t
 
__size
, size_à
__n
,

337 
FILE
 *
__ª°ri˘
 
__°ªam
),

338 
__‰ód_u∆ocked_chk
)

339 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

342 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


343 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

344 
FILE
 *
__ª°ri˘
 
__°ªam
)

346 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

349 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

350 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

351  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

352 
__°ªam
);

354 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

355  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

356 
__°ªam
);

359 #ifde‡
__USE_EXTERN_INLINES


360 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

361 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

362 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

363 && 
__size
 * 
__n
 <= 8)

365 
size_t
 
__˙t
 = 
__size
 * 
__n
;

366 *
__˝å
 = (*Ë
__±r
;

367 i‡(
__˙t
 == 0)

370 ; 
__˙t
 > 0; --__cnt)

372 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

373 i‡(
__c
 =
EOF
)

375 *
__˝å
++ = 
__c
;

377  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

380  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

381 
	}
}

	@/usr/include/bits/stdio_lim.h

18 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


22 #ifde‡
_STDIO_H


23 
	#L_tm≤am
 20

	)

24 
	#TMP_MAX
 238328

	)

25 
	#FILENAME_MAX
 4096

	)

27 #ifde‡
__USE_POSIX


28 
	#L_˘îmid
 9

	)

29 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


30 
	#L_cu£rid
 9

	)

35 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


36 #unde‡
FOPEN_MAX


37 
	#FOPEN_MAX
 16

	)

40 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


41 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-bsearch.h

19 
__exã∫_ölöe
 *

20 
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

21 
__com∑r_‚_t
 
__com∑r
)

23 
size_t
 
__l
, 
__u
, 
__idx
;

24 c⁄° *
__p
;

25 
__com∑ris⁄
;

27 
__l
 = 0;

28 
__u
 = 
__nmemb
;

29 
__l
 < 
__u
)

31 
__idx
 = (
__l
 + 
__u
) / 2;

32 
__p
 = (*Ë(((c⁄° *Ë
__ba£
Ë+ (
__idx
 * 
__size
));

33 
__com∑ris⁄
 = (*
__com∑r
Ë(
__key
, 
__p
);

34 i‡(
__com∑ris⁄
 < 0)

35 
__u
 = 
__idx
;

36 i‡(
__com∑ris⁄
 > 0)

37 
__l
 = 
__idx
 + 1;

39  (*Ë
__p
;

42  
NULL
;

43 
	}
}

	@/usr/include/bits/stdlib-float.h

19 #i‚de‡
_STDLIB_H


23 #ifde‡
__USE_EXTERN_INLINES


24 
__BEGIN_NAMESPACE_STD


25 
__exã∫_ölöe
 

26 
__NTH
 (
	$©of
 (c⁄° *
__≈å
))

28  
	`°πod
 (
__≈å
, (**Ë
NULL
);

29 
	}
}

30 
	g__END_NAMESPACE_STD


	@/usr/include/bits/stdlib-ldbl.h

19 #i‚de‡
_STDLIB_H


23 #ifdef 
__USE_ISOC99


24 
__BEGIN_NAMESPACE_C99


25 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

26 
__END_NAMESPACE_C99


29 #ifde‡
__USE_GNU


30 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

33 #ifde‡
__USE_MISC


34 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

35 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

36 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

38 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

19 #i‚de‡
_STDLIB_H


23 *
	$__ªÆ∑th_chk
 (c⁄° *
__ª°ri˘
 
__«me
,

24 *
__ª°ri˘
 
__ªsﬁved
,

25 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

26 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

27 (c⁄° *
__ª°ri˘
 
__«me
,

28 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

29 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

30 (c⁄° *
__ª°ri˘
 
__«me
,

31 *
__ª°ri˘
 
__ªsﬁved
,

32 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


33 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

36 
__f‹tify_fun˘i⁄
 
__wur
 *

37 
	`__NTH
 (
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

39 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

41 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


42 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

43  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

45  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

48  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

49 
	}
}

52 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

53 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

54 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

55 
size_t
 
__buÊí
), 
±¢ame_r
)

56 
	`__n⁄nuŒ
 ((2));

57 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

58 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

59 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

60 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

63 
__f‹tify_fun˘i⁄
 

64 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

66 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

68 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

69  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

70 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

71  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

73  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

74 
	}
}

77 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

78 
__THROW
 
__wur
;

79 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

80 
w˘omb
Ë
__wur
;

82 
__f‹tify_fun˘i⁄
 
__wur
 

83 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

88 
	#__STDLIB_MB_LEN_MAX
 16

	)

89 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


92 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

93  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

94  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

95 
	}
}

98 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

99 c⁄° *
__ª°ri˘
 
__§c
,

100 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

101 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

102 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

103 c⁄° *
__ª°ri˘
 
__§c
,

104 
size_t
 
__Àn
), 
mb°owcs
);

105 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

106 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

107 c⁄° *
__ª°ri˘
 
__§c
,

108 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

109 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

112 
__f‹tify_fun˘i⁄
 
size_t


113 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° *__ª°ri˘ 
__§c
,

114 
size_t
 
__Àn
))

116 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

118 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

119  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

120 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

122 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

123  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

124 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

126  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

127 
	}
}

130 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

131 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

132 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

133 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

134 (*
__ª°ri˘
 
__d°
,

135 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

136 
size_t
 
__Àn
), 
wc°ombs
);

137 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

138 (*
__ª°ri˘
 
__d°
,

139 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

140 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

141 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

143 
__f‹tify_fun˘i⁄
 
size_t


144 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__§c
,

145 
size_t
 
__Àn
))

147 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

149 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

150  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

151 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

152  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

154  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

155 
	}
}

	@/usr/include/bits/string.h

19 #i‚de‡
_STRING_H


24 
	#_STRING_INLINE_u«lig√d
 1

	)

27 
	#_HAVE_STRING_ARCH_memp˝y
 1

	)

31 #i‡!
deföed
 
__x86_64__
 && (deföed 
__i486__
 || deföed 
__≥¡ium__
 \

32 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

33 || 
deföed
 
	g__noc⁄a__
 || deföed 
	g__©om__
 \

34 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__c‹ei7__
 \

35 || 
deföed
 
	g__ßndybridge__
 || deföed 
	g__haswñl__
 \

36 || 
deföed
 
	g__b⁄√Œ__
 || deföed 
	g__sûvîm⁄t__
 \

37 || 
deföed
 
	g__k6__
 || deföed 
	g__geode__
 \

38 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

39 || 
deföed
 
	g__amdÁm10__
 || deföed 
	g__bdvî1__
 \

40 || 
deföed
 
	g__bdvî2__
 || deföed 
	g__bdvî3__
 \

41 || 
deföed
 
	g__bdvî4__
 || deföed 
	g__btvî1__
 \

42 || 
deföed
 
	g__btvî2__
)

46 #i‡!
deföed
 
__NO_STRING_INLINES
 && deföed 
__USE_STRING_INLINES
 \

47 && 
deföed
 
	g__GNUC__
 && __GNUC__ >= 2

49 #i‚de‡
__STRING_INLINE


50 #i‚de‡
__exã∫_ölöe


51 
	#__STRING_INLINE
 
ölöe


	)

53 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

58 
	#__STRING_SMALL_GET16
(
§c
, 
idx
) \

59 ((((c⁄° *Ë(
§c
))[
idx
 + 1] << 8) \

60 | ((c⁄° *Ë(
§c
))[
idx
])

	)

61 
	#__STRING_SMALL_GET32
(
§c
, 
idx
) \

62 (((((c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

63 | ((c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

64 | ((c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

65 | ((c⁄° *Ë(
§c
))[
idx
])

	)

69 
	#_HAVE_STRING_ARCH_mem˝y
 1

	)

70 
	#mem˝y
(
de°
, 
§c
, 
n
) \

71 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

72 ? 
	`__mem˝y_c
 ((
de°
), (
§c
), (
n
)) \

73 : 
	`__mem˝y_g
 ((
de°
), (
§c
), (
n
))))

	)

74 
	#__mem˝y_c
(
de°
, 
§c
, 
n
) \

75 ((
n
) == 0 \

76 ? (
de°
) \

77 : (((
n
) % 4 == 0) \

78 ? 
	`__mem˝y_by4
 (
de°
, 
§c
, 
n
) \

79 : (((
n
) % 2 == 0) \

80 ? 
	`__mem˝y_by2
 (
de°
, 
§c
, 
n
) \

81 : 
	`__mem˝y_g
 (
de°
, 
§c
, 
n
))))

	)

83 
__STRING_INLINE
 *
__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
,

84 
size_t
 
__n
);

86 
__STRING_INLINE
 *

87 
	$__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

89 
__d0
, 
__d1
;

90 *
__tmp
 = 
__de°
;

91 
__asm__
 
__vﬁ©ûe__


99 : "=&r" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

100 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 4)

102  
__de°
;

103 
	}
}

105 
__STRING_INLINE
 *
__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
,

106 
size_t
 
__n
);

108 
__STRING_INLINE
 *

109 
	$__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

111 
__d0
, 
__d1
;

112 *
__tmp
 = 
__de°
;

113 
__asm__
 
__vﬁ©ûe__


126 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

127 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 2)

129  
__de°
;

130 
	}
}

132 
__STRING_INLINE
 *
__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
);

134 
__STRING_INLINE
 *

135 
	$__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

137 
__d0
, 
__d1
, 
__d2
;

138 *
__tmp
 = 
__de°
;

139 
__asm__
 
__vﬁ©ûe__


150 : "=&c" (
__d0
), "=&D" (
__d1
), "=&S" (
__d2
),

151 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

152 : "0" (
__n
), "1" (
__tmp
), "2" (
__§c
),

153 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
)

155  
__de°
;

156 
	}
}

158 
	#_HAVE_STRING_ARCH_memmove
 1

	)

159 #i‚de‡
_FORCE_INLINES


162 
	#memmove
(
de°
, 
§c
, 
n
Ë
	`__memmove_g
 (de°, src,Ç)

	)

164 
__STRING_INLINE
 *
	$__memmove_g
 (*, c⁄° *, 
size_t
)

165 
	`__asm__
 ("memmove");

167 
__STRING_INLINE
 *

168 
	$__memmove_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

170 
__d0
, 
__d1
, 
__d2
;

171 *
__tmp
 = 
__de°
;

172 i‡(
__de°
 < 
__§c
)

173 
__asm__
 
__vﬁ©ûe__


176 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

177 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

178 : "0" (
__n
), "1" (
__§c
), "2" (
__tmp
),

179 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

181 
__asm__
 
__vﬁ©ûe__


187 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

188 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

189 : "0" (
__n
), "1" (__¿+ (c⁄° *Ë
__§c
),

190 "2" (
__n
 + (*Ë
__tmp
),

191 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

192  
__de°
;

193 
	}
}

197 
	#_HAVE_STRING_ARCH_memcmp
 1

	)

198 #i‚de‡
_FORCE_INLINES


199 #i‚de‡
__PIC__


201 
__STRING_INLINE
 

202 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

204 
__d0
, 
__d1
, 
__d2
;

205 
__ªs
;

206 
__asm__
 
__vﬁ©ûe__


214 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

215 : "0" (0), "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

216 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

217 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

219  
__ªs
;

220 
	}
}

225 
	#_HAVE_STRING_ARCH_mem£t
 1

	)

226 
	#_USE_STRING_ARCH_mem£t
 1

	)

227 
	#mem£t
(
s
, 
c
, 
n
) \

228 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

229 ? ((
n
) == 1 \

230 ? 
	`__mem£t_c1
 ((
s
), (
c
)) \

231 : 
	`__mem£t_gc
 ((
s
), (
c
), (
n
))) \

232 : (
	`__buûtö_c⁄°™t_p
 (
c
) \

233 ? (
	`__buûtö_c⁄°™t_p
 (
n
) \

234 ? 
	`__mem£t_c˙
 ((
s
), (
c
), (
n
)) \

235 : 
	`mem£t
 ((
s
), (
c
), (
n
))) \

236 : (
	`__buûtö_c⁄°™t_p
 (
n
) \

237 ? 
	`__mem£t_g˙
 ((
s
), (
c
), (
n
)) \

238 : 
	`mem£t
 ((
s
), (
c
), (
n
))))))

	)

240 
	#__mem£t_c1
(
s
, 
c
Ë({ *
__s
 = (s); \

241 *((*Ë
__s
Ë(Ë(
c
); \

242 
__s
; })

	)

244 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

245 ({ *
__s
 = (
s
); \

247 
__ui
; \

248 
__usi
; \

249 
__uc
; \

250 } *
__u
 = 
__s
; \

251 
__c
 = ((Ë((Ë(
c
))) * 0x01010101; \

257 i‡((
n
) == 3 || (n) >= 5) \

258 
__asm__
 
	`__vﬁ©ûe__
 ("" : "Ù" (
__c
) : "0" (__c)); \

261 
n
) \

264 
__u
->
__ui
 = 
__c
; \

265 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

267 
__u
->
__ui
 = 
__c
; \

268 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

270 
__u
->
__ui
 = 
__c
; \

271 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

273 
__u
->
__usi
 = (Ë
__c
; \

274 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

275 
__u
->
__uc
 = (Ë
__c
; \

279 
__u
->
__ui
 = 
__c
; \

280 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

282 
__u
->
__ui
 = 
__c
; \

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

285 
__u
->
__ui
 = 
__c
; \

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

288 
__u
->
__usi
 = (Ë
__c
; \

292 
__u
->
__ui
 = 
__c
; \

293 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

295 
__u
->
__ui
 = 
__c
; \

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

298 
__u
->
__ui
 = 
__c
; \

299 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

301 
__u
->
__uc
 = (Ë
__c
; \

305 
__u
->
__ui
 = 
__c
; \

306 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

308 
__u
->
__ui
 = 
__c
; \

309 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

311 
__u
->
__ui
 = 
__c
; \

312 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

314 
__u
->
__ui
 = 
__c
; \

319 
__s
; })

	)

321 
	#__mem£t_c˙
(
s
, 
c
, 
n
) \

322 (((
n
) % 4 == 0) \

323 ? 
	`__mem£t_c˙_by4
 (
s
, ((Ë((Ë(
c
))) * 0x01010101,\

324 
n
) \

325 : (((
n
) % 2 == 0) \

326 ? 
	`__mem£t_c˙_by2
 (
s
, \

327 ((Ë((Ë(
c
))) * 0x01010101,\

328 
n
) \

329 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

331 
__STRING_INLINE
 *
__mem£t_c˙_by4
 (*
__s
, 
__c
,

332 
size_t
 
__n
);

334 
__STRING_INLINE
 *

335 
	$__mem£t_c˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

337 *
__tmp
 = 
__s
;

338 
__d0
;

339 #ifde‡
__i686__


340 
__asm__
 
__vﬁ©ûe__


343 : "=&a" (
__c
), "=&D" (
__tmp
), "=&c" (
__d0
),

344 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

345 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

348 
__asm__
 
__vﬁ©ûe__


354 : "=&r" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

355 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

356 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

359  
__s
;

360 
	}
}

362 
__STRING_INLINE
 *
__mem£t_c˙_by2
 (*
__s
, 
__c
,

363 
size_t
 
__n
);

365 
__STRING_INLINE
 *

366 
	$__mem£t_c˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

368 
__d0
, 
__d1
;

369 *
__tmp
 = 
__s
;

370 #ifde‡
__i686__


371 
__asm__
 
__vﬁ©ûe__


375 : "=&a" (
__d0
), "=&D" (
__tmp
), "=&c" (
__d1
),

376 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

377 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

380 
__asm__
 
__vﬁ©ûe__


386 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

387 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

388 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

391  
__s
;

392 
	}
}

394 
	#__mem£t_g˙
(
s
, 
c
, 
n
) \

395 (((
n
) % 4 == 0) \

396 ? 
	`__mem£t_g˙_by4
 (
s
, 
c
, 
n
) \

397 : (((
n
) % 2 == 0) \

398 ? 
	`__mem£t_g˙_by2
 (
s
, 
c
, 
n
) \

399 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

401 
__STRING_INLINE
 *
__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
);

403 
__STRING_INLINE
 *

404 
	$__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

406 *
__tmp
 = 
__s
;

407 
__d0
;

408 
__asm__
 
__vﬁ©ûe__


418 : "=&q" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

419 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

420 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

422  
__s
;

423 
	}
}

425 
__STRING_INLINE
 *
__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
);

427 
__STRING_INLINE
 *

428 
	$__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

430 
__d0
, 
__d1
;

431 *
__tmp
 = 
__s
;

432 
__asm__
 
__vﬁ©ûe__


443 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

444 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

445 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

447  
__s
;

448 
	}
}

452 
	#_HAVE_STRING_ARCH_memchr
 1

	)

453 #i‚de‡
_FORCE_INLINES


454 
__STRING_INLINE
 *

455 
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

457 
__d0
;

458 #ifde‡
__i686__


459 
__d1
;

461 *
__ªs
;

462 i‡(
__n
 == 0)

463  
NULL
;

464 #ifde‡
__i686__


465 
__asm__
 
__vﬁ©ûe__


469 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

470 : "a" (
__c
), "0" (
__s
), "1" (
__n
), "2" (1),

471 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

474 
__asm__
 
__vﬁ©ûe__


480 : "=D" (
__ªs
), "=&c" (
__d0
)

481 : "a" (
__c
), "0" (
__s
), "1" (
__n
),

482 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

485  
__ªs
 - 1;

486 
	}
}

489 
	#_HAVE_STRING_ARCH_memrchr
 1

	)

490 #i‚de‡
_FORCE_INLINES


491 
__STRING_INLINE
 *
__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
);

493 
__STRING_INLINE
 *

494 
	$__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

496 
__d0
;

497 #ifde‡
__i686__


498 
__d1
;

500 *
__ªs
;

501 i‡(
__n
 == 0)

502  
NULL
;

503 #ifde‡
__i686__


504 
__asm__
 
__vﬁ©ûe__


510 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

511 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n), "2" (-1),

512 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

515 
__asm__
 
__vﬁ©ûe__


522 : "=D" (
__ªs
), "=&c" (
__d0
)

523 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n),

524 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

527  
__ªs
;

528 
	}
}

529 #ifde‡
__USE_GNU


530 
	#memrchr
(
s
, 
c
, 
n
Ë
	`__memrchr
 ((s), (c), (n))

	)

535 
	#_HAVE_STRING_ARCH_øwmemchr
 1

	)

536 
__STRING_INLINE
 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

538 #i‚de‡
_FORCE_INLINES


539 
__STRING_INLINE
 *

540 
	$__øwmemchr
 (c⁄° *
__s
, 
__c
)

542 
__d0
;

543 *
__ªs
;

544 
__asm__
 
__vﬁ©ûe__


547 : "=D" (
__ªs
), "=&c" (
__d0
)

548 : "a" (
__c
), "0" (
__s
), "1" (0xffffffff),

549 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

551  
__ªs
 - 1;

552 
	}
}

553 #ifde‡
__USE_GNU


554 
__STRING_INLINE
 *

555 
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

557  
	`__øwmemchr
 (
__s
, 
__c
);

558 
	}
}

564 
	#_HAVE_STRING_ARCH_°æí
 1

	)

565 
	#°æí
(
°r
) \

566 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
°r
) \

567 ? 
	`__buûtö_°æí
 (
°r
) \

568 : 
	`__°æí_g
 (
°r
)))

	)

569 
__STRING_INLINE
 
size_t
 
__°æí_g
 (c⁄° *
__°r
);

571 
__STRING_INLINE
 
size_t


572 
	$__°æí_g
 (c⁄° *
__°r
)

574 
__dummy
;

575 c⁄° *
__tmp
 = 
__°r
;

576 
__asm__
 
__vﬁ©ûe__


582 : "Ù" (
__tmp
), "=&q" (
__dummy
)

583 : "0" (
__°r
),

584 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__°r
)

586  
__tmp
 - 
__°r
 - 1;

587 
	}
}

591 
	#_HAVE_STRING_ARCH_°r˝y
 1

	)

592 
	#°r˝y
(
de°
, 
§c
) \

593 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

594 ? ( ((
§c
)[0]Ë=1 && 
	`°æí
 (src) + 1 <= 8 \

595 ? 
	`__°r˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

596 : (*Ë
	`mem˝y
 ((*Ë(
de°
), \

597 (c⁄° *Ë(
§c
), \

598 
	`°æí
 (
§c
) + 1)) \

599 : 
	`__°r˝y_g
 ((
de°
), (
§c
))))

	)

601 
	#__°r˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

602 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

604 
__ui
; \

605 
__usi
; \

606 
__uc
; \

607 
__c
; \

608 } *
__u
 = (*Ë
__de°
; \

609 
§˛í
) \

612 
__u
->
__uc
 = '\0'; \

615 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

618 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

619 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

620 
__u
->
__uc
 = '\0'; \

623 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

626 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

627 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

628 
__u
->
__uc
 = '\0'; \

631 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

632 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

633 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

636 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

637 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

638 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

639 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

640 
__u
->
__uc
 = '\0'; \

643 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

644 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

645 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

648 (*Ë
__de°
; }))

	)

650 
__STRING_INLINE
 *
__°r˝y_g
 (*
__de°
, c⁄° *
__§c
);

652 
__STRING_INLINE
 *

653 
	$__°r˝y_g
 (*
__de°
, c⁄° *
__§c
)

655 *
__tmp
 = 
__de°
;

656 
__dummy
;

657 
__asm__
 
__vﬁ©ûe__


666 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
),

667 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

668 : "0" (
__§c
), "1" (
__tmp
),

669 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

671  
__de°
;

672 
	}
}

675 #ifde‡
__USE_GNU


676 
	#_HAVE_STRING_ARCH_°p˝y
 1

	)

678 
	#__°p˝y
(
de°
, 
§c
) \

679 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

680 ? (
	`°æí
 (
§c
) + 1 <= 8 \

681 ? 
	`__°p˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

682 : 
	`__°p˝y_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1)) \

683 : 
	`__°p˝y_g
 ((
de°
), (
§c
))))

	)

684 
	#__°p˝y_c
(
de°
, 
§c
, 
§˛í
) \

685 ((
§˛í
) % 4 == 0 \

686 ? 
	`__memp˝y_by4
 (
de°
, 
§c
, 
§˛í
) - 1 \

687 : ((
§˛í
) % 2 == 0 \

688 ? 
	`__memp˝y_by2
 (
de°
, 
§c
, 
§˛í
) - 1 \

689 : 
	`__memp˝y_byn
 (
de°
, 
§c
, 
§˛í
Ë- 1))

	)

692 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 ((de°), (§c))

	)

694 
	#__°p˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

695 (
	`__exãnsi⁄__
 ({ union { \

696 
__ui
; \

697 
__usi
; \

698 
__uc
; \

699 
__c
; \

700 } *
__u
 = (*Ë(
de°
); \

701 
§˛í
) \

704 
__u
->
__uc
 = '\0'; \

707 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

708 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

711 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

712 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

713 
__u
->
__uc
 = '\0'; \

716 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

717 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

720 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

721 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

722 
__u
->
__uc
 = '\0'; \

725 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

726 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

727 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

728 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

731 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

732 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

733 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

734 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

735 
__u
->
__uc
 = '\0'; \

738 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

739 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

740 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

741 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

744 (*Ë
__u
; }))

	)

746 
__STRING_INLINE
 *
__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
,

747 
size_t
 
__§˛í
);

749 
__STRING_INLINE
 *

750 
	$__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

752 *
__tmp
 = 
__de°
;

753 
__d0
, 
__d1
;

754 
__asm__
 
__vﬁ©ûe__


762 : "=&r" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

763 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4)

765  
__tmp
;

766 
	}
}

768 
__STRING_INLINE
 *
__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
,

769 
size_t
 
__§˛í
);

771 
__STRING_INLINE
 *

772 
	$__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

774 *
__tmp
 = 
__de°
;

775 
__d0
, 
__d1
;

776 
__asm__
 
__vﬁ©ûe__


789 : "=&q" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
),

790 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

791 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

792 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

794  
__tmp
 + 2;

795 
	}
}

797 
__STRING_INLINE
 *
__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
,

798 
size_t
 
__§˛í
);

800 
__STRING_INLINE
 *

801 
	$__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

803 
__d0
, 
__d1
;

804 *
__tmp
 = 
__de°
;

805 
__asm__
 
__vﬁ©ûe__


816 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

817 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

818 : "0" (
__tmp
), "1" (
__§˛í
), "2" (
__§c
),

819 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

821  
__tmp
;

822 
	}
}

824 
__STRING_INLINE
 *
__°p˝y_g
 (*
__de°
, c⁄° *
__§c
);

826 
__STRING_INLINE
 *

827 
	$__°p˝y_g
 (*
__de°
, c⁄° *
__§c
)

829 *
__tmp
 = 
__de°
;

830 
__dummy
;

831 
__asm__
 
__vﬁ©ûe__


840 : "=&r" (
__§c
), "Ù" (
__tmp
), "=&q" (
__dummy
),

841 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

842 : "0" (
__§c
), "1" (
__tmp
),

843 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

845  
__tmp
 - 1;

846 
	}
}

851 
	#_HAVE_STRING_ARCH_°∫˝y
 1

	)

852 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

853 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

854 ? ((
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

855 ? (*Ë
	`mem˝y
 ((*Ë(
de°
), \

856 (c⁄° *Ë(
§c
), 
n
) \

857 : 
	`__°∫˝y_cg
 ((
de°
), (
§c
), 
	`°æí
 (§cË+ 1, 
n
))) \

858 : 
	`__°∫˝y_gg
 ((
de°
), (
§c
), 
n
)))

	)

859 
	#__°∫˝y_cg
(
de°
, 
§c
, 
§˛í
, 
n
) \

860 (((
§˛í
) % 4 == 0) \

861 ? 
	`__°∫˝y_by4
 (
de°
, 
§c
, 
§˛í
, 
n
) \

862 : (((
§˛í
) % 2 == 0) \

863 ? 
	`__°∫˝y_by2
 (
de°
, 
§c
, 
§˛í
, 
n
) \

864 : 
	`__°∫˝y_byn
 (
de°
, 
§c
, 
§˛í
, 
n
)))

	)

866 
__STRING_INLINE
 *
__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[],

867 
size_t
 
__§˛í
, size_à
__n
);

869 
__STRING_INLINE
 *

870 
	$__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

872 *
__tmp
 = 
__de°
;

873 
__dummy1
, 
__dummy2
;

874 
__asm__
 
__vﬁ©ûe__


882 : "=&r" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

883 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

884 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4),

885 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

887 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

888  
__de°
;

889 
	}
}

891 
__STRING_INLINE
 *
__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[],

892 
size_t
 
__§˛í
, size_à
__n
);

894 
__STRING_INLINE
 *

895 
	$__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

897 *
__tmp
 = 
__de°
;

898 
__dummy1
, 
__dummy2
;

899 
__asm__
 
__vﬁ©ûe__


912 : "=&q" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

913 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

914 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

915 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

917 (Ë
	`mem£t
 (
__tmp
 + 2, '\0', 
__n
 - 
__§˛í
);

918  
__de°
;

919 
	}
}

921 
__STRING_INLINE
 *
__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[],

922 
size_t
 
__§˛í
, size_à
__n
);

924 
__STRING_INLINE
 *

925 
	$__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

927 
__d0
, 
__d1
;

928 *
__tmp
 = 
__de°
;

929 
__asm__
 
__vﬁ©ûe__


940 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

941 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

942 : "1" (
__§˛í
), "0" (
__tmp
),"2" (
__§c
),

943 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

945 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

946  
__de°
;

947 
	}
}

949 
__STRING_INLINE
 *
__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
,

950 
size_t
 
__n
);

952 
__STRING_INLINE
 *

953 
	$__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

955 *
__tmp
 = 
__de°
;

956 
__dummy
;

957 i‡(
__n
 > 0)

958 
__asm__
 
__vﬁ©ûe__


974 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
), "=&r" (
__n
)

975 : "0" (
__§c
), "1" (
__tmp
), "3" (
__n
)

978  
__de°
;

979 
	}
}

983 
	#_HAVE_STRING_ARCH_°rˇt
 1

	)

984 
	#°rˇt
(
de°
, 
§c
) \

985 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

986 ? 
	`__°rˇt_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

987 : 
	`__°rˇt_g
 ((
de°
), (
§c
))))

	)

989 
__STRING_INLINE
 *
__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[],

990 
size_t
 
__§˛í
);

992 
__STRING_INLINE
 *

993 
	$__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
)

995 #ifde‡
__i686__


996 
__d0
;

997 *
__tmp
;

998 
__asm__
 
__vﬁ©ûe__


1000 : "=D" (
__tmp
), "=&c" (
__d0
),

1001 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1002 : "0" (
__de°
), "1" (0xffffffff), "a" (0),

1003 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

1005 --
__tmp
;

1007 *
__tmp
 = 
__de°
;

1008 
__asm__
 
__vﬁ©ûe__


1014 : "Ù" (
__tmp
),

1015 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1016 : "0" (
__tmp
),

1017 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

1020 (Ë
	`mem˝y
 (
__tmp
, 
__§c
, 
__§˛í
);

1021  
__de°
;

1022 
	}
}

1024 
__STRING_INLINE
 *
__°rˇt_g
 (*
__de°
, c⁄° *
__§c
);

1026 
__STRING_INLINE
 *

1027 
	$__°rˇt_g
 (*
__de°
, c⁄° *
__§c
)

1029 *
__tmp
 = 
__de°
;

1030 
__dummy
;

1031 
__asm__
 
__vﬁ©ûe__


1044 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
),

1045 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1046 : "1" (
__tmp
), "2" (
__§c
),

1047 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

1049  
__de°
;

1050 
	}
}

1054 
	#_HAVE_STRING_ARCH_°∫ˇt
 1

	)

1055 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

1056 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

1057 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

1058 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

1059 ? 
	`°rˇt
 (
__de°
, (
§c
)) \

1060 : (*(*)
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

1061 (c⁄° *Ë(
§c
), \

1062 (
n
)Ë0, 
__de°
)) \

1063 : 
	`__°∫ˇt_g
 (
__de°
, (
§c
), (
n
)); }))

	)

1065 
__STRING_INLINE
 *
__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[],

1066 
size_t
 
__n
);

1068 
__STRING_INLINE
 *

1069 
	$__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__n
)

1071 *
__tmp
 = 
__de°
;

1072 
__dummy
;

1073 #ifde‡
__i686__


1074 
__asm__
 
__vﬁ©ûe__


1088 : "=&a" (
__dummy
), "=&D" (
__tmp
), "=&S" (
__§c
), "=&c" (
__n
)

1089 : "g" (
__n
), "0" (0), "1" (
__tmp
), "2" (
__§c
), "3" (0xffffffff)

1092 --
__tmp
;

1093 
__asm__
 
__vﬁ©ûe__


1110 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__n
)

1111 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
)

1114  
__de°
;

1115 
	}
}

1119 
	#_HAVE_STRING_ARCH_°rcmp
 1

	)

1120 
	#°rcmp
(
s1
, 
s2
) \

1121 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

1122 && ( ((
s1
)[0]Ë!1 || 
	`°æí
 (s1) >= 4) \

1123 && ( ((
s2
)[0]Ë!1 || 
	`°æí
 (s2) >= 4) \

1124 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

1125 (
	`°æí
 (
s1
Ë< såÀ¿(
s2
) \

1126 ? 
	`°æí
 (
s1
Ë: såÀ¿(
s2
)) + 1) \

1127 : (
	`__buûtö_c⁄°™t_p
 (
s1
) &&  ((s1)[0]) == 1 \

1128 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (
s1
) < 4 \

1129 ? (
	`__buûtö_c⁄°™t_p
 (
s2
) &&  ((s2)[0]) == 1 \

1130 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1131 (c⁄° *Ë(
s2
), \

1132 
	`°æí
 (
s1
)) \

1133 : 
	`__°rcmp_cg
 ((c⁄° *Ë(
s1
), \

1134 (c⁄° *Ë(
s2
), \

1135 
	`°æí
 (
s1
))) \

1136 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&&  ((
s1
)[0]) == 1 \

1137 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (s2) < 4 \

1138 ? (
	`__buûtö_c⁄°™t_p
 (
s1
) \

1139 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1140 (c⁄° *Ë(
s2
), \

1141 
	`°æí
 (
s2
)) \

1142 : 
	`__°rcmp_gc
 ((c⁄° *Ë(
s1
), \

1143 (c⁄° *Ë(
s2
), \

1144 
	`°æí
 (
s2
))) \

1145 : 
	`__°rcmp_gg
 ((
s1
), (
s2
))))))

	)

1147 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

1148 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = (
s1
)[0] - (
s2
)[0]; \

1149 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

1151 
__ªsu…
 = (
s1
)[1] - (
s2
)[1]; \

1152 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

1154 
__ªsu…
 = (
s1
)[2] - (
s2
)[2]; \

1155 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

1156 
__ªsu…
 = (
s1
)[3] - (
s2
)[3]; \

1159 
__ªsu…
; }))

	)

1161 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

1162 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = (
s2
); \

1163 
__ªsu…
 = (
s1
)[0] - 
__s2
[0]; \

1164 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

1166 
__ªsu…
 = (
s1
)[1] - 
__s2
[1]; \

1167 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

1169 
__ªsu…
 = (
s1
)[2] - 
__s2
[2]; \

1170 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

1171 
__ªsu…
 = (
s1
)[3] - 
__s2
[3]; \

1174 
__ªsu…
; }))

	)

1176 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

1177 (
	`__exãnsi⁄__
 ({ c⁄° *
__s1
 = (
s1
); \

1178 
__ªsu…
 = 
__s1
[0] - (
s2
)[0]; \

1179 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

1181 
__ªsu…
 = 
__s1
[1] - (
s2
)[1]; \

1182 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

1184 
__ªsu…
 = 
__s1
[2] - (
s2
)[2]; \

1185 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

1186 
__ªsu…
 = 
__s1
[3] - (
s2
)[3]; \

1189 
__ªsu…
; }))

	)

1191 
__STRING_INLINE
 
__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
);

1193 
__STRING_INLINE
 

1194 
	$__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
)

1196 
__ªs
;

1197 
__asm__
 
__vﬁ©ûe__


1213 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
)

1214 : "1" (
__s1
), "2" (
__s2
),

1215 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s1
),

1216 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s2
)

1218  
__ªs
;

1219 
	}
}

1223 
	#_HAVE_STRING_ARCH_°∫cmp
 1

	)

1224 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

1225 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`°æí
 (s1Ë< ((
size_t
Ë(
n
)) \

1226 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1227 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`°æí
 (s2Ë< ((
size_t
Ë(
n
))\

1228 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1229 : 
	`__°∫cmp_g
 ((
s1
), (
s2
), (
n
)))))

	)

1231 
__STRING_INLINE
 
__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
,

1232 
size_t
 
__n
);

1234 
__STRING_INLINE
 

1235 
	$__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

1237 
__ªs
;

1238 
__asm__
 
__vﬁ©ûe__


1257 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
), "=&r" (
__n
)

1258 : "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

1259 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

1260 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

1262  
__ªs
;

1263 
	}
}

1267 
	#_HAVE_STRING_ARCH_°rchr
 1

	)

1268 
	#_USE_STRING_ARCH_°rchr
 1

	)

1269 
	#°rchr
(
s
, 
c
) \

1270 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1271 ? ((
c
) == '\0' \

1272 ? (*Ë
	`__øwmemchr
 ((
s
), (
c
)) \

1273 : 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1274 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1276 
__STRING_INLINE
 *
__°rchr_c
 (c⁄° *
__s
, 
__c
);

1278 
__STRING_INLINE
 *

1279 
	$__°rchr_c
 (c⁄° *
__s
, 
__c
)

1281 
__d0
;

1282 *
__ªs
;

1283 
__asm__
 
__vﬁ©ûe__


1293 : "Ù" (
__ªs
), "=&a" (
__d0
)

1294 : "0" (
__s
), "1" (
__c
),

1295 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1297  
__ªs
;

1298 
	}
}

1300 
__STRING_INLINE
 *
__°rchr_g
 (c⁄° *
__s
, 
__c
);

1302 
__STRING_INLINE
 *

1303 
	$__°rchr_g
 (c⁄° *
__s
, 
__c
)

1305 
__d0
;

1306 *
__ªs
;

1307 
__asm__
 
__vﬁ©ûe__


1318 : "Ù" (
__ªs
), "=&a" (
__d0
)

1319 : "0" (
__s
), "1" (
__c
),

1320 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1322  
__ªs
;

1323 
	}
}

1327 
	#_HAVE_STRING_ARCH_°rch∫ul
 1

	)

1328 
	#__°rch∫ul
(
s
, 
c
) \

1329 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1330 ? ((
c
) == '\0' \

1331 ? (*Ë
	`__øwmemchr
 ((
s
), 
c
) \

1332 : 
	`__°rch∫ul_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1333 : 
	`__°rch∫ul_g
 ((
s
), 
c
)))

	)

1335 
__STRING_INLINE
 *
__°rch∫ul_c
 (c⁄° *
__s
, 
__c
);

1337 
__STRING_INLINE
 *

1338 
	$__°rch∫ul_c
 (c⁄° *
__s
, 
__c
)

1340 
__d0
;

1341 *
__ªs
;

1342 
__asm__
 
__vﬁ©ûe__


1352 : "Ù" (
__ªs
), "=&a" (
__d0
)

1353 : "0" (
__s
), "1" (
__c
),

1354 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1356  
__ªs
;

1357 
	}
}

1359 
__STRING_INLINE
 *
__°rch∫ul_g
 (c⁄° *
__s
, 
__c
);

1361 
__STRING_INLINE
 *

1362 
	$__°rch∫ul_g
 (c⁄° *
__s
, 
__c
)

1364 
__d0
;

1365 *
__ªs
;

1366 
__asm__
 
__vﬁ©ûe__


1377 : "Ù" (
__ªs
), "=&a" (
__d0
)

1378 : "0" (
__s
), "1" (
__c
),

1379 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1381  
__ªs
;

1382 
	}
}

1383 #ifde‡
__USE_GNU


1384 
	#°rch∫ul
(
s
, 
c
Ë
	`__°rch∫ul
 ((s), (c))

	)

1388 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


1390 
	#_HAVE_STRING_ARCH_ödex
 1

	)

1391 
	#ödex
(
s
, 
c
) \

1392 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1393 ? 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1394 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1399 
	#_HAVE_STRING_ARCH_°ºchr
 1

	)

1400 
	#°ºchr
(
s
, 
c
) \

1401 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1402 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1403 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1405 #ifde‡
__i686__


1406 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1408 
__STRING_INLINE
 *

1409 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1411 
__d0
, 
__d1
;

1412 *
__ªs
;

1413 
__asm__
 
__vﬁ©ûe__


1421 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1422 : "0" (1), "1" (
__s
), "2" (
__c
),

1423 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1425  
__ªs
 - 1;

1426 
	}
}

1428 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1430 
__STRING_INLINE
 *

1431 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1433 
__d0
, 
__d1
;

1434 *
__ªs
;

1435 
__asm__
 
__vﬁ©ûe__


1444 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1445 : "0" (1), "1" (
__s
), "2" (
__c
),

1446 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1448  
__ªs
 - 1;

1449 
	}
}

1451 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1453 
__STRING_INLINE
 *

1454 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1456 
__d0
, 
__d1
;

1457 *
__ªs
;

1458 
__asm__
 
__vﬁ©ûe__


1468 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1469 : "0" (0), "1" (
__s
), "2" (
__c
),

1470 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1472  
__ªs
;

1473 
	}
}

1475 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1477 
__STRING_INLINE
 *

1478 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1480 
__d0
, 
__d1
;

1481 *
__ªs
;

1482 
__asm__
 
__vﬁ©ûe__


1493 : "Ù" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1494 : "0" (0), "1" (
__s
), "2" (
__c
),

1495 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1497  
__ªs
;

1498 
	}
}

1502 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


1504 
	#_HAVE_STRING_ARCH_rödex
 1

	)

1505 
	#rödex
(
s
, 
c
) \

1506 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1507 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1508 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1514 
	#_HAVE_STRING_ARCH_°rc•n
 1

	)

1515 
	#°rc•n
(
s
, 
ªje˘
) \

1516 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
) &&  ((reject)[0]) == 1 \

1517 ? ((
ªje˘
)[0] == '\0' \

1518 ? 
	`°æí
 (
s
) \

1519 : ((
ªje˘
)[1] == '\0' \

1520 ? 
	`__°rc•n_c1
 ((
s
), (((
ªje˘
)[0] << 8) & 0xff00)) \

1521 : 
	`__°rc•n_cg
 ((
s
), (
ªje˘
), 
	`°æí
 (reject)))) \

1522 : 
	`__°rc•n_g
 ((
s
), (
ªje˘
))))

	)

1524 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

1526 #i‚de‡
_FORCE_INLINES


1527 
__STRING_INLINE
 
size_t


1528 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

1530 
__d0
;

1531 *
__ªs
;

1532 
__asm__
 
__vﬁ©ûe__


1541 : "Ù" (
__ªs
), "=&a" (
__d0
)

1542 : "0" (
__s
), "1" (
__ªje˘
),

1543 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1545  (
__ªs
 - 1Ë- 
__s
;

1546 
	}
}

1549 
__STRING_INLINE
 
size_t
 
__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[],

1550 
size_t
 
__ªje˘_Àn
);

1552 
__STRING_INLINE
 
size_t


1553 
	$__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[], 
size_t
 
__ªje˘_Àn
)

1555 
__d0
, 
__d1
, 
__d2
;

1556 c⁄° *
__ªs
;

1557 
__asm__
 
__vﬁ©ûe__


1568 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1569 : "0" (
__s
), "d" (
__ªje˘
), "g" (
__ªje˘_Àn
)

1571  (
__ªs
 - 1Ë- 
__s
;

1572 
	}
}

1574 
__STRING_INLINE
 
size_t
 
__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
);

1575 #ifde‡
__PIC__


1577 
__STRING_INLINE
 
size_t


1578 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1580 
__d0
, 
__d1
, 
__d2
;

1581 c⁄° *
__ªs
;

1582 
__asm__
 
__vﬁ©ûe__


1599 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1600 : "r" (
__ªje˘
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1602  (
__ªs
 - 1Ë- 
__s
;

1603 
	}
}

1605 
__STRING_INLINE
 
size_t


1606 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1608 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1609 c⁄° *
__ªs
;

1610 
__asm__
 
__vﬁ©ûe__


1624 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1625 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ªje˘
), "b" (__reject)

1628  (
__ªs
 - 1Ë- 
__s
;

1629 
	}
}

1635 
	#_HAVE_STRING_ARCH_°r•n
 1

	)

1636 
	#°r•n
(
s
, 
ac˚±
) \

1637 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1638 ? ((
ac˚±
)[0] == '\0' \

1639 ? ((Ë(
s
), 0) \

1640 : ((
ac˚±
)[1] == '\0' \

1641 ? 
	`__°r•n_c1
 ((
s
), (((
ac˚±
)[0] << 8 ) & 0xff00)) \

1642 : 
	`__°r•n_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1643 : 
	`__°r•n_g
 ((
s
), (
ac˚±
))))

	)

1645 #i‚de‡
_FORCE_INLINES


1646 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1648 
__STRING_INLINE
 
size_t


1649 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1651 
__d0
;

1652 *
__ªs
;

1654 
__asm__
 
__vﬁ©ûe__


1660 : "Ù" (
__ªs
), "=&q" (
__d0
)

1661 : "0" (
__s
), "1" (
__ac˚±
),

1662 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1664  (
__ªs
 - 1Ë- 
__s
;

1665 
	}
}

1668 
__STRING_INLINE
 
size_t
 
__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1669 
size_t
 
__ac˚±_Àn
);

1671 
__STRING_INLINE
 
size_t


1672 
	$__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1674 
__d0
, 
__d1
, 
__d2
;

1675 c⁄° *
__ªs
;

1676 
__asm__
 
__vﬁ©ûe__


1687 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1688 : "0" (
__s
), "g" (
__ac˚±
), "g" (
__ac˚±_Àn
),

1691 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
),

1692 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__ac˚±_Àn
]; } *)
__ac˚±
)

1694  (
__ªs
 - 1Ë- 
__s
;

1695 
	}
}

1697 
__STRING_INLINE
 
size_t
 
__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1698 #ifde‡
__PIC__


1700 
__STRING_INLINE
 
size_t


1701 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1703 
__d0
, 
__d1
, 
__d2
;

1704 c⁄° *
__ªs
;

1705 
__asm__
 
__vﬁ©ûe__


1721 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1722 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (__accept)

1724  (
__ªs
 - 1Ë- 
__s
;

1725 
	}
}

1727 
__STRING_INLINE
 
size_t


1728 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1730 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1731 c⁄° *
__ªs
;

1732 
__asm__
 
__vﬁ©ûe__


1746 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1747 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ac˚±
), "b" (__accept)

1749  (
__ªs
 - 1Ë- 
__s
;

1750 
	}
}

1755 
	#_HAVE_STRING_ARCH_°Ωbrk
 1

	)

1756 
	#°Ωbrk
(
s
, 
ac˚±
) \

1757 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1758 ? ((
ac˚±
)[0] == '\0' \

1759 ? ((Ë(
s
), (*) 0) \

1760 : ((
ac˚±
)[1] == '\0' \

1761 ? 
	`°rchr
 ((
s
), (
ac˚±
)[0]) \

1762 : 
	`__°Ωbrk_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1763 : 
	`__°Ωbrk_g
 ((
s
), (
ac˚±
))))

	)

1765 
__STRING_INLINE
 *
__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1766 
size_t
 
__ac˚±_Àn
);

1768 
__STRING_INLINE
 *

1769 
	$__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1771 
__d0
, 
__d1
, 
__d2
;

1772 *
__ªs
;

1773 
__asm__
 
__vﬁ©ûe__


1788 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1789 : "0" (
__s
), "d" (
__ac˚±
), "g" (
__ac˚±_Àn
)

1791  
__ªs
;

1792 
	}
}

1794 
__STRING_INLINE
 *
__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1795 #ifde‡
__PIC__


1797 
__STRING_INLINE
 *

1798 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1800 
__d0
, 
__d1
, 
__d2
;

1801 *
__ªs
;

1802 
__asm__
 
__vﬁ©ûe__


1823 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1824 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1826  
__ªs
;

1827 
	}
}

1829 
__STRING_INLINE
 *

1830 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1832 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1833 *
__ªs
;

1834 
__asm__
 
__vﬁ©ûe__


1853 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&d" (
__d2
), "=&D" (
__d3
)

1854 : "0" (
__s
), "1" (0), "2" (0xffffffff), "b" (
__ac˚±
)

1856  
__ªs
;

1857 
	}
}

1862 
	#_HAVE_STRING_ARCH_°r°r
 1

	)

1863 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1864 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
) &&  ((needle)[0]) == 1 \

1865 ? ((
√edÀ
)[0] == '\0' \

1866 ? (
hay°ack
) \

1867 : ((
√edÀ
)[1] == '\0' \

1868 ? 
	`°rchr
 ((
hay°ack
), (
√edÀ
)[0]) \

1869 : 
	`__°r°r_cg
 ((
hay°ack
), (
√edÀ
), \

1870 
	`°æí
 (
√edÀ
)))) \

1871 : 
	`__°r°r_g
 ((
hay°ack
), (
√edÀ
))))

	)

1875 
__STRING_INLINE
 *
__°r°r_cg
 (c⁄° *
__hay°ack
,

1876 c⁄° 
__√edÀ
[],

1877 
size_t
 
__√edÀ_Àn
);

1879 
__STRING_INLINE
 *

1880 
	$__°r°r_cg
 (c⁄° *
__hay°ack
, c⁄° 
__√edÀ
[],

1881 
size_t
 
__√edÀ_Àn
)

1883 
__d0
, 
__d1
, 
__d2
;

1884 *
__ªs
;

1885 
__asm__
 
__vﬁ©ûe__


1898 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

1899 : "g" (
__√edÀ_Àn
), "1" (
__hay°ack
), "d" (
__√edÀ
)

1901  
__ªs
;

1902 
	}
}

1904 
__STRING_INLINE
 *
__°r°r_g
 (c⁄° *
__hay°ack
,

1905 c⁄° *
__√edÀ
);

1906 #ifde‡
__PIC__


1908 
__STRING_INLINE
 *

1909 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1911 
__d0
, 
__d1
, 
__d2
;

1912 *
__ªs
;

1913 
__asm__
 
__vﬁ©ûe__


1932 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
)

1933 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1934 "d" (
__√edÀ
)

1936  
__ªs
;

1937 
	}
}

1939 
__STRING_INLINE
 *

1940 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1942 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1943 *
__ªs
;

1944 
__asm__
 
__vﬁ©ûe__


1961 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1962 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1963 "b" (
__√edÀ
)

1965  
__ªs
;

1966 
	}
}

1972 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


1973 #ifde‡
__i686__


1974 
	#_HAVE_STRING_ARCH_ffs
 1

	)

1975 
	#ffs
(
w‹d
Ë(
	`__buûtö_c⁄°™t_p
 (word) \

1976 ? 
	`__buûtö_ffs
 (
w‹d
) \

1977 : ({ 
__˙t
, 
__tmp
; \

1978 
__asm__
 
__vﬁ©ûe__
 \

1981 : "=&r" (
__˙t
), "Ù" (
__tmp
) \

1982 : "rm" (
w‹d
), "1" (-1)); \

1983 
__˙t
 + 1; }))

	)

1985 #i‚de‡
ff¶


1986 
	#ff¶
(
w‹d
Ë
	`ffs
(w‹d)

	)

1991 #i‚de‡
_FORCE_INLINES


1992 #unde‡
__STRING_INLINE


	@/usr/include/bits/string2.h

20 #i‚de‡
_STRING_H


24 #i‚de‡
__NO_STRING_INLINES


41 #i‚de‡
__STRING_INLINE


42 #ifde‡
__˝lu•lus


43 
	#__STRING_INLINE
 
ölöe


	)

45 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

49 #i‡
_STRING_INLINE_u«lig√d


51 
	~<ídün.h
>

52 
	~<bôs/ty≥s.h
>

54 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


55 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

56 (((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

57 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
])

	)

58 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

59 (((((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

60 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

61 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

62 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
])

	)

64 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

65 (((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
] << 8 \

66 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1])

	)

67 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

68 (((((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
] << 8 \

69 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

70 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

71 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 3])

	)

76 
	#__STRING2_COPY_TYPE
(
N
) \

77 °ru˘ { 
__¨r
[
N
]; } \

78 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

79 
	t__STRING2_COPY_TYPE
 (2);

80 
__STRING2_COPY_TYPE
 (3);

81 
__STRING2_COPY_TYPE
 (4);

82 
__STRING2_COPY_TYPE
 (5);

83 
__STRING2_COPY_TYPE
 (6);

84 
__STRING2_COPY_TYPE
 (7);

85 
__STRING2_COPY_TYPE
 (8);

86 #unde‡
__STRING2_COPY_TYPE


92 
	#__°rög2_1b±r_p
(
__x
) \

93 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

96 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


97 #i‡!
__GNUC_PREREQ
 (3, 0)

98 #i‡
_STRING_INLINE_u«lig√d


99 
	#mem£t
(
s
, 
c
, 
n
) \

100 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

101 ? ((
n
) == 1 \

102 ? 
	`__mem£t_1
 (
s
, 
c
) \

103 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

104 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

105 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

106 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

108 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

109 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

111 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

112 ({ *
__s
 = (
s
); \

114 
__ui
; \

115 
__usi
; \

116 
__uc
; \

117 } *
__u
 = 
__s
; \

118 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

121 (Ë(
n
)) \

124 
__u
->
__ui
 = 
__c
 * 0x01010101; \

125 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

127 
__u
->
__ui
 = 
__c
 * 0x01010101; \

128 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

130 
__u
->
__ui
 = 
__c
 * 0x01010101; \

131 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

133 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

134 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

135 
__u
->
__uc
 = (Ë
__c
; \

139 
__u
->
__ui
 = 
__c
 * 0x01010101; \

140 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

142 
__u
->
__ui
 = 
__c
 * 0x01010101; \

143 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

145 
__u
->
__ui
 = 
__c
 * 0x01010101; \

146 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

148 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

152 
__u
->
__ui
 = 
__c
 * 0x01010101; \

153 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

155 
__u
->
__ui
 = 
__c
 * 0x01010101; \

156 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

158 
__u
->
__ui
 = 
__c
 * 0x01010101; \

159 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

161 
__u
->
__uc
 = (Ë
__c
; \

165 
__u
->
__ui
 = 
__c
 * 0x01010101; \

166 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

168 
__u
->
__ui
 = 
__c
 * 0x01010101; \

169 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

171 
__u
->
__ui
 = 
__c
 * 0x01010101; \

172 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

174 
__u
->
__ui
 = 
__c
 * 0x01010101; \

179 
__s
; })

	)

181 
	#mem£t
(
s
, 
c
, 
n
) \

182 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

183 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

184 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

193 #i‡
__GNUC_PREREQ
 (2, 91)

194 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

202 #ifde‡
__USE_GNU


203 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


204 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


205 #i‡
__GNUC_PREREQ
 (3, 4)

206 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

207 #ñi‡
__GNUC_PREREQ
 (3, 0)

208 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

209 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

210 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

211 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

212 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

214 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

215 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

216 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

217 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

218 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

222 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

225 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


226 #i‡
_STRING_INLINE_u«lig√d


227 #i‚de‡
_FORCE_INLINES


228 
	#__memp˝y_¨gs
(
§c
) \

229 ((c⁄° *Ë(
§c
))[0], ((const *) (src))[2], \

230 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[6], \

231 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

236 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

237 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

238 
__uöt32_t
, 
size_t
);

239 
__STRING_INLINE
 *

240 
	$__memp˝y_smÆl
 (*
__de°1
,

241 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

242 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

243 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

244 
size_t
 
__§˛í
)

247 
__uöt32_t
 
__ui
;

248 
__uöt16_t
 
__usi
;

249 
__uc
;

250 
__c
;

251 } *
__u
 = 
__de°1
;

252 (Ë
__§˛í
)

255 
__u
->
__c
 = 
__§c0_1
;

256 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

259 
__u
->
__usi
 = 
__§c0_2
;

260 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

263 
__u
->
__usi
 = 
__§c0_2
;

264 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

265 
__u
->
__c
 = 
__§c2_1
;

266 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

269 
__u
->
__ui
 = 
__§c0_4
;

270 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

273 
__u
->
__ui
 = 
__§c0_4
;

274 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

275 
__u
->
__c
 = 
__§c4_1
;

276 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

279 
__u
->
__ui
 = 
__§c0_4
;

280 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

281 
__u
->
__usi
 = 
__§c4_2
;

282 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

285 
__u
->
__ui
 = 
__§c0_4
;

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

287 
__u
->
__usi
 = 
__§c4_2
;

288 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

289 
__u
->
__c
 = 
__§c6_1
;

290 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

293 
__u
->
__ui
 = 
__§c0_4
;

294 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

295 
__u
->
__ui
 = 
__§c4_4
;

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

299  (*Ë
__u
;

300 
	}
}

302 #i‚de‡
_FORCE_INLINES


303 
	#__memp˝y_¨gs
(
§c
) \

304 ((c⁄° *Ë(
§c
))[0], \

305 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

306 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1] } }), \

307 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

308 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

309 ((c⁄° *Ë(
§c
))[2] } }), \

310 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

311 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

312 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3] } }), \

313 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

314 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

315 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

316 ((c⁄° *Ë(
§c
))[4] } }), \

317 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

318 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

319 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

320 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5] } }), \

321 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

322 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

323 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

324 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

325 ((c⁄° *Ë(
§c
))[6] } }), \

326 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

327 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

328 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

329 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

330 ((c⁄° *Ë(
§c
))[6], ((c⁄° *Ë(§c))[7] } })

	)

332 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

333 
__STRING2_COPY_ARR3
,

334 
__STRING2_COPY_ARR4
,

335 
__STRING2_COPY_ARR5
,

336 
__STRING2_COPY_ARR6
,

337 
__STRING2_COPY_ARR7
,

338 
__STRING2_COPY_ARR8
, 
size_t
);

339 
__STRING_INLINE
 *

340 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

341 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

342 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

343 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

344 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

347 
__c
;

348 
__STRING2_COPY_ARR2
 
__sˇ2
;

349 
__STRING2_COPY_ARR3
 
__sˇ3
;

350 
__STRING2_COPY_ARR4
 
__sˇ4
;

351 
__STRING2_COPY_ARR5
 
__sˇ5
;

352 
__STRING2_COPY_ARR6
 
__sˇ6
;

353 
__STRING2_COPY_ARR7
 
__sˇ7
;

354 
__STRING2_COPY_ARR8
 
__sˇ8
;

355 } *
__u
 = 
__de°
;

356 (Ë
__§˛í
)

359 
__u
->
__c
 = 
__§c1
;

362 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

365 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

368 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

371 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

374 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

377 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

380 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

383  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

384 
	}
}

392 #i‚de‡
_HAVE_STRING_ARCH_°rchr


393 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

394 #i‡
__GNUC_PREREQ
 (3, 2)

395 
	#°rchr
(
s
, 
c
) \

396 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

397 && (
c
) == '\0' \

398 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

399 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

401 
	#°rchr
(
s
, 
c
) \

402 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

403 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

404 : 
	`°rchr
 (
s
, 
c
)))

	)

410 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

411 || 
deföed
 
	g_FORCE_INLINES


412 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

413 
	#°r˝y
(
de°
, 
§c
) \

414 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

415 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

416 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

417 
	`°æí
 (
§c
) + 1) \

418 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

419 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

422 #i‡
_STRING_INLINE_u«lig√d


423 #i‚de‡
_FORCE_INLINES


424 
	#__°r˝y_¨gs
(
§c
) \

425 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

430 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

431 
__uöt32_t
, __uöt32_t, 
size_t
);

432 
__STRING_INLINE
 *

433 
	$__°r˝y_smÆl
 (*
__de°
,

434 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

435 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

436 
size_t
 
__§˛í
)

439 
__uöt32_t
 
__ui
;

440 
__uöt16_t
 
__usi
;

441 
__uc
;

442 } *
__u
 = (*Ë
__de°
;

443 (Ë
__§˛í
)

446 
__u
->
__uc
 = '\0';

449 
__u
->
__usi
 = 
__§c0_2
;

452 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

454 
__u
->
__uc
 = '\0';

457 
__u
->
__ui
 = 
__§c0_4
;

460 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

462 
__u
->
__uc
 = '\0';

465 
__u
->
__ui
 = 
__§c0_4
;

466 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

467 
__u
->
__usi
 = 
__§c4_2
;

470 
__u
->
__ui
 = 
__§c0_4
;

471 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

472 
__u
->
__usi
 = 
__§c4_2
;

473 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

474 
__u
->
__uc
 = '\0';

477 
__u
->
__ui
 = 
__§c0_4
;

478 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

479 
__u
->
__ui
 = 
__§c4_4
;

482  
__de°
;

483 
	}
}

485 #i‚de‡
_FORCE_INLINES


486 
	#__°r˝y_¨gs
(
§c
) \

487 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

488 { { ((c⁄° *Ë(
§c
))[0], '\0' } }), \

489 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

490 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

492 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

493 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

494 ((c⁄° *Ë(
§c
))[2], '\0' } }), \

495 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

496 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

497 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

499 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

500 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

501 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

502 ((c⁄° *Ë(
§c
))[4], '\0' } }), \

503 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

504 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

505 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

506 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

508 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

509 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

510 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

511 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

512 ((c⁄° *Ë(
§c
))[6], '\0' } })

	)

514 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

515 
__STRING2_COPY_ARR3
,

516 
__STRING2_COPY_ARR4
,

517 
__STRING2_COPY_ARR5
,

518 
__STRING2_COPY_ARR6
,

519 
__STRING2_COPY_ARR7
,

520 
__STRING2_COPY_ARR8
, 
size_t
);

521 
__STRING_INLINE
 *

522 
	$__°r˝y_smÆl
 (*
__de°
,

523 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

524 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

525 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

526 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

529 
__c
;

530 
__STRING2_COPY_ARR2
 
__sˇ2
;

531 
__STRING2_COPY_ARR3
 
__sˇ3
;

532 
__STRING2_COPY_ARR4
 
__sˇ4
;

533 
__STRING2_COPY_ARR5
 
__sˇ5
;

534 
__STRING2_COPY_ARR6
 
__sˇ6
;

535 
__STRING2_COPY_ARR7
 
__sˇ7
;

536 
__STRING2_COPY_ARR8
 
__sˇ8
;

537 } *
__u
 = (*Ë
__de°
;

538 (Ë
__§˛í
)

541 
__u
->
__c
 = '\0';

544 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

547 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

550 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

553 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

556 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

559 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

562 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

565  
__de°
;

566 
	}
}

572 #ifde‡
__USE_GNU


573 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


574 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


575 #i‡
__GNUC_PREREQ
 (3, 4)

576 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

577 #ñi‡
__GNUC_PREREQ
 (3, 0)

578 
	#__°p˝y
(
de°
, 
§c
) \

579 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

580 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

581 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

582 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

584 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

586 
	#__°p˝y
(
de°
, 
§c
) \

587 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

588 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

589 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

590 
	`°æí
 (
§c
) + 1) \

591 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

593 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

597 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

600 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


601 #i‡
_STRING_INLINE_u«lig√d


602 #i‚de‡
_FORCE_INLINES


603 
	#__°p˝y_¨gs
(
§c
) \

604 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

609 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

610 
__uöt32_t
, __uöt32_t, 
size_t
);

611 
__STRING_INLINE
 *

612 
	$__°p˝y_smÆl
 (*
__de°
,

613 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

614 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

615 
size_t
 
__§˛í
)

618 
__ui
;

619 
__usi
;

620 
__uc
;

621 
__c
;

622 } *
__u
 = (*Ë
__de°
;

623 (Ë
__§˛í
)

626 
__u
->
__uc
 = '\0';

629 
__u
->
__usi
 = 
__§c0_2
;

630 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

633 
__u
->
__usi
 = 
__§c0_2
;

634 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

635 
__u
->
__uc
 = '\0';

638 
__u
->
__ui
 = 
__§c0_4
;

639 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

642 
__u
->
__ui
 = 
__§c0_4
;

643 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

644 
__u
->
__uc
 = '\0';

647 
__u
->
__ui
 = 
__§c0_4
;

648 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

649 
__u
->
__usi
 = 
__§c4_2
;

650 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

653 
__u
->
__ui
 = 
__§c0_4
;

654 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

655 
__u
->
__usi
 = 
__§c4_2
;

656 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

657 
__u
->
__uc
 = '\0';

660 
__u
->
__ui
 = 
__§c0_4
;

661 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

662 
__u
->
__ui
 = 
__§c4_4
;

663 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

666  &
__u
->
__c
;

667 
	}
}

669 #i‚de‡
_FORCE_INLINES


670 
	#__°p˝y_¨gs
(
§c
) \

671 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

672 { { ((c⁄° *Ë(
§c
))[0], '\0' } }), \

673 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

674 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

676 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

677 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

678 ((c⁄° *Ë(
§c
))[2], '\0' } }), \

679 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

680 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

681 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

683 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

684 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

685 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

686 ((c⁄° *Ë(
§c
))[4], '\0' } }), \

687 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

688 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

689 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

690 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

692 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

693 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

694 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

695 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

696 ((c⁄° *Ë(
§c
))[6], '\0' } })

	)

698 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

699 
__STRING2_COPY_ARR3
,

700 
__STRING2_COPY_ARR4
,

701 
__STRING2_COPY_ARR5
,

702 
__STRING2_COPY_ARR6
,

703 
__STRING2_COPY_ARR7
,

704 
__STRING2_COPY_ARR8
, 
size_t
);

705 
__STRING_INLINE
 *

706 
	$__°p˝y_smÆl
 (*
__de°
,

707 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

708 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

709 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

710 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

713 
__c
;

714 
__STRING2_COPY_ARR2
 
__sˇ2
;

715 
__STRING2_COPY_ARR3
 
__sˇ3
;

716 
__STRING2_COPY_ARR4
 
__sˇ4
;

717 
__STRING2_COPY_ARR5
 
__sˇ5
;

718 
__STRING2_COPY_ARR6
 
__sˇ6
;

719 
__STRING2_COPY_ARR7
 
__sˇ7
;

720 
__STRING2_COPY_ARR8
 
__sˇ8
;

721 } *
__u
 = (*Ë
__de°
;

722 (Ë
__§˛í
)

725 
__u
->
__c
 = '\0';

728 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

731 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

734 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

737 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

740 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

743 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

746 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

749  
__de°
 + 
__§˛í
 - 1;

750 
	}
}

758 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


759 #i‡
__GNUC_PREREQ
 (3, 2)

760 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

762 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

763 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

764 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

765 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

766 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

773 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


774 #ifde‡
_USE_STRING_ARCH_°rchr


775 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

776 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

777 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

778 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

779 ? 
	`°rˇt
 (
__de°
, 
§c
) \

780 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

781 
§c
, 
n
)Ë'\0', 
__de°
)) \

782 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

783 #ñi‡
__GNUC_PREREQ
 (3, 2)

784 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

786 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

787 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

788 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

789 ? 
	`°rˇt
 (
de°
, 
§c
) \

790 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

797 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


798 #i‡
__GNUC_PREREQ
 (3, 2)

799 
	#°rcmp
(
s1
, 
s2
) \

800 
__exãnsi⁄__
 \

801 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

802 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

803 && (
__s1_Àn
 = 
	`__buûtö_°æí
 (
s1
), 
__s2_Àn
 = __buûtö_°æí (
s2
), \

804 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

805 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

806 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

807 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

808 && (
__s1_Àn
 = 
	`__buûtö_°æí
 (
s1
), __s1_len < 4) \

809 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

810 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

811 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

812 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

813 && (
__s2_Àn
 = 
	`__buûtö_°æí
 (
s2
), __s2_len < 4) \

814 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

815 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

816 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

817 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

819 
	#°rcmp
(
s1
, 
s2
) \

820 
__exãnsi⁄__
 \

821 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

822 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

823 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

824 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

825 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

826 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

827 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

828 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

829 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

830 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

831 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

832 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

833 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

834 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

835 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

836 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

837 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

838 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

841 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

842 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

843 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

844 - ((c⁄° *Ë(c⁄° *)(
s2
))[0]); \

845 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

847 
__ªsu…
 = (((const *) \

848 (c⁄° *Ë(
s1
))[1] \

850 (c⁄° *Ë(
s2
))[1]); \

851 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

853 
__ªsu…
 = \

855 (c⁄° *Ë(
s1
))[2] \

857 (c⁄° *Ë(
s2
))[2]); \

858 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

859 
__ªsu…
 = \

861 (c⁄° *Ë(
s1
))[3] \

863 (c⁄° *Ë(
s2
))[3]); \

866 
__ªsu…
; }))

	)

868 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

869 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = \

870 (c⁄° *Ë(c⁄° *Ë(
s2
); \

871 
__ªsu…
 = \

872 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

873 - 
__s2
[0]); \

874 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

876 
__ªsu…
 = (((const *) \

877 (c⁄° *Ë(
s1
))[1] - 
__s2
[1]); \

878 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

880 
__ªsu…
 = (((const *) \

881 (c⁄° *Ë(
s1
))[2] - 
__s2
[2]); \

882 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

883 
__ªsu…
 = (((const *) \

884 (c⁄° *Ë(
s1
))[3] \

885 - 
__s2
[3]); \

888 
__ªsu…
; }))

	)

890 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
Ë(- 
	`__°rcmp_cg
 (s2, s1,Ü2))

	)

895 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


896 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

897 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

898 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

899 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

900 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

901 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

902 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

908 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


909 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


910 #i‡
__GNUC_PREREQ
 (3, 2)

911 
	#°rc•n
(
s
, 
ªje˘
) \

912 
__exãnsi⁄__
 \

913 ({ 
__r0
, 
__r1
, 
__r2
; \

914 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

915 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

916 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

917 : ((
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], __r0 == '\0') \

918 ? 
	`°æí
 (
s
) \

919 : ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], __r1 == '\0') \

920 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

921 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

922 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

923 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

924 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

925 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

926 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

928 
	#°rc•n
(
s
, 
ªje˘
) \

929 
__exãnsi⁄__
 \

930 ({ 
__r0
, 
__r1
, 
__r2
; \

931 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

932 ? ((
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], __r0 == '\0') \

933 ? 
	`°æí
 (
s
) \

934 : ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], __r1 == '\0') \

935 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

936 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

937 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

938 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

939 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

940 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

941 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

945 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

946 
__STRING_INLINE
 
size_t


947 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

949 
size_t
 
__ªsu…
 = 0;

950 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

951 ++
__ªsu…
;

952  
__ªsu…
;

953 
	}
}

955 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (c⁄° *
__s
, 
__ªje˘1
,

956 
__ªje˘2
);

957 
__STRING_INLINE
 
size_t


958 
	$__°rc•n_c2
 (c⁄° *
__s
, 
__ªje˘1
, 
__ªje˘2
)

960 
size_t
 
__ªsu…
 = 0;

961 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


962 && 
__s
[
__ªsu…
] !
__ªje˘2
)

963 ++
__ªsu…
;

964  
__ªsu…
;

965 
	}
}

967 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (c⁄° *
__s
, 
__ªje˘1
,

968 
__ªje˘2
, 
__ªje˘3
);

969 
__STRING_INLINE
 
size_t


970 
	$__°rc•n_c3
 (c⁄° *
__s
, 
__ªje˘1
, 
__ªje˘2
,

971 
__ªje˘3
)

973 
size_t
 
__ªsu…
 = 0;

974 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


975 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

976 ++
__ªsu…
;

977  
__ªsu…
;

978 
	}
}

984 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


985 #i‚de‡
_HAVE_STRING_ARCH_°r•n


986 #i‡
__GNUC_PREREQ
 (3, 2)

987 
	#°r•n
(
s
, 
ac˚±
) \

988 
__exãnsi⁄__
 \

989 ({ 
__a0
, 
__a1
, 
__a2
; \

990 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

991 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

992 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

993 : ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

994 ? ((Ë(
s
), (
size_t
) 0) \

995 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

996 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

997 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

998 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

999 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1000 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1001 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1002 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1004 
	#°r•n
(
s
, 
ac˚±
) \

1005 
__exãnsi⁄__
 \

1006 ({ 
__a0
, 
__a1
, 
__a2
; \

1007 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1008 ? ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1009 ? ((Ë(
s
), (
size_t
) 0) \

1010 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1011 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1012 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1013 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1014 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1015 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1016 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1017 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1021 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1022 
__STRING_INLINE
 
size_t


1023 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1025 
size_t
 
__ªsu…
 = 0;

1027 
__s
[
__ªsu…
] =
__ac˚±
)

1028 ++
__ªsu…
;

1029  
__ªsu…
;

1030 
	}
}

1032 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (c⁄° *
__s
, 
__ac˚±1
,

1033 
__ac˚±2
);

1034 
__STRING_INLINE
 
size_t


1035 
	$__°r•n_c2
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1037 
size_t
 
__ªsu…
 = 0;

1039 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1040 ++
__ªsu…
;

1041  
__ªsu…
;

1042 
	}
}

1044 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (c⁄° *
__s
, 
__ac˚±1
,

1045 
__ac˚±2
, 
__ac˚±3
);

1046 
__STRING_INLINE
 
size_t


1047 
	$__°r•n_c3
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1049 
size_t
 
__ªsu…
 = 0;

1051 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1052 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1053 ++
__ªsu…
;

1054  
__ªsu…
;

1055 
	}
}

1060 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1061 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1062 #i‡
__GNUC_PREREQ
 (3, 2)

1063 
	#°Ωbrk
(
s
, 
ac˚±
) \

1064 
__exãnsi⁄__
 \

1065 ({ 
__a0
, 
__a1
, 
__a2
; \

1066 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1067 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1068 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1069 : ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1070 ? ((Ë(
s
), (*Ë
NULL
) \

1071 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1072 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1073 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1074 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1075 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1076 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1077 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1078 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1080 
	#°Ωbrk
(
s
, 
ac˚±
) \

1081 
__exãnsi⁄__
 \

1082 ({ 
__a0
, 
__a1
, 
__a2
; \

1083 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1084 ? ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1085 ? ((Ë(
s
), (*Ë
NULL
) \

1086 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1087 ? 
	`°rchr
 (
s
, 
__a0
) \

1088 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1089 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1090 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1091 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1092 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1093 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1097 
__STRING_INLINE
 *
__°Ωbrk_c2
 (c⁄° *
__s
, 
__ac˚±1
,

1098 
__ac˚±2
);

1099 
__STRING_INLINE
 *

1100 
	$__°Ωbrk_c2
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1103 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1104 ++
__s
;

1105  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1106 
	}
}

1108 
__STRING_INLINE
 *
__°Ωbrk_c3
 (c⁄° *
__s
, 
__ac˚±1
,

1109 
__ac˚±2
, 
__ac˚±3
);

1110 
__STRING_INLINE
 *

1111 
	$__°Ωbrk_c3
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1114 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1115 && *
__s
 !
__ac˚±3
)

1116 ++
__s
;

1117  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1118 
	}
}

1124 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1125 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1126 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1127 ? (((c⁄° *Ë(
√edÀ
))[0] == '\0' \

1128 ? (*Ë(
size_t
Ë(
hay°ack
) \

1129 : (((c⁄° *Ë(
√edÀ
))[1] == '\0' \

1130 ? 
	`°rchr
 (
hay°ack
, \

1131 ((c⁄° *Ë(
√edÀ
))[0]) \

1132 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1133 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1137 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1138 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1139 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1140 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1141 && ((c⁄° *Ë(
£p
))[0] != '\0' \

1142 && ((c⁄° *Ë(
£p
))[1] == '\0' \

1143 ? 
	`__°πok_r_1c
 (
s
, ((c⁄° *Ë(
£p
))[0], 
√xç
) \

1144 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1147 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1148 
__STRING_INLINE
 *

1149 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1151 *
__ªsu…
;

1152 i‡(
__s
 =
NULL
)

1153 
__s
 = *
__√xç
;

1154 *
__s
 =
__£p
)

1155 ++
__s
;

1156 
__ªsu…
 = 
NULL
;

1157 i‡(*
__s
 != '\0')

1159 
__ªsu…
 = 
__s
++;

1160 *
__s
 != '\0')

1161 i‡(*
__s
++ =
__£p
)

1163 
__s
[-1] = '\0';

1167 *
__√xç
 = 
__s
;

1168  
__ªsu…
;

1169 
	}
}

1170 #ifde‡
__USE_POSIX


1171 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1176 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1177 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1179 *
__°r£p_g
 (**
__°rögp
, c⁄° *
__dñim
);

1180 
	#__°r£p
(
s
, 
ªje˘
) \

1181 
__exãnsi⁄__
 \

1182 ({ 
__r0
, 
__r1
, 
__r2
; \

1183 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1184 && (
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], \

1185 ((c⁄° *Ë(
ªje˘
))[0] != '\0') \

1186 ? ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], \

1187 ((c⁄° *Ë(
ªje˘
))[1] == '\0') \

1188 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1189 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

1190 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1191 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

1192 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1193 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1194 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1197 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1198 
__STRING_INLINE
 *

1199 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1201 *
__ªtvÆ
 = *
__s
;

1202 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1203 *(*
__s
)++ = '\0';

1204  
__ªtvÆ
;

1205 
	}
}

1207 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1208 
__STRING_INLINE
 *

1209 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1211 *
__ªtvÆ
 = *
__s
;

1212 i‡(
__ªtvÆ
 !
NULL
)

1214 *
__˝
 = 
__ªtvÆ
;

1217 i‡(*
__˝
 == '\0')

1219 
__˝
 = 
NULL
;

1222 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1224 *
__˝
++ = '\0';

1227 ++
__˝
;

1229 *
__s
 = 
__˝
;

1231  
__ªtvÆ
;

1232 
	}
}

1234 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1235 
__ªje˘3
);

1236 
__STRING_INLINE
 *

1237 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1239 *
__ªtvÆ
 = *
__s
;

1240 i‡(
__ªtvÆ
 !
NULL
)

1242 *
__˝
 = 
__ªtvÆ
;

1245 i‡(*
__˝
 == '\0')

1247 
__˝
 = 
NULL
;

1250 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1252 *
__˝
++ = '\0';

1255 ++
__˝
;

1257 *
__s
 = 
__˝
;

1259  
__ªtvÆ
;

1260 
	}
}

1261 #ifde‡
__USE_MISC


1262 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1269 #ifde‡
__USE_MISC


1271 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1272 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1273 
	~<°dlib.h
>

1276 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1278 *
	$__°rdup
 (c⁄° *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1279 
	#__°rdup
(
s
) \

1280 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1281 ? (((c⁄° *Ë(
s
))[0] == '\0' \

1282 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1283 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1284 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1285 i‡(
__ªtvÆ
 !
NULL
) \

1286 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1287 
__ªtvÆ
; 
	}
})) \

1288 : 
	`__°rdup
 (
s
)))

	)

1290 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


1291 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1295 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1297 *
	$__°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

1298 
__THROW
 
__©åibuã_mÆloc__
;

1299 
	#__°∫dup
(
s
, 
n
) \

1300 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1301 ? (((c⁄° *Ë(
s
))[0] == '\0' \

1302 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1303 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1304 
size_t
 
__n
 = (
n
); \

1305 *
__ªtvÆ
; \

1306 i‡(
__n
 < 
__Àn
) \

1307 
__Àn
 = 
__n
 + 1; \

1308 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1309 i‡(
__ªtvÆ
 !
NULL
) \

1311 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1312 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1313 
__Àn
 - 1); \

1315 
__ªtvÆ
; 
	}
})) \

1316 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1318 #ifde‡
__USE_XOPEN2K8


1319 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1325 #i‚de‡
_FORCE_INLINES


1326 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

18 #i‚de‡
_STRING_H


22 #i‡!
__GNUC_PREREQ
 (5,0)

23 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

27 #i‚de‡
__˝lu•lus


31 #unde‡
mem˝y


32 #unde‡
memmove


33 #unde‡
mem£t


34 #unde‡
°rˇt


35 #unde‡
°r˝y


36 #unde‡
°∫ˇt


37 #unde‡
°∫˝y


38 #ifde‡
__USE_GNU


39 #unde‡
memp˝y


40 #unde‡
°p˝y


42 #ifde‡
__USE_MISC


43 #unde‡
bc›y


44 #unde‡
bzîo


49 
__f‹tify_fun˘i⁄
 *

50 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

51 
size_t
 
__Àn
))

53  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

54 
	}
}

56 
__f‹tify_fun˘i⁄
 *

57 
__NTH
 (
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__Àn
))

59  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

60 
	}
}

62 #ifde‡
__USE_GNU


63 
__f‹tify_fun˘i⁄
 *

64 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

65 
size_t
 
__Àn
))

67  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

68 
	}
}

77 
__f‹tify_fun˘i⁄
 *

78 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

82 #i‡!
	`__GNUC_PREREQ
 (5,0)

83 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

84 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

86 
	`__w¨n_mem£t_zîo_Àn
 ();

87  
__de°
;

90  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

91 
	}
}

93 #ifde‡
__USE_MISC


94 
__f‹tify_fun˘i⁄
 

95 
__NTH
 (
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__Àn
))

97 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

98 
	}
}

100 
__f‹tify_fun˘i⁄
 

101 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

103 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

104 
	}
}

107 
__f‹tify_fun˘i⁄
 *

108 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

110  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

111 
	}
}

113 #ifde‡
__USE_GNU


114 
__f‹tify_fun˘i⁄
 *

115 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

117  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

118 
	}
}

122 
__f‹tify_fun˘i⁄
 *

123 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

124 
size_t
 
__Àn
))

126  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

127 
	}
}

130 *
	$__°≤˝y_chk
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

131 
size_t
 
__de°Àn
Ë
__THROW
;

132 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
, c⁄° *
__§c
,

133 
size_t
 
__n
), 
°≤˝y
);

135 
__f‹tify_fun˘i⁄
 *

136 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
))

138 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

139 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿> 
	`__bos
 (
__de°
)))

140  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

141  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

142 
	}
}

145 
__f‹tify_fun˘i⁄
 *

146 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

148  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

149 
	}
}

152 
__f‹tify_fun˘i⁄
 *

153 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

154 
size_t
 
__Àn
))

156  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

157 
	}
}

	@/usr/include/bits/sys_errlist.h

19 #i‚de‡
_STDIO_H


25 #ifde‡ 
__USE_MISC


26 
sys_√º
;

27 c⁄° *c⁄° 
sys_îæi°
[];

29 #ifde‡ 
__USE_GNU


30 
_sys_√º
;

31 c⁄° *c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/termios.h

19 #i‚de‡
_TERMIOS_H


23 
	tcc_t
;

24 
	t•ìd_t
;

25 
	ttcÊag_t
;

27 
	#NCCS
 32

	)

28 
	sãrmios


30 
tcÊag_t
 
	mc_iÊag
;

31 
tcÊag_t
 
	mc_oÊag
;

32 
tcÊag_t
 
	mc_cÊag
;

33 
tcÊag_t
 
	mc_lÊag
;

34 
cc_t
 
	mc_löe
;

35 
cc_t
 
	mc_cc
[
NCCS
];

36 
•ìd_t
 
	mc_i•ìd
;

37 
•ìd_t
 
	mc_o•ìd
;

38 
	#_HAVE_STRUCT_TERMIOS_C_ISPEED
 1

	)

39 
	#_HAVE_STRUCT_TERMIOS_C_OSPEED
 1

	)

43 
	#VINTR
 0

	)

44 
	#VQUIT
 1

	)

45 
	#VERASE
 2

	)

46 
	#VKILL
 3

	)

47 
	#VEOF
 4

	)

48 
	#VTIME
 5

	)

49 
	#VMIN
 6

	)

50 
	#VSWTC
 7

	)

51 
	#VSTART
 8

	)

52 
	#VSTOP
 9

	)

53 
	#VSUSP
 10

	)

54 
	#VEOL
 11

	)

55 
	#VREPRINT
 12

	)

56 
	#VDISCARD
 13

	)

57 
	#VWERASE
 14

	)

58 
	#VLNEXT
 15

	)

59 
	#VEOL2
 16

	)

62 
	#IGNBRK
 0000001

	)

63 
	#BRKINT
 0000002

	)

64 
	#IGNPAR
 0000004

	)

65 
	#PARMRK
 0000010

	)

66 
	#INPCK
 0000020

	)

67 
	#ISTRIP
 0000040

	)

68 
	#INLCR
 0000100

	)

69 
	#IGNCR
 0000200

	)

70 
	#ICRNL
 0000400

	)

71 
	#IUCLC
 0001000

	)

72 
	#IXON
 0002000

	)

73 
	#IXANY
 0004000

	)

74 
	#IXOFF
 0010000

	)

75 
	#IMAXBEL
 0020000

	)

76 
	#IUTF8
 0040000

	)

79 
	#OPOST
 0000001

	)

80 
	#OLCUC
 0000002

	)

81 
	#ONLCR
 0000004

	)

82 
	#OCRNL
 0000010

	)

83 
	#ONOCR
 0000020

	)

84 
	#ONLRET
 0000040

	)

85 
	#OFILL
 0000100

	)

86 
	#OFDEL
 0000200

	)

87 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


88 
	#NLDLY
 0000400

	)

89 
	#NL0
 0000000

	)

90 
	#NL1
 0000400

	)

91 
	#CRDLY
 0003000

	)

92 
	#CR0
 0000000

	)

93 
	#CR1
 0001000

	)

94 
	#CR2
 0002000

	)

95 
	#CR3
 0003000

	)

96 
	#TABDLY
 0014000

	)

97 
	#TAB0
 0000000

	)

98 
	#TAB1
 0004000

	)

99 
	#TAB2
 0010000

	)

100 
	#TAB3
 0014000

	)

101 
	#BSDLY
 0020000

	)

102 
	#BS0
 0000000

	)

103 
	#BS1
 0020000

	)

104 
	#FFDLY
 0100000

	)

105 
	#FF0
 0000000

	)

106 
	#FF1
 0100000

	)

109 
	#VTDLY
 0040000

	)

110 
	#VT0
 0000000

	)

111 
	#VT1
 0040000

	)

113 #ifde‡
__USE_MISC


114 
	#XTABS
 0014000

	)

118 #ifde‡
__USE_MISC


119 
	#CBAUD
 0010017

	)

121 
	#B0
 0000000

	)

122 
	#B50
 0000001

	)

123 
	#B75
 0000002

	)

124 
	#B110
 0000003

	)

125 
	#B134
 0000004

	)

126 
	#B150
 0000005

	)

127 
	#B200
 0000006

	)

128 
	#B300
 0000007

	)

129 
	#B600
 0000010

	)

130 
	#B1200
 0000011

	)

131 
	#B1800
 0000012

	)

132 
	#B2400
 0000013

	)

133 
	#B4800
 0000014

	)

134 
	#B9600
 0000015

	)

135 
	#B19200
 0000016

	)

136 
	#B38400
 0000017

	)

137 #ifde‡
__USE_MISC


138 
	#EXTA
 
B19200


	)

139 
	#EXTB
 
B38400


	)

141 
	#CSIZE
 0000060

	)

142 
	#CS5
 0000000

	)

143 
	#CS6
 0000020

	)

144 
	#CS7
 0000040

	)

145 
	#CS8
 0000060

	)

146 
	#CSTOPB
 0000100

	)

147 
	#CREAD
 0000200

	)

148 
	#PARENB
 0000400

	)

149 
	#PARODD
 0001000

	)

150 
	#HUPCL
 0002000

	)

151 
	#CLOCAL
 0004000

	)

152 #ifde‡
__USE_MISC


153 
	#CBAUDEX
 0010000

	)

155 
	#B57600
 0010001

	)

156 
	#B115200
 0010002

	)

157 
	#B230400
 0010003

	)

158 
	#B460800
 0010004

	)

159 
	#B500000
 0010005

	)

160 
	#B576000
 0010006

	)

161 
	#B921600
 0010007

	)

162 
	#B1000000
 0010010

	)

163 
	#B1152000
 0010011

	)

164 
	#B1500000
 0010012

	)

165 
	#B2000000
 0010013

	)

166 
	#B2500000
 0010014

	)

167 
	#B3000000
 0010015

	)

168 
	#B3500000
 0010016

	)

169 
	#B4000000
 0010017

	)

170 
	#__MAX_BAUD
 
B4000000


	)

171 #ifde‡
__USE_MISC


172 
	#CIBAUD
 002003600000

	)

173 
	#CMSPAR
 010000000000

	)

174 
	#CRTSCTS
 020000000000

	)

178 
	#ISIG
 0000001

	)

179 
	#ICANON
 0000002

	)

180 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


181 
	#XCASE
 0000004

	)

183 
	#ECHO
 0000010

	)

184 
	#ECHOE
 0000020

	)

185 
	#ECHOK
 0000040

	)

186 
	#ECHONL
 0000100

	)

187 
	#NOFLSH
 0000200

	)

188 
	#TOSTOP
 0000400

	)

189 #ifde‡
__USE_MISC


190 
	#ECHOCTL
 0001000

	)

191 
	#ECHOPRT
 0002000

	)

192 
	#ECHOKE
 0004000

	)

193 
	#FLUSHO
 0010000

	)

194 
	#PENDIN
 0040000

	)

196 
	#IEXTEN
 0100000

	)

197 #ifde‡
__USE_MISC


198 
	#EXTPROC
 0200000

	)

202 
	#TCOOFF
 0

	)

203 
	#TCOON
 1

	)

204 
	#TCIOFF
 2

	)

205 
	#TCION
 3

	)

208 
	#TCIFLUSH
 0

	)

209 
	#TCOFLUSH
 1

	)

210 
	#TCIOFLUSH
 2

	)

213 
	#TCSANOW
 0

	)

214 
	#TCSADRAIN
 1

	)

215 
	#TCSAFLUSH
 2

	)

218 
	#_IOT_ãrmios
 \

219 
	`_IOT
 (
	`_IOTS
 (
cÊag_t
), 4, _IOTS (
cc_t
), 
NCCS
, _IOTS (
•ìd_t
), 2)

	)

	@/usr/include/bits/time.h

23 #i‡
deföed
 
__√ed_timevÆ
 || deföed 
__USE_GNU


24 #i‚de‡
_STRUCT_TIMEVAL


25 
	#_STRUCT_TIMEVAL
 1

	)

26 
	~<bôs/ty≥s.h
>

30 
	stimevÆ


32 
__time_t
 
	mtv_£c
;

33 
__su£c⁄ds_t
 
	mtv_u£c
;

38 #i‚de‡
__√ed_timevÆ


39 #i‚de‡
_BITS_TIME_H


40 
	#_BITS_TIME_H
 1

	)

48 
	#CLOCKS_PER_SEC
 ((
˛ock_t
Ë1000000)

	)

50 #i‡(!
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_POSIX
) \

51 && !
deföed
 
	g__USE_XOPEN2K


54 
	~<bôs/ty≥s.h
>

55 
__sysc⁄f
 ();

56 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

59 #ifde‡
__USE_POSIX199309


61 
	#CLOCK_REALTIME
 0

	)

63 
	#CLOCK_MONOTONIC
 1

	)

65 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

67 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

69 
	#CLOCK_MONOTONIC_RAW
 4

	)

71 
	#CLOCK_REALTIME_COARSE
 5

	)

73 
	#CLOCK_MONOTONIC_COARSE
 6

	)

75 
	#CLOCK_BOOTTIME
 7

	)

77 
	#CLOCK_REALTIME_ALARM
 8

	)

79 
	#CLOCK_BOOTTIME_ALARM
 9

	)

81 
	#CLOCK_TAI
 11

	)

84 
	#TIMER_ABSTIME
 1

	)

87 #ifde‡
__USE_GNU


88 
	~<bôs/timex.h
>

90 
__BEGIN_DECLS


93 
	$˛ock_adjtime
 (
__˛ockid_t
 
__˛ock_id
, 
timex
 *
__utx
Ë
__THROW
;

95 
__END_DECLS


101 #unde‡
__√ed_timevÆ


	@/usr/include/bits/types.h

23 #i‚def 
_BITS_TYPES_H


24 
	#_BITS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/w‹dsize.h
>

30 
	t__u_ch¨
;

31 
	t__u_sh‹t
;

32 
	t__u_öt
;

33 
	t__u_l⁄g
;

36 sig√d 
	t__öt8_t
;

37 
	t__uöt8_t
;

38 sig√d 
	t__öt16_t
;

39 
	t__uöt16_t
;

40 sig√d 
	t__öt32_t
;

41 
	t__uöt32_t
;

42 #i‡
__WORDSIZE
 == 64

43 sig√d 
	t__öt64_t
;

44 
	t__uöt64_t
;

46 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

47 
__exãnsi⁄__
 
	t__uöt64_t
;

51 #i‡
__WORDSIZE
 == 64

52 
	t__quad_t
;

53 
	t__u_quad_t
;

55 
__exãnsi⁄__
 
	t__quad_t
;

56 
__exãnsi⁄__
 
	t__u_quad_t
;

89 
	#__S16_TYPE
 

	)

90 
	#__U16_TYPE
 

	)

91 
	#__S32_TYPE
 

	)

92 
	#__U32_TYPE
 

	)

93 
	#__SLONGWORD_TYPE
 

	)

94 
	#__ULONGWORD_TYPE
 

	)

95 #i‡
__WORDSIZE
 == 32

96 
	#__SQUAD_TYPE
 
__quad_t


	)

97 
	#__UQUAD_TYPE
 
__u_quad_t


	)

98 
	#__SWORD_TYPE
 

	)

99 
	#__UWORD_TYPE
 

	)

100 
	#__SLONG32_TYPE
 

	)

101 
	#__ULONG32_TYPE
 

	)

102 
	#__S64_TYPE
 
__quad_t


	)

103 
	#__U64_TYPE
 
__u_quad_t


	)

106 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

107 #ñi‡
__WORDSIZE
 == 64

108 
	t__SQUAD_TYPE
 

	)

109 
	t__UQUAD_TYPE
 

	)

110 
	t__SWORD_TYPE
 

	)

111 
	t__UWORD_TYPE
 

	)

112 
	t__SLONG32_TYPE
 

	)

113 
	t__ULONG32_TYPE
 

	)

114 
	t__S64_TYPE
 

	)

115 
	t__U64_TYPE
 

	)

117 
	t__STD_TYPE
 

	)

121 
	~<bôs/ty≥sizes.h
>

124 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

125 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

126 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

127 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

128 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

129 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

130 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

131 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

132 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

133 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

134 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

135 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

136 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

137 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

138 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

139 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

140 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

141 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

143 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

144 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

147 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

150 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

153 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

158 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

159 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

162 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

163 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

166 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

167 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

170 
__STD_TYPE
 
__FSWORD_T_TYPE
 
	g__fsw‹d_t
;

172 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

175 
__STD_TYPE
 
__SYSCALL_SLONG_TYPE
 
	g__sysˇŒ_¶⁄g_t
;

177 
__STD_TYPE
 
__SYSCALL_ULONG_TYPE
 
	g__sysˇŒ_ul⁄g_t
;

181 
__off64_t
 
	t__loff_t
;

182 
__quad_t
 *
	t__qaddr_t
;

183 *
	t__ˇddr_t
;

186 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

189 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

192 #unde‡
__STD_TYPE


	@/usr/include/bits/unistd.h

19 #i‚de‡
_UNISTD_H


23 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

24 
size_t
 
__buÊí
Ë
__wur
;

25 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

26 
size_t
 
__nbyãs
), 
ªad
Ë
__wur
;

27 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

28 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

29 
size_t
 
__buÊí
), 
__ªad_chk
)

30 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

33 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


34 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

36 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

38 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

39  
	`__ªad_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

41 i‡(
__nbyãs
 > 
	`__bos0
 (
__buf
))

42  
	`__ªad_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

44  
	`__ªad_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
);

45 
	}
}

47 #ifde‡
__USE_UNIX98


48 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

49 
__off_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

50 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

51 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

52 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

53 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

54 
__off_t
 
__off£t
), 
¥ód
Ë
__wur
;

55 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

56 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

57 
__off64_t
 
__off£t
), 
¥ód64
Ë
__wur
;

58 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

60 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

61 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

63 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

64 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

65 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

66 
__¥ód64_chk
)

67 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

70 #i‚de‡
__USE_FILE_OFFSET64


71 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


72 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

74 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

76 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

77  
	`__¥ód_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

79 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

80  
	`__¥ód_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

81 
	`__bos0
 (
__buf
));

83  
	`__¥ód_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

84 
	}
}

86 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


87 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

89 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

91 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

92  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

94 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

95  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

96 
	`__bos0
 (
__buf
));

99  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

100 
	}
}

103 #ifde‡
__USE_LARGEFILE64


104 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


105 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

107 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

109 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

110  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

112 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

113  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

114 
	`__bos0
 (
__buf
));

117  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

118 
	}
}

122 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


123 
ssize_t
 
	$__ªadlök_chk
 (c⁄° *
__ª°ri˘
 
__∑th
,

124 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

125 
size_t
 
__buÊí
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

127 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

128 (c⁄° *
__ª°ri˘
 
__∑th
,

129 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

130 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

131 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

132 (c⁄° *
__ª°ri˘
 
__∑th
,

133 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

134 
size_t
 
__buÊí
), 
__ªadlök_chk
)

135 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

138 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


139 
	`__NTH
 (
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

140 
size_t
 
__Àn
))

142 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

144 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

145  
	`__ªadlök_chk
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

147 i‡–
__Àn
 > 
	`__bos
 (
__buf
))

148  
	`__ªadlök_chk_w¨n
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

150  
	`__ªadlök_Æüs
 (
__∑th
, 
__buf
, 
__Àn
);

151 
	}
}

154 #ifde‡
__USE_ATFILE


155 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

156 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

157 
size_t
 
__buÊí
)

158 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

159 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

160 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

161 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

162 
ªadlök©
)

163 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

164 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

165 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

166 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

167 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

168 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

172 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


173 
	`__NTH
 (
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

174 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

176 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

178 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

179  
	`__ªadlök©_chk
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

181 i‡(
__Àn
 > 
	`__bos
 (
__buf
))

182  
	`__ªadlök©_chk_w¨n
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
,

183 
	`__bos
 (
__buf
));

185  
	`__ªadlök©_Æüs
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

186 
	}
}

189 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

190 
__THROW
 
__wur
;

191 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

192 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

193 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

194 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

195 
__gëcwd_chk
)

196 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

199 
__f‹tify_fun˘i⁄
 
__wur
 *

200 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

202 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

204 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

205  
	`__gëcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

207 i‡(
__size
 > 
	`__bos
 (
__buf
))

208  
	`__gëcwd_chk_w¨n
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

210  
	`__gëcwd_Æüs
 (
__buf
, 
__size
);

211 
	}
}

213 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


214 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

215 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

216 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

217 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

220 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

221 
	`__NTH
 (
	$gëwd
 (*
__buf
))

223 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

224  
	`__gëwd_chk
 (
__buf
, 
	`__bos
 (__buf));

225  
	`__gëwd_w¨n
 (
__buf
);

226 
	}
}

229 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

230 
size_t
 
__buÊí
Ë
__THROW
;

231 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

232 
size_t
 
__Àn
), 
c⁄f°r
);

233 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

234 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

235 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

236 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

239 
__f‹tify_fun˘i⁄
 
size_t


240 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

242 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

244 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

245  
	`__c⁄f°r_chk
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

247 i‡(
	`__bos
 (
__buf
Ë< 
__Àn
)

248  
	`__c⁄f°r_chk_w¨n
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

250  
	`__c⁄f°r_Æüs
 (
__«me
, 
__buf
, 
__Àn
);

251 
	}
}

254 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

255 
__THROW
 
__wur
;

256 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

257 
gëgroups
Ë
__wur
;

258 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

259 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

260 
__gëgroups_chk
)

261 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

264 
__f‹tify_fun˘i⁄
 

265 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

267 i‡(
	`__bos
 (
__li°
Ë!(
size_t
) -1)

269 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
) || __size < 0)

270  
	`__gëgroups_chk
 (
__size
, 
__li°
, 
	`__bos
 (__list));

272 i‡(
__size
 *  (
__gid_t
Ë> 
	`__bos
 (
__li°
))

273  
	`__gëgroups_chk_w¨n
 (
__size
, 
__li°
, 
	`__bos
 (__list));

275  
	`__gëgroups_Æüs
 (
__size
, 
__li°
);

276 
	}
}

279 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

280 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

281 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

282 
size_t
 
__buÊí
), 
ây«me_r
)

283 
	`__n⁄nuŒ
 ((2));

284 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

285 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

286 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

287 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

290 
__f‹tify_fun˘i⁄
 

291 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

293 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

295 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

296  
	`__ây«me_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

298 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

299  
	`__ây«me_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

301  
	`__ây«me_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

302 
	}
}

305 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


306 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

307 
	`__n⁄nuŒ
 ((1));

308 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

309 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

310 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

311 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

312 
__gëlogö_r_chk
)

313 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

316 
__f‹tify_fun˘i⁄
 

317 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

319 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

321 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

322  
	`__gëlogö_r_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

324 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

325  
	`__gëlogö_r_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

327  
	`__gëlogö_r_Æüs
 (
__buf
, 
__buÊí
);

328 
	}
}

332 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_UNIX98


333 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

335 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

336 
gëho°«me
Ë
	`__n⁄nuŒ
 ((1));

337 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

338 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

339 
__gëho°«me_chk
)

340 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

343 
__f‹tify_fun˘i⁄
 

344 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

346 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

349  
	`__gëho°«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

351 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

352  
	`__gëho°«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

354  
	`__gëho°«me_Æüs
 (
__buf
, 
__buÊí
);

355 
	}
}

359 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

360 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

361 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

362 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

363 
size_t
 
__buÊí
),

364 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

365 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

366 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

367 
__gëdomaö«me_chk
)

368 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

372 
__f‹tify_fun˘i⁄
 

373 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

375 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

377 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

378  
	`__gëdomaö«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

380 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

381  
	`__gëdomaö«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

383  
	`__gëdomaö«me_Æüs
 (
__buf
, 
__buÊí
);

384 
	}
}

	@/usr/include/bits/waitflags.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


25 
	#WNOHANG
 1

	)

26 
	#WUNTRACED
 2

	)

29 
	#WSTOPPED
 2

	)

30 
	#WEXITED
 4

	)

31 
	#WCONTINUED
 8

	)

32 
	#WNOWAIT
 0x01000000

	)

34 
	#__WNOTHREAD
 0x20000000

	)

36 
	#__WALL
 0x40000000

	)

37 
	#__WCLONE
 0x80000000

	)

40 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


41 #i‚de‡
__ENUM_IDTYPE_T


42 
	#__ENUM_IDTYPE_T
 1

	)

46 #unde‡
P_ALL


47 #unde‡
P_PID


48 #unde‡
P_PGID


52 
	mP_ALL
,

53 
	mP_PID
,

54 
	mP_PGID


55 } 
	tidty≥_t
;

	@/usr/include/bits/waitstatus.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


28 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

31 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

34 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

37 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

40 
	#__WIFSIGNALED
(
°©us
) \

41 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

44 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

48 #ifde‡
WCONTINUED


49 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

53 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

56 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

57 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

58 
	#__W_CONTINUED
 0xffff

	)

59 
	#__WCOREFLAG
 0x80

	)

62 #ifdef 
__USE_MISC


64 
	~<ídün.h
>

66 
	uwaô


68 
	mw_°©us
;

71 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


72 
	m__w_ãrmsig
:7;

73 
	m__w_c‹edump
:1;

74 
	m__w_ªtcode
:8;

77 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


79 
	m__w_ªtcode
:8;

80 
	m__w_c‹edump
:1;

81 
	m__w_ãrmsig
:7;

83 } 
	m__waô_ãrmö©ed
;

86 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


87 
	m__w_°›vÆ
:8;

88 
	m__w_°›sig
:8;

91 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


93 
	m__w_°›sig
:8;

94 
	m__w_°›vÆ
:8;

96 } 
	m__waô_°›≥d
;

99 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

100 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

101 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

102 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

103 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/bits/wchar.h

19 #i‚de‡
_BITS_WCHAR_H


20 
	#_BITS_WCHAR_H
 1

	)

33 #ifde‡
__WCHAR_MAX__


34 
	#__WCHAR_MAX
 
__WCHAR_MAX__


	)

35 #ñi‡
L
'\0' - 1 > 0

36 
	#__WCHAR_MAX
 (0xffffffffu + 
L
'\0')

	)

38 
	#__WCHAR_MAX
 (0x7ffffff‡+ 
L
'\0')

	)

41 #ifde‡
__WCHAR_MIN__


42 
	#__WCHAR_MIN
 
__WCHAR_MIN__


	)

43 #ñi‡
L
'\0' - 1 > 0

44 
	#__WCHAR_MIN
 (
L
'\0' + 0)

	)

46 
	#__WCHAR_MIN
 (-
__WCHAR_MAX
 - 1)

	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__
 && !deföed 
__ILP32__


4 
	#__WORDSIZE
 64

	)

6 
	#__WORDSIZE
 32

	)

9 #ifde‡
__x86_64__


10 
	#__WORDSIZE_TIME64_COMPAT32
 1

	)

12 
	#__SYSCALL_WORDSIZE
 64

	)

	@/usr/include/bits/xopen_lim.h

29 #i‚de‡
_XOPEN_LIM_H


30 
	#_XOPEN_LIM_H
 1

	)

32 
	#__√ed_IOV_MAX


	)

33 
	~<bôs/°dio_lim.h
>

65 
	#_XOPEN_IOV_MAX
 
_POSIX_UIO_MAXIOV


	)

70 
	#NL_ARGMAX
 
_POSIX_ARG_MAX


	)

73 
	#NL_LANGMAX
 
_POSIX2_LINE_MAX


	)

76 
	#NL_MSGMAX
 
INT_MAX


	)

80 
	#NL_NMAX
 
INT_MAX


	)

83 
	#NL_SETMAX
 
INT_MAX


	)

86 
	#NL_TEXTMAX
 
INT_MAX


	)

89 
	#NZERO
 20

	)

93 #ifde‡
INT_MAX


94 #i‡
INT_MAX
 == 32767

95 
	#WORD_BIT
 16

	)

97 #i‡
INT_MAX
 == 2147483647

98 
	#WORD_BIT
 32

	)

101 
	#WORD_BIT
 64

	)

104 #ñi‡
deföed
 
__INT_MAX__


105 #i‡
__INT_MAX__
 == 32767

106 
	#WORD_BIT
 16

	)

108 #i‡
__INT_MAX__
 == 2147483647

109 
	#WORD_BIT
 32

	)

112 
	#WORD_BIT
 64

	)

116 
	#WORD_BIT
 32

	)

120 #ifde‡
LONG_MAX


121 #i‡
LONG_MAX
 == 2147483647

122 
	#LONG_BIT
 32

	)

125 
	#LONG_BIT
 64

	)

127 #ñi‡
deföed
 
__LONG_MAX__


128 #i‡
__LONG_MAX__
 == 2147483647

129 
	#LONG_BIT
 32

	)

132 
	#LONG_BIT
 64

	)

135 
	~<bôs/w‹dsize.h
>

136 #i‡
__WORDSIZE
 == 64

137 
	#LONG_BIT
 64

	)

139 
	#LONG_BIT
 32

	)

	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_MISC


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_MISC
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

74 
	#htﬁe64
(
x
Ë(x)

	)

75 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

76 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

97 #unde‡
__USE_ISOC11


98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_ISOCXX11


101 #unde‡
__USE_POSIX


102 #unde‡
__USE_POSIX2


103 #unde‡
__USE_POSIX199309


104 #unde‡
__USE_POSIX199506


105 #unde‡
__USE_XOPEN


106 #unde‡
__USE_XOPEN_EXTENDED


107 #unde‡
__USE_UNIX98


108 #unde‡
__USE_XOPEN2K


109 #unde‡
__USE_XOPEN2KXSI


110 #unde‡
__USE_XOPEN2K8


111 #unde‡
__USE_XOPEN2K8XSI


112 #unde‡
__USE_LARGEFILE


113 #unde‡
__USE_LARGEFILE64


114 #unde‡
__USE_FILE_OFFSET64


115 #unde‡
__USE_MISC


116 #unde‡
__USE_ATFILE


117 #unde‡
__USE_GNU


118 #unde‡
__USE_REENTRANT


119 #unde‡
__USE_FORTIFY_LEVEL


120 #unde‡
__KERNEL_STRICT_NAMES


124 #i‚de‡
_LOOSE_KERNEL_NAMES


125 
	#__KERNEL_STRICT_NAMES


	)

135 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


136 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

137 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

139 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

146 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

147 && !
deföed
 
	g_DEFAULT_SOURCE


152 #unde‡
_DEFAULT_SOURCE


153 
	#_DEFAULT_SOURCE
 1

	)

157 #ifde‡
_GNU_SOURCE


158 #unde‡
_ISOC95_SOURCE


159 
	#_ISOC95_SOURCE
 1

	)

160 #unde‡
_ISOC99_SOURCE


161 
	#_ISOC99_SOURCE
 1

	)

162 #unde‡
_ISOC11_SOURCE


163 
	#_ISOC11_SOURCE
 1

	)

164 #unde‡
_POSIX_SOURCE


165 
	#_POSIX_SOURCE
 1

	)

166 #unde‡
_POSIX_C_SOURCE


167 
	#_POSIX_C_SOURCE
 200809L

	)

168 #unde‡
_XOPEN_SOURCE


169 
	#_XOPEN_SOURCE
 700

	)

170 #unde‡
_XOPEN_SOURCE_EXTENDED


171 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

172 #unde‡
_LARGEFILE64_SOURCE


173 
	#_LARGEFILE64_SOURCE
 1

	)

174 #unde‡
_DEFAULT_SOURCE


175 
	#_DEFAULT_SOURCE
 1

	)

176 #unde‡
_ATFILE_SOURCE


177 
	#_ATFILE_SOURCE
 1

	)

182 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

183 || (!
deföed
 
	g__STRICT_ANSI__
 \

184 && !
deföed
 
	g_ISOC99_SOURCE
 \

185 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

186 && !
deföed
 
	g_XOPEN_SOURCE
))

187 #unde‡
_DEFAULT_SOURCE


188 
	#_DEFAULT_SOURCE
 1

	)

192 #i‡(
deföed
 
_ISOC11_SOURCE
 \

193 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

194 
	#__USE_ISOC11
 1

	)

198 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

199 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

200 
	#__USE_ISOC99
 1

	)

204 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

205 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

206 
	#__USE_ISOC95
 1

	)

213 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

214 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

215 
	#__USE_ISOCXX11
 1

	)

221 #ifde‡
_DEFAULT_SOURCE


222 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


223 
	#__USE_POSIX_IMPLICITLY
 1

	)

225 #unde‡
_POSIX_SOURCE


226 
	#_POSIX_SOURCE
 1

	)

227 #unde‡
_POSIX_C_SOURCE


228 
	#_POSIX_C_SOURCE
 200809L

	)

230 #i‡((!
deföed
 
__STRICT_ANSI__
 \

231 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

232 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

233 
	#_POSIX_SOURCE
 1

	)

234 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

235 
	#_POSIX_C_SOURCE
 2

	)

236 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

237 
	#_POSIX_C_SOURCE
 199506L

	)

238 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

239 
	#_POSIX_C_SOURCE
 200112L

	)

241 
	#_POSIX_C_SOURCE
 200809L

	)

243 
	#__USE_POSIX_IMPLICITLY
 1

	)

246 #i‡(
deföed
 
_POSIX_SOURCE
 \

247 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

248 || 
deföed
 
_XOPEN_SOURCE
)

249 
	#__USE_POSIX
 1

	)

252 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


253 
	#__USE_POSIX2
 1

	)

256 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

257 
	#__USE_POSIX199309
 1

	)

260 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

261 
	#__USE_POSIX199506
 1

	)

264 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

265 
	#__USE_XOPEN2K
 1

	)

266 #unde‡
__USE_ISOC95


267 
	#__USE_ISOC95
 1

	)

268 #unde‡
__USE_ISOC99


269 
	#__USE_ISOC99
 1

	)

272 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

273 
	#__USE_XOPEN2K8
 1

	)

274 #unde‡
_ATFILE_SOURCE


275 
	#_ATFILE_SOURCE
 1

	)

278 #ifdef 
_XOPEN_SOURCE


279 
	#__USE_XOPEN
 1

	)

280 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

281 
	#__USE_XOPEN_EXTENDED
 1

	)

282 
	#__USE_UNIX98
 1

	)

283 #unde‡
_LARGEFILE_SOURCE


284 
	#_LARGEFILE_SOURCE
 1

	)

285 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

286 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

287 
	#__USE_XOPEN2K8
 1

	)

288 
	#__USE_XOPEN2K8XSI
 1

	)

290 
	#__USE_XOPEN2K
 1

	)

291 
	#__USE_XOPEN2KXSI
 1

	)

292 #unde‡
__USE_ISOC95


293 
	#__USE_ISOC95
 1

	)

294 #unde‡
__USE_ISOC99


295 
	#__USE_ISOC99
 1

	)

298 #ifde‡
_XOPEN_SOURCE_EXTENDED


299 
	#__USE_XOPEN_EXTENDED
 1

	)

304 #ifde‡
_LARGEFILE_SOURCE


305 
	#__USE_LARGEFILE
 1

	)

308 #ifde‡
_LARGEFILE64_SOURCE


309 
	#__USE_LARGEFILE64
 1

	)

312 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

313 
	#__USE_FILE_OFFSET64
 1

	)

316 #i‡
deföed
 
_DEFAULT_SOURCE


317 
	#__USE_MISC
 1

	)

320 #ifdef 
_ATFILE_SOURCE


321 
	#__USE_ATFILE
 1

	)

324 #ifdef 
_GNU_SOURCE


325 
	#__USE_GNU
 1

	)

328 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


329 
	#__USE_REENTRANT
 1

	)

332 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

333 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

334 #i‡
_FORTIFY_SOURCE
 > 1

335 
	#__USE_FORTIFY_LEVEL
 2

	)

337 
	#__USE_FORTIFY_LEVEL
 1

	)

340 
	#__USE_FORTIFY_LEVEL
 0

	)

345 
	~<°dc-¥edef.h
>

353 #unde‡
__GNU_LIBRARY__


354 
	#__GNU_LIBRARY__
 6

	)

358 
	#__GLIBC__
 2

	)

359 
	#__GLIBC_MINOR__
 23

	)

361 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

362 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

365 #i‚de‡
__ASSEMBLER__


366 #i‚de‡
_SYS_CDEFS_H


367 
	~<sys/cdefs.h
>

372 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


373 
	#__USE_LARGEFILE
 1

	)

374 
	#__USE_LARGEFILE64
 1

	)

380 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

381 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

382 && 
deföed
 
	g__exã∫_ölöe


383 
	#__USE_EXTERN_INLINES
 1

	)

391 
	~<gnu/°ubs.h
>

	@/usr/include/libio.h

28 #i‚de‡
_IO_STDIO_H


29 
	#_IO_STDIO_H


	)

31 
	~<_G_c⁄fig.h
>

33 
	#_IO_Âos_t
 
_G_Âos_t


	)

34 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

35 
	#_IO_size_t
 
size_t


	)

36 
	#_IO_ssize_t
 
__ssize_t


	)

37 
	#_IO_off_t
 
__off_t


	)

38 
	#_IO_off64_t
 
__off64_t


	)

39 
	#_IO_pid_t
 
__pid_t


	)

40 
	#_IO_uid_t
 
__uid_t


	)

41 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

42 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

43 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

44 
	#_IO_va_li°
 
_G_va_li°


	)

45 
	#_IO_wöt_t
 
wöt_t


	)

48 
	#__√ed___va_li°


	)

49 
	~<°d¨g.h
>

50 #ifde‡
__GNUC_VA_LIST


51 #unde‡
_IO_va_li°


52 
	#_IO_va_li°
 
__gnuc_va_li°


	)

55 #i‚de‡
__P


56 
	~<sys/cdefs.h
>

59 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

61 #i‚de‡
EOF


62 
	#EOF
 (-1)

	)

64 #i‚de‡
NULL


65 #i‡
deföed
 
__GNUG__
 && \

66 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

67 
	#NULL
 (
__nuŒ
)

	)

69 #i‡!
deföed
(
__˝lu•lus
)

70 
	#NULL
 ((*)0)

	)

72 
	#NULL
 (0)

	)

77 
	#_IOS_INPUT
 1

	)

78 
	#_IOS_OUTPUT
 2

	)

79 
	#_IOS_ATEND
 4

	)

80 
	#_IOS_APPEND
 8

	)

81 
	#_IOS_TRUNC
 16

	)

82 
	#_IOS_NOCREATE
 32

	)

83 
	#_IOS_NOREPLACE
 64

	)

84 
	#_IOS_BIN
 128

	)

92 
	#_IO_MAGIC
 0xFBAD0000

	)

93 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

94 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

95 
	#_IO_USER_BUF
 1

	)

96 
	#_IO_UNBUFFERED
 2

	)

97 
	#_IO_NO_READS
 4

	)

98 
	#_IO_NO_WRITES
 8

	)

99 
	#_IO_EOF_SEEN
 0x10

	)

100 
	#_IO_ERR_SEEN
 0x20

	)

101 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

102 
	#_IO_LINKED
 0x80

	)

103 
	#_IO_IN_BACKUP
 0x100

	)

104 
	#_IO_LINE_BUF
 0x200

	)

105 
	#_IO_TIED_PUT_GET
 0x400

	)

106 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

107 
	#_IO_IS_APPENDING
 0x1000

	)

108 
	#_IO_IS_FILEBUF
 0x2000

	)

109 
	#_IO_BAD_SEEN
 0x4000

	)

110 
	#_IO_USER_LOCK
 0x8000

	)

112 
	#_IO_FLAGS2_MMAP
 1

	)

113 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

114 #ifde‡
_LIBC


115 
	#_IO_FLAGS2_FORTIFY
 4

	)

117 
	#_IO_FLAGS2_USER_WBUF
 8

	)

118 #ifde‡
_LIBC


119 
	#_IO_FLAGS2_SCANF_STD
 16

	)

120 
	#_IO_FLAGS2_NOCLOSE
 32

	)

121 
	#_IO_FLAGS2_CLOEXEC
 64

	)

125 
	#_IO_SKIPWS
 01

	)

126 
	#_IO_LEFT
 02

	)

127 
	#_IO_RIGHT
 04

	)

128 
	#_IO_INTERNAL
 010

	)

129 
	#_IO_DEC
 020

	)

130 
	#_IO_OCT
 040

	)

131 
	#_IO_HEX
 0100

	)

132 
	#_IO_SHOWBASE
 0200

	)

133 
	#_IO_SHOWPOINT
 0400

	)

134 
	#_IO_UPPERCASE
 01000

	)

135 
	#_IO_SHOWPOS
 02000

	)

136 
	#_IO_SCIENTIFIC
 04000

	)

137 
	#_IO_FIXED
 010000

	)

138 
	#_IO_UNITBUF
 020000

	)

139 
	#_IO_STDIO
 040000

	)

140 
	#_IO_DONT_CLOSE
 0100000

	)

141 
	#_IO_BOOLALPHA
 0200000

	)

144 
_IO_jump_t
; 
	g_IO_FILE
;

147 #ifde‡
_IO_MTSAFE_IO


150 
	t_IO_lock_t
;

156 
	s_IO_m¨kî
 {

157 
_IO_m¨kî
 *
	m_√xt
;

158 
_IO_FILE
 *
	m_sbuf
;

162 
	m_pos
;

164 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

165 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

166 
	mpublic
:

167 
°ªamm¨kî
(
°ªambuf
 *
sb
);

168 ~
°ªamm¨kî
();

169 
ßvög
(Ë{  
	m_•os
 == -2; }

170 
dñè
(
°ªamm¨kî
&);

171 
dñè
();

176 
	e__codecvt_ªsu…


178 
	m__codecvt_ok
,

179 
	m__codecvt_∑πül
,

180 
	m__codecvt_îr‹
,

181 
	m__codecvt_noc⁄v


184 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


187 
	s_IO_codecvt


189 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

190 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

191 
	m__mb°©e_t
 *,

192 c⁄° 
	mwch¨_t
 *,

193 c⁄° 
	mwch¨_t
 *,

194 c⁄° 
	mwch¨_t
 **, *,

196 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

197 
	m__mb°©e_t
 *, *,

199 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

200 
	m__mb°©e_t
 *,

202 c⁄° **, 
	mwch¨_t
 *,

203 
	mwch¨_t
 *, wchar_t **);

204 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

205 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

206 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

207 c⁄° *, c⁄° *, 
	m_IO_size_t
);

208 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

210 
_IO_ic⁄v_t
 
	m__cd_ö
;

211 
_IO_ic⁄v_t
 
	m__cd_out
;

215 
	s_IO_wide_d©a


217 
wch¨_t
 *
	m_IO_ªad_±r
;

218 
wch¨_t
 *
	m_IO_ªad_íd
;

219 
wch¨_t
 *
	m_IO_ªad_ba£
;

220 
wch¨_t
 *
	m_IO_wrôe_ba£
;

221 
wch¨_t
 *
	m_IO_wrôe_±r
;

222 
wch¨_t
 *
	m_IO_wrôe_íd
;

223 
wch¨_t
 *
	m_IO_buf_ba£
;

224 
wch¨_t
 *
	m_IO_buf_íd
;

226 
wch¨_t
 *
	m_IO_ßve_ba£
;

227 
wch¨_t
 *
	m_IO_backup_ba£
;

229 
wch¨_t
 *
	m_IO_ßve_íd
;

231 
__mb°©e_t
 
	m_IO_°©e
;

232 
__mb°©e_t
 
	m_IO_œ°_°©e
;

233 
_IO_codecvt
 
	m_codecvt
;

235 
wch¨_t
 
	m_sh‹tbuf
[1];

237 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

241 
	s_IO_FILE
 {

242 
	m_Êags
;

243 
	#_IO_fûe_Êags
 
_Êags


	)

247 * 
	m_IO_ªad_±r
;

248 * 
	m_IO_ªad_íd
;

249 * 
	m_IO_ªad_ba£
;

250 * 
	m_IO_wrôe_ba£
;

251 * 
	m_IO_wrôe_±r
;

252 * 
	m_IO_wrôe_íd
;

253 * 
	m_IO_buf_ba£
;

254 * 
	m_IO_buf_íd
;

256 *
	m_IO_ßve_ba£
;

257 *
	m_IO_backup_ba£
;

258 *
	m_IO_ßve_íd
;

260 
_IO_m¨kî
 *
	m_m¨kîs
;

262 
_IO_FILE
 *
	m_chaö
;

264 
	m_fûío
;

266 
	m_blksize
;

268 
	m_Êags2
;

270 
_IO_off_t
 
	m_ﬁd_off£t
;

272 
	#__HAVE_COLUMN


	)

274 
	m_cur_cﬁumn
;

275 sig√d 
	m_vèbÀ_off£t
;

276 
	m_sh‹tbuf
[1];

280 
_IO_lock_t
 *
	m_lock
;

281 #ifde‡
_IO_USE_OLD_IO_FILE


284 
	s_IO_FILE_com∂ëe


286 
_IO_FILE
 
	m_fûe
;

288 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

289 
_IO_off64_t
 
	m_off£t
;

290 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


292 
_IO_codecvt
 *
	m_codecvt
;

293 
_IO_wide_d©a
 *
	m_wide_d©a
;

294 
_IO_FILE
 *
	m_‰ìªs_li°
;

295 *
	m_‰ìªs_buf
;

297 *
	m__∑d1
;

298 *
	m__∑d2
;

299 *
	m__∑d3
;

300 *
	m__∑d4
;

302 
size_t
 
	m__∑d5
;

303 
	m_mode
;

305 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

309 #i‚de‡
__˝lu•lus


310 
_IO_FILE
 
	t_IO_FILE
;

313 
	g_IO_FILE_∂us
;

315 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

316 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

317 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

318 #i‚de‡
_LIBC


319 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

320 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

321 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

323 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

324 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

325 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

333 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

341 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, c⁄° *
	t__buf
,

342 
	tsize_t
 
	t__n
);

350 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

353 
	t__io_˛o£_‚
 (*
	t__cookõ
);

356 #ifde‡
_GNU_SOURCE


358 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

359 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

360 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

361 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

366 
__io_ªad_‚
 *
	mªad
;

367 
__io_wrôe_‚
 *
	mwrôe
;

368 
__io_£ek_‚
 *
	m£ek
;

369 
__io_˛o£_‚
 *
	m˛o£
;

370 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

371 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

373 
	g_IO_cookõ_fûe
;

376 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

377 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

381 #ifde‡
__˝lu•lus


385 
__undîÊow
 (
_IO_FILE
 *);

386 
__uÊow
 (
_IO_FILE
 *);

387 
__ovîÊow
 (
_IO_FILE
 *, );

388 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


389 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

390 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

391 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

394 #i‡ 
__GNUC__
 >= 3

395 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

397 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

400 
	#_IO_gëc_u∆ocked
(
_Â
) \

401 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

402 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

403 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

404 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

405 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

406 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

407 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

408 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

409 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

410 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

412 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


413 
	#_IO_gëwc_u∆ocked
(
_Â
) \

414 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

415 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

416 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

417 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

418 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

419 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

420 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

421 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

422 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

423 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

426 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

427 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

429 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

430 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

431 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

432 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

434 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

437 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

438 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

440 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

441 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

442 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

444 #ifde‡
_IO_MTSAFE_IO


445 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

446 
	#_IO_Êockfûe
(
_Â
) \

447 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

448 
	#_IO_fu∆ockfûe
(
_Â
) \

449 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

451 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

452 
	#_IO_Êockfûe
(
_Â
Ë

	)

453 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

454 
	#_IO_·rylockfûe
(
_Â
Ë

	)

455 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

456 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

459 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

460 
_IO_va_li°
, *
__ª°ri˘
);

461 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

462 
_IO_va_li°
);

463 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

464 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

466 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

467 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

469 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

471 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


472 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

473 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

474 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

475 #i‡
__GNUC__
 >= 2

478 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


479 
	~<shlib-com∑t.h
>

480 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

481 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

482 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

483 c⁄° 
_IO_°dö_u£d
;

484 
wók_exã∫
 (
_IO_°dö_u£d
);

487 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


488 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

492 
	#_IO_fwide
(
__Â
, 
__mode
) \

493 ({ 
__ªsu…
 = (
__mode
); \

494 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

496 i‡((
__Â
)->
_mode
 == 0) \

498 (
__Â
)->
_mode
 = -1; \

499 
__ªsu…
 = (
__Â
)->
_mode
; \

501 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

502 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

504 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

505 
__ªsu…
; })

	)

508 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

509 
_IO_va_li°
, *
__ª°ri˘
);

510 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

511 
_IO_va_li°
);

512 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

513 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

516 #ifde‡
__LDBL_COMPAT


517 
	~<bôs/libio-ldbl.h
>

520 #ifde‡
__˝lu•lus


	@/usr/include/linux/ioctl.h

1 #i‚de‡
_LINUX_IOCTL_H


2 
	#_LINUX_IOCTL_H


	)

4 
	~<asm/io˘l.h
>

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<asm/ty≥s.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/posix_ty≥s.h
>

16 #ifde‡
__CHECKER__


17 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

19 
	#__bôwi£__


	)

21 #ifde‡
__CHECK_ENDIAN__


22 
	#__bôwi£
 
__bôwi£__


	)

24 
	#__bôwi£


	)

27 
__u16
 
	t__bôwi£
 
	t__À16
;

28 
__u16
 
	t__bôwi£
 
	t__be16
;

29 
__u32
 
	t__bôwi£
 
	t__À32
;

30 
__u32
 
	t__bôwi£
 
	t__be32
;

31 
__u64
 
	t__bôwi£
 
	t__À64
;

32 
__u64
 
	t__bôwi£
 
	t__be64
;

34 
__u16
 
	t__bôwi£
 
	t__sum16
;

35 
__u32
 
	t__bôwi£
 
	t__wsum
;

46 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

47 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

48 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

	@/usr/include/rpc/netdb.h

36 #i‚de‡
_RPC_NETDB_H


37 
	#_RPC_NETDB_H
 1

	)

39 
	~<„©uªs.h
>

41 
	#__√ed_size_t


	)

42 
	~<°ddef.h
>

44 
__BEGIN_DECLS


46 
	sΩ˚¡


48 *
	mr_«me
;

49 **
	mr_Æü£s
;

50 
	mr_numbî
;

53 
	$£åp˚¡
 (
__°ay›í
Ë
__THROW
;

54 
	$ídΩ˚¡
 (Ë
__THROW
;

55 
Ω˚¡
 *
	$gëΩcby«me
 (c⁄° *
__«me
Ë
__THROW
;

56 
Ω˚¡
 *
	$gëΩcbynumbî
 (
__numbî
Ë
__THROW
;

57 
Ω˚¡
 *
	$gëΩ˚¡
 (Ë
__THROW
;

59 #ifde‡
__USE_MISC


60 
	$gëΩcby«me_r
 (c⁄° *
__«me
, 
Ω˚¡
 *
__ªsu…_buf
,

61 *
__buf„r
, 
size_t
 
__buÊí
,

62 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

64 
	$gëΩcbynumbî_r
 (
__numbî
, 
Ω˚¡
 *
__ªsu…_buf
,

65 *
__buf„r
, 
size_t
 
__buÊí
,

66 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

68 
	$gëΩ˚¡_r
 (
Ω˚¡
 *
__ªsu…_buf
, *
__buf„r
,

69 
size_t
 
__buÊí
, 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

72 
__END_DECLS


	@/usr/include/sched.h

19 #i‚def 
_SCHED_H


20 
	#_SCHED_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

30 #ifde‡
__USE_XOPEN2K


31 
	#__√ed_time_t


	)

32 
	#__√ed_time•ec


	)

34 
	~<time.h
>

36 #i‚de‡
__pid_t_deföed


37 
__pid_t
 
	tpid_t
;

38 
	#__pid_t_deföed


	)

43 
	~<bôs/sched.h
>

45 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

48 
__BEGIN_DECLS


51 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, c⁄° 
sched_∑øm
 *
__∑øm
)

52 
__THROW
;

55 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

58 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

59 c⁄° 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

62 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

65 
	$sched_yõld
 (Ë
__THROW
;

68 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

71 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

74 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

77 #ifde‡
__USE_GNU


79 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

80 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

81 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

82 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

83 
˝u£ç
)

	)

84 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

87 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

88 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

89 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

90 
˝u£ç
)

	)

91 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

94 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

96 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

97 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

99 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

101 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

103 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

105 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

107 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

109 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

110 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

112 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

113 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

114 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

118 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

119 c⁄° 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

122 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

123 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

126 
__END_DECLS


	@/usr/include/sys/sysmacros.h

19 #i‚de‡
_SYS_SYSMACROS_H


20 
	#_SYS_SYSMACROS_H
 1

	)

22 
	~<„©uªs.h
>

24 
__BEGIN_DECLS


26 
__exãnsi⁄__


27 
	$gnu_dev_maj‹
 (
__dev
)

28 
__THROW
 
__©åibuã_c⁄°__
;

29 
__exãnsi⁄__


30 
	$gnu_dev_mö‹
 (
__dev
)

31 
__THROW
 
__©åibuã_c⁄°__
;

32 
__exãnsi⁄__


33 
	$gnu_dev_makedev
 (
__maj‹
,

34 
__mö‹
)

35 
__THROW
 
__©åibuã_c⁄°__
;

37 #ifde‡
__USE_EXTERN_INLINES


38 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

39 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

41  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

42 
	}
}

44 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

45 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

47  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

48 
	}
}

50 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

51 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

53  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

54 | (((Ë(
__mö‹
 & ~0xff)) << 12)

55 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

56 
	}
}

58 
	g__END_DECLS


61 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

62 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

63 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/sys/ttydefaults.h

40 #i‚de‡
_SYS_TTYDEFAULTS_H_


41 
	#_SYS_TTYDEFAULTS_H_


	)

46 
	#TTYDEF_IFLAG
 (
BRKINT
 | 
ISTRIP
 | 
ICRNL
 | 
IMAXBEL
 | 
IXON
 | 
IXANY
)

	)

47 
	#TTYDEF_OFLAG
 (
OPOST
 | 
ONLCR
 | 
XTABS
)

	)

48 
	#TTYDEF_LFLAG
 (
ECHO
 | 
ICANON
 | 
ISIG
 | 
IEXTEN
 | 
ECHOE
|
ECHOKE
|
ECHOCTL
)

	)

49 
	#TTYDEF_CFLAG
 (
CREAD
 | 
CS7
 | 
PARENB
 | 
HUPCL
)

	)

50 
	#TTYDEF_SPEED
 (
B9600
)

	)

55 
	#CTRL
(
x
Ë(x&037)

	)

56 
	#CEOF
 
	`CTRL
('d')

	)

57 #ifde‡
_POSIX_VDISABLE


58 
	#CEOL
 
_POSIX_VDISABLE


	)

60 
	#CEOL
 '\0'

	)

62 
	#CERASE
 0177

	)

63 
	#CINTR
 
	`CTRL
('c')

	)

64 #ifde‡
_POSIX_VDISABLE


65 
	#CSTATUS
 
_POSIX_VDISABLE


	)

67 
	#CSTATUS
 '\0'

	)

69 
	#CKILL
 
	`CTRL
('u')

	)

70 
	#CMIN
 1

	)

71 
	#CQUIT
 034

	)

72 
	#CSUSP
 
	`CTRL
('z')

	)

73 
	#CTIME
 0

	)

74 
	#CDSUSP
 
	`CTRL
('y')

	)

75 
	#CSTART
 
	`CTRL
('q')

	)

76 
	#CSTOP
 
	`CTRL
('s')

	)

77 
	#CLNEXT
 
	`CTRL
('v')

	)

78 
	#CDISCARD
 
	`CTRL
('o')

	)

79 
	#CWERASE
 
	`CTRL
('w')

	)

80 
	#CREPRINT
 
	`CTRL
('r')

	)

81 
	#CEOT
 
CEOF


	)

83 
	#CBRK
 
CEOL


	)

84 
	#CRPRNT
 
CREPRINT


	)

85 
	#CFLUSH
 
CDISCARD


	)

93 #ifde‡
TTYDEFCHARS


94 
cc_t
 
	gâydefch¨s
[
NCCS
] = {

95 
CEOF
, 
CEOL
, CEOL, 
CERASE
, 
CWERASE
, 
CKILL
, 
CREPRINT
,

96 
_POSIX_VDISABLE
, 
CINTR
, 
CQUIT
, 
CSUSP
, 
CDSUSP
, 
CSTART
, 
CSTOP
, 
CLNEXT
,

97 
CDISCARD
, 
CMIN
, 
CTIME
, 
CSTATUS
, 
_POSIX_VDISABLE


99 #unde‡
TTYDEFCHARS


	@/usr/include/sys/ucontext.h

18 #i‚de‡
_SYS_UCONTEXT_H


19 
	#_SYS_UCONTEXT_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sig«l.h
>

26 
	~<bôs/sigc⁄ãxt.h
>

28 #ifde‡
__x86_64__


31 
__exãnsi⁄__
 
	tgªg_t
;

34 
	#NGREG
 23

	)

37 
gªg_t
 
	tgªg£t_t
[
NGREG
];

39 #ifde‡
__USE_GNU


43 
	mREG_R8
 = 0,

44 
	#REG_R8
 
REG_R8


	)

45 
	mREG_R9
,

46 
	#REG_R9
 
REG_R9


	)

47 
	mREG_R10
,

48 
	#REG_R10
 
REG_R10


	)

49 
	mREG_R11
,

50 
	#REG_R11
 
REG_R11


	)

51 
	mREG_R12
,

52 
	#REG_R12
 
REG_R12


	)

53 
	mREG_R13
,

54 
	#REG_R13
 
REG_R13


	)

55 
	mREG_R14
,

56 
	#REG_R14
 
REG_R14


	)

57 
	mREG_R15
,

58 
	#REG_R15
 
REG_R15


	)

59 
	mREG_RDI
,

60 
	#REG_RDI
 
REG_RDI


	)

61 
	mREG_RSI
,

62 
	#REG_RSI
 
REG_RSI


	)

63 
	mREG_RBP
,

64 
	#REG_RBP
 
REG_RBP


	)

65 
	mREG_RBX
,

66 
	#REG_RBX
 
REG_RBX


	)

67 
	mREG_RDX
,

68 
	#REG_RDX
 
REG_RDX


	)

69 
	mREG_RAX
,

70 
	#REG_RAX
 
REG_RAX


	)

71 
	mREG_RCX
,

72 
	#REG_RCX
 
REG_RCX


	)

73 
	mREG_RSP
,

74 
	#REG_RSP
 
REG_RSP


	)

75 
	mREG_RIP
,

76 
	#REG_RIP
 
REG_RIP


	)

77 
	mREG_EFL
,

78 
	#REG_EFL
 
REG_EFL


	)

79 
	mREG_CSGSFS
,

80 
	#REG_CSGSFS
 
REG_CSGSFS


	)

81 
	mREG_ERR
,

82 
	#REG_ERR
 
REG_ERR


	)

83 
	mREG_TRAPNO
,

84 
	#REG_TRAPNO
 
REG_TRAPNO


	)

85 
	mREG_OLDMASK
,

86 
	#REG_OLDMASK
 
REG_OLDMASK


	)

87 
	mREG_CR2


88 
	#REG_CR2
 
REG_CR2


	)

92 
	s_libc_Âxªg


94 
	msignifiˇnd
[4];

95 
	mexp⁄ít
;

96 
	m∑ddög
[3];

99 
	s_libc_xmmªg


101 
__uöt32_t
 
	mñemít
[4];

104 
	s_libc_Â°©e


107 
__uöt16_t
 
	mcwd
;

108 
__uöt16_t
 
	mswd
;

109 
__uöt16_t
 
	m·w
;

110 
__uöt16_t
 
	mf›
;

111 
__uöt64_t
 
	mrù
;

112 
__uöt64_t
 
	mrdp
;

113 
__uöt32_t
 
	mmxc§
;

114 
__uöt32_t
 
	mmx¸_mask
;

115 
_libc_Âxªg
 
	m_°
[8];

116 
_libc_xmmªg
 
	m_xmm
[16];

117 
__uöt32_t
 
	m∑ddög
[24];

121 
_libc_Â°©e
 *
	tÂªg£t_t
;

126 
gªg£t_t
 
	mgªgs
;

128 
Âªg£t_t
 
	mÂªgs
;

129 
__exãnsi⁄__
 
	m__ª£rved1
 [8];

130 } 
	tmc⁄ãxt_t
;

133 
	suc⁄ãxt


135 
	muc_Êags
;

136 
uc⁄ãxt
 *
	muc_lök
;

137 
°ack_t
 
	muc_°ack
;

138 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

139 
__sig£t_t
 
	muc_sigmask
;

140 
_libc_Â°©e
 
	m__Âªgs_mem
;

141 } 
	tuc⁄ãxt_t
;

146 
	tgªg_t
;

149 
	#NGREG
 19

	)

152 
gªg_t
 
	tgªg£t_t
[
NGREG
];

154 #ifde‡
__USE_GNU


158 
	mREG_GS
 = 0,

159 
	#REG_GS
 
REG_GS


	)

160 
	mREG_FS
,

161 
	#REG_FS
 
REG_FS


	)

162 
	mREG_ES
,

163 
	#REG_ES
 
REG_ES


	)

164 
	mREG_DS
,

165 
	#REG_DS
 
REG_DS


	)

166 
	mREG_EDI
,

167 
	#REG_EDI
 
REG_EDI


	)

168 
	mREG_ESI
,

169 
	#REG_ESI
 
REG_ESI


	)

170 
	mREG_EBP
,

171 
	#REG_EBP
 
REG_EBP


	)

172 
	mREG_ESP
,

173 
	#REG_ESP
 
REG_ESP


	)

174 
	mREG_EBX
,

175 
	#REG_EBX
 
REG_EBX


	)

176 
	mREG_EDX
,

177 
	#REG_EDX
 
REG_EDX


	)

178 
	mREG_ECX
,

179 
	#REG_ECX
 
REG_ECX


	)

180 
	mREG_EAX
,

181 
	#REG_EAX
 
REG_EAX


	)

182 
	mREG_TRAPNO
,

183 
	#REG_TRAPNO
 
REG_TRAPNO


	)

184 
	mREG_ERR
,

185 
	#REG_ERR
 
REG_ERR


	)

186 
	mREG_EIP
,

187 
	#REG_EIP
 
REG_EIP


	)

188 
	mREG_CS
,

189 
	#REG_CS
 
REG_CS


	)

190 
	mREG_EFL
,

191 
	#REG_EFL
 
REG_EFL


	)

192 
	mREG_UESP
,

193 
	#REG_UESP
 
REG_UESP


	)

194 
	mREG_SS


195 
	#REG_SS
 
REG_SS


	)

200 
	s_libc_Âªg


202 
	msignifiˇnd
[4];

203 
	mexp⁄ít
;

206 
	s_libc_Â°©e


208 
	mcw
;

209 
	msw
;

210 
	mèg
;

211 
	mùoff
;

212 
	mcs£l
;

213 
	md©aoff
;

214 
	md©a£l
;

215 
_libc_Âªg
 
	m_°
[8];

216 
	m°©us
;

220 
_libc_Â°©e
 *
	tÂªg£t_t
;

225 
gªg£t_t
 
	mgªgs
;

228 
Âªg£t_t
 
	mÂªgs
;

229 
	mﬁdmask
;

230 
	m¸2
;

231 } 
	tmc⁄ãxt_t
;

234 
	suc⁄ãxt


236 
	muc_Êags
;

237 
uc⁄ãxt
 *
	muc_lök
;

238 
°ack_t
 
	muc_°ack
;

239 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

240 
__sig£t_t
 
	muc_sigmask
;

241 
_libc_Â°©e
 
	m__Âªgs_mem
;

242 } 
	tuc⁄ãxt_t
;

	@/usr/include/sys/uio.h

18 #i‚de‡
_SYS_UIO_H


19 
	#_SYS_UIO_H
 1

	)

21 
	~<„©uªs.h
>

23 
	~<sys/ty≥s.h
>

25 
	g__BEGIN_DECLS


28 
	~<bôs/uio.h
>

39 
ssize_t
 
	$ªadv
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
)

40 
__wur
;

50 
ssize_t
 
	$wrôev
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
)

51 
__wur
;

54 #ifde‡
__USE_MISC


55 #i‚de‡
__USE_FILE_OFFSET64


65 
ssize_t
 
	$¥ódv
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

66 
__off_t
 
__off£t
Ë
__wur
;

77 
ssize_t
 
	$pwrôev
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

78 
__off_t
 
__off£t
Ë
__wur
;

80 #ifde‡
__REDIRECT


81 
ssize_t
 
	`__REDIRECT
 (
¥ódv
, (
__fd
, c⁄° 
iovec
 *
__iovec
,

82 
__cou¡
, 
__off64_t
 
__off£t
),

83 
¥ódv64
Ë
__wur
;

84 
ssize_t
 
	`__REDIRECT
 (
pwrôev
, (
__fd
, c⁄° 
iovec
 *
__iovec
,

85 
__cou¡
, 
__off64_t
 
__off£t
),

86 
pwrôev64
Ë
__wur
;

88 
	#¥ódv
 
¥ódv64


	)

89 
	#pwrôev
 
pwrôev64


	)

93 #ifde‡
__USE_LARGEFILE64


103 
ssize_t
 
	$¥ódv64
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

104 
__off64_t
 
__off£t
Ë
__wur
;

115 
ssize_t
 
	$pwrôev64
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

116 
__off64_t
 
__off£t
Ë
__wur
;

120 
__END_DECLS


	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

23 
__off_t
 
	m__pos
;

24 
__mb°©e_t
 
	m__°©e
;

25 } 
	t_G_Âos_t
;

28 
__off64_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos64_t
;

31 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


32 
	~<gc⁄v.h
>

35 
__gc⁄v_öfo
 
	m__cd
;

38 
__gc⁄v_öfo
 
	m__cd
;

39 
__gc⁄v_°ï_d©a
 
	m__d©a
;

40 } 
	m__comböed
;

41 } 
	t_G_ic⁄v_t
;

46 
	#_G_va_li°
 
__gnuc_va_li°


	)

48 
	#_G_HAVE_MMAP
 1

	)

49 
	#_G_HAVE_MREMAP
 1

	)

51 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

54 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

56 
	#_G_BUFSIZ
 8192

	)

	@/usr/include/asm/ioctl.h

1 
	~<asm-gíîic/io˘l.h
>

	@/usr/include/asm/ioctls.h

1 
	~<asm-gíîic/io˘ls.h
>

	@/usr/include/asm/socket.h

1 
	~<asm-gíîic/sockë.h
>

	@/usr/include/asm/types.h

1 #i‚de‡
_ASM_X86_TYPES_H


2 
	#_ASM_X86_TYPES_H


	)

4 
	~<asm-gíîic/ty≥s.h
>

	@/usr/include/bits/byteswap-16.h

19 #i‚de‡
_BITS_BYTESWAP_H


23 #ifde‡
__GNUC__


24 #i‡
__GNUC__
 >= 2

25 
	#__bsw≠_16
(
x
) \

26 (
__exãnsi⁄__
 \

27 ({ 
__v
, 
__x
 = (Ë(
x
); \

28 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

29 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

31 
	`__asm__
 ("rorw $8, %w0" \

32 : "Ù" (
__v
) \

33 : "0" (
__x
) \

35 
__v
; }))

	)

38 
	#__bsw≠_16
(
x
) \

39 (
__exãnsi⁄__
 \

40 ({ 
__x
 = (Ë(
x
); \

41 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

44 
__ölöe
 

45 
	$__bsw≠_16
 (
__bsx
)

47  
	`__bsw≠_c⁄°™t_16
 (
__bsx
);

48 
	}
}

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/fcntl-linux.h

19 #i‚def 
_FCNTL_H


37 #ifde‡
__USE_GNU


38 
	~<bôs/uio.h
>

42 
	#O_ACCMODE
 0003

	)

43 
	#O_RDONLY
 00

	)

44 
	#O_WRONLY
 01

	)

45 
	#O_RDWR
 02

	)

46 #i‚de‡
O_CREAT


47 
	#O_CREAT
 0100

	)

49 #i‚de‡
O_EXCL


50 
	#O_EXCL
 0200

	)

52 #i‚de‡
O_NOCTTY


53 
	#O_NOCTTY
 0400

	)

55 #i‚de‡
O_TRUNC


56 
	#O_TRUNC
 01000

	)

58 #i‚de‡
O_APPEND


59 
	#O_APPEND
 02000

	)

61 #i‚de‡
O_NONBLOCK


62 
	#O_NONBLOCK
 04000

	)

64 #i‚de‡
O_NDELAY


65 
	#O_NDELAY
 
O_NONBLOCK


	)

67 #i‚de‡
O_SYNC


68 
	#O_SYNC
 04010000

	)

70 
	#O_FSYNC
 
O_SYNC


	)

71 #i‚de‡
O_ASYNC


72 
	#O_ASYNC
 020000

	)

74 #i‚de‡
__O_LARGEFILE


75 
	#__O_LARGEFILE
 0100000

	)

78 #i‚de‡
__O_DIRECTORY


79 
	#__O_DIRECTORY
 0200000

	)

81 #i‚de‡
__O_NOFOLLOW


82 
	#__O_NOFOLLOW
 0400000

	)

84 #i‚de‡
__O_CLOEXEC


85 
	#__O_CLOEXEC
 02000000

	)

87 #i‚de‡
__O_DIRECT


88 
	#__O_DIRECT
 040000

	)

90 #i‚de‡
__O_NOATIME


91 
	#__O_NOATIME
 01000000

	)

93 #i‚de‡
__O_PATH


94 
	#__O_PATH
 010000000

	)

96 #i‚de‡
__O_DSYNC


97 
	#__O_DSYNC
 010000

	)

99 #i‚de‡
__O_TMPFILE


100 
	#__O_TMPFILE
 (020000000 | 
__O_DIRECTORY
)

	)

103 #i‚de‡
F_GETLK


104 #i‚de‡
__USE_FILE_OFFSET64


105 
	#F_GETLK
 5

	)

106 
	#F_SETLK
 6

	)

107 
	#F_SETLKW
 7

	)

109 
	#F_GETLK
 
F_GETLK64


	)

110 
	#F_SETLK
 
F_SETLK64


	)

111 
	#F_SETLKW
 
F_SETLKW64


	)

114 #i‚de‡
F_GETLK64


115 
	#F_GETLK64
 12

	)

116 
	#F_SETLK64
 13

	)

117 
	#F_SETLKW64
 14

	)

131 #ifde‡
__USE_GNU


132 
	#F_OFD_GETLK
 36

	)

133 
	#F_OFD_SETLK
 37

	)

134 
	#F_OFD_SETLKW
 38

	)

137 #ifde‡
__USE_LARGEFILE64


138 
	#O_LARGEFILE
 
__O_LARGEFILE


	)

141 #ifde‡
__USE_XOPEN2K8


142 
	#O_DIRECTORY
 
__O_DIRECTORY


	)

143 
	#O_NOFOLLOW
 
__O_NOFOLLOW


	)

144 
	#O_CLOEXEC
 
__O_CLOEXEC


	)

147 #ifde‡
__USE_GNU


148 
	#O_DIRECT
 
__O_DIRECT


	)

149 
	#O_NOATIME
 
__O_NOATIME


	)

150 
	#O_PATH
 
__O_PATH


	)

151 
	#O_TMPFILE
 
__O_TMPFILE


	)

157 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


158 
	#O_DSYNC
 
__O_DSYNC


	)

159 #i‡
deföed
 
__O_RSYNC


160 
	#O_RSYNC
 
__O_RSYNC


	)

162 
	#O_RSYNC
 
O_SYNC


	)

167 
	#F_DUPFD
 0

	)

168 
	#F_GETFD
 1

	)

169 
	#F_SETFD
 2

	)

170 
	#F_GETFL
 3

	)

171 
	#F_SETFL
 4

	)

173 #i‚de‡
__F_SETOWN


174 
	#__F_SETOWN
 8

	)

175 
	#__F_GETOWN
 9

	)

178 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


179 
	#F_SETOWN
 
__F_SETOWN


	)

180 
	#F_GETOWN
 
__F_GETOWN


	)

183 #i‚de‡
__F_SETSIG


184 
	#__F_SETSIG
 10

	)

185 
	#__F_GETSIG
 11

	)

187 #i‚de‡
__F_SETOWN_EX


188 
	#__F_SETOWN_EX
 15

	)

189 
	#__F_GETOWN_EX
 16

	)

192 #ifde‡
__USE_GNU


193 
	#F_SETSIG
 
__F_SETSIG


	)

194 
	#F_GETSIG
 
__F_GETSIG


	)

195 
	#F_SETOWN_EX
 
__F_SETOWN_EX


	)

196 
	#F_GETOWN_EX
 
__F_GETOWN_EX


	)

199 #ifde‡
__USE_GNU


200 
	#F_SETLEASE
 1024

	)

201 
	#F_GETLEASE
 1025

	)

202 
	#F_NOTIFY
 1026

	)

203 
	#F_SETPIPE_SZ
 1031

	)

204 
	#F_GETPIPE_SZ
 1032

	)

206 #ifde‡
__USE_XOPEN2K8


207 
	#F_DUPFD_CLOEXEC
 1030

	)

212 
	#FD_CLOEXEC
 1

	)

214 #i‚de‡
F_RDLCK


216 
	#F_RDLCK
 0

	)

217 
	#F_WRLCK
 1

	)

218 
	#F_UNLCK
 2

	)

223 #i‚de‡
F_EXLCK


224 
	#F_EXLCK
 4

	)

225 
	#F_SHLCK
 8

	)

228 #ifde‡
__USE_MISC


230 
	#LOCK_SH
 1

	)

231 
	#LOCK_EX
 2

	)

232 
	#LOCK_NB
 4

	)

234 
	#LOCK_UN
 8

	)

237 #ifde‡
__USE_GNU


238 
	#LOCK_MAND
 32

	)

239 
	#LOCK_READ
 64

	)

240 
	#LOCK_WRITE
 128

	)

241 
	#LOCK_RW
 192

	)

244 #ifde‡
__USE_GNU


246 
	#DN_ACCESS
 0x00000001

	)

247 
	#DN_MODIFY
 0x00000002

	)

248 
	#DN_CREATE
 0x00000004

	)

249 
	#DN_DELETE
 0x00000008

	)

250 
	#DN_RENAME
 0x00000010

	)

251 
	#DN_ATTRIB
 0x00000020

	)

252 
	#DN_MULTISHOT
 0x80000000

	)

256 #ifde‡
__USE_GNU


258 
	e__pid_ty≥


260 
	mF_OWNER_TID
 = 0,

261 
	mF_OWNER_PID
,

262 
	mF_OWNER_PGRP
,

263 
	mF_OWNER_GID
 = 
F_OWNER_PGRP


267 
	sf_ow√r_ex


269 
__pid_ty≥
 
	mty≥
;

270 
__pid_t
 
	mpid
;

276 #ifdef 
__USE_MISC


277 
	#FAPPEND
 
O_APPEND


	)

278 
	#FFSYNC
 
O_FSYNC


	)

279 
	#FASYNC
 
O_ASYNC


	)

280 
	#FNONBLOCK
 
O_NONBLOCK


	)

281 
	#FNDELAY
 
O_NDELAY


	)

284 #i‚de‡
__POSIX_FADV_DONTNEED


285 
	#__POSIX_FADV_DONTNEED
 4

	)

286 
	#__POSIX_FADV_NOREUSE
 5

	)

289 #ifde‡
__USE_XOPEN2K


290 
	#POSIX_FADV_NORMAL
 0

	)

291 
	#POSIX_FADV_RANDOM
 1

	)

292 
	#POSIX_FADV_SEQUENTIAL
 2

	)

293 
	#POSIX_FADV_WILLNEED
 3

	)

294 
	#POSIX_FADV_DONTNEED
 
__POSIX_FADV_DONTNEED


	)

295 
	#POSIX_FADV_NOREUSE
 
__POSIX_FADV_NOREUSE


	)

299 #ifde‡
__USE_GNU


301 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

304 
	#SYNC_FILE_RANGE_WRITE
 2

	)

307 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

312 
	#SPLICE_F_MOVE
 1

	)

313 
	#SPLICE_F_NONBLOCK
 2

	)

316 
	#SPLICE_F_MORE
 4

	)

317 
	#SPLICE_F_GIFT
 8

	)

321 
	#FALLOC_FL_KEEP_SIZE
 1

	)

324 
	#FALLOC_FL_PUNCH_HOLE
 2

	)

325 
	#FALLOC_FL_COLLAPSE_RANGE
 8

	)

328 
	#FALLOC_FL_ZERO_RANGE
 16

	)

333 
	sfûe_h™dÀ


335 
	mh™dÀ_byãs
;

336 
	mh™dÀ_ty≥
;

338 
	mf_h™dÀ
[0];

342 
	#MAX_HANDLE_SZ
 128

	)

346 #ifde‡
__USE_ATFILE


347 
	#AT_FDCWD
 -100

	)

350 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

351 
	#AT_REMOVEDIR
 0x200

	)

353 
	#AT_SYMLINK_FOLLOW
 0x400

	)

354 #ifde‡
__USE_GNU


355 
	#AT_NO_AUTOMOUNT
 0x800

	)

357 
	#AT_EMPTY_PATH
 0x1000

	)

359 
	#AT_EACCESS
 0x200

	)

363 
	g__BEGIN_DECLS


365 #ifde‡
__USE_GNU


368 
ssize_t
 
	$ªadahód
 (
__fd
, 
__off64_t
 
__off£t
, 
size_t
 
__cou¡
)

369 
__THROW
;

376 
	`sync_fûe_ønge
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__cou¡
,

377 
__Êags
);

384 
ssize_t
 
	`vm•li˚
 (
__fdout
, c⁄° 
iovec
 *
__iov
,

385 
size_t
 
__cou¡
, 
__Êags
);

391 
ssize_t
 
	`•li˚
 (
__fdö
, 
__off64_t
 *
__offö
, 
__fdout
,

392 
__off64_t
 *
__offout
, 
size_t
 
__Àn
,

393 
__Êags
);

399 
ssize_t
 
	`ãe
 (
__fdö
, 
__fdout
, 
size_t
 
__Àn
,

400 
__Êags
);

406 #i‚de‡
__USE_FILE_OFFSET64


407 
	`ÁŒoˇã
 (
__fd
, 
__mode
, 
__off_t
 
__off£t
, __off_à
__Àn
);

409 #ifde‡
__REDIRECT


410 
	`__REDIRECT
 (
ÁŒoˇã
, (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

411 
__off64_t
 
__Àn
),

412 
ÁŒoˇã64
);

414 
	#ÁŒoˇã
 
ÁŒoˇã64


	)

417 #ifde‡
__USE_LARGEFILE64


418 
	`ÁŒoˇã64
 (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

419 
__off64_t
 
__Àn
);

424 
	$«me_to_h™dÀ_©
 (
__dfd
, c⁄° *
__«me
,

425 
fûe_h™dÀ
 *
__h™dÀ
, *
__m¡_id
,

426 
__Êags
Ë
__THROW
;

432 
	`›í_by_h™dÀ_©
 (
__mou¡dúfd
, 
fûe_h™dÀ
 *
__h™dÀ
,

433 
__Êags
);

437 
__END_DECLS


	@/usr/include/bits/libio-ldbl.h

19 #i‚de‡
_IO_STDIO_H


23 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

24 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/libm-simd-decl-stubs.h

19 #i‚de‡
_MATH_H


33 #i‚de‡
_BITS_LIBM_SIMD_DECL_STUBS_H


34 
	#_BITS_LIBM_SIMD_DECL_STUBS_H
 1

	)

36 
	#__DECL_SIMD_cos


	)

37 
	#__DECL_SIMD_cosf


	)

38 
	#__DECL_SIMD_co¶


	)

40 
	#__DECL_SIMD_sö


	)

41 
	#__DECL_SIMD_söf


	)

42 
	#__DECL_SIMD_söl


	)

44 
	#__DECL_SIMD_söcos


	)

45 
	#__DECL_SIMD_söcosf


	)

46 
	#__DECL_SIMD_söco¶


	)

48 
	#__DECL_SIMD_log


	)

49 
	#__DECL_SIMD_logf


	)

50 
	#__DECL_SIMD_logl


	)

52 
	#__DECL_SIMD_exp


	)

53 
	#__DECL_SIMD_expf


	)

54 
	#__DECL_SIMD_ex∂


	)

56 
	#__DECL_SIMD_pow


	)

57 
	#__DECL_SIMD_powf


	)

58 
	#__DECL_SIMD_powl


	)

	@/usr/include/bits/local_lim.h

24 #i‚de‡
NR_OPEN


25 
	#__undef_NR_OPEN


	)

27 #i‚de‡
LINK_MAX


28 
	#__undef_LINK_MAX


	)

30 #i‚de‡
OPEN_MAX


31 
	#__undef_OPEN_MAX


	)

33 #i‚de‡
ARG_MAX


34 
	#__undef_ARG_MAX


	)

38 
	~<löux/limôs.h
>

41 #ifde‡
__undef_NR_OPEN


42 #unde‡
NR_OPEN


43 #unde‡
__undef_NR_OPEN


46 #ifde‡
__undef_LINK_MAX


47 #unde‡
LINK_MAX


48 #unde‡
__undef_LINK_MAX


51 #ifde‡
__undef_OPEN_MAX


52 #unde‡
OPEN_MAX


53 #unde‡
__undef_OPEN_MAX


56 #ifde‡
__undef_ARG_MAX


57 #unde‡
ARG_MAX


58 #unde‡
__undef_ARG_MAX


62 
	#_POSIX_THREAD_KEYS_MAX
 128

	)

64 
	#PTHREAD_KEYS_MAX
 1024

	)

67 
	#_POSIX_THREAD_DESTRUCTOR_ITERATIONS
 4

	)

69 
	#PTHREAD_DESTRUCTOR_ITERATIONS
 
_POSIX_THREAD_DESTRUCTOR_ITERATIONS


	)

72 
	#_POSIX_THREAD_THREADS_MAX
 64

	)

74 #unde‡
PTHREAD_THREADS_MAX


78 
	#AIO_PRIO_DELTA_MAX
 20

	)

81 
	#PTHREAD_STACK_MIN
 16384

	)

84 
	#DELAYTIMER_MAX
 2147483647

	)

87 
	#TTY_NAME_MAX
 32

	)

90 
	#LOGIN_NAME_MAX
 256

	)

93 
	#HOST_NAME_MAX
 64

	)

96 
	#MQ_PRIO_MAX
 32768

	)

99 
	#SEM_VALUE_MAX
 (2147483647)

	)

	@/usr/include/bits/sched.h

20 #i‚de‡
__√ed_sched∑øm


22 #i‚de‡
_SCHED_H


28 
	#SCHED_OTHER
 0

	)

29 
	#SCHED_FIFO
 1

	)

30 
	#SCHED_RR
 2

	)

31 #ifde‡
__USE_GNU


32 
	#SCHED_BATCH
 3

	)

33 
	#SCHED_IDLE
 5

	)

35 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

38 #ifde‡
__USE_GNU


40 
	#CSIGNAL
 0x000000f‡

	)

41 
	#CLONE_VM
 0x00000100

	)

42 
	#CLONE_FS
 0x00000200

	)

43 
	#CLONE_FILES
 0x00000400

	)

44 
	#CLONE_SIGHAND
 0x00000800

	)

45 
	#CLONE_PTRACE
 0x00002000

	)

46 
	#CLONE_VFORK
 0x00004000

	)

48 
	#CLONE_PARENT
 0x00008000

	)

50 
	#CLONE_THREAD
 0x00010000

	)

51 
	#CLONE_NEWNS
 0x00020000

	)

52 
	#CLONE_SYSVSEM
 0x00040000

	)

53 
	#CLONE_SETTLS
 0x00080000

	)

54 
	#CLONE_PARENT_SETTID
 0x00100000

	)

56 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

58 
	#CLONE_DETACHED
 0x00400000

	)

59 
	#CLONE_UNTRACED
 0x00800000

	)

61 
	#CLONE_CHILD_SETTID
 0x01000000

	)

63 
	#CLONE_NEWUTS
 0x04000000

	)

64 
	#CLONE_NEWIPC
 0x08000000

	)

65 
	#CLONE_NEWUSER
 0x10000000

	)

66 
	#CLONE_NEWPID
 0x20000000

	)

67 
	#CLONE_NEWNET
 0x40000000

	)

68 
	#CLONE_IO
 0x80000000

	)

72 
	ssched_∑øm


74 
	m__sched_¥i‹ôy
;

77 
	g__BEGIN_DECLS


79 #ifde‡
__USE_GNU


81 
	$˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

82 
__Êags
, *
__¨g
, ...Ë
__THROW
;

85 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

88 
	$sched_gë˝u
 (Ë
__THROW
;

91 
	$£äs
 (
__fd
, 
__n°y≥
Ë
__THROW
;

95 
__END_DECLS


99 #i‡!
deföed
 
__deföed_sched∑øm
 \

100 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

101 
	#__deföed_sched∑øm
 1

	)

103 
	s__sched_∑øm


105 
__sched_¥i‹ôy
;

107 #unde‡
__√ed_sched∑øm


111 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


112 
	#__˝u_£t_t_deföed


	)

114 
	#__CPU_SETSIZE
 1024

	)

115 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

118 
__CPU_MASK_TYPE
 
	t__˝u_mask
;

121 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

122 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

127 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

128 } 
	t˝u_£t_t
;

131 #i‡
	`__GNUC_PREREQ
 (2, 91)

132 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

133 dÿ
	`__buûtö_mem£t
 (
˝u£ç
, '\0', 
£tsize
); 0)

	)

135 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

137 
size_t
 
__i
; \

138 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

139 
__˝u_mask
 *
__bôs
 = (
˝u£ç
)->__bits; \

140 
__i
 = 0; __ò< 
__imax
; ++__i) \

141 
__bôs
[
__i
] = 0; \

142 
	}
} 0)

	)

144 
	#__CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

145 (
__exãnsi⁄__
 \

146 ({ 
size_t
 
__˝u
 = (
˝u
); \

147 
__˝u
 / 8 < (
£tsize
) \

148 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

149 |
	`__CPUMASK
 (
__˝u
)) \

150 : 0; }))

	)

151 
	#__CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

152 (
__exãnsi⁄__
 \

153 ({ 
size_t
 
__˝u
 = (
˝u
); \

154 
__˝u
 / 8 < (
£tsize
) \

155 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

156 &~
	`__CPUMASK
 (
__˝u
)) \

157 : 0; }))

	)

158 
	#__CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

159 (
__exãnsi⁄__
 \

160 ({ 
size_t
 
__˝u
 = (
˝u
); \

161 
__˝u
 / 8 < (
£tsize
) \

162 ? ((((c⁄° 
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

163 & 
	`__CPUMASK
 (
__˝u
))) != 0 \

164 : 0; }))

	)

166 
	#__CPU_COUNT_S
(
£tsize
, 
˝u£ç
) \

167 
	`__sched_˝ucou¡
 (
£tsize
, 
˝u£ç
)

	)

169 #i‡
__GNUC_PREREQ
 (2, 91)

170 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

171 (
	`__buûtö_memcmp
 (
˝u£ç1
, 
˝u£ç2
, 
£tsize
Ë=0)

	)

173 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

174 (
__exãnsi⁄__
 \

175 ({ c⁄° 
__˝u_mask
 *
__¨r1
 = (
˝u£ç1
)->
__bôs
; \

176 c⁄° 
__˝u_mask
 *
__¨r2
 = (
˝u£ç2
)->
__bôs
; \

177 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

178 
size_t
 
__i
; \

179 
__i
 = 0; __ò< 
__imax
; ++__i) \

180 i‡(
__¨r1
[
__i
] !
__¨r2
[__i]) \

182 
__i
 =
__imax
; }))

	)

185 
	#__CPU_OP_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, 
›
) \

186 (
__exãnsi⁄__
 \

187 ({ 
˝u_£t_t
 *
__de°
 = (
de°£t
); \

188 c⁄° 
__˝u_mask
 *
__¨r1
 = (
§c£t1
)->
__bôs
; \

189 c⁄° 
__˝u_mask
 *
__¨r2
 = (
§c£t2
)->
__bôs
; \

190 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

191 
size_t
 
__i
; \

192 
__i
 = 0; __ò< 
__imax
; ++__i) \

193 ((
__˝u_mask
 *Ë
__de°
->
__bôs
)[
__i
] = 
__¨r1
[__i] 
›
 
__¨r2
[__i]; \

194 
__de°
; }))

	)

196 
	#__CPU_ALLOC_SIZE
(
cou¡
) \

197 ((((
cou¡
Ë+ 
__NCPUBITS
 - 1Ë/ __NCPUBITSË*  (
__˝u_mask
))

	)

198 
	#__CPU_ALLOC
(
cou¡
Ë
	`__sched_˝uÆloc
 (cou¡)

	)

199 
	#__CPU_FREE
(
˝u£t
Ë
	`__sched_˝u‰ì
 (˝u£t)

	)

201 
__BEGIN_DECLS


203 
	$__sched_˝ucou¡
 (
size_t
 
__£tsize
, c⁄° 
˝u_£t_t
 *
__£ç
)

204 
__THROW
;

205 
˝u_£t_t
 *
	$__sched_˝uÆloc
 (
size_t
 
__cou¡
Ë
__THROW
 
__wur
;

206 
	$__sched_˝u‰ì
 (
˝u_£t_t
 *
__£t
Ë
__THROW
;

208 
__END_DECLS


	@/usr/include/bits/sockaddr.h

23 #i‚de‡
_BITS_SOCKADDR_H


24 
	#_BITS_SOCKADDR_H
 1

	)

28 
	tß_Ámûy_t
;

34 
	#__SOCKADDR_COMMON
(
ß_¥efix
) \

35 
ß_Ámûy_t
 
ß_¥efix
##
Ámûy


	)

37 
	#__SOCKADDR_COMMON_SIZE
 ( ())

	)

40 
	#_SS_SIZE
 128

	)

	@/usr/include/bits/socket_type.h

19 #i‚de‡
_SYS_SOCKET_H


24 
	e__sockë_ty≥


26 
	mSOCK_STREAM
 = 1,

28 
	#SOCK_STREAM
 
SOCK_STREAM


	)

29 
	mSOCK_DGRAM
 = 2,

31 
	#SOCK_DGRAM
 
SOCK_DGRAM


	)

32 
	mSOCK_RAW
 = 3,

33 
	#SOCK_RAW
 
SOCK_RAW


	)

34 
	mSOCK_RDM
 = 4,

35 
	#SOCK_RDM
 
SOCK_RDM


	)

36 
	mSOCK_SEQPACKET
 = 5,

38 
	#SOCK_SEQPACKET
 
SOCK_SEQPACKET


	)

39 
	mSOCK_DCCP
 = 6,

40 
	#SOCK_DCCP
 
SOCK_DCCP


	)

41 
	mSOCK_PACKET
 = 10,

44 
	#SOCK_PACKET
 
SOCK_PACKET


	)

49 
	mSOCK_CLOEXEC
 = 02000000,

51 
	#SOCK_CLOEXEC
 
SOCK_CLOEXEC


	)

52 
	mSOCK_NONBLOCK
 = 00004000

54 
	#SOCK_NONBLOCK
 
SOCK_NONBLOCK


	)

	@/usr/include/bits/timex.h

18 #i‚def 
_BITS_TIMEX_H


19 
	#_BITS_TIMEX_H
 1

	)

21 
	~<bôs/ty≥s.h
>

25 
	stimex


27 
	mmodes
;

28 
__sysˇŒ_¶⁄g_t
 
	moff£t
;

29 
__sysˇŒ_¶⁄g_t
 
	m‰eq
;

30 
__sysˇŒ_¶⁄g_t
 
	mmaxîr‹
;

31 
__sysˇŒ_¶⁄g_t
 
	me°îr‹
;

32 
	m°©us
;

33 
__sysˇŒ_¶⁄g_t
 
	mc⁄°™t
;

34 
__sysˇŒ_¶⁄g_t
 
	m¥ecisi⁄
;

35 
__sysˇŒ_¶⁄g_t
 
	mtﬁî™˚
;

36 
timevÆ
 
	mtime
;

37 
__sysˇŒ_¶⁄g_t
 
	mtick
;

38 
__sysˇŒ_¶⁄g_t
 
	mµs‰eq
;

39 
__sysˇŒ_¶⁄g_t
 
	mjôãr
;

40 
	mshi·
;

41 
__sysˇŒ_¶⁄g_t
 
	m°abû
;

42 
__sysˇŒ_¶⁄g_t
 
	mjô˙t
;

43 
__sysˇŒ_¶⁄g_t
 
	mˇl˙t
;

44 
__sysˇŒ_¶⁄g_t
 
	mîr˙t
;

45 
__sysˇŒ_¶⁄g_t
 
	m°b˙t
;

47 
	mèi
;

56 
	#ADJ_OFFSET
 0x0001

	)

57 
	#ADJ_FREQUENCY
 0x0002

	)

58 
	#ADJ_MAXERROR
 0x0004

	)

59 
	#ADJ_ESTERROR
 0x0008

	)

60 
	#ADJ_STATUS
 0x0010

	)

61 
	#ADJ_TIMECONST
 0x0020

	)

62 
	#ADJ_TAI
 0x0080

	)

63 
	#ADJ_SETOFFSET
 0x0100

	)

64 
	#ADJ_MICRO
 0x1000

	)

65 
	#ADJ_NANO
 0x2000

	)

66 
	#ADJ_TICK
 0x4000

	)

67 
	#ADJ_OFFSET_SINGLESHOT
 0x8001

	)

68 
	#ADJ_OFFSET_SS_READ
 0xa001

	)

71 
	#MOD_OFFSET
 
ADJ_OFFSET


	)

72 
	#MOD_FREQUENCY
 
ADJ_FREQUENCY


	)

73 
	#MOD_MAXERROR
 
ADJ_MAXERROR


	)

74 
	#MOD_ESTERROR
 
ADJ_ESTERROR


	)

75 
	#MOD_STATUS
 
ADJ_STATUS


	)

76 
	#MOD_TIMECONST
 
ADJ_TIMECONST


	)

77 
	#MOD_CLKB
 
ADJ_TICK


	)

78 
	#MOD_CLKA
 
ADJ_OFFSET_SINGLESHOT


	)

79 
	#MOD_TAI
 
ADJ_TAI


	)

80 
	#MOD_MICRO
 
ADJ_MICRO


	)

81 
	#MOD_NANO
 
ADJ_NANO


	)

85 
	#STA_PLL
 0x0001

	)

86 
	#STA_PPSFREQ
 0x0002

	)

87 
	#STA_PPSTIME
 0x0004

	)

88 
	#STA_FLL
 0x0008

	)

90 
	#STA_INS
 0x0010

	)

91 
	#STA_DEL
 0x0020

	)

92 
	#STA_UNSYNC
 0x0040

	)

93 
	#STA_FREQHOLD
 0x0080

	)

95 
	#STA_PPSSIGNAL
 0x0100

	)

96 
	#STA_PPSJITTER
 0x0200

	)

97 
	#STA_PPSWANDER
 0x0400

	)

98 
	#STA_PPSERROR
 0x0800

	)

100 
	#STA_CLOCKERR
 0x1000

	)

101 
	#STA_NANO
 0x2000

	)

102 
	#STA_MODE
 0x4000

	)

103 
	#STA_CLK
 0x8000

	)

106 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 | \

107 
STA_PPSERROR
 | 
STA_CLOCKERR
 | 
STA_NANO
 | 
STA_MODE
 | 
STA_CLK
)

	)

	@/usr/include/bits/typesizes.h

19 #i‚de‡
_BITS_TYPES_H


23 #i‚def 
_BITS_TYPESIZES_H


24 
	#_BITS_TYPESIZES_H
 1

	)

30 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


31 
	#__SYSCALL_SLONG_TYPE
 
__SQUAD_TYPE


	)

32 
	#__SYSCALL_ULONG_TYPE
 
__UQUAD_TYPE


	)

34 
	#__SYSCALL_SLONG_TYPE
 
__SLONGWORD_TYPE


	)

35 
	#__SYSCALL_ULONG_TYPE
 
__ULONGWORD_TYPE


	)

38 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

39 
	#__UID_T_TYPE
 
__U32_TYPE


	)

40 
	#__GID_T_TYPE
 
__U32_TYPE


	)

41 
	#__INO_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

42 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

43 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

44 #ifde‡
__x86_64__


45 
	#__NLINK_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

46 
	#__FSWORD_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

48 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

49 
	#__FSWORD_T_TYPE
 
__SWORD_TYPE


	)

51 
	#__OFF_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

52 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

53 
	#__PID_T_TYPE
 
__S32_TYPE


	)

54 
	#__RLIM_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

55 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

56 
	#__BLKCNT_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

57 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

58 
	#__FSBLKCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

59 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

60 
	#__FSFILCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

61 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

62 
	#__ID_T_TYPE
 
__U32_TYPE


	)

63 
	#__CLOCK_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

64 
	#__TIME_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

65 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

66 
	#__SUSECONDS_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

67 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

68 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

69 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

70 
	#__TIMER_T_TYPE
 *

	)

71 
	#__BLKSIZE_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

72 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

73 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

74 
	#__CPU_MASK_TYPE
 
__SYSCALL_ULONG_TYPE


	)

76 #ifde‡
__x86_64__


80 
	#__OFF_T_MATCHES_OFF64_T
 1

	)

83 
	#__INO_T_MATCHES_INO64_T
 1

	)

87 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/uio.h

18 #i‡!
deföed
 
_SYS_UIO_H
 && !deföed 
_FCNTL_H


22 #i‚de‡
_BITS_UIO_H


23 
	#_BITS_UIO_H
 1

	)

25 
	~<sys/ty≥s.h
>

39 
	#UIO_MAXIOV
 1024

	)

43 
	siovec


45 *
	miov_ba£
;

46 
size_t
 
	miov_Àn
;

52 #ifde‡
__USE_GNU


53 #i‡
deföed
 
_SYS_UIO_H
 && !deföed 
_BITS_UIO_H_FOR_SYS_UIO_H


54 
	#_BITS_UIO_H_FOR_SYS_UIO_H
 1

	)

56 
__BEGIN_DECLS


59 
ssize_t
 
	$¥o˚ss_vm_ªadv
 (
pid_t
 
__pid
, c⁄° 
iovec
 *
__lvec
,

60 
__liov˙t
,

61 c⁄° 
iovec
 *
__rvec
,

62 
__riov˙t
,

63 
__Êags
)

64 
__THROW
;

67 
ssize_t
 
	$¥o˚ss_vm_wrôev
 (
pid_t
 
__pid
, c⁄° 
iovec
 *
__lvec
,

68 
__liov˙t
,

69 c⁄° 
iovec
 *
__rvec
,

70 
__riov˙t
,

71 
__Êags
)

72 
__THROW
;

74 
__END_DECLS


	@/usr/include/gnu/stubs.h

6 #i‡!
deföed
 
__x86_64__


7 
	~<gnu/°ubs-32.h
>

9 #i‡
deföed
 
__x86_64__
 && deföed 
__LP64__


10 
	~<gnu/°ubs-64.h
>

12 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


13 
	~<gnu/°ubs-x32.h
>

	@/usr/include/linux/errno.h

1 
	~<asm/î∫o.h
>

	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 65536

	)

7 
	#ARG_MAX
 131072

	)

8 
	#LINK_MAX
 127

	)

9 
	#MAX_CANON
 255

	)

10 
	#MAX_INPUT
 255

	)

11 
	#NAME_MAX
 255

	)

12 
	#PATH_MAX
 4096

	)

13 
	#PIPE_BUF
 4096

	)

14 
	#XATTR_NAME_MAX
 255

	)

15 
	#XATTR_SIZE_MAX
 65536

	)

16 
	#XATTR_LIST_MAX
 65536

	)

18 
	#RTSIG_MAX
 32

	)

	@/usr/include/linux/param.h

1 #i‚de‡
_LINUX_PARAM_H


2 
	#_LINUX_PARAM_H


	)

4 
	~<asm/∑øm.h
>

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__FD_SETSIZE


22 
	#__FD_SETSIZE
 1024

	)

25 
	mfds_bôs
[
__FD_SETSIZE
 / (8 * ())];

26 } 
	t__kî√l_fd_£t
;

29 (*
	t__kî√l_sigh™dÀr_t
)();

32 
	t__kî√l_key_t
;

33 
	t__kî√l_mqd_t
;

35 
	~<asm/posix_ty≥s.h
>

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

55 
	#__STDC_ISO_10646__
 201505L

	)

58 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/sys/cdefs.h

18 #i‚def 
_SYS_CDEFS_H


19 
	#_SYS_CDEFS_H
 1

	)

22 #i‚de‡
_FEATURES_H


23 
	~<„©uªs.h
>

29 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


34 #unde‡
__P


35 #unde‡
__PMT


37 #ifde‡
__GNUC__


41 #i‡
__GNUC_PREREQ
 (4, 6Ë&& !
deföed
 
_LIBC


42 
	#__LEAF
 , 
__Àaf__


	)

43 
	#__LEAF_ATTR
 
	`__©åibuã__
 ((
__Àaf__
))

	)

45 
	#__LEAF


	)

46 
	#__LEAF_ATTR


	)

54 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

55 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
))

	)

56 
	#__THROWNL
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

57 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
)Ë
	)
fct

59 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

60 
	#__THROW
 
	`throw
 ()

	)

61 
	#__THROWNL
 
	`throw
 ()

	)

62 
	#__NTH
(
f˘
Ë
__LEAF_ATTR
 f˘ 
	`throw
 ()

	)

64 
	#__THROW


	)

65 
	#__THROWNL


	)

66 
	#__NTH
(
f˘
Ë
	)
fct

72 
	#__ölöe


	)

74 
	#__THROW


	)

75 
	#__THROWNL


	)

76 
	#__NTH
(
f˘
Ë
	)
fct

82 
	#__P
(
¨gs
Ë
	)
args

83 
	#__PMT
(
¨gs
Ë
	)
args

88 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

89 
	#__STRING
(
x
Ë#x

	)

92 
	#__±r_t
 *

	)

93 
	#__l⁄g_doubÀ_t
 

	)

97 #ifdef 
__˝lu•lus


98 
	#__BEGIN_DECLS
 "C" {

	)

99 
	#__END_DECLS
 }

	)

101 
	#__BEGIN_DECLS


	)

102 
	#__END_DECLS


	)

111 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


112 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

113 
	#__END_NAMESPACE_STD
 }

	)

114 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

115 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

116 
	#__END_NAMESPACE_C99
 }

	)

117 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

122 
	#__BEGIN_NAMESPACE_STD


	)

123 
	#__END_NAMESPACE_STD


	)

124 
	#__USING_NAMESPACE_STD
(
«me
)

	)

125 
	#__BEGIN_NAMESPACE_C99


	)

126 
	#__END_NAMESPACE_C99


	)

127 
	#__USING_NAMESPACE_C99
(
«me
)

	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

135 #i‡
__GNUC_PREREQ
 (4,3)

136 
	#__w¨nde˛
(
«me
, 
msg
) \

137 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

138 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

139 
	#__îr‹de˛
(
«me
, 
msg
) \

140 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

142 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

143 
	#__w¨«âr
(
msg
)

	)

144 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

148 #i‡
__GNUC_PREREQ
 (2,97)

150 
	#__Êex¨r
 []

	)

152 #ifde‡
__GNUC__


153 
	#__Êex¨r
 [0]

	)

155 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

156 
	#__Êex¨r
 []

	)

159 
	#__Êex¨r
 [1]

	)

175 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

177 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

178 #ifde‡
__˝lu•lus


179 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

180 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

181 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

182 
«me
 
¥Ÿo
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

184 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

185 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

186 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

187 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROWNL


	)

189 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

190 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

203 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

204 
	#__©åibuã__
(
xyz
Ë

	)

210 #i‡
__GNUC_PREREQ
 (2,96)

211 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

213 
	#__©åibuã_mÆloc__


	)

218 #i‡
__GNUC_PREREQ
 (4, 3)

219 
	#__©åibuã_Æloc_size__
(
∑øms
) \

220 
	`__©åibuã__
 ((
__Æloc_size__
 
∑øms
))

	)

222 
	#__©åibuã_Æloc_size__
(
∑øms
Ë

	)

228 #i‡
__GNUC_PREREQ
 (2,96)

229 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

231 
	#__©åibuã_puª__


	)

235 #i‡
__GNUC_PREREQ
 (2,5)

236 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
 ((
__c⁄°__
))

	)

238 
	#__©åibuã_c⁄°__


	)

244 #i‡
__GNUC_PREREQ
 (3,1)

245 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

246 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

248 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

249 
	#__©åibuã_noölöe__


	)

253 #i‡
__GNUC_PREREQ
 (3,2)

254 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

256 
	#__©åibuã_dïªˇãd__


	)

265 #i‡
__GNUC_PREREQ
 (2,8)

266 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

268 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

275 #i‡
__GNUC_PREREQ
 (2,97)

276 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

277 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

279 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

284 #i‡
__GNUC_PREREQ
 (3,3)

285 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

287 
	#__n⁄nuŒ
(
∑øms
)

	)

292 #i‡
__GNUC_PREREQ
 (3,4)

293 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

294 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

295 #i‡
__USE_FORTIFY_LEVEL
 > 0

296 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

299 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

301 #i‚de‡
__wur


302 
	#__wur


	)

306 #i‡
__GNUC_PREREQ
 (3,2)

307 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

309 
	#__Æways_ölöe
 
__ölöe


	)

314 #i‡
__GNUC_PREREQ
 (4,3)

315 
	#__©åibuã_¨tificül__
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

317 
	#__©åibuã_¨tificül__


	)

329 #i‡(!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3) \

330 || (
deföed
 
__˛™g__
 && (deföed 
__GNUC_STDC_INLINE__
 \

331 || 
deföed
 
__GNUC_GNU_INLINE__
)))

332 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


333 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

334 
	#__exã∫_Æways_ölöe
 \

335 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

337 
	#__exã∫_ölöe
 
__ölöe


	)

338 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

342 #ifde‡
__exã∫_Æways_ölöe


343 
	#__f‹tify_fun˘i⁄
 
__exã∫_Æways_ölöe
 
__©åibuã_¨tificül__


	)

348 #i‡
__GNUC_PREREQ
 (4,3)

349 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

350 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

357 #i‡!
__GNUC_PREREQ
 (2,8)

358 
	#__exãnsi⁄__


	)

362 #i‡!
__GNUC_PREREQ
 (2,92)

363 
	#__ª°ri˘


	)

369 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


370 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

372 #ifde‡
__GNUC__


373 
	#__ª°ri˘_¨r


	)

375 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

376 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

379 
	#__ª°ri˘_¨r


	)

384 #i‡
__GNUC__
 >= 3

385 
	#__glibc_u∆ikñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 0)

	)

386 
	#__glibc_likñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 1)

	)

388 
	#__glibc_u∆ikñy
(
c⁄d
Ë(c⁄d)

	)

389 
	#__glibc_likñy
(
c⁄d
Ë(c⁄d)

	)

392 #i‡(!
deföed
 
_N‹ëu∫
 \

393 && (
deföed
 
__STDC_VERSION__
 ? __STDC_VERSION__ : 0) < 201112 \

394 && !
	$__GNUC_PREREQ
 (4,7))

395 #i‡
	`__GNUC_PREREQ
 (2,8)

396 
	#_N‹ëu∫
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

	)

398 
	#_N‹ëu∫


	)

402 #i‡(!
deföed
 
_Sètic_as£π
 && !deföed 
__˝lu•lus
 \

403 && (
deföed
 
__STDC_VERSION__
 ? __STDC_VERSION__ : 0) < 201112 \

404 && (!
	`__GNUC_PREREQ
 (4, 6Ë|| 
deföed
 
__STRICT_ANSI__
))

405 
	#_Sètic_as£π
(
ex¥
, 
dügno°ic
) \

406 (*
	`__Sètic_as£π_fun˘i⁄
 ()) \

407 [!! (°ru˘ { 
__îr‹_if_√g©ive
: (
ex¥
Ë? 2 : -1; })]

	)

410 
	~<bôs/w‹dsize.h
>

412 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


413 
	#__LDBL_COMPAT
 1

	)

414 #ifde‡
__REDIRECT


415 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

416 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

417 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

418 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

419 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

420 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

421 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

422 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

423 
	#__LDBL_REDIR_DECL
(
«me
) \

424 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

425 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

426 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

427 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

428 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

431 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


432 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

433 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

434 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

435 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

436 
	#__LDBL_REDIR_DECL
(
«me
)

	)

437 #ifde‡
__REDIRECT


438 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

439 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

440 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/asm-generic/ioctl.h

1 #i‚de‡
_ASM_GENERIC_IOCTL_H


2 
	#_ASM_GENERIC_IOCTL_H


	)

22 
	#_IOC_NRBITS
 8

	)

23 
	#_IOC_TYPEBITS
 8

	)

30 #i‚de‡
_IOC_SIZEBITS


31 
	#_IOC_SIZEBITS
 14

	)

34 #i‚de‡
_IOC_DIRBITS


35 
	#_IOC_DIRBITS
 2

	)

38 
	#_IOC_NRMASK
 ((1 << 
_IOC_NRBITS
)-1)

	)

39 
	#_IOC_TYPEMASK
 ((1 << 
_IOC_TYPEBITS
)-1)

	)

40 
	#_IOC_SIZEMASK
 ((1 << 
_IOC_SIZEBITS
)-1)

	)

41 
	#_IOC_DIRMASK
 ((1 << 
_IOC_DIRBITS
)-1)

	)

43 
	#_IOC_NRSHIFT
 0

	)

44 
	#_IOC_TYPESHIFT
 (
_IOC_NRSHIFT
+
_IOC_NRBITS
)

	)

45 
	#_IOC_SIZESHIFT
 (
_IOC_TYPESHIFT
+
_IOC_TYPEBITS
)

	)

46 
	#_IOC_DIRSHIFT
 (
_IOC_SIZESHIFT
+
_IOC_SIZEBITS
)

	)

53 #i‚de‡
_IOC_NONE


54 
	#_IOC_NONE
 0U

	)

57 #i‚de‡
_IOC_WRITE


58 
	#_IOC_WRITE
 1U

	)

61 #i‚de‡
_IOC_READ


62 
	#_IOC_READ
 2U

	)

65 
	#_IOC
(
dú
,
ty≥
,
ƒ
,
size
) \

66 (((
dú
Ë<< 
_IOC_DIRSHIFT
) | \

67 ((
ty≥
Ë<< 
_IOC_TYPESHIFT
) | \

68 ((
ƒ
Ë<< 
_IOC_NRSHIFT
) | \

69 ((
size
Ë<< 
_IOC_SIZESHIFT
))

	)

71 
	#_IOC_TYPECHECK
(
t
Ë(—))

	)

74 
	#_IO
(
ty≥
,
ƒ
Ë
	`_IOC
(
_IOC_NONE
,—y≥),“r),0)

	)

75 
	#_IOR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

76 
	#_IOW
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

77 
	#_IOWR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

78 
	#_IOR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(size))

	)

79 
	#_IOW_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(size))

	)

80 
	#_IOWR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(size))

	)

83 
	#_IOC_DIR
(
ƒ
Ë((“rË>> 
_IOC_DIRSHIFT
Ë& 
_IOC_DIRMASK
)

	)

84 
	#_IOC_TYPE
(
ƒ
Ë((“rË>> 
_IOC_TYPESHIFT
Ë& 
_IOC_TYPEMASK
)

	)

85 
	#_IOC_NR
(
ƒ
Ë((“rË>> 
_IOC_NRSHIFT
Ë& 
_IOC_NRMASK
)

	)

86 
	#_IOC_SIZE
(
ƒ
Ë((“rË>> 
_IOC_SIZESHIFT
Ë& 
_IOC_SIZEMASK
)

	)

90 
	#IOC_IN
 (
_IOC_WRITE
 << 
_IOC_DIRSHIFT
)

	)

91 
	#IOC_OUT
 (
_IOC_READ
 << 
_IOC_DIRSHIFT
)

	)

92 
	#IOC_INOUT
 ((
_IOC_WRITE
|
_IOC_READ
Ë<< 
_IOC_DIRSHIFT
)

	)

93 
	#IOCSIZE_MASK
 (
_IOC_SIZEMASK
 << 
_IOC_SIZESHIFT
)

	)

94 
	#IOCSIZE_SHIFT
 (
_IOC_SIZESHIFT
)

	)

	@/usr/include/asm-generic/ioctls.h

1 #i‚de‡
__ASM_GENERIC_IOCTLS_H


2 
	#__ASM_GENERIC_IOCTLS_H


	)

4 
	~<löux/io˘l.h
>

19 
	#TCGETS
 0x5401

	)

20 
	#TCSETS
 0x5402

	)

21 
	#TCSETSW
 0x5403

	)

22 
	#TCSETSF
 0x5404

	)

23 
	#TCGETA
 0x5405

	)

24 
	#TCSETA
 0x5406

	)

25 
	#TCSETAW
 0x5407

	)

26 
	#TCSETAF
 0x5408

	)

27 
	#TCSBRK
 0x5409

	)

28 
	#TCXONC
 0x540A

	)

29 
	#TCFLSH
 0x540B

	)

30 
	#TIOCEXCL
 0x540C

	)

31 
	#TIOCNXCL
 0x540D

	)

32 
	#TIOCSCTTY
 0x540E

	)

33 
	#TIOCGPGRP
 0x540F

	)

34 
	#TIOCSPGRP
 0x5410

	)

35 
	#TIOCOUTQ
 0x5411

	)

36 
	#TIOCSTI
 0x5412

	)

37 
	#TIOCGWINSZ
 0x5413

	)

38 
	#TIOCSWINSZ
 0x5414

	)

39 
	#TIOCMGET
 0x5415

	)

40 
	#TIOCMBIS
 0x5416

	)

41 
	#TIOCMBIC
 0x5417

	)

42 
	#TIOCMSET
 0x5418

	)

43 
	#TIOCGSOFTCAR
 0x5419

	)

44 
	#TIOCSSOFTCAR
 0x541A

	)

45 
	#FIONREAD
 0x541B

	)

46 
	#TIOCINQ
 
FIONREAD


	)

47 
	#TIOCLINUX
 0x541C

	)

48 
	#TIOCCONS
 0x541D

	)

49 
	#TIOCGSERIAL
 0x541E

	)

50 
	#TIOCSSERIAL
 0x541F

	)

51 
	#TIOCPKT
 0x5420

	)

52 
	#FIONBIO
 0x5421

	)

53 
	#TIOCNOTTY
 0x5422

	)

54 
	#TIOCSETD
 0x5423

	)

55 
	#TIOCGETD
 0x5424

	)

56 
	#TCSBRKP
 0x5425

	)

57 
	#TIOCSBRK
 0x5427

	)

58 
	#TIOCCBRK
 0x5428

	)

59 
	#TIOCGSID
 0x5429

	)

60 
	#TCGETS2
 
	`_IOR
('T', 0x2A, 
ãrmios2
)

	)

61 
	#TCSETS2
 
	`_IOW
('T', 0x2B, 
ãrmios2
)

	)

62 
	#TCSETSW2
 
	`_IOW
('T', 0x2C, 
ãrmios2
)

	)

63 
	#TCSETSF2
 
	`_IOW
('T', 0x2D, 
ãrmios2
)

	)

64 
	#TIOCGRS485
 0x542E

	)

65 #i‚de‡
TIOCSRS485


66 
	#TIOCSRS485
 0x542F

	)

68 
	#TIOCGPTN
 
	`_IOR
('T', 0x30, Ë

	)

69 
	#TIOCSPTLCK
 
	`_IOW
('T', 0x31, Ë

	)

70 
	#TIOCGDEV
 
	`_IOR
('T', 0x32, Ë

	)

71 
	#TCGETX
 0x5432

	)

72 
	#TCSETX
 0x5433

	)

73 
	#TCSETXF
 0x5434

	)

74 
	#TCSETXW
 0x5435

	)

75 
	#TIOCSIG
 
	`_IOW
('T', 0x36, Ë

	)

76 
	#TIOCVHANGUP
 0x5437

	)

77 
	#TIOCGPKT
 
	`_IOR
('T', 0x38, Ë

	)

78 
	#TIOCGPTLCK
 
	`_IOR
('T', 0x39, Ë

	)

79 
	#TIOCGEXCL
 
	`_IOR
('T', 0x40, Ë

	)

81 
	#FIONCLEX
 0x5450

	)

82 
	#FIOCLEX
 0x5451

	)

83 
	#FIOASYNC
 0x5452

	)

84 
	#TIOCSERCONFIG
 0x5453

	)

85 
	#TIOCSERGWILD
 0x5454

	)

86 
	#TIOCSERSWILD
 0x5455

	)

87 
	#TIOCGLCKTRMIOS
 0x5456

	)

88 
	#TIOCSLCKTRMIOS
 0x5457

	)

89 
	#TIOCSERGSTRUCT
 0x5458

	)

90 
	#TIOCSERGETLSR
 0x5459

	)

91 
	#TIOCSERGETMULTI
 0x545A

	)

92 
	#TIOCSERSETMULTI
 0x545B

	)

94 
	#TIOCMIWAIT
 0x545C

	)

95 
	#TIOCGICOUNT
 0x545D

	)

101 #i‚de‡
FIOQSIZE


102 
	#FIOQSIZE
 0x5460

	)

106 
	#TIOCPKT_DATA
 0

	)

107 
	#TIOCPKT_FLUSHREAD
 1

	)

108 
	#TIOCPKT_FLUSHWRITE
 2

	)

109 
	#TIOCPKT_STOP
 4

	)

110 
	#TIOCPKT_START
 8

	)

111 
	#TIOCPKT_NOSTOP
 16

	)

112 
	#TIOCPKT_DOSTOP
 32

	)

113 
	#TIOCPKT_IOCTL
 64

	)

115 
	#TIOCSER_TEMT
 0x01

	)

	@/usr/include/asm-generic/socket.h

1 #i‚de‡
__ASM_GENERIC_SOCKET_H


2 
	#__ASM_GENERIC_SOCKET_H


	)

4 
	~<asm/sockios.h
>

7 
	#SOL_SOCKET
 1

	)

9 
	#SO_DEBUG
 1

	)

10 
	#SO_REUSEADDR
 2

	)

11 
	#SO_TYPE
 3

	)

12 
	#SO_ERROR
 4

	)

13 
	#SO_DONTROUTE
 5

	)

14 
	#SO_BROADCAST
 6

	)

15 
	#SO_SNDBUF
 7

	)

16 
	#SO_RCVBUF
 8

	)

17 
	#SO_SNDBUFFORCE
 32

	)

18 
	#SO_RCVBUFFORCE
 33

	)

19 
	#SO_KEEPALIVE
 9

	)

20 
	#SO_OOBINLINE
 10

	)

21 
	#SO_NO_CHECK
 11

	)

22 
	#SO_PRIORITY
 12

	)

23 
	#SO_LINGER
 13

	)

24 
	#SO_BSDCOMPAT
 14

	)

25 
	#SO_REUSEPORT
 15

	)

26 #i‚de‡
SO_PASSCRED


27 
	#SO_PASSCRED
 16

	)

28 
	#SO_PEERCRED
 17

	)

29 
	#SO_RCVLOWAT
 18

	)

30 
	#SO_SNDLOWAT
 19

	)

31 
	#SO_RCVTIMEO
 20

	)

32 
	#SO_SNDTIMEO
 21

	)

36 
	#SO_SECURITY_AUTHENTICATION
 22

	)

37 
	#SO_SECURITY_ENCRYPTION_TRANSPORT
 23

	)

38 
	#SO_SECURITY_ENCRYPTION_NETWORK
 24

	)

40 
	#SO_BINDTODEVICE
 25

	)

43 
	#SO_ATTACH_FILTER
 26

	)

44 
	#SO_DETACH_FILTER
 27

	)

45 
	#SO_GET_FILTER
 
SO_ATTACH_FILTER


	)

47 
	#SO_PEERNAME
 28

	)

48 
	#SO_TIMESTAMP
 29

	)

49 
	#SCM_TIMESTAMP
 
SO_TIMESTAMP


	)

51 
	#SO_ACCEPTCONN
 30

	)

53 
	#SO_PEERSEC
 31

	)

54 
	#SO_PASSSEC
 34

	)

55 
	#SO_TIMESTAMPNS
 35

	)

56 
	#SCM_TIMESTAMPNS
 
SO_TIMESTAMPNS


	)

58 
	#SO_MARK
 36

	)

60 
	#SO_TIMESTAMPING
 37

	)

61 
	#SCM_TIMESTAMPING
 
SO_TIMESTAMPING


	)

63 
	#SO_PROTOCOL
 38

	)

64 
	#SO_DOMAIN
 39

	)

66 
	#SO_RXQ_OVFL
 40

	)

68 
	#SO_WIFI_STATUS
 41

	)

69 
	#SCM_WIFI_STATUS
 
SO_WIFI_STATUS


	)

70 
	#SO_PEEK_OFF
 42

	)

73 
	#SO_NOFCS
 43

	)

75 
	#SO_LOCK_FILTER
 44

	)

77 
	#SO_SELECT_ERR_QUEUE
 45

	)

79 
	#SO_BUSY_POLL
 46

	)

81 
	#SO_MAX_PACING_RATE
 47

	)

83 
	#SO_BPF_EXTENSIONS
 48

	)

85 
	#SO_INCOMING_CPU
 49

	)

87 
	#SO_ATTACH_BPF
 50

	)

88 
	#SO_DETACH_BPF
 
SO_DETACH_FILTER


	)

	@/usr/include/asm-generic/types.h

1 #i‚de‡
_ASM_GENERIC_TYPES_H


2 
	#_ASM_GENERIC_TYPES_H


	)

6 
	~<asm-gíîic/öt-Œ64.h
>

	@/usr/include/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/asm/param.h

1 
	~<asm-gíîic/∑øm.h
>

	@/usr/include/asm/posix_types.h

1 #ifde‡
__i386__


2 
	~<asm/posix_ty≥s_32.h
>

3 #ñi‡
deföed
(
__ILP32__
)

4 
	~<asm/posix_ty≥s_x32.h
>

6 
	~<asm/posix_ty≥s_64.h
>

	@/usr/include/gconv.h

22 #i‚de‡
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<„©uªs.h
>

26 
	#__√ed_mb°©e_t


	)

27 
	#__√ed_wöt_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004,

60 
	m__GCONV_TRANSLIT
 = 0x0008

65 
	g__gc⁄v_°ï
;

66 
	g__gc⁄v_°ï_d©a
;

67 
	g__gc⁄v_lﬂded_obje˘
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 
	s__gc⁄v_°ï


86 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

87 c⁄° *
__mod«me
;

89 
__cou¡î
;

91 *
__‰om_«me
;

92 *
__to_«me
;

94 
__gc⁄v_f˘
 
__f˘
;

95 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

96 
__gc⁄v_öô_f˘
 
__öô_f˘
;

97 
__gc⁄v_íd_f˘
 
__íd_f˘
;

101 
__mö_√eded_‰om
;

102 
__max_√eded_‰om
;

103 
__mö_√eded_to
;

104 
__max_√eded_to
;

107 
__°©eful
;

109 *
__d©a
;

114 
	s__gc⁄v_°ï_d©a


116 *
__outbuf
;

117 *
__outbu„nd
;

121 
__Êags
;

125 
__övoˇti⁄_cou¡î
;

129 
__öã∫Æ_u£
;

131 
__mb°©e_t
 *
__°©ï
;

132 
__mb°©e_t
 
__°©e
;

138 
	s__gc⁄v_öfo


140 
size_t
 
__n°ïs
;

141 
__gc⁄v_°ï
 *
__°ïs
;

142 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

143 } *
	t__gc⁄v_t
;

146 
	`__gc⁄v_å™¶ôî©e
 (
__gc⁄v_°ï
 *
°ï
,

147 
__gc⁄v_°ï_d©a
 *
°ï_d©a
,

148 c⁄° *
öbuf°¨t
,

149 c⁄° **
öbuÂ
,

150 c⁄° *
öbu„nd
,

151 **
outbuf°¨t
,

152 
size_t
 *
úªvîsibÀ
);

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_chÊags


	)

11 
	#__°ub_Áâach


	)

12 
	#__°ub_fchÊags


	)

13 
	#__°ub_fdëach


	)

14 
	#__°ub_gây


	)

15 
	#__°ub_lchmod


	)

16 
	#__°ub_ªvoke


	)

17 
	#__°ub_£éogö


	)

18 
	#__°ub_sigªtu∫


	)

19 
	#__°ub_s°k


	)

20 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___com∑t_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-x32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___com∑t_bdÊush


	)

11 
	#__°ub___com∑t_¸óã_moduÀ


	)

12 
	#__°ub___com∑t_gë_kî√l_syms


	)

13 
	#__°ub___com∑t_quîy_moduÀ


	)

14 
	#__°ub___com∑t_u£lib


	)

15 
	#__°ub_chÊags


	)

16 
	#__°ub_Áâach


	)

17 
	#__°ub_fchÊags


	)

18 
	#__°ub_fdëach


	)

19 
	#__°ub_gëmsg


	)

20 
	#__°ub_gây


	)

21 
	#__°ub_lchmod


	)

22 
	#__°ub_nfs£rv˘l


	)

23 
	#__°ub_putmsg


	)

24 
	#__°ub_ªvoke


	)

25 
	#__°ub_£éogö


	)

26 
	#__°ub_sigªtu∫


	)

27 
	#__°ub_s°k


	)

28 
	#__°ub_°ty


	)

	@/usr/include/linux/stddef.h

	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


25 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


26 
	#_WCHAR_H
 1

	)

27 
	~<„©uªs.h
>

30 #ifde‡
_WCHAR_H


32 
	#__√ed___FILE


	)

33 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_FILE


	)

36 
	~<°dio.h
>

38 
	#__√ed___va_li°


	)

39 
	~<°d¨g.h
>

41 
	~<bôs/wch¨.h
>

44 
	#__√ed_size_t


	)

45 
	#__√ed_wch¨_t


	)

46 
	#__√ed_NULL


	)

48 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


49 #unde‡
__√ed_wöt_t


50 
	#__√ed_wöt_t


	)

51 
	~<°ddef.h
>

55 #i‚de‡
_WINT_T


60 
	#_WINT_T


	)

61 
	twöt_t
;

65 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

66 && 
deföed
 
__WINT_TYPE__


67 
__BEGIN_NAMESPACE_STD


68 
__WINT_TYPE__
 
	twöt_t
;

69 
	g__END_NAMESPACE_STD


74 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

75 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

79 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
____mb°©e_t_deföed


80 
	#____mb°©e_t_deföed
 1

	)

84 
	m__cou¡
;

87 #ifde‡
__WINT_TYPE__


88 
__WINT_TYPE__
 
	m__wch
;

90 
wöt_t
 
	m__wch
;

92 
	m__wchb
[4];

93 } 
	m__vÆue
;

94 } 
	t__mb°©e_t
;

96 #unde‡
__√ed_mb°©e_t


101 #ifde‡
_WCHAR_H


103 #i‚de‡
__mb°©e_t_deföed


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 
	#__mb°©e_t_deföed
 1

	)

111 #ifde‡
__USE_GNU


112 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

115 #i‚de‡
WCHAR_MIN


117 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

118 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

121 #i‚de‡
WEOF


122 
	#WEOF
 (0xffffffffu)

	)

127 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


128 
	~<w˘y≥.h
>

132 
__BEGIN_DECLS


134 
__BEGIN_NAMESPACE_STD


137 
tm
;

138 
__END_NAMESPACE_STD


142 
	$__USING_NAMESPACE_STD
(
tm
)

145 
__BEGIN_NAMESPACE_STD


147 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
)

149 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

152 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

154 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

157 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

158 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
)

159 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

161 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

162 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

163 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

166 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

167 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

169 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

170 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

171 
__END_NAMESPACE_STD


173 #ifde‡
__USE_XOPEN2K8


175 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

178 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

179 
size_t
 
__n
Ë
__THROW
;

183 
	~<xloˇÀ.h
>

185 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

186 
__loˇÀ_t
 
__loc
Ë
__THROW
;

188 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

189 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

192 
__BEGIN_NAMESPACE_STD


195 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

199 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

200 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

201 
__END_NAMESPACE_STD


203 #ifde‡
__USE_XOPEN2K8


209 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

210 
__loˇÀ_t
 
__loc
Ë
__THROW
;

215 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

216 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

219 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

222 
__BEGIN_NAMESPACE_STD


224 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


225 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

226 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

227 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

228 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

230 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

231 
__THROW
 
__©åibuã_puª__
;

234 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


235 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

236 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

237 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

238 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

240 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

241 
__THROW
 
__©åibuã_puª__
;

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_GNU


248 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

249 
__THROW
 
__©åibuã_puª__
;

252 
__BEGIN_NAMESPACE_STD


255 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

256 
__THROW
 
__©åibuã_puª__
;

259 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

260 
__THROW
 
__©åibuã_puª__
;

262 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


263 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

265 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

266 c⁄° 
wch¨_t
 *
__ac˚±
)

267 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

269 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

270 
__THROW
 
__©åibuã_puª__
;

273 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


274 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

276 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

277 c⁄° 
wch¨_t
 *
__√edÀ
)

278 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

280 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

281 
__THROW
 
__©åibuã_puª__
;

285 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

286 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

287 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

290 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

291 
__END_NAMESPACE_STD


293 #ifde‡
__USE_XOPEN


295 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


296 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

298 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

299 c⁄° 
wch¨_t
 *
__√edÀ
)

300 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

302 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

303 
__THROW
 
__©åibuã_puª__
;

307 #ifde‡
__USE_XOPEN2K8


309 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

310 
__THROW
 
__©åibuã_puª__
;

314 
__BEGIN_NAMESPACE_STD


316 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


317 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

319 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

320 
size_t
 
__n
)

321 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

323 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

324 
__THROW
 
__©åibuã_puª__
;

328 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

329 
__THROW
 
__©åibuã_puª__
;

332 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

333 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

337 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

338 
__THROW
;

341 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

342 
__END_NAMESPACE_STD


344 #ifde‡
__USE_GNU


347 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

348 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

349 
__THROW
;

353 
__BEGIN_NAMESPACE_STD


356 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

360 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

364 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

368 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

369 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

370 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

373 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

374 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

377 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

378 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

379 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

380 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

381 
__END_NAMESPACE_STD


383 #ifde‡
__USE_EXTERN_INLINES


389 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

390 
__exã∫_ölöe
 
wöt_t


391 
	`__NTH
 (
	$btowc
 (
__c
))

392 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

393 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

395 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

396 
__exã∫_ölöe
 

397 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

398 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

399 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

401 
__exã∫_ölöe
 
size_t


402 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

403 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

404 {  (
__ps
 !
NULL


405 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

408 
__BEGIN_NAMESPACE_STD


411 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

412 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

413 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

417 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

418 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

419 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

420 
__END_NAMESPACE_STD


423 #ifdef 
__USE_XOPEN2K8


426 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

427 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

428 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

432 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

433 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

434 
size_t
 
__nwc
, size_à
__Àn
,

435 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

440 #ifde‡
__USE_XOPEN


442 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

446 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

450 
__BEGIN_NAMESPACE_STD


453 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

454 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

455 
__END_NAMESPACE_STD


457 #ifde‡
__USE_ISOC99


458 
__BEGIN_NAMESPACE_C99


460 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

461 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

462 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

463 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

464 
__END_NAMESPACE_C99


468 
__BEGIN_NAMESPACE_STD


471 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

472 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

476 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

477 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

478 
__THROW
;

479 
__END_NAMESPACE_STD


481 #ifde‡
__USE_ISOC99


482 
__BEGIN_NAMESPACE_C99


485 
__exãnsi⁄__


486 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

487 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

488 
__THROW
;

492 
__exãnsi⁄__


493 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

494 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

495 
__ba£
Ë
__THROW
;

496 
__END_NAMESPACE_C99


499 #ifde‡
__USE_GNU


502 
__exãnsi⁄__


503 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

504 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

505 
__THROW
;

509 
__exãnsi⁄__


510 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

511 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

512 
__ba£
Ë
__THROW
;

515 #ifde‡
__USE_GNU


529 
	~<xloˇÀ.h
>

533 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

534 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

535 
__loˇÀ_t
 
__loc
Ë
__THROW
;

537 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

538 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

539 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

541 
__exãnsi⁄__


542 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

543 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

544 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

546 
__exãnsi⁄__


547 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

548 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

549 
__ba£
, 
__loˇÀ_t
 
__loc
)

550 
__THROW
;

552 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

553 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

554 
__THROW
;

556 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

557 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

558 
__THROW
;

560 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

561 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

562 
__loˇÀ_t
 
__loc
Ë
__THROW
;

566 #ifde‡
__USE_XOPEN2K8


569 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

570 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

574 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

575 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

576 
__THROW
;

583 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

586 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


587 
__BEGIN_NAMESPACE_STD


590 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

597 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

598 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

607 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

608 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

609 
__THROW
 ;

615 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

616 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

617 
__gnuc_va_li°
 
__¨g
)

623 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

624 
__gnuc_va_li°
 
__¨g
)

628 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

629 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

630 
__gnuc_va_li°
 
__¨g
)

631 
__THROW
 ;

638 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

639 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

648 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

649 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

650 
__THROW
 ;

652 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

653 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

654 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

655 #ifde‡
__REDIRECT


659 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

660 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

661 
__isoc99_fwsˇnf
)

663 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

664 
__isoc99_wsˇnf
)

666 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

667 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

668 ...), 
__isoc99_swsˇnf
)

671 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

672 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

673 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

674 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

675 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

676 
__THROW
;

677 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

678 
	#wsˇnf
 
__isoc99_wsˇnf


	)

679 
	#swsˇnf
 
__isoc99_swsˇnf


	)

683 
__END_NAMESPACE_STD


686 #ifde‡
__USE_ISOC99


687 
__BEGIN_NAMESPACE_C99


692 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

693 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

694 
__gnuc_va_li°
 
__¨g
)

700 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

701 
__gnuc_va_li°
 
__¨g
)

704 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

705 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

706 
__gnuc_va_li°
 
__¨g
)

707 
__THROW
 ;

709 #i‡!
deföed
 
__USE_GNU
 \

710 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

711 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

712 #ifde‡
__REDIRECT


713 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

714 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

715 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

717 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

718 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

720 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

721 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

722 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

725 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

726 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

727 
__gnuc_va_li°
 
__¨g
);

728 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

729 
__gnuc_va_li°
 
__¨g
);

730 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

731 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

732 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

733 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

734 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

735 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

739 
__END_NAMESPACE_C99


743 
__BEGIN_NAMESPACE_STD


748 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

749 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

755 
wöt_t
 
	`gëwch¨
 ();

762 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

763 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

769 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

777 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

778 
__FILE
 *
__ª°ri˘
 
__°ªam
);

784 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

785 
__FILE
 *
__ª°ri˘
 
__°ªam
);

792 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

793 
__END_NAMESPACE_STD


796 #ifde‡
__USE_GNU


804 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

805 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

813 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

821 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

830 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

831 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

840 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

841 
__FILE
 *
__ª°ri˘
 
__°ªam
);

849 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

850 
__FILE
 *
__ª°ri˘
 
__°ªam
);

854 
__BEGIN_NAMESPACE_C99


858 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

859 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

860 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

861 
__END_NAMESPACE_C99


863 #ifde‡
__USE_GNU


864 
	~<xloˇÀ.h
>

868 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

869 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

870 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

871 
__loˇÀ_t
 
__loc
Ë
__THROW
;

880 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


881 
	#__√ed_iswxxx


	)

882 
	~<w˘y≥.h
>

886 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


887 
	~<bôs/wch¨2.h
>

890 #ifde‡
__LDBL_COMPAT


891 
	~<bôs/wch¨-ldbl.h
>

894 
__END_DECLS


902 #unde‡
__√ed_mb°©e_t


903 #unde‡
__√ed_wöt_t


	@/usr/include/asm-generic/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

17 
	#ENOSYS
 38

	)

19 
	#ENOTEMPTY
 39

	)

20 
	#ELOOP
 40

	)

21 
	#EWOULDBLOCK
 
EAGAIN


	)

22 
	#ENOMSG
 42

	)

23 
	#EIDRM
 43

	)

24 
	#ECHRNG
 44

	)

25 
	#EL2NSYNC
 45

	)

26 
	#EL3HLT
 46

	)

27 
	#EL3RST
 47

	)

28 
	#ELNRNG
 48

	)

29 
	#EUNATCH
 49

	)

30 
	#ENOCSI
 50

	)

31 
	#EL2HLT
 51

	)

32 
	#EBADE
 52

	)

33 
	#EBADR
 53

	)

34 
	#EXFULL
 54

	)

35 
	#ENOANO
 55

	)

36 
	#EBADRQC
 56

	)

37 
	#EBADSLT
 57

	)

39 
	#EDEADLOCK
 
EDEADLK


	)

41 
	#EBFONT
 59

	)

42 
	#ENOSTR
 60

	)

43 
	#ENODATA
 61

	)

44 
	#ETIME
 62

	)

45 
	#ENOSR
 63

	)

46 
	#ENONET
 64

	)

47 
	#ENOPKG
 65

	)

48 
	#EREMOTE
 66

	)

49 
	#ENOLINK
 67

	)

50 
	#EADV
 68

	)

51 
	#ESRMNT
 69

	)

52 
	#ECOMM
 70

	)

53 
	#EPROTO
 71

	)

54 
	#EMULTIHOP
 72

	)

55 
	#EDOTDOT
 73

	)

56 
	#EBADMSG
 74

	)

57 
	#EOVERFLOW
 75

	)

58 
	#ENOTUNIQ
 76

	)

59 
	#EBADFD
 77

	)

60 
	#EREMCHG
 78

	)

61 
	#ELIBACC
 79

	)

62 
	#ELIBBAD
 80

	)

63 
	#ELIBSCN
 81

	)

64 
	#ELIBMAX
 82

	)

65 
	#ELIBEXEC
 83

	)

66 
	#EILSEQ
 84

	)

67 
	#ERESTART
 85

	)

68 
	#ESTRPIPE
 86

	)

69 
	#EUSERS
 87

	)

70 
	#ENOTSOCK
 88

	)

71 
	#EDESTADDRREQ
 89

	)

72 
	#EMSGSIZE
 90

	)

73 
	#EPROTOTYPE
 91

	)

74 
	#ENOPROTOOPT
 92

	)

75 
	#EPROTONOSUPPORT
 93

	)

76 
	#ESOCKTNOSUPPORT
 94

	)

77 
	#EOPNOTSUPP
 95

	)

78 
	#EPFNOSUPPORT
 96

	)

79 
	#EAFNOSUPPORT
 97

	)

80 
	#EADDRINUSE
 98

	)

81 
	#EADDRNOTAVAIL
 99

	)

82 
	#ENETDOWN
 100

	)

83 
	#ENETUNREACH
 101

	)

84 
	#ENETRESET
 102

	)

85 
	#ECONNABORTED
 103

	)

86 
	#ECONNRESET
 104

	)

87 
	#ENOBUFS
 105

	)

88 
	#EISCONN
 106

	)

89 
	#ENOTCONN
 107

	)

90 
	#ESHUTDOWN
 108

	)

91 
	#ETOOMANYREFS
 109

	)

92 
	#ETIMEDOUT
 110

	)

93 
	#ECONNREFUSED
 111

	)

94 
	#EHOSTDOWN
 112

	)

95 
	#EHOSTUNREACH
 113

	)

96 
	#EALREADY
 114

	)

97 
	#EINPROGRESS
 115

	)

98 
	#ESTALE
 116

	)

99 
	#EUCLEAN
 117

	)

100 
	#ENOTNAM
 118

	)

101 
	#ENAVAIL
 119

	)

102 
	#EISNAM
 120

	)

103 
	#EREMOTEIO
 121

	)

104 
	#EDQUOT
 122

	)

106 
	#ENOMEDIUM
 123

	)

107 
	#EMEDIUMTYPE
 124

	)

108 
	#ECANCELED
 125

	)

109 
	#ENOKEY
 126

	)

110 
	#EKEYEXPIRED
 127

	)

111 
	#EKEYREVOKED
 128

	)

112 
	#EKEYREJECTED
 129

	)

115 
	#EOWNERDEAD
 130

	)

116 
	#ENOTRECOVERABLE
 131

	)

118 
	#ERFKILL
 132

	)

120 
	#EHWPOISON
 133

	)

	@/usr/include/asm-generic/int-ll64.h

8 #i‚de‡
_ASM_GENERIC_INT_LL64_H


9 
	#_ASM_GENERIC_INT_LL64_H


	)

11 
	~<asm/bô•îl⁄g.h
>

13 #i‚de‡
__ASSEMBLY__


19 
__sig√d__
 
	t__s8
;

20 
	t__u8
;

22 
__sig√d__
 
	t__s16
;

23 
	t__u16
;

25 
__sig√d__
 
	t__s32
;

26 
	t__u32
;

28 #ifde‡
__GNUC__


29 
__exãnsi⁄__
 
__sig√d__
 
	t__s64
;

30 
__exãnsi⁄__
 
	t__u64
;

32 
__sig√d__
 
	t__s64
;

33 
	t__u64
;

	@/usr/include/asm-generic/param.h

1 #i‚de‡
__ASM_GENERIC_PARAM_H


2 
	#__ASM_GENERIC_PARAM_H


	)

4 #i‚de‡
HZ


5 
	#HZ
 100

	)

8 #i‚de‡
EXEC_PAGESIZE


9 
	#EXEC_PAGESIZE
 4096

	)

12 #i‚de‡
NOGROUP


13 
	#NOGROUP
 (-1)

	)

16 
	#MAXHOSTNAMELEN
 64

	)

	@/usr/include/asm/posix_types_32.h

1 #i‚de‡
_ASM_X86_POSIX_TYPES_32_H


2 
	#_ASM_X86_POSIX_TYPES_32_H


	)

10 
	t__kî√l_mode_t
;

11 
	#__kî√l_mode_t
 
__kî√l_mode_t


	)

13 
	t__kî√l_ùc_pid_t
;

14 
	#__kî√l_ùc_pid_t
 
__kî√l_ùc_pid_t


	)

16 
	t__kî√l_uid_t
;

17 
	t__kî√l_gid_t
;

18 
	#__kî√l_uid_t
 
__kî√l_uid_t


	)

20 
	t__kî√l_ﬁd_dev_t
;

21 
	#__kî√l_ﬁd_dev_t
 
__kî√l_ﬁd_dev_t


	)

23 
	~<asm-gíîic/posix_ty≥s.h
>

	@/usr/include/asm/posix_types_64.h

1 #i‚de‡
_ASM_X86_POSIX_TYPES_64_H


2 
	#_ASM_X86_POSIX_TYPES_64_H


	)

10 
	t__kî√l_ﬁd_uid_t
;

11 
	t__kî√l_ﬁd_gid_t
;

12 
	#__kî√l_ﬁd_uid_t
 
__kî√l_ﬁd_uid_t


	)

14 
	t__kî√l_ﬁd_dev_t
;

15 
	#__kî√l_ﬁd_dev_t
 
__kî√l_ﬁd_dev_t


	)

17 
	~<asm-gíîic/posix_ty≥s.h
>

	@/usr/include/asm/posix_types_x32.h

1 #i‚de‡
_ASM_X86_POSIX_TYPES_X32_H


2 
	#_ASM_X86_POSIX_TYPES_X32_H


	)

13 
	t__kî√l_l⁄g_t
;

14 
	t__kî√l_ul⁄g_t
;

15 
	#__kî√l_l⁄g_t
 
__kî√l_l⁄g_t


	)

17 
	~<asm/posix_ty≥s_64.h
>

	@/usr/include/asm/sockios.h

1 
	~<asm-gíîic/sockios.h
>

	@/usr/include/bits/wchar-ldbl.h

19 #i‚de‡
_WCHAR_H


23 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


24 
__BEGIN_NAMESPACE_C99


25 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

26 
__LDBL_REDIR_DECL
 (
w¥ötf
);

27 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

28 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

31 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

32 && !
deföed
 
	g__REDIRECT
 \

33 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

38 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

39 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

40 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

42 
__END_NAMESPACE_C99


45 #ifde‡
__USE_ISOC99


46 
__BEGIN_NAMESPACE_C99


47 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

48 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

49 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

50 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

51 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

54 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

55 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

56 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

58 
__END_NAMESPACE_C99


61 #ifde‡
__USE_GNU


62 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

65 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


66 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

67 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

68 #i‡
__USE_FORTIFY_LEVEL
 > 1

69 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

70 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar2.h

19 #i‚de‡
_WCHAR_H


24 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

25 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

26 
size_t
 
__ns1
Ë
__THROW
;

27 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

28 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

29 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

30 
wmem˝y
);

31 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

32 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

33 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

34 
size_t
 
__ns1
), 
__wmem˝y_chk
)

35 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

38 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

39 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

40 
size_t
 
__n
))

42 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

44 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

45  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

46 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

48 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

49  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

50 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

52  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

53 
	}
}

56 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

57 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

58 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

59 c⁄° 
wch¨_t
 *
__s2
,

60 
size_t
 
__n
), 
wmemmove
);

61 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

62 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

63 
size_t
 
__n
, size_à
__ns1
), 
__wmemmove_chk
)

64 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

67 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

68 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
))

70 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

72 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

73  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

74 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

76 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

77  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

78 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

80  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

81 
	}
}

84 #ifde‡
__USE_GNU


85 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

86 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

87 
size_t
 
__ns1
Ë
__THROW
;

88 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

89 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

90 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
,

91 
size_t
 
__n
), 
wmemp˝y
);

92 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

93 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

94 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

95 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

96 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

99 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

100 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

101 
size_t
 
__n
))

103 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

105 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

106  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

107 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

109 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

110  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

111 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

113  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

114 
	}
}

118 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

119 
size_t
 
__ns
Ë
__THROW
;

120 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

121 
size_t
 
__n
), 
wmem£t
);

122 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

123 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

124 
size_t
 
__ns
), 
__wmem£t_chk
)

125 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

128 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

129 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
))

131 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

133 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

134  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

136 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

137  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

138 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

140  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

141 
	}
}

144 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

146 
size_t
 
__n
Ë
__THROW
;

147 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

148 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

149 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

151 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

152 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

154 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

155  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

156  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

157 
	}
}

160 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

161 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

162 
size_t
 
__de°Àn
Ë
__THROW
;

163 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
,

164 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

165 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
w˝˝y
);

167 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

168 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

170 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

171  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

172  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

173 
	}
}

176 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

177 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

178 
size_t
 
__de°Àn
Ë
__THROW
;

179 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

180 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

181 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

182 
size_t
 
__n
), 
wc¢˝y
);

183 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

184 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

185 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

186 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

187 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

190 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

191 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

192 
size_t
 
__n
))

194 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

196 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

197  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

198 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

199 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

200  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

201 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

203  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

204 
	}
}

207 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

208 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

209 
size_t
 
__de°Àn
Ë
__THROW
;

210 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

211 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

212 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

213 
size_t
 
__n
), 
w˝n˝y
);

214 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

215 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

216 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

217 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

218 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

221 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

222 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

223 
size_t
 
__n
))

225 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

227 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

228  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

229 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

230 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

231  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

232 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

234  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

235 
	}
}

238 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

239 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

240 
size_t
 
__de°Àn
Ë
__THROW
;

241 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

242 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

243 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

245 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

246 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

248 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

249  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

250  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

251 
	}
}

254 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

255 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

256 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

257 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

258 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

259 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

260 
size_t
 
__n
), 
wc¢ˇt
);

262 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

263 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

264 
size_t
 
__n
))

266 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

267  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

268 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

269  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

270 
	}
}

273 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

274 
__Êag
, 
size_t
 
__s_Àn
,

275 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

276 
__THROW
 ;

278 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

279 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

280 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

281 
sw¥ötf
);

283 #ifde‡
__va_¨g_∑ck


284 
__f‹tify_fun˘i⁄
 

285 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

286 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

288 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

289  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

290 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

291 
__fmt
, 
	`__va_¨g_∑ck
 ());

292  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

293 
	}
}

294 #ñi‡!
deföed
 
__˝lu•lus


296 
	#sw¥ötf
(
s
, 
n
, ...) \

297 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

298 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

299 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

300 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

303 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

304 
__Êag
, 
size_t
 
__s_Àn
,

305 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

306 
__gnuc_va_li°
 
__¨g
)

307 
__THROW
 ;

309 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

310 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

311 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

312 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

314 
__f‹tify_fun˘i⁄
 

315 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

316 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

318 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

319  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

320 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

321  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

322 
	}
}

325 #i‡
__USE_FORTIFY_LEVEL
 > 1

327 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

328 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

329 
__w¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

331 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

332 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

333 
__gnuc_va_li°
 
__≠
);

334 
__vw¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

335 
__gnuc_va_li°
 
__≠
);

337 #ifde‡
__va_¨g_∑ck


338 
__f‹tify_fun˘i⁄
 

339 
	$w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

341  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

342 
	}
}

344 
__f‹tify_fun˘i⁄
 

345 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

347  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

348 
	`__va_¨g_∑ck
 ());

349 
	}
}

350 #ñi‡!
deföed
 
__˝lu•lus


351 
	#w¥ötf
(...) \

352 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

353 
	#fw¥ötf
(
°ªam
, ...) \

354 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

357 
__f‹tify_fun˘i⁄
 

358 
	$vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

360  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

361 
	}
}

363 
__f‹tify_fun˘i⁄
 

364 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

365 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

367  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

368 
	}
}

372 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

373 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

374 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

375 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

376 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

377 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

378 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

379 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

380 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

383 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

384 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

386 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

388 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

389  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

390 
__n
, 
__°ªam
);

392 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

393  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

394 
__n
, 
__°ªam
);

396  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

397 
	}
}

399 #ifde‡
__USE_GNU


400 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

401 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

402 
__wur
;

403 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

404 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

405 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

406 
__wur
;

407 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

408 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

409 
__FILE
 *
__ª°ri˘
 
__°ªam
),

410 
__fgëws_u∆ocked_chk
)

411 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

414 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

415 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

417 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

419 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

420  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

421 
__n
, 
__°ªam
);

423 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

424  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

425 
__n
, 
__°ªam
);

427  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

428 
	}
}

432 
size_t
 
	$__w¸tomb_chk
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

433 
mb°©e_t
 *
__ª°ri˘
 
__p
,

434 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

435 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

436 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

437 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

439 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


440 
	`__NTH
 (
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

441 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

446 
	#__WCHAR_MB_LEN_MAX
 16

	)

447 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


450 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

451  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

452  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

453 
	}
}

456 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

457 c⁄° **
__ª°ri˘
 
__§c
,

458 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

459 
size_t
 
__d°Àn
Ë
__THROW
;

460 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

461 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

462 c⁄° **
__ª°ri˘
 
__§c
,

463 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

464 
mb§towcs
);

465 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

466 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

467 c⁄° **
__ª°ri˘
 
__§c
,

468 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

469 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

470 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

473 
__f‹tify_fun˘i⁄
 
size_t


474 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

475 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

477 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

479 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

480  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

481 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

483 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

484  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

485 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

487  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

488 
	}
}

491 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

492 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

493 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

494 
size_t
 
__d°Àn
Ë
__THROW
;

495 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

496 (*
__ª°ri˘
 
__d°
,

497 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

498 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

499 
wc§tombs
);

500 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

501 (*
__ª°ri˘
 
__d°
,

502 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

503 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

504 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

505 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

507 
__f‹tify_fun˘i⁄
 
size_t


508 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

509 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

511 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

513 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

514  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

516 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

517  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

519  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

520 
	}
}

523 #ifde‡
__USE_GNU


524 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

525 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

526 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

527 
size_t
 
__d°Àn
Ë
__THROW
;

528 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

529 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

530 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

531 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

532 
mb¢πowcs
);

533 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

534 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

535 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

536 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

537 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

538 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

541 
__f‹tify_fun˘i⁄
 
size_t


542 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

543 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

545 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

547 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

548  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

549 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

551 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

552  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

553 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

555  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

556 
	}
}

559 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

560 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

561 
size_t
 
__nwc
, size_à
__Àn
,

562 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

563 
__THROW
;

564 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

565 (*
__ª°ri˘
 
__d°
,

566 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

567 
size_t
 
__nwc
, size_à
__Àn
,

568 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

569 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

570 (*
__ª°ri˘
 
__d°
,

571 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

572 
size_t
 
__nwc
, size_à
__Àn
,

573 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

574 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

575 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

577 
__f‹tify_fun˘i⁄
 
size_t


578 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

579 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

581 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

583 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

584  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

585 
	`__bos
 (
__d°
));

587 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

588  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

589 
	`__bos
 (
__d°
));

591  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

592 
	}
}

	@/usr/include/wctype.h

23 #i‚de‡
_WCTYPE_H


25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 #i‚de‡
__√ed_iswxxx


29 
	#_WCTYPE_H
 1

	)

32 
	#__√ed_wöt_t


	)

33 
	~<wch¨.h
>

37 #i‚de‡
WEOF


38 
	#WEOF
 (0xffffffffu)

	)

41 #unde‡
__√ed_iswxxx


46 #i‚de‡
__iswxxx_deföed


47 
	#__iswxxx_deföed
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 
	tw˘y≥_t
;

53 
	g__END_NAMESPACE_C99


55 #i‚de‡
_ISwbô


60 
	~<ídün.h
>

61 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


62 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

64 
	#_ISwbô
(
bô
) \

65 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

66 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

67 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

68 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

73 
	m__ISwuµî
 = 0,

74 
	m__ISwlowî
 = 1,

75 
	m__ISwÆpha
 = 2,

76 
	m__ISwdigô
 = 3,

77 
	m__ISwxdigô
 = 4,

78 
	m__ISw•a˚
 = 5,

79 
	m__ISw¥öt
 = 6,

80 
	m__ISwgøph
 = 7,

81 
	m__ISwbœnk
 = 8,

82 
	m__ISw˙ål
 = 9,

83 
	m__ISwpun˘
 = 10,

84 
	m__ISwÆnum
 = 11,

86 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

87 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

88 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

89 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

90 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

91 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

92 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

93 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

94 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

95 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

96 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

97 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

117 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

120 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

124 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

128 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

133 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

136 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

141 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

146 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

161 #ifde‡
__USE_ISOC99


162 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
w˘y≥_t
 
	$w˘y≥
 (c⁄° *
__¥›îty
Ë
__THROW
;

175 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 c⁄° 
	t__öt32_t
 *
	tw˘øns_t
;

187 
__END_NAMESPACE_C99


188 #ifde‡
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

192 
__BEGIN_NAMESPACE_C99


194 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

197 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifde‡
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 
w˘øns_t
 
	$w˘øns
 (c⁄° *
__¥›îty
Ë
__THROW
;

221 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifde‡
__USE_XOPEN2K8


226 
	~<xloˇÀ.h
>

230 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

236 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

239 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

243 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

247 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

252 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

255 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

260 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

265 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

284 
w˘y≥_t
 
	$w˘y≥_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

285 
__THROW
;

289 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

290 
__THROW
;

298 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

301 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

305 
w˘øns_t
 
	$w˘øns_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

306 
__THROW
;

309 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

310 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

314 
__END_DECLS


	@/usr/include/asm-generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@/usr/include/asm-generic/posix_types.h

1 #i‚de‡
__ASM_GENERIC_POSIX_TYPES_H


2 
	#__ASM_GENERIC_POSIX_TYPES_H


	)

4 
	~<asm/bô•îl⁄g.h
>

13 #i‚de‡
__kî√l_l⁄g_t


14 
	t__kî√l_l⁄g_t
;

15 
	t__kî√l_ul⁄g_t
;

18 #i‚de‡
__kî√l_öo_t


19 
__kî√l_ul⁄g_t
 
	t__kî√l_öo_t
;

22 #i‚de‡
__kî√l_mode_t


23 
	t__kî√l_mode_t
;

26 #i‚de‡
__kî√l_pid_t


27 
	t__kî√l_pid_t
;

30 #i‚de‡
__kî√l_ùc_pid_t


31 
	t__kî√l_ùc_pid_t
;

34 #i‚de‡
__kî√l_uid_t


35 
	t__kî√l_uid_t
;

36 
	t__kî√l_gid_t
;

39 #i‚de‡
__kî√l_su£c⁄ds_t


40 
__kî√l_l⁄g_t
 
	t__kî√l_su£c⁄ds_t
;

43 #i‚de‡
__kî√l_daddr_t


44 
	t__kî√l_daddr_t
;

47 #i‚de‡
__kî√l_uid32_t


48 
	t__kî√l_uid32_t
;

49 
	t__kî√l_gid32_t
;

52 #i‚de‡
__kî√l_ﬁd_uid_t


53 
__kî√l_uid_t
 
	t__kî√l_ﬁd_uid_t
;

54 
__kî√l_gid_t
 
	t__kî√l_ﬁd_gid_t
;

57 #i‚de‡
__kî√l_ﬁd_dev_t


58 
	t__kî√l_ﬁd_dev_t
;

65 #i‚de‡
__kî√l_size_t


66 #i‡
__BITS_PER_LONG
 != 64

67 
	t__kî√l_size_t
;

68 
	t__kî√l_ssize_t
;

69 
	t__kî√l_±rdiff_t
;

71 
__kî√l_ul⁄g_t
 
	t__kî√l_size_t
;

72 
__kî√l_l⁄g_t
 
	t__kî√l_ssize_t
;

73 
__kî√l_l⁄g_t
 
	t__kî√l_±rdiff_t
;

77 #i‚de‡
__kî√l_fsid_t


79 
	mvÆ
[2];

80 } 
	t__kî√l_fsid_t
;

86 
__kî√l_l⁄g_t
 
	t__kî√l_off_t
;

87 
	t__kî√l_loff_t
;

88 
__kî√l_l⁄g_t
 
	t__kî√l_time_t
;

89 
__kî√l_l⁄g_t
 
	t__kî√l_˛ock_t
;

90 
	t__kî√l_timî_t
;

91 
	t__kî√l_˛ockid_t
;

92 * 
	t__kî√l_ˇddr_t
;

93 
	t__kî√l_uid16_t
;

94 
	t__kî√l_gid16_t
;

	@/usr/include/asm-generic/sockios.h

1 #i‚de‡
__ASM_GENERIC_SOCKIOS_H


2 
	#__ASM_GENERIC_SOCKIOS_H


	)

5 
	#FIOSETOWN
 0x8901

	)

6 
	#SIOCSPGRP
 0x8902

	)

7 
	#FIOGETOWN
 0x8903

	)

8 
	#SIOCGPGRP
 0x8904

	)

9 
	#SIOCATMARK
 0x8905

	)

10 
	#SIOCGSTAMP
 0x8906

	)

11 
	#SIOCGSTAMPNS
 0x8907

	)

	@/usr/include/asm/bitsperlong.h

1 #i‚de‡
__ASM_X86_BITSPERLONG_H


2 
	#__ASM_X86_BITSPERLONG_H


	)

4 #i‡
deföed
(
__x86_64__
Ë&& !deföed(
__ILP32__
)

5 
	#__BITS_PER_LONG
 64

	)

7 
	#__BITS_PER_LONG
 32

	)

10 
	~<asm-gíîic/bô•îl⁄g.h
>

	@/usr/include/asm-generic/bitsperlong.h

1 #i‚de‡
__ASM_GENERIC_BITS_PER_LONG


2 
	#__ASM_GENERIC_BITS_PER_LONG


	)

11 #i‚de‡
__BITS_PER_LONG


12 
	#__BITS_PER_LONG
 32

	)

	@
1
.
1
/usr/include
328
8356
fwd/inc/aes.h
fwd/inc/base64.h
fwd/inc/cmac.h
fwd/inc/compiler.h
fwd/inc/db.h
fwd/inc/endianext.h
fwd/inc/fwd.h
fwd/inc/ghost.h
fwd/inc/gwcfg.h
fwd/inc/gwtraf_service.h
fwd/inc/jitqueue.h
fwd/inc/lgwmm.h
fwd/inc/linkedlists.h
fwd/inc/logger.h
fwd/inc/loramac-crypto.h
fwd/inc/mac-header-decode.h
fwd/inc/mqtt_service.h
fwd/inc/parson.h
fwd/inc/pkt_service.h
fwd/inc/semtech_service.h
fwd/inc/service.h
fwd/inc/stats.h
fwd/inc/timersync.h
fwd/inc/utilities.h
fwd/src/aes.c
fwd/src/base64.c
fwd/src/cmac.c
fwd/src/db.c
fwd/src/endianext.c
fwd/src/fwd.c
fwd/src/ghost.c
fwd/src/gwcfg.c
fwd/src/gwtraf_serv.c
fwd/src/jitqueue.c
fwd/src/lgwmm.c
fwd/src/loramac-crypto.c
fwd/src/mac-header-decode.c
fwd/src/mqtt_serv.c
fwd/src/parson.c
fwd/src/pkt_serv.c
fwd/src/semtech_serv.c
fwd/src/service.c
fwd/src/stats.c
fwd/src/timersync.c
fwd/src/utilities.c
hal/config.h
hal/gpio.c
hal/gpio.h
hal/lg02hal/loragw_hal_lg02.c
hal/lg02hal/loragw_hal_lg02.h
hal/lg02hal/loragw_sx1272_regs.h
hal/lg02hal/loragw_sx1276_regs.h
hal/lg02hal/loragw_sx127x_radio.c
hal/lg02hal/loragw_sx127x_radio.h
hal/loragw_aux.c
hal/loragw_aux.h
hal/loragw_debug.c
hal/loragw_debug.h
hal/loragw_gps.c
hal/loragw_gps.h
hal/loragw_hal.c
hal/loragw_hal.h
hal/loragw_i2c.c
hal/loragw_i2c.h
hal/loragw_lbt.c
hal/loragw_lbt.h
hal/loragw_reg.c
hal/loragw_reg.h
hal/loragw_spi.ftdi.c
hal/loragw_spi.h
hal/loragw_spi.native.c
hal/sx1301hal/loragw_hal_sx1301.c
hal/sx1301hal/loragw_hal_sx1301.h
hal/sx1301hal/loragw_radio_sx1301.c
hal/sx1301hal/loragw_radio_sx1301.h
hal/sx1301hal/loragw_reg_sx1301.c
hal/sx1301hal/loragw_reg_sx1301.h
hal/sx1301hal/loragw_sx125x.h
hal/sx1302hal/loragw_agc_params.h
hal/sx1302hal/loragw_cal.c
hal/sx1302hal/loragw_cal.h
hal/sx1302hal/loragw_hal_sx1302.c
hal/sx1302hal/loragw_hal_sx1302.h
hal/sx1302hal/loragw_reg_sx1302.c
hal/sx1302hal/loragw_reg_sx1302.h
hal/sx1302hal/loragw_stts751.c
hal/sx1302hal/loragw_stts751.h
hal/sx1302hal/loragw_sx1250.c
hal/sx1302hal/loragw_sx1250.h
hal/sx1302hal/loragw_sx125x.c
hal/sx1302hal/loragw_sx125x.h
hal/sx1302hal/loragw_sx1302.c
hal/sx1302hal/loragw_sx1302.h
hal/sx1302hal/loragw_sx1302_rx.c
hal/sx1302hal/loragw_sx1302_rx.h
hal/sx1302hal/loragw_sx1302_timestamp.c
hal/sx1302hal/loragw_sx1302_timestamp.h
hal/test/test_loragw_cal.c
hal/test/test_loragw_capture_ram.c
hal/test/test_loragw_counter.c
hal/test/test_loragw_gps.c
hal/test/test_loragw_hal_rx.c
hal/test/test_loragw_hal_tx.c
hal/test/test_loragw_i2c.c
hal/test/test_loragw_reg.c
hal/test/test_loragw_spi.c
hal/test/test_loragw_spi_sx1250.c
hal/tinymt32.c
hal/tinymt32.h
hal/tst/test_loragw_cal.c
hal/tst/test_loragw_gps.c
hal/tst/test_loragw_hal.c
hal/tst/test_loragw_reg.c
hal/tst/test_loragw_spi.c
libmqtt/MQTTClient.c
libmqtt/MQTTClient.h
libmqtt/MQTTConnect.h
libmqtt/MQTTConnectClient.c
libmqtt/MQTTConnectServer.c
libmqtt/MQTTDeserializePublish.c
libmqtt/MQTTErrors.h
libmqtt/MQTTFormat.c
libmqtt/MQTTFormat.h
libmqtt/MQTTLinux.c
libmqtt/MQTTLinux.h
libmqtt/MQTTPacket.c
libmqtt/MQTTPacket.h
libmqtt/MQTTPublish.h
libmqtt/MQTTSerializePublish.c
libmqtt/MQTTSubscribe.h
libmqtt/MQTTSubscribeClient.c
libmqtt/MQTTSubscribeServer.c
libmqtt/MQTTUnsubscribe.h
libmqtt/MQTTUnsubscribeClient.c
libmqtt/MQTTUnsubscribeServer.c
libmqtt/StackTrace.h
libmqtt/test/stdoutsub.c
libttn/api.pb-c.c
libttn/api.pb-c.h
libttn/connector.c
libttn/connector.h
libttn/descriptor.pb-c.c
libttn/descriptor.pb-c.h
libttn/empty.pb-c.c
libttn/empty.pb-c.h
libttn/gateway.pb-c.c
libttn/gateway.pb-c.h
libttn/gogo.pb-c.c
libttn/gogo.pb-c.h
libttn/lorawan.pb-c.c
libttn/lorawan.pb-c.h
libttn/network.h
libttn/protocol.pb-c.c
libttn/protocol.pb-c.h
libttn/router.pb-c.c
libttn/router.pb-c.h
libttn/session.h
libttn/test/test.c
libttn/trace.pb-c.c
libttn/trace.pb-c.h
libttn/types.pb-c.c
libttn/types.pb-c.h
tools/payload_tools/payload_crc.c
tools/payload_tools/payload_diff.c
tools/payload_tools/payload_gen.c
util_chip_id/src/chip_id.c
/usr/include/arpa/inet.h
/usr/include/assert.h
/usr/include/ctype.h
/usr/include/dirent.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/getopt.h
/usr/include/inttypes.h
/usr/include/limits.h
/usr/include/linux/i2c-dev.h
/usr/include/linux/i2c.h
/usr/include/linux/spi/spidev.h
/usr/include/math.h
/usr/include/memory.h
/usr/include/netdb.h
/usr/include/netinet/in.h
/usr/include/netinet/tcp.h
/usr/include/pthread.h
/usr/include/semaphore.h
/usr/include/signal.h
/usr/include/sqlite3.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/strings.h
/usr/include/sys/ioctl.h
/usr/include/sys/param.h
/usr/include/sys/select.h
/usr/include/sys/socket.h
/usr/include/sys/stat.h
/usr/include/sys/time.h
/usr/include/sys/types.h
/usr/include/termios.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/bits/byteswap.h
/usr/include/bits/confname.h
/usr/include/bits/dirent.h
/usr/include/bits/environments.h
/usr/include/bits/errno.h
/usr/include/bits/fcntl.h
/usr/include/bits/fcntl2.h
/usr/include/bits/huge_val.h
/usr/include/bits/huge_valf.h
/usr/include/bits/huge_vall.h
/usr/include/bits/in.h
/usr/include/bits/inf.h
/usr/include/bits/ioctl-types.h
/usr/include/bits/ioctls.h
/usr/include/bits/math-finite.h
/usr/include/bits/math-vector.h
/usr/include/bits/mathcalls.h
/usr/include/bits/mathdef.h
/usr/include/bits/mathinline.h
/usr/include/bits/nan.h
/usr/include/bits/netdb.h
/usr/include/bits/param.h
/usr/include/bits/posix1_lim.h
/usr/include/bits/posix2_lim.h
/usr/include/bits/posix_opt.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/select.h
/usr/include/bits/select2.h
/usr/include/bits/semaphore.h
/usr/include/bits/setjmp.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/siginfo.h
/usr/include/bits/signum.h
/usr/include/bits/sigset.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigthread.h
/usr/include/bits/socket.h
/usr/include/bits/socket2.h
/usr/include/bits/stat.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-bsearch.h
/usr/include/bits/stdlib-float.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/termios.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/bits/unistd.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wchar.h
/usr/include/bits/wordsize.h
/usr/include/bits/xopen_lim.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/libio.h
/usr/include/linux/ioctl.h
/usr/include/linux/types.h
/usr/include/rpc/netdb.h
/usr/include/sched.h
/usr/include/sys/sysmacros.h
/usr/include/sys/ttydefaults.h
/usr/include/sys/ucontext.h
/usr/include/sys/uio.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/asm/ioctl.h
/usr/include/asm/ioctls.h
/usr/include/asm/socket.h
/usr/include/asm/types.h
/usr/include/bits/byteswap-16.h
/usr/include/bits/endian.h
/usr/include/bits/fcntl-linux.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/libm-simd-decl-stubs.h
/usr/include/bits/local_lim.h
/usr/include/bits/sched.h
/usr/include/bits/sockaddr.h
/usr/include/bits/socket_type.h
/usr/include/bits/timex.h
/usr/include/bits/typesizes.h
/usr/include/bits/uio.h
/usr/include/gnu/stubs.h
/usr/include/linux/errno.h
/usr/include/linux/limits.h
/usr/include/linux/param.h
/usr/include/linux/posix_types.h
/usr/include/stdc-predef.h
/usr/include/sys/cdefs.h
/usr/include/asm-generic/ioctl.h
/usr/include/asm-generic/ioctls.h
/usr/include/asm-generic/socket.h
/usr/include/asm-generic/types.h
/usr/include/asm/errno.h
/usr/include/asm/param.h
/usr/include/asm/posix_types.h
/usr/include/gconv.h
/usr/include/gnu/stubs-32.h
/usr/include/gnu/stubs-64.h
/usr/include/gnu/stubs-x32.h
/usr/include/linux/stddef.h
/usr/include/wchar.h
/usr/include/asm-generic/errno.h
/usr/include/asm-generic/int-ll64.h
/usr/include/asm-generic/param.h
/usr/include/asm/posix_types_32.h
/usr/include/asm/posix_types_64.h
/usr/include/asm/posix_types_x32.h
/usr/include/asm/sockios.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar2.h
/usr/include/wctype.h
/usr/include/asm-generic/errno-base.h
/usr/include/asm-generic/posix_types.h
/usr/include/asm-generic/sockios.h
/usr/include/asm/bitsperlong.h
/usr/include/asm-generic/bitsperlong.h
