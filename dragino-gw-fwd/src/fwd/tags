	Session.vim	/^cnoremap  <Home>$/;"	m
	Session.vim	/^inoremap  $/;"	m
	Session.vim	/^cnoremap  <End>$/;"	m
	Session.vim	/^inoremap  $/;"	m
S	Session.vim	/^imap S <Plug>ISurround$/;"	m
s	Session.vim	/^imap s <Plug>Isurround$/;"	m
	Session.vim	/^nmap  h$/;"	m
		Session.vim	/^inoremap <silent> 	 =TriggerSnippet()$/;"	m
	Session.vim	/^cnoremap  $/;"	m
	Session.vim	/^inoremap <expr>  pumvisible()?"\\<PageUp>\\\\":"\\"$/;"	m
	Session.vim	/^nmap  k$/;"	m
	Session.vim	/^inoremap  $/;"	m
	Session.vim	/^nmap  l$/;"	m
	Session.vim	/^inoremap <expr> $/;"	m
	Session.vim	/^cnoremap  <Down>$/;"	m
	Session.vim	/^cnoremap  <Up>$/;"	m
		Session.vim	/^inoremap <silent> 	 =ShowAvailableSnips()$/;"	m
	Session.vim	/^imap  <Plug>Isurround$/;"	m
	Session.vim	/^inoremap <expr>  pumvisible()?"\\":"\\"$/;"	m
	Session.vim	/^nmap  :BottomExplorerWindow$/;"	m
	Session.vim	/^nmap  :FirstExplorerWindow$/;"	m
	Session.vim	/^inoremap <expr>  omni#cpp#maycomplete#Complete()$/;"	m
	Session.vim	/^inoremap  $/;"	m
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
#	Session.vim	/^vnoremap <silent> # :call VisualSearch('b')$/;"	m
&	Session.vim	/^nnoremap & :&&$/;"	m
*	Session.vim	/^vnoremap <silent> * :call VisualSearch('f')$/;"	m
,	Session.vim	/^map <buffer> ,  :make$/;"	m
,	Session.vim	/^nmap <silent> ,$/;"	m
,$	Session.vim	/^map ,$ :syntax sync fromstart$/;"	m
,1	Session.vim	/^map ,1 :set syntax=c$/;"	m
,2	Session.vim	/^map ,2 :set syntax=xhtml$/;"	m
,3	Session.vim	/^map ,3 :set syntax=python$/;"	m
,4	Session.vim	/^map ,4 :set ft=javascript$/;"	m
,bb	Session.vim	/^nmap <silent> ,bb :TagbarToggle$/;"	m
,bd	Session.vim	/^map ,bd :Bclose$/;"	m
,be	Session.vim	/^map <silent> ,be :BufExplorer$/;"	m
,bs	Session.vim	/^map <silent> ,bs :SBufExplorer$/;"	m
,bv	Session.vim	/^map <silent> ,bv :VSBufExplorer$/;"	m
,c	Session.vim	/^nmap ,c  <Plug>NERDCommenterToggle$/;"	m
,c	Session.vim	/^vmap ,c  <Plug>NERDCommenterToggle$/;"	m
,c$	Session.vim	/^nmap ,c$ <Plug>NERDCommenterToEOL$/;"	m
,c$	Session.vim	/^vmap ,c$ <Plug>NERDCommenterToEOL$/;"	m
,cA	Session.vim	/^nmap ,cA <Plug>NERDCommenterAppend$/;"	m
,cA	Session.vim	/^vmap ,cA <Plug>NERDCommenterAppend$/;"	m
,ca	Session.vim	/^nmap ,ca <Plug>NERDCommenterAltDelims$/;"	m
,cb	Session.vim	/^nmap ,cb <Plug>NERDCommenterAlignBoth$/;"	m
,cb	Session.vim	/^vmap ,cb <Plug>NERDCommenterAlignBoth$/;"	m
,cc	Session.vim	/^nmap ,cc <Plug>NERDCommenterComment$/;"	m
,cc	Session.vim	/^vmap ,cc <Plug>NERDCommenterComment$/;"	m
,cd	Session.vim	/^map <silent> ,cd :cd %:p:h$/;"	m
,ci	Session.vim	/^nmap ,ci <Plug>NERDCommenterInvert$/;"	m
,ci	Session.vim	/^vmap ,ci <Plug>NERDCommenterInvert$/;"	m
,cl	Session.vim	/^nmap ,cl <Plug>NERDCommenterAlignLeft$/;"	m
,cl	Session.vim	/^vmap ,cl <Plug>NERDCommenterAlignLeft$/;"	m
,cm	Session.vim	/^nmap ,cm <Plug>NERDCommenterMinimal$/;"	m
,cm	Session.vim	/^vmap ,cm <Plug>NERDCommenterMinimal$/;"	m
,cn	Session.vim	/^nmap ,cn <Plug>NERDCommenterNest$/;"	m
,cn	Session.vim	/^vmap ,cn <Plug>NERDCommenterNest$/;"	m
,cp	Session.vim	/^nmap ,cp :cp$/;"	m
,cr	Session.vim	/^nnoremap <buffer> ,cr :cs kill 0$/;"	m
,cs	Session.vim	/^nmap ,cs <Plug>NERDCommenterSexy$/;"	m
,cs	Session.vim	/^vmap ,cs <Plug>NERDCommenterSexy$/;"	m
,cu	Session.vim	/^nmap ,cu <Plug>NERDCommenterUncomment$/;"	m
,cu	Session.vim	/^vmap ,cu <Plug>NERDCommenterUncomment$/;"	m
,cw	Session.vim	/^nmap ,cw :cw 10$/;"	m
,cy	Session.vim	/^nmap ,cy <Plug>NERDCommenterYank$/;"	m
,cy	Session.vim	/^vmap ,cy <Plug>NERDCommenterYank$/;"	m
,dm	Session.vim	/^noremap ,dm mzHmx:%s\/$/;"	m
,e.	Session.vim	/^nmap <silent> ,e. :e %:p:h$/;"	m
,ec	Session.vim	/^map ,ec :tabnew ~\/tmp\/scratch.txt$/;"	m
,ee	Session.vim	/^map <silent> ,ee :call SwitchToBuf("~\/.vimrc")$/;"	m
,es	Session.vim	/^map ,es :tabnew$/;"	m
,fd	Session.vim	/^nmap ,fd :se ff=dos$/;"	m
,fu	Session.vim	/^nmap ,fu :se ff=unix$/;"	m
,hh	Session.vim	/^nmap <silent> ,hh <Plug>MarkClear$/;"	m
,hh	Session.vim	/^vmap <silent> ,hh <Plug>MarkClear$/;"	m
,hl	Session.vim	/^nmap <silent> ,hl <Plug>MarkSet$/;"	m
,hl	Session.vim	/^vmap <silent> ,hl <Plug>MarkSet$/;"	m
,hr	Session.vim	/^nmap <silent> ,hr <Plug>MarkRegex$/;"	m
,hr	Session.vim	/^vmap <silent> ,hr <Plug>MarkRegex$/;"	m
,lk	Session.vim	/^nmap <silent> ,lk :LUTags$/;"	m
,ll	Session.vim	/^nmap <silent> ,ll :LUBufs$/;"	m
,lv	Session.vim	/^nmap <silent> ,lv :lv \/=expand("<cword>")$/;"	m
,lw	Session.vim	/^nmap <silent> ,lw :LUWalk$/;"	m
,ma	Session.vim	/^map <silent> ,ma :ShowMarksClearAll$/;"	m
,mb	Session.vim	/^nmap <silent> ,mb :MarksBrowser$/;"	m
,mh	Session.vim	/^map <silent> ,mh :ShowMarksClearMark$/;"	m
,mm	Session.vim	/^map <silent> ,mm :ShowMarksPlaceMark$/;"	m
,mo	Session.vim	/^map <silent> ,mo :ShowMarksOn$/;"	m
,mt	Session.vim	/^map <silent> ,mt :ShowMarksToggle$/;"	m
,mu	Session.vim	/^map ,mu :MRU$/;"	m
,o	Session.vim	/^map ,o :BufExplorer$/;"	m
,of	Session.vim	/^nmap <silent> ,of :FSHere$/;"	m
,qa	Session.vim	/^nmap <silent> ,qa :qa$/;"	m
,qf	Session.vim	/^nmap <silent> ,qf :q!$/;"	m
,qq	Session.vim	/^nmap <silent> ,qq :q$/;"	m
,qw	Session.vim	/^nmap <silent> ,qw :wq$/;"	m
,rr	Session.vim	/^nmap <silent> ,rr :redraw!$/;"	m
,s?	Session.vim	/^map ,s? z=$/;"	m
,sa	Session.vim	/^map ,sa zg$/;"	m
,sn	Session.vim	/^map ,sn ]s$/;"	m
,sp	Session.vim	/^map ,sp [s$/;"	m
,ss	Session.vim	/^map <silent> ,ss :source ~\/.vimrc$/;"	m
,tc	Session.vim	/^map ,tc :tabclose$/;"	m
,te	Session.vim	/^map ,te :tabedit$/;"	m
,tl	Session.vim	/^nmap <silent> ,tl :Tlist$/;"	m
,tm	Session.vim	/^map ,tm :tabmove$/;"	m
,tn	Session.vim	/^map ,tn :tabnew$/;"	m
,tt	Session.vim	/^nmap <silent> ,tt :NERDTreeToggle$/;"	m
,wf	Session.vim	/^nmap <silent> ,wf :w!$/;"	m
,wm	Session.vim	/^nmap <silent> ,wm :WMToggle$/;"	m
,ws	Session.vim	/^nmap <silent> ,ws :call DeleteTrailingWS()$/;"	m
,ww	Session.vim	/^nmap <silent> ,ww :w$/;"	m
,yr	Session.vim	/^map ,yr :YRShow$/;"	m
,zo	Session.vim	/^nmap <silent> ,zo zO$/;"	m
,zo	Session.vim	/^vmap <silent> ,zo zO$/;"	m
.	Session.vim	/^inoremap <expr> . omni#cpp#maycomplete#Dot()$/;"	m
021|	Session.vim	/^normal! 021|$/;"	m
055|	Session.vim	/^normal! 055|$/;"	m
:	Session.vim	/^inoremap <expr> : omni#cpp#maycomplete#Scope()$/;"	m
<F1>	Session.vim	/^cmap <F1> $/;"	m
<F1>	Session.vim	/^imap <F1> $/;"	m
<F1>	Session.vim	/^nmap <F1> $/;"	m
<F1>	Session.vim	/^vmap <F1> $/;"	m
<F5>	Session.vim	/^imap <silent> <expr> <F5> (pumvisible() ? "\\<Plug>LookupFileCE" : "")."\\\\<Plug>LookupFile"$/;"	m
<F5>	Session.vim	/^nmap <silent> <F5> <Plug>LookupFile$/;"	m
<NL>	Session.vim	/^inoremap <expr> <NL> pumvisible()?"\\<PageDown>\\\\":"\\"$/;"	m
<NL>	Session.vim	/^nmap <NL> j$/;"	m
<Nul>c	Session.vim	/^nmap <Nul>c :cs find c =expand("<cword>")$/;"	m
<Nul>d	Session.vim	/^nmap <Nul>d :cs find d =expand("<cword>")$/;"	m
<Nul>e	Session.vim	/^nmap <Nul>e :cs find e =expand("<cword>")$/;"	m
<Nul>f	Session.vim	/^nmap <Nul>f :cs find f =expand("<cfile>")$/;"	m
<Nul>g	Session.vim	/^nmap <Nul>g :cs find g =expand("<cword>")$/;"	m
<Nul>i	Session.vim	/^nmap <Nul>i :cs find i ^=expand("<cfile>")$/;"	m
<Nul>s	Session.vim	/^nmap <Nul>s :cs find s =expand("<cword>")$/;"	m
<Nul>t	Session.vim	/^nmap <Nul>t :cs find t =expand("<cword>")$/;"	m
<Plug>LookupFileCE	Session.vim	/^inoremap <Plug>LookupFileCE $/;"	m
<Plug>NERDCommenterAlignBoth	Session.vim	/^nnoremap <silent> <Plug>NERDCommenterAlignBoth :call NERDComment(0, "alignBoth")$/;"	m
<Plug>NERDCommenterAlignBoth	Session.vim	/^vnoremap <silent> <Plug>NERDCommenterAlignBoth :call NERDComment(1, "alignBoth")$/;"	m
<Plug>NERDCommenterAlignLeft	Session.vim	/^nnoremap <silent> <Plug>NERDCommenterAlignLeft :call NERDComment(0, "alignLeft")$/;"	m
<Plug>NERDCommenterAlignLeft	Session.vim	/^vnoremap <silent> <Plug>NERDCommenterAlignLeft :call NERDComment(1, "alignLeft")$/;"	m
<Plug>NERDCommenterAppend	Session.vim	/^nmap <silent> <Plug>NERDCommenterAppend :call NERDComment(0, "append")$/;"	m
<Plug>NERDCommenterComment	Session.vim	/^nnoremap <silent> <Plug>NERDCommenterComment :call NERDComment(0, "norm")$/;"	m
<Plug>NERDCommenterComment	Session.vim	/^vnoremap <silent> <Plug>NERDCommenterComment :call NERDComment(1, "norm")$/;"	m
<Plug>NERDCommenterInInsert	Session.vim	/^inoremap <silent> <Plug>NERDCommenterInInsert  <BS>:call NERDComment(0, "insert")$/;"	m
<Plug>NERDCommenterInvert	Session.vim	/^nnoremap <silent> <Plug>NERDCommenterInvert :call NERDComment(0, "invert")$/;"	m
<Plug>NERDCommenterInvert	Session.vim	/^vnoremap <silent> <Plug>NERDCommenterInvert :call NERDComment(1, "invert")$/;"	m
<Plug>NERDCommenterMinimal	Session.vim	/^nnoremap <silent> <Plug>NERDCommenterMinimal :call NERDComment(0, "minimal")$/;"	m
<Plug>NERDCommenterMinimal	Session.vim	/^vnoremap <silent> <Plug>NERDCommenterMinimal :call NERDComment(1, "minimal")$/;"	m
<Plug>NERDCommenterNest	Session.vim	/^nnoremap <silent> <Plug>NERDCommenterNest :call NERDComment(0, "nested")$/;"	m
<Plug>NERDCommenterNest	Session.vim	/^vnoremap <silent> <Plug>NERDCommenterNest :call NERDComment(1, "nested")$/;"	m
<Plug>NERDCommenterSexy	Session.vim	/^nnoremap <silent> <Plug>NERDCommenterSexy :call NERDComment(0, "sexy")$/;"	m
<Plug>NERDCommenterSexy	Session.vim	/^vnoremap <silent> <Plug>NERDCommenterSexy :call NERDComment(1, "sexy")$/;"	m
<Plug>NERDCommenterToEOL	Session.vim	/^nnoremap <silent> <Plug>NERDCommenterToEOL :call NERDComment(0, "toEOL")$/;"	m
<Plug>NERDCommenterToggle	Session.vim	/^nnoremap <silent> <Plug>NERDCommenterToggle :call NERDComment(0, "toggle")$/;"	m
<Plug>NERDCommenterToggle	Session.vim	/^vnoremap <silent> <Plug>NERDCommenterToggle :call NERDComment(1, "toggle")$/;"	m
<Plug>NERDCommenterUncomment	Session.vim	/^nnoremap <silent> <Plug>NERDCommenterUncomment :call NERDComment(0, "uncomment")$/;"	m
<Plug>NERDCommenterUncomment	Session.vim	/^vnoremap <silent> <Plug>NERDCommenterUncomment :call NERDComment(1, "uncomment")$/;"	m
<Plug>NERDCommenterYank	Session.vim	/^nmap <silent> <Plug>NERDCommenterYank :call NERDComment(0, "yank")$/;"	m
<Plug>NERDCommenterYank	Session.vim	/^vmap <silent> <Plug>NERDCommenterYank :call NERDComment(1, "yank")$/;"	m
<Plug>NetrwBrowseX	Session.vim	/^nnoremap <silent> <Plug>NetrwBrowseX :call netrw#BrowseX(expand((exists("g:netrw_gx")? g:netrw_gx : '<cfile>')),netrw#CheckIfRemote())$/;"	m
<Plug>NetrwBrowseXVis	Session.vim	/^vnoremap <silent> <Plug>NetrwBrowseXVis :call netrw#BrowseXVis()$/;"	m
<Plug>unimpairedAFirst	Session.vim	/^nnoremap <silent> <Plug>unimpairedAFirst :exe "first ".(v:count ? v:count : "")$/;"	m
<Plug>unimpairedALast	Session.vim	/^nnoremap <silent> <Plug>unimpairedALast :exe "last ".(v:count ? v:count : "")$/;"	m
<Plug>unimpairedANext	Session.vim	/^nnoremap <silent> <Plug>unimpairedANext :exe "next ".(v:count ? v:count : "")$/;"	m
<Plug>unimpairedAPrevious	Session.vim	/^nnoremap <silent> <Plug>unimpairedAPrevious :exe "previous ".(v:count ? v:count : "")$/;"	m
<Plug>unimpairedBFirst	Session.vim	/^nnoremap <silent> <Plug>unimpairedBFirst :exe "bfirst ".(v:count ? v:count : "")$/;"	m
<Plug>unimpairedBLast	Session.vim	/^nnoremap <silent> <Plug>unimpairedBLast :exe "blast ".(v:count ? v:count : "")$/;"	m
<Plug>unimpairedBNext	Session.vim	/^nnoremap <silent> <Plug>unimpairedBNext :exe "bnext ".(v:count ? v:count : "")$/;"	m
<Plug>unimpairedBPrevious	Session.vim	/^nnoremap <silent> <Plug>unimpairedBPrevious :exe "bprevious ".(v:count ? v:count : "")$/;"	m
<Plug>unimpairedLFirst	Session.vim	/^nnoremap <silent> <Plug>unimpairedLFirst :exe "lfirst ".(v:count ? v:count : "")$/;"	m
<Plug>unimpairedLLast	Session.vim	/^nnoremap <silent> <Plug>unimpairedLLast :exe "llast ".(v:count ? v:count : "")$/;"	m
<Plug>unimpairedLNFile	Session.vim	/^nnoremap <silent> <Plug>unimpairedLNFile :exe "lnfile ".(v:count ? v:count : "")$/;"	m
<Plug>unimpairedLNext	Session.vim	/^nnoremap <silent> <Plug>unimpairedLNext :exe "lnext ".(v:count ? v:count : "")$/;"	m
<Plug>unimpairedLPFile	Session.vim	/^nnoremap <silent> <Plug>unimpairedLPFile :exe "lpfile ".(v:count ? v:count : "")$/;"	m
<Plug>unimpairedLPrevious	Session.vim	/^nnoremap <silent> <Plug>unimpairedLPrevious :exe "lprevious ".(v:count ? v:count : "")$/;"	m
<Plug>unimpairedONext	Session.vim	/^nmap <silent> <Plug>unimpairedONext <Plug>unimpairedDirectoryNext:echohl WarningMSG|echo "]o is deprecated. Use ]f"|echohl NONE$/;"	m
<Plug>unimpairedOPrevious	Session.vim	/^nmap <silent> <Plug>unimpairedOPrevious <Plug>unimpairedDirectoryPrevious:echohl WarningMSG|echo "[o is deprecated. Use [f"|echohl NONE$/;"	m
<Plug>unimpairedQFirst	Session.vim	/^nnoremap <silent> <Plug>unimpairedQFirst :exe "cfirst ".(v:count ? v:count : "")$/;"	m
<Plug>unimpairedQLast	Session.vim	/^nnoremap <silent> <Plug>unimpairedQLast :exe "clast ".(v:count ? v:count : "")$/;"	m
<Plug>unimpairedQNFile	Session.vim	/^nnoremap <silent> <Plug>unimpairedQNFile :exe "cnfile ".(v:count ? v:count : "")$/;"	m
<Plug>unimpairedQNext	Session.vim	/^nnoremap <silent> <Plug>unimpairedQNext :exe "cnext ".(v:count ? v:count : "")$/;"	m
<Plug>unimpairedQPFile	Session.vim	/^nnoremap <silent> <Plug>unimpairedQPFile :exe "cpfile ".(v:count ? v:count : "")$/;"	m
<Plug>unimpairedQPrevious	Session.vim	/^nnoremap <silent> <Plug>unimpairedQPrevious :exe "cprevious ".(v:count ? v:count : "")$/;"	m
<Plug>unimpairedTFirst	Session.vim	/^nnoremap <silent> <Plug>unimpairedTFirst :exe "tfirst ".(v:count ? v:count : "")$/;"	m
<Plug>unimpairedTLast	Session.vim	/^nnoremap <silent> <Plug>unimpairedTLast :exe "tlast ".(v:count ? v:count : "")$/;"	m
<Plug>unimpairedTNext	Session.vim	/^nnoremap <silent> <Plug>unimpairedTNext :exe "tnext ".(v:count ? v:count : "")$/;"	m
<Plug>unimpairedTPrevious	Session.vim	/^nnoremap <silent> <Plug>unimpairedTPrevious :exe "tprevious ".(v:count ? v:count : "")$/;"	m
<S-Tab>	Session.vim	/^inoremap <silent> <S-Tab> =BackwardsSnippet()$/;"	m
>	Session.vim	/^inoremap <expr> > omni#cpp#maycomplete#Arrow()$/;"	m
ACK_BUFF_SIZE	inc/fwd.h	81;"	d
AES_CMAC_CTX	inc/cmac.h	/^    } AES_CMAC_CTX;$/;"	t	typeref:struct:_AES_CMAC_CTX
AES_CMAC_DIGEST_LENGTH	inc/cmac.h	9;"	d
AES_CMAC_Final	src/cmac.c	/^void AES_CMAC_Final(uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX *ctx)$/;"	f
AES_CMAC_Init	src/cmac.c	/^void AES_CMAC_Init(AES_CMAC_CTX *ctx)$/;"	f
AES_CMAC_KEY_LENGTH	inc/cmac.h	8;"	d
AES_CMAC_SetKey	src/cmac.c	/^void AES_CMAC_SetKey(AES_CMAC_CTX *ctx, const uint8_t key[AES_CMAC_KEY_LENGTH])$/;"	f
AES_CMAC_Update	src/cmac.c	/^void AES_CMAC_Update(AES_CMAC_CTX *ctx, const uint8_t *data, uint32_t len)$/;"	f
AES_DEC_PREKEYED	inc/aes.h	42;"	d
AES_ENC_PREKEYED	inc/aes.h	39;"	d
AES_H	inc/aes.h	32;"	d
APPEND_INDENT	src/parson.c	723;"	d	file:
APPEND_INDENT	src/parson.c	884;"	d	file:
APPEND_STRING	src/parson.c	718;"	d	file:
APPEND_STRING	src/parson.c	883;"	d	file:
APP_NAME	Makefile	/^APP_NAME := fwd$/;"	m
AR	Makefile	/^AR := $(CROSS_COMPILE)ar$/;"	m
ARCH	Makefile	/^ARCH ?=$/;"	m
ARRAY_IN_BOUNDS	inc/utilities.h	228;"	d
ARRAY_MAX_CAPACITY	src/parson.c	39;"	d	file:
ARRAY_SIZE	src/base64.c	28;"	d	file:
AU	inc/gwcfg.h	/^    AU$/;"	e	enum:__anon3
Ack	inc/mac-header-decode.h	/^        uint8_t Ack             : 1;$/;"	m	struct:uLoRaMacFrameCtrl::sCtrlBits
Adr	inc/mac-header-decode.h	/^        uint8_t Adr             : 1;$/;"	m	struct:uLoRaMacFrameCtrl::sCtrlBits
AdrAckReq	inc/mac-header-decode.h	/^        uint8_t AdrAckReq       : 1;$/;"	m	struct:uLoRaMacFrameCtrl::sCtrlBits
AesCmacCtx	src/loramac-crypto.c	/^static AES_CMAC_CTX AesCmacCtx[1];$/;"	v	file:
AesContext	src/loramac-crypto.c	/^static aes_context AesContext;$/;"	v	file:
BEACON_GUARD	src/jitqueue.c	42;"	d	file:
BEACON_QUEUED	inc/stats.h	/^	BEACON_QUEUED,$/;"	e	enum:__anon23
BEACON_REJECTED	inc/stats.h	/^	BEACON_REJECTED$/;"	e	enum:__anon23
BEACON_RESERVED	src/jitqueue.c	44;"	d	file:
BEACON_SENT	inc/stats.h	/^	BEACON_SENT,$/;"	e	enum:__anon23
BPOLY	src/aes.c	76;"	d	file:
Bits	inc/mac-header-decode.h	/^    }Bits;$/;"	m	union:uLoRaMacDLSettings	typeref:struct:uLoRaMacDLSettings::sDLSettingsBits
Bits	inc/mac-header-decode.h	/^    }Bits;$/;"	m	union:uLoRaMacFrameCtrl	typeref:struct:uLoRaMacFrameCtrl::sCtrlBits
Bits	inc/mac-header-decode.h	/^    }Bits;$/;"	m	union:uLoRaMacHeader	typeref:struct:uLoRaMacHeader::sMacHeaderBits
BufSize	inc/mac-header-decode.h	/^    uint8_t BufSize;$/;"	m	struct:sLoRaMacMessageData
Buffer	inc/mac-header-decode.h	/^    uint8_t* Buffer;$/;"	m	struct:sLoRaMacMessageData
CC	Makefile	/^CC := $(CROSS_COMPILE)gcc$/;"	m
CN	inc/gwcfg.h	/^    CN,$/;"	e	enum:__anon3
COMMAND_TIMEOUT	inc/mqtt_service.h	33;"	d
CRIT	src/base64.c	29;"	d	file:
CRITICAL_SECTION_BEGIN	inc/utilities.h	141;"	d
CRITICAL_SECTION_END	inc/utilities.h	146;"	d
CROSS_COMPILE	Makefile	/^CROSS_COMPILE ?=$/;"	m
DEBUG	src/base64.c	32;"	d	file:
DECLARE_GW	inc/gwcfg.h	315;"	d
DEFAULT_BEACON_BW_HZ	inc/gwcfg.h	45;"	d
DEFAULT_BEACON_DATARATE	inc/gwcfg.h	44;"	d
DEFAULT_BEACON_FREQ_HZ	inc/gwcfg.h	41;"	d
DEFAULT_BEACON_FREQ_NB	inc/gwcfg.h	42;"	d
DEFAULT_BEACON_FREQ_STEP	inc/gwcfg.h	43;"	d
DEFAULT_BEACON_INFODESC	inc/gwcfg.h	47;"	d
DEFAULT_BEACON_POLL_MS	inc/fwd.h	69;"	d
DEFAULT_BEACON_POWER	inc/gwcfg.h	46;"	d
DEFAULT_DOWN_FPORT	inc/pkt_service.h	37;"	d
DEFAULT_FETCH_SLEEP_MS	inc/fwd.h	67;"	d
DEFAULT_GS_PORT_DW	inc/fwd.h	55;"	d
DEFAULT_GS_PORT_UP	inc/fwd.h	53;"	d
DEFAULT_GS_SERVER	inc/fwd.h	51;"	d
DEFAULT_KEEPALIVE	inc/fwd.h	57;"	d
DEFAULT_PAYLOAD_SIZE	inc/pkt_service.h	36;"	d
DEFAULT_PULL_INTERVAL	inc/fwd.h	59;"	d
DEFAULT_PULL_TIMEOUT_MS	inc/fwd.h	65;"	d
DEFAULT_PUSH_TIMEOUT_MS	inc/fwd.h	63;"	d
DEFAULT_RXPKTS_LIST_SIZE	inc/fwd.h	71;"	d
DEFAULT_STAT_INTERVAL	inc/fwd.h	61;"	d
DEFAULT_TRY_TIMES	inc/fwd.h	47;"	d
DEFINE_SQL_STATEMENT	src/db.c	51;"	d	file:
DNPATH	inc/pkt_service.h	39;"	d
DOUBLE_SERIALIZATION_FORMAT	src/parson.c	42;"	d	file:
DOWN	inc/pkt_service.h	42;"	d
DO_CRASH_NORETURN	inc/utilities.h	231;"	d
DO_CRASH_NORETURN	inc/utilities.h	233;"	d
DPOLY	src/aes.c	77;"	d	file:
DevAddr	inc/mac-header-decode.h	/^    uint32_t DevAddr;$/;"	m	struct:sLoRaMacFrameHeader
ENDIANEXT_H_	inc/endianext.h	12;"	d
EU	inc/gwcfg.h	/^    EU,$/;"	e	enum:__anon3
EXCLUDE	inc/gwcfg.h	/^    EXCLUDE,$/;"	e	enum:__anon5
FCnt	inc/mac-header-decode.h	/^    uint16_t FCnt;$/;"	m	struct:sLoRaMacFrameHeader
FCtrl	inc/mac-header-decode.h	/^    LoRaMacFrameCtrl_t FCtrl;$/;"	m	struct:sLoRaMacFrameHeader
FHDR	inc/mac-header-decode.h	/^    LoRaMacFrameHeader_t FHDR;$/;"	m	struct:sLoRaMacMessageData
FOpts	inc/mac-header-decode.h	/^    uint8_t FOpts[LORAMAC_FHDR_F_OPTS_MAX_FIELD_SIZE];$/;"	m	struct:sLoRaMacFrameHeader
FOptsLen	inc/mac-header-decode.h	/^        uint8_t FOptsLen        : 4;$/;"	m	struct:uLoRaMacFrameCtrl::sCtrlBits
FPending	inc/mac-header-decode.h	/^        uint8_t FPending        : 1;$/;"	m	struct:uLoRaMacFrameCtrl::sCtrlBits
FPort	inc/mac-header-decode.h	/^    uint8_t FPort;$/;"	m	struct:sLoRaMacMessageData
FRAME_TYPE_DATA_CONFIRMED_DOWN	inc/mac-header-decode.h	/^    FRAME_TYPE_DATA_CONFIRMED_DOWN   = 0x05,$/;"	e	enum:eLoRaMacFrameType
FRAME_TYPE_DATA_CONFIRMED_UP	inc/mac-header-decode.h	/^    FRAME_TYPE_DATA_CONFIRMED_UP     = 0x04,$/;"	e	enum:eLoRaMacFrameType
FRAME_TYPE_DATA_UNCONFIRMED_DOWN	inc/mac-header-decode.h	/^    FRAME_TYPE_DATA_UNCONFIRMED_DOWN = 0x03,$/;"	e	enum:eLoRaMacFrameType
FRAME_TYPE_DATA_UNCONFIRMED_UP	inc/mac-header-decode.h	/^    FRAME_TYPE_DATA_UNCONFIRMED_UP   = 0x02,$/;"	e	enum:eLoRaMacFrameType
FRAME_TYPE_JOIN_ACCEPT	inc/mac-header-decode.h	/^    FRAME_TYPE_JOIN_ACCEPT           = 0x01,$/;"	e	enum:eLoRaMacFrameType
FRAME_TYPE_JOIN_REQ	inc/mac-header-decode.h	/^    FRAME_TYPE_JOIN_REQ              = 0x00,$/;"	e	enum:eLoRaMacFrameType
FRAME_TYPE_PROPRIETARY	inc/mac-header-decode.h	/^    FRAME_TYPE_PROPRIETARY           = 0x07,$/;"	e	enum:eLoRaMacFrameType
FREE_FAILURE_MSG	src/lgwmm.c	41;"	d	file:
FRMPayload	inc/mac-header-decode.h	/^    uint8_t* FRMPayload;$/;"	m	struct:sLoRaMacMessageData
FRMPayloadSize	inc/mac-header-decode.h	/^    uint8_t FRMPayloadSize;$/;"	m	struct:sLoRaMacMessageData
GHOST_DATA	src/ghost.c	47;"	d	file:
GHST_MIN_PACKETSIZE	inc/ghost.h	30;"	d
GHST_NM_RCV	inc/ghost.h	34;"	d
GHST_REQ_BUFFSIZE	inc/ghost.h	31;"	d
GHST_RX_BUFFSIZE	inc/ghost.h	32;"	d
GHST_TX_BUFFSIZE	inc/ghost.h	33;"	d
GPS_REF_MAX_AGE	inc/fwd.h	90;"	d
GWDB	src/db.c	/^static sqlite3 *GWDB;$/;"	v	file:
HAVE_MEMCPY	src/aes.c	39;"	d	file:
HAVE_UINT_32T	src/aes.c	52;"	d	file:
INCLUDE	inc/gwcfg.h	/^    INCLUDE$/;"	e	enum:__anon5
INCLUDES	Makefile	/^INCLUDES = $(wildcard inc\/*.h)$/;"	m
INIT_GW	inc/gwcfg.h	274;"	d
IN_BOUNDS	inc/utilities.h	219;"	d
IS_CONT	src/parson.c	55;"	d	file:
JIT_ERROR_COLLISION_BEACON	inc/jitqueue.h	/^    JIT_ERROR_COLLISION_BEACON, \/* A beacon is planned for this timeframe *\/$/;"	e	enum:jit_error_e
JIT_ERROR_COLLISION_PACKET	inc/jitqueue.h	/^    JIT_ERROR_COLLISION_PACKET, \/* A packet is already enqueued for this timeframe *\/$/;"	e	enum:jit_error_e
JIT_ERROR_EMPTY	inc/jitqueue.h	/^    JIT_ERROR_EMPTY,        \/* Downlink queue is empty *\/$/;"	e	enum:jit_error_e
JIT_ERROR_FULL	inc/jitqueue.h	/^    JIT_ERROR_FULL,         \/* Downlink queue is full *\/$/;"	e	enum:jit_error_e
JIT_ERROR_GPS_UNLOCKED	inc/jitqueue.h	/^    JIT_ERROR_GPS_UNLOCKED, \/* GPS timestamp could not be used as GPS is unlocked *\/$/;"	e	enum:jit_error_e
JIT_ERROR_INVALID	inc/jitqueue.h	/^    JIT_ERROR_INVALID       \/* Packet is invalid *\/$/;"	e	enum:jit_error_e
JIT_ERROR_OK	inc/jitqueue.h	/^    JIT_ERROR_OK,           \/* Packet ok to be sent *\/$/;"	e	enum:jit_error_e
JIT_ERROR_TOO_EARLY	inc/jitqueue.h	/^    JIT_ERROR_TOO_EARLY,    \/* Too early to queue this packet *\/$/;"	e	enum:jit_error_e
JIT_ERROR_TOO_LATE	inc/jitqueue.h	/^    JIT_ERROR_TOO_LATE,     \/* Too late to send this packet *\/$/;"	e	enum:jit_error_e
JIT_ERROR_TX_FREQ	inc/jitqueue.h	/^    JIT_ERROR_TX_FREQ,      \/* The required frequency for downlink is not supported *\/$/;"	e	enum:jit_error_e
JIT_ERROR_TX_POWER	inc/jitqueue.h	/^    JIT_ERROR_TX_POWER,     \/* The required power for downlink is not supported *\/$/;"	e	enum:jit_error_e
JIT_NUM_BEACON_IN_QUEUE	inc/jitqueue.h	31;"	d
JIT_PKT_TYPE_BEACON	inc/jitqueue.h	/^    JIT_PKT_TYPE_BEACON$/;"	e	enum:jit_pkt_type_e
JIT_PKT_TYPE_DOWNLINK_CLASS_A	inc/jitqueue.h	/^    JIT_PKT_TYPE_DOWNLINK_CLASS_A,$/;"	e	enum:jit_pkt_type_e
JIT_PKT_TYPE_DOWNLINK_CLASS_B	inc/jitqueue.h	/^    JIT_PKT_TYPE_DOWNLINK_CLASS_B,$/;"	e	enum:jit_pkt_type_e
JIT_PKT_TYPE_DOWNLINK_CLASS_C	inc/jitqueue.h	/^    JIT_PKT_TYPE_DOWNLINK_CLASS_C,$/;"	e	enum:jit_pkt_type_e
JIT_QUEUE_MAX	inc/jitqueue.h	30;"	d
JSONArray	inc/parson.h	/^    JSONArray   = 5,$/;"	e	enum:json_value_type
JSONBoolean	inc/parson.h	/^    JSONBoolean = 6$/;"	e	enum:json_value_type
JSONError	inc/parson.h	/^    JSONError   = -1,$/;"	e	enum:json_value_type
JSONFailure	inc/parson.h	/^    JSONFailure = -1$/;"	e	enum:json_result_t
JSONNull	inc/parson.h	/^    JSONNull    = 1,$/;"	e	enum:json_value_type
JSONNumber	inc/parson.h	/^    JSONNumber  = 3,$/;"	e	enum:json_value_type
JSONObject	inc/parson.h	/^    JSONObject  = 4,$/;"	e	enum:json_value_type
JSONString	inc/parson.h	/^    JSONString  = 2,$/;"	e	enum:json_value_type
JSONSuccess	inc/parson.h	/^    JSONSuccess = 0,$/;"	e	enum:json_result_t
JSON_Array	inc/parson.h	/^typedef struct json_array_t  JSON_Array;$/;"	t	typeref:struct:json_array_t
JSON_Free_Function	inc/parson.h	/^typedef void   (*JSON_Free_Function)(void *);$/;"	t
JSON_Malloc_Function	inc/parson.h	/^typedef void * (*JSON_Malloc_Function)(size_t);$/;"	t
JSON_Object	inc/parson.h	/^typedef struct json_object_t JSON_Object;$/;"	t	typeref:struct:json_object_t
JSON_Status	inc/parson.h	/^typedef int JSON_Status;$/;"	t
JSON_Value	inc/parson.h	/^typedef struct json_value_t  JSON_Value;$/;"	t	typeref:struct:json_value_t
JSON_Value_Type	inc/parson.h	/^typedef int JSON_Value_Type;$/;"	t
JSON_Value_Value	src/parson.c	/^} JSON_Value_Value;$/;"	t	typeref:union:json_value_value	file:
KEEP_ALIVE_INTERVAL	inc/mqtt_service.h	32;"	d
LCFLAGS	Makefile	/^LCFLAGS = $(CFLAGS) -fPIC -Iinc -I. -I..\/hal -I..\/hal\/lg02hal -I..\/hal\/sx1301hal -I..\/hal\/sx1302hal -I..\/libmqtt$/;"	m
LGW_BACKGROUND_STACKSIZE	inc/utilities.h	178;"	d
LGW_DB_PATH	inc/fwd.h	83;"	d
LGW_LINKEDLISTS_H	inc/linkedlists.h	28;"	d
LGW_LIST_DELETE_ELM	inc/linkedlists.h	574;"	d
LGW_LIST_EMPTY	inc/linkedlists.h	258;"	d
LGW_LIST_ENTRY	inc/linkedlists.h	226;"	d
LGW_LIST_FIRST	inc/linkedlists.h	235;"	d
LGW_LIST_HEAD	inc/linkedlists.h	89;"	d
LGW_LIST_HEAD_DESTROY	inc/linkedlists.h	491;"	d
LGW_LIST_HEAD_INIT	inc/linkedlists.h	476;"	d
LGW_LIST_HEAD_INIT_NOLOCK	inc/linkedlists.h	505;"	d
LGW_LIST_HEAD_INIT_VALUE	inc/linkedlists.h	126;"	d
LGW_LIST_HEAD_NOLOCK	inc/linkedlists.h	116;"	d
LGW_LIST_HEAD_NOLOCK_INIT_VALUE	inc/linkedlists.h	136;"	d
LGW_LIST_HEAD_NOLOCK_STATIC	inc/linkedlists.h	173;"	d
LGW_LIST_HEAD_SET	inc/linkedlists.h	188;"	d
LGW_LIST_HEAD_SET_NOLOCK	inc/linkedlists.h	203;"	d
LGW_LIST_HEAD_STATIC	inc/linkedlists.h	160;"	d
LGW_LIST_INSERT_AFTER	inc/linkedlists.h	520;"	d
LGW_LIST_INSERT_BEFORE_CURRENT	inc/linkedlists.h	452;"	d
LGW_LIST_INSERT_HEAD	inc/linkedlists.h	536;"	d
LGW_LIST_INSERT_TAIL	inc/linkedlists.h	556;"	d
LGW_LIST_LAST	inc/linkedlists.h	241;"	d
LGW_LIST_LOCK	inc/linkedlists.h	44;"	d
LGW_LIST_MOVE_CURRENT	inc/linkedlists.h	375;"	d
LGW_LIST_NEXT	inc/linkedlists.h	249;"	d
LGW_LIST_REMOVE	inc/linkedlists.h	412;"	d
LGW_LIST_REMOVE_CURRENT	inc/linkedlists.h	351;"	d
LGW_LIST_REMOVE_HEAD	inc/linkedlists.h	391;"	d
LGW_LIST_TRAVERSE	inc/linkedlists.h	289;"	d
LGW_LIST_TRAVERSE_SAFE_BEGIN	inc/linkedlists.h	325;"	d
LGW_LIST_TRAVERSE_SAFE_END	inc/linkedlists.h	467;"	d
LGW_LIST_TRYLOCK	inc/linkedlists.h	56;"	d
LGW_LIST_UNLOCK	inc/linkedlists.h	67;"	d
LGW_PATH	Makefile	/^LGW_PATH ?= ..\/hal$/;"	m
LGW_STACKSIZE	inc/utilities.h	169;"	d
LGW_STACKSIZE	inc/utilities.h	172;"	d
LGW_STACKSIZE_LOW	inc/utilities.h	170;"	d
LGW_STACKSIZE_LOW	inc/utilities.h	173;"	d
LLIBS	Makefile	/^LLIBS := -lloragw -lrt -lsqlite3 -lpthread -lm -lmpsse -L..\/libmqtt -lpahomqtt3c$/;"	m
LOG_BEACON	src/fwd.c	/^uint8_t LOG_BEACON = 0;$/;"	v
LOG_DEBUG	src/fwd.c	/^uint8_t LOG_DEBUG = 1;$/;"	v
LOG_ERROR	src/fwd.c	/^uint8_t LOG_ERROR = 1;$/;"	v
LOG_INFO	src/fwd.c	/^uint8_t LOG_INFO = 1;$/;"	v
LOG_JIT	src/fwd.c	/^uint8_t LOG_JIT = 0;$/;"	v
LOG_JIT_ERROR	src/fwd.c	/^uint8_t LOG_JIT_ERROR = 0;$/;"	v
LOG_MEM	src/fwd.c	/^uint8_t LOG_MEM = 0;$/;"	v
LOG_PKT	src/fwd.c	/^uint8_t LOG_PKT = 1;$/;"	v
LOG_REPORT	src/fwd.c	/^uint8_t LOG_REPORT = 1;$/;"	v
LOG_TIMERSYNC	src/fwd.c	/^uint8_t LOG_TIMERSYNC = 0;$/;"	v
LOG_WARNING	src/fwd.c	/^uint8_t LOG_WARNING = 1;$/;"	v
LORAMAC_FHDR_DEV_ADD_FIELD_SIZE	inc/mac-header-decode.h	16;"	d
LORAMAC_FHDR_F_CNT_FIELD_SIZE	inc/mac-header-decode.h	22;"	d
LORAMAC_FHDR_F_CTRL_FIELD_SIZE	inc/mac-header-decode.h	19;"	d
LORAMAC_FHDR_F_OPTS_MAX_FIELD_SIZE	inc/mac-header-decode.h	25;"	d
LORAMAC_FHDR_MAX_FIELD_SIZE	inc/mac-header-decode.h	13;"	d
LORAMAC_MIC_BLOCK_B0_SIZE	src/loramac-crypto.c	20;"	d	file:
LORAMAC_MIC_FIELD_SIZE	inc/mac-header-decode.h	28;"	d
LORAMAC_MSG_TYPE_DATA	inc/mac-header-decode.h	/^    LORAMAC_MSG_TYPE_DATA,$/;"	e	enum:eLoRaMacMessageType
LORAMAC_MSG_TYPE_JOIN_ACCEPT	inc/mac-header-decode.h	/^    LORAMAC_MSG_TYPE_JOIN_ACCEPT,$/;"	e	enum:eLoRaMacMessageType
LORAMAC_MSG_TYPE_JOIN_REQUEST	inc/mac-header-decode.h	/^    LORAMAC_MSG_TYPE_JOIN_REQUEST,$/;"	e	enum:eLoRaMacMessageType
LORAMAC_MSG_TYPE_RE_JOIN_0_2	inc/mac-header-decode.h	/^    LORAMAC_MSG_TYPE_RE_JOIN_0_2,$/;"	e	enum:eLoRaMacMessageType
LORAMAC_MSG_TYPE_RE_JOIN_1	inc/mac-header-decode.h	/^    LORAMAC_MSG_TYPE_RE_JOIN_1,$/;"	e	enum:eLoRaMacMessageType
LORAMAC_MSG_TYPE_UNDEF	inc/mac-header-decode.h	/^    LORAMAC_MSG_TYPE_UNDEF,$/;"	e	enum:eLoRaMacMessageType
LORAMAC_PARSER_ERROR	inc/mac-header-decode.h	/^    LORAMAC_PARSER_ERROR,$/;"	e	enum:eLoRaMacParserStatus
LORAMAC_PARSER_ERROR_NPE	inc/mac-header-decode.h	/^    LORAMAC_PARSER_ERROR_NPE,$/;"	e	enum:eLoRaMacParserStatus
LORAMAC_PARSER_FAIL	inc/mac-header-decode.h	/^    LORAMAC_PARSER_FAIL,$/;"	e	enum:eLoRaMacParserStatus
LORAMAC_PARSER_SUCCESS	inc/mac-header-decode.h	/^    LORAMAC_PARSER_SUCCESS = 0,$/;"	e	enum:eLoRaMacParserStatus
LSHIFT	src/cmac.c	6;"	d	file:
LoRaMacComputeMic	src/loramac-crypto.c	/^void LoRaMacComputeMic( const uint8_t *buffer, uint16_t size, const uint8_t *key, uint32_t address, uint8_t dir, uint32_t sequenceCounter, uint32_t *mic )$/;"	f
LoRaMacDLSettings_t	inc/mac-header-decode.h	/^}LoRaMacDLSettings_t;$/;"	t	typeref:union:uLoRaMacDLSettings
LoRaMacFrameCtrl_t	inc/mac-header-decode.h	/^}LoRaMacFrameCtrl_t;$/;"	t	typeref:union:uLoRaMacFrameCtrl
LoRaMacFrameHeader_t	inc/mac-header-decode.h	/^}LoRaMacFrameHeader_t;$/;"	t	typeref:struct:sLoRaMacFrameHeader
LoRaMacFrameType_t	inc/mac-header-decode.h	/^}LoRaMacFrameType_t;$/;"	t	typeref:enum:eLoRaMacFrameType
LoRaMacHeader_t	inc/mac-header-decode.h	/^}LoRaMacHeader_t;$/;"	t	typeref:union:uLoRaMacHeader
LoRaMacJoinComputeMic	src/loramac-crypto.c	/^void LoRaMacJoinComputeMic( const uint8_t *buffer, uint16_t size, const uint8_t *key, uint32_t *mic )$/;"	f
LoRaMacJoinComputeSKeys	src/loramac-crypto.c	/^void LoRaMacJoinComputeSKeys( const uint8_t *key, const uint8_t *appNonce, uint16_t devNonce, uint8_t *nwkSKey, uint8_t *appSKey )$/;"	f
LoRaMacJoinDecrypt	src/loramac-crypto.c	/^void LoRaMacJoinDecrypt( const uint8_t *buffer, uint16_t size, const uint8_t *key, uint8_t *decBuffer )$/;"	f
LoRaMacJoinEncrypt	src/loramac-crypto.c	/^void LoRaMacJoinEncrypt( const uint8_t *buffer, uint16_t size, const uint8_t *key, uint8_t *encBuffer ){$/;"	f
LoRaMacMessageData_t	inc/mac-header-decode.h	/^}LoRaMacMessageData_t;$/;"	t	typeref:struct:sLoRaMacMessageData
LoRaMacMessageType_t	inc/mac-header-decode.h	/^}LoRaMacMessageType_t;$/;"	t	typeref:enum:eLoRaMacMessageType
LoRaMacParserData	src/mac-header-decode.c	/^LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )$/;"	f
LoRaMacParserStatus_t	inc/mac-header-decode.h	/^}LoRaMacParserStatus_t;$/;"	t	typeref:enum:eLoRaMacParserStatus
LoRaMacPayloadDecrypt	src/loramac-crypto.c	/^void LoRaMacPayloadDecrypt( const uint8_t *buffer, uint16_t size, const uint8_t *key, uint32_t address, uint8_t dir, uint32_t sequenceCounter, uint8_t *decBuffer )$/;"	f
LoRaMacPayloadEncrypt	src/loramac-crypto.c	/^void LoRaMacPayloadEncrypt( const uint8_t *buffer, uint16_t size, const uint8_t *key, uint32_t address, uint8_t dir, uint32_t sequenceCounter, uint8_t *encBuffer )$/;"	f
MALLOC_FAILURE_MSG	src/lgwmm.c	38;"	d	file:
MAX	inc/utilities.h	56;"	d
MAX	src/parson.c	47;"	d	file:
MAX_DB_FIELD	src/db.c	40;"	d	file:
MAX_NESTING	src/parson.c	41;"	d	file:
MAX_TRY	inc/utilities.h	37;"	d
MHDR	inc/mac-header-decode.h	/^    LoRaMacHeader_t MHDR;$/;"	m	struct:sLoRaMacMessageData
MIC	inc/mac-header-decode.h	/^    uint32_t MIC;$/;"	m	struct:sLoRaMacMessageData
MIN	inc/utilities.h	47;"	d
MIN_FSK_PREAMB	inc/fwd.h	44;"	d
MIN_LORA_PREAMB	inc/fwd.h	42;"	d
MQTT_PATH	Makefile	/^MQTT_PATH ?= ..\/libmqtt$/;"	m
MSG	inc/logger.h	45;"	d
MSG_DEBUG	inc/logger.h	55;"	d
MType	inc/mac-header-decode.h	/^        uint8_t MType           : 3;$/;"	m	struct:uLoRaMacHeader::sMacHeaderBits
M_last	inc/cmac.h	/^            uint8_t        M_last[16];$/;"	m	struct:_AES_CMAC_CTX
M_n	inc/cmac.h	/^            uint32_t       M_n;$/;"	m	struct:_AES_CMAC_CTX
Major	inc/mac-header-decode.h	/^        uint8_t Major           : 2;$/;"	m	struct:uLoRaMacHeader::sMacHeaderBits
Mic	src/loramac-crypto.c	/^static uint8_t Mic[16];$/;"	v	file:
MicBlockB0	src/loramac-crypto.c	/^static uint8_t MicBlockB0[] = { 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,$/;"	v	file:
NB_PKT_MAX	inc/gwcfg.h	49;"	d
NODE_CALL_SECS	inc/ghost.h	35;"	d
NOTHING	inc/gwcfg.h	/^    NOTHING,$/;"	e	enum:__anon5
N_BLOCK	inc/aes.h	59;"	d
N_COL	inc/aes.h	58;"	d
N_MAX_ROUNDS	inc/aes.h	60;"	d
N_ROW	inc/aes.h	57;"	d
OBJDIR	Makefile	/^OBJDIR = obj$/;"	m
OBJECT_MAX_CAPACITY	src/parson.c	40;"	d	file:
OptNeg	inc/mac-header-decode.h	/^        uint8_t OptNeg          : 1;$/;"	m	struct:uLoRaMacDLSettings::sDLSettingsBits
PATH_LEN	inc/fwd.h	49;"	d
PKT_FWD	inc/stats.h	/^	PKT_FWD$/;"	e	enum:__anon24
PKT_PULL_ACK	inc/fwd.h	77;"	d
PKT_PULL_DATA	inc/fwd.h	75;"	d
PKT_PULL_RESP	inc/fwd.h	76;"	d
PKT_PUSH_ACK	inc/fwd.h	74;"	d
PKT_PUSH_DATA	inc/fwd.h	73;"	d
PKT_TX_ACK	inc/fwd.h	78;"	d
POW2	inc/utilities.h	72;"	d
PROTOCOL_JSON_RXPK_FRAME_FORMAT	inc/fwd.h	40;"	d
PROTOCOL_VERSION	inc/fwd.h	39;"	d
PROTOCOL_VERSION	src/ghost.c	46;"	d	file:
QOS_CONNECT	inc/mqtt_service.h	40;"	d
QOS_DOWN	inc/mqtt_service.h	38;"	d
QOS_STATUS	inc/mqtt_service.h	37;"	d
QOS_UP	inc/mqtt_service.h	39;"	d
QOS_WILL	inc/mqtt_service.h	41;"	d
RAND_LOCAL_MAX	src/utilities.c	35;"	d	file:
READ_BUFFER_SIZE	inc/mqtt_service.h	34;"	d
RFU	inc/mac-header-decode.h	/^        uint8_t RFU             : 3;$/;"	m	struct:uLoRaMacHeader::sMacHeaderBits
RX1DRoffset	inc/mac-header-decode.h	/^        uint8_t RX1DRoffset     : 3;$/;"	m	struct:uLoRaMacDLSettings::sDLSettingsBits
RX2DataRate	inc/mac-header-decode.h	/^        uint8_t RX2DataRate     : 4;$/;"	m	struct:uLoRaMacDLSettings::sDLSettingsBits
RX_BAD	inc/stats.h	/^	RX_BAD,$/;"	e	enum:__anon24
RX_NOCRC	inc/stats.h	/^	RX_NOCRC,$/;"	e	enum:__anon24
RX_OK	inc/stats.h	/^	RX_OK,$/;"	e	enum:__anon24
RX_RCV	inc/stats.h	/^	RX_RCV,$/;"	e	enum:__anon24
SEND_BUFFER_SIZE	inc/mqtt_service.h	35;"	d
SIZEOF_TOKEN	src/parson.c	44;"	d	file:
SKIP_CHAR	src/parson.c	45;"	d	file:
SKIP_WHITESPACES	src/parson.c	46;"	d	file:
STARTING_CAPACITY	src/parson.c	38;"	d	file:
STATUS_SIZE	inc/stats.h	39;"	d
STD_FSK_PREAMB	inc/fwd.h	45;"	d
STD_LORA_PREAMB	inc/fwd.h	43;"	d
SWAP	inc/utilities.h	64;"	d
SessionLoad	Session.vim	/^let SessionLoad = 1$/;"	v
TX_BUFF_SIZE	inc/fwd.h	80;"	d
TX_FAIL	inc/stats.h	/^	TX_FAIL,$/;"	e	enum:__anon23
TX_JIT_DELAY	src/jitqueue.c	39;"	d	file:
TX_MARGIN_DELAY	src/jitqueue.c	37;"	d	file:
TX_MAX_ADVANCE_DELAY	src/jitqueue.c	40;"	d	file:
TX_OK	inc/stats.h	/^	TX_OK,$/;"	e	enum:__anon23
TX_REJ_COLL_BEACON	inc/stats.h	/^	TX_REJ_COLL_BEACON,$/;"	e	enum:__anon23
TX_REJ_COLL_PACKET	inc/stats.h	/^	TX_REJ_COLL_PACKET,$/;"	e	enum:__anon23
TX_REJ_TOO_EARLY	inc/stats.h	/^	TX_REJ_TOO_EARLY,$/;"	e	enum:__anon23
TX_REJ_TOO_LATE	inc/stats.h	/^	TX_REJ_TOO_LATE,$/;"	e	enum:__anon23
TX_REQUESTED	inc/stats.h	/^	TX_REQUESTED,$/;"	e	enum:__anon23
TX_START_DELAY	src/jitqueue.c	35;"	d	file:
UNIX_GPS_EPOCH_OFFSET	inc/fwd.h	85;"	d
UP	inc/pkt_service.h	41;"	d
US	inc/gwcfg.h	/^    US,$/;"	e	enum:__anon3
USE_TABLES	src/aes.c	57;"	d	file:
VERSION_1	src/aes.c	64;"	d	file:
Value	inc/mac-header-decode.h	/^    uint8_t Value;$/;"	m	union:uLoRaMacDLSettings
Value	inc/mac-header-decode.h	/^    uint8_t Value;$/;"	m	union:uLoRaMacFrameCtrl
Value	inc/mac-header-decode.h	/^    uint8_t Value;$/;"	m	union:uLoRaMacHeader
WPOLY	src/aes.c	75;"	d	file:
X	inc/cmac.h	/^            uint8_t        X[16];$/;"	m	struct:_AES_CMAC_CTX
XERR_FILT_COEF	inc/fwd.h	88;"	d
XERR_INIT_AVG	inc/fwd.h	87;"	d
XOR	src/cmac.c	13;"	d	file:
[	Session.vim	/^nmap [  <Plug>unimpairedBlankUp$/;"	m
[	Session.vim	/^nmap <silent> [ <Plug>unimpairedLPFile$/;"	m
[	Session.vim	/^nmap <silent> [ <Plug>unimpairedQPFile$/;"	m
[%	Session.vim	/^vmap [% [%m'gv``$/;"	m
[A	Session.vim	/^nmap <silent> [A <Plug>unimpairedAFirst$/;"	m
[B	Session.vim	/^nmap <silent> [B <Plug>unimpairedBFirst$/;"	m
[L	Session.vim	/^nmap <silent> [L <Plug>unimpairedLFirst$/;"	m
[Q	Session.vim	/^nmap <silent> [Q <Plug>unimpairedQFirst$/;"	m
[T	Session.vim	/^nmap <silent> [T <Plug>unimpairedTFirst$/;"	m
[a	Session.vim	/^nmap <silent> [a <Plug>unimpairedAPrevious$/;"	m
[b	Session.vim	/^nmap <silent> [b <Plug>unimpairedBPrevious$/;"	m
[e	Session.vim	/^nmap [e <Plug>unimpairedMoveUp$/;"	m
[f	Session.vim	/^nmap [f <Plug>unimpairedDirectoryPrevious$/;"	m
[l	Session.vim	/^nmap <silent> [l <Plug>unimpairedLPrevious$/;"	m
[n	Session.vim	/^nmap [n <Plug>unimpairedContextPrevious$/;"	m
[n	Session.vim	/^omap [n <Plug>unimpairedContextPrevious$/;"	m
[o	Session.vim	/^nmap [o <Plug>unimpairedOPrevious$/;"	m
[q	Session.vim	/^nmap <silent> [q <Plug>unimpairedQPrevious$/;"	m
[t	Session.vim	/^nmap <silent> [t <Plug>unimpairedTPrevious$/;"	m
[u	Session.vim	/^nmap [u <Plug>unimpaired_url_encode$/;"	m
[uu	Session.vim	/^nmap [uu <Plug>unimpaired_line_url_encode$/;"	m
[x	Session.vim	/^nmap [x <Plug>unimpaired_xml_encode$/;"	m
[xx	Session.vim	/^nmap [xx <Plug>unimpaired_line_xml_encode$/;"	m
[y	Session.vim	/^nmap [y <Plug>unimpaired_string_encode$/;"	m
[yy	Session.vim	/^nmap [yy <Plug>unimpaired_line_string_encode$/;"	m
\	Session.vim	/^nnoremap \\ ,$/;"	m
\	Session.vim	/^onoremap \\ ,$/;"	m
]	Session.vim	/^nmap ]  <Plug>unimpairedBlankDown$/;"	m
]	Session.vim	/^nmap <silent> ] <Plug>unimpairedLNFile$/;"	m
]	Session.vim	/^nmap <silent> ] <Plug>unimpairedQNFile$/;"	m
]%	Session.vim	/^vmap ]% ]%m'gv``$/;"	m
]A	Session.vim	/^nmap <silent> ]A <Plug>unimpairedALast$/;"	m
]B	Session.vim	/^nmap <silent> ]B <Plug>unimpairedBLast$/;"	m
]L	Session.vim	/^nmap <silent> ]L <Plug>unimpairedLLast$/;"	m
]Q	Session.vim	/^nmap <silent> ]Q <Plug>unimpairedQLast$/;"	m
]T	Session.vim	/^nmap <silent> ]T <Plug>unimpairedTLast$/;"	m
]a	Session.vim	/^nmap <silent> ]a <Plug>unimpairedANext$/;"	m
]b	Session.vim	/^nmap <silent> ]b <Plug>unimpairedBNext$/;"	m
]e	Session.vim	/^nmap ]e <Plug>unimpairedMoveDown$/;"	m
]f	Session.vim	/^nmap ]f <Plug>unimpairedDirectoryNext$/;"	m
]l	Session.vim	/^nmap <silent> ]l <Plug>unimpairedLNext$/;"	m
]n	Session.vim	/^nmap ]n <Plug>unimpairedContextNext$/;"	m
]n	Session.vim	/^omap ]n <Plug>unimpairedContextNext$/;"	m
]o	Session.vim	/^nmap ]o <Plug>unimpairedONext$/;"	m
]q	Session.vim	/^nmap <silent> ]q <Plug>unimpairedQNext$/;"	m
]t	Session.vim	/^nmap <silent> ]t <Plug>unimpairedTNext$/;"	m
]u	Session.vim	/^nmap ]u <Plug>unimpaired_url_decode$/;"	m
]uu	Session.vim	/^nmap ]uu <Plug>unimpaired_line_url_decode$/;"	m
]x	Session.vim	/^nmap ]x <Plug>unimpaired_xml_decode$/;"	m
]xx	Session.vim	/^nmap ]xx <Plug>unimpaired_line_xml_decode$/;"	m
]y	Session.vim	/^nmap ]y <Plug>unimpaired_string_decode$/;"	m
]yy	Session.vim	/^nmap ]yy <Plug>unimpaired_line_string_decode$/;"	m
_AES_CMAC_CTX	inc/cmac.h	/^typedef struct _AES_CMAC_CTX {$/;"	s
_BASE64_H	inc/base64.h	17;"	d
_CMAC_H_	inc/cmac.h	3;"	d
_CRT_SECURE_NO_WARNINGS	src/parson.c	24;"	d	file:
_DR_PKT_FWD_H_	inc/fwd.h	28;"	d
_GHOST_H_	inc/ghost.h	12;"	d
_GNU_SOURCE	src/lgwmm.c	30;"	d	file:
_GWPKT_PROTO_H	inc/pkt_service.h	27;"	d
_GWTRAF_PROTO_H	inc/gwtraf_service.h	27;"	d
_GW_H	inc/gwcfg.h	28;"	d
_LGW_COMPILER_H	inc/compiler.h	27;"	d
_LGW_DB_H	inc/db.h	28;"	d
_LGW_LOGGER_H	inc/logger.h	28;"	d
_LGW_MM_H	inc/lgwmm.h	34;"	d
_LORA_PKTFWD_JIT_H	inc/jitqueue.h	17;"	d
_LORA_PKTFWD_STATS_H	inc/stats.h	28;"	d
_LORA_PKTFWD_TIMERSYNC_H	inc/timersync.h	18;"	d
_MQTT_PROTO_H	inc/mqtt_service.h	27;"	d
_SEMTECH_PROTO_H	inc/semtech_service.h	28;"	d
_SERVICE_H	inc/service.h	28;"	d
_XOPEN_SOURCE	src/fwd.c	32;"	d	file:
_XOPEN_SOURCE	src/fwd.c	34;"	d	file:
_XOPEN_SOURCE	src/ghost.c	14;"	d	file:
_XOPEN_SOURCE	src/ghost.c	16;"	d	file:
__LORAMAC_CRYPTO_H__	inc/loramac-crypto.h	10;"	d
__LORAMAC_HEADER_DECODE_H__	inc/mac-header-decode.h	8;"	d
__UTILITIES_H__	inc/utilities.h	28;"	d
__compar_d_fn_t	src/jitqueue.c	/^typedef int (*__compar_d_fn_t) (const void *, const void *, void *);$/;"	t	file:
__lgw__realloc	src/lgwmm.c	/^void *__lgw__realloc(void *ptr, size_t size, const char *file, int lineno, const char *func)$/;"	f
__lgw_asprintf	src/lgwmm.c	/^int __lgw_asprintf(const char *file, int lineno, const char *func, char **strp, const char *format, ...)$/;"	f
__lgw_assert_failed	src/utilities.c	/^void DO_CRASH_NORETURN __lgw_assert_failed(int condition, const char *condition_str, const char *file, int line, const char *function)$/;"	f
__lgw_calloc	src/lgwmm.c	/^void *__lgw_calloc(size_t nmemb, size_t size, const char *file, int lineno, const char *func)$/;"	f
__lgw_free	src/lgwmm.c	/^void __lgw_free(void *ptr, const char *file, int lineno, const char *func)$/;"	f
__lgw_malloc	src/lgwmm.c	/^void *__lgw_malloc(size_t size, const char *file, int lineno, const char *func)$/;"	f
__lgw_realloc	src/lgwmm.c	/^void *__lgw_realloc(void *ptr, size_t size, const char *file, int lineno, const char *func)$/;"	f
__lgw_strdup	src/lgwmm.c	/^char *__lgw_strdup(const char *s, const char *file, int lineno, const char *func)$/;"	f
__lgw_strndup	src/lgwmm.c	/^char *__lgw_strndup(const char *s, size_t n, const char *file, int lineno, const char *func)$/;"	f
__lgw_unregister_atexit	src/fwd.c	/^static void __lgw_unregister_atexit(void (*func)(void))$/;"	f	file:
__lgw_vasprintf	src/lgwmm.c	/^int __lgw_vasprintf(char **strp, const char *format, va_list ap, const char *file, int lineno, const char *func)$/;"	f
_dn_pkt	inc/pkt_service.h	/^typedef struct _dn_pkt {$/;"	s
_lgw_assert	inc/utilities.h	/^static void force_inline _lgw_assert(int condition, const char *condition_str, const char *file, int line, const char *function)$/;"	f
_lgw_strlen_zero	inc/utilities.h	/^static force_inline int _lgw_strlen_zero(const char *s, const char *file, const char *function, int line)$/;"	f
_mqttsession_s	inc/mqtt_service.h	/^typedef struct _mqttsession_s {$/;"	s
_rxpkts	inc/gwcfg.h	/^typedef struct _rxpkts {   \/* rx packages receive from radio or socke *\/$/;"	s
_server	inc/gwcfg.h	/^typedef struct _server {$/;"	s
_thread_info	inc/gwcfg.h	/^typedef struct _thread_info {$/;"	s
a%	Session.vim	/^vmap a% [%v]%$/;"	m
a/	Session.vim	/^omap a\/ <Plug>(textobj-lastpat-n)$/;"	m
a?	Session.vim	/^omap a? <Plug>(textobj-lastpat-N)$/;"	m
aBlock	src/loramac-crypto.c	/^static uint8_t aBlock[] = { 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,$/;"	v	file:
add_round_key	src/aes.c	/^static void add_round_key( uint_8t d[N_BLOCK], const uint_8t k[N_BLOCK] )$/;"	f	file:
addr	inc/gwcfg.h	/^    char addr[64];				\/\/ server address$/;"	m	struct:__anon8
aes_cbc_decrypt	src/aes.c	/^return_type aes_cbc_decrypt( const unsigned char *in, unsigned char *out,$/;"	f
aes_cbc_encrypt	src/aes.c	/^return_type aes_cbc_encrypt( const unsigned char *in, unsigned char *out,$/;"	f
aes_context	inc/aes.h	/^} aes_context;$/;"	t	typeref:struct:__anon22
aes_decrypt	src/aes.c	/^return_type aes_decrypt( const unsigned char in[N_BLOCK], unsigned char out[N_BLOCK], const aes_context ctx[1] )$/;"	f
aes_decrypt_128	src/aes.c	/^void aes_decrypt_128( const unsigned char in[N_BLOCK], unsigned char out[N_BLOCK],$/;"	f
aes_decrypt_256	src/aes.c	/^void aes_decrypt_256( const unsigned char in[N_BLOCK], unsigned char out[N_BLOCK],$/;"	f
aes_encrypt	src/aes.c	/^return_type aes_encrypt( const unsigned char in[N_BLOCK], unsigned char  out[N_BLOCK], const aes_context ctx[1] )$/;"	f
aes_encrypt_128	src/aes.c	/^void aes_encrypt_128( const unsigned char in[N_BLOCK], unsigned char out[N_BLOCK],$/;"	f
aes_encrypt_256	src/aes.c	/^void aes_encrypt_256( const unsigned char in[N_BLOCK], unsigned char out[N_BLOCK],$/;"	f
aes_set_key	src/aes.c	/^return_type aes_set_key( const unsigned char key[], length_type keylen, aes_context ctx[1] )$/;"	f
antenna_gain	inc/gwcfg.h	/^        uint8_t antenna_gain;$/;"	m	struct:__anon13::__anon15
append_indent	src/parson.c	/^static int append_indent(char *buf, int level) {$/;"	f	file:
append_string	src/parson.c	/^static int append_string(char *buf, const char *string) {$/;"	f	file:
appskey	inc/mac-header-decode.h	/^    uint8_t appskey[16];$/;"	m	struct:__anon21
appskey_str	inc/mac-header-decode.h	/^    char appskey_str[33];$/;"	m	struct:__anon21
array	src/parson.c	/^    JSON_Array  *array;$/;"	m	union:json_value_value	file:
attribute_const	inc/compiler.h	42;"	d
attribute_const	inc/compiler.h	44;"	d
attribute_deprecated	inc/compiler.h	48;"	d
attribute_deprecated	inc/compiler.h	50;"	d
attribute_malloc	inc/compiler.h	60;"	d
attribute_malloc	inc/compiler.h	62;"	d
attribute_may_alias	inc/compiler.h	78;"	d
attribute_may_alias	inc/compiler.h	80;"	d
attribute_noreturn	inc/compiler.h	84;"	d
attribute_noreturn	inc/compiler.h	86;"	d
attribute_pure	inc/compiler.h	36;"	d
attribute_pure	inc/compiler.h	38;"	d
attribute_sentinel	inc/compiler.h	66;"	d
attribute_sentinel	inc/compiler.h	68;"	d
attribute_unused	inc/compiler.h	54;"	d
attribute_unused	inc/compiler.h	56;"	d
attribute_warn_unused_result	inc/compiler.h	72;"	d
attribute_warn_unused_result	inc/compiler.h	74;"	d
autoquit_threshold	inc/gwcfg.h	/^        uint32_t autoquit_threshold;\/* enable auto-quit after a number of non-acknowledged PULL_DATA (0 = disabled) *\/$/;"	m	struct:__anon13::__anon16
b64_to_bin	src/base64.c	/^int b64_to_bin(const char * in, int size, uint8_t * out, int max_len) {$/;"	f
b64_to_bin_nopad	src/base64.c	/^int b64_to_bin_nopad(const char * in, int size, uint8_t * out, int max_len) {$/;"	f
beacon	inc/gwcfg.h	/^    } beacon;$/;"	m	struct:__anon13	typeref:struct:__anon13::__anon19
beacon_bw_hz	inc/gwcfg.h	/^        uint32_t beacon_bw_hz;     \/* set beacon bandwidth, in Hz *\/$/;"	m	struct:__anon13::__anon19
beacon_datarate	inc/gwcfg.h	/^        uint8_t  beacon_datarate;  \/* set beacon datarate (SF) *\/$/;"	m	struct:__anon13::__anon19
beacon_freq_hz	inc/gwcfg.h	/^        uint32_t beacon_freq_hz;   \/* set beacon TX frequency, in Hz *\/$/;"	m	struct:__anon13::__anon19
beacon_freq_nb	inc/gwcfg.h	/^        uint8_t  beacon_freq_nb;   \/* set number of beaconing channels beacon *\/$/;"	m	struct:__anon13::__anon19
beacon_freq_step	inc/gwcfg.h	/^        uint32_t beacon_freq_step; \/* set frequency step between beacon channels, in Hz *\/$/;"	m	struct:__anon13::__anon19
beacon_infodesc	inc/gwcfg.h	/^        uint8_t  beacon_infodesc;  \/* set beacon information descriptor *\/$/;"	m	struct:__anon13::__anon19
beacon_period	inc/gwcfg.h	/^        uint32_t beacon_period;    \/* set beaconing period, must be a sub-multiple of 86400, the nb of sec in a day *\/$/;"	m	struct:__anon13::__anon19
beacon_power	inc/gwcfg.h	/^        int8_t   beacon_power;     \/* set beacon TX power, in dBm *\/$/;"	m	struct:__anon13::__anon19
bin_to_b64	src/base64.c	/^int bin_to_b64(const uint8_t * in, int size, char * out, int max_len) {$/;"	f
bin_to_b64_nopad	src/base64.c	/^int bin_to_b64_nopad(const uint8_t * in, int size, char * out, int max_len) {$/;"	f
bind	inc/gwcfg.h	/^    uint8_t bind;          \/\/当前还剩多少连接，当连接为0时，将会移除这个包$/;"	m	struct:_rxpkts
block_copy	src/aes.c	303;"	d	file:
block_copy	src/aes.c	306;"	d	file:
block_copy_nn	src/aes.c	302;"	d	file:
block_copy_nn	src/aes.c	305;"	d	file:
board	inc/gwcfg.h	/^        char board[16];         \/\/ SX1301(LG301) \/ SX1308(LG308) \/ SX1302(LG302) \/ SX1276 (LG02)$/;"	m	struct:__anon13::__anon15
boolean	src/parson.c	/^    int          boolean;$/;"	m	union:json_value_value	file:
buffRX	src/ghost.c	/^static uint8_t buffRX[GHST_RX_BUFFSIZE * GHST_NM_RCV];	\/* circular buffer for receiving packets *\/$/;"	v	file:
capacity	src/parson.c	/^    size_t       capacity;$/;"	m	struct:json_array_t	file:
capacity	src/parson.c	/^    size_t       capacity;$/;"	m	struct:json_object_t	file:
cb_arg	inc/mqtt_service.h	/^	void *cb_arg;$/;"	m	struct:_mqttsession_s
cb_ghost	src/ghost.c	/^static pthread_mutex_t cb_ghost = PTHREAD_MUTEX_INITIALIZER;	\/* control access to the ghoststream measurements *\/$/;"	v	file:
cfg	inc/gwcfg.h	/^    } cfg;$/;"	m	struct:__anon13	typeref:struct:__anon13::__anon16
char_to_code	src/base64.c	/^uint8_t char_to_code(char x) {$/;"	f
clean_statements	src/db.c	/^static void clean_statements(void)$/;"	f	file:
clean_stmt	src/db.c	/^static int clean_stmt(sqlite3_stmt **stmt, const char *sql)$/;"	f	file:
client	inc/mqtt_service.h	/^	MQTTClient client;$/;"	m	struct:_mqttsession_s
code_62	src/base64.c	/^static char code_62 = '+';    \/* RFC 1421 standard character for code 62 *\/$/;"	v	file:
code_63	src/base64.c	/^static char code_63 = '\/';    \/* RFC 1421 standard character for code 63 *\/$/;"	v	file:
code_pad	src/base64.c	/^static char code_pad = '=';    \/* RFC 1421 padding character if padding *\/$/;"	v	file:
code_to_char	src/base64.c	/^char code_to_char(uint8_t x) {$/;"	f
compare	src/jitqueue.c	/^int compare(const void *a, const void *b, void *arg)$/;"	f
confs	inc/gwcfg.h	/^        confs_s confs;$/;"	m	struct:__anon13::__anon15
confs_s	inc/gwcfg.h	/^} confs_s;$/;"	t	typeref:struct:__anon6
connecting	inc/gwcfg.h	/^        bool connecting;			\/\/ Connection setup in progress$/;"	m	struct:_server::__anon11
contact	inc/gwcfg.h	/^        time_t contact;				\/\/ time of last contact$/;"	m	struct:_server::__anon11
copy_and_key	src/aes.c	/^static void copy_and_key( void *d, const void *s, const void *k )$/;"	f	file:
copy_block	src/aes.c	/^static void copy_block( void *d, const void *s )$/;"	f	file:
copy_block_nn	src/aes.c	/^static void copy_block_nn( uint_8t * d, const uint_8t *s, uint_8t nn )$/;"	f	file:
count	src/parson.c	/^    size_t       count;$/;"	m	struct:json_array_t	file:
count	src/parson.c	/^    size_t       count;$/;"	m	struct:json_object_t	file:
crc16	src/service.c	/^uint16_t crc16(const uint8_t * data, unsigned size) {$/;"	f
cs	Session.vim	/^nmap cs <Plug>Csurround$/;"	m
custom_downlink	inc/gwcfg.h	/^        bool     custom_downlink;         \/* if make a custome downlink to node *\/$/;"	m	struct:__anon13::__anon16
custom_rx2dn	src/pkt_serv.c	/^static enum jit_error_e custom_rx2dn(dn_pkt_s* dnelem, devinfo_s *devinfo, uint32_t us, uint8_t txmode) {$/;"	f	file:
d2	src/aes.c	84;"	d	file:
data	inc/db.h	/^	char data[0];$/;"	m	struct:lgw_db_entry
data	src/utilities.c	/^	void *data;$/;"	m	struct:thr_arg	file:
db_create_gwdb	src/db.c	/^static int db_create_gwdb(void)$/;"	f	file:
db_execute_sql	src/db.c	/^static int db_execute_sql(const char *sql, int (*callback)(void *, int, char **, char **), void *arg)$/;"	f	file:
db_family	src/pkt_serv.c	/^static char db_family[32] = {'\\0'};$/;"	v	file:
db_get_common	src/db.c	/^static int db_get_common(const char *family, const char *key, char **buffer, int bufferlen)$/;"	f	file:
db_gettree_common	src/db.c	/^static struct lgw_db_entry *db_gettree_common(sqlite3_stmt *stmt)$/;"	f	file:
db_init	src/db.c	/^static int db_init(void)$/;"	f	file:
db_key	src/pkt_serv.c	/^static char db_key[32] = {'\\0'};$/;"	v	file:
db_open	src/db.c	/^static int db_open(void)$/;"	f	file:
db_sync	src/db.c	/^static void db_sync(void)$/;"	f	file:
db_sync_thread	src/db.c	/^static void *db_sync_thread(void *data)$/;"	f	file:
dbcond	src/db.c	/^static pthread_cond_t dbcond;$/;"	v	file:
debug_mask	inc/gwcfg.h	/^        int  debug_mask;           \/* enabled debugging options *\/$/;"	m	struct:__anon13::__anon20
description	inc/gwcfg.h	/^        char description[64];	\/* used for free form description *\/$/;"	m	struct:__anon13::__anon14
devaddr	inc/gwcfg.h	/^        filter_e devaddr;           \/* 和fport相同 *\/$/;"	m	struct:_server::__anon10
devaddr	inc/mac-header-decode.h	/^    uint32_t devaddr;$/;"	m	struct:__anon21
devaddr	inc/pkt_service.h	/^    char devaddr[16];$/;"	m	struct:_dn_pkt
devaddr_str	inc/mac-header-decode.h	/^    char devaddr_str[17];$/;"	m	struct:__anon21
devinfo_s	inc/mac-header-decode.h	/^} devinfo_s;$/;"	t	typeref:struct:__anon21
difftimespec	src/fwd.c	/^double difftimespec(struct timespec end, struct timespec beginning) {$/;"	f
dn_pkt_s	inc/pkt_service.h	/^} dn_pkt_s;$/;"	t	typeref:struct:_dn_pkt
dnlink_handler	inc/mqtt_service.h	/^	dnlink_headler_f dnlink_handler;$/;"	m	struct:_mqttsession_s
dnlink_handler	src/mqtt_serv.c	/^void dnlink_handler(MessageData* data) {$/;"	f
dnlink_headler_f	inc/mqtt_service.h	/^typedef void (*dnlink_headler_f)(MessageData*);$/;"	t
dnlink_topic	inc/mqtt_service.h	/^	char *dnlink_topic;$/;"	m	struct:_mqttsession_s
dntopic	inc/gwcfg.h	/^    char dntopic[64];$/;"	m	struct:__anon7
doexit	src/db.c	/^static int doexit;$/;"	v	file:
dog	inc/gwcfg.h	/^    time_t      dog;$/;"	m	struct:_thread_info
dosync	src/db.c	/^static int dosync;$/;"	v	file:
ds	Session.vim	/^nmap ds <Plug>Dsurround$/;"	m
eLoRaMacFrameType	inc/mac-header-decode.h	/^typedef enum eLoRaMacFrameType$/;"	g
eLoRaMacMessageType	inc/mac-header-decode.h	/^typedef enum eLoRaMacMessageType$/;"	g
eLoRaMacParserStatus	inc/mac-header-decode.h	/^typedef enum eLoRaMacParserStatus$/;"	g
eflt	src/ghost.c	/^static float eflt(uint8_t * p, uint8_t i) {$/;"	f	file:
email	inc/gwcfg.h	/^        char email[40];			\/* used for contact email *\/$/;"	m	struct:__anon13::__anon14
enabled	inc/gwcfg.h	/^        bool enabled;$/;"	m	struct:_server::__anon9
exit_sig	src/fwd.c	/^volatile bool exit_sig = false;	\/* 1 -> application terminates cleanly (shut down hardware, close open files, etc) *\/$/;"	v
f	src/ghost.c	/^	float f;$/;"	m	union:__anon1	file:
f1	src/aes.c	79;"	d	file:
f2	src/aes.c	80;"	d	file:
f3	src/aes.c	86;"	d	file:
f4	src/aes.c	81;"	d	file:
f8	src/aes.c	82;"	d	file:
f9	src/aes.c	87;"	d	file:
fb	src/aes.c	88;"	d	file:
fd	src/aes.c	89;"	d	file:
fe	src/aes.c	90;"	d	file:
filter	inc/gwcfg.h	/^    } filter;$/;"	m	struct:_server	typeref:struct:_server::__anon10
filter_by_mac	src/mac-header-decode.c	/^int filter_by_mac(LoRaMacMessageData_t* macMsg, uint8_t fport, uint32_t devaddr, uint8_t len) {$/;"	f
filter_e	inc/gwcfg.h	/^} filter_e;$/;"	t	typeref:enum:__anon5
force_inline	inc/compiler.h	30;"	d
force_inline	inc/compiler.h	32;"	d
fport	inc/gwcfg.h	/^        filter_e fport;             \/* 0\/1\/2, 0不处理，1如果过滤匹配数据库的，2转发匹配数据库的 *\/$/;"	m	struct:_server::__anon10
free	src/parson.c	50;"	d	file:
func	src/fwd.c	/^    void (*func)(void);$/;"	m	struct:lgw_atexit	file:
fwd_affine	src/aes.c	/^uint_8t fwd_affine(const uint_8t x)$/;"	f
fwd_error_pkt	inc/gwcfg.h	/^        bool fwd_error_pkt;         \/* packets with PAYLOAD CRC ERROR are NOT forwarded *\/$/;"	m	struct:_server::__anon10
fwd_nocrc_pkt	inc/gwcfg.h	/^        bool fwd_nocrc_pkt;         \/* packets with NO PAYLOAD CRC are NOT forwarded *\/$/;"	m	struct:_server::__anon10
fwd_valid_pkt	inc/gwcfg.h	/^        bool fwd_valid_pkt;         \/* packets with PAYLOAD CRC OK are forwarded *\/$/;"	m	struct:_server::__anon10
gateway_id	inc/gwcfg.h	/^        char gateway_id[17];	\/* string form of gateway mac address *\/$/;"	m	struct:__anon13::__anon14
gateway_id	src/ghost.c	/^static char gateway_id[16] = "";	\/* string form of gateway mac address *\/$/;"	v	file:
get_concentrator_time	src/timersync.c	/^int get_concentrator_time(struct timeval *concent_time, struct timeval unix_time) {$/;"	f
get_quoted_string	src/parson.c	/^static char * get_quoted_string(const char **string) {$/;"	f	file:
get_rxpkt	src/fwd.c	/^int get_rxpkt(serv_s* serv) {$/;"	f
get_tx_gain_lut_index	src/fwd.c	/^int get_tx_gain_lut_index(uint8_t rf_chain, int8_t rf_power, uint8_t * lut_index) {$/;"	f
gf_inv	src/aes.c	/^static uint_8t gf_inv(const uint_8t x)$/;"	f	file:
gfm2_sb	src/aes.c	209;"	d	file:
gfm2_sb	src/aes.c	292;"	d	file:
gfm2_sbox	src/aes.c	/^static const uint_8t gfm2_sbox[256] = sb_data(f2);$/;"	v	file:
gfm3_sb	src/aes.c	210;"	d	file:
gfm3_sb	src/aes.c	293;"	d	file:
gfm3_sbox	src/aes.c	/^static const uint_8t gfm3_sbox[256] = sb_data(f3);$/;"	v	file:
gfm_9	src/aes.c	211;"	d	file:
gfm_9	src/aes.c	294;"	d	file:
gfm_b	src/aes.c	212;"	d	file:
gfm_b	src/aes.c	295;"	d	file:
gfm_d	src/aes.c	213;"	d	file:
gfm_d	src/aes.c	296;"	d	file:
gfm_e	src/aes.c	214;"	d	file:
gfm_e	src/aes.c	297;"	d	file:
gfmul_9	src/aes.c	/^static const uint_8t gfmul_9[256] = mm_data(f9);$/;"	v	file:
gfmul_b	src/aes.c	/^static const uint_8t gfmul_b[256] = mm_data(fb);$/;"	v	file:
gfmul_d	src/aes.c	/^static const uint_8t gfmul_d[256] = mm_data(fd);$/;"	v	file:
gfmul_e	src/aes.c	/^static const uint_8t gfmul_e[256] = mm_data(fe);$/;"	v	file:
ghost_get	src/ghost.c	/^int ghost_get(int max_pkt, struct lgw_pkt_rx_s *pkt_data) {	\/* Calculate the number of available packets *\/$/;"	f
ghost_host	inc/gwcfg.h	/^        char   ghost_host[32];$/;"	m	struct:__anon13::__anon16
ghost_port	inc/gwcfg.h	/^        char   ghost_port[16];$/;"	m	struct:__anon13::__anon16
ghost_put	src/ghost.c	/^int ghost_put() {				\/\/TODO: Implement this method.$/;"	f
ghost_run	src/ghost.c	/^volatile bool ghost_run = false;	\/* false -> ghost thread terminates cleanly *\/$/;"	v
ghost_start	src/ghost.c	/^void ghost_start(const char *ghost_addr, const char *ghost_port, const struct coord_s refcoor, const char *gwid) {$/;"	f
ghost_stop	src/ghost.c	/^void ghost_stop(void) {$/;"	f
ghost_timeout	src/ghost.c	/^struct timeval ghost_timeout = { 0, (200 * 1000) };	\/* non critical for throughput *\/$/;"	v	typeref:struct:timeval
ghoststream_enabled	inc/gwcfg.h	/^        bool     ghoststream_enabled;	$/;"	m	struct:__anon13::__anon16
ghst_bgn	src/ghost.c	/^static uint8_t ghst_bgn;		\/* begin of circular packet buffer *\/$/;"	v	file:
ghst_end	src/ghost.c	/^static uint8_t ghst_end;		\/* end of circular packet buffer  *\/$/;"	v	file:
gps	inc/gwcfg.h	/^    gps,$/;"	e	enum:__anon4
gps	inc/gwcfg.h	/^    } gps;$/;"	m	struct:__anon13	typeref:struct:__anon13::__anon17
gps_coord_valid	inc/gwcfg.h	/^        bool   gps_coord_valid;         \/* could we get valid GPS coordinates? *\/$/;"	m	struct:__anon13::__anon17
gps_enabled	inc/gwcfg.h	/^        bool   gps_enabled;		        \/* controls the use of the GPS                      *\/$/;"	m	struct:__anon13::__anon17
gps_fake_enable	inc/gwcfg.h	/^        bool   gps_fake_enable;$/;"	m	struct:__anon13::__anon17
gps_process_coords	src/fwd.c	/^static void gps_process_coords(void) {$/;"	f	file:
gps_process_sync	src/fwd.c	/^static void gps_process_sync(void) {$/;"	f	file:
gps_ref_valid	inc/gwcfg.h	/^        bool   gps_ref_valid;           \/* is GPS reference acceptable (ie. not too old) *\/$/;"	m	struct:__anon13::__anon17
gps_tty_fd	inc/gwcfg.h	/^        int    gps_tty_fd;$/;"	m	struct:__anon13::__anon17
gps_tty_path	inc/gwcfg.h	/^        char   gps_tty_path[64];        \/* path of the TTY port GPS is connected on *\/$/;"	m	struct:__anon13::__anon17
gw_s	inc/gwcfg.h	/^} gw_s;$/;"	t	typeref:struct:__anon13
gwcfg	inc/gwcfg.h	/^    char gwcfg[32];$/;"	m	struct:__anon6
gwdb_atexit	src/db.c	/^static void gwdb_atexit(void)$/;"	f	file:
gwtraf	inc/gwcfg.h	/^	gwtraf$/;"	e	enum:__anon2
gwtraf_push_up	src/gwtraf_serv.c	/^static void gwtraf_push_up(void* arg) {$/;"	f	file:
gwtraf_start	src/gwtraf_serv.c	/^int gwtraf_start(serv_s* serv) {$/;"	f
gwtraf_stop	src/gwtraf_serv.c	/^void gwtraf_stop(serv_s* serv) {$/;"	f
gx	Session.vim	/^nmap gx <Plug>NetrwBrowseX$/;"	m
gx	Session.vim	/^vmap gx <Plug>NetrwBrowseXVis$/;"	m
hal	inc/gwcfg.h	/^    } hal;$/;"	m	struct:__anon13	typeref:struct:__anon13::__anon15
hex2int	src/utilities.c	/^static uint8_t hex2int(char c) {$/;"	f	file:
hex2str	src/utilities.c	/^void hex2str(uint8_t* hex, uint8_t* str, uint8_t len) {$/;"	f
hibit	src/aes.c	/^static uint_8t hibit(const uint_8t x)$/;"	f	file:
i/	Session.vim	/^omap i\/ <Plug>(textobj-lastpat-n)$/;"	m
i?	Session.vim	/^omap i? <Plug>(textobj-lastpat-N)$/;"	m
id	inc/gwcfg.h	/^    pthread_t*  id;$/;"	m	struct:_thread_info
id	inc/mqtt_service.h	/^	char *id;      $/;"	m	struct:_mqttsession_s
info	inc/gwcfg.h	/^    } info;$/;"	m	struct:__anon13	typeref:struct:__anon13::__anon14
info	inc/gwcfg.h	/^    } info;$/;"	m	struct:_server	typeref:struct:_server::__anon9
init_sock	src/service.c	/^int init_sock(const char *addr, const char *port, const void *timeout, int size) {$/;"	f
init_statements	src/db.c	/^static int init_statements(void)$/;"	f	file:
init_stmt	src/db.c	/^static int init_stmt(sqlite3_stmt **stmt, const char *sql, size_t len)$/;"	f	file:
inv_affine	src/aes.c	/^uint_8t inv_affine(const uint_8t x)$/;"	f
inv_mix_sub_columns	src/aes.c	/^  static void inv_mix_sub_columns( uint_8t dt[N_BLOCK] )$/;"	f	file:
inv_shift_sub_rows	src/aes.c	/^static void inv_shift_sub_rows( uint_8t st[N_BLOCK] )$/;"	f	file:
isBigEndian	src/endianext.c	/^bool isBigEndian() {$/;"	f
isLittleEndian	src/endianext.c	/^bool isLittleEndian() {$/;"	f
isMiddleEndian	src/endianext.c	/^bool isMiddleEndian() {$/;"	f
is_box	src/aes.c	208;"	d	file:
is_box	src/aes.c	291;"	d	file:
is_cleanup	src/fwd.c	/^    int is_cleanup;$/;"	m	struct:lgw_atexit	file:
is_decimal	src/parson.c	/^static int is_decimal(const char *string, size_t length) {$/;"	f	file:
is_utf16_hex	src/parson.c	/^static int is_utf16_hex(const unsigned char *s) {$/;"	f	file:
is_valid_utf8	src/parson.c	/^static int is_valid_utf8(const char *string, size_t string_len) {$/;"	f	file:
isb_data	src/aes.c	128;"	d	file:
isbox	src/aes.c	/^static const uint_8t isbox[256] = isb_data(f1);$/;"	v	file:
items	src/parson.c	/^    JSON_Value **items;$/;"	m	struct:json_array_t	file:
jit	inc/gwcfg.h	/^    jit,$/;"	e	enum:__anon4
jit_collision_test	src/jitqueue.c	/^bool jit_collision_test(uint32_t p1_count_us, uint32_t p1_pre_delay, uint32_t p1_post_delay, uint32_t p2_count_us, uint32_t p2_pre_delay, uint32_t p2_post_delay) {$/;"	f
jit_dequeue	src/jitqueue.c	/^enum jit_error_e jit_dequeue(struct jit_queue_s *queue, int index, struct lgw_pkt_tx_s *packet, enum jit_pkt_type_e *pkt_type) {$/;"	f
jit_enqueue	src/jitqueue.c	/^enum jit_error_e jit_enqueue(struct jit_queue_s *queue, uint32_t time_us, struct lgw_pkt_tx_s *packet, enum jit_pkt_type_e pkt_type) {$/;"	f
jit_error_e	inc/jitqueue.h	/^enum jit_error_e {$/;"	g
jit_node_s	inc/jitqueue.h	/^struct jit_node_s {$/;"	s
jit_peek	src/jitqueue.c	/^enum jit_error_e jit_peek(struct jit_queue_s *queue, uint32_t time_us, int *pkt_idx) {$/;"	f
jit_pkt_type_e	inc/jitqueue.h	/^enum jit_pkt_type_e {$/;"	g
jit_print_queue	src/jitqueue.c	/^void jit_print_queue(struct jit_queue_s *queue, bool show_all, int debug_level) {$/;"	f
jit_queue	inc/gwcfg.h	/^        struct jit_queue_s jit_queue[LGW_RF_CHAIN_NB];$/;"	m	struct:__anon13::__anon18	typeref:struct:__anon13::__anon18::jit_queue_s
jit_queue_init	src/jitqueue.c	/^void jit_queue_init(struct jit_queue_s *queue) {$/;"	f
jit_queue_is_empty	src/jitqueue.c	/^bool jit_queue_is_empty(struct jit_queue_s *queue) {$/;"	f
jit_queue_is_full	src/jitqueue.c	/^bool jit_queue_is_full(struct jit_queue_s *queue) {$/;"	f
jit_queue_s	inc/jitqueue.h	/^struct jit_queue_s {$/;"	s
jit_sort_queue	src/jitqueue.c	/^void jit_sort_queue(struct jit_queue_s *queue) {$/;"	f
json_array	src/parson.c	/^JSON_Array * json_array  (const JSON_Value *value) {$/;"	f
json_array_add	src/parson.c	/^static JSON_Status json_array_add(JSON_Array *array, JSON_Value *value) {$/;"	f	file:
json_array_append_boolean	src/parson.c	/^JSON_Status json_array_append_boolean(JSON_Array *array, int boolean) {$/;"	f
json_array_append_null	src/parson.c	/^JSON_Status json_array_append_null(JSON_Array *array) {$/;"	f
json_array_append_number	src/parson.c	/^JSON_Status json_array_append_number(JSON_Array *array, double number) {$/;"	f
json_array_append_string	src/parson.c	/^JSON_Status json_array_append_string(JSON_Array *array, const char *string) {$/;"	f
json_array_append_value	src/parson.c	/^JSON_Status json_array_append_value(JSON_Array *array, JSON_Value *value) {$/;"	f
json_array_clear	src/parson.c	/^JSON_Status json_array_clear(JSON_Array *array) {$/;"	f
json_array_free	src/parson.c	/^static void json_array_free(JSON_Array *array) {$/;"	f	file:
json_array_get_array	src/parson.c	/^JSON_Array * json_array_get_array(const JSON_Array *array, size_t index) {$/;"	f
json_array_get_boolean	src/parson.c	/^int json_array_get_boolean(const JSON_Array *array, size_t index) {$/;"	f
json_array_get_count	src/parson.c	/^size_t json_array_get_count(const JSON_Array *array) {$/;"	f
json_array_get_number	src/parson.c	/^double json_array_get_number(const JSON_Array *array, size_t index) {$/;"	f
json_array_get_object	src/parson.c	/^JSON_Object * json_array_get_object(const JSON_Array *array, size_t index) {$/;"	f
json_array_get_string	src/parson.c	/^const char * json_array_get_string(const JSON_Array *array, size_t index) {$/;"	f
json_array_get_value	src/parson.c	/^JSON_Value * json_array_get_value(const JSON_Array *array, size_t index) {$/;"	f
json_array_init	src/parson.c	/^static JSON_Array * json_array_init(void) {$/;"	f	file:
json_array_remove	src/parson.c	/^JSON_Status json_array_remove(JSON_Array *array, size_t ix) {$/;"	f
json_array_replace_boolean	src/parson.c	/^JSON_Status json_array_replace_boolean(JSON_Array *array, size_t i, int boolean) {$/;"	f
json_array_replace_null	src/parson.c	/^JSON_Status json_array_replace_null(JSON_Array *array, size_t i) {$/;"	f
json_array_replace_number	src/parson.c	/^JSON_Status json_array_replace_number(JSON_Array *array, size_t i, double number) {$/;"	f
json_array_replace_string	src/parson.c	/^JSON_Status json_array_replace_string(JSON_Array *array, size_t i, const char* string) {$/;"	f
json_array_replace_value	src/parson.c	/^JSON_Status json_array_replace_value(JSON_Array *array, size_t ix, JSON_Value *value) {$/;"	f
json_array_resize	src/parson.c	/^static JSON_Status json_array_resize(JSON_Array *array, size_t new_capacity) {$/;"	f	file:
json_array_t	src/parson.c	/^struct json_array_t {$/;"	s	file:
json_boolean	src/parson.c	/^int json_boolean(const JSON_Value *value) {$/;"	f
json_free_serialized_string	src/parson.c	/^void json_free_serialized_string(char *string) {$/;"	f
json_number	src/parson.c	/^double json_number (const JSON_Value *value) {$/;"	f
json_object	src/parson.c	/^JSON_Object * json_object (const JSON_Value *value) {$/;"	f
json_object_add	src/parson.c	/^static JSON_Status json_object_add(JSON_Object *object, const char *name, JSON_Value *value) {$/;"	f	file:
json_object_clear	src/parson.c	/^JSON_Status json_object_clear(JSON_Object *object) {$/;"	f
json_object_dotget_array	src/parson.c	/^JSON_Array * json_object_dotget_array(const JSON_Object *object, const char *name) {$/;"	f
json_object_dotget_boolean	src/parson.c	/^int json_object_dotget_boolean(const JSON_Object *object, const char *name) {$/;"	f
json_object_dotget_number	src/parson.c	/^double json_object_dotget_number(const JSON_Object *object, const char *name) {$/;"	f
json_object_dotget_object	src/parson.c	/^JSON_Object * json_object_dotget_object(const JSON_Object *object, const char *name) {$/;"	f
json_object_dotget_string	src/parson.c	/^const char * json_object_dotget_string(const JSON_Object *object, const char *name) {$/;"	f
json_object_dotget_value	src/parson.c	/^JSON_Value * json_object_dotget_value(const JSON_Object *object, const char *name) {$/;"	f
json_object_dotremove	src/parson.c	/^JSON_Status json_object_dotremove(JSON_Object *object, const char *name) {$/;"	f
json_object_dotset_boolean	src/parson.c	/^JSON_Status json_object_dotset_boolean(JSON_Object *object, const char *name, int boolean) {$/;"	f
json_object_dotset_null	src/parson.c	/^JSON_Status json_object_dotset_null(JSON_Object *object, const char *name) {$/;"	f
json_object_dotset_number	src/parson.c	/^JSON_Status json_object_dotset_number(JSON_Object *object, const char *name, double number) {$/;"	f
json_object_dotset_string	src/parson.c	/^JSON_Status json_object_dotset_string(JSON_Object *object, const char *name, const char *string) {$/;"	f
json_object_dotset_value	src/parson.c	/^JSON_Status json_object_dotset_value(JSON_Object *object, const char *name, JSON_Value *value) {$/;"	f
json_object_free	src/parson.c	/^static void json_object_free(JSON_Object *object) {$/;"	f	file:
json_object_get_array	src/parson.c	/^JSON_Array * json_object_get_array(const JSON_Object *object, const char *name) {$/;"	f
json_object_get_boolean	src/parson.c	/^int json_object_get_boolean(const JSON_Object *object, const char *name) {$/;"	f
json_object_get_count	src/parson.c	/^size_t json_object_get_count(const JSON_Object *object) {$/;"	f
json_object_get_name	src/parson.c	/^const char * json_object_get_name(const JSON_Object *object, size_t index) {$/;"	f
json_object_get_number	src/parson.c	/^double json_object_get_number(const JSON_Object *object, const char *name) {$/;"	f
json_object_get_object	src/parson.c	/^JSON_Object * json_object_get_object(const JSON_Object *object, const char *name) {$/;"	f
json_object_get_string	src/parson.c	/^const char * json_object_get_string(const JSON_Object *object, const char *name) {$/;"	f
json_object_get_value	src/parson.c	/^JSON_Value * json_object_get_value(const JSON_Object *object, const char *name) {$/;"	f
json_object_init	src/parson.c	/^static JSON_Object * json_object_init(void) {$/;"	f	file:
json_object_nget_value	src/parson.c	/^static JSON_Value * json_object_nget_value(const JSON_Object *object, const char *name, size_t n) {$/;"	f	file:
json_object_remove	src/parson.c	/^JSON_Status json_object_remove(JSON_Object *object, const char *name) {$/;"	f
json_object_resize	src/parson.c	/^static JSON_Status json_object_resize(JSON_Object *object, size_t new_capacity) {$/;"	f	file:
json_object_set_boolean	src/parson.c	/^JSON_Status json_object_set_boolean(JSON_Object *object, const char *name, int boolean) {$/;"	f
json_object_set_null	src/parson.c	/^JSON_Status json_object_set_null(JSON_Object *object, const char *name) {$/;"	f
json_object_set_number	src/parson.c	/^JSON_Status json_object_set_number(JSON_Object *object, const char *name, double number) {$/;"	f
json_object_set_string	src/parson.c	/^JSON_Status json_object_set_string(JSON_Object *object, const char *name, const char *string) {$/;"	f
json_object_set_value	src/parson.c	/^JSON_Status json_object_set_value(JSON_Object *object, const char *name, JSON_Value *value) {$/;"	f
json_object_t	src/parson.c	/^struct json_object_t {$/;"	s	file:
json_parse_file	src/parson.c	/^JSON_Value * json_parse_file(const char *filename) {$/;"	f
json_parse_file_with_comments	src/parson.c	/^JSON_Value * json_parse_file_with_comments(const char *filename) {$/;"	f
json_parse_string	src/parson.c	/^JSON_Value * json_parse_string(const char *string) {$/;"	f
json_parse_string_with_comments	src/parson.c	/^JSON_Value * json_parse_string_with_comments(const char *string) {$/;"	f
json_result_t	inc/parson.h	/^enum json_result_t {$/;"	g
json_serialization_size	src/parson.c	/^size_t json_serialization_size(const JSON_Value *value) {$/;"	f
json_serialization_size_pretty	src/parson.c	/^size_t json_serialization_size_pretty(const JSON_Value *value) {$/;"	f
json_serialize_string	src/parson.c	/^static int json_serialize_string(const char *string, char *buf) {$/;"	f	file:
json_serialize_to_buffer	src/parson.c	/^JSON_Status json_serialize_to_buffer(const JSON_Value *value, char *buf, size_t buf_size_in_bytes) {$/;"	f
json_serialize_to_buffer_pretty	src/parson.c	/^JSON_Status json_serialize_to_buffer_pretty(const JSON_Value *value, char *buf, size_t buf_size_in_bytes) {$/;"	f
json_serialize_to_buffer_r	src/parson.c	/^static int json_serialize_to_buffer_r(const JSON_Value *value, char *buf, int level, int is_pretty, char *num_buf)$/;"	f	file:
json_serialize_to_file	src/parson.c	/^JSON_Status json_serialize_to_file(const JSON_Value *value, const char *filename) {$/;"	f
json_serialize_to_file_pretty	src/parson.c	/^JSON_Status json_serialize_to_file_pretty(const JSON_Value *value, const char *filename) {$/;"	f
json_serialize_to_string	src/parson.c	/^char * json_serialize_to_string(const JSON_Value *value) {$/;"	f
json_serialize_to_string_pretty	src/parson.c	/^char * json_serialize_to_string_pretty(const JSON_Value *value) {$/;"	f
json_set_allocation_functions	src/parson.c	/^void json_set_allocation_functions(JSON_Malloc_Function malloc_fun, JSON_Free_Function free_fun) {$/;"	f
json_string	src/parson.c	/^const char * json_string (const JSON_Value *value) {$/;"	f
json_type	src/parson.c	/^JSON_Value_Type json_type(const JSON_Value *value) {$/;"	f
json_validate	src/parson.c	/^JSON_Status json_validate(const JSON_Value *schema, const JSON_Value *value) {$/;"	f
json_value_deep_copy	src/parson.c	/^JSON_Value * json_value_deep_copy(const JSON_Value *value) {$/;"	f
json_value_equals	src/parson.c	/^JSON_Status json_value_equals(const JSON_Value *a, const JSON_Value *b) {$/;"	f
json_value_free	src/parson.c	/^void json_value_free(JSON_Value *value) {$/;"	f
json_value_get_array	src/parson.c	/^JSON_Array * json_value_get_array(const JSON_Value *value) {$/;"	f
json_value_get_boolean	src/parson.c	/^int json_value_get_boolean(const JSON_Value *value) {$/;"	f
json_value_get_number	src/parson.c	/^double json_value_get_number(const JSON_Value *value) {$/;"	f
json_value_get_object	src/parson.c	/^JSON_Object * json_value_get_object(const JSON_Value *value) {$/;"	f
json_value_get_string	src/parson.c	/^const char * json_value_get_string(const JSON_Value *value) {$/;"	f
json_value_get_type	src/parson.c	/^JSON_Value_Type json_value_get_type(const JSON_Value *value) {$/;"	f
json_value_init_array	src/parson.c	/^JSON_Value * json_value_init_array(void) {$/;"	f
json_value_init_boolean	src/parson.c	/^JSON_Value * json_value_init_boolean(int boolean) {$/;"	f
json_value_init_null	src/parson.c	/^JSON_Value * json_value_init_null(void) {$/;"	f
json_value_init_number	src/parson.c	/^JSON_Value * json_value_init_number(double number) {$/;"	f
json_value_init_object	src/parson.c	/^JSON_Value * json_value_init_object(void) {$/;"	f
json_value_init_string	src/parson.c	/^JSON_Value * json_value_init_string(const char *string) {$/;"	f
json_value_init_string_no_copy	src/parson.c	/^static JSON_Value * json_value_init_string_no_copy(char *string) {$/;"	f	file:
json_value_t	src/parson.c	/^struct json_value_t {$/;"	s	file:
json_value_type	inc/parson.h	/^enum json_value_type {$/;"	g
json_value_value	src/parson.c	/^typedef union json_value_value {$/;"	u	file:
key	inc/db.h	/^	char *key;$/;"	m	struct:lgw_db_entry
key	inc/gwcfg.h	/^        char *key;			        \/\/ gateway key to connect to service$/;"	m	struct:_server::__anon9
key	inc/mqtt_service.h	/^	char *key;     $/;"	m	struct:_mqttsession_s
ksch	inc/aes.h	/^{   uint_8t ksch[(N_MAX_ROUNDS + 1) * N_BLOCK];$/;"	m	struct:__anon22
last_loop	inc/gwcfg.h	/^        time_t   last_loop;               \/* timestamp for watchdog *\/$/;"	m	struct:__anon13::__anon16
length_type	inc/aes.h	/^typedef uint_8t length_type;$/;"	t
lgw_alloca	inc/lgwmm.h	162;"	d
lgw_asprintf	inc/lgwmm.h	141;"	d
lgw_assert	inc/utilities.h	240;"	d
lgw_assert	inc/utilities.h	255;"	d
lgw_assert_return	inc/utilities.h	241;"	d
lgw_assert_return	inc/utilities.h	256;"	d
lgw_atexit	src/fwd.c	/^struct lgw_atexit {$/;"	s	file:
lgw_background_stacksize	src/utilities.c	/^int lgw_background_stacksize(void)$/;"	f
lgw_calloc	inc/lgwmm.h	76;"	d
lgw_calloc_cache	inc/lgwmm.h	89;"	d
lgw_db_begin_transaction	src/db.c	/^static int lgw_db_begin_transaction(void)$/;"	f	file:
lgw_db_commit_transaction	src/db.c	/^static int lgw_db_commit_transaction(void)$/;"	f	file:
lgw_db_del	src/db.c	/^int lgw_db_del(const char *family, const char *key)$/;"	f
lgw_db_deltree	src/db.c	/^int lgw_db_deltree(const char *family, const char *keytree)$/;"	f
lgw_db_entry	inc/db.h	/^struct lgw_db_entry {$/;"	s
lgw_db_freetree	src/db.c	/^void lgw_db_freetree(struct lgw_db_entry *dbe)$/;"	f
lgw_db_get	src/db.c	/^int lgw_db_get(const char *family, const char *key, char *value, int valuelen)$/;"	f
lgw_db_get_allocated	src/db.c	/^int lgw_db_get_allocated(const char *family, const char *key, char **out)$/;"	f
lgw_db_gettree	src/db.c	/^struct lgw_db_entry *lgw_db_gettree(const char *family, const char *keytree)$/;"	f
lgw_db_gettree_by_prefix	src/db.c	/^struct lgw_db_entry *lgw_db_gettree_by_prefix(const char *family, const char *key_prefix)$/;"	f
lgw_db_init	src/db.c	/^int lgw_db_init(void)$/;"	f
lgw_db_key_exist	src/db.c	/^bool lgw_db_key_exist(const char *key) {$/;"	f
lgw_db_put	src/db.c	/^int lgw_db_put(const char *family, const char *key, const char *value)$/;"	f
lgw_db_rollback_transaction	src/db.c	/^static int lgw_db_rollback_transaction(void)$/;"	f	file:
lgw_do_crash	src/utilities.c	/^void DO_CRASH_NORETURN lgw_do_crash(void)$/;"	f
lgw_free	inc/lgwmm.h	54;"	d
lgw_free_ptr	src/lgwmm.c	/^void lgw_free_ptr(void *ptr)$/;"	f
lgw_gen_str	src/utilities.c	/^char* lgw_gen_str(char *str, int size) {$/;"	f
lgw_get_tid	src/utilities.c	/^int lgw_get_tid(void)$/;"	f
lgw_log	inc/logger.h	49;"	d
lgw_malloc	inc/lgwmm.h	65;"	d
lgw_memcpy	src/utilities.c	/^void lgw_memcpy( uint8_t *dst, const uint8_t *src, uint16_t size )$/;"	f
lgw_memcpyr	src/utilities.c	/^void lgw_memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )$/;"	f
lgw_memset	src/utilities.c	/^void lgw_memset( uint8_t *dst, uint8_t value, uint16_t size )$/;"	f
lgw_msg	inc/logger.h	47;"	d
lgw_pthread_create	inc/utilities.h	187;"	d
lgw_pthread_create_background	inc/utilities.h	195;"	d
lgw_pthread_create_detached	inc/utilities.h	191;"	d
lgw_pthread_create_detached_background	inc/utilities.h	200;"	d
lgw_pthread_create_detached_stack	src/utilities.c	/^int lgw_pthread_create_detached_stack(pthread_t *thread, pthread_attr_t *attr, void *(*start_routine)(void *),$/;"	f
lgw_pthread_create_stack	src/utilities.c	/^int lgw_pthread_create_stack(pthread_t *thread, pthread_attr_t *attr, void *(*start_routine)(void *),$/;"	f
lgw_rand	src/utilities.c	/^int32_t lgw_rand( void )$/;"	f
lgw_randr	src/utilities.c	/^int32_t lgw_randr( int32_t min, int32_t max )$/;"	f
lgw_realloc	inc/lgwmm.h	100;"	d
lgw_register_atexit	src/fwd.c	/^int lgw_register_atexit(void (*func)(void))$/;"	f
lgw_register_cleanup	src/fwd.c	/^int lgw_register_cleanup(void (*func)(void))$/;"	f
lgw_run_atexits	src/fwd.c	/^static void lgw_run_atexits(int run_cleanups)$/;"	f	file:
lgw_srand	src/utilities.c	/^void lgw_srand( uint32_t seed )$/;"	f
lgw_std_calloc	src/lgwmm.c	/^void *lgw_std_calloc(size_t nmemb, size_t size)$/;"	f
lgw_std_free	src/lgwmm.c	/^void lgw_std_free(void *ptr)$/;"	f
lgw_std_malloc	src/lgwmm.c	/^void *lgw_std_malloc(size_t size)$/;"	f
lgw_std_realloc	src/lgwmm.c	/^void *lgw_std_realloc(void *ptr, size_t size)$/;"	f
lgw_strdup	inc/lgwmm.h	115;"	d
lgw_strdupa	inc/lgwmm.h	172;"	d
lgw_strlen_zero	inc/utilities.h	/^static force_inline int attribute_pure lgw_strlen_zero(const char *s)$/;"	f
lgw_strlen_zero	inc/utilities.h	274;"	d
lgw_strndup	inc/lgwmm.h	130;"	d
lgw_unregister_atexit	src/fwd.c	/^void lgw_unregister_atexit(void (*func)(void))$/;"	f
lgw_vasprintf	inc/lgwmm.h	152;"	d
lgwm	inc/gwcfg.h	/^        uint64_t  lgwm;			\/* Lora gateway MAC address *\/$/;"	m	struct:__anon13::__anon14
list	inc/gwcfg.h	/^    LGW_LIST_ENTRY(_rxpkts) list;$/;"	m	struct:_rxpkts
list	inc/gwcfg.h	/^    LGW_LIST_ENTRY(_server) list;$/;"	m	struct:_server
list	inc/gwcfg.h	/^    LGW_LIST_ENTRY(_thread_info) list;$/;"	m	struct:_thread_info
list	inc/pkt_service.h	/^	LGW_LIST_ENTRY(_dn_pkt) list;$/;"	m	struct:_dn_pkt
live	inc/gwcfg.h	/^        bool live;					\/\/ Server is life?$/;"	m	struct:_server::__anon11
log	inc/gwcfg.h	/^    } log;$/;"	m	struct:__anon13	typeref:struct:__anon13::__anon20
logfile	inc/gwcfg.h	/^        char *logfile;             \/* path to logfile *\/$/;"	m	struct:__anon13::__anon20
logger_enabled	inc/gwcfg.h	/^        bool logger_enabled;       \/* controls the activation of more logging *\/$/;"	m	struct:__anon13::__anon20
mac2db	inc/gwcfg.h	/^        bool     mac2db;                  \/* if payload text save to database *\/$/;"	m	struct:__anon13::__anon16
mac2file	inc/gwcfg.h	/^        bool     mac2file;                \/* if payload text save to file *\/$/;"	m	struct:__anon13::__anon16
mac_decoded	inc/gwcfg.h	/^        bool     mac_decoded;             \/* if mac header decode for abp *\/$/;"	m	struct:__anon13::__anon16
main	src/fwd.c	/^int main(int argc, char *argv[]) {$/;"	f
malloc	src/parson.c	49;"	d	file:
max_stall	inc/gwcfg.h	/^        int  max_stall;				\/\/ max number of missed responses$/;"	m	struct:_server::__anon11
meas_dw_ack_rcv	inc/stats.h	/^	uint32_t meas_dw_ack_rcv;$/;"	m	struct:__anon25
meas_dw_dgram_acp	inc/stats.h	/^	uint32_t meas_dw_dgram_acp;$/;"	m	struct:__anon25
meas_dw_dgram_rcv	inc/stats.h	/^	uint32_t meas_dw_dgram_rcv;$/;"	m	struct:__anon25
meas_dw_network_byte	inc/stats.h	/^	uint32_t meas_dw_network_byte;$/;"	m	struct:__anon25
meas_dw_payload_byte	inc/stats.h	/^	uint32_t meas_dw_payload_byte;$/;"	m	struct:__anon25
meas_dw_pull_sent	inc/stats.h	/^	uint32_t meas_dw_pull_sent;$/;"	m	struct:__anon25
meas_gps_coord	inc/gwcfg.h	/^        struct coord_s meas_gps_coord;  \/* GPS position of the gateway *\/$/;"	m	struct:__anon13::__anon17	typeref:struct:__anon13::__anon17::coord_s
meas_gps_err	inc/gwcfg.h	/^        struct coord_s meas_gps_err;    \/* GPS position of the gateway *\/$/;"	m	struct:__anon13::__anon17	typeref:struct:__anon13::__anon17::coord_s
meas_nb_beacon_queued	inc/gwcfg.h	/^        uint32_t meas_nb_beacon_queued;$/;"	m	struct:__anon13::__anon19
meas_nb_beacon_queued	inc/stats.h	/^    uint32_t meas_nb_beacon_queued;$/;"	m	struct:__anon27
meas_nb_beacon_rejected	inc/gwcfg.h	/^        uint32_t meas_nb_beacon_rejected;$/;"	m	struct:__anon13::__anon19
meas_nb_beacon_rejected	inc/stats.h	/^    uint32_t meas_nb_beacon_rejected;$/;"	m	struct:__anon27
meas_nb_beacon_sent	inc/gwcfg.h	/^        uint32_t meas_nb_beacon_sent;$/;"	m	struct:__anon13::__anon19
meas_nb_beacon_sent	inc/stats.h	/^    uint32_t meas_nb_beacon_sent;$/;"	m	struct:__anon27
meas_nb_rx_bad	inc/stats.h	/^	uint32_t meas_nb_rx_bad;$/;"	m	struct:__anon26
meas_nb_rx_nocrc	inc/stats.h	/^	uint32_t meas_nb_rx_nocrc;$/;"	m	struct:__anon26
meas_nb_rx_ok	inc/stats.h	/^	uint32_t meas_nb_rx_ok;$/;"	m	struct:__anon26
meas_nb_rx_rcv	inc/stats.h	/^	uint32_t meas_nb_rx_rcv;$/;"	m	struct:__anon26
meas_nb_tx_fail	inc/stats.h	/^	uint32_t meas_nb_tx_fail;$/;"	m	struct:__anon25
meas_nb_tx_ok	inc/stats.h	/^	uint32_t meas_nb_tx_ok;$/;"	m	struct:__anon25
meas_nb_tx_rejected_collision_beacon	inc/stats.h	/^	uint32_t meas_nb_tx_rejected_collision_beacon;$/;"	m	struct:__anon25
meas_nb_tx_rejected_collision_packet	inc/stats.h	/^	uint32_t meas_nb_tx_rejected_collision_packet;$/;"	m	struct:__anon25
meas_nb_tx_rejected_too_early	inc/stats.h	/^	uint32_t meas_nb_tx_rejected_too_early;$/;"	m	struct:__anon25
meas_nb_tx_rejected_too_late	inc/stats.h	/^	uint32_t meas_nb_tx_rejected_too_late;$/;"	m	struct:__anon25
meas_nb_tx_requested	inc/stats.h	/^	uint32_t meas_nb_tx_requested;$/;"	m	struct:__anon25
meas_up_ack_rcv	inc/stats.h	/^    uint32_t meas_up_ack_rcv;$/;"	m	struct:__anon26
meas_up_dgram_sent	inc/stats.h	/^    uint32_t meas_up_dgram_sent;$/;"	m	struct:__anon26
meas_up_network_byte	inc/stats.h	/^    uint32_t meas_up_network_byte;$/;"	m	struct:__anon26
meas_up_payload_byte	inc/stats.h	/^    uint32_t meas_up_payload_byte;$/;"	m	struct:__anon26
meas_up_pkt_fwd	inc/stats.h	/^	uint32_t meas_up_pkt_fwd;$/;"	m	struct:__anon26
mix	src/ghost.c	/^} mix;$/;"	t	typeref:union:__anon1	file:
mix_sub_columns	src/aes.c	/^  static void mix_sub_columns( uint_8t dt[N_BLOCK] )$/;"	f	file:
mm_data	src/aes.c	162;"	d	file:
mqtt	inc/gwcfg.h	/^    mqtt,$/;"	e	enum:__anon2
mqtt	inc/gwcfg.h	/^    mqttinfo_s *mqtt;$/;"	m	struct:__anon8
mqtt_checkconnected	src/mqtt_serv.c	/^static int mqtt_checkconnected(mqttsession_s *session) {$/;"	f	file:
mqtt_cleanup	src/mqtt_serv.c	/^static void mqtt_cleanup(mqttsession_s* session) {$/;"	f	file:
mqtt_connect	src/mqtt_serv.c	/^static int mqtt_connect(serv_s *serv) {$/;"	f	file:
mqtt_disconnect	src/mqtt_serv.c	/^static void mqtt_disconnect(mqttsession_s *session) {$/;"	f	file:
mqtt_dnlink_cb	src/mqtt_serv.c	/^static void mqtt_dnlink_cb(struct MessageData *data, void* s) {$/;"	f	file:
mqtt_getrtt	src/mqtt_serv.c	/^static long mqtt_getrtt(mqttsession_s *session) {$/;"	f	file:
mqtt_init	src/mqtt_serv.c	/^static void mqtt_init(serv_s* serv){$/;"	f	file:
mqtt_push_up	src/mqtt_serv.c	/^static void mqtt_push_up(void* arg) {$/;"	f	file:
mqtt_reconnect	src/mqtt_serv.c	/^static int mqtt_reconnect(serv_s* serv) {$/;"	f	file:
mqtt_send_uplink	src/mqtt_serv.c	/^static int mqtt_send_uplink(mqttsession_s *session, char *uplink, int len) {$/;"	f	file:
mqtt_sendping	src/mqtt_serv.c	/^static int mqtt_sendping(mqttsession_s *session) {$/;"	f	file:
mqtt_start	src/mqtt_serv.c	/^int mqtt_start(serv_s* serv) {$/;"	f
mqtt_stop	src/mqtt_serv.c	/^void mqtt_stop(serv_s* serv) {$/;"	f
mqttinfo_s	inc/gwcfg.h	/^} mqttinfo_s;$/;"	t	typeref:struct:__anon7
mqttsession_s	inc/mqtt_service.h	/^} mqttsession_s;$/;"	t	typeref:struct:_mqttsession_s
mx_bind_lock	inc/gwcfg.h	/^    pthread_mutex_t mx_bind_lock;	    \/\/ control access to the rxpkts bind$/;"	m	struct:__anon13
mx_concent	inc/gwcfg.h	/^        pthread_mutex_t mx_concent;$/;"	m	struct:__anon13::__anon15
mx_dblock	src/db.c	/^pthread_mutex_t mx_dblock = PTHREAD_MUTEX_INITIALIZER;$/;"	v
mx_jit_queue	src/jitqueue.c	/^static pthread_mutex_t mx_jit_queue = PTHREAD_MUTEX_INITIALIZER; \/* control access to JIT queue *\/$/;"	v	file:
mx_meas_gps	inc/gwcfg.h	/^        pthread_mutex_t mx_meas_gps;	\/* control access to the GPS statistics *\/$/;"	m	struct:__anon13::__anon17
mx_report	inc/gwcfg.h	/^        pthread_mutex_t mx_report;	 \/\/ control access to the queue for each server$/;"	m	struct:__anon13::__anon20
mx_report	inc/stats.h	/^    pthread_mutex_t mx_report;	 \/\/ control access to the queue for each server$/;"	m	struct:__anon27
mx_timeref	inc/gwcfg.h	/^        pthread_mutex_t mx_timeref;	    \/* control access to GPS time reference *\/$/;"	m	struct:__anon13::__anon17
mx_timersync	src/timersync.c	/^static pthread_mutex_t mx_timersync = PTHREAD_MUTEX_INITIALIZER; \/* control access to timer sync offsets *\/$/;"	v	file:
mx_xcorr	inc/gwcfg.h	/^        pthread_mutex_t mx_xcorr;$/;"	m	struct:__anon13::__anon15
name	inc/gwcfg.h	/^        char name[32];              \/\/ identify of server$/;"	m	struct:_server::__anon9
name	inc/gwcfg.h	/^    char*       name;$/;"	m	struct:_thread_info
name	src/utilities.c	/^	char *name;$/;"	m	struct:thr_arg	file:
names	src/parson.c	/^    char       **names;$/;"	m	struct:json_object_t	file:
nb_pkt	inc/gwcfg.h	/^    uint8_t nb_pkt;$/;"	m	struct:_rxpkts
nb_pkt_log	inc/gwcfg.h	/^        uint32_t nb_pkt_log[LGW_IF_CHAIN_NB];  \/* [CH][SF] *\/$/;"	m	struct:__anon13::__anon20
nb_pkt_received_fsk	inc/gwcfg.h	/^        uint32_t nb_pkt_received_fsk;$/;"	m	struct:__anon13::__anon20
nb_pkt_received_lora	inc/gwcfg.h	/^        uint32_t nb_pkt_received_lora;$/;"	m	struct:__anon13::__anon20
nb_pkt_received_ref	inc/gwcfg.h	/^        uint32_t nb_pkt_received_ref[16];$/;"	m	struct:__anon13::__anon20
net	inc/gwcfg.h	/^    serv_net_s* net;$/;"	m	struct:_server
net_mac_h	inc/gwcfg.h	/^        uint32_t net_mac_h;$/;"	m	struct:__anon13::__anon14
net_mac_l	inc/gwcfg.h	/^        uint32_t net_mac_l;$/;"	m	struct:__anon13::__anon14
network	inc/mqtt_service.h	/^	Network network;$/;"	m	struct:_mqttsession_s
next	inc/db.h	/^	struct lgw_db_entry *next;$/;"	m	struct:lgw_db_entry	typeref:struct:lgw_db_entry::lgw_db_entry
next	src/utilities.c	/^static uint32_t next = 1;$/;"	v	file:
nibble2hexchar	src/utilities.c	/^int8_t nibble2hexchar( uint8_t a )$/;"	f
nodes	inc/jitqueue.h	/^    struct jit_node_s nodes[JIT_QUEUE_MAX]; \/* Nodes\/packets array in the queue *\/$/;"	m	struct:jit_queue_s	typeref:struct:jit_queue_s::jit_node_s
null	src/parson.c	/^    int          null;$/;"	m	union:json_value_value	file:
num_beacon	inc/jitqueue.h	/^    uint8_t num_beacon;             \/* Number of beacons in the queue *\/$/;"	m	struct:jit_queue_s
num_bytes_in_utf8_sequence	src/parson.c	/^static int num_bytes_in_utf8_sequence(unsigned char c) {$/;"	f	file:
num_pkt	inc/jitqueue.h	/^    uint8_t num_pkt;                \/* Total number of packets in the queue (downlinks, beacons...) *\/$/;"	m	struct:jit_queue_s
number	src/parson.c	/^    double       number;$/;"	m	union:json_value_value	file:
nwkskey	inc/mac-header-decode.h	/^    uint8_t nwkskey[16];$/;"	m	struct:__anon21
nwkskey_str	inc/mac-header-decode.h	/^    char nwkskey_str[33];$/;"	m	struct:__anon21
object	src/parson.c	/^    JSON_Object *object;$/;"	m	union:json_value_value	file:
offset_unix_concent	src/timersync.c	/^static struct timeval offset_unix_concent = {0,0}; \/* timer offset between unix host and concentrator *\/$/;"	v	typeref:struct:timeval	file:
parse_SX130x_configuration	src/gwcfg.c	/^static int parse_SX130x_configuration(const char* conf_file) {$/;"	f	file:
parse_array_value	src/parson.c	/^static JSON_Value * parse_array_value(const char **string, size_t nesting) {$/;"	f	file:
parse_boolean_value	src/parson.c	/^static JSON_Value * parse_boolean_value(const char **string) {$/;"	f	file:
parse_debug_configuration	src/gwcfg.c	/^static int parse_debug_configuration(const char * conf_file) {$/;"	f	file:
parse_gateway_configuration	src/gwcfg.c	/^static int parse_gateway_configuration(const char* conf_file) {$/;"	f	file:
parse_null_value	src/parson.c	/^static JSON_Value * parse_null_value(const char **string) {$/;"	f	file:
parse_number_value	src/parson.c	/^static JSON_Value * parse_number_value(const char **string) {$/;"	f	file:
parse_object_value	src/parson.c	/^static JSON_Value * parse_object_value(const char **string, size_t nesting) {$/;"	f	file:
parse_string_value	src/parson.c	/^static JSON_Value * parse_string_value(const char **string) {$/;"	f	file:
parse_utf_16	src/parson.c	/^static int parse_utf_16(const char **unprocessed, char **processed) {$/;"	f	file:
parse_value	src/parson.c	/^static JSON_Value * parse_value(const char **string, size_t nesting) {$/;"	f	file:
parsecfg	src/gwcfg.c	/^int parsecfg() {$/;"	f
parson_free	src/parson.c	/^static JSON_Free_Function parson_free = free;$/;"	v	file:
parson_malloc	src/parson.c	/^static JSON_Malloc_Function parson_malloc = malloc;$/;"	v	file:
parson_parson_h	inc/parson.h	25;"	d
parson_strdup	src/parson.c	/^static char * parson_strdup(const char *string) {$/;"	f	file:
parson_strndup	src/parson.c	/^static char * parson_strndup(const char *string, size_t n) {$/;"	f	file:
payload	inc/pkt_service.h	/^    uint8_t payload[512];$/;"	m	struct:_dn_pkt
payload_deal	src/mqtt_serv.c	/^static int payload_deal(mqttsession_s* session, struct lgw_pkt_rx_s* p) {$/;"	f	file:
pdformat	inc/pkt_service.h	/^    char pdformat[8];$/;"	m	struct:_dn_pkt
pkt	inc/gwcfg.h	/^    pkt,$/;"	e	enum:__anon2
pkt	inc/jitqueue.h	/^    struct lgw_pkt_tx_s pkt;        \/* TX packet *\/$/;"	m	struct:jit_node_s	typeref:struct:jit_node_s::lgw_pkt_tx_s
pkt_basic_filter	src/service.c	/^bool pkt_basic_filter(serv_s* serv, const uint32_t addr, const uint8_t fport) {$/;"	f
pkt_deal_up	src/pkt_serv.c	/^static void pkt_deal_up(void* arg) {$/;"	f	file:
pkt_prepare_downlink	src/pkt_serv.c	/^static void pkt_prepare_downlink(void* arg) {$/;"	f	file:
pkt_start	src/pkt_serv.c	/^int pkt_start(serv_s* serv) {$/;"	f
pkt_stop	src/pkt_serv.c	/^void pkt_stop(serv_s* serv) {$/;"	f
pkt_type	inc/jitqueue.h	/^    enum jit_pkt_type_e pkt_type;   \/* Packet type: Downlink, Beacon... *\/$/;"	m	struct:jit_node_s	typeref:enum:jit_node_s::jit_pkt_type_e
pkttraf	inc/gwcfg.h	/^    pkttraf,$/;"	e	enum:__anon4
platform	inc/gwcfg.h	/^        char platform[24];	    \/* platform definition *\/$/;"	m	struct:__anon13::__anon14
port_down	inc/gwcfg.h	/^    char port_down[8];			\/\/ downlink port $/;"	m	struct:__anon8
port_up	inc/gwcfg.h	/^    char port_up[8];			\/\/ uplink port $/;"	m	struct:__anon8
post_delay	inc/jitqueue.h	/^    uint32_t post_delay;            \/* Amount of time after packet timestamp to be reserved (time on air) *\/$/;"	m	struct:jit_node_s
pre_delay	inc/jitqueue.h	/^    uint32_t pre_delay;             \/* Amount of time before packet timestamp to be reserved *\/$/;"	m	struct:jit_node_s
prepare_frame	src/pkt_serv.c	/^static void prepare_frame(uint8_t type, devinfo_s *devinfo, uint32_t downcnt, const uint8_t* payload, int payload_size, uint8_t* frame, int* frame_size) {$/;"	f	file:
printBuffer	src/ghost.c	/^static void printBuffer(uint8_t * b, uint8_t len) {$/;"	f	file:
printRX	src/ghost.c	/^static void printRX(struct lgw_pkt_rx_s *p) {$/;"	f	file:
print_tx_status	src/fwd.c	/^void print_tx_status(uint8_t tx_status) {$/;"	f
printf_mac_header	src/mac-header-decode.c	/^void printf_mac_header( LoRaMacMessageData_t* macMsg )$/;"	f
process_string	src/parson.c	/^static char* process_string(const char *input, size_t len) {$/;"	f	file:
psize	inc/pkt_service.h	/^    uint8_t psize;$/;"	m	struct:_dn_pkt
pull_interval	inc/gwcfg.h	/^    int  pull_interval;	        \/\/ send a PULL_DATA request every X seconds $/;"	m	struct:__anon8
pull_timeout	inc/gwcfg.h	/^    struct timeval pull_timeout;$/;"	m	struct:__anon8	typeref:struct:__anon8::timeval
push_timeout_half	inc/gwcfg.h	/^    struct timeval push_timeout_half;       \/* time-out value (in ms) for upstream datagrams *\/$/;"	m	struct:__anon8	typeref:struct:__anon8::timeval
qsort_r	src/jitqueue.c	/^static void qsort_r(void *base, size_t nel, size_t width, __compar_d_fn_t comp, void *arg) {$/;"	f	file:
quit_sig	src/fwd.c	/^volatile bool quit_sig = false;	\/* 1 -> application terminates without shutting down the hardware *\/$/;"	v
radiostream_enabled	inc/gwcfg.h	/^        bool     radiostream_enabled;	$/;"	m	struct:__anon13::__anon16
readRX	src/ghost.c	/^static void readRX(struct lgw_pkt_rx_s *p, uint8_t * b) {$/;"	f	file:
read_buffer	inc/mqtt_service.h	/^	unsigned char *read_buffer;$/;"	m	struct:_mqttsession_s
read_file	src/parson.c	/^static char * read_file(const char * filename) {$/;"	f	file:
reference_coord	inc/gwcfg.h	/^        struct coord_s reference_coord; \/* Reference coordinates, for broadcasting (beacon) *\/$/;"	m	struct:__anon13::__anon17	typeref:struct:__anon13::__anon17::coord_s
reference_coord	src/ghost.c	/^static struct coord_s reference_coord;$/;"	v	typeref:struct:coord_s	file:
region	inc/gwcfg.h	/^        region_s   region;$/;"	m	struct:__anon13::__anon16
region_s	inc/gwcfg.h	/^} region_s;$/;"	t	typeref:enum:__anon3
register_atexit	src/fwd.c	/^static int register_atexit(void (*func)(void), int is_cleanup)$/;"	f	file:
remove_comments	src/parson.c	/^static void remove_comments(char *string, const char *start_token, const char *end_token) {$/;"	f	file:
report	inc/gwcfg.h	/^    report_s* report;$/;"	m	struct:_server
report_ready	inc/stats.h	/^    bool report_ready;$/;"	m	struct:__anon27
report_s	inc/stats.h	/^} report_s;$/;"	t	typeref:struct:__anon27
report_start	src/stats.c	/^void report_start() {$/;"	f
return_type	inc/aes.h	/^typedef uint_8t return_type;$/;"	t
rijndael	inc/cmac.h	/^            aes_context    rijndael;$/;"	m	struct:_AES_CMAC_CTX
rnd	inc/aes.h	/^    uint_8t rnd;$/;"	m	struct:__anon22
runing	inc/gwcfg.h	/^    bool        runing;$/;"	m	struct:_thread_info
rx2bw	src/pkt_serv.c	/^static uint8_t rx2bw;$/;"	v	file:
rx2dr	src/pkt_serv.c	/^static uint8_t rx2dr;$/;"	v	file:
rx2freq	src/pkt_serv.c	/^static uint32_t rx2freq;$/;"	v	file:
rxpkt	inc/gwcfg.h	/^    struct lgw_pkt_rx_s rxpkt[NB_PKT_MAX];$/;"	m	struct:_rxpkts	typeref:struct:_rxpkts::lgw_pkt_rx_s
rxpkt	inc/gwcfg.h	/^    struct lgw_pkt_rx_s rxpkt[NB_PKT_MAX];$/;"	m	struct:_server	typeref:struct:_server::lgw_pkt_rx_s
rxpkts	inc/gwcfg.h	/^    rxpkts,$/;"	e	enum:__anon4
rxpkts_list	inc/gwcfg.h	/^    struct rxpkts_list rxpkts_list;$/;"	m	struct:__anon13	typeref:struct:__anon13::rxpkts_list
rxpkts_s	inc/gwcfg.h	/^} rxpkts_s;$/;"	t	typeref:struct:_rxpkts
s:cpo_save	Session.vim	/^let s:cpo_save=&cpo$/;"	v
s:l	Session.vim	/^let s:l = 138 - ((18 * winheight(0) + 9) \/ 19)$/;"	v
s:l	Session.vim	/^let s:l = 284 - ((0 * winheight(0) + 9) \/ 19)$/;"	v
s:so_save	Session.vim	/^let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0$/;"	v
s:sx	Session.vim	/^let s:sx = expand("<sfile>:p:r")."x.vim"$/;"	v
s:wipebuf	Session.vim	/^  let s:wipebuf = bufnr('%')$/;"	v
sBlock	src/loramac-crypto.c	/^static uint8_t sBlock[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,$/;"	v	file:
sCtrlBits	inc/mac-header-decode.h	/^    struct sCtrlBits$/;"	s	union:uLoRaMacFrameCtrl
sDLSettingsBits	inc/mac-header-decode.h	/^    struct sDLSettingsBits$/;"	s	union:uLoRaMacDLSettings
sLoRaMacFrameHeader	inc/mac-header-decode.h	/^typedef struct sLoRaMacFrameHeader$/;"	s
sLoRaMacMessageData	inc/mac-header-decode.h	/^typedef struct sLoRaMacMessageData$/;"	s
sMacHeaderBits	inc/mac-header-decode.h	/^    struct sMacHeaderBits$/;"	s	union:uLoRaMacHeader
s_box	src/aes.c	207;"	d	file:
s_box	src/aes.c	290;"	d	file:
sb_data	src/aes.c	94;"	d	file:
sbox	src/aes.c	/^static const uint_8t sbox[256]  =  sb_data(f1);$/;"	v	file:
search_dn_list	src/pkt_serv.c	/^static dn_pkt_s* search_dn_list(const char* addr) {$/;"	f	file:
sema	inc/gwcfg.h	/^        sem_t sema;				    \/\/ semaphore for sending data$/;"	m	struct:_server::__anon12
sema	inc/gwcfg.h	/^    sem_t*      sema;$/;"	m	struct:_thread_info
semtech	inc/gwcfg.h	/^	semtech,$/;"	e	enum:__anon2
semtech_down	inc/gwcfg.h	/^    semtech_down,$/;"	e	enum:__anon4
semtech_pull_down	src/semtech_serv.c	/^static void semtech_pull_down(void* arg) {$/;"	f	file:
semtech_push_up	src/semtech_serv.c	/^static void semtech_push_up(void* arg) {$/;"	f	file:
semtech_report	src/stats.c	/^static void semtech_report(serv_s *serv) {$/;"	f	file:
semtech_start	src/semtech_serv.c	/^int semtech_start(serv_s* serv) {$/;"	f
semtech_stop	src/semtech_serv.c	/^int semtech_stop(serv_s* serv) {$/;"	f
semtech_up	inc/gwcfg.h	/^    semtech_up,$/;"	e	enum:__anon4
send_buffer	inc/mqtt_service.h	/^	unsigned char *send_buffer;$/;"	m	struct:_mqttsession_s
send_tx_ack	src/fwd.c	/^int send_tx_ack(serv_s* serv, uint8_t token_h, uint8_t token_l, enum jit_error_e error, int32_t error_value) {$/;"	f
serv_list	inc/gwcfg.h	/^    struct serv_list serv_list;$/;"	m	struct:__anon13	typeref:struct:__anon13::serv_list
serv_net_s	inc/gwcfg.h	/^} serv_net_s;$/;"	t	typeref:struct:__anon8
serv_s	inc/gwcfg.h	/^} serv_s;$/;"	t	typeref:struct:_server
serv_type	inc/gwcfg.h	/^} serv_type;$/;"	t	typeref:enum:__anon2
service_start	src/service.c	/^void service_start() {$/;"	f
service_stop	src/service.c	/^void service_stop() {$/;"	f
session	inc/gwcfg.h	/^    void* session;$/;"	m	struct:__anon7
shift_sub_rows	src/aes.c	/^static void shift_sub_rows( uint_8t st[N_BLOCK] )$/;"	f	file:
sig_handler	src/fwd.c	/^static void sig_handler(int sigio) {$/;"	f	file:
skip_quotes	src/parson.c	/^static void skip_quotes(const char **string) {$/;"	f	file:
sock_down	inc/gwcfg.h	/^    int  sock_down;				\/\/ down socket$/;"	m	struct:__anon8
sock_ghost	src/ghost.c	/^static int sock_ghost;			\/* socket for downstream traffic *\/$/;"	v	file:
sock_up	inc/gwcfg.h	/^    int  sock_up;				\/\/ up socket$/;"	m	struct:__anon8
stall_time	inc/gwcfg.h	/^        int  stall_time;$/;"	m	struct:_server::__anon11
stamp	inc/gwcfg.h	/^        uint8_t stamp;              \/\/ 用来标记service，当有服务印上这个标记时，代表和当前的service有关联$/;"	m	struct:_server::__anon9
stamps	inc/gwcfg.h	/^    uint8_t stamps;        \/\/这个指示当前有什么服务对这个包打上了印记$/;"	m	struct:_rxpkts
start_routine	src/utilities.c	/^	void *(*start_routine)(void *);$/;"	m	struct:thr_arg	file:
startup_time	inc/gwcfg.h	/^        time_t startup_time;		\/\/ time of server starting$/;"	m	struct:_server::__anon11
stat_down	inc/stats.h	/^    stat_dw_s stat_down;$/;"	m	struct:__anon27
stat_dw	inc/gwcfg.h	/^        stat_dw_s stat_dw;$/;"	m	struct:__anon13::__anon20
stat_dw_s	inc/stats.h	/^} stat_dw_s;$/;"	t	typeref:struct:__anon25
stat_format	inc/stats.h	/^    char stat_format[16];               \/\/ format for json statistics$/;"	m	struct:__anon27
stat_interval	inc/stats.h	/^    uint16_t stat_interval; 	     \/\/ time interval (in sec) at which statistics are collected and displayed$/;"	m	struct:__anon27
stat_up	inc/stats.h	/^    stat_up_s   stat_up;$/;"	m	struct:__anon27
stat_up_s	inc/stats.h	/^} stat_up_s;$/;"	t	typeref:struct:__anon26
state	inc/gwcfg.h	/^    } state;$/;"	m	struct:_server	typeref:struct:_server::__anon11
stats	inc/gwcfg.h	/^    stats,$/;"	e	enum:__anon4
status_report	inc/stats.h	/^    char status_report[STATUS_SIZE];$/;"	m	struct:__anon27
statusstream	inc/stats.h	/^    bool statusstream;$/;"	m	struct:__anon27
stop_clean_service	src/fwd.c	/^void stop_clean_service(void) {$/;"	f
stop_sig	inc/gwcfg.h	/^        bool stop_sig;$/;"	m	struct:_server::__anon12
str2hex	src/utilities.c	/^void str2hex(uint8_t* dest, char* src, int len) {$/;"	f
string	src/parson.c	/^    char        *string;$/;"	m	union:json_value_value	file:
swapcpy	src/endianext.c	/^void *swapcpy(void *dest, const void *src, size_t n) {$/;"	f
sxcfg	inc/gwcfg.h	/^    char sxcfg[48];$/;"	m	struct:__anon6
syncthread	src/db.c	/^static pthread_t syncthread;$/;"	v	file:
t_down	inc/gwcfg.h	/^        pthread_t t_down;			\/\/ semtech down thread$/;"	m	struct:_server::__anon12
t_up	inc/gwcfg.h	/^        pthread_t t_up;				\/\/ upstream thread$/;"	m	struct:_server::__anon12
thr_arg	src/utilities.c	/^struct thr_arg {$/;"	s	file:
thread	inc/gwcfg.h	/^    } thread;$/;"	m	struct:_server	typeref:struct:_server::__anon12
thread_ghost	src/ghost.c	/^static void thread_ghost(void) {$/;"	f	file:
thread_gps	src/fwd.c	/^static void thread_gps(void) {$/;"	f	file:
thread_info	inc/gwcfg.h	/^} thread_info;$/;"	t	typeref:struct:_thread_info
thread_jit	src/fwd.c	/^static void thread_jit(void) {$/;"	f	file:
thread_rxpkt_recycle	src/fwd.c	/^static void thread_rxpkt_recycle(void) {$/;"	f	file:
thread_timersync	src/timersync.c	/^void thread_timersync(void) {$/;"	f
thread_type	inc/gwcfg.h	/^} thread_type;$/;"	t	typeref:enum:__anon4
thread_up	src/fwd.c	/^static void thread_up(void) {$/;"	f	file:
thread_valid	src/fwd.c	/^static void thread_valid(void) {$/;"	f	file:
thread_watchdog	src/fwd.c	/^static void thread_watchdog(void) {$/;"	f	file:
thrid_ghost	src/ghost.c	/^static pthread_t thrid_ghost;$/;"	v	file:
time_interval	inc/gwcfg.h	/^        uint32_t time_interval;$/;"	m	struct:__anon13::__anon16
time_reference_gps	inc/gwcfg.h	/^        struct tref time_reference_gps; \/* time reference used for UTC <-> timestamp conversion *\/$/;"	m	struct:__anon13::__anon17	typeref:struct:__anon13::__anon17::tref
timersync	inc/gwcfg.h	/^    timersync,$/;"	e	enum:__anon4
tmpstr	src/pkt_serv.c	/^static char tmpstr[16] = {'\\0'};$/;"	v	file:
tobecpy	src/endianext.c	/^void *tobecpy(void *dest, const void *src, size_t n) {$/;"	f
ttn	inc/gwcfg.h	/^	ttn,$/;"	e	enum:__anon2
ttn_down	inc/gwcfg.h	/^    ttn_down,$/;"	e	enum:__anon4
ttn_up	inc/gwcfg.h	/^    ttn_up,$/;"	e	enum:__anon4
tx	inc/gwcfg.h	/^    } tx;$/;"	m	struct:__anon13	typeref:struct:__anon13::__anon18
tx_freq_max	inc/gwcfg.h	/^        uint32_t tx_freq_max[LGW_RF_CHAIN_NB];$/;"	m	struct:__anon13::__anon18
tx_freq_min	inc/gwcfg.h	/^        uint32_t tx_freq_min[LGW_RF_CHAIN_NB];$/;"	m	struct:__anon13::__anon18
txlut	inc/gwcfg.h	/^        struct lgw_tx_gain_lut_s txlut[LGW_RF_CHAIN_NB];$/;"	m	struct:__anon13::__anon18	typeref:struct:__anon13::__anon18::lgw_tx_gain_lut_s
txmode	inc/pkt_service.h	/^    char txmode[8];$/;"	m	struct:_dn_pkt
type	inc/gwcfg.h	/^	    serv_type type;		        \/\/ type of server$/;"	m	struct:_server::__anon9
type	inc/gwcfg.h	/^    thread_type type;$/;"	m	struct:_thread_info
type	src/parson.c	/^    JSON_Value_Type     type;$/;"	m	struct:json_value_t	file:
type_dw_e	inc/stats.h	/^} type_dw_e;$/;"	t	typeref:enum:__anon23
type_up_e	inc/stats.h	/^} type_up_e;$/;"	t	typeref:enum:__anon24
u	src/ghost.c	/^	uint32_t u;$/;"	m	union:__anon1	file:
u16	src/ghost.c	/^static uint16_t u16(uint8_t * p, uint8_t i) {$/;"	f	file:
u32	src/ghost.c	/^static uint32_t u32(uint8_t * p, uint8_t i) {$/;"	f	file:
u8	src/ghost.c	/^static uint8_t u8(uint8_t * p, uint8_t i) {$/;"	f	file:
uLoRaMacDLSettings	inc/mac-header-decode.h	/^typedef union uLoRaMacDLSettings$/;"	u
uLoRaMacFrameCtrl	inc/mac-header-decode.h	/^typedef union uLoRaMacFrameCtrl$/;"	u
uLoRaMacHeader	inc/mac-header-decode.h	/^typedef union uLoRaMacHeader$/;"	u
uint_32t	src/aes.c	/^  typedef unsigned uint_32t;  \/\/ Edited by Semtech - David Roe 1 Dec 13$/;"	t	file:
uint_8t	inc/aes.h	/^typedef unsigned char uint_8t;$/;"	t
update_decrypt_key_128	src/aes.c	/^static void update_decrypt_key_128( uint_8t k[N_BLOCK], uint_8t *rc )$/;"	f	file:
update_decrypt_key_256	src/aes.c	/^static void update_decrypt_key_256( uint_8t k[2 * N_BLOCK], uint_8t *rc )$/;"	f	file:
update_encrypt_key_128	src/aes.c	/^static void update_encrypt_key_128( uint_8t k[N_BLOCK], uint_8t *rc )$/;"	f	file:
update_encrypt_key_256	src/aes.c	/^static void update_encrypt_key_256( uint_8t k[2 * N_BLOCK], uint_8t *rc )$/;"	f	file:
uplink_topic	inc/mqtt_service.h	/^	char *uplink_topic;$/;"	m	struct:_mqttsession_s
uptopic	inc/gwcfg.h	/^    char uptopic[64];$/;"	m	struct:__anon7
usage	src/fwd.c	/^static void usage( void )$/;"	f	file:
value	src/parson.c	/^    JSON_Value_Value    value;$/;"	m	struct:json_value_t	file:
values	src/parson.c	/^    JSON_Value **values;$/;"	m	struct:json_object_t	file:
verify_utf8_sequence	src/parson.c	/^static int verify_utf8_sequence(const unsigned char *string, int *len) {$/;"	f	file:
watchdog	inc/gwcfg.h	/^    watchdog$/;"	e	enum:__anon4
wd_enabled	inc/gwcfg.h	/^        bool     wd_enabled;		      \/* if watchdog enabled   *\/$/;"	m	struct:__anon13::__anon16
xor_block	src/aes.c	/^static void xor_block( void *d, const void *s )$/;"	f	file:
xtal_correct	inc/gwcfg.h	/^        double xtal_correct;$/;"	m	struct:__anon13::__anon15
xtal_correct_ok	inc/gwcfg.h	/^        bool xtal_correct_ok;$/;"	m	struct:__anon13::__anon15
yS	Session.vim	/^nmap yS <Plug>YSurround$/;"	m
ySS	Session.vim	/^nmap ySS <Plug>YSsurround$/;"	m
ySs	Session.vim	/^nmap ySs <Plug>YSsurround$/;"	m
ys	Session.vim	/^nmap ys <Plug>Ysurround$/;"	m
yss	Session.vim	/^nmap yss <Plug>Yssurround$/;"	m
zt	Session.vim	/^normal! zt$/;"	m
¤	Session.vim	/^imap ¤ $a$/;"	m
°	Session.vim	/^imap ° 0i$/;"	m
